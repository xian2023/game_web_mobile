System.register([], function (exports, module) {
  'use strict';
  return {
    execute: function () {

      exports({
        BitMask: BitMask,
        CCClass: CCClass,
        CacheMode: void 0,
        DebugMode: void 0,
        EasingMethod: void 0,
        Enum: Enum,
        Eventify: Eventify,
        ExtrapolationMode: void 0,
        HorizontalTextAlignment: void 0,
        InstanceMaterialType: void 0,
        KeyCode: void 0,
        NodeEventType: void 0,
        NodeSpace: void 0,
        Overflow: void 0,
        PipelineEventType: void 0,
        QuatInterpolationMode: void 0,
        RealInterpolationMode: void 0,
        SystemEventType: void 0,
        TangentWeightMode: void 0,
        TransformBit: void 0,
        VerticalTextAlignment: void 0,
        WorldNode3DToLocalNodeUI: WorldNode3DToLocalNodeUI,
        WorldNode3DToWorldNodeUI: WorldNode3DToWorldNodeUI,
        __checkObsoleteInNamespace__: __checkObsoleteInNamespace__,
        __checkObsolete__: __checkObsolete__,
        _resetDebugSetting: _resetDebugSetting,
        absMax: absMax,
        absMaxComponent: absMaxComponent,
        applyMixins: applyMixins,
        approx: approx,
        assert: assert,
        assertID: assertID,
        assertIsNonNullable: assertIsNonNullable,
        assertIsTrue: assertIsTrue,
        assertsArrayIndex: assertsArrayIndex,
        bezier: bezier,
        bezierByTime: bezierByTime,
        binarySearch: binarySearch,
        binarySearchBy: binarySearchBy,
        binarySearchEpsilon: binarySearchEpsilon,
        ccenum: ccenum,
        clamp: clamp,
        clamp01: clamp01,
        color: color,
        computeRatioByType: computeRatioByType,
        createDefaultPipeline: createDefaultPipeline,
        debug: debug,
        deprecateModuleExportedName: deprecateModuleExportedName,
        deserialize: deserialize,
        earcut: earcut,
        enumerableProps: enumerableProps,
        equals: equals,
        error: error,
        errorID: errorID,
        find: find,
        flattenCodeArray: flattenCodeArray,
        formerlySerializedAs: formerlySerializedAs,
        fragmentText: fragmentText,
        getBaselineOffset: getBaselineOffset,
        getEnglishWordPartAtFirst: getEnglishWordPartAtFirst,
        getEnglishWordPartAtLast: getEnglishWordPartAtLast,
        getError: getError,
        getPathFromRoot: getPathFromRoot,
        getSerializationMetadata: getSerializationMetadata,
        getWorldTransformUntilRoot: getWorldTransformUntilRoot,
        instantiate: instantiate,
        inverseLerp: inverseLerp,
        isCCClassOrFastDefined: isCCClassOrFastDefined,
        isCCObject: isCCObject,
        isDisplayStats: isDisplayStats,
        isEnglishWordPartAtFirst: isEnglishWordPartAtFirst,
        isEnglishWordPartAtLast: isEnglishWordPartAtLast,
        isUnicodeCJK: isUnicodeCJK,
        isUnicodeSpace: isUnicodeSpace,
        isValid: isValid,
        lerp: lerp,
        log: log,
        logID: logID,
        markAsWarning: void 0,
        mat4: mat4,
        murmurhash2_32_gc: murmurhash2_32_gc,
        nextPow2: nextPow2$1,
        pingPong: pingPong,
        pseudoRandom: pseudoRandom,
        pseudoRandomRange: pseudoRandomRange,
        pseudoRandomRangeInt: pseudoRandomRangeInt,
        quat: quat,
        randomRange: randomRange,
        randomRangeInt: randomRangeInt,
        rect: rect,
        removeProperty: void 0,
        repeat: repeat,
        replaceProperty: void 0,
        safeMeasureText: safeMeasureText,
        sampleAnimationCurve: sampleAnimationCurve,
        setDefaultLogTimes: setDefaultLogTimes,
        setDisplayStats: setDisplayStats,
        shift: shift,
        size: size,
        toDegree: toDegree,
        toRadian: toRadian,
        tween: tween,
        tweenUtil: tweenUtil,
        v2: v2,
        v3: v3,
        v4: v4,
        warn: warn,
        warnID: warnID
      });

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
      }

      function _extends() {
        _extends = Object.assign || function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];

            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }

          return target;
        };

        return _extends.apply(this, arguments);
      }

      function _inheritsLoose(subClass, superClass) {
        subClass.prototype = Object.create(superClass.prototype);
        subClass.prototype.constructor = subClass;

        _setPrototypeOf(subClass, superClass);
      }

      function _getPrototypeOf(o) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o);
      }

      function _setPrototypeOf(o, p) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };

        return _setPrototypeOf(o, p);
      }

      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;

        try {
          Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
          return true;
        } catch (e) {
          return false;
        }
      }

      function _construct(Parent, args, Class) {
        if (_isNativeReflectConstruct()) {
          _construct = Reflect.construct;
        } else {
          _construct = function _construct(Parent, args, Class) {
            var a = [null];
            a.push.apply(a, args);
            var Constructor = Function.bind.apply(Parent, a);
            var instance = new Constructor();
            if (Class) _setPrototypeOf(instance, Class.prototype);
            return instance;
          };
        }

        return _construct.apply(null, arguments);
      }

      function _isNativeFunction(fn) {
        return Function.toString.call(fn).indexOf("[native code]") !== -1;
      }

      function _wrapNativeSuper(Class) {
        var _cache = typeof Map === "function" ? new Map() : undefined;

        _wrapNativeSuper = function _wrapNativeSuper(Class) {
          if (Class === null || !_isNativeFunction(Class)) return Class;

          if (typeof Class !== "function") {
            throw new TypeError("Super expression must either be null or a function");
          }

          if (typeof _cache !== "undefined") {
            if (_cache.has(Class)) return _cache.get(Class);

            _cache.set(Class, Wrapper);
          }

          function Wrapper() {
            return _construct(Class, arguments, _getPrototypeOf(this).constructor);
          }

          Wrapper.prototype = Object.create(Class.prototype, {
            constructor: {
              value: Wrapper,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
          return _setPrototypeOf(Wrapper, Class);
        };

        return _wrapNativeSuper(Class);
      }

      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return self;
      }

      function _unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
      }

      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;

        for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

        return arr2;
      }

      function _createForOfIteratorHelperLoose(o, allowArrayLike) {
        var it;

        if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
          if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            return function () {
              if (i >= o.length) return {
                done: true
              };
              return {
                done: false,
                value: o[i++]
              };
            };
          }

          throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
        }

        it = o[Symbol.iterator]();
        return it.next.bind(it);
      }

      function _initializerDefineProperty(target, property, descriptor, context) {
        if (!descriptor) return;
        Object.defineProperty(target, property, {
          enumerable: descriptor.enumerable,
          configurable: descriptor.configurable,
          writable: descriptor.writable,
          value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
        });
      }

      function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
        var desc = {};
        Object.keys(descriptor).forEach(function (key) {
          desc[key] = descriptor[key];
        });
        desc.enumerable = !!desc.enumerable;
        desc.configurable = !!desc.configurable;

        if ('value' in desc || desc.initializer) {
          desc.writable = true;
        }

        desc = decorators.slice().reverse().reduce(function (desc, decorator) {
          return decorator(target, property, desc) || desc;
        }, desc);

        if (context && desc.initializer !== void 0) {
          desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
          desc.initializer = undefined;
        }

        if (desc.initializer === void 0) {
          Object.defineProperty(target, property, desc);
          desc = null;
        }

        return desc;
      }

      function tryDefineGlobal (name, value) {
          const _global = typeof window === 'undefined' ? global : window;
          if (typeof _global[name] === 'undefined') {
              return (_global[name] = value);
          } else {
              // eslint-disable-next-line @typescript-eslint/no-unsafe-return
              return _global[name];
          }
      }

      const NATIVE = false;

      const WECHAT = false;
      tryDefineGlobal('CC_WECHAT', false);
      tryDefineGlobal('CC_BAIDU', false);
      tryDefineGlobal('CC_XIAOMI', false);
      tryDefineGlobal('CC_ALIPAY', false);
      tryDefineGlobal('CC_BYTEDANCE', false);
      tryDefineGlobal('CC_OPPO', false);
      tryDefineGlobal('CC_VIVO', false);
      tryDefineGlobal('CC_HUAWEI', false);
      tryDefineGlobal('CC_COCOSPLAY', false);
      tryDefineGlobal('CC_QTT', false);
      tryDefineGlobal('CC_LINKSURE', false);

      const EDITOR = false;
      tryDefineGlobal('CC_EDITOR', false);

      const PREVIEW = false;
      tryDefineGlobal('CC_PREVIEW', false);
      tryDefineGlobal('CC_BUILD', true);

      const TEST = false;
      tryDefineGlobal('CC_TEST', false);
      tryDefineGlobal('CC_DEBUG', true);
      tryDefineGlobal('CC_DEV', false);

      const MINIGAME = false;
      tryDefineGlobal('CC_MINIGAME', false);

      const RUNTIME_BASED = false;
      tryDefineGlobal('CC_RUNTIME_BASED', false);
      tryDefineGlobal('CC_SUPPORT_JIT', true);

      const JSB = false;
      tryDefineGlobal('CC_JSB', false);

      var _global = typeof window === 'undefined' ? global : window;

      var legacyCC = exports('cclegacy', {
        _global: _global
      });
      legacyCC.internal = {};

      var engineVersion = exports('VERSION', '3.7.1');
      _global.CocosEngine = legacyCC.ENGINE_VERSION = engineVersion;
      _global.cc = legacyCC;

      var ccwindow = typeof globalThis.jsb !== 'undefined' ? typeof jsb.window !== 'undefined' ? jsb.window : globalThis : globalThis;
      _global.ccwindow = ccwindow;

      var INT_BITS = 32;
      var INT_MAX = 0x7fffffff;
      var INT_MIN = -1 << INT_BITS - 1;
      function sign(v) {
        return (v > 0) - (v < 0);
      }
      function abs(v) {
        var mask = v >> INT_BITS - 1;
        return (v ^ mask) - mask;
      }
      function min(x, y) {
        return y ^ (x ^ y) & -(x < y);
      }
      function max(x, y) {
        return x ^ (x ^ y) & -(x < y);
      }
      function isPow2(v) {
        return !(v & v - 1) && !!v;
      }
      function log2(v) {
        var r;
        var shift;
        r = (v > 0xFFFF) << 4;
        v >>>= r;
        shift = (v > 0xFF) << 3;
        v >>>= shift;
        r |= shift;
        shift = (v > 0xF) << 2;
        v >>>= shift;
        r |= shift;
        shift = (v > 0x3) << 1;
        v >>>= shift;
        r |= shift;
        return r | v >> 1;
      }
      function log10(v) {
        return v >= 1000000000 ? 9 : v >= 100000000 ? 8 : v >= 10000000 ? 7 : v >= 1000000 ? 6 : v >= 100000 ? 5 : v >= 10000 ? 4 : v >= 1000 ? 3 : v >= 100 ? 2 : v >= 10 ? 1 : 0;
      }
      function popCount(v) {
        v -= v >>> 1 & 0x55555555;
        v = (v & 0x33333333) + (v >>> 2 & 0x33333333);
        return (v + (v >>> 4) & 0xF0F0F0F) * 0x1010101 >>> 24;
      }
      function countTrailingZeros(v) {
        var c = 32;
        v &= -v;

        if (v) {
          c--;
        }

        if (v & 0x0000FFFF) {
          c -= 16;
        }

        if (v & 0x00FF00FF) {
          c -= 8;
        }

        if (v & 0x0F0F0F0F) {
          c -= 4;
        }

        if (v & 0x33333333) {
          c -= 2;
        }

        if (v & 0x55555555) {
          c -= 1;
        }

        return c;
      }
      function nextPow2(v) {
        --v;
        v |= v >>> 1;
        v |= v >>> 2;
        v |= v >>> 4;
        v |= v >>> 8;
        v |= v >>> 16;
        return v + 1;
      }
      function prevPow2(v) {
        v |= v >>> 1;
        v |= v >>> 2;
        v |= v >>> 4;
        v |= v >>> 8;
        v |= v >>> 16;
        return v - (v >>> 1);
      }
      function parity(v) {
        v ^= v >>> 16;
        v ^= v >>> 8;
        v ^= v >>> 4;
        v &= 0xf;
        return 0x6996 >>> v & 1;
      }
      var REVERSE_TABLE = new Array(256);

      (function (tab) {
        for (var i = 0; i < 256; ++i) {
          var v = i;
          var r = i;
          var s = 7;

          for (v >>>= 1; v; v >>>= 1) {
            r <<= 1;
            r |= v & 1;
            --s;
          }

          tab[i] = r << s & 0xff;
        }
      })(REVERSE_TABLE);

      function reverse(v) {
        return REVERSE_TABLE[v & 0xff] << 24 | REVERSE_TABLE[v >>> 8 & 0xff] << 16 | REVERSE_TABLE[v >>> 16 & 0xff] << 8 | REVERSE_TABLE[v >>> 24 & 0xff];
      }
      function interleave2(x, y) {
        x &= 0xFFFF;
        x = (x | x << 8) & 0x00FF00FF;
        x = (x | x << 4) & 0x0F0F0F0F;
        x = (x | x << 2) & 0x33333333;
        x = (x | x << 1) & 0x55555555;
        y &= 0xFFFF;
        y = (y | y << 8) & 0x00FF00FF;
        y = (y | y << 4) & 0x0F0F0F0F;
        y = (y | y << 2) & 0x33333333;
        y = (y | y << 1) & 0x55555555;
        return x | y << 1;
      }
      function deinterleave2(v, n) {
        v = v >>> n & 0x55555555;
        v = (v | v >>> 1) & 0x33333333;
        v = (v | v >>> 2) & 0x0F0F0F0F;
        v = (v | v >>> 4) & 0x00FF00FF;
        v = (v | v >>> 16) & 0x000FFFF;
        return v << 16 >> 16;
      }
      function interleave3(x, y, z) {
        x &= 0x3FF;
        x = (x | x << 16) & 4278190335;
        x = (x | x << 8) & 251719695;
        x = (x | x << 4) & 3272356035;
        x = (x | x << 2) & 1227133513;
        y &= 0x3FF;
        y = (y | y << 16) & 4278190335;
        y = (y | y << 8) & 251719695;
        y = (y | y << 4) & 3272356035;
        y = (y | y << 2) & 1227133513;
        x |= y << 1;
        z &= 0x3FF;
        z = (z | z << 16) & 4278190335;
        z = (z | z << 8) & 251719695;
        z = (z | z << 4) & 3272356035;
        z = (z | z << 2) & 1227133513;
        return x | z << 2;
      }
      function deinterleave3(v, n) {
        v = v >>> n & 1227133513;
        v = (v | v >>> 2) & 3272356035;
        v = (v | v >>> 4) & 251719695;
        v = (v | v >>> 8) & 4278190335;
        v = (v | v >>> 16) & 0x3FF;
        return v << 22 >> 22;
      }
      function nextCombination(v) {
        var t = v | v - 1;
        return t + 1 | (~t & -~t) - 1 >>> countTrailingZeros(v) + 1;
      }

      var bits = /*#__PURE__*/Object.freeze({
        __proto__: null,
        INT_BITS: INT_BITS,
        INT_MAX: INT_MAX,
        INT_MIN: INT_MIN,
        sign: sign,
        abs: abs,
        min: min,
        max: max,
        isPow2: isPow2,
        log2: log2,
        log10: log10,
        popCount: popCount,
        countTrailingZeros: countTrailingZeros,
        nextPow2: nextPow2,
        prevPow2: prevPow2,
        parity: parity,
        reverse: reverse,
        interleave2: interleave2,
        deinterleave2: deinterleave2,
        interleave3: interleave3,
        deinterleave3: deinterleave3,
        nextCombination: nextCombination
      });
      exports('bits', bits);

      var debugInfos = {
      	"1006": "[Action step]. override me",
      	"1007": "[Action update]. override me",
      	"1008": "[Action reverse]. override me",
      	"1100": "Expected 'data' dict, but not found. Config file: %s",
      	"1101": "Please load the resource first : %s",
      	"1200": "cocos2d: Director: Error in gettimeofday",
      	"1204": "Running scene should not be null",
      	"1205": "The scene should not be null",
      	"1206": "loadScene: The scene index to load (%s) is out of range.",
      	"1207": "loadScene: Unknown name type to load: '%s'",
      	"1208": "loadScene: Failed to load scene '%s' because '%s' is already being loaded.",
      	"1209": "loadScene: Can not load the scene '%s' because it was not in the build settings before playing.",
      	"1210": "Failed to preload '%s', %s",
      	"1211": "loadScene: The scene index to load (%s) is out of range.",
      	"1212": "loadScene: Unknown name type to load: '%s'",
      	"1213": "loadScene: Failed to load scene '%s' because '%s' is already loading",
      	"1214": "loadScene: Can not load the scene '%s' because it was not in the build settings before playing.",
      	"1215": "Failed to preload '%s', %s",
      	"1216": "Director.runSceneImmediate: scene is not valid",
      	"1217": "Director._initOnEngineInitialized: renderer root initialization failed",
      	"1218": "Forward render pipeline initialized.",
      	"1219": "Deferred render pipeline initialized. Note that non-transparent materials with no lighting will not be rendered, such as builtin-unlit.",
      	"1220": "Failed to set shading scale, pipelineSceneData is invalid.",
      	"1221": "Setting orientation is not supported yet.",
      	"1300": "%s is not in the model pool and cannot be destroyed by destroyModel.",
      	"1400": "'%s' is deprecated, please use '%s' instead.",
      	"1404": "cc.spriteFrameCache is removed, please use cc.loader to load and cache sprite frames of atlas format.",
      	"1406": "'%s.%s' is removed",
      	"1408": "'%s' is removed",
      	"1409": "element type is wrong!",
      	"1502": "cc.scheduler.scheduleCallbackForTarget(): target should be non-null.",
      	"1503": "cc.Scheduler.pauseTarget():target should be non-null",
      	"1504": "cc.Scheduler.resumeTarget():target should be non-null",
      	"1505": "cc.Scheduler.isTargetPaused():target should be non-null",
      	"1506": "warning: you CANNOT change update priority in scheduled function",
      	"1507": "scheduler#scheduleSelector. Selector already scheduled. Updating interval from: %.4f to %.4f",
      	"1508": "Argument callback must not be empty",
      	"1509": "Argument target must be non-nullptr",
      	"1510": "cc.Scheduler: Illegal target which doesn't have id, you should do Scheduler.enableForTarget(target) before all scheduler API usage on target",
      	"1511": "cc.Scheduler: pause state of the scheduled task doesn't match the element pause state in Scheduler, the given paused state will be ignored.",
      	"1513": "cc.Scheduler: scheduler stopped using `__instanceId` as id since v2.0, you should do Scheduler.enableForTarget(target) before all scheduler API usage on target",
      	"1607": "removeFromParentAndCleanup is deprecated. Use removeFromParent instead",
      	"1619": "callback function must be non-null",
      	"1620": "interval must be positive",
      	"1623": "Set '%s' to normal node (not persist root node).",
      	"1624": "Replacing with the same sgNode",
      	"1625": "The replacement sgNode should not contain any child.",
      	"1626": "Should not set alpha via 'color', set 'opacity' please.",
      	"1627": "Not support for asynchronous creating node in SG",
      	"1632": "Node name can not include '/'.",
      	"1633": "Internal error, should not remove unknown node from parent.",
      	"1635": "reorderChild: this child is not in children list.",
      	"1636": "Node's zIndex value can't be greater than cc.macro.MAX_ZINDEX, setting to the maximum value",
      	"1637": "Node's zIndex value can't be smaller than cc.macro.MIN_ZINDEX, setting to the minimum value",
      	"1638": "Private node's zIndex can't be set, it will keep cc.macro.MIN_ZINDEX as its value",
      	"1800": "cc._EventListenerKeyboard.checkAvailable(): Invalid EventListenerKeyboard!",
      	"1801": "cc._EventListenerTouchOneByOne.checkAvailable(): Invalid EventListenerTouchOneByOne!",
      	"1802": "cc._EventListenerTouchAllAtOnce.checkAvailable(): Invalid EventListenerTouchAllAtOnce!",
      	"1803": "cc._EventListenerAcceleration.checkAvailable():_onAccelerationEvent must be non-nil",
      	"1900": "Invalid parameter.",
      	"2104": "Layer collision. The name of layer (%s) is collided with the name or value of some layer",
      	"2200": "Design resolution not valid",
      	"2201": "should set resolutionPolicy",
      	"2300": "The touches is more than MAX_TOUCHES, nUnusedIndex = %s",
      	"2402": "Forward pipeline startup failed!",
      	"3103": "cc.Texture.addImage(): path should be non-null",
      	"3119": "Lazy init texture with image element failed due to image loading failure: %s",
      	"3120": "Loading texture with unsupported type: '%s'. Add '%s' into 'cc.macro.SUPPORT_TEXTURE_FORMATS' please.",
      	"3121": "Can't find a texture format supported by the current platform! Please add a fallback format in the editor.",
      	"3122": "Error Texture in %s.",
      	"3123": "Set same texture %s.",
      	"3124": "Texture: setMipRange failed because base level is larger than max level",
      	"3300": "Rect width exceeds maximum margin: %s",
      	"3301": "Rect height exceeds maximum margin: %s",
      	"3500": "0 priority is forbidden for fixed priority since it's used for scene graph based priority.",
      	"3501": "Invalid listener type!",
      	"3502": "Can't set fixed priority with scene graph based listener.",
      	"3503": "Invalid parameters.",
      	"3504": "listener must be a cc.EventListener object when adding a fixed priority listener",
      	"3505": "The listener has been registered, please don't register it again.",
      	"3506": "Unsupported listener target.",
      	"3507": "Invalid scene graph priority!",
      	"3508": "If program goes here, there should be event in dispatch.",
      	"3509": "_inDispatch should be 1 here.",
      	"3510": "%s's scene graph node not contains in the parent's children",
      	"3511": "event is undefined",
      	"3512": "Event manager only support scene graph priority for ui nodes which contain UIComponent",
      	"3520": "Device Motion Event request permission: %s",
      	"3521": "Device Motion Event request permission failed: %s",
      	"3601": "The editor property 'playOnFocus' should be used with 'executeInEditMode' in class '%s'",
      	"3602": "Unknown editor property '%s' in class '%s'.",
      	"3603": "Use 'cc.Float' or 'cc.Integer' instead of 'cc.Number' please.",
      	"3604": "Can only indicate one type attribute for %s.",
      	"3605": "The default value of %s is not instance of %s.",
      	"3606": "No needs to indicate the '%s' attribute for %s, which its default value is type of %s.",
      	"3607": "The default value of %s must be an empty string.",
      	"3608": "The type of %s must be CCString, not String.",
      	"3609": "The type of %s must be CCBoolean, not Boolean.",
      	"3610": "The type of %s must be CCFloat or CCInteger, not Number.",
      	"3611": "Can not indicate the '%s' attribute for %s, which its default value is type of %s.",
      	"3612": "%s Just set the default value to 'new %s()' and it will be handled properly.",
      	"3613": "'No need to use 'serializable: false' or 'editorOnly: true' for the getter of '%s.%s', every getter is actually non-serialized.",
      	"3614": "Should not define constructor for cc.Component %s.",
      	"3615": "Each script can have at most one Component.",
      	"3616": "Should not specify class name %s for Component which defines in project.",
      	"3618": "ctor of '%s' can not be another CCClass",
      	"3623": "Can not use 'editor' attribute, '%s' not inherits from Components.",
      	"3625": "[isChildClassOf] superclass should be function type, not",
      	"3626": "Can't remove '%s' because '%s' depends on it.",
      	"3627": "Should not add renderer component (%s) to a Canvas node.",
      	"3628": "Should not add %s to a node which size is already used by its other component.",
      	"3633": "Properties function of '%s' should return an object!",
      	"3634": "Disallow to use '.' in property name",
      	"3637": "Can not declare %s.%s, it is already defined in the prototype of %s",
      	"3639": "Can not apply the specified attribute to the getter of '%s.%s', attribute index: %s",
      	"3640": "'%s': the setter of '%s' is already defined!",
      	"3641": "Can not construct %s because it contains object property.",
      	"3644": "Please define 'type' parameter of %s.%s as the actual constructor.",
      	"3645": "Please define 'type' parameter of %s.%s as the constructor of %s.",
      	"3646": "Unknown 'type' parameter of %s.%s：%s",
      	"3647": "The length of range array must be equal or greater than 2",
      	"3648": "Can not declare %s.%s method, it is already defined in the properties of %s.",
      	"3652": "Failed to `new %s()` under the hood, %s\nIt is used for getting default values declared in TypeScript in the first place.\nPlease ensure the constructor can be called during the script's initialization.",
      	"3653": "Please do not specifiy \"default\" attribute in decorator of \"%s\" property in \"%s\" class.\nDefault value must be initialized at their declaration:\n\n \n// Before:\n@property({\n  type: cc.SpriteFrame\n  default: null  // <--\n})\nmyProp;\n// After:\n@property({\n  type: cc.SpriteFrame\n})\nmyProp = null;   // <--",
      	"3654": "Please specifiy a default value for \"%s.%s\" property at its declaration:\n\n \n// Before:\n@property(...)\nmyProp;\n// After:\n@property(...)\nmyProp = 0;",
      	"3655": "Can not specifiy \"get\" or \"set\"  attribute in decorator for \"%s\" property in \"%s\" class.\nPlease use:\n\n \n@property(...)\nget %s () {\n    ...\n}\n@property\nset %s (value) {\n    ...\n}",
      	"3659": "Violation error: extending enumerations shall have non-overlaped member names or member values",
      	"3660": "You are explicitly specifying `undefined` type to cc property \"%s\" of cc class \"%s\".\nIs this intended? If not, this may indicate a circular reference.\nFor example:\n\n \n// foo.ts\nimport { _decorator } from 'cc';\nimport { Bar } from './bar';  // Given that './bar' also reference 'foo.ts'.\n                              // When importing './bar', execution of './bar' is hung on to wait execution of 'foo.ts',\n                              // the `Bar` imported here is `undefined` until './bar' finish its execution.\n                              // It leads to that\n@_decorator.ccclass           //  ↓\nexport class Foo {            //  ↓\n    @_decorator.type(Bar)     //  → is equivalent to `@_decorator.type(undefined)`\n    public bar: Bar;          // To eliminate this error, either:\n                              // - Refactor your module structure(recommended), or\n                              // - specify the type as cc class name: `@_decorator.type('Bar'/* or any name you specified for `Bar` */)`\n}",
      	"3700": "internal error: _prefab is undefined",
      	"3701": "Failed to load prefab asset for node '%s'",
      	"3800": "The target can not be made persist because it's not a cc.Node or it doesn't have _id property.",
      	"3801": "The node can not be made persist because it's not under root node.",
      	"3802": "The node can not be made persist because it's not in current scene.",
      	"3803": "The target can not be made persist because it's not a cc.Node or it doesn't have _id property.",
      	"3804": "getComponent: Type must be non-nil",
      	"3805": "Can't add component '%s' because %s already contains the same component.",
      	"3806": "Can't add component '%s' to %s because it conflicts with the existing '%s' derived component.",
      	"3807": "addComponent: Failed to get class '%s'",
      	"3808": "addComponent: Should not add component ('%s') when the scripts are still loading.",
      	"3809": "addComponent: The component to add must be a constructor",
      	"3810": "addComponent: The component to add must be child class of cc.Component",
      	"3811": "_addComponentAt: The component to add must be a constructor",
      	"3812": "_addComponentAt: Index out of range",
      	"3813": "removeComponent: Component must be non-nil",
      	"3814": "Argument must be non-nil",
      	"3815": "Component not owned by this entity",
      	"3816": "Node '%s' is already activating",
      	"3817": "Sorry, the component of '%s' which with an index of %s is corrupted! It has been removed.",
      	"3818": "Failed to read or parse project.json",
      	"3819": "Warning: target element is not a DIV or CANVAS",
      	"3820": "The renderer doesn't support the renderMode %s",
      	"3821": "Cannot change hierarchy while activating or deactivating the parent.",
      	"3822": "addComponent: Cannot add any component to the scene.",
      	"3823": "The enabled component (id: %s, name: %s) doesn't have a valid node",
      	"3900": "Invalid clip to add",
      	"3901": "Invalid clip to remove",
      	"3902": "clip is defaultClip, set force to true to force remove clip and animation state",
      	"3903": "animation state is playing, set force to true to force stop and remove clip and animation state",
      	"3904": "motion path of target [%s] in prop [%s] frame [%s] is not valid",
      	"3905": "sprite frames must be an Array.",
      	"3906": "Can't find easing type [%s]",
      	"3907": "Animation state is not playing or already removed",
      	"3912": "already-playing",
      	"3920": "Current context does not allow root motion.",
      	"3921": "You provided a ill-formed track path. The last component of track path should be property key, or the setter should not be empty.",
      	"3923": "Root motion is ignored since root bone could not be located in animation.",
      	"3924": "Root motion is ignored since the root bone could not be located in scene.",
      	"3925": "Target of hierarchy path should be of type Node.",
      	"3926": "Node \"%s\" has no path \"%s\".",
      	"3927": "Target of component path should be of type Node.",
      	"3928": "Node \"%s\" has no component \"%s\".",
      	"3929": "Target object has no property \"%s\".",
      	"3930": "Can not decide type for untyped track: runtime binding does not provide a getter.",
      	"3931": "Can not decide type for untyped track: got a unsupported value from runtime binding.",
      	"3932": "Common targets should only target Vectors/`Size`/`Color`.",
      	"3933": "Each curve that has common target should be numeric curve and targets string property.",
      	"3934": "Misconfigured legacy curve: the first keyframe value is number but others aren't.",
      	"3935": "We don't currently support conversion of \\`CubicSplineQuatValue\\`.",
      	"3936": "Instancing/Batching enabled for non-baked skinning model '%s', this may result in unexpected rendering artifacts. Consider turning it off in the material if you do not intend to do this.",
      	"3937": "Previous error occurred when instantiating animation clip %s on node %s.",
      	"3938": "'%s' is not found from '%s'. It's specified as the root node to play animation clip '%s'.",
      	"4003": "Label font size can't be shirnked less than 0!",
      	"4004": "force notify all fonts loaded!",
      	"4011": "Property spriteFrame of Font '%s' is invalid. Using system font instead.",
      	"4012": "The texture of Font '%s' must be already loaded on JSB. Using system font instead.",
      	"4013": "Sorry, lineHeight of system font not supported on JSB.",
      	"4200": "MaskType: IMAGE_STENCIL only support WebGL mode.",
      	"4201": "The alphaThreshold invalid in Canvas Mode.",
      	"4202": "The inverted invalid in Canvas Mode.",
      	"4300": "Can not found the %s page.",
      	"4301": "Can not add a page without UITransform.",
      	"4302": "Can not set the scroll view content when it hasn't UITransform or its parent hasn't UITransform.",
      	"4400": "Invalid RichText img tag! The sprite frame name can't be found in the ImageAtlas!",
      	"4500": "Graphics: There is no model in %s.",
      	"4600": "Script attached to '%s' is missing or invalid.",
      	"4700": "The dom control is not created!",
      	"4800": "unknown asset type",
      	"4901": "loadRes: should not specify the extname in %s %s",
      	"4902": "No need to release non-cached asset.",
      	"4914": "Resources url '%s' does not exist.",
      	"4915": "Pack indices and data do not match in size",
      	"4916": "Failed to download package for %s",
      	"4921": "Invalid pipe or invalid index provided!",
      	"4922": "The pipe to be inserted is already in the pipeline!",
      	"4923": "Uuid Loader: Parse asset [ %s ] failed : %s",
      	"4924": "JSON Loader: Input item doesn't contain string content",
      	"4925": "Uuid Loader: Deserialize asset [ %s ] failed : %s",
      	"4926": "Audio Downloader: no web audio context.",
      	"4927": "Audio Downloader: audio not supported on this browser!",
      	"4928": "Load %s failed!",
      	"4929": "Load Webp ( %s ) failed",
      	"4930": "Load image ( %s ) failed",
      	"4932": "Since v1.10, for any atlas (\"%s\") in the \"resources\" directory, it is not possible to find the contained SpriteFrames via `loadRes`, `getRes` or `releaseRes`. Load the SpriteAtlas first and then use `spriteAtlas.getSpriteFrame(name)` instead please.",
      	"4933": "Download Font [ %s ] failed, using Arial or system default font instead",
      	"4934": "Please assure that the full path of sub asset is correct!",
      	"4935": "Failed to skip prefab asset while deserializing PrefabInfo",
      	"5000": "You are trying to destroy a object twice or more.",
      	"5001": "object not yet destroyed",
      	"5100": "Not a plist file!",
      	"5200": "Warning: localStorage isn't enabled. Please confirm browser cookie or privacy option",
      	"5201": "browser don't support web audio",
      	"5202": "This feature supports WebGL render mode only.",
      	"5300": "Type of target to deserialize not matched with data: target is %s, data is %s",
      	"5301": "Can not find script '%s'",
      	"5302": "Can not find class '%s'",
      	"5303": "Failed to deserialize %s, missing _deserialize function.",
      	"5304": "Unable to deserialize version %s data.",
      	"5402": "cc.js.addon called on non-object:",
      	"5403": "cc.js.mixin: arguments must be type object:",
      	"5404": "The base class to extend from must be non-nil",
      	"5405": "The class to extend must be non-nil",
      	"5406": "Class should be extended before assigning any prototype members.",
      	"5500": "'notify' can not be used in 'get/set' !",
      	"5501": "'notify' must be used with 'default' !",
      	"5507": "The 'default' attribute of '%s.%s' must be an array",
      	"5508": "Invalid type of %s.%s",
      	"5510": "The 'type' attribute of '%s.%s' can not be 'Number', use cc.Float or cc.Integer instead please.",
      	"5511": "The 'type' attribute of '%s.%s' is undefined when loading script",
      	"5512": "Can not serialize '%s.%s' because the specified type is anonymous, please provide a class name or set the 'serializable' attribute of '%s.%s' to 'false'.",
      	"5513": "The 'default' value of '%s.%s' should not be used with a 'get' function.",
      	"5514": "The 'default' value of '%s.%s' should not be used with a 'set' function.",
      	"5515": "The 'default' value of '%s.%s' can not be an constructor. Set default to null please.",
      	"5517": "'%s.%s' hides inherited property '%s.%s'. To make the current property override that implementation, add the `override: true` attribute please.",
      	"5601": "Can not get current scene.",
      	"5602": "Scene is destroyed",
      	"5603": "reference node is destroyed",
      	"5700": "no %s or %s on %s",
      	"5800": "%s.lerp not yet implemented.",
      	"5801": "%s.clone not yet implemented.",
      	"5802": "%s.equals not yet implemented.",
      	"5900": "MotionStreak only support WebGL mode.",
      	"5901": "cc.MotionStreak.getOpacity has not been supported.",
      	"5902": "cc.MotionStreak.setOpacity has not been supported.",
      	"6000": "Custom should not be false if file is not specified.",
      	"6001": "The new %s must not be NaN",
      	"6017": "Incomplete or corrupt PNG file",
      	"6018": "Invalid filter algorithm: %s",
      	"6019": "Invalid byte order value.",
      	"6020": "You forgot your towel!",
      	"6021": "Unknown Field Tag: %s",
      	"6022": "Too many bits requested",
      	"6023": "No bits requested",
      	"6024": "Cannot recover from missing StripByteCounts",
      	"6025": "Cannot handle sub-byte bits per sample",
      	"6026": "Cannot handle sub-byte bits per pixel",
      	"6027": "Palette image missing color map",
      	"6028": "Unknown Photometric Interpretation: %s",
      	"6029": "Unkown error",
      	"6030": "cc.ParticleSystem: error decoding or ungzipping textureImageData",
      	"6031": "cc.ParticleSystem: unknown image format with Data",
      	"6032": "cc.ParticleSystem.initWithDictionary() : error loading the texture",
      	"6033": "cc.ParticleSystem: not allowing create to be invoked twice with different particle system",
      	"6034": "cc.ParticleSystem: shouldn't be initialized repetitively, otherwise there will be potential leak",
      	"6035": "cc.ParticleSystem: change material failed, please use proper particle material",
      	"6036": "cc.ParticleSystem: life time should bigger than 1 or buffer will be insufficient",
      	"6400": "asset.url is not usable in core process",
      	"6402": "AssetLibrary has already been initialized!",
      	"6500": "Widget target must be one of the parent nodes of it",
      	"6600": "collider not added or already removed",
      	"6601": "Can't find testFunc for (%s, $s).",
      	"6700": "Can't init canvas '%s' because it conflicts with the existing '%s', the scene should only have one active canvas at the same time.",
      	"6705": "Argument must be non-nil",
      	"6706": "Priority can't be set in RenderRoot2D node",
      	"6800": "Callback of event must be non-nil",
      	"6801": "The message must be provided",
      	"6900": "The thing you want to instantiate must be an object",
      	"6901": "The thing you want to instantiate is nil",
      	"6902": "The thing you want to instantiate is destroyed",
      	"6903": "The instantiate method for given asset do not implemented",
      	"6904": "Can not instantiate array",
      	"6905": "Can not instantiate DOM element",
      	"7100": "%s already defined in Enum.",
      	"7101": "Sorry, 'cc.Enum' not available on this platform, please report this error here: <https://github.com/cocos-creator/engine/issues/new>",
      	"7200": "Method 'initWithTMXFile' is no effect now, please set property 'tmxAsset' instead.",
      	"7201": "Method 'initWithXML' is no effect now, please set property 'tmxAsset' instead.",
      	"7202": "Add component TiledLayer into node failed.",
      	"7203": "Property 'mapLoaded' is unused now. Please write the logic to the callback 'start'.",
      	"7210": "TMX Hexa zOrder not supported",
      	"7211": "TMX invalid value",
      	"7215": "cocos2d: Warning: TMX Layer %s has no tiles",
      	"7216": "cocos2d: TMXFormat: Unsupported TMX version: %s",
      	"7217": "cocos2d: TMXFomat: Unsupported orientation: %s",
      	"7218": "cc.TMXMapInfo.parseXMLFile(): unsupported compression method",
      	"7219": "cc.TMXMapInfo.parseXMLFile(): Only base64 and/or gzip/zlib maps are supported",
      	"7221": "cc.TMXMapInfo.parseXMLFile(): Texture '%s' not found.",
      	"7222": "Parse %s failed.",
      	"7236": "cc.TMXLayer.getTileAt(): TMXLayer: the tiles map has been released",
      	"7237": "cc.TMXLayer.getTileGIDAt(): TMXLayer: the tiles map has been released",
      	"7238": "cc.TMXLayer.setTileGID(): TMXLayer: the tiles map has been released",
      	"7239": "cc.TMXLayer.setTileGID(): invalid gid: %s",
      	"7240": "cc.TMXLayer.getTileFlagsAt(): TMXLayer: the tiles map has been released",
      	"7241": "cc.TiledMap.initWithXML(): Map not found. Please check the filename.",
      	"7401": "Failed to set _defaultArmatureIndex for '%s' because the index is out of range.",
      	"7402": "Failed to set _animationIndex for '%s' because the index is out of range.",
      	"7501": "Failed to set _defaultSkinIndex for '%s' because the index is out of range.",
      	"7502": "Failed to set _animationIndex for '%s' because its skeletonData is invalid.",
      	"7503": "Failed to set _animationIndex for '%s' because the index is out of range.",
      	"7504": "Can not render dynamic created SkeletonData",
      	"7506": "Failed to load spine atlas '$s'",
      	"7507": "Please re-import '%s' because its textures is not initialized! (This workflow will be improved in the future.)",
      	"7508": "The atlas asset of '%s' is not exists!",
      	"7509": "Spine: Animation not found: %s",
      	"7510": "Spine: Animation not found: %s",
      	"7600": "The context of RenderTexture is invalid.",
      	"7601": "cc.RenderTexture._initWithWidthAndHeightForWebGL() : only RGB and RGBA formats are valid for a render texture;",
      	"7602": "Could not attach texture to the framebuffer",
      	"7603": "clearDepth isn't supported on Cocos2d-Html5",
      	"7604": "saveToFile isn't supported on Cocos2d-Html5",
      	"7605": "newCCImage isn't supported on Cocos2d-Html5",
      	"7606": "GFXTexture is null",
      	"7607": "readPixels buffer size smaller than %d",
      	"7700": "On the web is always keep the aspect ratio",
      	"7701": "Can't know status",
      	"7702": "Video player's duration is not ready to get now!",
      	"7703": "Video Downloader: video not supported on this browser!",
      	"7800": "Web does not support loading",
      	"7801": "Web does not support query history",
      	"7802": "Web does not support query history",
      	"7803": "The current browser does not support the GoBack",
      	"7804": "The current browser does not support the GoForward",
      	"7805": "Web does not support zoom",
      	"7900": "cc.math.Matrix3.assign(): current matrix equals matIn",
      	"7901": "cc.math.mat4Assign(): pOut equals pIn",
      	"7902": "cc.mat.Matrix4.assignFrom(): mat4 equals current matrix",
      	"7903": "cc.math.Matrix4 equal: pMat1 and pMat2 are same object.",
      	"7904": "cc.math.Matrix4.extractPlane: Invalid plane index",
      	"7905": "cc.math.mat4Assign(): pOut equals pIn",
      	"7906": "cc.mat.Matrix4.assignFrom(): mat4 equals current matrix",
      	"7907": "cc.math.Matrix4 equals: pMat1 and pMat2 are same object.",
      	"7908": "Invalid matrix mode specified",
      	"7909": "current quaternion is an invalid value",
      	"8000": "Can't handle this field type or size",
      	"8001": "No bytes requested",
      	"8002": "Too many bytes requested",
      	"8003": "Missing StripByteCounts!",
      	"8100": "cocos2d: ERROR: Failed to compile shader:\n %s",
      	"8101": "cocos2d: ERROR: Failed to compile vertex shader",
      	"8102": "cocos2d: ERROR: Failed to compile fragment shader",
      	"8103": "cc.GLProgram.link(): Cannot link invalid program",
      	"8104": "cocos2d: ERROR: Failed to link program: %s",
      	"8105": "cocos2d: cc.shaderCache._loadDefaultShader, error shader type",
      	"8106": "Please load the resource firset : %s",
      	"8107": "cc.GLProgram.getUniformLocationForName(): uniform name should be non-null",
      	"8108": "cc.GLProgram.getUniformLocationForName(): Invalid operation. Cannot get uniform location when program is not initialized",
      	"8109": "modelView matrix is undefined.",
      	"8200": "Please set node's active instead of rigidbody's enabled.",
      	"8300": "Should only one camera exists, please check your project.",
      	"8301": "Camera does not support Canvas Mode.",
      	"8302": "Camera.viewport is deprecated, please use setViewportInOrientedSpace instead.",
      	"8400": "Wrong type arguments, 'filePath' must be a String.",
      	"9000": "Stencil manager does not support level bigger than %d in this device.",
      	"9001": "Stencil manager is already empty, cannot pop any mask",
      	"9002": "Failed to request any buffer from a mesh buffer without accessor",
      	"9003": "The internal state of LinearBufferAccessor have severe issue and irreversible, please check the reason",
      	"9004": "Failed to allocate chunk in StaticVBAccessor, the requested buffer might be too large: %d bytes",
      	"9005": "BATCHER2D_MEM_INCREMENT is too large, the Max value for BATCHER2D_MEM_INCREMENT is 2303KB (smaller than 65536 *9* 4 / 1024 = 2304KB)",
      	"9006": "QuadRenderData is removed, please use MeshRenderData instead.",
      	"9007": "Since v3.6, Because mask changes the inheritance relationship, you can directly manipulate the rendering components under the same node to complete the operation.",
      	"9100": "texture size exceeds current device limits %d/%d",
      	"9201": "Cannot access game frame or container.",
      	"9202": "Setting window size is not supported.",
      	"9300": "The current buffer beyond the limit in ui static component, please reduce the amount",
      	"9301": "The UI has not been initialized",
      	"9302": "Can't getGFXSampler with out device",
      	"9600": "[Physics]: please check to see if physics modules are included",
      	"9610": "[Physics]: cannon.js physics system doesn't support capsule collider",
      	"9611": "[Physics]: builtin physics system doesn't support mesh collider",
      	"9612": "[Physics]: builtin physics system doesn't support cylinder collider",
      	"9620": "[Physics][Ammo]: changing the mesh is not supported after the initialization is completed",
      	"10001": "The sub-mesh contains %d vertices, which beyonds the capability (%d vertices most) of renderer of your platform.",
      	"10002": "Sub-mesh may include at most %d morph targets, but you specified %d.",
      	"11000": "WebGL context lost.",
      	"12001": "BlendFactors are disabled when using custom material, please modify the blend state in the material instead.",
      	"12002": "Can't add renderable component to this node because it already have one.",
      	"12004": "SubModel can only support %d passes.",
      	"12005": "Material already initialized, request aborted.",
      	"12006": "Pass already destroyed.",
      	"12007": "This is old usage, please swap the parameters.",
      	"12008": "GeometryRenderer: too many lines.",
      	"12009": "GeometryRenderer: too many triangles.",
      	"12010": "PassUtils: illegal uniform handle, accessing uniform at offset %d",
      	"12011": "Pass: setUniform is invoked with incompatible uniform data type for binding %d, expected type is %s",
      	"12100": "The font size is too big to be fitted into texture atlas. Please switch to other label cache modes or choose a smaller font size.",
      	"12101": "The asset %s has been destroyed!",
      	"13100": "Incorrect CCON magic.",
      	"13101": "Unknown CCON version number: %d.",
      	"13102": "CCON Format error.",
      	"13103": "Can not encode CCON binary: lack of text encoder.",
      	"13104": "Can not decode CCON binary: lack of text decoder.",
      	"14000": "Graph update has been interrupted since too many transitions(greater than %s) occurred during one frame.",
      	"14100": "Pool.destroy no longer take a function as parameter, Please specify destruct function in the construction of Pool instead",
      	"14200": "Can not update a static mesh.",
      	"14201": "The primitiveIndex is out of range.",
      	"14300": "Can not keep world transform due to the zero scaling of parent node",
      	"14400": "Spline error: less than 2 knots.",
      	"14401": "Spline error: less than 4 knots or not a multiple of 4.\n\n<!-- Rendering algorithm reserved: 15000 - 16000 -->",
      	"15000": "Can not find corresponding diffuse map for environment lighting, use hemisphere diffuse instead, change environment lighting type to regenerate diffuse map",
      	"15001": "Can not find environment map, disable IBL lighting",
      	"15002": "Diffuse map resource is missing, please change environment lighting type to regenerate resource",
      	"15003": "The shadow visible distance is so small that CSM stratification is not effective, Please change the value of shadowDistance so that it is 10 times greater than 0.1",
      	"15004": "The native folder may be generated from older versions, please refer https://docs.cocos.com/creator/manual/en/release-notes/ to upgrade.",
      	"15100": "Camera '%s' clear flag is skybox, but skybox is disabled,  may cause strange background effect, please set camera clear flag to solid color.",
      	"16000": "'%s' is deprecated since v%s.",
      	"16001": "'%s' is deprecated since v%s, please use '%s' instead.",
      	"16002": "'%s' is removed since v%s.",
      	"16003": "'%s' is removed since v%s, please use '%s' instead.",
      	"16101": "The effect('%s') you are looking for does not exist, please confirm the effect name in the editor. NOTE: Since 3.6, the name of the built-in effect has been changed to its name in the editor, please check it out. More information please refer to https://docs.cocos.com/creator/manual/en/shader/effect-inspector.html",
      	"16201": "The asset replacing failed, can not found override asset('%s') for '%s'",
      	"16301": "node '%s' doesn't have any ModelRenderer component, this component will not work. please add ModelRenderer component first",
      	"0100": "%s not yet implemented.",
      	"0200": "You should specify a valid DOM canvas element."
      };

      var ccdocument = ccwindow.document;
      var logList = null;
      var ccLog = console.log.bind(console);
      var ccWarn = ccLog;
      var ccError = ccLog;

      var ccAssert = function ccAssert(condition, message) {
        if (!condition) {
          for (var _len = arguments.length, optionalParams = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
            optionalParams[_key - 2] = arguments[_key];
          }

          console.log("ASSERT: " + formatString.apply(void 0, [message].concat(optionalParams)));
        }
      };

      var ccDebug = ccLog;

      function formatString(message) {
        for (var _len2 = arguments.length, optionalParams = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          optionalParams[_key2 - 1] = arguments[_key2];
        }

        return legacyCC.js.formatStr.apply(null, [message].concat(optionalParams));
      }

      function log(message) {
        for (var _len3 = arguments.length, optionalParams = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
          optionalParams[_key3 - 1] = arguments[_key3];
        }

        return ccLog.apply(void 0, [message].concat(optionalParams));
      }
      function warn(message) {
        for (var _len4 = arguments.length, optionalParams = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
          optionalParams[_key4 - 1] = arguments[_key4];
        }

        return ccWarn.apply(void 0, [message].concat(optionalParams));
      }
      function error(message) {
        for (var _len5 = arguments.length, optionalParams = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
          optionalParams[_key5 - 1] = arguments[_key5];
        }

        return ccError.apply(void 0, [message].concat(optionalParams));
      }
      function assert(value, message) {
        for (var _len6 = arguments.length, optionalParams = new Array(_len6 > 2 ? _len6 - 2 : 0), _key6 = 2; _key6 < _len6; _key6++) {
          optionalParams[_key6 - 2] = arguments[_key6];
        }

        return ccAssert.apply(void 0, [value, message].concat(optionalParams));
      }
      function debug() {
        return ccDebug.apply(void 0, arguments);
      }
      function _resetDebugSetting(mode) {
        ccLog = ccWarn = ccError = ccAssert = ccDebug = function ccDebug() {};

        if (mode === DebugMode.NONE) {
          return;
        }

        if (mode > DebugMode.ERROR) {
          var logToWebPage = function logToWebPage(msg) {
            if (!legacyCC.game.canvas) {
              return;
            }

            if (!logList) {
              var logDiv = ccdocument.createElement('Div');
              logDiv.setAttribute('id', 'logInfoDiv');
              logDiv.setAttribute('width', '200');
              logDiv.setAttribute('height', legacyCC.game.canvas.height);
              var logDivStyle = logDiv.style;
              logDivStyle.zIndex = '99999';
              logDivStyle.position = 'absolute';
              logDivStyle.top = logDivStyle.left = '0';
              logList = ccdocument.createElement('textarea');
              logList.setAttribute('rows', '20');
              logList.setAttribute('cols', '30');
              logList.setAttribute('disabled', 'true');
              var logListStyle = logList.style;
              logListStyle.backgroundColor = 'transparent';
              logListStyle.borderBottom = '1px solid #cccccc';
              logListStyle.borderTopWidth = logListStyle.borderLeftWidth = logListStyle.borderRightWidth = '0px';
              logListStyle.borderTopStyle = logListStyle.borderLeftStyle = logListStyle.borderRightStyle = 'none';
              logListStyle.padding = '0px';
              logListStyle.margin = '0px';
              logDiv.appendChild(logList);
              legacyCC.game.canvas.parentNode.appendChild(logDiv);
            }

            logList.value = logList.value + msg + "\r\n";
            logList.scrollTop = logList.scrollHeight;
          };

          ccError = function ccError(message) {
            for (var _len7 = arguments.length, optionalParams = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
              optionalParams[_key7 - 1] = arguments[_key7];
            }

            logToWebPage("ERROR :  " + formatString.apply(void 0, [message].concat(optionalParams)));
          };

          ccAssert = function ccAssert(condition, message) {
            if (!condition) {
              for (var _len8 = arguments.length, optionalParams = new Array(_len8 > 2 ? _len8 - 2 : 0), _key8 = 2; _key8 < _len8; _key8++) {
                optionalParams[_key8 - 2] = arguments[_key8];
              }

              logToWebPage("ASSERT: " + formatString.apply(void 0, [message].concat(optionalParams)));
            }
          };

          if (mode !== DebugMode.ERROR_FOR_WEB_PAGE) {
            ccWarn = function ccWarn(message) {
              for (var _len9 = arguments.length, optionalParams = new Array(_len9 > 1 ? _len9 - 1 : 0), _key9 = 1; _key9 < _len9; _key9++) {
                optionalParams[_key9 - 1] = arguments[_key9];
              }

              logToWebPage("WARN :  " + formatString.apply(void 0, [message].concat(optionalParams)));
            };
          }

          if (mode === DebugMode.INFO_FOR_WEB_PAGE) {
            ccLog = function ccLog(message) {
              for (var _len10 = arguments.length, optionalParams = new Array(_len10 > 1 ? _len10 - 1 : 0), _key10 = 1; _key10 < _len10; _key10++) {
                optionalParams[_key10 - 1] = arguments[_key10];
              }

              logToWebPage(formatString.apply(void 0, [message].concat(optionalParams)));
            };
          }
        } else if (console) {
          if (!console.error) {
            console.error = console.log;
          }

          if (!console.warn) {
            console.warn = console.log;
          }

          if ( console.error.bind) {
            ccError = console.error.bind(console);
          } else {
            ccError =  function (message) {
              for (var _len11 = arguments.length, optionalParams = new Array(_len11 > 1 ? _len11 - 1 : 0), _key11 = 1; _key11 < _len11; _key11++) {
                optionalParams[_key11 - 1] = arguments[_key11];
              }

              return console.error.apply(console, [message].concat(optionalParams));
            };
          }

          ccAssert = function ccAssert(condition, message) {
            if (!condition) {
              for (var _len12 = arguments.length, optionalParams = new Array(_len12 > 2 ? _len12 - 2 : 0), _key12 = 2; _key12 < _len12; _key12++) {
                optionalParams[_key12 - 2] = arguments[_key12];
              }

              var errorText = formatString.apply(void 0, [message].concat(optionalParams));

              {
                throw new Error(errorText);
              }
            }
          };
        }

        if (mode !== DebugMode.ERROR) {
          if (console.warn.bind) {
            ccWarn = console.warn.bind(console);
          } else {
            ccWarn =  function (message) {
              for (var _len13 = arguments.length, optionalParams = new Array(_len13 > 1 ? _len13 - 1 : 0), _key13 = 1; _key13 < _len13; _key13++) {
                optionalParams[_key13 - 1] = arguments[_key13];
              }

              return console.warn.apply(console, [message].concat(optionalParams));
            };
          }
        }

        if (mode <= DebugMode.INFO) {
          if (console.log.bind) {
            ccLog = console.log.bind(console);
          } else {
            ccLog = function ccLog(message) {
              for (var _len15 = arguments.length, optionalParams = new Array(_len15 > 1 ? _len15 - 1 : 0), _key15 = 1; _key15 < _len15; _key15++) {
                optionalParams[_key15 - 1] = arguments[_key15];
              }

              return console.log.apply(console, [message].concat(optionalParams));
            };
          }
        }

        if (mode <= DebugMode.VERBOSE) {
          if (typeof console.debug === 'function') {
            var vendorDebug = console.debug.bind(console);

            ccDebug = function ccDebug() {
              return vendorDebug.apply(void 0, arguments);
            };
          }
        }
      }
      function _throw(error_) {
        {
          var stack = error_.stack;

          if (stack) {
            error( stack);
          } else {
            error(error_);
          }

          return undefined;
        }
      }

      function getTypedFormatter(type) {
        return function (id) {
          var msg =  debugInfos[id] || 'unknown id' ;

          for (var _len16 = arguments.length, args = new Array(_len16 > 1 ? _len16 - 1 : 0), _key16 = 1; _key16 < _len16; _key16++) {
            args[_key16 - 1] = arguments[_key16];
          }

          if (args.length === 0) {
            return msg;
          }

          return  formatString.apply(void 0, [msg].concat(args)) ;
        };
      }

      var logFormatter = getTypedFormatter();
      function logID(id) {
        for (var _len17 = arguments.length, optionalParams = new Array(_len17 > 1 ? _len17 - 1 : 0), _key17 = 1; _key17 < _len17; _key17++) {
          optionalParams[_key17 - 1] = arguments[_key17];
        }

        log(logFormatter.apply(void 0, [id].concat(optionalParams)));
      }
      var warnFormatter = getTypedFormatter();
      function warnID(id) {
        for (var _len18 = arguments.length, optionalParams = new Array(_len18 > 1 ? _len18 - 1 : 0), _key18 = 1; _key18 < _len18; _key18++) {
          optionalParams[_key18 - 1] = arguments[_key18];
        }

        warn(warnFormatter.apply(void 0, [id].concat(optionalParams)));
      }
      var errorFormatter = getTypedFormatter();
      function errorID(id) {
        for (var _len19 = arguments.length, optionalParams = new Array(_len19 > 1 ? _len19 - 1 : 0), _key19 = 1; _key19 < _len19; _key19++) {
          optionalParams[_key19 - 1] = arguments[_key19];
        }

        error(errorFormatter.apply(void 0, [id].concat(optionalParams)));
      }
      var assertFormatter = getTypedFormatter();
      function assertID(condition, id) {
        if (condition) {
          return;
        }

        for (var _len20 = arguments.length, optionalParams = new Array(_len20 > 2 ? _len20 - 2 : 0), _key20 = 2; _key20 < _len20; _key20++) {
          optionalParams[_key20 - 2] = arguments[_key20];
        }

        assert(false, assertFormatter.apply(void 0, [id].concat(optionalParams)));
      }
      var DebugMode;

      (function (DebugMode) {
        DebugMode[DebugMode["NONE"] = 0] = "NONE";
        DebugMode[DebugMode["VERBOSE"] = 1] = "VERBOSE";
        DebugMode[DebugMode["INFO"] = 2] = "INFO";
        DebugMode[DebugMode["WARN"] = 3] = "WARN";
        DebugMode[DebugMode["ERROR"] = 4] = "ERROR";
        DebugMode[DebugMode["INFO_FOR_WEB_PAGE"] = 5] = "INFO_FOR_WEB_PAGE";
        DebugMode[DebugMode["WARN_FOR_WEB_PAGE"] = 6] = "WARN_FOR_WEB_PAGE";
        DebugMode[DebugMode["ERROR_FOR_WEB_PAGE"] = 7] = "ERROR_FOR_WEB_PAGE";
      })(DebugMode || (DebugMode = exports('DebugMode', {})));

      function getError(errorId) {
        for (var _len21 = arguments.length, param = new Array(_len21 > 1 ? _len21 - 1 : 0), _key21 = 1; _key21 < _len21; _key21++) {
          param[_key21 - 1] = arguments[_key21];
        }

        return errorFormatter.apply(void 0, [errorId].concat(param));
      }
      function isDisplayStats() {
        return legacyCC.profiler ? legacyCC.profiler.isShowingStats() : false;
      }
      function setDisplayStats(displayStats) {
        if (legacyCC.profiler) {
          displayStats ? legacyCC.profiler.showStats() : legacyCC.profiler.hideStats();
        }
      }

      var debug$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        log: log,
        warn: warn,
        error: error,
        assert: assert,
        debug: debug,
        _resetDebugSetting: _resetDebugSetting,
        _throw: _throw,
        logID: logID,
        warnID: warnID,
        errorID: errorID,
        assertID: assertID,
        get DebugMode () { return DebugMode; },
        getError: getError,
        isDisplayStats: isDisplayStats,
        setDisplayStats: setDisplayStats
      });

      var NonUuidMark = '.';
      var IDGenerator = function () {
        function IDGenerator(category) {
          this.id = void 0;
          this.prefix = void 0;
          this.id = 0 | Math.random() * 998;
          this.prefix = category ? category + NonUuidMark : '';
        }

        var _proto = IDGenerator.prototype;

        _proto.getNewId = function getNewId() {

          return this.prefix + (++this.id).toString();
        };

        return IDGenerator;
      }();
      IDGenerator.global = new IDGenerator('global');

      var tempCIDGenerator = new IDGenerator('TmpCId.');
      var aliasesTag = typeof Symbol === 'undefined' ? '__aliases__' : Symbol('[[Aliases]]');
      var classNameTag = '__classname__';
      var classIdTag = '__cid__';
      function isNumber(object) {
        return typeof object === 'number' || object instanceof Number;
      }
      function isString(object) {
        return typeof object === 'string' || object instanceof String;
      }
      function isEmptyObject(obj) {
        for (var key in obj) {
          return false;
        }

        return true;
      }
      var value = function () {
        var descriptor = {
          value: undefined,
          enumerable: false,
          writable: false,
          configurable: true
        };
        return function (object, propertyName, value_, writable, enumerable) {
          descriptor.value = value_;
          descriptor.writable = writable;
          descriptor.enumerable = enumerable;
          Object.defineProperty(object, propertyName, descriptor);
          descriptor.value = undefined;
        };
      }();
      var getset = function () {
        var descriptor = {
          get: undefined,
          set: undefined,
          enumerable: false
        };
        return function (object, propertyName, getter, setter, enumerable, configurable) {
          if (enumerable === void 0) {
            enumerable = false;
          }

          if (configurable === void 0) {
            configurable = false;
          }

          if (typeof setter === 'boolean') {
            console.log('Set `setter` to boolean is deprecated. Please don not use like this again.');
            enumerable = setter;
            setter = undefined;
          }

          descriptor.get = getter;
          descriptor.set = setter;
          descriptor.enumerable = enumerable;
          descriptor.configurable = configurable;
          Object.defineProperty(object, propertyName, descriptor);
          descriptor.get = undefined;
          descriptor.set = undefined;
        };
      }();
      var get = function () {
        var descriptor = {
          get: undefined,
          enumerable: false,
          configurable: false
        };
        return function (object, propertyName, getter, enumerable, configurable) {
          descriptor.get = getter;
          descriptor.enumerable = enumerable;
          descriptor.configurable = configurable;
          Object.defineProperty(object, propertyName, descriptor);
          descriptor.get = undefined;
        };
      }();
      var set = function () {
        var descriptor = {
          set: undefined,
          enumerable: false,
          configurable: false
        };
        return function (object, propertyName, setter, enumerable, configurable) {
          descriptor.set = setter;
          descriptor.enumerable = enumerable;
          descriptor.configurable = configurable;
          Object.defineProperty(object, propertyName, descriptor);
          descriptor.set = undefined;
        };
      }();
      function createMap(forceDictMode) {
        var map = Object.create(null);

        if (forceDictMode) {
          var INVALID_IDENTIFIER_1 = '.';
          var INVALID_IDENTIFIER_2 = '/';
          map[INVALID_IDENTIFIER_1] = 1;
          map[INVALID_IDENTIFIER_2] = 1;
          delete map[INVALID_IDENTIFIER_1];
          delete map[INVALID_IDENTIFIER_2];
        }

        return map;
      }
      function getClassName(objOrCtor) {
        if (typeof objOrCtor === 'function') {
          var prototype = objOrCtor.prototype;

          if (prototype && prototype.hasOwnProperty(classNameTag) && prototype[classNameTag]) {
            return prototype[classNameTag];
          }

          var ret = '';

          if (objOrCtor.name) {
            ret = objOrCtor.name;
          }

          if (objOrCtor.toString) {
            var arr;
            var str = objOrCtor.toString();

            if (str.charAt(0) === '[') {
              arr = /\[\w+\s*(\w+)\]/.exec(str);
            } else {
              arr = /function\s*(\w+)/.exec(str);
            }

            if (arr && arr.length === 2) {
              ret = arr[1];
            }
          }

          return ret !== 'Object' ? ret : '';
        } else if (objOrCtor && objOrCtor.constructor) {
          return getClassName(objOrCtor.constructor);
        }

        return '';
      }
      function obsolete(object, obsoleted, newExpr, writable) {
        var extractPropName = /([^.]+)$/;
        var oldProp = extractPropName.exec(obsoleted)[0];
        var newProp = extractPropName.exec(newExpr)[0];

        function getter() {

          return this[newProp];
        }

        function setter(value_) {

          this[newProp] = value_;
        }

        if (writable) {
          getset(object, oldProp, getter, setter);
        } else {
          get(object, oldProp, getter);
        }
      }
      function obsoletes(obj, objName, props, writable) {
        for (var obsoleted in props) {
          var newName = props[obsoleted];
          obsolete(obj, objName + "." + obsoleted, newName, writable);
        }
      }
      var REGEXP_NUM_OR_STR = /(%d)|(%s)/;
      var REGEXP_STR = /%s/;
      function formatStr(msg) {
        for (var _len = arguments.length, subst = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          subst[_key - 1] = arguments[_key];
        }

        if (arguments.length === 0) {
          return '';
        }

        if (subst.length === 0) {
          return "" + msg;
        }

        var hasSubstitution = typeof msg === 'string' && REGEXP_NUM_OR_STR.test(msg);

        if (hasSubstitution) {
          for (var _iterator = _createForOfIteratorHelperLoose(subst), _step; !(_step = _iterator()).done;) {
            var arg = _step.value;
            var regExpToTest = typeof arg === 'number' ? REGEXP_NUM_OR_STR : REGEXP_STR;

            if (regExpToTest.test(msg)) {
              var notReplaceFunction = "" + arg;
              msg = msg.replace(regExpToTest, notReplaceFunction);
            } else {
              msg += " " + arg;
            }
          }
        } else {
          for (var _iterator2 = _createForOfIteratorHelperLoose(subst), _step2; !(_step2 = _iterator2()).done;) {
            var _arg = _step2.value;
            msg += " " + _arg;
          }
        }

        return msg;
      }
      function shiftArguments() {
        var len = arguments.length - 1;
        var args = new Array(len);

        for (var i = 0; i < len; ++i) {
          args[i] = arguments[i + 1];
        }

        return args;
      }
      function getPropertyDescriptor(object, propertyName) {
        while (object) {
          var pd = Object.getOwnPropertyDescriptor(object, propertyName);

          if (pd) {
            return pd;
          }

          object = Object.getPrototypeOf(object);
        }

        return null;
      }

      function _copyProp(name, source, target) {
        var pd = getPropertyDescriptor(source, name);

        if (pd) {
          Object.defineProperty(target, name, pd);
        }
      }

      function copyAllProperties(source, target, excepts) {
        var propertyNames = Object.getOwnPropertyNames(source);

        for (var i = 0, len = propertyNames.length; i < len; ++i) {
          var propertyName = propertyNames[i];

          if (excepts.indexOf(propertyName) !== -1) {
            continue;
          }

          _copyProp(propertyName, source, target);
        }
      }
      function addon(object) {
        object = object || {};

        for (var _len2 = arguments.length, sources = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          sources[_key2 - 1] = arguments[_key2];
        }

        for (var _i = 0, _sources = sources; _i < _sources.length; _i++) {
          var source = _sources[_i];

          if (source) {
            if (typeof source !== 'object') {
              errorID(5402, source);
              continue;
            }

            for (var name in source) {
              if (!(name in object)) {
                _copyProp(name, source, object);
              }
            }
          }
        }

        return object;
      }
      function mixin(object) {
        object = object || {};

        for (var _len3 = arguments.length, sources = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
          sources[_key3 - 1] = arguments[_key3];
        }

        for (var _i2 = 0, _sources2 = sources; _i2 < _sources2.length; _i2++) {
          var source = _sources2[_i2];

          if (source) {
            if (typeof source !== 'object') {
              errorID(5403, source);
              continue;
            }

            for (var name in source) {
              _copyProp(name, source, object);
            }
          }
        }

        return object;
      }
      function extend(cls, base) {

        for (var p in base) {
          if (base.hasOwnProperty(p)) {
            cls[p] = base[p];
          }
        }

        cls.prototype = Object.create(base.prototype, {
          constructor: {
            value: cls,
            writable: true,
            configurable: true
          }
        });
        return cls;
      }
      function getSuper(constructor) {
        var proto = constructor.prototype;
        var dunderProto = proto && Object.getPrototypeOf(proto);
        return dunderProto && dunderProto.constructor;
      }
      function isChildClassOf(subclass, superclass) {
        if (subclass && superclass) {
          if (typeof subclass !== 'function') {
            return false;
          }

          if (typeof superclass !== 'function') {

            return false;
          }

          if (subclass === superclass) {
            return true;
          }

          for (;;) {
            subclass = getSuper(subclass);

            if (!subclass) {
              return false;
            }

            if (subclass === superclass) {
              return true;
            }
          }
        }

        return false;
      }
      function clear(object) {
        for (var _i3 = 0, _Object$keys = Object.keys(object); _i3 < _Object$keys.length; _i3++) {
          var key = _Object$keys[_i3];
          delete object[key];
        }
      }

      function isTempClassId(id) {
        return typeof id !== 'string' || id.startsWith(tempCIDGenerator.prefix);
      }

      var _idToClass = createMap(true);
      var _nameToClass = createMap(true);

      function setup(tag, table, allowExist) {
        return function (id, constructor) {
          if (constructor.prototype.hasOwnProperty(tag)) {
            delete table[constructor.prototype[tag]];
          }

          value(constructor.prototype, tag, id);

          if (id) {
            var registered = table[id];

            if (!allowExist && registered && registered !== constructor) {
              var err = "A Class already exists with the same " + tag + " : \"" + id + "\".";

              error(err);
            } else {
              table[id] = constructor;
            }
          }
        };
      }

      var _setClassId = setup('__cid__', _idToClass, false);
      var doSetClassName = setup('__classname__', _nameToClass, true);
      function setClassName(className, constructor) {
        doSetClassName(className, constructor);

        if (!constructor.prototype.hasOwnProperty(classIdTag)) {
          var id = className || tempCIDGenerator.getNewId();

          if (id) {
            _setClassId(id, constructor);
          }
        }
      }
      function setClassAlias(target, alias) {
        var nameRegistry = _nameToClass[alias];
        var idRegistry = _idToClass[alias];
        var ok = true;

        if (nameRegistry && nameRegistry !== target) {
          error("\"" + alias + "\" has already been set as name or alias of another class.");
          ok = false;
        }

        if (idRegistry && idRegistry !== target) {
          error("\"" + alias + "\" has already been set as id or alias of another class.");
          ok = false;
        }

        if (ok) {
          var classAliases = target[aliasesTag];

          if (!classAliases) {
            classAliases = [];
            target[aliasesTag] = classAliases;
          }

          classAliases.push(alias);
          _nameToClass[alias] = target;
          _idToClass[alias] = target;
        }
      }
      function unregisterClass() {
        for (var _len4 = arguments.length, constructors = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
          constructors[_key4] = arguments[_key4];
        }

        for (var _i4 = 0, _constructors = constructors; _i4 < _constructors.length; _i4++) {
          var _constructor = _constructors[_i4];
          var p = _constructor.prototype;
          var classId = p[classIdTag];

          if (classId) {
            delete _idToClass[classId];
          }

          var classname = p[classNameTag];

          if (classname) {
            delete _nameToClass[classname];
          }

          var aliases = p[aliasesTag];

          if (aliases) {
            for (var iAlias = 0; iAlias < aliases.length; ++iAlias) {
              var alias = aliases[iAlias];
              delete _nameToClass[alias];
              delete _idToClass[alias];
            }
          }
        }
      }
      function _getClassById(classId) {
        return getClassById(classId);
      }
      function getClassById(classId) {
        return _idToClass[classId];
      }
      function getClassByName(classname) {
        return _nameToClass[classname];
      }
      function _getClassId(obj, allowTempId) {
        return getClassId(obj, allowTempId);
      }
      function getClassId(obj, allowTempId) {
        allowTempId = typeof allowTempId !== 'undefined' ? allowTempId : true;
        var res;

        if (typeof obj === 'function' && obj.prototype.hasOwnProperty(classIdTag)) {
          res = obj.prototype[classIdTag];

          if (!allowTempId && ( EDITOR) && isTempClassId(res)) {
            return '';
          }

          return res;
        }

        if (obj && obj.constructor) {
          var prototype = obj.constructor.prototype;

          if (prototype && prototype.hasOwnProperty(classIdTag)) {
            res = obj[classIdTag];

            if (!allowTempId && ( EDITOR) && isTempClassId(res)) {
              return '';
            }

            return res;
          }
        }

        return '';
      }

      var Pool = function () {
        var _proto = Pool.prototype;

        _proto.get = function get() {
          return this._get();
        };

        function Pool(_0, _1) {
          this.count = void 0;
          this._pool = void 0;
          this._cleanup = void 0;
          var size = _1 === undefined ? _0 : _1;
          var cleanupFunc = _1 === undefined ? null : _0;
          this.count = 0;
          this._pool = new Array(size);
          this._cleanup = cleanupFunc;
        }

        _proto._get = function _get() {
          if (this.count > 0) {
            --this.count;
            var cache = this._pool[this.count];
            this._pool[this.count] = null;
            return cache;
          }

          return null;
        };

        _proto.put = function put(obj) {
          var pool = this._pool;

          if (this.count < pool.length) {
            if (this._cleanup && this._cleanup(obj) === false) {
              return;
            }

            pool[this.count] = obj;
            ++this.count;
          }
        };

        _proto.resize = function resize(length) {
          if (length >= 0) {
            this._pool.length = length;

            if (this.count > length) {
              this.count = length;
            }
          }
        };

        return Pool;
      }();

      var MutableForwardIterator = function () {
        function MutableForwardIterator(array) {
          this.i = 0;
          this.array = array;
        }

        var _proto = MutableForwardIterator.prototype;

        _proto.remove = function remove(value) {
          var index = this.array.indexOf(value);

          if (index >= 0) {
            this.removeAt(index);
          }
        };

        _proto.removeAt = function removeAt(i) {
          this.array.splice(i, 1);

          if (i <= this.i) {
            --this.i;
          }
        };

        _proto.fastRemove = function fastRemove(value) {
          var index = this.array.indexOf(value);

          if (index >= 0) {
            this.fastRemoveAt(index);
          }
        };

        _proto.fastRemoveAt = function fastRemoveAt(i) {
          var array = this.array;
          array[i] = array[array.length - 1];
          --array.length;

          if (i <= this.i) {
            --this.i;
          }
        };

        _proto.push = function push(item) {
          this.array.push(item);
        };

        _createClass(MutableForwardIterator, [{
          key: "length",
          get: function get() {
            return this.array.length;
          },
          set: function set(value) {
            this.array.length = value;

            if (this.i >= value) {
              this.i = value - 1;
            }
          }
        }]);

        return MutableForwardIterator;
      }();

      function removeAt(array, index) {
        array.splice(index, 1);
      }
      function fastRemoveAt(array, index) {
        var length = array.length;

        if (index < 0 || index >= length) {
          return;
        }

        array[index] = array[length - 1];
        array.length = length - 1;
      }
      function remove(array, value) {
        var index = array.indexOf(value);

        if (index >= 0) {
          removeAt(array, index);
          return true;
        } else {
          return false;
        }
      }
      function fastRemove(array, value) {
        var index = array.indexOf(value);

        if (index >= 0) {
          array[index] = array[array.length - 1];
          --array.length;
        }
      }
      function removeIf(array, predicate) {
        var index = array.findIndex(predicate);

        if (index >= 0) {
          var _value = array[index];
          removeAt(array, index);
          return _value;
        }
      }
      function verifyType(array, type) {
        if (array && array.length > 0) {
          for (var _iterator = _createForOfIteratorHelperLoose(array), _step; !(_step = _iterator()).done;) {
            var item = _step.value;

            if (!(item instanceof type)) {
              logID(1300);
              return false;
            }
          }
        }

        return true;
      }
      function removeArray(array, removals) {
        for (var i = 0, l = removals.length; i < l; i++) {
          remove(array, removals[i]);
        }
      }
      function appendObjectsAt(array, objects, index) {
        array.splice.apply(array, [index, 0].concat(objects));
        return array;
      }
      function contains(array, value) {
        return array.indexOf(value) >= 0;
      }
      function copy(array) {
        var len = array.length;
        var cloned = new Array(len);

        for (var i = 0; i < len; i += 1) {
          cloned[i] = array[i];
        }

        return cloned;
      }

      var array = /*#__PURE__*/Object.freeze({
        __proto__: null,
        removeAt: removeAt,
        fastRemoveAt: fastRemoveAt,
        remove: remove,
        fastRemove: fastRemove,
        removeIf: removeIf,
        verifyType: verifyType,
        removeArray: removeArray,
        appendObjectsAt: appendObjectsAt,
        contains: contains,
        copy: copy,
        MutableForwardIterator: MutableForwardIterator
      });

      var js = {
        IDGenerator: IDGenerator,
        Pool: Pool,
        array: array,
        isNumber: isNumber,
        isString: isString,
        isEmptyObject: isEmptyObject,
        getPropertyDescriptor: getPropertyDescriptor,
        addon: addon,
        mixin: mixin,
        extend: extend,
        getSuper: getSuper,
        isChildClassOf: isChildClassOf,
        clear: clear,
        value: value,
        getset: getset,
        get: get,
        set: set,
        unregisterClass: unregisterClass,
        getClassName: getClassName,
        setClassName: setClassName,
        setClassAlias: setClassAlias,
        getClassByName: getClassByName,
        getClassById: getClassById,

        get _registeredClassNames() {
          return _extends({}, _nameToClass);
        },

        set _registeredClassNames(value) {
          clear(_nameToClass);
          Object.assign(_nameToClass, value);
        },

        get _registeredClassIds() {
          return _extends({}, _idToClass);
        },

        set _registeredClassIds(value) {
          clear(_idToClass);
          Object.assign(_idToClass, value);
        },

        _getClassId: _getClassId,
        getClassId: getClassId,
        _setClassId: _setClassId,
        _getClassById: _getClassById,
        obsolete: obsolete,
        obsoletes: obsoletes,
        formatStr: formatStr,
        shiftArguments: shiftArguments,
        createMap: createMap
      };
      legacyCC.js = js;

      var js$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        array: array,
        js: js,
        IDGenerator: IDGenerator,
        Pool: Pool,
        isNumber: isNumber,
        isString: isString,
        isEmptyObject: isEmptyObject,
        value: value,
        getset: getset,
        get: get,
        set: set,
        createMap: createMap,
        getClassName: getClassName,
        obsolete: obsolete,
        obsoletes: obsoletes,
        formatStr: formatStr,
        shiftArguments: shiftArguments,
        getPropertyDescriptor: getPropertyDescriptor,
        copyAllProperties: copyAllProperties,
        addon: addon,
        mixin: mixin,
        extend: extend,
        getSuper: getSuper,
        isChildClassOf: isChildClassOf,
        clear: clear,
        _idToClass: _idToClass,
        _nameToClass: _nameToClass,
        _setClassId: _setClassId,
        setClassName: setClassName,
        setClassAlias: setClassAlias,
        unregisterClass: unregisterClass,
        _getClassById: _getClassById,
        getClassById: getClassById,
        getClassByName: getClassByName,
        _getClassId: _getClassId,
        getClassId: getClassId
      });
      exports('js', js$1);

      function BitMask(obj) {
        if ('__bitmask__' in obj) {
          return obj;
        }

        value(obj, '__bitmask__', null, true);
        var lastIndex = -1;
        var keys = Object.keys(obj);

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var val = obj[key];

          if (val === -1) {
            val = ++lastIndex;
            obj[key] = val;
          } else if (typeof val === 'number') {
            lastIndex = val;
          } else if (typeof val === 'string' && Number.isInteger(parseFloat(key))) {
            continue;
          }

          var reverseKey = "" + val;

          if (key !== reverseKey) {

            value(obj, reverseKey, key);
          }
        }

        return obj;
      }

      BitMask.isBitMask = function (BitMaskType) {
        return BitMaskType && BitMaskType.hasOwnProperty('__bitmask__');
      };

      BitMask.getList = function (BitMaskDef) {
        if (BitMaskDef.__bitmask__) {
          return BitMaskDef.__bitmask__;
        }

        var bitlist = BitMaskDef.__bitmask__ = [];

        for (var name in BitMaskDef) {
          var v = BitMaskDef[name];

          if (Number.isInteger(v)) {
            bitlist.push({
              name: name,
              value: v
            });
          }
        }

        bitlist.sort(function (a, b) {
          return a.value - b.value;
        });
        return bitlist;
      };
      legacyCC.BitMask = BitMask;

      function assertIsNonNullable(expr, message) {
        assertIsTrue(!(expr === null || expr === undefined), message);
      }
      function assertIsTrue(expr, message) {
        if ( !expr) {
          throw new Error("Assertion failed: " + (message !== null && message !== void 0 ? message : '<no-message>'));
        }
      }
      function assertsArrayIndex(array, index) {
        assertIsTrue(index >= 0 && index < array.length, "Array index " + index + " out of bounds: [0, " + array.length + ")");
      }

      function Enum(obj) {
        if ('__enums__' in obj) {
          return obj;
        }

        value(obj, '__enums__', null, true);
        return Enum.update(obj);
      }

      Enum.update = function (obj) {
        var lastIndex = -1;
        var keys = Object.keys(obj);

        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var val = obj[key];

          if (val === -1) {
            val = ++lastIndex;
            obj[key] = val;
          } else if (typeof val === 'number') {
            lastIndex = val;
          } else if (typeof val === 'string' && Number.isInteger(parseFloat(key))) {
            continue;
          }

          var reverseKey = "" + val;

          if (key !== reverseKey) {

            value(obj, reverseKey, key);
          }
        }

        if (Array.isArray(obj.__enums__)) {
          updateList(obj);
        }

        return obj;
      };

      (function (_Enum) {})(Enum || (Enum = exports('Enum', {})));

      Enum.isEnum = function (enumType) {
        return enumType && enumType.hasOwnProperty('__enums__');
      };

      function assertIsEnum(enumType) {
        assertIsTrue(enumType.hasOwnProperty('__enums__'));
      }

      Enum.getList = function (enumType) {
        assertIsEnum(enumType);

        if (enumType.__enums__) {
          return enumType.__enums__;
        }

        return updateList(enumType);
      };

      function updateList(enumType) {
        assertIsEnum(enumType);
        var enums = enumType.__enums__ || [];
        enums.length = 0;

        for (var name in enumType) {
          var v = enumType[name];

          if (Number.isInteger(v)) {
            enums.push({
              name: name,
              value: v
            });
          }
        }

        enums.sort(function (a, b) {
          return a.value - b.value;
        });
        enumType.__enums__ = enums;
        return enums;
      }

      Enum.sortList = function (enumType, compareFn) {
        assertIsEnum(enumType);

        if (!Array.isArray(enumType.__enums__)) {
          return;
        }

        enumType.__enums__.sort(compareFn);
      };

      function ccenum(enumType) {
        if (!('__enums__' in enumType)) {
          value(enumType, '__enums__', null, true);
        }
      }
      legacyCC.Enum = Enum;

      var ValueType = exports('ValueType', function () {
        function ValueType() {}

        var _proto = ValueType.prototype;

        _proto.clone = function clone() {
          errorID(100, getClassName(this) + ".clone");
          return this;
        };

        _proto.equals = function equals(other) {
          return false;
        };

        _proto.set = function set(other) {
          errorID(100, getClassName(this) + ".set");
        };

        _proto.toString = function toString() {
          return "";
        };

        return ValueType;
      }());
      setClassName('cc.ValueType', ValueType);
      legacyCC.ValueType = ValueType;

      var Category;

      (function (Category) {
        Category["PATH"] = "path";
        Category["ENGINE"] = "engine";
        Category["ASSETS"] = "assets";
        Category["SCRIPTING"] = "scripting";
        Category["PHYSICS"] = "physics";
        Category["RENDERING"] = "rendering";
        Category["LAUNCH"] = "launch";
        Category["SCREEN"] = "screen";
        Category["SPLASH_SCREEN"] = "splashScreen";
        Category["ANIMATION"] = "animation";
        Category["PROFILING"] = "profiling";
        Category["PLUGINS"] = "plugins";
        Category["XR"] = "xr";
      })(Category || (Category = {}));

      var Settings = exports('Settings', function () {
        function Settings() {
          this._settings = {};
          this._override = {};
        }

        var _proto = Settings.prototype;

        _proto.init = function init(path, overrides) {
          var _this = this;

          if (path === void 0) {
            path = '';
          }

          if (overrides === void 0) {
            overrides = {};
          }

          for (var categoryName in overrides) {
            var category = overrides[categoryName];

            if (category) {
              for (var name in category) {
                this.overrideSettings(categoryName, name, category[name]);
              }
            }
          }

          if (!path) return Promise.resolve();
          return new Promise(function (resolve, reject) {
            {
              var xhr = new XMLHttpRequest();
              xhr.open('GET', path);
              xhr.responseType = 'text';

              xhr.onload = function () {
                _this._settings = JSON.parse(xhr.response);
                resolve();
              };

              xhr.onerror = function () {
                reject(new Error('request settings failed!'));
              };

              xhr.send(null);
            }
          });
        };

        _proto.overrideSettings = function overrideSettings(category, name, value) {
          if (!(category in this._override)) {
            this._override[category] = {};
          }

          this._override[category][name] = value;
        };

        _proto.querySettings = function querySettings(category, name) {
          if (category in this._override) {
            var categorySettings = this._override[category];

            if (categorySettings && name in categorySettings) {
              return categorySettings[name];
            }
          }

          if (category in this._settings) {
            var _categorySettings = this._settings[category];

            if (_categorySettings && name in _categorySettings) {
              return _categorySettings[name];
            }
          }

          return null;
        };

        return Settings;
      }());
      Settings.Category = Category;
      var settings = exports('settings', new Settings());
      legacyCC.settings = settings;

      var SUPPORT_TEXTURE_FORMATS = ['.astc', '.pkm', '.pvr', '.webp', '.jpg', '.jpeg', '.bmp', '.png'];
      var KEY = {
        none: 0,
        back: 6,
        menu: 18,
        backspace: 8,
        tab: 9,
        enter: 13,
        shift: 16,
        ctrl: 17,
        alt: 18,
        pause: 19,
        capslock: 20,
        escape: 27,
        space: 32,
        pageup: 33,
        pagedown: 34,
        end: 35,
        home: 36,
        left: 37,
        up: 38,
        right: 39,
        down: 40,
        select: 41,
        insert: 45,
        Delete: 46,
        0: 48,
        1: 49,
        2: 50,
        3: 51,
        4: 52,
        5: 53,
        6: 54,
        7: 55,
        8: 56,
        9: 57,
        a: 65,
        b: 66,
        c: 67,
        d: 68,
        e: 69,
        f: 70,
        g: 71,
        h: 72,
        i: 73,
        j: 74,
        k: 75,
        l: 76,
        m: 77,
        n: 78,
        o: 79,
        p: 80,
        q: 81,
        r: 82,
        s: 83,
        t: 84,
        u: 85,
        v: 86,
        w: 87,
        x: 88,
        y: 89,
        z: 90,
        num0: 96,
        num1: 97,
        num2: 98,
        num3: 99,
        num4: 100,
        num5: 101,
        num6: 102,
        num7: 103,
        num8: 104,
        num9: 105,
        '*': 106,
        '+': 107,
        '-': 109,
        numdel: 110,
        '/': 111,
        f1: 112,
        f2: 113,
        f3: 114,
        f4: 115,
        f5: 116,
        f6: 117,
        f7: 118,
        f8: 119,
        f9: 120,
        f10: 121,
        f11: 122,
        f12: 123,
        numlock: 144,
        scrolllock: 145,
        ';': 186,
        semicolon: 186,
        equal: 187,
        '=': 187,
        ',': 188,
        comma: 188,
        dash: 189,
        '.': 190,
        period: 190,
        forwardslash: 191,
        grave: 192,
        '[': 219,
        openbracket: 219,
        backslash: 220,
        ']': 221,
        closebracket: 221,
        quote: 222,
        dpadLeft: 1000,
        dpadRight: 1001,
        dpadUp: 1003,
        dpadDown: 1004,
        dpadCenter: 1005
      };
      var macro = exports('macro', {
        SUPPORT_TEXTURE_FORMATS: SUPPORT_TEXTURE_FORMATS,
        KEY: KEY,
        RAD: Math.PI / 180,
        DEG: 180 / Math.PI,
        REPEAT_FOREVER: Number.MAX_VALUE - 1,
        FLT_EPSILON: 0.0000001192092896,
        ORIENTATION_PORTRAIT: 1,
        ORIENTATION_LANDSCAPE: 2,
        ORIENTATION_AUTO: 3,
        ENABLE_TILEDMAP_CULLING: true,
        TOUCH_TIMEOUT: 5000,
        ENABLE_TRANSPARENT_CANVAS: false,
        ENABLE_WEBGL_ANTIALIAS: true,
        ENABLE_ANTIALIAS_FXAA: false,
        ENABLE_BLOOM: false,
        CLEANUP_IMAGE_CACHE: false,
        ENABLE_MULTI_TOUCH: true,
        MAX_LABEL_CANVAS_POOL_SIZE: 20,
        ENABLE_WEBGL_HIGHP_STRUCT_VALUES: false,
        BATCHER2D_MEM_INCREMENT: 144,
        CUSTOM_PIPELINE_NAME: '',
        init: function init() {

          var defaultValues = settings.querySettings(Settings.Category.ENGINE, 'macros');

          if (defaultValues) {
            for (var key in defaultValues) {
              macro[key] = defaultValues[key];
            }
          }
        }
      });
      legacyCC.macro = macro;

      var BUILTIN_CLASSID_RE = /^(?:cc|dragonBones|sp|ccsg)\..+/;
      var BASE64_KEYS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
      var values = new Array(123);

      for (var i = 0; i < 123; ++i) {
        values[i] = 64;
      }

      for (var _i = 0; _i < 64; ++_i) {
        values[BASE64_KEYS.charCodeAt(_i)] = _i;
      }

      var BASE64_VALUES = values;
      function propertyDefine(ctor, sameNameGetSets, diffNameGetSets) {
        function define(np, propName, getter, setter) {
          var pd = Object.getOwnPropertyDescriptor(np, propName);

          if (pd) {
            if (pd.get) {
              np[getter] = pd.get;
            }

            if (pd.set && setter) {
              np[setter] = pd.set;
            }
          } else {
            var getterFunc = np[getter];

            {
              getset(np, propName, getterFunc, np[setter]);
            }
          }
        }

        var propName;
        var np = ctor.prototype;

        for (var _i2 = 0; _i2 < sameNameGetSets.length; _i2++) {
          propName = sameNameGetSets[_i2];
          var suffix = propName[0].toUpperCase() + propName.slice(1);
          define(np, propName, "get" + suffix, "set" + suffix);
        }

        for (propName in diffNameGetSets) {
          var gs = diffNameGetSets[propName];
          define(np, propName, gs[0], gs[1]);
        }
      }
      function pushToMap(map, key, value, pushFront) {
        var exists = map[key];

        if (exists) {
          if (Array.isArray(exists)) {
            if (pushFront) {
              exists.push(exists[0]);
              exists[0] = value;
            } else {
              exists.push(value);
            }
          } else {
            map[key] = pushFront ? [value, exists] : [exists, value];
          }
        } else {
          map[key] = value;
        }
      }
      function contains$1(refNode, otherNode) {
        if (typeof refNode.contains === 'function') {
          return refNode.contains(otherNode);
        } else if (typeof refNode.compareDocumentPosition === 'function') {
          return !!(refNode.compareDocumentPosition(otherNode) & 16);
        } else {
          var node = otherNode.parentNode;

          if (node) {
            do {
              if (node === refNode) {
                return true;
              } else {
                node = node.parentNode;
              }
            } while (node !== null);
          }

          return false;
        }
      }
      function isDomNode(node) {
        if (typeof window === 'object' && typeof Node === 'function') {
          return node instanceof Node;
        } else {
          return !!node && typeof node === 'object' && typeof node.nodeType === 'number' && typeof node.nodeName === 'string';
        }
      }
      function callInNextTick(callback, p1, p2) {
        if (callback) {
          setTimeout(function () {
            callback(p1, p2);
          }, 0);
        }
      }
      function tryCatchFunctor_EDITOR(funcName) {
        return Function('target', "" + ('try {\n' + '  target.') + funcName + "();\n" + "}\n" + "catch (e) {\n" + "  cc._throw(e);\n" + "}");
      }
      function isPlainEmptyObj_DEV(obj) {
        if (!obj || obj.constructor !== Object) {
          return false;
        }

        return isEmptyObject(obj);
      }
      function clampf(value, min_inclusive, max_inclusive) {
        if (min_inclusive > max_inclusive) {
          var temp = min_inclusive;
          min_inclusive = max_inclusive;
          max_inclusive = temp;
        }

        return value < min_inclusive ? min_inclusive : value < max_inclusive ? value : max_inclusive;
      }
      function degreesToRadians(angle) {
        return angle * macro.RAD;
      }
      function radiansToDegrees(angle) {
        return angle * macro.DEG;
      }
      legacyCC.misc = {
        BUILTIN_CLASSID_RE: BUILTIN_CLASSID_RE,
        BASE64_VALUES: BASE64_VALUES,
        propertyDefine: propertyDefine,
        pushToMap: pushToMap,
        contains: contains$1,
        isDomNode: isDomNode,
        callInNextTick: callInNextTick,
        isPlainEmptyObj_DEV: isPlainEmptyObj_DEV,
        clampf: clampf,
        degreesToRadians: degreesToRadians,
        radiansToDegrees: radiansToDegrees
      };

      var misc = /*#__PURE__*/Object.freeze({
        __proto__: null,
        BUILTIN_CLASSID_RE: BUILTIN_CLASSID_RE,
        BASE64_VALUES: BASE64_VALUES,
        propertyDefine: propertyDefine,
        pushToMap: pushToMap,
        contains: contains$1,
        isDomNode: isDomNode,
        callInNextTick: callInNextTick,
        tryCatchFunctor_EDITOR: tryCatchFunctor_EDITOR,
        isPlainEmptyObj_DEV: isPlainEmptyObj_DEV,
        clampf: clampf,
        degreesToRadians: degreesToRadians,
        radiansToDegrees: radiansToDegrees
      });
      exports('misc', misc);

      var DELIMETER = '$_$';
      function createAttrsSingle(owner, superAttrs) {
        var attrs = superAttrs ? Object.create(superAttrs) : {};
        value(owner, '__attrs__', attrs);
        return attrs;
      }
      function createAttrs(subclass) {
        if (typeof subclass !== 'function') {
          var instance = subclass;
          return createAttrsSingle(instance, getClassAttrs(instance.constructor));
        }

        var superClass;
        var chains = legacyCC.Class.getInheritanceChain(subclass);

        for (var i = chains.length - 1; i >= 0; i--) {
          var cls = chains[i];

          var attrs = cls.hasOwnProperty('__attrs__') && cls.__attrs__;

          if (!attrs) {
            superClass = chains[i + 1];
            createAttrsSingle(cls, superClass && superClass.__attrs__);
          }
        }

        superClass = chains[0];
        createAttrsSingle(subclass, superClass && superClass.__attrs__);
        return subclass.__attrs__;
      }
      function attr(constructor, propertyName) {
        var attrs = getClassAttrs(constructor);
        var prefix = propertyName + DELIMETER;
        var ret = {};

        for (var key in attrs) {
          if (key.startsWith(prefix)) {
            ret[key.slice(prefix.length)] = attrs[key];
          }
        }

        return ret;
      }
      function getClassAttrs(constructor) {
        return constructor.hasOwnProperty('__attrs__') && constructor.__attrs__ || createAttrs(constructor);
      }
      function setClassAttr(ctor, propName, key, value) {
        getClassAttrs(ctor)[propName + DELIMETER + key] = value;
      }
      var PrimitiveType = function () {
        function PrimitiveType(name, defaultValue) {
          this.name = void 0;
          this["default"] = void 0;
          this.name = name;
          this["default"] = defaultValue;
        }

        var _proto = PrimitiveType.prototype;

        _proto.toString = function toString() {
          return this.name;
        };

        return PrimitiveType;
      }();
      var CCInteger = exports('CCInteger', new PrimitiveType('Integer', 0));
      legacyCC.Integer = CCInteger;
      legacyCC.CCInteger = CCInteger;
      var CCFloat = exports('CCFloat', new PrimitiveType('Float', 0.0));
      legacyCC.Float = CCFloat;
      legacyCC.CCFloat = CCFloat;

      var CCBoolean = exports('CCBoolean', new PrimitiveType('Boolean', false));
      legacyCC.Boolean = CCBoolean;
      legacyCC.CCBoolean = CCBoolean;
      var CCString = exports('CCString', new PrimitiveType('String', ''));
      legacyCC.String = CCString;
      legacyCC.CCString = CCString;
      function getTypeChecker_ET(type, attributeName) {
        return function (constructor, mainPropertyName) {
          var propInfo = "\"" + getClassName(constructor) + "." + mainPropertyName + "\"";
          var mainPropAttrs = attr(constructor, mainPropertyName);
          var mainPropAttrsType = mainPropAttrs.type;

          if (mainPropAttrsType === CCInteger || mainPropAttrsType === CCFloat) {
            mainPropAttrsType = 'Number';
          } else if (mainPropAttrsType === CCString || mainPropAttrsType === CCBoolean) {
            mainPropAttrsType = "" + mainPropAttrsType;
          }

          if (mainPropAttrsType !== type) {
            warnID(3604, propInfo);
            return;
          }

          if (!mainPropAttrs.hasOwnProperty('default')) {
            return;
          }

          var defaultVal = mainPropAttrs["default"];

          if (typeof defaultVal === 'undefined') {
            return;
          }

          var isContainer = Array.isArray(defaultVal) || isPlainEmptyObj_DEV(defaultVal);

          if (isContainer) {
            return;
          }

          var defaultType = typeof defaultVal;
          var type_lowerCase = type.toLowerCase();

          if (defaultType === type_lowerCase) {
            if (type_lowerCase === 'object') {
              if (defaultVal && !(defaultVal instanceof mainPropAttrs.ctor)) {
                warnID(3605, propInfo, getClassName(mainPropAttrs.ctor));
              } else {
                return;
              }
            } else if (type !== 'Number') {
              warnID(3606, attributeName, propInfo, type);
            }
          } else if (defaultType !== 'function') {
            if (type === CCString["default"] && defaultVal == null) {
              warnID(3607, propInfo);
            } else {
              warnID(3611, attributeName, propInfo, defaultType);
            }
          } else {
            return;
          }

          delete mainPropAttrs.type;
        };
      }
      function getObjTypeChecker_ET(typeCtor) {
        return function (classCtor, mainPropName) {
          getTypeChecker_ET('Object', 'type')(classCtor, mainPropName);
          var defaultDef = getClassAttrs(classCtor)[mainPropName + DELIMETER + "default"];
          var defaultVal = legacyCC.Class.getDefault(defaultDef);

          if (!Array.isArray(defaultVal) && isChildClassOf(typeCtor, legacyCC.ValueType)) {
            var typename = getClassName(typeCtor);
            var info = formatStr('No need to specify the "type" of "%s.%s" because %s is a child class of ValueType.', getClassName(classCtor), mainPropName, typename);

            if (defaultDef) {
              log(info);
            } else {
              warnID(3612, info, typename, getClassName(classCtor), mainPropName, typename);
            }
          }
        };
      }

      var attributeUtils = /*#__PURE__*/Object.freeze({
        __proto__: null,
        DELIMETER: DELIMETER,
        createAttrsSingle: createAttrsSingle,
        createAttrs: createAttrs,
        attr: attr,
        getClassAttrs: getClassAttrs,
        setClassAttr: setClassAttr,
        PrimitiveType: PrimitiveType,
        CCInteger: CCInteger,
        CCFloat: CCFloat,
        CCBoolean: CCBoolean,
        CCString: CCString,
        getTypeChecker_ET: getTypeChecker_ET,
        getObjTypeChecker_ET: getObjTypeChecker_ET
      });

      var SerializableAttrs = {
        "default": {},
        serializable: {},
        editorOnly: {},
        formerlySerializedAs: {}
      };

      function parseNotify(val, propName, notify, properties) {
        if (val.get || val.set) {

          return;
        }

        if (val.hasOwnProperty('default')) {
          var newKey = "_N$" + propName;

          val.get = function () {
            return this[newKey];
          };

          val.set = function (value) {
            var oldValue = this[newKey];
            this[newKey] = value;
            notify.call(this, oldValue);
          };

          var newValue = {};
          properties[newKey] = newValue;

          for (var attr in SerializableAttrs) {
            var v = SerializableAttrs[attr];

            if (val.hasOwnProperty(attr)) {
              newValue[attr] = val[attr];

              if (!v.canUsedInGet) {
                delete val[attr];
              }
            }
          }
        }
      }

      function parseType(val, type, className, propName) {

        if (Array.isArray(type)) {

          if (type.length > 0) {
            val.type = type = type[0];
          } else {
            return errorID(5508, className, propName);
          }
        }

        if (typeof type === 'function') {
          if (type === String) {
            val.type = legacyCC.String;
          } else if (type === Boolean) {
            val.type = legacyCC.Boolean;
          } else if (type === Number) {
            val.type = legacyCC.Float;
          }
        }
      }

      function _wrapOptions(isGetset, _default, type) {
        var res = isGetset ? {
          _short: true
        } : {
          _short: true,
          "default": _default
        };

        if (type) {
          res.type = type;
        }

        return res;
      }

      function getFullFormOfProperty(options, isGetset) {
        var isLiteral = options && options.constructor === Object;

        if (!isLiteral) {
          if (Array.isArray(options) && options.length > 0) {
            return _wrapOptions(isGetset, [], options);
          } else if (typeof options === 'function') {
            var type = options;
            return _wrapOptions(isGetset, isChildClassOf(type, legacyCC.ValueType) ? new type() : null, type);
          } else if (options instanceof PrimitiveType) {
            return _wrapOptions(isGetset, options["default"]);
          } else {
            return _wrapOptions(isGetset, options);
          }
        }

        return null;
      }
      function preprocessAttrs(properties, className, cls) {
        for (var propName in properties) {
          var val = properties[propName];
          var fullForm = getFullFormOfProperty(val, false);

          if (fullForm) {
            val = properties[propName] = fullForm;
          }

          if (val) {

            var notify = val.notify;

            if (notify) {
              {
                parseNotify(val, propName, notify, properties);
              }
            }

            if ('type' in val) {
              parseType(val, val.type, className, propName);
            }
          }
        }
      }

      var requiringFrames = [];
      function push(module, uuid, script, importMeta) {
        if (script === undefined) {
          script = uuid;
          uuid = '';
        }

        requiringFrames.push({
          uuid: uuid,
          script: script,
          module: module,
          exports: module.exports,
          beh: null,
          importMeta: importMeta
        });
      }
      function pop() {
        var frameInfo = requiringFrames.pop();
        var module = frameInfo.module;
        var exports = module.exports;

        if (exports === frameInfo.exports) {
          for (var anykey in exports) {
            return;
          }

          module.exports = exports = frameInfo.cls;
        }
      }
      function peek() {
        return requiringFrames[requiringFrames.length - 1];
      }
      legacyCC._RF = {
        push: push,
        pop: pop,
        peek: peek
      };

      var PropertyStashInternalFlag;

      (function (PropertyStashInternalFlag) {
        PropertyStashInternalFlag[PropertyStashInternalFlag["STANDALONE"] = 1] = "STANDALONE";
        PropertyStashInternalFlag[PropertyStashInternalFlag["IMPLICIT_VISIBLE"] = 2] = "IMPLICIT_VISIBLE";
        PropertyStashInternalFlag[PropertyStashInternalFlag["IMPLICIT_SERIALIZABLE"] = 4] = "IMPLICIT_SERIALIZABLE";
      })(PropertyStashInternalFlag || (PropertyStashInternalFlag = {}));

      var DELIMETER$1 = DELIMETER;
      var CCCLASS_TAG = '__ctors__';
      var ENUM_TAG = exports('ENUM_TAG', 'Enum');
      var BITMASK_TAG = exports('BITMASK_TAG', 'BitMask');

      function pushUnique(array, item) {
        if (array.indexOf(item) < 0) {
          array.push(item);
        }
      }

      function appendProp(cls, name) {

        pushUnique(cls.__props__, name);
      }

      function defineProp(cls, className, propName, val) {

        appendProp(cls, propName);
        parseAttributes(cls, val, className, propName);
      }

      function defineGetSet(cls, name, propName, val) {
        var getter = val.get;
        var setter = val.set;

        if (getter) {
          parseAttributes(cls, val, name, propName);

          setClassAttr(cls, propName, 'serializable', false);
        }
      }

      function getDefault(defaultVal) {
        if (typeof defaultVal === 'function') {
          {
            return defaultVal();
          }
        }

        return defaultVal;
      }

      function doDefine(className, baseClass, options) {
        var ctor = options.ctor;

        value(ctor, CCCLASS_TAG, true, true);
        var prototype = ctor.prototype;

        if (baseClass) {
          ctor.$super = baseClass;
        }

        setClassName(className, ctor);
        return ctor;
      }

      function define(className, baseClass, options) {
        var Component = legacyCC.Component;
        var frame = peek();

        if (frame && isChildClassOf(baseClass, Component)) {
          if (isChildClassOf(frame.cls, Component)) {
            errorID(3615);
            return null;
          }

          className = className || frame.script;
        }

        var cls = doDefine(className, baseClass, options);

        if (frame) {
          if (isChildClassOf(baseClass, Component)) {
            var uuid = frame.uuid;

            if (uuid) {
              _setClassId(uuid, cls);
            }

            frame.cls = cls;
          } else if (!isChildClassOf(frame.cls, Component)) {
            frame.cls = cls;
          }
        }

        return cls;
      }

      function getNewValueTypeCodeJit(value) {
        var clsName = getClassName(value);
        var type = value.constructor;
        var res = "new " + clsName + "(";

        for (var i = 0; i < type.__props__.length; i++) {
          var prop = type.__props__[i];
          var propVal = value[prop];

          res += propVal;

          if (i < type.__props__.length - 1) {
            res += ',';
          }
        }

        return res + ")";
      }

      function escapeForJS(s) {
        return JSON.stringify(s).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
      }

      var IDENTIFIER_RE = /^[A-Za-z_$][0-9A-Za-z_$]*$/;

      function declareProperties(cls, className, properties, baseClass) {
        cls.__props__ = [];

        if (baseClass && baseClass.__props__) {
          cls.__props__ = baseClass.__props__.slice();
        }

        if (properties) {
          preprocessAttrs(properties, className);

          for (var propName in properties) {
            var val = properties[propName];

            if (!val.get && !val.set) {
              defineProp(cls, className, propName, val);
            } else {
              defineGetSet(cls, className, propName, val);
            }
          }
        }

        var attrs = getClassAttrs(cls);
        cls.__values__ = cls.__props__.filter(function (prop) {
          return attrs[prop + DELIMETER$1 + "serializable"] !== false;
        });
      }

      function CCClass(options) {
        var name = options.name;
        var base = options["extends"];
        var cls = define(name, base, options);

        if (!name) {
          name = legacyCC.js.getClassName(cls);
        }

        cls._sealed = true;

        if (base) {
          base._sealed = false;
        }

        var properties = options.properties;
        declareProperties(cls, name, properties, base);
        var editor = options.editor;

        if (editor) {
          if (isChildClassOf(base, legacyCC.Component)) {
            legacyCC.Component._registerEditorProps(cls, editor);
          }
        }

        return cls;
      }

      CCClass._isCCClass = function isCCClass(constructor) {
        var _constructor$hasOwnPr;

        return constructor === null || constructor === void 0 ? void 0 : (_constructor$hasOwnPr = constructor.hasOwnProperty) === null || _constructor$hasOwnPr === void 0 ? void 0 : _constructor$hasOwnPr.call(constructor, CCCLASS_TAG);
      };

      CCClass.fastDefine = function (className, constructor, serializableFields) {
        setClassName(className, constructor);
        var props = constructor.__props__ = constructor.__values__ = Object.keys(serializableFields);
        var attrs = getClassAttrs(constructor);

        for (var i = 0; i < props.length; i++) {
          var key = props[i];
          attrs[key + DELIMETER$1 + "visible"] = false;
          attrs[key + DELIMETER$1 + "default"] = serializableFields[key];
        }
      };

      CCClass.Attr = attributeUtils;
      CCClass.attr = attr;
      function isCCClassOrFastDefined(constructor) {
        var _constructor$hasOwnPr2;

        return constructor === null || constructor === void 0 ? void 0 : (_constructor$hasOwnPr2 = constructor.hasOwnProperty) === null || _constructor$hasOwnPr2 === void 0 ? void 0 : _constructor$hasOwnPr2.call(constructor, '__values__');
      }
      CCClass.isCCClassOrFastDefined = isCCClassOrFastDefined;

      function getInheritanceChain(constructor) {
        var chain = [];

        for (;;) {
          constructor = getSuper(constructor);

          if (!constructor) {
            break;
          }

          if (constructor !== Object) {
            chain.push(constructor);
          }
        }

        return chain;
      }

      CCClass.getInheritanceChain = getInheritanceChain;
      var PrimitiveTypes = {
        Integer: 'Number',
        Float: 'Number',
        Boolean: 'Boolean',
        String: 'String'
      };

      function parseAttributes(constructor, attributes, className, propertyName, usedInGetter) {
        var attrs = null;
        var propertyNamePrefix = '';

        function initAttrs() {
          propertyNamePrefix = propertyName + DELIMETER$1;
          return attrs = getClassAttrs(constructor);
        }

        if ('type' in attributes && typeof attributes.type === 'undefined') {
          warnID(3660, propertyName, className);
        }
        var type = attributes.type;

        if (type) {
          var primitiveType = PrimitiveTypes[type];

          if (primitiveType) {
            (attrs || initAttrs())[propertyNamePrefix + "type"] = type;
          } else if (type === 'Object') ; else if (typeof type === 'object') {
              if (Enum.isEnum(type)) {
                (attrs || initAttrs())[propertyNamePrefix + "type"] = ENUM_TAG;
                attrs[propertyNamePrefix + "enumList"] = Enum.getList(type);
              } else if (BitMask.isBitMask(type)) {
                (attrs || initAttrs())[propertyNamePrefix + "type"] = BITMASK_TAG;
                attrs[propertyNamePrefix + "bitmaskList"] = BitMask.getList(type);
              } else ;
            } else if (typeof type === 'function') {
              (attrs || initAttrs())[propertyNamePrefix + "type"] = 'Object';
              attrs[propertyNamePrefix + "ctor"] = type;
            } else ;
        }

        if ('default' in attributes) {
          (attrs || initAttrs())[propertyNamePrefix + "default"] = attributes["default"];
        }

        var parseSimpleAttribute = function parseSimpleAttribute(attributeName, expectType) {
          if (attributeName in attributes) {
            var val = attributes[attributeName];

            if (typeof val === expectType) {
              (attrs || initAttrs())[propertyNamePrefix + attributeName] = val;
            }
          }
        };

        if (attributes.editorOnly) {
          {
            (attrs || initAttrs())[propertyNamePrefix + "editorOnly"] = true;
          }
        }

        var isStandaloneMode = attributes.__internalFlags & PropertyStashInternalFlag.STANDALONE;
        var normalizedSerializable;

        if (isStandaloneMode) {
          normalizedSerializable = attributes.serializable === true || (attributes.__internalFlags & PropertyStashInternalFlag.IMPLICIT_SERIALIZABLE) !== 0;
        } else if (attributes.serializable === false) {
          normalizedSerializable = false;
        }

        if (typeof normalizedSerializable !== 'undefined') {
          (attrs || initAttrs())[propertyNamePrefix + "serializable"] = normalizedSerializable;
        }

        parseSimpleAttribute('formerlySerializedAs', 'string');

        var range = attributes.range;

        if (range) {
          if (Array.isArray(range)) {
            if (range.length >= 2) {
              (attrs || initAttrs())[propertyNamePrefix + "min"] = range[0];
              attrs[propertyNamePrefix + "max"] = range[1];

              if (range.length > 2) {
                attrs[propertyNamePrefix + "step"] = range[2];
              }
            }
          }
        }

        parseSimpleAttribute('min', 'number');
        parseSimpleAttribute('max', 'number');
        parseSimpleAttribute('step', 'number');
      }

      CCClass.isArray = function (defaultVal) {
        defaultVal = getDefault(defaultVal);
        return Array.isArray(defaultVal);
      };

      CCClass.getDefault = getDefault;
      CCClass.escapeForJS = escapeForJS;
      CCClass.IDENTIFIER_RE = IDENTIFIER_RE;
      CCClass.getNewValueTypeCode =  getNewValueTypeCodeJit;
      legacyCC.Class = CCClass;

      var _d2r = Math.PI / 180.0;

      var _r2d = 180.0 / Math.PI;

      var HALF_PI = exports('HALF_PI', Math.PI * 0.5);
      var TWO_PI = exports('TWO_PI', Math.PI * 2.0);
      var EPSILON = exports('EPSILON', 0.000001);
      function equals(a, b) {
        return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));
      }
      function approx(a, b, maxDiff) {
        maxDiff = maxDiff || EPSILON;
        return Math.abs(a - b) <= maxDiff;
      }
      function clamp(val, min, max) {
        if (min > max) {
          var temp = min;
          min = max;
          max = temp;
        }

        return val < min ? min : val > max ? max : val;
      }
      function clamp01(val) {
        return val < 0 ? 0 : val > 1 ? 1 : val;
      }
      function lerp(from, to, ratio) {
        return from + (to - from) * ratio;
      }
      function toRadian(a) {
        return a * _d2r;
      }
      function toDegree(a) {
        return a * _r2d;
      }
      var random = exports('random', Math.random);
      function randomRange(min, max) {
        return Math.random() * (max - min) + min;
      }
      function randomRangeInt(min, max) {
        return Math.floor(randomRange(min, max));
      }
      function pseudoRandom(seed) {
        seed = (seed * 9301 + 49297) % 233280;
        return seed / 233280.0;
      }
      function pseudoRandomRange(seed, min, max) {
        return pseudoRandom(seed) * (max - min) + min;
      }
      function pseudoRandomRangeInt(seed, min, max) {
        return Math.floor(pseudoRandomRange(seed, min, max));
      }
      function nextPow2$1(val) {
        return nextPow2(val);
      }
      function repeat(t, length) {
        return t - Math.floor(t / length) * length;
      }
      function pingPong(t, length) {
        t = repeat(t, length * 2);
        t = length - Math.abs(t - length);
        return t;
      }
      function inverseLerp(from, to, value) {
        return (value - from) / (to - from);
      }
      function absMaxComponent(v) {
        if (Math.abs(v.x) > Math.abs(v.y)) {
          if (Math.abs(v.x) > Math.abs(v.z)) {
            return v.x;
          } else {
            return v.z;
          }
        } else if (Math.abs(v.y) > Math.abs(v.z)) {
          return v.y;
        } else {
          return v.z;
        }
      }
      function absMax(a, b) {
        if (Math.abs(a) > Math.abs(b)) {
          return a;
        } else {
          return b;
        }
      }
      function enumerableProps(prototype, attrs) {
        attrs.forEach(function (key) {
          Object.defineProperty(prototype, key, {
            enumerable: true
          });
        });
      }

      var Vec3 = exports('Vec3', function (_ValueType) {
        _inheritsLoose(Vec3, _ValueType);

        Vec3.zero = function zero(out) {
          out.x = 0;
          out.y = 0;
          out.z = 0;
          return out;
        };

        Vec3.clone = function clone(a) {
          return new Vec3(a.x, a.y, a.z);
        };

        Vec3.copy = function copy(out, a) {
          out.x = a.x;
          out.y = a.y;
          out.z = a.z;
          return out;
        };

        Vec3.set = function set(out, x, y, z) {
          out.x = x;
          out.y = y;
          out.z = z;
          return out;
        };

        Vec3.add = function add(out, a, b) {
          out.x = a.x + b.x;
          out.y = a.y + b.y;
          out.z = a.z + b.z;
          return out;
        };

        Vec3.subtract = function subtract(out, a, b) {
          out.x = a.x - b.x;
          out.y = a.y - b.y;
          out.z = a.z - b.z;
          return out;
        };

        Vec3.multiply = function multiply(out, a, b) {
          out.x = a.x * b.x;
          out.y = a.y * b.y;
          out.z = a.z * b.z;
          return out;
        };

        Vec3.divide = function divide(out, a, b) {
          out.x = a.x / b.x;
          out.y = a.y / b.y;
          out.z = a.z / b.z;
          return out;
        };

        Vec3.ceil = function ceil(out, a) {
          out.x = Math.ceil(a.x);
          out.y = Math.ceil(a.y);
          out.z = Math.ceil(a.z);
          return out;
        };

        Vec3.floor = function floor(out, a) {
          out.x = Math.floor(a.x);
          out.y = Math.floor(a.y);
          out.z = Math.floor(a.z);
          return out;
        };

        Vec3.min = function min(out, a, b) {
          out.x = Math.min(a.x, b.x);
          out.y = Math.min(a.y, b.y);
          out.z = Math.min(a.z, b.z);
          return out;
        };

        Vec3.max = function max(out, a, b) {
          out.x = Math.max(a.x, b.x);
          out.y = Math.max(a.y, b.y);
          out.z = Math.max(a.z, b.z);
          return out;
        };

        Vec3.round = function round(out, a) {
          out.x = Math.round(a.x);
          out.y = Math.round(a.y);
          out.z = Math.round(a.z);
          return out;
        };

        Vec3.multiplyScalar = function multiplyScalar(out, a, b) {
          out.x = a.x * b;
          out.y = a.y * b;
          out.z = a.z * b;
          return out;
        };

        Vec3.scaleAndAdd = function scaleAndAdd(out, a, b, scale) {
          out.x = a.x + b.x * scale;
          out.y = a.y + b.y * scale;
          out.z = a.z + b.z * scale;
          return out;
        };

        Vec3.distance = function distance(a, b) {
          var x = b.x - a.x;
          var y = b.y - a.y;
          var z = b.z - a.z;
          return Math.sqrt(x * x + y * y + z * z);
        };

        Vec3.squaredDistance = function squaredDistance(a, b) {
          var x = b.x - a.x;
          var y = b.y - a.y;
          var z = b.z - a.z;
          return x * x + y * y + z * z;
        };

        Vec3.len = function len(a) {
          var x = a.x;
          var y = a.y;
          var z = a.z;
          return Math.sqrt(x * x + y * y + z * z);
        };

        Vec3.lengthSqr = function lengthSqr(a) {
          var x = a.x;
          var y = a.y;
          var z = a.z;
          return x * x + y * y + z * z;
        };

        Vec3.negate = function negate(out, a) {
          out.x = -a.x;
          out.y = -a.y;
          out.z = -a.z;
          return out;
        };

        Vec3.invert = function invert(out, a) {
          out.x = 1.0 / a.x;
          out.y = 1.0 / a.y;
          out.z = 1.0 / a.z;
          return out;
        };

        Vec3.invertSafe = function invertSafe(out, a) {
          var x = a.x;
          var y = a.y;
          var z = a.z;

          if (Math.abs(x) < EPSILON) {
            out.x = 0;
          } else {
            out.x = 1.0 / x;
          }

          if (Math.abs(y) < EPSILON) {
            out.y = 0;
          } else {
            out.y = 1.0 / y;
          }

          if (Math.abs(z) < EPSILON) {
            out.z = 0;
          } else {
            out.z = 1.0 / z;
          }

          return out;
        };

        Vec3.normalize = function normalize(out, a) {
          var x = a.x;
          var y = a.y;
          var z = a.z;
          var len = x * x + y * y + z * z;

          if (len > 0) {
            len = 1 / Math.sqrt(len);
            out.x = x * len;
            out.y = y * len;
            out.z = z * len;
          }

          return out;
        };

        Vec3.dot = function dot(a, b) {
          return a.x * b.x + a.y * b.y + a.z * b.z;
        };

        Vec3.cross = function cross(out, a, b) {
          var ax = a.x,
              ay = a.y,
              az = a.z;
          var bx = b.x,
              by = b.y,
              bz = b.z;
          out.x = ay * bz - az * by;
          out.y = az * bx - ax * bz;
          out.z = ax * by - ay * bx;
          return out;
        };

        Vec3.lerp = function lerp(out, a, b, t) {
          out.x = a.x + t * (b.x - a.x);
          out.y = a.y + t * (b.y - a.y);
          out.z = a.z + t * (b.z - a.z);
          return out;
        };

        Vec3.random = function random$1(out, scale) {
          scale = scale || 1.0;
          var phi = random() * 2.0 * Math.PI;
          var cosTheta = random() * 2 - 1;
          var sinTheta = Math.sqrt(1 - cosTheta * cosTheta);
          out.x = sinTheta * Math.cos(phi) * scale;
          out.y = sinTheta * Math.sin(phi) * scale;
          out.z = cosTheta * scale;
          return out;
        };

        Vec3.transformMat4 = function transformMat4(out, a, m) {
          var x = a.x;
          var y = a.y;
          var z = a.z;
          var rhw = m.m03 * x + m.m07 * y + m.m11 * z + m.m15;
          rhw = rhw ? Math.abs(1 / rhw) : 1;
          out.x = (m.m00 * x + m.m04 * y + m.m08 * z + m.m12) * rhw;
          out.y = (m.m01 * x + m.m05 * y + m.m09 * z + m.m13) * rhw;
          out.z = (m.m02 * x + m.m06 * y + m.m10 * z + m.m14) * rhw;
          return out;
        };

        Vec3.transformMat4Normal = function transformMat4Normal(out, a, m) {
          var x = a.x;
          var y = a.y;
          var z = a.z;
          var rhw = m.m03 * x + m.m07 * y + m.m11 * z;
          rhw = rhw ? Math.abs(1 / rhw) : 1;
          out.x = (m.m00 * x + m.m04 * y + m.m08 * z) * rhw;
          out.y = (m.m01 * x + m.m05 * y + m.m09 * z) * rhw;
          out.z = (m.m02 * x + m.m06 * y + m.m10 * z) * rhw;
          return out;
        };

        Vec3.transformMat3 = function transformMat3(out, a, m) {
          var x = a.x;
          var y = a.y;
          var z = a.z;
          out.x = x * m.m00 + y * m.m03 + z * m.m06;
          out.y = x * m.m01 + y * m.m04 + z * m.m07;
          out.z = x * m.m02 + y * m.m05 + z * m.m08;
          return out;
        };

        Vec3.transformAffine = function transformAffine(out, v, m) {
          var x = v.x;
          var y = v.y;
          var z = v.z;
          out.x = m.m00 * x + m.m04 * y + m.m08 * z + m.m12;
          out.y = m.m01 * x + m.m05 * y + m.m09 * z + m.m13;
          out.z = m.m02 * x + m.m06 * y + m.m10 * z + m.m14;
          return out;
        };

        Vec3.transformQuat = function transformQuat(out, a, q) {
          var ix = q.w * a.x + q.y * a.z - q.z * a.y;
          var iy = q.w * a.y + q.z * a.x - q.x * a.z;
          var iz = q.w * a.z + q.x * a.y - q.y * a.x;
          var iw = -q.x * a.x - q.y * a.y - q.z * a.z;
          out.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;
          out.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;
          out.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;
          return out;
        };

        Vec3.transformRTS = function transformRTS(out, a, r, t, s) {
          var x = a.x * s.x;
          var y = a.y * s.y;
          var z = a.z * s.z;
          var ix = r.w * x + r.y * z - r.z * y;
          var iy = r.w * y + r.z * x - r.x * z;
          var iz = r.w * z + r.x * y - r.y * x;
          var iw = -r.x * x - r.y * y - r.z * z;
          out.x = ix * r.w + iw * -r.x + iy * -r.z - iz * -r.y + t.x;
          out.y = iy * r.w + iw * -r.y + iz * -r.x - ix * -r.z + t.y;
          out.z = iz * r.w + iw * -r.z + ix * -r.y - iy * -r.x + t.z;
          return out;
        };

        Vec3.transformInverseRTS = function transformInverseRTS(out, a, r, t, s) {
          var x = a.x - t.x;
          var y = a.y - t.y;
          var z = a.z - t.z;
          var ix = r.w * x - r.y * z + r.z * y;
          var iy = r.w * y - r.z * x + r.x * z;
          var iz = r.w * z - r.x * y + r.y * x;
          var iw = r.x * x + r.y * y + r.z * z;
          out.x = (ix * r.w + iw * r.x + iy * r.z - iz * r.y) / s.x;
          out.y = (iy * r.w + iw * r.y + iz * r.x - ix * r.z) / s.y;
          out.z = (iz * r.w + iw * r.z + ix * r.y - iy * r.x) / s.z;
          return out;
        };

        Vec3.rotateX = function rotateX(out, v, o, a) {
          var x = v.x - o.x;
          var y = v.y - o.y;
          var z = v.z - o.z;
          var cos = Math.cos(a);
          var sin = Math.sin(a);
          var rx = x;
          var ry = y * cos - z * sin;
          var rz = y * sin + z * cos;
          out.x = rx + o.x;
          out.y = ry + o.y;
          out.z = rz + o.z;
          return out;
        };

        Vec3.rotateY = function rotateY(out, v, o, a) {
          var x = v.x - o.x;
          var y = v.y - o.y;
          var z = v.z - o.z;
          var cos = Math.cos(a);
          var sin = Math.sin(a);
          var rx = z * sin + x * cos;
          var ry = y;
          var rz = z * cos - x * sin;
          out.x = rx + o.x;
          out.y = ry + o.y;
          out.z = rz + o.z;
          return out;
        };

        Vec3.rotateZ = function rotateZ(out, v, o, a) {
          var x = v.x - o.x;
          var y = v.y - o.y;
          var z = v.z - o.z;
          var cos = Math.cos(a);
          var sin = Math.sin(a);
          var rx = x * cos - y * sin;
          var ry = x * sin + y * cos;
          var rz = z;
          out.x = rx + o.x;
          out.y = ry + o.y;
          out.z = rz + o.z;
          return out;
        };

        Vec3.toArray = function toArray(out, v, ofs) {
          if (ofs === void 0) {
            ofs = 0;
          }

          out[ofs + 0] = v.x;
          out[ofs + 1] = v.y;
          out[ofs + 2] = v.z;
          return out;
        };

        Vec3.fromArray = function fromArray(out, arr, ofs) {
          if (ofs === void 0) {
            ofs = 0;
          }

          out.x = arr[ofs + 0];
          out.y = arr[ofs + 1];
          out.z = arr[ofs + 2];
          return out;
        };

        Vec3.strictEquals = function strictEquals(a, b) {
          return a.x === b.x && a.y === b.y && a.z === b.z;
        };

        Vec3.equals = function equals(a, b, epsilon) {
          if (epsilon === void 0) {
            epsilon = EPSILON;
          }

          var a0 = a.x,
              a1 = a.y,
              a2 = a.z;
          var b0 = b.x,
              b1 = b.y,
              b2 = b.z;
          return Math.abs(a0 - b0) <= epsilon * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= epsilon * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= epsilon * Math.max(1.0, Math.abs(a2), Math.abs(b2));
        };

        Vec3.angle = function angle(a, b) {
          Vec3.normalize(v3_1, a);
          Vec3.normalize(v3_2, b);
          var cosine = Vec3.dot(v3_1, v3_2);

          if (cosine > 1.0) {
            return 0;
          }

          if (cosine < -1.0) {
            return Math.PI;
          }

          return Math.acos(cosine);
        };

        Vec3.projectOnPlane = function projectOnPlane(out, a, n) {
          return Vec3.subtract(out, a, Vec3.project(out, a, n));
        };

        Vec3.project = function project(out, a, b) {
          var sqrLen = Vec3.lengthSqr(b);

          if (sqrLen < 0.000001) {
            return Vec3.set(out, 0, 0, 0);
          } else {
            return Vec3.multiplyScalar(out, b, Vec3.dot(a, b) / sqrLen);
          }
        };

        function Vec3(x, y, z) {
          var _this;

          _this = _ValueType.call(this) || this;

          if (x && typeof x === 'object') {
            _this.x = x.x;
            _this.y = x.y;
            _this.z = x.z;
          } else {
            _this.x = x || 0;
            _this.y = y || 0;
            _this.z = z || 0;
          }

          return _this;
        }

        var _proto = Vec3.prototype;

        _proto.clone = function clone() {
          return new Vec3(this.x, this.y, this.z);
        };

        _proto.set = function set(x, y, z) {
          if (x && typeof x === 'object') {
            this.x = x.x;
            this.y = x.y;
            this.z = x.z;
          } else {
            this.x = x || 0;
            this.y = y || 0;
            this.z = z || 0;
          }

          return this;
        };

        _proto.equals = function equals(other, epsilon) {
          if (epsilon === void 0) {
            epsilon = EPSILON;
          }

          return Math.abs(this.x - other.x) <= epsilon && Math.abs(this.y - other.y) <= epsilon && Math.abs(this.z - other.z) <= epsilon;
        };

        _proto.equals3f = function equals3f(x, y, z, epsilon) {
          if (epsilon === void 0) {
            epsilon = EPSILON;
          }

          return Math.abs(this.x - x) <= epsilon && Math.abs(this.y - y) <= epsilon && Math.abs(this.z - z) <= epsilon;
        };

        _proto.strictEquals = function strictEquals(other) {
          return this.x === other.x && this.y === other.y && this.z === other.z;
        };

        _proto.strictEquals3f = function strictEquals3f(x, y, z) {
          return this.x === x && this.y === y && this.z === z;
        };

        _proto.toString = function toString() {
          return "(" + this.x.toFixed(2) + ", " + this.y.toFixed(2) + ", " + this.z.toFixed(2) + ")";
        };

        _proto.lerp = function lerp(to, ratio) {
          this.x += ratio * (to.x - this.x);
          this.y += ratio * (to.y - this.y);
          this.z += ratio * (to.z - this.z);
          return this;
        };

        _proto.add = function add(other) {
          this.x += other.x;
          this.y += other.y;
          this.z += other.z;
          return this;
        };

        _proto.add3f = function add3f(x, y, z) {
          this.x += x;
          this.y += y;
          this.z += z;
          return this;
        };

        _proto.subtract = function subtract(other) {
          this.x -= other.x;
          this.y -= other.y;
          this.z -= other.z;
          return this;
        };

        _proto.subtract3f = function subtract3f(x, y, z) {
          this.x -= x;
          this.y -= y;
          this.z -= z;
          return this;
        };

        _proto.multiplyScalar = function multiplyScalar(scalar) {
          if (typeof scalar === 'object') {
            console.warn('should use Vec3.multiply for vector * vector operation');
          }

          this.x *= scalar;
          this.y *= scalar;
          this.z *= scalar;
          return this;
        };

        _proto.multiply = function multiply(other) {
          if (typeof other !== 'object') {
            console.warn('should use Vec3.scale for vector * scalar operation');
          }

          this.x *= other.x;
          this.y *= other.y;
          this.z *= other.z;
          return this;
        };

        _proto.multiply3f = function multiply3f(x, y, z) {
          this.x *= x;
          this.y *= y;
          this.z *= z;
          return this;
        };

        _proto.divide = function divide(other) {
          this.x /= other.x;
          this.y /= other.y;
          this.z /= other.z;
          return this;
        };

        _proto.divide3f = function divide3f(x, y, z) {
          this.x /= x;
          this.y /= y;
          this.z /= z;
          return this;
        };

        _proto.negative = function negative() {
          this.x = -this.x;
          this.y = -this.y;
          this.z = -this.z;
          return this;
        };

        _proto.clampf = function clampf(minInclusive, maxInclusive) {
          this.x = clamp(this.x, minInclusive.x, maxInclusive.x);
          this.y = clamp(this.y, minInclusive.y, maxInclusive.y);
          this.z = clamp(this.z, minInclusive.z, maxInclusive.z);
          return this;
        };

        _proto.dot = function dot(other) {
          return this.x * other.x + this.y * other.y + this.z * other.z;
        };

        _proto.cross = function cross(other) {
          var ax = this.x,
              ay = this.y,
              az = this.z;
          var bx = other.x,
              by = other.y,
              bz = other.z;
          this.x = ay * bz - az * by;
          this.y = az * bx - ax * bz;
          this.z = ax * by - ay * bx;
          return this;
        };

        _proto.length = function length() {
          return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
        };

        _proto.lengthSqr = function lengthSqr() {
          return this.x * this.x + this.y * this.y + this.z * this.z;
        };

        _proto.normalize = function normalize() {
          var x = this.x;
          var y = this.y;
          var z = this.z;
          var len = x * x + y * y + z * z;

          if (len > 0) {
            len = 1 / Math.sqrt(len);
            this.x = x * len;
            this.y = y * len;
            this.z = z * len;
          }

          return this;
        };

        _proto.transformMat4 = function transformMat4(matrix) {
          var x = this.x;
          var y = this.y;
          var z = this.z;
          var rhw = matrix.m03 * x + matrix.m07 * y + matrix.m11 * z + matrix.m15;
          rhw = rhw ? 1 / rhw : 1;
          this.x = (matrix.m00 * x + matrix.m04 * y + matrix.m08 * z + matrix.m12) * rhw;
          this.y = (matrix.m01 * x + matrix.m05 * y + matrix.m09 * z + matrix.m13) * rhw;
          this.z = (matrix.m02 * x + matrix.m06 * y + matrix.m10 * z + matrix.m14) * rhw;
          return this;
        };

        return Vec3;
      }(ValueType));
      Vec3.UNIT_X = Object.freeze(new Vec3(1, 0, 0));
      Vec3.UNIT_Y = Object.freeze(new Vec3(0, 1, 0));
      Vec3.UNIT_Z = Object.freeze(new Vec3(0, 0, 1));
      Vec3.RIGHT = Object.freeze(new Vec3(1, 0, 0));
      Vec3.UP = Object.freeze(new Vec3(0, 1, 0));
      Vec3.FORWARD = Object.freeze(new Vec3(0, 0, -1));
      Vec3.ZERO = Object.freeze(new Vec3(0, 0, 0));
      Vec3.ONE = Object.freeze(new Vec3(1, 1, 1));
      Vec3.NEG_ONE = Object.freeze(new Vec3(-1, -1, -1));

      Vec3.slerp = function () {
        var cacheV1 = new Vec3();
        var cacheV2 = new Vec3();
        var cacheV3 = new Vec3();
        return function (out, from, to, t) {
          var EPSILON = 1e-5;
          var lenFrom = Vec3.len(from);
          var lenTo = Vec3.len(to);

          if (lenFrom < EPSILON || lenTo < EPSILON) {
            return Vec3.lerp(out, from, to, t);
          }

          var lenLerped = lerp(lenFrom, lenTo, t);
          var dot = Vec3.dot(from, to) / (lenFrom * lenTo);

          if (dot > 1.0 - EPSILON) {
            return Vec3.lerp(out, from, to, t);
          } else if (dot < -1.0 + EPSILON) {
            var fromNormalized = Vec3.multiplyScalar(cacheV1, from, 1.0 / lenFrom);
            var axis = chooseAnyPerpendicular(cacheV2, fromNormalized);
            var angle = Math.PI * t;
            rotateAxisAngle(cacheV3, fromNormalized, axis, angle);
            Vec3.multiplyScalar(out, cacheV3, lenLerped);
            return out;
          } else {
            var dotClamped = dot;
            var theta = Math.acos(dotClamped) * t;

            var _fromNormalized = Vec3.multiplyScalar(cacheV1, from, 1.0 / lenFrom);

            var toNormalized = Vec3.multiplyScalar(cacheV2, to, 1.0 / lenTo);
            Vec3.scaleAndAdd(cacheV3, toNormalized, _fromNormalized, -dotClamped);
            Vec3.normalize(cacheV3, cacheV3);
            Vec3.multiplyScalar(cacheV3, cacheV3, Math.sin(theta));
            Vec3.scaleAndAdd(cacheV3, cacheV3, _fromNormalized, Math.cos(theta));
            Vec3.multiplyScalar(out, cacheV3, lenLerped);
            return out;
          }
        };
      }();

      var v3_1 = new Vec3();
      var v3_2 = new Vec3();
      CCClass.fastDefine('cc.Vec3', Vec3, {
        x: 0,
        y: 0,
        z: 0
      });
      legacyCC.Vec3 = Vec3;
      function v3(x, y, z) {
        return new Vec3(x, y, z);
      }

      function chooseAnyPerpendicular(out, v) {
        var x = v.x,
            y = v.y,
            z = v.z;
        var absX = Math.abs(x);
        var absY = Math.abs(y);
        var absZ = Math.abs(z);

        if (absX < absY && absX < absZ) {
          Vec3.set(out, 0.0, z, -y);
        } else if (absY < absZ) {
          Vec3.set(out, z, 0.0, -x);
        } else {
          Vec3.set(out, y, -x, 0.0);
        }

        return Vec3.normalize(out, out);
      }

      var rotateAxisAngle = function () {
        var cacheQ = {
          x: 0.0,
          y: 0.0,
          z: 0.0,
          w: 0.0
        };
        return function (out, input, axis, angle) {
          var rad = angle * 0.5;
          var s = Math.sin(rad);
          cacheQ.x = s * axis.x;
          cacheQ.y = s * axis.y;
          cacheQ.z = s * axis.z;
          cacheQ.w = Math.cos(rad);
          Vec3.transformQuat(out, input, cacheQ);
          return out;
        };
      }();

      legacyCC.v3 = v3;

      var Mat3 = exports('Mat3', function (_ValueType) {
        _inheritsLoose(Mat3, _ValueType);

        Mat3.clone = function clone(a) {
          return new Mat3(a.m00, a.m01, a.m02, a.m03, a.m04, a.m05, a.m06, a.m07, a.m08);
        };

        Mat3.copy = function copy(out, a) {
          out.m00 = a.m00;
          out.m01 = a.m01;
          out.m02 = a.m02;
          out.m03 = a.m03;
          out.m04 = a.m04;
          out.m05 = a.m05;
          out.m06 = a.m06;
          out.m07 = a.m07;
          out.m08 = a.m08;
          return out;
        };

        Mat3.set = function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
          out.m00 = m00;
          out.m01 = m01;
          out.m02 = m02;
          out.m03 = m10;
          out.m04 = m11;
          out.m05 = m12;
          out.m06 = m20;
          out.m07 = m21;
          out.m08 = m22;
          return out;
        };

        Mat3.identity = function identity(out) {
          out.m00 = 1;
          out.m01 = 0;
          out.m02 = 0;
          out.m03 = 0;
          out.m04 = 1;
          out.m05 = 0;
          out.m06 = 0;
          out.m07 = 0;
          out.m08 = 1;
          return out;
        };

        Mat3.transpose = function transpose(out, a) {
          if (out === a) {
            var a01 = a.m01;
            var a02 = a.m02;
            var a12 = a.m05;
            out.m01 = a.m03;
            out.m02 = a.m06;
            out.m03 = a01;
            out.m05 = a.m07;
            out.m06 = a02;
            out.m07 = a12;
          } else {
            out.m00 = a.m00;
            out.m01 = a.m03;
            out.m02 = a.m06;
            out.m03 = a.m01;
            out.m04 = a.m04;
            out.m05 = a.m07;
            out.m06 = a.m02;
            out.m07 = a.m05;
            out.m08 = a.m08;
          }

          return out;
        };

        Mat3.invert = function invert(out, a) {
          var a00 = a.m00;
          var a01 = a.m01;
          var a02 = a.m02;
          var a10 = a.m03;
          var a11 = a.m04;
          var a12 = a.m05;
          var a20 = a.m06;
          var a21 = a.m07;
          var a22 = a.m08;
          var b01 = a22 * a11 - a12 * a21;
          var b11 = -a22 * a10 + a12 * a20;
          var b21 = a21 * a10 - a11 * a20;
          var det = a00 * b01 + a01 * b11 + a02 * b21;

          if (det === 0) {
            out.m00 = 0;
            out.m01 = 0;
            out.m02 = 0;
            out.m03 = 0;
            out.m04 = 0;
            out.m05 = 0;
            out.m06 = 0;
            out.m07 = 0;
            out.m08 = 0;
            return out;
          }

          det = 1.0 / det;
          out.m00 = b01 * det;
          out.m01 = (-a22 * a01 + a02 * a21) * det;
          out.m02 = (a12 * a01 - a02 * a11) * det;
          out.m03 = b11 * det;
          out.m04 = (a22 * a00 - a02 * a20) * det;
          out.m05 = (-a12 * a00 + a02 * a10) * det;
          out.m06 = b21 * det;
          out.m07 = (-a21 * a00 + a01 * a20) * det;
          out.m08 = (a11 * a00 - a01 * a10) * det;
          return out;
        };

        Mat3.determinant = function determinant(a) {
          var a00 = a.m00;
          var a01 = a.m01;
          var a02 = a.m02;
          var a10 = a.m03;
          var a11 = a.m04;
          var a12 = a.m05;
          var a20 = a.m06;
          var a21 = a.m07;
          var a22 = a.m08;
          return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
        };

        Mat3.multiply = function multiply(out, a, b) {
          var a00 = a.m00;
          var a01 = a.m01;
          var a02 = a.m02;
          var a10 = a.m03;
          var a11 = a.m04;
          var a12 = a.m05;
          var a20 = a.m06;
          var a21 = a.m07;
          var a22 = a.m08;
          var b00 = b.m00;
          var b01 = b.m01;
          var b02 = b.m02;
          var b10 = b.m03;
          var b11 = b.m04;
          var b12 = b.m05;
          var b20 = b.m06;
          var b21 = b.m07;
          var b22 = b.m08;
          out.m00 = b00 * a00 + b01 * a10 + b02 * a20;
          out.m01 = b00 * a01 + b01 * a11 + b02 * a21;
          out.m02 = b00 * a02 + b01 * a12 + b02 * a22;
          out.m03 = b10 * a00 + b11 * a10 + b12 * a20;
          out.m04 = b10 * a01 + b11 * a11 + b12 * a21;
          out.m05 = b10 * a02 + b11 * a12 + b12 * a22;
          out.m06 = b20 * a00 + b21 * a10 + b22 * a20;
          out.m07 = b20 * a01 + b21 * a11 + b22 * a21;
          out.m08 = b20 * a02 + b21 * a12 + b22 * a22;
          return out;
        };

        Mat3.multiplyMat4 = function multiplyMat4(out, a, b) {
          var a00 = a.m00;
          var a01 = a.m01;
          var a02 = a.m02;
          var a10 = a.m03;
          var a11 = a.m04;
          var a12 = a.m05;
          var a20 = a.m06;
          var a21 = a.m07;
          var a22 = a.m08;
          var b00 = b.m00;
          var b01 = b.m01;
          var b02 = b.m02;
          var b10 = b.m04;
          var b11 = b.m05;
          var b12 = b.m06;
          var b20 = b.m08;
          var b21 = b.m09;
          var b22 = b.m10;
          out.m00 = b00 * a00 + b01 * a10 + b02 * a20;
          out.m01 = b00 * a01 + b01 * a11 + b02 * a21;
          out.m02 = b00 * a02 + b01 * a12 + b02 * a22;
          out.m03 = b10 * a00 + b11 * a10 + b12 * a20;
          out.m04 = b10 * a01 + b11 * a11 + b12 * a21;
          out.m05 = b10 * a02 + b11 * a12 + b12 * a22;
          out.m06 = b20 * a00 + b21 * a10 + b22 * a20;
          out.m07 = b20 * a01 + b21 * a11 + b22 * a21;
          out.m08 = b20 * a02 + b21 * a12 + b22 * a22;
          return out;
        };

        Mat3.transform = function transform(out, a, v) {
          var a00 = a.m00;
          var a01 = a.m01;
          var a02 = a.m02;
          var a10 = a.m03;
          var a11 = a.m04;
          var a12 = a.m05;
          var a20 = a.m06;
          var a21 = a.m07;
          var a22 = a.m08;
          var x = v.x;
          var y = v.y;
          out.m00 = a00;
          out.m01 = a01;
          out.m02 = a02;
          out.m03 = a10;
          out.m04 = a11;
          out.m05 = a12;
          out.m06 = x * a00 + y * a10 + a20;
          out.m07 = x * a01 + y * a11 + a21;
          out.m08 = x * a02 + y * a12 + a22;
          return out;
        };

        Mat3.scale = function scale(out, a, v) {
          var x = v.x;
          var y = v.y;
          out.m00 = x * a.m00;
          out.m01 = x * a.m01;
          out.m02 = x * a.m02;
          out.m03 = y * a.m03;
          out.m04 = y * a.m04;
          out.m05 = y * a.m05;
          out.m06 = a.m06;
          out.m07 = a.m07;
          out.m08 = a.m08;
          return out;
        };

        Mat3.rotate = function rotate(out, a, rad) {
          var a00 = a.m00;
          var a01 = a.m01;
          var a02 = a.m02;
          var a10 = a.m03;
          var a11 = a.m04;
          var a12 = a.m05;
          var a20 = a.m06;
          var a21 = a.m07;
          var a22 = a.m08;
          var s = Math.sin(rad);
          var c = Math.cos(rad);
          out.m00 = c * a00 + s * a10;
          out.m01 = c * a01 + s * a11;
          out.m02 = c * a02 + s * a12;
          out.m03 = c * a10 - s * a00;
          out.m04 = c * a11 - s * a01;
          out.m05 = c * a12 - s * a02;
          out.m06 = a20;
          out.m07 = a21;
          out.m08 = a22;
          return out;
        };

        Mat3.fromMat4 = function fromMat4(out, a) {
          out.m00 = a.m00;
          out.m01 = a.m01;
          out.m02 = a.m02;
          out.m03 = a.m04;
          out.m04 = a.m05;
          out.m05 = a.m06;
          out.m06 = a.m08;
          out.m07 = a.m09;
          out.m08 = a.m10;
          return out;
        };

        Mat3.fromViewUp = function fromViewUp(out, view, up) {
          if (Vec3.lengthSqr(view) < EPSILON * EPSILON) {
            Mat3.identity(out);
            return out;
          }

          up = up || Vec3.UNIT_Y;
          Vec3.normalize(v3_1$1, Vec3.cross(v3_1$1, up, view));

          if (Vec3.lengthSqr(v3_1$1) < EPSILON * EPSILON) {
            Mat3.identity(out);
            return out;
          }

          Vec3.cross(v3_2$1, view, v3_1$1);
          Mat3.set(out, v3_1$1.x, v3_1$1.y, v3_1$1.z, v3_2$1.x, v3_2$1.y, v3_2$1.z, view.x, view.y, view.z);
          return out;
        };

        Mat3.fromTranslation = function fromTranslation(out, v) {
          out.m00 = 1;
          out.m01 = 0;
          out.m02 = 0;
          out.m03 = 0;
          out.m04 = 1;
          out.m05 = 0;
          out.m06 = v.x;
          out.m07 = v.y;
          out.m08 = 1;
          return out;
        };

        Mat3.fromScaling = function fromScaling(out, v) {
          out.m00 = v.x;
          out.m01 = 0;
          out.m02 = 0;
          out.m03 = 0;
          out.m04 = v.y;
          out.m05 = 0;
          out.m06 = 0;
          out.m07 = 0;
          out.m08 = 1;
          return out;
        };

        Mat3.fromRotation = function fromRotation(out, rad) {
          var s = Math.sin(rad);
          var c = Math.cos(rad);
          out.m00 = c;
          out.m01 = s;
          out.m02 = 0;
          out.m03 = -s;
          out.m04 = c;
          out.m05 = 0;
          out.m06 = 0;
          out.m07 = 0;
          out.m08 = 1;
          return out;
        };

        Mat3.fromQuat = function fromQuat(out, q) {
          var x = q.x;
          var y = q.y;
          var z = q.z;
          var w = q.w;
          var x2 = x + x;
          var y2 = y + y;
          var z2 = z + z;
          var xx = x * x2;
          var yx = y * x2;
          var yy = y * y2;
          var zx = z * x2;
          var zy = z * y2;
          var zz = z * z2;
          var wx = w * x2;
          var wy = w * y2;
          var wz = w * z2;
          out.m00 = 1 - yy - zz;
          out.m03 = yx - wz;
          out.m06 = zx + wy;
          out.m01 = yx + wz;
          out.m04 = 1 - xx - zz;
          out.m07 = zy - wx;
          out.m02 = zx - wy;
          out.m05 = zy + wx;
          out.m08 = 1 - xx - yy;
          return out;
        };

        Mat3.inverseTransposeMat4 = function inverseTransposeMat4(out, a) {
          var a00 = a.m00;
          var a01 = a.m01;
          var a02 = a.m02;
          var a03 = a.m03;
          var a10 = a.m04;
          var a11 = a.m05;
          var a12 = a.m06;
          var a13 = a.m07;
          var a20 = a.m08;
          var a21 = a.m09;
          var a22 = a.m10;
          var a23 = a.m11;
          var a30 = a.m12;
          var a31 = a.m13;
          var a32 = a.m14;
          var a33 = a.m15;
          var b00 = a00 * a11 - a01 * a10;
          var b01 = a00 * a12 - a02 * a10;
          var b02 = a00 * a13 - a03 * a10;
          var b03 = a01 * a12 - a02 * a11;
          var b04 = a01 * a13 - a03 * a11;
          var b05 = a02 * a13 - a03 * a12;
          var b06 = a20 * a31 - a21 * a30;
          var b07 = a20 * a32 - a22 * a30;
          var b08 = a20 * a33 - a23 * a30;
          var b09 = a21 * a32 - a22 * a31;
          var b10 = a21 * a33 - a23 * a31;
          var b11 = a22 * a33 - a23 * a32;
          var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

          if (!det) {
            return null;
          }

          det = 1.0 / det;
          out.m00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
          out.m01 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
          out.m02 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
          out.m03 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
          out.m04 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
          out.m05 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
          out.m06 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
          out.m07 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
          out.m08 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
          return out;
        };

        Mat3.toArray = function toArray(out, m, ofs) {
          if (ofs === void 0) {
            ofs = 0;
          }

          out[ofs + 0] = m.m00;
          out[ofs + 1] = m.m01;
          out[ofs + 2] = m.m02;
          out[ofs + 3] = m.m03;
          out[ofs + 4] = m.m04;
          out[ofs + 5] = m.m05;
          out[ofs + 6] = m.m06;
          out[ofs + 7] = m.m07;
          out[ofs + 8] = m.m08;
          return out;
        };

        Mat3.fromArray = function fromArray(out, arr, ofs) {
          if (ofs === void 0) {
            ofs = 0;
          }

          out.m00 = arr[ofs + 0];
          out.m01 = arr[ofs + 1];
          out.m02 = arr[ofs + 2];
          out.m03 = arr[ofs + 3];
          out.m04 = arr[ofs + 4];
          out.m05 = arr[ofs + 5];
          out.m06 = arr[ofs + 6];
          out.m07 = arr[ofs + 7];
          out.m08 = arr[ofs + 8];
          return out;
        };

        Mat3.add = function add(out, a, b) {
          out.m00 = a.m00 + b.m00;
          out.m01 = a.m01 + b.m01;
          out.m02 = a.m02 + b.m02;
          out.m03 = a.m03 + b.m03;
          out.m04 = a.m04 + b.m04;
          out.m05 = a.m05 + b.m05;
          out.m06 = a.m06 + b.m06;
          out.m07 = a.m07 + b.m07;
          out.m08 = a.m08 + b.m08;
          return out;
        };

        Mat3.subtract = function subtract(out, a, b) {
          out.m00 = a.m00 - b.m00;
          out.m01 = a.m01 - b.m01;
          out.m02 = a.m02 - b.m02;
          out.m03 = a.m03 - b.m03;
          out.m04 = a.m04 - b.m04;
          out.m05 = a.m05 - b.m05;
          out.m06 = a.m06 - b.m06;
          out.m07 = a.m07 - b.m07;
          out.m08 = a.m08 - b.m08;
          return out;
        };

        Mat3.multiplyScalar = function multiplyScalar(out, a, b) {
          out.m00 = a.m00 * b;
          out.m01 = a.m01 * b;
          out.m02 = a.m02 * b;
          out.m03 = a.m03 * b;
          out.m04 = a.m04 * b;
          out.m05 = a.m05 * b;
          out.m06 = a.m06 * b;
          out.m07 = a.m07 * b;
          out.m08 = a.m08 * b;
          return out;
        };

        Mat3.multiplyScalarAndAdd = function multiplyScalarAndAdd(out, a, b, scale) {
          out.m00 = b.m00 * scale + a.m00;
          out.m01 = b.m01 * scale + a.m01;
          out.m02 = b.m02 * scale + a.m02;
          out.m03 = b.m03 * scale + a.m03;
          out.m04 = b.m04 * scale + a.m04;
          out.m05 = b.m05 * scale + a.m05;
          out.m06 = b.m06 * scale + a.m06;
          out.m07 = b.m07 * scale + a.m07;
          out.m08 = b.m08 * scale + a.m08;
          return out;
        };

        Mat3.strictEquals = function strictEquals(a, b) {
          return a.m00 === b.m00 && a.m01 === b.m01 && a.m02 === b.m02 && a.m03 === b.m03 && a.m04 === b.m04 && a.m05 === b.m05 && a.m06 === b.m06 && a.m07 === b.m07 && a.m08 === b.m08;
        };

        Mat3.equals = function equals(a, b, epsilon) {
          if (epsilon === void 0) {
            epsilon = EPSILON;
          }

          return Math.abs(a.m00 - b.m00) <= epsilon * Math.max(1.0, Math.abs(a.m00), Math.abs(b.m00)) && Math.abs(a.m01 - b.m01) <= epsilon * Math.max(1.0, Math.abs(a.m01), Math.abs(b.m01)) && Math.abs(a.m02 - b.m02) <= epsilon * Math.max(1.0, Math.abs(a.m02), Math.abs(b.m02)) && Math.abs(a.m03 - b.m03) <= epsilon * Math.max(1.0, Math.abs(a.m03), Math.abs(b.m03)) && Math.abs(a.m04 - b.m04) <= epsilon * Math.max(1.0, Math.abs(a.m04), Math.abs(b.m04)) && Math.abs(a.m05 - b.m05) <= epsilon * Math.max(1.0, Math.abs(a.m05), Math.abs(b.m05)) && Math.abs(a.m06 - b.m06) <= epsilon * Math.max(1.0, Math.abs(a.m06), Math.abs(b.m06)) && Math.abs(a.m07 - b.m07) <= epsilon * Math.max(1.0, Math.abs(a.m07), Math.abs(b.m07)) && Math.abs(a.m08 - b.m08) <= epsilon * Math.max(1.0, Math.abs(a.m08), Math.abs(b.m08));
        };

        Mat3.toEuler = function toEuler(matrix, v) {
          var a00 = matrix.m00;
          var a01 = matrix.m01;
          var a02 = matrix.m02;
          var a10 = matrix.m03;
          var a11 = matrix.m04;
          var a12 = matrix.m05;
          var a20 = matrix.m06;
          var a21 = matrix.m07;
          var a22 = matrix.m08;

          if (a21 < 0.999) {
            if (a21 > -0.999) {
              v.x = Math.asin(-a21);
              v.y = Math.atan2(a20, a22);
              v.z = Math.atan2(a01, a11);
              return true;
            } else {
              v.x = HALF_PI;
              v.y = Math.atan2(a10, a00);
              v.z = 0.0;
              return false;
            }
          } else {
            v.x = -HALF_PI;
            v.y = Math.atan2(-a10, a00);
            v.z = 0.0;
            return false;
          }
        };

        function Mat3(m00, m01, m02, m03, m04, m05, m06, m07, m08) {
          var _this;

          if (m00 === void 0) {
            m00 = 1;
          }

          if (m01 === void 0) {
            m01 = 0;
          }

          if (m02 === void 0) {
            m02 = 0;
          }

          if (m03 === void 0) {
            m03 = 0;
          }

          if (m04 === void 0) {
            m04 = 1;
          }

          if (m05 === void 0) {
            m05 = 0;
          }

          if (m06 === void 0) {
            m06 = 0;
          }

          if (m07 === void 0) {
            m07 = 0;
          }

          if (m08 === void 0) {
            m08 = 1;
          }

          _this = _ValueType.call(this) || this;

          if (typeof m00 === 'object') {
            _this.m00 = m00.m00;
            _this.m01 = m00.m01;
            _this.m02 = m00.m02;
            _this.m03 = m00.m03;
            _this.m04 = m00.m04;
            _this.m05 = m00.m05;
            _this.m06 = m00.m06;
            _this.m07 = m00.m07;
            _this.m08 = m00.m08;
          } else {
            _this.m00 = m00;
            _this.m01 = m01;
            _this.m02 = m02;
            _this.m03 = m03;
            _this.m04 = m04;
            _this.m05 = m05;
            _this.m06 = m06;
            _this.m07 = m07;
            _this.m08 = m08;
          }

          return _this;
        }

        var _proto = Mat3.prototype;

        _proto.clone = function clone() {
          var t = this;
          return new Mat3(t.m00, t.m01, t.m02, t.m03, t.m04, t.m05, t.m06, t.m07, t.m08);
        };

        _proto.set = function set(m00, m01, m02, m03, m04, m05, m06, m07, m08) {
          if (m00 === void 0) {
            m00 = 1;
          }

          if (m01 === void 0) {
            m01 = 0;
          }

          if (m02 === void 0) {
            m02 = 0;
          }

          if (m03 === void 0) {
            m03 = 0;
          }

          if (m04 === void 0) {
            m04 = 1;
          }

          if (m05 === void 0) {
            m05 = 0;
          }

          if (m06 === void 0) {
            m06 = 0;
          }

          if (m07 === void 0) {
            m07 = 0;
          }

          if (m08 === void 0) {
            m08 = 1;
          }

          if (typeof m00 === 'object') {
            this.m00 = m00.m00;
            this.m01 = m00.m01;
            this.m02 = m00.m02;
            this.m03 = m00.m03;
            this.m04 = m00.m04;
            this.m05 = m00.m05;
            this.m06 = m00.m06;
            this.m07 = m00.m07;
            this.m08 = m00.m08;
          } else {
            this.m00 = m00;
            this.m01 = m01;
            this.m02 = m02;
            this.m03 = m03;
            this.m04 = m04;
            this.m05 = m05;
            this.m06 = m06;
            this.m07 = m07;
            this.m08 = m08;
          }

          return this;
        };

        _proto.equals = function equals(other, epsilon) {
          if (epsilon === void 0) {
            epsilon = EPSILON;
          }

          return Math.abs(this.m00 - other.m00) <= epsilon * Math.max(1.0, Math.abs(this.m00), Math.abs(other.m00)) && Math.abs(this.m01 - other.m01) <= epsilon * Math.max(1.0, Math.abs(this.m01), Math.abs(other.m01)) && Math.abs(this.m02 - other.m02) <= epsilon * Math.max(1.0, Math.abs(this.m02), Math.abs(other.m02)) && Math.abs(this.m03 - other.m03) <= epsilon * Math.max(1.0, Math.abs(this.m03), Math.abs(other.m03)) && Math.abs(this.m04 - other.m04) <= epsilon * Math.max(1.0, Math.abs(this.m04), Math.abs(other.m04)) && Math.abs(this.m05 - other.m05) <= epsilon * Math.max(1.0, Math.abs(this.m05), Math.abs(other.m05)) && Math.abs(this.m06 - other.m06) <= epsilon * Math.max(1.0, Math.abs(this.m06), Math.abs(other.m06)) && Math.abs(this.m07 - other.m07) <= epsilon * Math.max(1.0, Math.abs(this.m07), Math.abs(other.m07)) && Math.abs(this.m08 - other.m08) <= epsilon * Math.max(1.0, Math.abs(this.m08), Math.abs(other.m08));
        };

        _proto.strictEquals = function strictEquals(other) {
          return this.m00 === other.m00 && this.m01 === other.m01 && this.m02 === other.m02 && this.m03 === other.m03 && this.m04 === other.m04 && this.m05 === other.m05 && this.m06 === other.m06 && this.m07 === other.m07 && this.m08 === other.m08;
        };

        _proto.toString = function toString() {
          var t = this;
          return "[\n" + t.m00 + ", " + t.m01 + ", " + t.m02 + ",\n" + t.m03 + ",\n" + t.m04 + ", " + t.m05 + ",\n" + t.m06 + ", " + t.m07 + ",\n" + t.m08 + "\n" + "]";
        };

        _proto.identity = function identity() {
          this.m00 = 1;
          this.m01 = 0;
          this.m02 = 0;
          this.m03 = 0;
          this.m04 = 1;
          this.m05 = 0;
          this.m06 = 0;
          this.m07 = 0;
          this.m08 = 1;
          return this;
        };

        _proto.transpose = function transpose() {
          var a01 = this.m01;
          var a02 = this.m02;
          var a12 = this.m05;
          this.m01 = this.m03;
          this.m02 = this.m06;
          this.m03 = a01;
          this.m05 = this.m07;
          this.m06 = a02;
          this.m07 = a12;
          return this;
        };

        _proto.invert = function invert() {
          var a00 = this.m00;
          var a01 = this.m01;
          var a02 = this.m02;
          var a10 = this.m03;
          var a11 = this.m04;
          var a12 = this.m05;
          var a20 = this.m06;
          var a21 = this.m07;
          var a22 = this.m08;
          var b01 = a22 * a11 - a12 * a21;
          var b11 = -a22 * a10 + a12 * a20;
          var b21 = a21 * a10 - a11 * a20;
          var det = a00 * b01 + a01 * b11 + a02 * b21;

          if (det === 0) {
            this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
            return this;
          }

          det = 1.0 / det;
          this.m00 = b01 * det;
          this.m01 = (-a22 * a01 + a02 * a21) * det;
          this.m02 = (a12 * a01 - a02 * a11) * det;
          this.m03 = b11 * det;
          this.m04 = (a22 * a00 - a02 * a20) * det;
          this.m05 = (-a12 * a00 + a02 * a10) * det;
          this.m06 = b21 * det;
          this.m07 = (-a21 * a00 + a01 * a20) * det;
          this.m08 = (a11 * a00 - a01 * a10) * det;
          return this;
        };

        _proto.determinant = function determinant() {
          var a00 = this.m00;
          var a01 = this.m01;
          var a02 = this.m02;
          var a10 = this.m03;
          var a11 = this.m04;
          var a12 = this.m05;
          var a20 = this.m06;
          var a21 = this.m07;
          var a22 = this.m08;
          return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
        };

        _proto.add = function add(mat) {
          this.m00 += mat.m00;
          this.m01 += mat.m01;
          this.m02 += mat.m02;
          this.m03 += mat.m03;
          this.m04 += mat.m04;
          this.m05 += mat.m05;
          this.m06 += mat.m06;
          this.m07 += mat.m07;
          this.m08 += mat.m08;
          return this;
        };

        _proto.subtract = function subtract(mat) {
          this.m00 -= mat.m00;
          this.m01 -= mat.m01;
          this.m02 -= mat.m02;
          this.m03 -= mat.m03;
          this.m04 -= mat.m04;
          this.m05 -= mat.m05;
          this.m06 -= mat.m06;
          this.m07 -= mat.m07;
          this.m08 -= mat.m08;
          return this;
        };

        _proto.multiply = function multiply(mat) {
          var a00 = this.m00;
          var a01 = this.m01;
          var a02 = this.m02;
          var a10 = this.m03;
          var a11 = this.m04;
          var a12 = this.m05;
          var a20 = this.m06;
          var a21 = this.m07;
          var a22 = this.m08;
          var b00 = mat.m00;
          var b01 = mat.m01;
          var b02 = mat.m02;
          var b10 = mat.m03;
          var b11 = mat.m04;
          var b12 = mat.m05;
          var b20 = mat.m06;
          var b21 = mat.m07;
          var b22 = mat.m08;
          this.m00 = b00 * a00 + b01 * a10 + b02 * a20;
          this.m01 = b00 * a01 + b01 * a11 + b02 * a21;
          this.m02 = b00 * a02 + b01 * a12 + b02 * a22;
          this.m03 = b10 * a00 + b11 * a10 + b12 * a20;
          this.m04 = b10 * a01 + b11 * a11 + b12 * a21;
          this.m05 = b10 * a02 + b11 * a12 + b12 * a22;
          this.m06 = b20 * a00 + b21 * a10 + b22 * a20;
          this.m07 = b20 * a01 + b21 * a11 + b22 * a21;
          this.m08 = b20 * a02 + b21 * a12 + b22 * a22;
          return this;
        };

        _proto.multiplyScalar = function multiplyScalar(scalar) {
          this.m00 *= scalar;
          this.m01 *= scalar;
          this.m02 *= scalar;
          this.m03 *= scalar;
          this.m04 *= scalar;
          this.m05 *= scalar;
          this.m06 *= scalar;
          this.m07 *= scalar;
          this.m08 *= scalar;
          return this;
        };

        _proto.scale = function scale(vec) {
          var x = vec.x;
          var y = vec.y;
          this.m00 = x * this.m00;
          this.m01 = x * this.m01;
          this.m02 = x * this.m02;
          this.m03 = y * this.m03;
          this.m04 = y * this.m04;
          this.m05 = y * this.m05;
          this.m06 = this.m06;
          this.m07 = this.m07;
          this.m08 = this.m08;
          return this;
        };

        _proto.rotate = function rotate(rad) {
          var a00 = this.m00;
          var a01 = this.m01;
          var a02 = this.m02;
          var a10 = this.m03;
          var a11 = this.m04;
          var a12 = this.m05;
          var a20 = this.m06;
          var a21 = this.m07;
          var a22 = this.m08;
          var s = Math.sin(rad);
          var c = Math.cos(rad);
          this.m00 = c * a00 + s * a10;
          this.m01 = c * a01 + s * a11;
          this.m02 = c * a02 + s * a12;
          this.m03 = c * a10 - s * a00;
          this.m04 = c * a11 - s * a01;
          this.m05 = c * a12 - s * a02;
          this.m06 = a20;
          this.m07 = a21;
          this.m08 = a22;
          return this;
        };

        _proto.fromQuat = function fromQuat(q) {
          var x = q.x;
          var y = q.y;
          var z = q.z;
          var w = q.w;
          var x2 = x + x;
          var y2 = y + y;
          var z2 = z + z;
          var xx = x * x2;
          var yx = y * x2;
          var yy = y * y2;
          var zx = z * x2;
          var zy = z * y2;
          var zz = z * z2;
          var wx = w * x2;
          var wy = w * y2;
          var wz = w * z2;
          this.m00 = 1 - yy - zz;
          this.m03 = yx - wz;
          this.m06 = zx + wy;
          this.m01 = yx + wz;
          this.m04 = 1 - xx - zz;
          this.m07 = zy - wx;
          this.m02 = zx - wy;
          this.m05 = zy + wx;
          this.m08 = 1 - xx - yy;
          return this;
        };

        return Mat3;
      }(ValueType));
      Mat3.IDENTITY = Object.freeze(new Mat3());
      var v3_1$1 = new Vec3();
      var v3_2$1 = new Vec3();
      CCClass.fastDefine('cc.Mat3', Mat3, {
        m00: 1,
        m01: 0,
        m02: 0,
        m03: 0,
        m04: 1,
        m05: 0,
        m06: 0,
        m07: 0,
        m08: 1
      });
      legacyCC.Mat3 = Mat3;

      var Quat = exports('Quat', function (_ValueType) {
        _inheritsLoose(Quat, _ValueType);

        Quat.clone = function clone(a) {
          return new Quat(a.x, a.y, a.z, a.w);
        };

        Quat.copy = function copy(out, a) {
          out.x = a.x;
          out.y = a.y;
          out.z = a.z;
          out.w = a.w;
          return out;
        };

        Quat.set = function set(out, x, y, z, w) {
          out.x = x;
          out.y = y;
          out.z = z;
          out.w = w;
          return out;
        };

        Quat.identity = function identity(out) {
          out.x = 0;
          out.y = 0;
          out.z = 0;
          out.w = 1;
          return out;
        };

        Quat.rotationTo = function rotationTo(out, a, b) {
          var dot = Vec3.dot(a, b);

          if (dot < -0.999999) {
            Vec3.cross(v3_1$2, Vec3.UNIT_X, a);

            if (v3_1$2.length() < 0.000001) {
              Vec3.cross(v3_1$2, Vec3.UNIT_Y, a);
            }

            Vec3.normalize(v3_1$2, v3_1$2);
            Quat.fromAxisAngle(out, v3_1$2, Math.PI);
            return out;
          } else if (dot > 0.999999) {
            out.x = 0;
            out.y = 0;
            out.z = 0;
            out.w = 1;
            return out;
          } else {
            Vec3.cross(v3_1$2, a, b);
            out.x = v3_1$2.x;
            out.y = v3_1$2.y;
            out.z = v3_1$2.z;
            out.w = 1 + dot;
            return Quat.normalize(out, out);
          }
        };

        Quat.getAxisAngle = function getAxisAngle(outAxis, q) {
          var rad = Math.acos(q.w) * 2.0;
          var s = Math.sin(rad / 2.0);

          if (s !== 0.0) {
            outAxis.x = q.x / s;
            outAxis.y = q.y / s;
            outAxis.z = q.z / s;
          } else {
            outAxis.x = 1;
            outAxis.y = 0;
            outAxis.z = 0;
          }

          return rad;
        };

        Quat.multiply = function multiply(out, a, b) {
          var x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;
          var y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;
          var z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;
          var w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;
          out.x = x;
          out.y = y;
          out.z = z;
          out.w = w;
          return out;
        };

        Quat.multiplyScalar = function multiplyScalar(out, a, b) {
          out.x = a.x * b;
          out.y = a.y * b;
          out.z = a.z * b;
          out.w = a.w * b;
          return out;
        };

        Quat.scaleAndAdd = function scaleAndAdd(out, a, b, scale) {
          out.x = a.x + b.x * scale;
          out.y = a.y + b.y * scale;
          out.z = a.z + b.z * scale;
          out.w = a.w + b.w * scale;
          return out;
        };

        Quat.rotateX = function rotateX(out, a, rad) {
          rad *= 0.5;
          var bx = Math.sin(rad);
          var bw = Math.cos(rad);
          var x = a.x,
              y = a.y,
              z = a.z,
              w = a.w;
          out.x = x * bw + w * bx;
          out.y = y * bw + z * bx;
          out.z = z * bw - y * bx;
          out.w = w * bw - x * bx;
          return out;
        };

        Quat.rotateY = function rotateY(out, a, rad) {
          rad *= 0.5;
          var by = Math.sin(rad);
          var bw = Math.cos(rad);
          var x = a.x,
              y = a.y,
              z = a.z,
              w = a.w;
          out.x = x * bw - z * by;
          out.y = y * bw + w * by;
          out.z = z * bw + x * by;
          out.w = w * bw - y * by;
          return out;
        };

        Quat.rotateZ = function rotateZ(out, a, rad) {
          rad *= 0.5;
          var bz = Math.sin(rad);
          var bw = Math.cos(rad);
          var x = a.x,
              y = a.y,
              z = a.z,
              w = a.w;
          out.x = x * bw + y * bz;
          out.y = y * bw - x * bz;
          out.z = z * bw + w * bz;
          out.w = w * bw - z * bz;
          return out;
        };

        Quat.rotateAround = function rotateAround(out, rot, axis, rad) {
          Quat.invert(qt_1, rot);
          Vec3.transformQuat(v3_1$2, axis, qt_1);
          Quat.fromAxisAngle(qt_1, v3_1$2, rad);
          Quat.multiply(out, rot, qt_1);
          return out;
        };

        Quat.rotateAroundLocal = function rotateAroundLocal(out, rot, axis, rad) {
          Quat.fromAxisAngle(qt_1, axis, rad);
          Quat.multiply(out, rot, qt_1);
          return out;
        };

        Quat.calculateW = function calculateW(out, a) {
          out.x = a.x;
          out.y = a.y;
          out.z = a.z;
          out.w = Math.sqrt(Math.abs(1.0 - a.x * a.x - a.y * a.y - a.z * a.z));
          return out;
        };

        Quat.dot = function dot(a, b) {
          return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
        };

        Quat.lerp = function lerp(out, a, b, t) {
          out.x = a.x + t * (b.x - a.x);
          out.y = a.y + t * (b.y - a.y);
          out.z = a.z + t * (b.z - a.z);
          out.w = a.w + t * (b.w - a.w);
          return out;
        };

        Quat.slerp = function slerp(out, a, b, t) {
          var scale0 = 0;
          var scale1 = 0;
          var bx = b.x;
          var by = b.y;
          var bz = b.z;
          var bw = b.w;
          var cosom = a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;

          if (cosom < 0.0) {
            cosom = -cosom;
            bx = -bx;
            by = -by;
            bz = -bz;
            bw = -bw;
          }

          if (1.0 - cosom > 0.000001) {
            var omega = Math.acos(cosom);
            var sinom = Math.sin(omega);
            scale0 = Math.sin((1.0 - t) * omega) / sinom;
            scale1 = Math.sin(t * omega) / sinom;
          } else {
            scale0 = 1.0 - t;
            scale1 = t;
          }

          out.x = scale0 * a.x + scale1 * bx;
          out.y = scale0 * a.y + scale1 * by;
          out.z = scale0 * a.z + scale1 * bz;
          out.w = scale0 * a.w + scale1 * bw;
          return out;
        };

        Quat.sqlerp = function sqlerp(out, a, b, c, d, t) {
          Quat.slerp(qt_1, a, d, t);
          Quat.slerp(qt_2, b, c, t);
          Quat.slerp(out, qt_1, qt_2, 2 * t * (1 - t));
          return out;
        };

        Quat.invert = function invert(out, a) {
          var dot = a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w;
          var invDot = dot ? 1.0 / dot : 0;
          out.x = -a.x * invDot;
          out.y = -a.y * invDot;
          out.z = -a.z * invDot;
          out.w = a.w * invDot;
          return out;
        };

        Quat.conjugate = function conjugate(out, a) {
          out.x = -a.x;
          out.y = -a.y;
          out.z = -a.z;
          out.w = a.w;
          return out;
        };

        Quat.len = function len(a) {
          return Math.sqrt(a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w);
        };

        Quat.lengthSqr = function lengthSqr(a) {
          return a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w;
        };

        Quat.normalize = function normalize(out, a) {
          var len = a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w;

          if (len > 0) {
            len = 1 / Math.sqrt(len);
            out.x = a.x * len;
            out.y = a.y * len;
            out.z = a.z * len;
            out.w = a.w * len;
          }

          return out;
        };

        Quat.fromAxes = function fromAxes(out, xAxis, yAxis, zAxis) {
          Mat3.set(m3_1, xAxis.x, xAxis.y, xAxis.z, yAxis.x, yAxis.y, yAxis.z, zAxis.x, zAxis.y, zAxis.z);
          return Quat.normalize(out, Quat.fromMat3(out, m3_1));
        };

        Quat.fromViewUp = function fromViewUp(out, view, up) {
          Mat3.fromViewUp(m3_1, view, up);
          return Quat.normalize(out, Quat.fromMat3(out, m3_1));
        };

        Quat.fromAxisAngle = function fromAxisAngle(out, axis, rad) {
          rad *= 0.5;
          var s = Math.sin(rad);
          out.x = s * axis.x;
          out.y = s * axis.y;
          out.z = s * axis.z;
          out.w = Math.cos(rad);
          return out;
        };

        Quat.fromMat3 = function fromMat3(out, m) {
          var m00 = m.m00,
              m01 = m.m03,
              m02 = m.m06,
              m10 = m.m01,
              m11 = m.m04,
              m12 = m.m07,
              m20 = m.m02,
              m21 = m.m05,
              m22 = m.m08;
          var trace = m00 + m11 + m22;

          if (trace > 0) {
            var s = 0.5 / Math.sqrt(trace + 1.0);
            out.w = 0.25 / s;
            out.x = (m21 - m12) * s;
            out.y = (m02 - m20) * s;
            out.z = (m10 - m01) * s;
          } else if (m00 > m11 && m00 > m22) {
            var _s = 2.0 * Math.sqrt(1.0 + m00 - m11 - m22);

            out.w = (m21 - m12) / _s;
            out.x = 0.25 * _s;
            out.y = (m01 + m10) / _s;
            out.z = (m02 + m20) / _s;
          } else if (m11 > m22) {
            var _s2 = 2.0 * Math.sqrt(1.0 + m11 - m00 - m22);

            out.w = (m02 - m20) / _s2;
            out.x = (m01 + m10) / _s2;
            out.y = 0.25 * _s2;
            out.z = (m12 + m21) / _s2;
          } else {
            var _s3 = 2.0 * Math.sqrt(1.0 + m22 - m00 - m11);

            out.w = (m10 - m01) / _s3;
            out.x = (m02 + m20) / _s3;
            out.y = (m12 + m21) / _s3;
            out.z = 0.25 * _s3;
          }

          return out;
        };

        Quat.fromEuler = function fromEuler(out, x, y, z) {
          x *= halfToRad;
          y *= halfToRad;
          z *= halfToRad;
          var sx = Math.sin(x);
          var cx = Math.cos(x);
          var sy = Math.sin(y);
          var cy = Math.cos(y);
          var sz = Math.sin(z);
          var cz = Math.cos(z);
          out.x = sx * cy * cz + cx * sy * sz;
          out.y = cx * sy * cz + sx * cy * sz;
          out.z = cx * cy * sz - sx * sy * cz;
          out.w = cx * cy * cz - sx * sy * sz;
          return out;
        };

        Quat.fromAngleZ = function fromAngleZ(out, z) {
          z *= halfToRad;
          out.x = out.y = 0;
          out.z = Math.sin(z);
          out.w = Math.cos(z);
          return out;
        };

        Quat.toAxisX = function toAxisX(out, q) {
          var fy = 2.0 * q.y;
          var fz = 2.0 * q.z;
          out.x = 1.0 - fy * q.y - fz * q.z;
          out.y = fy * q.x + fz * q.w;
          out.z = fz * q.x + fy * q.w;
          return out;
        };

        Quat.toAxisY = function toAxisY(out, q) {
          var fx = 2.0 * q.x;
          var fy = 2.0 * q.y;
          var fz = 2.0 * q.z;
          out.x = fy * q.x - fz * q.w;
          out.y = 1.0 - fx * q.x - fz * q.z;
          out.z = fz * q.y + fx * q.w;
          return out;
        };

        Quat.toAxisZ = function toAxisZ(out, q) {
          var fx = 2.0 * q.x;
          var fy = 2.0 * q.y;
          var fz = 2.0 * q.z;
          out.x = fz * q.x - fy * q.w;
          out.y = fz * q.y - fx * q.w;
          out.z = 1.0 - fx * q.x - fy * q.y;
          return out;
        };

        Quat.toEuler = function toEuler(out, q, outerZ) {
          var x = q.x,
              y = q.y,
              z = q.z,
              w = q.w;
          var bank = 0;
          var heading = 0;
          var attitude = 0;
          var test = x * y + z * w;

          if (test > 0.499999) {
            bank = 0;
            heading = toDegree(2 * Math.atan2(x, w));
            attitude = 90;
          } else if (test < -0.499999) {
            bank = 0;
            heading = -toDegree(2 * Math.atan2(x, w));
            attitude = -90;
          } else {
            var sqx = x * x;
            var sqy = y * y;
            var sqz = z * z;
            bank = toDegree(Math.atan2(2 * x * w - 2 * y * z, 1 - 2 * sqx - 2 * sqz));
            heading = toDegree(Math.atan2(2 * y * w - 2 * x * z, 1 - 2 * sqy - 2 * sqz));
            attitude = toDegree(Math.asin(2 * test));

            if (outerZ) {
              bank = -180 * Math.sign(bank + 1e-6) + bank;
              heading = -180 * Math.sign(heading + 1e-6) + heading;
              attitude = 180 * Math.sign(attitude + 1e-6) - attitude;
            }
          }

          out.x = bank;
          out.y = heading;
          out.z = attitude;
          return out;
        };

        Quat.toEulerInYXZOrder = function toEulerInYXZOrder(out, q) {
          Mat3.fromQuat(m3_1, q);
          Mat3.toEuler(m3_1, out);
          out.x = toDegree(out.x);
          out.y = toDegree(out.y);
          out.z = toDegree(out.z);
        };

        Quat.toArray = function toArray(out, q, ofs) {
          if (ofs === void 0) {
            ofs = 0;
          }

          out[ofs + 0] = q.x;
          out[ofs + 1] = q.y;
          out[ofs + 2] = q.z;
          out[ofs + 3] = q.w;
          return out;
        };

        Quat.fromArray = function fromArray(out, arr, ofs) {
          if (ofs === void 0) {
            ofs = 0;
          }

          out.x = arr[ofs + 0];
          out.y = arr[ofs + 1];
          out.z = arr[ofs + 2];
          out.w = arr[ofs + 3];
          return out;
        };

        Quat.strictEquals = function strictEquals(a, b) {
          return a.x === b.x && a.y === b.y && a.z === b.z && a.w === b.w;
        };

        Quat.equals = function equals(a, b, epsilon) {
          if (epsilon === void 0) {
            epsilon = EPSILON;
          }

          return Math.abs(a.x - b.x) <= epsilon * Math.max(1.0, Math.abs(a.x), Math.abs(b.x)) && Math.abs(a.y - b.y) <= epsilon * Math.max(1.0, Math.abs(a.y), Math.abs(b.y)) && Math.abs(a.z - b.z) <= epsilon * Math.max(1.0, Math.abs(a.z), Math.abs(b.z)) && Math.abs(a.w - b.w) <= epsilon * Math.max(1.0, Math.abs(a.w), Math.abs(b.w));
        };

        function Quat(x, y, z, w) {
          var _this;

          _this = _ValueType.call(this) || this;

          if (x && typeof x === 'object') {
            _this.x = x.x;
            _this.y = x.y;
            _this.z = x.z;
            _this.w = x.w;
          } else {
            _this.x = x || 0;
            _this.y = y || 0;
            _this.z = z || 0;
            _this.w = w !== null && w !== void 0 ? w : 1;
          }

          return _this;
        }

        var _proto = Quat.prototype;

        _proto.clone = function clone() {
          return new Quat(this.x, this.y, this.z, this.w);
        };

        _proto.set = function set(x, y, z, w) {
          if (x && typeof x === 'object') {
            this.x = x.x;
            this.y = x.y;
            this.z = x.z;
            this.w = x.w;
          } else {
            this.x = x || 0;
            this.y = y || 0;
            this.z = z || 0;
            this.w = w !== null && w !== void 0 ? w : 1;
          }

          return this;
        };

        _proto.equals = function equals(other, epsilon) {
          if (epsilon === void 0) {
            epsilon = EPSILON;
          }

          return Math.abs(this.x - other.x) <= epsilon * Math.max(1.0, Math.abs(this.x), Math.abs(other.x)) && Math.abs(this.y - other.y) <= epsilon * Math.max(1.0, Math.abs(this.y), Math.abs(other.y)) && Math.abs(this.z - other.z) <= epsilon * Math.max(1.0, Math.abs(this.z), Math.abs(other.z)) && Math.abs(this.w - other.w) <= epsilon * Math.max(1.0, Math.abs(this.w), Math.abs(other.w));
        };

        _proto.strictEquals = function strictEquals(other) {
          return other && this.x === other.x && this.y === other.y && this.z === other.z && this.w === other.w;
        };

        _proto.getEulerAngles = function getEulerAngles(out) {
          return Quat.toEuler(out, this);
        };

        _proto.lerp = function lerp(to, ratio) {
          this.x += ratio * (to.x - this.x);
          this.y += ratio * (to.y - this.y);
          this.z += ratio * (to.z - this.z);
          this.w += ratio * (to.w - this.w);
          return this;
        };

        _proto.slerp = function slerp(to, ratio) {
          return Quat.slerp(this, this, to, ratio);
        };

        _proto.length = function length() {
          return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
        };

        _proto.lengthSqr = function lengthSqr() {
          return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
        };

        return Quat;
      }(ValueType));
      Quat.IDENTITY = Object.freeze(new Quat());
      var qt_1 = new Quat();
      var qt_2 = new Quat();
      var v3_1$2 = new Vec3();
      var m3_1 = new Mat3();
      var halfToRad = 0.5 * Math.PI / 180.0;
      CCClass.fastDefine('cc.Quat', Quat, {
        x: 0,
        y: 0,
        z: 0,
        w: 1
      });
      legacyCC.Quat = Quat;
      function quat(x, y, z, w) {
        if (x === void 0) {
          x = 0;
        }

        if (y === void 0) {
          y = 0;
        }

        if (z === void 0) {
          z = 0;
        }

        if (w === void 0) {
          w = 1;
        }

        return new Quat(x, y, z, w);
      }
      legacyCC.quat = quat;

      var preTransforms = exports('preTransforms', Object.freeze([Object.freeze([1, 0, 0, 1]), Object.freeze([0, 1, -1, 0]), Object.freeze([-1, 0, 0, -1]), Object.freeze([0, -1, 1, 0])]));
      var Mat4 = exports('Mat4', function (_ValueType) {
        _inheritsLoose(Mat4, _ValueType);

        Mat4.clone = function clone(a) {
          return new Mat4(a.m00, a.m01, a.m02, a.m03, a.m04, a.m05, a.m06, a.m07, a.m08, a.m09, a.m10, a.m11, a.m12, a.m13, a.m14, a.m15);
        };

        Mat4.copy = function copy(out, a) {
          out.m00 = a.m00;
          out.m01 = a.m01;
          out.m02 = a.m02;
          out.m03 = a.m03;
          out.m04 = a.m04;
          out.m05 = a.m05;
          out.m06 = a.m06;
          out.m07 = a.m07;
          out.m08 = a.m08;
          out.m09 = a.m09;
          out.m10 = a.m10;
          out.m11 = a.m11;
          out.m12 = a.m12;
          out.m13 = a.m13;
          out.m14 = a.m14;
          out.m15 = a.m15;
          return out;
        };

        Mat4.set = function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
          out.m00 = m00;
          out.m01 = m01;
          out.m02 = m02;
          out.m03 = m03;
          out.m04 = m10;
          out.m05 = m11;
          out.m06 = m12;
          out.m07 = m13;
          out.m08 = m20;
          out.m09 = m21;
          out.m10 = m22;
          out.m11 = m23;
          out.m12 = m30;
          out.m13 = m31;
          out.m14 = m32;
          out.m15 = m33;
          return out;
        };

        Mat4.identity = function identity(out) {
          out.m00 = 1;
          out.m01 = 0;
          out.m02 = 0;
          out.m03 = 0;
          out.m04 = 0;
          out.m05 = 1;
          out.m06 = 0;
          out.m07 = 0;
          out.m08 = 0;
          out.m09 = 0;
          out.m10 = 1;
          out.m11 = 0;
          out.m12 = 0;
          out.m13 = 0;
          out.m14 = 0;
          out.m15 = 1;
          return out;
        };

        Mat4.transpose = function transpose(out, a) {
          if (out === a) {
            var a01 = a.m01;
            var a02 = a.m02;
            var a03 = a.m03;
            var a12 = a.m06;
            var a13 = a.m07;
            var a23 = a.m11;
            out.m01 = a.m04;
            out.m02 = a.m08;
            out.m03 = a.m12;
            out.m04 = a01;
            out.m06 = a.m09;
            out.m07 = a.m13;
            out.m08 = a02;
            out.m09 = a12;
            out.m11 = a.m14;
            out.m12 = a03;
            out.m13 = a13;
            out.m14 = a23;
          } else {
            out.m00 = a.m00;
            out.m01 = a.m04;
            out.m02 = a.m08;
            out.m03 = a.m12;
            out.m04 = a.m01;
            out.m05 = a.m05;
            out.m06 = a.m09;
            out.m07 = a.m13;
            out.m08 = a.m02;
            out.m09 = a.m06;
            out.m10 = a.m10;
            out.m11 = a.m14;
            out.m12 = a.m03;
            out.m13 = a.m07;
            out.m14 = a.m11;
            out.m15 = a.m15;
          }

          return out;
        };

        Mat4.invert = function invert(out, a) {
          var a00 = a.m00;
          var a01 = a.m01;
          var a02 = a.m02;
          var a03 = a.m03;
          var a10 = a.m04;
          var a11 = a.m05;
          var a12 = a.m06;
          var a13 = a.m07;
          var a20 = a.m08;
          var a21 = a.m09;
          var a22 = a.m10;
          var a23 = a.m11;
          var a30 = a.m12;
          var a31 = a.m13;
          var a32 = a.m14;
          var a33 = a.m15;
          var b00 = a00 * a11 - a01 * a10;
          var b01 = a00 * a12 - a02 * a10;
          var b02 = a00 * a13 - a03 * a10;
          var b03 = a01 * a12 - a02 * a11;
          var b04 = a01 * a13 - a03 * a11;
          var b05 = a02 * a13 - a03 * a12;
          var b06 = a20 * a31 - a21 * a30;
          var b07 = a20 * a32 - a22 * a30;
          var b08 = a20 * a33 - a23 * a30;
          var b09 = a21 * a32 - a22 * a31;
          var b10 = a21 * a33 - a23 * a31;
          var b11 = a22 * a33 - a23 * a32;
          var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

          if (det === 0) {
            out.m00 = 0;
            out.m01 = 0;
            out.m02 = 0;
            out.m03 = 0;
            out.m04 = 0;
            out.m05 = 0;
            out.m06 = 0;
            out.m07 = 0;
            out.m08 = 0;
            out.m09 = 0;
            out.m10 = 0;
            out.m11 = 0;
            out.m12 = 0;
            out.m13 = 0;
            out.m14 = 0;
            out.m15 = 0;
            return out;
          }

          det = 1.0 / det;
          out.m00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
          out.m01 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
          out.m02 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
          out.m03 = (a22 * b04 - a21 * b05 - a23 * b03) * det;
          out.m04 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
          out.m05 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
          out.m06 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
          out.m07 = (a20 * b05 - a22 * b02 + a23 * b01) * det;
          out.m08 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
          out.m09 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
          out.m10 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
          out.m11 = (a21 * b02 - a20 * b04 - a23 * b00) * det;
          out.m12 = (a11 * b07 - a10 * b09 - a12 * b06) * det;
          out.m13 = (a00 * b09 - a01 * b07 + a02 * b06) * det;
          out.m14 = (a31 * b01 - a30 * b03 - a32 * b00) * det;
          out.m15 = (a20 * b03 - a21 * b01 + a22 * b00) * det;
          return out;
        };

        Mat4.determinant = function determinant(a) {
          var a00 = a.m00;
          var a01 = a.m01;
          var a02 = a.m02;
          var a03 = a.m03;
          var a10 = a.m04;
          var a11 = a.m05;
          var a12 = a.m06;
          var a13 = a.m07;
          var a20 = a.m08;
          var a21 = a.m09;
          var a22 = a.m10;
          var a23 = a.m11;
          var a30 = a.m12;
          var a31 = a.m13;
          var a32 = a.m14;
          var a33 = a.m15;
          var b00 = a00 * a11 - a01 * a10;
          var b01 = a00 * a12 - a02 * a10;
          var b02 = a00 * a13 - a03 * a10;
          var b03 = a01 * a12 - a02 * a11;
          var b04 = a01 * a13 - a03 * a11;
          var b05 = a02 * a13 - a03 * a12;
          var b06 = a20 * a31 - a21 * a30;
          var b07 = a20 * a32 - a22 * a30;
          var b08 = a20 * a33 - a23 * a30;
          var b09 = a21 * a32 - a22 * a31;
          var b10 = a21 * a33 - a23 * a31;
          var b11 = a22 * a33 - a23 * a32;
          return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
        };

        Mat4.multiply = function multiply(out, a, b) {
          var a00 = a.m00;
          var a01 = a.m01;
          var a02 = a.m02;
          var a03 = a.m03;
          var a10 = a.m04;
          var a11 = a.m05;
          var a12 = a.m06;
          var a13 = a.m07;
          var a20 = a.m08;
          var a21 = a.m09;
          var a22 = a.m10;
          var a23 = a.m11;
          var a30 = a.m12;
          var a31 = a.m13;
          var a32 = a.m14;
          var a33 = a.m15;
          var b0 = b.m00;
          var b1 = b.m01;
          var b2 = b.m02;
          var b3 = b.m03;
          out.m00 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
          out.m01 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
          out.m02 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
          out.m03 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
          b0 = b.m04;
          b1 = b.m05;
          b2 = b.m06;
          b3 = b.m07;
          out.m04 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
          out.m05 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
          out.m06 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
          out.m07 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
          b0 = b.m08;
          b1 = b.m09;
          b2 = b.m10;
          b3 = b.m11;
          out.m08 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
          out.m09 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
          out.m10 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
          out.m11 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
          b0 = b.m12;
          b1 = b.m13;
          b2 = b.m14;
          b3 = b.m15;
          out.m12 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
          out.m13 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
          out.m14 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
          out.m15 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
          return out;
        };

        Mat4.transform = function transform(out, a, v) {
          var x = v.x;
          var y = v.y;
          var z = v.z;

          if (a === out) {
            out.m12 = a.m00 * x + a.m04 * y + a.m08 * z + a.m12;
            out.m13 = a.m01 * x + a.m05 * y + a.m09 * z + a.m13;
            out.m14 = a.m02 * x + a.m06 * y + a.m10 * z + a.m14;
            out.m15 = a.m03 * x + a.m07 * y + a.m11 * z + a.m15;
          } else {
            var a00 = a.m00;
            var a01 = a.m01;
            var a02 = a.m02;
            var a03 = a.m03;
            var a10 = a.m04;
            var a11 = a.m05;
            var a12 = a.m06;
            var a13 = a.m07;
            var a20 = a.m08;
            var a21 = a.m09;
            var a22 = a.m10;
            var a23 = a.m11;
            var a30 = a.m12;
            var a31 = a.m13;
            var a32 = a.m14;
            var a33 = a.m15;
            out.m00 = a00;
            out.m01 = a01;
            out.m02 = a02;
            out.m03 = a03;
            out.m04 = a10;
            out.m05 = a11;
            out.m06 = a12;
            out.m07 = a13;
            out.m08 = a20;
            out.m09 = a21;
            out.m10 = a22;
            out.m11 = a23;
            out.m12 = a00 * x + a10 * y + a20 * z + a.m12;
            out.m13 = a01 * x + a11 * y + a21 * z + a.m13;
            out.m14 = a02 * x + a12 * y + a22 * z + a.m14;
            out.m15 = a03 * x + a13 * y + a23 * z + a.m15;
          }

          return out;
        };

        Mat4.translate = function translate(out, a, v) {
          if (a === out) {
            out.m12 += v.x;
            out.m13 += v.y;
            out.m14 += v.z;
          } else {
            out.m00 = a.m00;
            out.m01 = a.m01;
            out.m02 = a.m02;
            out.m03 = a.m03;
            out.m04 = a.m04;
            out.m05 = a.m05;
            out.m06 = a.m06;
            out.m07 = a.m07;
            out.m08 = a.m08;
            out.m09 = a.m09;
            out.m10 = a.m10;
            out.m11 = a.m11;
            out.m12 += v.x;
            out.m13 += v.y;
            out.m14 += v.z;
            out.m15 = a.m15;
          }

          return out;
        };

        Mat4.scale = function scale(out, a, v) {
          var x = v.x;
          var y = v.y;
          var z = v.z;
          out.m00 = a.m00 * x;
          out.m01 = a.m01 * x;
          out.m02 = a.m02 * x;
          out.m03 = a.m03 * x;
          out.m04 = a.m04 * y;
          out.m05 = a.m05 * y;
          out.m06 = a.m06 * y;
          out.m07 = a.m07 * y;
          out.m08 = a.m08 * z;
          out.m09 = a.m09 * z;
          out.m10 = a.m10 * z;
          out.m11 = a.m11 * z;
          out.m12 = a.m12;
          out.m13 = a.m13;
          out.m14 = a.m14;
          out.m15 = a.m15;
          return out;
        };

        Mat4.rotate = function rotate(out, a, rad, axis) {
          var x = axis.x;
          var y = axis.y;
          var z = axis.z;
          var len = Math.sqrt(x * x + y * y + z * z);

          if (Math.abs(len) < EPSILON) {
            return null;
          }

          len = 1 / len;
          x *= len;
          y *= len;
          z *= len;
          var s = Math.sin(rad);
          var c = Math.cos(rad);
          var t = 1 - c;
          var a00 = a.m00;
          var a01 = a.m01;
          var a02 = a.m02;
          var a03 = a.m03;
          var a10 = a.m04;
          var a11 = a.m05;
          var a12 = a.m06;
          var a13 = a.m07;
          var a20 = a.m08;
          var a21 = a.m09;
          var a22 = a.m10;
          var a23 = a.m11;
          var b00 = x * x * t + c;
          var b01 = y * x * t + z * s;
          var b02 = z * x * t - y * s;
          var b10 = x * y * t - z * s;
          var b11 = y * y * t + c;
          var b12 = z * y * t + x * s;
          var b20 = x * z * t + y * s;
          var b21 = y * z * t - x * s;
          var b22 = z * z * t + c;
          out.m00 = a00 * b00 + a10 * b01 + a20 * b02;
          out.m01 = a01 * b00 + a11 * b01 + a21 * b02;
          out.m02 = a02 * b00 + a12 * b01 + a22 * b02;
          out.m03 = a03 * b00 + a13 * b01 + a23 * b02;
          out.m04 = a00 * b10 + a10 * b11 + a20 * b12;
          out.m05 = a01 * b10 + a11 * b11 + a21 * b12;
          out.m06 = a02 * b10 + a12 * b11 + a22 * b12;
          out.m07 = a03 * b10 + a13 * b11 + a23 * b12;
          out.m08 = a00 * b20 + a10 * b21 + a20 * b22;
          out.m09 = a01 * b20 + a11 * b21 + a21 * b22;
          out.m10 = a02 * b20 + a12 * b21 + a22 * b22;
          out.m11 = a03 * b20 + a13 * b21 + a23 * b22;

          if (a !== out) {
            out.m12 = a.m12;
            out.m13 = a.m13;
            out.m14 = a.m14;
            out.m15 = a.m15;
          }

          return out;
        };

        Mat4.rotateX = function rotateX(out, a, rad) {
          var s = Math.sin(rad);
          var c = Math.cos(rad);
          var a10 = a.m04;
          var a11 = a.m05;
          var a12 = a.m06;
          var a13 = a.m07;
          var a20 = a.m08;
          var a21 = a.m09;
          var a22 = a.m10;
          var a23 = a.m11;

          if (a !== out) {
            out.m00 = a.m00;
            out.m01 = a.m01;
            out.m02 = a.m02;
            out.m03 = a.m03;
            out.m12 = a.m12;
            out.m13 = a.m13;
            out.m14 = a.m14;
            out.m15 = a.m15;
          }

          out.m04 = a10 * c + a20 * s;
          out.m05 = a11 * c + a21 * s;
          out.m06 = a12 * c + a22 * s;
          out.m07 = a13 * c + a23 * s;
          out.m08 = a20 * c - a10 * s;
          out.m09 = a21 * c - a11 * s;
          out.m10 = a22 * c - a12 * s;
          out.m11 = a23 * c - a13 * s;
          return out;
        };

        Mat4.rotateY = function rotateY(out, a, rad) {
          var s = Math.sin(rad);
          var c = Math.cos(rad);
          var a00 = a.m00;
          var a01 = a.m01;
          var a02 = a.m02;
          var a03 = a.m03;
          var a20 = a.m08;
          var a21 = a.m09;
          var a22 = a.m10;
          var a23 = a.m11;

          if (a !== out) {
            out.m04 = a.m04;
            out.m05 = a.m05;
            out.m06 = a.m06;
            out.m07 = a.m07;
            out.m12 = a.m12;
            out.m13 = a.m13;
            out.m14 = a.m14;
            out.m15 = a.m15;
          }

          out.m00 = a00 * c - a20 * s;
          out.m01 = a01 * c - a21 * s;
          out.m02 = a02 * c - a22 * s;
          out.m03 = a03 * c - a23 * s;
          out.m08 = a00 * s + a20 * c;
          out.m09 = a01 * s + a21 * c;
          out.m10 = a02 * s + a22 * c;
          out.m11 = a03 * s + a23 * c;
          return out;
        };

        Mat4.rotateZ = function rotateZ(out, a, rad) {
          var s = Math.sin(rad);
          var c = Math.cos(rad);
          var a00 = a.m00;
          var a01 = a.m01;
          var a02 = a.m02;
          var a03 = a.m03;
          var a10 = a.m04;
          var a11 = a.m05;
          var a12 = a.m06;
          var a13 = a.m07;

          if (a !== out) {
            out.m08 = a.m08;
            out.m09 = a.m09;
            out.m10 = a.m10;
            out.m11 = a.m11;
            out.m12 = a.m12;
            out.m13 = a.m13;
            out.m14 = a.m14;
            out.m15 = a.m15;
          }

          out.m00 = a00 * c + a10 * s;
          out.m01 = a01 * c + a11 * s;
          out.m02 = a02 * c + a12 * s;
          out.m03 = a03 * c + a13 * s;
          out.m04 = a10 * c - a00 * s;
          out.m05 = a11 * c - a01 * s;
          out.m06 = a12 * c - a02 * s;
          out.m07 = a13 * c - a03 * s;
          return out;
        };

        Mat4.fromTranslation = function fromTranslation(out, v) {
          out.m00 = 1;
          out.m01 = 0;
          out.m02 = 0;
          out.m03 = 0;
          out.m04 = 0;
          out.m05 = 1;
          out.m06 = 0;
          out.m07 = 0;
          out.m08 = 0;
          out.m09 = 0;
          out.m10 = 1;
          out.m11 = 0;
          out.m12 = v.x;
          out.m13 = v.y;
          out.m14 = v.z;
          out.m15 = 1;
          return out;
        };

        Mat4.fromScaling = function fromScaling(out, v) {
          out.m00 = v.x;
          out.m01 = 0;
          out.m02 = 0;
          out.m03 = 0;
          out.m04 = 0;
          out.m05 = v.y;
          out.m06 = 0;
          out.m07 = 0;
          out.m08 = 0;
          out.m09 = 0;
          out.m10 = v.z;
          out.m11 = 0;
          out.m12 = 0;
          out.m13 = 0;
          out.m14 = 0;
          out.m15 = 1;
          return out;
        };

        Mat4.fromRotation = function fromRotation(out, rad, axis) {
          var x = axis.x;
          var y = axis.y;
          var z = axis.z;
          var len = Math.sqrt(x * x + y * y + z * z);

          if (Math.abs(len) < EPSILON) {
            return null;
          }

          len = 1 / len;
          x *= len;
          y *= len;
          z *= len;
          var s = Math.sin(rad);
          var c = Math.cos(rad);
          var t = 1 - c;
          out.m00 = x * x * t + c;
          out.m01 = y * x * t + z * s;
          out.m02 = z * x * t - y * s;
          out.m03 = 0;
          out.m04 = x * y * t - z * s;
          out.m05 = y * y * t + c;
          out.m06 = z * y * t + x * s;
          out.m07 = 0;
          out.m08 = x * z * t + y * s;
          out.m09 = y * z * t - x * s;
          out.m10 = z * z * t + c;
          out.m11 = 0;
          out.m12 = 0;
          out.m13 = 0;
          out.m14 = 0;
          out.m15 = 1;
          return out;
        };

        Mat4.fromXRotation = function fromXRotation(out, rad) {
          var s = Math.sin(rad);
          var c = Math.cos(rad);
          out.m00 = 1;
          out.m01 = 0;
          out.m02 = 0;
          out.m03 = 0;
          out.m04 = 0;
          out.m05 = c;
          out.m06 = s;
          out.m07 = 0;
          out.m08 = 0;
          out.m09 = -s;
          out.m10 = c;
          out.m11 = 0;
          out.m12 = 0;
          out.m13 = 0;
          out.m14 = 0;
          out.m15 = 1;
          return out;
        };

        Mat4.fromYRotation = function fromYRotation(out, rad) {
          var s = Math.sin(rad);
          var c = Math.cos(rad);
          out.m00 = c;
          out.m01 = 0;
          out.m02 = -s;
          out.m03 = 0;
          out.m04 = 0;
          out.m05 = 1;
          out.m06 = 0;
          out.m07 = 0;
          out.m08 = s;
          out.m09 = 0;
          out.m10 = c;
          out.m11 = 0;
          out.m12 = 0;
          out.m13 = 0;
          out.m14 = 0;
          out.m15 = 1;
          return out;
        };

        Mat4.fromZRotation = function fromZRotation(out, rad) {
          var s = Math.sin(rad);
          var c = Math.cos(rad);
          out.m00 = c;
          out.m01 = s;
          out.m02 = 0;
          out.m03 = 0;
          out.m04 = -s;
          out.m05 = c;
          out.m06 = 0;
          out.m07 = 0;
          out.m08 = 0;
          out.m09 = 0;
          out.m10 = 1;
          out.m11 = 0;
          out.m12 = 0;
          out.m13 = 0;
          out.m14 = 0;
          out.m15 = 1;
          return out;
        };

        Mat4.fromRT = function fromRT(out, q, v) {
          var x = q.x;
          var y = q.y;
          var z = q.z;
          var w = q.w;
          var x2 = x + x;
          var y2 = y + y;
          var z2 = z + z;
          var xx = x * x2;
          var xy = x * y2;
          var xz = x * z2;
          var yy = y * y2;
          var yz = y * z2;
          var zz = z * z2;
          var wx = w * x2;
          var wy = w * y2;
          var wz = w * z2;
          out.m00 = 1 - (yy + zz);
          out.m01 = xy + wz;
          out.m02 = xz - wy;
          out.m03 = 0;
          out.m04 = xy - wz;
          out.m05 = 1 - (xx + zz);
          out.m06 = yz + wx;
          out.m07 = 0;
          out.m08 = xz + wy;
          out.m09 = yz - wx;
          out.m10 = 1 - (xx + yy);
          out.m11 = 0;
          out.m12 = v.x;
          out.m13 = v.y;
          out.m14 = v.z;
          out.m15 = 1;
          return out;
        };

        Mat4.getTranslation = function getTranslation(out, mat) {
          out.x = mat.m12;
          out.y = mat.m13;
          out.z = mat.m14;
          return out;
        };

        Mat4.getScaling = function getScaling(out, mat) {
          var m00 = m3_1$1.m00 = mat.m00;
          var m01 = m3_1$1.m01 = mat.m01;
          var m02 = m3_1$1.m02 = mat.m02;
          var m04 = m3_1$1.m03 = mat.m04;
          var m05 = m3_1$1.m04 = mat.m05;
          var m06 = m3_1$1.m05 = mat.m06;
          var m08 = m3_1$1.m06 = mat.m08;
          var m09 = m3_1$1.m07 = mat.m09;
          var m10 = m3_1$1.m08 = mat.m10;
          out.x = Math.sqrt(m00 * m00 + m01 * m01 + m02 * m02);
          out.y = Math.sqrt(m04 * m04 + m05 * m05 + m06 * m06);
          out.z = Math.sqrt(m08 * m08 + m09 * m09 + m10 * m10);

          if (Mat3.determinant(m3_1$1) < 0) {
            out.x *= -1;
          }

          return out;
        };

        Mat4.getRotation = function getRotation(out, mat) {
          var trace = mat.m00 + mat.m05 + mat.m10;
          var S = 0;

          if (trace > 0) {
            S = Math.sqrt(trace + 1.0) * 2;
            out.w = 0.25 * S;
            out.x = (mat.m06 - mat.m09) / S;
            out.y = (mat.m08 - mat.m02) / S;
            out.z = (mat.m01 - mat.m04) / S;
          } else if (mat.m00 > mat.m05 && mat.m00 > mat.m10) {
            S = Math.sqrt(1.0 + mat.m00 - mat.m05 - mat.m10) * 2;
            out.w = (mat.m06 - mat.m09) / S;
            out.x = 0.25 * S;
            out.y = (mat.m01 + mat.m04) / S;
            out.z = (mat.m08 + mat.m02) / S;
          } else if (mat.m05 > mat.m10) {
            S = Math.sqrt(1.0 + mat.m05 - mat.m00 - mat.m10) * 2;
            out.w = (mat.m08 - mat.m02) / S;
            out.x = (mat.m01 + mat.m04) / S;
            out.y = 0.25 * S;
            out.z = (mat.m06 + mat.m09) / S;
          } else {
            S = Math.sqrt(1.0 + mat.m10 - mat.m00 - mat.m05) * 2;
            out.w = (mat.m01 - mat.m04) / S;
            out.x = (mat.m08 + mat.m02) / S;
            out.y = (mat.m06 + mat.m09) / S;
            out.z = 0.25 * S;
          }

          return out;
        };

        Mat4.toRTS = function toRTS(m, q, v, s) {
          var sx = Vec3.set(v3_1$3, m.m00, m.m01, m.m02).length();
          var sy = Vec3.set(v3_1$3, m.m04, m.m05, m.m06).length();
          var sz = Vec3.set(v3_1$3, m.m08, m.m09, m.m10).length();

          if (s) {
            s.x = sx;
            s.y = sy;
            s.z = sz;
          }

          if (v) {
            Vec3.set(v, m.m12, m.m13, m.m14);
          }

          if (q) {
            m3_1$1.m00 = m.m00 / sx;
            m3_1$1.m01 = m.m01 / sx;
            m3_1$1.m02 = m.m02 / sx;
            m3_1$1.m03 = m.m04 / sy;
            m3_1$1.m04 = m.m05 / sy;
            m3_1$1.m05 = m.m06 / sy;
            m3_1$1.m06 = m.m08 / sz;
            m3_1$1.m07 = m.m09 / sz;
            m3_1$1.m08 = m.m10 / sz;
            var det = Mat3.determinant(m3_1$1);

            if (det < 0) {
              if (s) s.x *= -1;
              m3_1$1.m00 *= -1;
              m3_1$1.m01 *= -1;
              m3_1$1.m02 *= -1;
            }

            Quat.fromMat3(q, m3_1$1);
          }
        };

        Mat4.fromRTS = function fromRTS(out, q, v, s) {
          var x = q.x;
          var y = q.y;
          var z = q.z;
          var w = q.w;
          var x2 = x + x;
          var y2 = y + y;
          var z2 = z + z;
          var xx = x * x2;
          var xy = x * y2;
          var xz = x * z2;
          var yy = y * y2;
          var yz = y * z2;
          var zz = z * z2;
          var wx = w * x2;
          var wy = w * y2;
          var wz = w * z2;
          var sx = s.x;
          var sy = s.y;
          var sz = s.z;
          out.m00 = (1 - (yy + zz)) * sx;
          out.m01 = (xy + wz) * sx;
          out.m02 = (xz - wy) * sx;
          out.m03 = 0;
          out.m04 = (xy - wz) * sy;
          out.m05 = (1 - (xx + zz)) * sy;
          out.m06 = (yz + wx) * sy;
          out.m07 = 0;
          out.m08 = (xz + wy) * sz;
          out.m09 = (yz - wx) * sz;
          out.m10 = (1 - (xx + yy)) * sz;
          out.m11 = 0;
          out.m12 = v.x;
          out.m13 = v.y;
          out.m14 = v.z;
          out.m15 = 1;
          return out;
        };

        Mat4.fromRTSOrigin = function fromRTSOrigin(out, q, v, s, o) {
          var x = q.x;
          var y = q.y;
          var z = q.z;
          var w = q.w;
          var x2 = x + x;
          var y2 = y + y;
          var z2 = z + z;
          var xx = x * x2;
          var xy = x * y2;
          var xz = x * z2;
          var yy = y * y2;
          var yz = y * z2;
          var zz = z * z2;
          var wx = w * x2;
          var wy = w * y2;
          var wz = w * z2;
          var sx = s.x;
          var sy = s.y;
          var sz = s.z;
          var ox = o.x;
          var oy = o.y;
          var oz = o.z;
          out.m00 = (1 - (yy + zz)) * sx;
          out.m01 = (xy + wz) * sx;
          out.m02 = (xz - wy) * sx;
          out.m03 = 0;
          out.m04 = (xy - wz) * sy;
          out.m05 = (1 - (xx + zz)) * sy;
          out.m06 = (yz + wx) * sy;
          out.m07 = 0;
          out.m08 = (xz + wy) * sz;
          out.m09 = (yz - wx) * sz;
          out.m10 = (1 - (xx + yy)) * sz;
          out.m11 = 0;
          out.m12 = v.x + ox - (out.m00 * ox + out.m04 * oy + out.m08 * oz);
          out.m13 = v.y + oy - (out.m01 * ox + out.m05 * oy + out.m09 * oz);
          out.m14 = v.z + oz - (out.m02 * ox + out.m06 * oy + out.m10 * oz);
          out.m15 = 1;
          return out;
        };

        Mat4.fromQuat = function fromQuat(out, q) {
          var x = q.x;
          var y = q.y;
          var z = q.z;
          var w = q.w;
          var x2 = x + x;
          var y2 = y + y;
          var z2 = z + z;
          var xx = x * x2;
          var yx = y * x2;
          var yy = y * y2;
          var zx = z * x2;
          var zy = z * y2;
          var zz = z * z2;
          var wx = w * x2;
          var wy = w * y2;
          var wz = w * z2;
          out.m00 = 1 - yy - zz;
          out.m01 = yx + wz;
          out.m02 = zx - wy;
          out.m03 = 0;
          out.m04 = yx - wz;
          out.m05 = 1 - xx - zz;
          out.m06 = zy + wx;
          out.m07 = 0;
          out.m08 = zx + wy;
          out.m09 = zy - wx;
          out.m10 = 1 - xx - yy;
          out.m11 = 0;
          out.m12 = 0;
          out.m13 = 0;
          out.m14 = 0;
          out.m15 = 1;
          return out;
        };

        Mat4.frustum = function frustum(out, left, right, bottom, top, near, far) {
          var rl = 1 / (right - left);
          var tb = 1 / (top - bottom);
          var nf = 1 / (near - far);
          out.m00 = near * 2 * rl;
          out.m01 = 0;
          out.m02 = 0;
          out.m03 = 0;
          out.m04 = 0;
          out.m05 = near * 2 * tb;
          out.m06 = 0;
          out.m07 = 0;
          out.m08 = (right + left) * rl;
          out.m09 = (top + bottom) * tb;
          out.m10 = (far + near) * nf;
          out.m11 = -1;
          out.m12 = 0;
          out.m13 = 0;
          out.m14 = far * near * 2 * nf;
          out.m15 = 0;
          return out;
        };

        Mat4.perspective = function perspective(out, fov, aspect, near, far, isFOVY, minClipZ, projectionSignY, orientation) {
          if (isFOVY === void 0) {
            isFOVY = true;
          }

          if (minClipZ === void 0) {
            minClipZ = -1;
          }

          if (projectionSignY === void 0) {
            projectionSignY = 1;
          }

          if (orientation === void 0) {
            orientation = 0;
          }

          var f = 1.0 / Math.tan(fov / 2);
          var nf = 1 / (near - far);
          var x = isFOVY ? f / aspect : f;
          var y = (isFOVY ? f : f * aspect) * projectionSignY;
          var preTransform = preTransforms[orientation];
          out.m00 = x * preTransform[0];
          out.m01 = x * preTransform[1];
          out.m02 = 0;
          out.m03 = 0;
          out.m04 = y * preTransform[2];
          out.m05 = y * preTransform[3];
          out.m06 = 0;
          out.m07 = 0;
          out.m08 = 0;
          out.m09 = 0;
          out.m10 = (far - minClipZ * near) * nf;
          out.m11 = -1;
          out.m12 = 0;
          out.m13 = 0;
          out.m14 = far * near * nf * (1 - minClipZ);
          out.m15 = 0;
          return out;
        };

        Mat4.ortho = function ortho(out, left, right, bottom, top, near, far, minClipZ, projectionSignY, orientation) {
          if (minClipZ === void 0) {
            minClipZ = -1;
          }

          if (projectionSignY === void 0) {
            projectionSignY = 1;
          }

          if (orientation === void 0) {
            orientation = 0;
          }

          var lr = 1 / (left - right);
          var bt = 1 / (bottom - top) * projectionSignY;
          var nf = 1 / (near - far);
          var x = -2 * lr;
          var y = -2 * bt;
          var dx = (left + right) * lr;
          var dy = (top + bottom) * bt;
          var preTransform = preTransforms[orientation];
          out.m00 = x * preTransform[0];
          out.m01 = x * preTransform[1];
          out.m02 = 0;
          out.m03 = 0;
          out.m04 = y * preTransform[2];
          out.m05 = y * preTransform[3];
          out.m06 = 0;
          out.m07 = 0;
          out.m08 = 0;
          out.m09 = 0;
          out.m10 = nf * (1 - minClipZ);
          out.m11 = 0;
          out.m12 = dx * preTransform[0] + dy * preTransform[2];
          out.m13 = dx * preTransform[1] + dy * preTransform[3];
          out.m14 = (near - minClipZ * far) * nf;
          out.m15 = 1;
          return out;
        };

        Mat4.lookAt = function lookAt(out, eye, center, up) {
          var eyex = eye.x;
          var eyey = eye.y;
          var eyez = eye.z;
          var upx = up.x;
          var upy = up.y;
          var upz = up.z;
          var centerx = center.x;
          var centery = center.y;
          var centerz = center.z;
          var z0 = eyex - centerx;
          var z1 = eyey - centery;
          var z2 = eyez - centerz;
          var len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
          z0 *= len;
          z1 *= len;
          z2 *= len;
          var x0 = upy * z2 - upz * z1;
          var x1 = upz * z0 - upx * z2;
          var x2 = upx * z1 - upy * z0;
          len = 1 / Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
          x0 *= len;
          x1 *= len;
          x2 *= len;
          var y0 = z1 * x2 - z2 * x1;
          var y1 = z2 * x0 - z0 * x2;
          var y2 = z0 * x1 - z1 * x0;
          out.m00 = x0;
          out.m01 = y0;
          out.m02 = z0;
          out.m03 = 0;
          out.m04 = x1;
          out.m05 = y1;
          out.m06 = z1;
          out.m07 = 0;
          out.m08 = x2;
          out.m09 = y2;
          out.m10 = z2;
          out.m11 = 0;
          out.m12 = -(x0 * eyex + x1 * eyey + x2 * eyez);
          out.m13 = -(y0 * eyex + y1 * eyey + y2 * eyez);
          out.m14 = -(z0 * eyex + z1 * eyey + z2 * eyez);
          out.m15 = 1;
          return out;
        };

        Mat4.inverseTranspose = function inverseTranspose(out, a) {
          var a00 = a.m00;
          var a01 = a.m01;
          var a02 = a.m02;
          var a03 = a.m03;
          var a10 = a.m04;
          var a11 = a.m05;
          var a12 = a.m06;
          var a13 = a.m07;
          var a20 = a.m08;
          var a21 = a.m09;
          var a22 = a.m10;
          var a23 = a.m11;
          var a30 = a.m12;
          var a31 = a.m13;
          var a32 = a.m14;
          var a33 = a.m15;
          var b00 = a00 * a11 - a01 * a10;
          var b01 = a00 * a12 - a02 * a10;
          var b02 = a00 * a13 - a03 * a10;
          var b03 = a01 * a12 - a02 * a11;
          var b04 = a01 * a13 - a03 * a11;
          var b05 = a02 * a13 - a03 * a12;
          var b06 = a20 * a31 - a21 * a30;
          var b07 = a20 * a32 - a22 * a30;
          var b08 = a20 * a33 - a23 * a30;
          var b09 = a21 * a32 - a22 * a31;
          var b10 = a21 * a33 - a23 * a31;
          var b11 = a22 * a33 - a23 * a32;
          var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

          if (!det) {
            return null;
          }

          det = 1.0 / det;
          out.m00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
          out.m01 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
          out.m02 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
          out.m03 = 0;
          out.m04 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
          out.m05 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
          out.m06 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
          out.m07 = 0;
          out.m08 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
          out.m09 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
          out.m10 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
          out.m11 = 0;
          out.m12 = 0;
          out.m13 = 0;
          out.m14 = 0;
          out.m15 = 1;
          return out;
        };

        Mat4.toArray = function toArray(out, m, ofs) {
          if (ofs === void 0) {
            ofs = 0;
          }

          out[ofs + 0] = m.m00;
          out[ofs + 1] = m.m01;
          out[ofs + 2] = m.m02;
          out[ofs + 3] = m.m03;
          out[ofs + 4] = m.m04;
          out[ofs + 5] = m.m05;
          out[ofs + 6] = m.m06;
          out[ofs + 7] = m.m07;
          out[ofs + 8] = m.m08;
          out[ofs + 9] = m.m09;
          out[ofs + 10] = m.m10;
          out[ofs + 11] = m.m11;
          out[ofs + 12] = m.m12;
          out[ofs + 13] = m.m13;
          out[ofs + 14] = m.m14;
          out[ofs + 15] = m.m15;
          return out;
        };

        Mat4.fromArray = function fromArray(out, arr, ofs) {
          if (ofs === void 0) {
            ofs = 0;
          }

          out.m00 = arr[ofs + 0];
          out.m01 = arr[ofs + 1];
          out.m02 = arr[ofs + 2];
          out.m03 = arr[ofs + 3];
          out.m04 = arr[ofs + 4];
          out.m05 = arr[ofs + 5];
          out.m06 = arr[ofs + 6];
          out.m07 = arr[ofs + 7];
          out.m08 = arr[ofs + 8];
          out.m09 = arr[ofs + 9];
          out.m10 = arr[ofs + 10];
          out.m11 = arr[ofs + 11];
          out.m12 = arr[ofs + 12];
          out.m13 = arr[ofs + 13];
          out.m14 = arr[ofs + 14];
          out.m15 = arr[ofs + 15];
          return out;
        };

        Mat4.add = function add(out, a, b) {
          out.m00 = a.m00 + b.m00;
          out.m01 = a.m01 + b.m01;
          out.m02 = a.m02 + b.m02;
          out.m03 = a.m03 + b.m03;
          out.m04 = a.m04 + b.m04;
          out.m05 = a.m05 + b.m05;
          out.m06 = a.m06 + b.m06;
          out.m07 = a.m07 + b.m07;
          out.m08 = a.m08 + b.m08;
          out.m09 = a.m09 + b.m09;
          out.m10 = a.m10 + b.m10;
          out.m11 = a.m11 + b.m11;
          out.m12 = a.m12 + b.m12;
          out.m13 = a.m13 + b.m13;
          out.m14 = a.m14 + b.m14;
          out.m15 = a.m15 + b.m15;
          return out;
        };

        Mat4.subtract = function subtract(out, a, b) {
          out.m00 = a.m00 - b.m00;
          out.m01 = a.m01 - b.m01;
          out.m02 = a.m02 - b.m02;
          out.m03 = a.m03 - b.m03;
          out.m04 = a.m04 - b.m04;
          out.m05 = a.m05 - b.m05;
          out.m06 = a.m06 - b.m06;
          out.m07 = a.m07 - b.m07;
          out.m08 = a.m08 - b.m08;
          out.m09 = a.m09 - b.m09;
          out.m10 = a.m10 - b.m10;
          out.m11 = a.m11 - b.m11;
          out.m12 = a.m12 - b.m12;
          out.m13 = a.m13 - b.m13;
          out.m14 = a.m14 - b.m14;
          out.m15 = a.m15 - b.m15;
          return out;
        };

        Mat4.multiplyScalar = function multiplyScalar(out, a, b) {
          out.m00 = a.m00 * b;
          out.m01 = a.m01 * b;
          out.m02 = a.m02 * b;
          out.m03 = a.m03 * b;
          out.m04 = a.m04 * b;
          out.m05 = a.m05 * b;
          out.m06 = a.m06 * b;
          out.m07 = a.m07 * b;
          out.m08 = a.m08 * b;
          out.m09 = a.m09 * b;
          out.m10 = a.m10 * b;
          out.m11 = a.m11 * b;
          out.m12 = a.m12 * b;
          out.m13 = a.m13 * b;
          out.m14 = a.m14 * b;
          out.m15 = a.m15 * b;
          return out;
        };

        Mat4.multiplyScalarAndAdd = function multiplyScalarAndAdd(out, a, b, scale) {
          out.m00 = a.m00 + b.m00 * scale;
          out.m01 = a.m01 + b.m01 * scale;
          out.m02 = a.m02 + b.m02 * scale;
          out.m03 = a.m03 + b.m03 * scale;
          out.m04 = a.m04 + b.m04 * scale;
          out.m05 = a.m05 + b.m05 * scale;
          out.m06 = a.m06 + b.m06 * scale;
          out.m07 = a.m07 + b.m07 * scale;
          out.m08 = a.m08 + b.m08 * scale;
          out.m09 = a.m09 + b.m09 * scale;
          out.m10 = a.m10 + b.m10 * scale;
          out.m11 = a.m11 + b.m11 * scale;
          out.m12 = a.m12 + b.m12 * scale;
          out.m13 = a.m13 + b.m13 * scale;
          out.m14 = a.m14 + b.m14 * scale;
          out.m15 = a.m15 + b.m15 * scale;
          return out;
        };

        Mat4.strictEquals = function strictEquals(a, b) {
          return a.m00 === b.m00 && a.m01 === b.m01 && a.m02 === b.m02 && a.m03 === b.m03 && a.m04 === b.m04 && a.m05 === b.m05 && a.m06 === b.m06 && a.m07 === b.m07 && a.m08 === b.m08 && a.m09 === b.m09 && a.m10 === b.m10 && a.m11 === b.m11 && a.m12 === b.m12 && a.m13 === b.m13 && a.m14 === b.m14 && a.m15 === b.m15;
        };

        Mat4.equals = function equals(a, b, epsilon) {
          if (epsilon === void 0) {
            epsilon = EPSILON;
          }

          return Math.abs(a.m00 - b.m00) <= epsilon * Math.max(1.0, Math.abs(a.m00), Math.abs(b.m00)) && Math.abs(a.m01 - b.m01) <= epsilon * Math.max(1.0, Math.abs(a.m01), Math.abs(b.m01)) && Math.abs(a.m02 - b.m02) <= epsilon * Math.max(1.0, Math.abs(a.m02), Math.abs(b.m02)) && Math.abs(a.m03 - b.m03) <= epsilon * Math.max(1.0, Math.abs(a.m03), Math.abs(b.m03)) && Math.abs(a.m04 - b.m04) <= epsilon * Math.max(1.0, Math.abs(a.m04), Math.abs(b.m04)) && Math.abs(a.m05 - b.m05) <= epsilon * Math.max(1.0, Math.abs(a.m05), Math.abs(b.m05)) && Math.abs(a.m06 - b.m06) <= epsilon * Math.max(1.0, Math.abs(a.m06), Math.abs(b.m06)) && Math.abs(a.m07 - b.m07) <= epsilon * Math.max(1.0, Math.abs(a.m07), Math.abs(b.m07)) && Math.abs(a.m08 - b.m08) <= epsilon * Math.max(1.0, Math.abs(a.m08), Math.abs(b.m08)) && Math.abs(a.m09 - b.m09) <= epsilon * Math.max(1.0, Math.abs(a.m09), Math.abs(b.m09)) && Math.abs(a.m10 - b.m10) <= epsilon * Math.max(1.0, Math.abs(a.m10), Math.abs(b.m10)) && Math.abs(a.m11 - b.m11) <= epsilon * Math.max(1.0, Math.abs(a.m11), Math.abs(b.m11)) && Math.abs(a.m12 - b.m12) <= epsilon * Math.max(1.0, Math.abs(a.m12), Math.abs(b.m12)) && Math.abs(a.m13 - b.m13) <= epsilon * Math.max(1.0, Math.abs(a.m13), Math.abs(b.m13)) && Math.abs(a.m14 - b.m14) <= epsilon * Math.max(1.0, Math.abs(a.m14), Math.abs(b.m14)) && Math.abs(a.m15 - b.m15) <= epsilon * Math.max(1.0, Math.abs(a.m15), Math.abs(b.m15));
        };

        function Mat4(m00, m01, m02, m03, m04, m05, m06, m07, m08, m09, m10, m11, m12, m13, m14, m15) {
          var _this;

          if (m00 === void 0) {
            m00 = 1;
          }

          if (m01 === void 0) {
            m01 = 0;
          }

          if (m02 === void 0) {
            m02 = 0;
          }

          if (m03 === void 0) {
            m03 = 0;
          }

          if (m04 === void 0) {
            m04 = 0;
          }

          if (m05 === void 0) {
            m05 = 1;
          }

          if (m06 === void 0) {
            m06 = 0;
          }

          if (m07 === void 0) {
            m07 = 0;
          }

          if (m08 === void 0) {
            m08 = 0;
          }

          if (m09 === void 0) {
            m09 = 0;
          }

          if (m10 === void 0) {
            m10 = 1;
          }

          if (m11 === void 0) {
            m11 = 0;
          }

          if (m12 === void 0) {
            m12 = 0;
          }

          if (m13 === void 0) {
            m13 = 0;
          }

          if (m14 === void 0) {
            m14 = 0;
          }

          if (m15 === void 0) {
            m15 = 1;
          }

          _this = _ValueType.call(this) || this;

          if (typeof m00 === 'object') {
            _this.m00 = m00.m00;
            _this.m01 = m00.m01;
            _this.m02 = m00.m02;
            _this.m03 = m00.m03;
            _this.m04 = m00.m04;
            _this.m05 = m00.m05;
            _this.m06 = m00.m06;
            _this.m07 = m00.m07;
            _this.m08 = m00.m08;
            _this.m09 = m00.m09;
            _this.m10 = m00.m10;
            _this.m11 = m00.m11;
            _this.m12 = m00.m12;
            _this.m13 = m00.m13;
            _this.m14 = m00.m14;
            _this.m15 = m00.m15;
          } else {
            _this.m00 = m00;
            _this.m01 = m01;
            _this.m02 = m02;
            _this.m03 = m03;
            _this.m04 = m04;
            _this.m05 = m05;
            _this.m06 = m06;
            _this.m07 = m07;
            _this.m08 = m08;
            _this.m09 = m09;
            _this.m10 = m10;
            _this.m11 = m11;
            _this.m12 = m12;
            _this.m13 = m13;
            _this.m14 = m14;
            _this.m15 = m15;
          }

          return _this;
        }

        var _proto = Mat4.prototype;

        _proto.clone = function clone() {
          return new Mat4(this.m00, this.m01, this.m02, this.m03, this.m04, this.m05, this.m06, this.m07, this.m08, this.m09, this.m10, this.m11, this.m12, this.m13, this.m14, this.m15);
        };

        _proto.set = function set(m00, m01, m02, m03, m04, m05, m06, m07, m08, m09, m10, m11, m12, m13, m14, m15) {
          if (m00 === void 0) {
            m00 = 1;
          }

          if (m01 === void 0) {
            m01 = 0;
          }

          if (m02 === void 0) {
            m02 = 0;
          }

          if (m03 === void 0) {
            m03 = 0;
          }

          if (m04 === void 0) {
            m04 = 0;
          }

          if (m05 === void 0) {
            m05 = 1;
          }

          if (m06 === void 0) {
            m06 = 0;
          }

          if (m07 === void 0) {
            m07 = 0;
          }

          if (m08 === void 0) {
            m08 = 0;
          }

          if (m09 === void 0) {
            m09 = 0;
          }

          if (m10 === void 0) {
            m10 = 1;
          }

          if (m11 === void 0) {
            m11 = 0;
          }

          if (m12 === void 0) {
            m12 = 0;
          }

          if (m13 === void 0) {
            m13 = 0;
          }

          if (m14 === void 0) {
            m14 = 0;
          }

          if (m15 === void 0) {
            m15 = 1;
          }

          if (typeof m00 === 'object') {
            this.m01 = m00.m01;
            this.m02 = m00.m02;
            this.m03 = m00.m03;
            this.m04 = m00.m04;
            this.m05 = m00.m05;
            this.m06 = m00.m06;
            this.m07 = m00.m07;
            this.m08 = m00.m08;
            this.m09 = m00.m09;
            this.m10 = m00.m10;
            this.m11 = m00.m11;
            this.m12 = m00.m12;
            this.m13 = m00.m13;
            this.m14 = m00.m14;
            this.m15 = m00.m15;
            this.m00 = m00.m00;
          } else {
            this.m01 = m01;
            this.m02 = m02;
            this.m03 = m03;
            this.m04 = m04;
            this.m05 = m05;
            this.m06 = m06;
            this.m07 = m07;
            this.m08 = m08;
            this.m09 = m09;
            this.m10 = m10;
            this.m11 = m11;
            this.m12 = m12;
            this.m13 = m13;
            this.m14 = m14;
            this.m15 = m15;
            this.m00 = m00;
          }

          return this;
        };

        _proto.equals = function equals(other, epsilon) {
          if (epsilon === void 0) {
            epsilon = EPSILON;
          }

          return Math.abs(this.m00 - other.m00) <= epsilon * Math.max(1.0, Math.abs(this.m00), Math.abs(other.m00)) && Math.abs(this.m01 - other.m01) <= epsilon * Math.max(1.0, Math.abs(this.m01), Math.abs(other.m01)) && Math.abs(this.m02 - other.m02) <= epsilon * Math.max(1.0, Math.abs(this.m02), Math.abs(other.m02)) && Math.abs(this.m03 - other.m03) <= epsilon * Math.max(1.0, Math.abs(this.m03), Math.abs(other.m03)) && Math.abs(this.m04 - other.m04) <= epsilon * Math.max(1.0, Math.abs(this.m04), Math.abs(other.m04)) && Math.abs(this.m05 - other.m05) <= epsilon * Math.max(1.0, Math.abs(this.m05), Math.abs(other.m05)) && Math.abs(this.m06 - other.m06) <= epsilon * Math.max(1.0, Math.abs(this.m06), Math.abs(other.m06)) && Math.abs(this.m07 - other.m07) <= epsilon * Math.max(1.0, Math.abs(this.m07), Math.abs(other.m07)) && Math.abs(this.m08 - other.m08) <= epsilon * Math.max(1.0, Math.abs(this.m08), Math.abs(other.m08)) && Math.abs(this.m09 - other.m09) <= epsilon * Math.max(1.0, Math.abs(this.m09), Math.abs(other.m09)) && Math.abs(this.m10 - other.m10) <= epsilon * Math.max(1.0, Math.abs(this.m10), Math.abs(other.m10)) && Math.abs(this.m11 - other.m11) <= epsilon * Math.max(1.0, Math.abs(this.m11), Math.abs(other.m11)) && Math.abs(this.m12 - other.m12) <= epsilon * Math.max(1.0, Math.abs(this.m12), Math.abs(other.m12)) && Math.abs(this.m13 - other.m13) <= epsilon * Math.max(1.0, Math.abs(this.m13), Math.abs(other.m13)) && Math.abs(this.m14 - other.m14) <= epsilon * Math.max(1.0, Math.abs(this.m14), Math.abs(other.m14)) && Math.abs(this.m15 - other.m15) <= epsilon * Math.max(1.0, Math.abs(this.m15), Math.abs(other.m15));
        };

        _proto.strictEquals = function strictEquals(other) {
          return this.m00 === other.m00 && this.m01 === other.m01 && this.m02 === other.m02 && this.m03 === other.m03 && this.m04 === other.m04 && this.m05 === other.m05 && this.m06 === other.m06 && this.m07 === other.m07 && this.m08 === other.m08 && this.m09 === other.m09 && this.m10 === other.m10 && this.m11 === other.m11 && this.m12 === other.m12 && this.m13 === other.m13 && this.m14 === other.m14 && this.m15 === other.m15;
        };

        _proto.toString = function toString() {
          return "[\n" + this.m00 + ", " + this.m01 + ", " + this.m02 + ", " + this.m03 + ",\n" + this.m04 + ", " + this.m05 + ", " + this.m06 + ", " + this.m07 + ",\n" + this.m08 + ", " + this.m09 + ", " + this.m10 + ", " + this.m11 + ",\n" + this.m12 + ", " + this.m13 + ", " + this.m14 + ", " + this.m15 + "\n" + ']';
        };

        _proto.identity = function identity() {
          this.m00 = 1;
          this.m01 = 0;
          this.m02 = 0;
          this.m03 = 0;
          this.m04 = 0;
          this.m05 = 1;
          this.m06 = 0;
          this.m07 = 0;
          this.m08 = 0;
          this.m09 = 0;
          this.m10 = 1;
          this.m11 = 0;
          this.m12 = 0;
          this.m13 = 0;
          this.m14 = 0;
          this.m15 = 1;
          return this;
        };

        _proto.zero = function zero() {
          this.m00 = 0;
          this.m01 = 0;
          this.m02 = 0;
          this.m03 = 0;
          this.m04 = 0;
          this.m05 = 0;
          this.m06 = 0;
          this.m07 = 0;
          this.m08 = 0;
          this.m09 = 0;
          this.m10 = 0;
          this.m11 = 0;
          this.m12 = 0;
          this.m13 = 0;
          this.m14 = 0;
          this.m15 = 0;
          return this;
        };

        _proto.transpose = function transpose() {
          var a01 = this.m01;
          var a02 = this.m02;
          var a03 = this.m03;
          var a12 = this.m06;
          var a13 = this.m07;
          var a23 = this.m11;
          this.m01 = this.m04;
          this.m02 = this.m08;
          this.m03 = this.m12;
          this.m04 = a01;
          this.m06 = this.m09;
          this.m07 = this.m13;
          this.m08 = a02;
          this.m09 = a12;
          this.m11 = this.m14;
          this.m12 = a03;
          this.m13 = a13;
          this.m14 = a23;
          return this;
        };

        _proto.invert = function invert() {
          var a00 = this.m00;
          var a01 = this.m01;
          var a02 = this.m02;
          var a03 = this.m03;
          var a10 = this.m04;
          var a11 = this.m05;
          var a12 = this.m06;
          var a13 = this.m07;
          var a20 = this.m08;
          var a21 = this.m09;
          var a22 = this.m10;
          var a23 = this.m11;
          var a30 = this.m12;
          var a31 = this.m13;
          var a32 = this.m14;
          var a33 = this.m15;
          var b00 = a00 * a11 - a01 * a10;
          var b01 = a00 * a12 - a02 * a10;
          var b02 = a00 * a13 - a03 * a10;
          var b03 = a01 * a12 - a02 * a11;
          var b04 = a01 * a13 - a03 * a11;
          var b05 = a02 * a13 - a03 * a12;
          var b06 = a20 * a31 - a21 * a30;
          var b07 = a20 * a32 - a22 * a30;
          var b08 = a20 * a33 - a23 * a30;
          var b09 = a21 * a32 - a22 * a31;
          var b10 = a21 * a33 - a23 * a31;
          var b11 = a22 * a33 - a23 * a32;
          var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

          if (det === 0) {
            this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
            return this;
          }

          det = 1.0 / det;
          this.m00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
          this.m01 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
          this.m02 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
          this.m03 = (a22 * b04 - a21 * b05 - a23 * b03) * det;
          this.m04 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
          this.m05 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
          this.m06 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
          this.m07 = (a20 * b05 - a22 * b02 + a23 * b01) * det;
          this.m08 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
          this.m09 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
          this.m10 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
          this.m11 = (a21 * b02 - a20 * b04 - a23 * b00) * det;
          this.m12 = (a11 * b07 - a10 * b09 - a12 * b06) * det;
          this.m13 = (a00 * b09 - a01 * b07 + a02 * b06) * det;
          this.m14 = (a31 * b01 - a30 * b03 - a32 * b00) * det;
          this.m15 = (a20 * b03 - a21 * b01 + a22 * b00) * det;
          return this;
        };

        _proto.determinant = function determinant() {
          var a00 = this.m00;
          var a01 = this.m01;
          var a02 = this.m02;
          var a03 = this.m03;
          var a10 = this.m04;
          var a11 = this.m05;
          var a12 = this.m06;
          var a13 = this.m07;
          var a20 = this.m08;
          var a21 = this.m09;
          var a22 = this.m10;
          var a23 = this.m11;
          var a30 = this.m12;
          var a31 = this.m13;
          var a32 = this.m14;
          var a33 = this.m15;
          var b00 = a00 * a11 - a01 * a10;
          var b01 = a00 * a12 - a02 * a10;
          var b02 = a00 * a13 - a03 * a10;
          var b03 = a01 * a12 - a02 * a11;
          var b04 = a01 * a13 - a03 * a11;
          var b05 = a02 * a13 - a03 * a12;
          var b06 = a20 * a31 - a21 * a30;
          var b07 = a20 * a32 - a22 * a30;
          var b08 = a20 * a33 - a23 * a30;
          var b09 = a21 * a32 - a22 * a31;
          var b10 = a21 * a33 - a23 * a31;
          var b11 = a22 * a33 - a23 * a32;
          return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
        };

        _proto.add = function add(mat) {
          this.m00 += mat.m00;
          this.m01 += mat.m01;
          this.m02 += mat.m02;
          this.m03 += mat.m03;
          this.m04 += mat.m04;
          this.m05 += mat.m05;
          this.m06 += mat.m06;
          this.m07 += mat.m07;
          this.m08 += mat.m08;
          this.m09 += mat.m09;
          this.m10 += mat.m10;
          this.m11 += mat.m11;
          this.m12 += mat.m12;
          this.m13 += mat.m13;
          this.m14 += mat.m14;
          this.m15 += mat.m15;
          return this;
        };

        _proto.subtract = function subtract(mat) {
          this.m00 -= mat.m00;
          this.m01 -= mat.m01;
          this.m02 -= mat.m02;
          this.m03 -= mat.m03;
          this.m04 -= mat.m04;
          this.m05 -= mat.m05;
          this.m06 -= mat.m06;
          this.m07 -= mat.m07;
          this.m08 -= mat.m08;
          this.m09 -= mat.m09;
          this.m10 -= mat.m10;
          this.m11 -= mat.m11;
          this.m12 -= mat.m12;
          this.m13 -= mat.m13;
          this.m14 -= mat.m14;
          this.m15 -= mat.m15;
          return this;
        };

        _proto.multiply = function multiply(mat) {
          var a00 = this.m00;
          var a01 = this.m01;
          var a02 = this.m02;
          var a03 = this.m03;
          var a10 = this.m04;
          var a11 = this.m05;
          var a12 = this.m06;
          var a13 = this.m07;
          var a20 = this.m08;
          var a21 = this.m09;
          var a22 = this.m10;
          var a23 = this.m11;
          var a30 = this.m12;
          var a31 = this.m13;
          var a32 = this.m14;
          var a33 = this.m15;
          var b0 = mat.m00;
          var b1 = mat.m01;
          var b2 = mat.m02;
          var b3 = mat.m03;
          this.m00 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
          this.m01 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
          this.m02 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
          this.m03 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
          b0 = mat.m04;
          b1 = mat.m05;
          b2 = mat.m06;
          b3 = mat.m07;
          this.m04 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
          this.m05 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
          this.m06 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
          this.m07 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
          b0 = mat.m08;
          b1 = mat.m09;
          b2 = mat.m10;
          b3 = mat.m11;
          this.m08 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
          this.m09 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
          this.m10 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
          this.m11 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
          b0 = mat.m12;
          b1 = mat.m13;
          b2 = mat.m14;
          b3 = mat.m15;
          this.m12 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
          this.m13 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
          this.m14 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
          this.m15 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
          return this;
        };

        _proto.multiplyScalar = function multiplyScalar(scalar) {
          this.m00 *= scalar;
          this.m01 *= scalar;
          this.m02 *= scalar;
          this.m03 *= scalar;
          this.m04 *= scalar;
          this.m05 *= scalar;
          this.m06 *= scalar;
          this.m07 *= scalar;
          this.m08 *= scalar;
          this.m09 *= scalar;
          this.m10 *= scalar;
          this.m11 *= scalar;
          this.m12 *= scalar;
          this.m13 *= scalar;
          this.m14 *= scalar;
          this.m15 *= scalar;
          return this;
        };

        _proto.translate = function translate(vec) {
          this.m12 += vec.x;
          this.m13 += vec.y;
          this.m14 += vec.z;
          return this;
        };

        _proto.scale = function scale(vec) {
          var x = vec.x;
          var y = vec.y;
          var z = vec.z;
          this.m00 *= x;
          this.m01 *= x;
          this.m02 *= x;
          this.m03 *= x;
          this.m04 *= y;
          this.m05 *= y;
          this.m06 *= y;
          this.m07 *= y;
          this.m08 *= z;
          this.m09 *= z;
          this.m10 *= z;
          this.m11 *= z;
          return this;
        };

        _proto.rotate = function rotate(rad, axis) {
          var x = axis.x;
          var y = axis.y;
          var z = axis.z;
          var len = Math.sqrt(x * x + y * y + z * z);

          if (Math.abs(len) < EPSILON) {
            return null;
          }

          len = 1 / len;
          x *= len;
          y *= len;
          z *= len;
          var s = Math.sin(rad);
          var c = Math.cos(rad);
          var t = 1 - c;
          var a00 = this.m00;
          var a01 = this.m01;
          var a02 = this.m02;
          var a03 = this.m03;
          var a10 = this.m04;
          var a11 = this.m05;
          var a12 = this.m06;
          var a13 = this.m07;
          var a20 = this.m08;
          var a21 = this.m09;
          var a22 = this.m10;
          var a23 = this.m11;
          var b00 = x * x * t + c;
          var b01 = y * x * t + z * s;
          var b02 = z * x * t - y * s;
          var b10 = x * y * t - z * s;
          var b11 = y * y * t + c;
          var b12 = z * y * t + x * s;
          var b20 = x * z * t + y * s;
          var b21 = y * z * t - x * s;
          var b22 = z * z * t + c;
          this.m00 = a00 * b00 + a10 * b01 + a20 * b02;
          this.m01 = a01 * b00 + a11 * b01 + a21 * b02;
          this.m02 = a02 * b00 + a12 * b01 + a22 * b02;
          this.m03 = a03 * b00 + a13 * b01 + a23 * b02;
          this.m04 = a00 * b10 + a10 * b11 + a20 * b12;
          this.m05 = a01 * b10 + a11 * b11 + a21 * b12;
          this.m06 = a02 * b10 + a12 * b11 + a22 * b12;
          this.m07 = a03 * b10 + a13 * b11 + a23 * b12;
          this.m08 = a00 * b20 + a10 * b21 + a20 * b22;
          this.m09 = a01 * b20 + a11 * b21 + a21 * b22;
          this.m10 = a02 * b20 + a12 * b21 + a22 * b22;
          this.m11 = a03 * b20 + a13 * b21 + a23 * b22;
          return this;
        };

        _proto.getTranslation = function getTranslation(out) {
          out.x = this.m12;
          out.y = this.m13;
          out.z = this.m14;
          return out;
        };

        _proto.getScale = function getScale(out) {
          var m00 = m3_1$1.m00 = this.m00;
          var m01 = m3_1$1.m01 = this.m01;
          var m02 = m3_1$1.m02 = this.m02;
          var m04 = m3_1$1.m03 = this.m04;
          var m05 = m3_1$1.m04 = this.m05;
          var m06 = m3_1$1.m05 = this.m06;
          var m08 = m3_1$1.m06 = this.m08;
          var m09 = m3_1$1.m07 = this.m09;
          var m10 = m3_1$1.m08 = this.m10;
          out.x = Math.sqrt(m00 * m00 + m01 * m01 + m02 * m02);
          out.y = Math.sqrt(m04 * m04 + m05 * m05 + m06 * m06);
          out.z = Math.sqrt(m08 * m08 + m09 * m09 + m10 * m10);

          if (Mat3.determinant(m3_1$1) < 0) {
            out.x *= -1;
          }

          return out;
        };

        _proto.getRotation = function getRotation(out) {
          var trace = this.m00 + this.m05 + this.m10;
          var S = 0;

          if (trace > 0) {
            S = Math.sqrt(trace + 1.0) * 2;
            out.w = 0.25 * S;
            out.x = (this.m06 - this.m09) / S;
            out.y = (this.m08 - this.m02) / S;
            out.z = (this.m01 - this.m04) / S;
          } else if (this.m00 > this.m05 && this.m00 > this.m10) {
            S = Math.sqrt(1.0 + this.m00 - this.m05 - this.m10) * 2;
            out.w = (this.m06 - this.m09) / S;
            out.x = 0.25 * S;
            out.y = (this.m01 + this.m04) / S;
            out.z = (this.m08 + this.m02) / S;
          } else if (this.m05 > this.m10) {
            S = Math.sqrt(1.0 + this.m05 - this.m00 - this.m10) * 2;
            out.w = (this.m08 - this.m02) / S;
            out.x = (this.m01 + this.m04) / S;
            out.y = 0.25 * S;
            out.z = (this.m06 + this.m09) / S;
          } else {
            S = Math.sqrt(1.0 + this.m10 - this.m00 - this.m05) * 2;
            out.w = (this.m01 - this.m04) / S;
            out.x = (this.m08 + this.m02) / S;
            out.y = (this.m06 + this.m09) / S;
            out.z = 0.25 * S;
          }

          return out;
        };

        _proto.fromRTS = function fromRTS(q, v, s) {
          var x = q.x;
          var y = q.y;
          var z = q.z;
          var w = q.w;
          var x2 = x + x;
          var y2 = y + y;
          var z2 = z + z;
          var xx = x * x2;
          var xy = x * y2;
          var xz = x * z2;
          var yy = y * y2;
          var yz = y * z2;
          var zz = z * z2;
          var wx = w * x2;
          var wy = w * y2;
          var wz = w * z2;
          var sx = s.x;
          var sy = s.y;
          var sz = s.z;
          this.m00 = (1 - (yy + zz)) * sx;
          this.m01 = (xy + wz) * sx;
          this.m02 = (xz - wy) * sx;
          this.m03 = 0;
          this.m04 = (xy - wz) * sy;
          this.m05 = (1 - (xx + zz)) * sy;
          this.m06 = (yz + wx) * sy;
          this.m07 = 0;
          this.m08 = (xz + wy) * sz;
          this.m09 = (yz - wx) * sz;
          this.m10 = (1 - (xx + yy)) * sz;
          this.m11 = 0;
          this.m12 = v.x;
          this.m13 = v.y;
          this.m14 = v.z;
          this.m15 = 1;
          return this;
        };

        _proto.fromQuat = function fromQuat(q) {
          var x = q.x;
          var y = q.y;
          var z = q.z;
          var w = q.w;
          var x2 = x + x;
          var y2 = y + y;
          var z2 = z + z;
          var xx = x * x2;
          var yx = y * x2;
          var yy = y * y2;
          var zx = z * x2;
          var zy = z * y2;
          var zz = z * z2;
          var wx = w * x2;
          var wy = w * y2;
          var wz = w * z2;
          this.m00 = 1 - yy - zz;
          this.m01 = yx + wz;
          this.m02 = zx - wy;
          this.m03 = 0;
          this.m04 = yx - wz;
          this.m05 = 1 - xx - zz;
          this.m06 = zy + wx;
          this.m07 = 0;
          this.m08 = zx + wy;
          this.m09 = zy - wx;
          this.m10 = 1 - xx - yy;
          this.m11 = 0;
          this.m12 = 0;
          this.m13 = 0;
          this.m14 = 0;
          this.m15 = 1;
          return this;
        };

        return Mat4;
      }(ValueType));
      Mat4.IDENTITY = Object.freeze(new Mat4());
      var v3_1$3 = new Vec3();
      var m3_1$1 = new Mat3();
      CCClass.fastDefine('cc.Mat4', Mat4, {
        m00: 1,
        m01: 0,
        m02: 0,
        m03: 0,
        m04: 0,
        m05: 1,
        m06: 0,
        m07: 0,
        m08: 0,
        m09: 0,
        m10: 1,
        m11: 0,
        m12: 0,
        m13: 0,
        m14: 0,
        m15: 1
      });
      legacyCC.Mat4 = Mat4;
      function mat4(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
        return new Mat4(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);
      }
      legacyCC.mat4 = mat4;

      var Vec2 = exports('Vec2', function (_ValueType) {
        _inheritsLoose(Vec2, _ValueType);

        Vec2.clone = function clone(a) {
          return new Vec2(a.x, a.y);
        };

        Vec2.copy = function copy(out, a) {
          out.x = a.x;
          out.y = a.y;
          return out;
        };

        Vec2.set = function set(out, x, y) {
          out.x = x;
          out.y = y;
          return out;
        };

        Vec2.add = function add(out, a, b) {
          out.x = a.x + b.x;
          out.y = a.y + b.y;
          return out;
        };

        Vec2.subtract = function subtract(out, a, b) {
          out.x = a.x - b.x;
          out.y = a.y - b.y;
          return out;
        };

        Vec2.multiply = function multiply(out, a, b) {
          out.x = a.x * b.x;
          out.y = a.y * b.y;
          return out;
        };

        Vec2.divide = function divide(out, a, b) {
          out.x = a.x / b.x;
          out.y = a.y / b.y;
          return out;
        };

        Vec2.ceil = function ceil(out, a) {
          out.x = Math.ceil(a.x);
          out.y = Math.ceil(a.y);
          return out;
        };

        Vec2.floor = function floor(out, a) {
          out.x = Math.floor(a.x);
          out.y = Math.floor(a.y);
          return out;
        };

        Vec2.min = function min(out, a, b) {
          out.x = Math.min(a.x, b.x);
          out.y = Math.min(a.y, b.y);
          return out;
        };

        Vec2.max = function max(out, a, b) {
          out.x = Math.max(a.x, b.x);
          out.y = Math.max(a.y, b.y);
          return out;
        };

        Vec2.round = function round(out, a) {
          out.x = Math.round(a.x);
          out.y = Math.round(a.y);
          return out;
        };

        Vec2.multiplyScalar = function multiplyScalar(out, a, b) {
          out.x = a.x * b;
          out.y = a.y * b;
          return out;
        };

        Vec2.scaleAndAdd = function scaleAndAdd(out, a, b, scale) {
          out.x = a.x + b.x * scale;
          out.y = a.y + b.y * scale;
          return out;
        };

        Vec2.distance = function distance(a, b) {
          var x = b.x - a.x;
          var y = b.y - a.y;
          return Math.sqrt(x * x + y * y);
        };

        Vec2.squaredDistance = function squaredDistance(a, b) {
          var x = b.x - a.x;
          var y = b.y - a.y;
          return x * x + y * y;
        };

        Vec2.len = function len(a) {
          var x = a.x;
          var y = a.y;
          return Math.sqrt(x * x + y * y);
        };

        Vec2.lengthSqr = function lengthSqr(a) {
          var x = a.x;
          var y = a.y;
          return x * x + y * y;
        };

        Vec2.negate = function negate(out, a) {
          out.x = -a.x;
          out.y = -a.y;
          return out;
        };

        Vec2.inverse = function inverse(out, a) {
          out.x = 1.0 / a.x;
          out.y = 1.0 / a.y;
          return out;
        };

        Vec2.inverseSafe = function inverseSafe(out, a) {
          var x = a.x;
          var y = a.y;

          if (Math.abs(x) < EPSILON) {
            out.x = 0;
          } else {
            out.x = 1.0 / x;
          }

          if (Math.abs(y) < EPSILON) {
            out.y = 0;
          } else {
            out.y = 1.0 / y;
          }

          return out;
        };

        Vec2.normalize = function normalize(out, a) {
          var x = a.x;
          var y = a.y;
          var len = x * x + y * y;

          if (len > 0) {
            len = 1 / Math.sqrt(len);
            out.x = x * len;
            out.y = y * len;
          }

          return out;
        };

        Vec2.dot = function dot(a, b) {
          return a.x * b.x + a.y * b.y;
        };

        Vec2.cross = function cross(out, a, b) {
          if (out instanceof Vec3) {
            out.x = out.y = 0;
            out.z = a.x * b.y - a.y * b.x;
            return out;
          } else {
            return out.x * a.y - out.y * a.x;
          }
        };

        Vec2.lerp = function lerp(out, a, b, t) {
          var x = a.x;
          var y = a.y;
          out.x = x + t * (b.x - x);
          out.y = y + t * (b.y - y);
          return out;
        };

        Vec2.random = function random$1(out, scale) {
          scale = scale || 1.0;
          var r = random() * 2.0 * Math.PI;
          out.x = Math.cos(r) * scale;
          out.y = Math.sin(r) * scale;
          return out;
        };

        Vec2.transformMat3 = function transformMat3(out, a, m) {
          var x = a.x;
          var y = a.y;
          out.x = m.m00 * x + m.m03 * y + m.m06;
          out.y = m.m01 * x + m.m04 * y + m.m07;
          return out;
        };

        Vec2.transformMat4 = function transformMat4(out, a, m) {
          var x = a.x;
          var y = a.y;
          out.x = m.m00 * x + m.m04 * y + m.m12;
          out.y = m.m01 * x + m.m05 * y + m.m13;
          return out;
        };

        Vec2.str = function str(a) {
          return "Vec2(" + a.x + ", " + a.y + ")";
        };

        Vec2.toArray = function toArray(out, v, ofs) {
          if (ofs === void 0) {
            ofs = 0;
          }

          out[ofs + 0] = v.x;
          out[ofs + 1] = v.y;
          return out;
        };

        Vec2.fromArray = function fromArray(out, arr, ofs) {
          if (ofs === void 0) {
            ofs = 0;
          }

          out.x = arr[ofs + 0];
          out.y = arr[ofs + 1];
          return out;
        };

        Vec2.strictEquals = function strictEquals(a, b) {
          return a.x === b.x && a.y === b.y;
        };

        Vec2.equals = function equals(a, b, epsilon) {
          if (epsilon === void 0) {
            epsilon = EPSILON;
          }

          return Math.abs(a.x - b.x) <= epsilon * Math.max(1.0, Math.abs(a.x), Math.abs(b.x)) && Math.abs(a.y - b.y) <= epsilon * Math.max(1.0, Math.abs(a.y), Math.abs(b.y));
        };

        Vec2.angle = function angle(a, b) {
          Vec2.normalize(v2_1, a);
          Vec2.normalize(v2_2, b);
          var cosine = Vec2.dot(v2_1, v2_2);

          if (cosine > 1.0) {
            return 0;
          }

          if (cosine < -1.0) {
            return Math.PI;
          }

          return Math.acos(cosine);
        };

        function Vec2(x, y) {
          var _this;

          _this = _ValueType.call(this) || this;

          if (x && typeof x === 'object') {
            _this.x = x.x;
            _this.y = x.y;
          } else {
            _this.x = x || 0;
            _this.y = y || 0;
          }

          return _this;
        }

        var _proto = Vec2.prototype;

        _proto.clone = function clone() {
          return new Vec2(this.x, this.y);
        };

        _proto.set = function set(x, y) {
          if (x && typeof x === 'object') {
            this.x = x.x;
            this.y = x.y;
          } else {
            this.x = x || 0;
            this.y = y || 0;
          }

          return this;
        };

        _proto.equals = function equals(other, epsilon) {
          if (epsilon === void 0) {
            epsilon = EPSILON;
          }

          return Math.abs(this.x - other.x) <= epsilon * Math.max(1.0, Math.abs(this.x), Math.abs(other.x)) && Math.abs(this.y - other.y) <= epsilon * Math.max(1.0, Math.abs(this.y), Math.abs(other.y));
        };

        _proto.equals2f = function equals2f(x, y, epsilon) {
          if (epsilon === void 0) {
            epsilon = EPSILON;
          }

          return Math.abs(this.x - x) <= epsilon * Math.max(1.0, Math.abs(this.x), Math.abs(x)) && Math.abs(this.y - y) <= epsilon * Math.max(1.0, Math.abs(this.y), Math.abs(y));
        };

        _proto.strictEquals = function strictEquals(other) {
          return other && this.x === other.x && this.y === other.y;
        };

        _proto.strictEquals2f = function strictEquals2f(x, y) {
          return this.x === x && this.y === y;
        };

        _proto.toString = function toString() {
          return "(" + this.x.toFixed(2) + ", " + this.y.toFixed(2) + ")";
        };

        _proto.lerp = function lerp(to, ratio) {
          var x = this.x;
          var y = this.y;
          this.x = x + ratio * (to.x - x);
          this.y = y + ratio * (to.y - y);
          return this;
        };

        _proto.clampf = function clampf(minInclusive, maxInclusive) {
          this.x = clamp(this.x, minInclusive.x, maxInclusive.x);
          this.y = clamp(this.y, minInclusive.y, maxInclusive.y);
          return this;
        };

        _proto.add = function add(other) {
          this.x += other.x;
          this.y += other.y;
          return this;
        };

        _proto.add2f = function add2f(x, y) {
          this.x += x;
          this.y += y;
          return this;
        };

        _proto.subtract = function subtract(other) {
          this.x -= other.x;
          this.y -= other.y;
          return this;
        };

        _proto.subtract2f = function subtract2f(x, y) {
          this.x -= x;
          this.y -= y;
          return this;
        };

        _proto.multiplyScalar = function multiplyScalar(scalar) {
          if (typeof scalar === 'object') {
            console.warn('should use Vec2.multiply for vector * vector operation');
          }

          this.x *= scalar;
          this.y *= scalar;
          return this;
        };

        _proto.multiply = function multiply(other) {
          if (typeof other !== 'object') {
            console.warn('should use Vec2.scale for vector * scalar operation');
          }

          this.x *= other.x;
          this.y *= other.y;
          return this;
        };

        _proto.multiply2f = function multiply2f(x, y) {
          this.x *= x;
          this.y *= y;
          return this;
        };

        _proto.divide = function divide(other) {
          this.x /= other.x;
          this.y /= other.y;
          return this;
        };

        _proto.divide2f = function divide2f(x, y) {
          this.x /= x;
          this.y /= y;
          return this;
        };

        _proto.negative = function negative() {
          this.x = -this.x;
          this.y = -this.y;
          return this;
        };

        _proto.dot = function dot(other) {
          return this.x * other.x + this.y * other.y;
        };

        _proto.cross = function cross(other) {
          return this.x * other.y - this.y * other.x;
        };

        _proto.length = function length() {
          return Math.sqrt(this.x * this.x + this.y * this.y);
        };

        _proto.lengthSqr = function lengthSqr() {
          return this.x * this.x + this.y * this.y;
        };

        _proto.normalize = function normalize() {
          var x = this.x;
          var y = this.y;
          var len = x * x + y * y;

          if (len > 0) {
            len = 1 / Math.sqrt(len);
            this.x *= len;
            this.y *= len;
          }

          return this;
        };

        _proto.angle = function angle(other) {
          var magSqr1 = this.lengthSqr();
          var magSqr2 = other.lengthSqr();

          if (magSqr1 === 0 || magSqr2 === 0) {
            console.warn('Can\'t get angle between zero vector');
            return 0.0;
          }

          var dot = this.dot(other);
          var theta = dot / Math.sqrt(magSqr1 * magSqr2);
          theta = clamp(theta, -1.0, 1.0);
          return Math.acos(theta);
        };

        _proto.signAngle = function signAngle(other) {
          var angle = this.angle(other);
          return this.cross(other) < 0 ? -angle : angle;
        };

        _proto.rotate = function rotate(radians) {
          var x = this.x;
          var y = this.y;
          var sin = Math.sin(radians);
          var cos = Math.cos(radians);
          this.x = cos * x - sin * y;
          this.y = sin * x + cos * y;
          return this;
        };

        _proto.project = function project(other) {
          var scalar = this.dot(other) / other.dot(other);
          this.x = other.x * scalar;
          this.y = other.y * scalar;
          return this;
        };

        _proto.transformMat4 = function transformMat4(matrix) {
          var x = this.x;
          var y = this.y;
          this.x = matrix.m00 * x + matrix.m04 * y + matrix.m12;
          this.y = matrix.m01 * x + matrix.m05 * y + matrix.m13;
          return this;
        };

        return Vec2;
      }(ValueType));
      Vec2.ZERO = Object.freeze(new Vec2(0, 0));
      Vec2.ONE = Object.freeze(new Vec2(1, 1));
      Vec2.NEG_ONE = Object.freeze(new Vec2(-1, -1));
      Vec2.UNIT_X = Object.freeze(new Vec2(1, 0));
      Vec2.UNIT_Y = Object.freeze(new Vec2(0, 1));
      var v2_1 = new Vec2();
      var v2_2 = new Vec2();
      CCClass.fastDefine('cc.Vec2', Vec2, {
        x: 0,
        y: 0
      });
      legacyCC.Vec2 = Vec2;
      function v2(x, y) {
        return new Vec2(x, y);
      }
      legacyCC.v2 = v2;

      var Vec4 = exports('Vec4', function (_ValueType) {
        _inheritsLoose(Vec4, _ValueType);

        Vec4.clone = function clone(a) {
          return new Vec4(a.x, a.y, a.z, a.w);
        };

        Vec4.copy = function copy(out, a) {
          out.x = a.x;
          out.y = a.y;
          out.z = a.z;
          out.w = a.w;
          return out;
        };

        Vec4.set = function set(out, x, y, z, w) {
          out.x = x;
          out.y = y;
          out.z = z;
          out.w = w;
          return out;
        };

        Vec4.add = function add(out, a, b) {
          out.x = a.x + b.x;
          out.y = a.y + b.y;
          out.z = a.z + b.z;
          out.w = a.w + b.w;
          return out;
        };

        Vec4.subtract = function subtract(out, a, b) {
          out.x = a.x - b.x;
          out.y = a.y - b.y;
          out.z = a.z - b.z;
          out.w = a.w - b.w;
          return out;
        };

        Vec4.multiply = function multiply(out, a, b) {
          out.x = a.x * b.x;
          out.y = a.y * b.y;
          out.z = a.z * b.z;
          out.w = a.w * b.w;
          return out;
        };

        Vec4.divide = function divide(out, a, b) {
          out.x = a.x / b.x;
          out.y = a.y / b.y;
          out.z = a.z / b.z;
          out.w = a.w / b.w;
          return out;
        };

        Vec4.ceil = function ceil(out, a) {
          out.x = Math.ceil(a.x);
          out.y = Math.ceil(a.y);
          out.z = Math.ceil(a.z);
          out.w = Math.ceil(a.w);
          return out;
        };

        Vec4.floor = function floor(out, a) {
          out.x = Math.floor(a.x);
          out.y = Math.floor(a.y);
          out.z = Math.floor(a.z);
          out.w = Math.floor(a.w);
          return out;
        };

        Vec4.min = function min(out, a, b) {
          out.x = Math.min(a.x, b.x);
          out.y = Math.min(a.y, b.y);
          out.z = Math.min(a.z, b.z);
          out.w = Math.min(a.w, b.w);
          return out;
        };

        Vec4.max = function max(out, a, b) {
          out.x = Math.max(a.x, b.x);
          out.y = Math.max(a.y, b.y);
          out.z = Math.max(a.z, b.z);
          out.w = Math.max(a.w, b.w);
          return out;
        };

        Vec4.round = function round(out, a) {
          out.x = Math.round(a.x);
          out.y = Math.round(a.y);
          out.z = Math.round(a.z);
          out.w = Math.round(a.w);
          return out;
        };

        Vec4.multiplyScalar = function multiplyScalar(out, a, b) {
          out.x = a.x * b;
          out.y = a.y * b;
          out.z = a.z * b;
          out.w = a.w * b;
          return out;
        };

        Vec4.scaleAndAdd = function scaleAndAdd(out, a, b, scale) {
          out.x = a.x + b.x * scale;
          out.y = a.y + b.y * scale;
          out.z = a.z + b.z * scale;
          out.w = a.w + b.w * scale;
          return out;
        };

        Vec4.distance = function distance(a, b) {
          var x = b.x - a.x;
          var y = b.y - a.y;
          var z = b.z - a.z;
          var w = b.w - a.w;
          return Math.sqrt(x * x + y * y + z * z + w * w);
        };

        Vec4.squaredDistance = function squaredDistance(a, b) {
          var x = b.x - a.x;
          var y = b.y - a.y;
          var z = b.z - a.z;
          var w = b.w - a.w;
          return x * x + y * y + z * z + w * w;
        };

        Vec4.len = function len(a) {
          var x = a.x;
          var y = a.y;
          var z = a.z;
          var w = a.w;
          return Math.sqrt(x * x + y * y + z * z + w * w);
        };

        Vec4.lengthSqr = function lengthSqr(a) {
          var x = a.x;
          var y = a.y;
          var z = a.z;
          var w = a.w;
          return x * x + y * y + z * z + w * w;
        };

        Vec4.negate = function negate(out, a) {
          out.x = -a.x;
          out.y = -a.y;
          out.z = -a.z;
          out.w = -a.w;
          return out;
        };

        Vec4.inverse = function inverse(out, a) {
          out.x = 1.0 / a.x;
          out.y = 1.0 / a.y;
          out.z = 1.0 / a.z;
          out.w = 1.0 / a.w;
          return out;
        };

        Vec4.inverseSafe = function inverseSafe(out, a) {
          var x = a.x;
          var y = a.y;
          var z = a.z;
          var w = a.w;

          if (Math.abs(x) < EPSILON) {
            out.x = 0;
          } else {
            out.x = 1.0 / x;
          }

          if (Math.abs(y) < EPSILON) {
            out.y = 0;
          } else {
            out.y = 1.0 / y;
          }

          if (Math.abs(z) < EPSILON) {
            out.z = 0;
          } else {
            out.z = 1.0 / z;
          }

          if (Math.abs(w) < EPSILON) {
            out.w = 0;
          } else {
            out.w = 1.0 / w;
          }

          return out;
        };

        Vec4.normalize = function normalize(out, a) {
          var x = a.x;
          var y = a.y;
          var z = a.z;
          var w = a.w;
          var len = x * x + y * y + z * z + w * w;

          if (len > 0) {
            len = 1 / Math.sqrt(len);
            out.x = x * len;
            out.y = y * len;
            out.z = z * len;
            out.w = w * len;
          }

          return out;
        };

        Vec4.dot = function dot(a, b) {
          return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
        };

        Vec4.lerp = function lerp(out, a, b, t) {
          out.x = a.x + t * (b.x - a.x);
          out.y = a.y + t * (b.y - a.y);
          out.z = a.z + t * (b.z - a.z);
          out.w = a.w + t * (b.w - a.w);
          return out;
        };

        Vec4.random = function random$1(out, scale) {
          scale = scale || 1.0;
          var phi = random() * 2.0 * Math.PI;
          var cosTheta = random() * 2 - 1;
          var sinTheta = Math.sqrt(1 - cosTheta * cosTheta);
          out.x = sinTheta * Math.cos(phi) * scale;
          out.y = sinTheta * Math.sin(phi) * scale;
          out.z = cosTheta * scale;
          out.w = 0;
          return out;
        };

        Vec4.transformMat4 = function transformMat4(out, a, m) {
          var x = a.x;
          var y = a.y;
          var z = a.z;
          var w = a.w;
          out.x = m.m00 * x + m.m04 * y + m.m08 * z + m.m12 * w;
          out.y = m.m01 * x + m.m05 * y + m.m09 * z + m.m13 * w;
          out.z = m.m02 * x + m.m06 * y + m.m10 * z + m.m14 * w;
          out.w = m.m03 * x + m.m07 * y + m.m11 * z + m.m15 * w;
          return out;
        };

        Vec4.transformAffine = function transformAffine(out, v, m) {
          var x = v.x;
          var y = v.y;
          var z = v.z;
          var w = v.w;
          out.x = m.m00 * x + m.m04 * y + m.m08 * z + m.m12 * w;
          out.y = m.m01 * x + m.m05 * y + m.m09 * z + m.m13 * w;
          out.z = m.m02 * x + m.m06 * y + m.m10 * z + m.m14 * w;
          out.w = v.w;
          return out;
        };

        Vec4.transformQuat = function transformQuat(out, a, q) {
          var x = a.x,
              y = a.y,
              z = a.z;
          var _x = q.x;
          var _y = q.y;
          var _z = q.z;
          var _w = q.w;
          var ix = _w * x + _y * z - _z * y;
          var iy = _w * y + _z * x - _x * z;
          var iz = _w * z + _x * y - _y * x;
          var iw = -_x * x - _y * y - _z * z;
          out.x = ix * _w + iw * -_x + iy * -_z - iz * -_y;
          out.y = iy * _w + iw * -_y + iz * -_x - ix * -_z;
          out.z = iz * _w + iw * -_z + ix * -_y - iy * -_x;
          out.w = a.w;
          return out;
        };

        Vec4.toArray = function toArray(out, v, ofs) {
          if (ofs === void 0) {
            ofs = 0;
          }

          out[ofs + 0] = v.x;
          out[ofs + 1] = v.y;
          out[ofs + 2] = v.z;
          out[ofs + 3] = v.w;
          return out;
        };

        Vec4.fromArray = function fromArray(out, arr, ofs) {
          if (ofs === void 0) {
            ofs = 0;
          }

          out.x = arr[ofs + 0];
          out.y = arr[ofs + 1];
          out.z = arr[ofs + 2];
          out.w = arr[ofs + 3];
          return out;
        };

        Vec4.strictEquals = function strictEquals(a, b) {
          return a.x === b.x && a.y === b.y && a.z === b.z && a.w === b.w;
        };

        Vec4.equals = function equals(a, b, epsilon) {
          if (epsilon === void 0) {
            epsilon = EPSILON;
          }

          return Math.abs(a.x - b.x) <= epsilon * Math.max(1.0, Math.abs(a.x), Math.abs(b.x)) && Math.abs(a.y - b.y) <= epsilon * Math.max(1.0, Math.abs(a.y), Math.abs(b.y)) && Math.abs(a.z - b.z) <= epsilon * Math.max(1.0, Math.abs(a.z), Math.abs(b.z)) && Math.abs(a.w - b.w) <= epsilon * Math.max(1.0, Math.abs(a.w), Math.abs(b.w));
        };

        function Vec4(x, y, z, w) {
          var _this;

          _this = _ValueType.call(this) || this;

          if (x && typeof x === 'object') {
            _this.x = x.x;
            _this.y = x.y;
            _this.z = x.z;
            _this.w = x.w;
          } else {
            _this.x = x || 0;
            _this.y = y || 0;
            _this.z = z || 0;
            _this.w = w || 0;
          }

          return _this;
        }

        var _proto = Vec4.prototype;

        _proto.clone = function clone() {
          return new Vec4(this.x, this.y, this.z, this.w);
        };

        _proto.set = function set(x, y, z, w) {
          if (x && typeof x === 'object') {
            this.x = x.x;
            this.y = x.y;
            this.z = x.z;
            this.w = x.w;
          } else {
            this.x = x || 0;
            this.y = y || 0;
            this.z = z || 0;
            this.w = w || 0;
          }

          return this;
        };

        _proto.equals = function equals(other, epsilon) {
          if (epsilon === void 0) {
            epsilon = EPSILON;
          }

          return Math.abs(this.x - other.x) <= epsilon * Math.max(1.0, Math.abs(this.x), Math.abs(other.x)) && Math.abs(this.y - other.y) <= epsilon * Math.max(1.0, Math.abs(this.y), Math.abs(other.y)) && Math.abs(this.z - other.z) <= epsilon * Math.max(1.0, Math.abs(this.z), Math.abs(other.z)) && Math.abs(this.w - other.w) <= epsilon * Math.max(1.0, Math.abs(this.w), Math.abs(other.w));
        };

        _proto.equals4f = function equals4f(x, y, z, w, epsilon) {
          if (epsilon === void 0) {
            epsilon = EPSILON;
          }

          return Math.abs(this.x - x) <= epsilon * Math.max(1.0, Math.abs(this.x), Math.abs(x)) && Math.abs(this.y - y) <= epsilon * Math.max(1.0, Math.abs(this.y), Math.abs(y)) && Math.abs(this.z - z) <= epsilon * Math.max(1.0, Math.abs(this.z), Math.abs(z)) && Math.abs(this.w - w) <= epsilon * Math.max(1.0, Math.abs(this.w), Math.abs(w));
        };

        _proto.strictEquals = function strictEquals(other) {
          return this.x === other.x && this.y === other.y && this.z === other.z && this.w === other.w;
        };

        _proto.strictEquals4f = function strictEquals4f(x, y, z, w) {
          return this.x === x && this.y === y && this.z === z && this.w === w;
        };

        _proto.lerp = function lerp(to, ratio) {
          var x = this.x;
          var y = this.y;
          var z = this.z;
          var w = this.w;
          this.x = x + ratio * (to.x - x);
          this.y = y + ratio * (to.y - y);
          this.z = z + ratio * (to.z - z);
          this.w = w + ratio * (to.w - w);
          return this;
        };

        _proto.toString = function toString() {
          return "(" + this.x.toFixed(2) + ", " + this.y.toFixed(2) + ", " + this.z.toFixed(2) + ", " + this.w.toFixed(2) + ")";
        };

        _proto.clampf = function clampf(minInclusive, maxInclusive) {
          this.x = clamp(this.x, minInclusive.x, maxInclusive.x);
          this.y = clamp(this.y, minInclusive.y, maxInclusive.y);
          this.z = clamp(this.z, minInclusive.z, maxInclusive.z);
          this.w = clamp(this.w, minInclusive.w, maxInclusive.w);
          return this;
        };

        _proto.add = function add(other) {
          this.x += other.x;
          this.y += other.y;
          this.z += other.z;
          this.w += other.w;
          return this;
        };

        _proto.add4f = function add4f(x, y, z, w) {
          this.x += x;
          this.y += y;
          this.z += z;
          this.w += w;
          return this;
        };

        _proto.subtract = function subtract(other) {
          this.x -= other.x;
          this.y -= other.y;
          this.z -= other.z;
          this.w -= other.w;
          return this;
        };

        _proto.subtract4f = function subtract4f(x, y, z, w) {
          this.x -= x;
          this.y -= y;
          this.z -= z;
          this.w -= w;
          return this;
        };

        _proto.multiplyScalar = function multiplyScalar(scalar) {
          if (typeof scalar === 'object') {
            console.warn('should use Vec4.multiply for vector * vector operation');
          }

          this.x *= scalar;
          this.y *= scalar;
          this.z *= scalar;
          this.w *= scalar;
          return this;
        };

        _proto.multiply = function multiply(other) {
          if (typeof other !== 'object') {
            console.warn('should use Vec4.scale for vector * scalar operation');
          }

          this.x *= other.x;
          this.y *= other.y;
          this.z *= other.z;
          this.w *= other.w;
          return this;
        };

        _proto.multiply4f = function multiply4f(x, y, z, w) {
          this.x *= x;
          this.y *= y;
          this.z *= z;
          this.w *= w;
          return this;
        };

        _proto.divide = function divide(other) {
          this.x /= other.x;
          this.y /= other.y;
          this.z /= other.z;
          this.w /= other.w;
          return this;
        };

        _proto.divide4f = function divide4f(x, y, z, w) {
          this.x /= x;
          this.y /= y;
          this.z /= z;
          this.w /= w;
          return this;
        };

        _proto.negative = function negative() {
          this.x = -this.x;
          this.y = -this.y;
          this.z = -this.z;
          this.w = -this.w;
          return this;
        };

        _proto.dot = function dot(vector) {
          return this.x * vector.x + this.y * vector.y + this.z * vector.z + this.w * vector.w;
        };

        _proto.cross = function cross(vector) {
          var ax = this.x,
              ay = this.y,
              az = this.z;
          var bx = vector.x,
              by = vector.y,
              bz = vector.z;
          this.x = ay * bz - az * by;
          this.y = az * bx - ax * bz;
          this.z = ax * by - ay * bx;
          return this;
        };

        _proto.length = function length() {
          var x = this.x;
          var y = this.y;
          var z = this.z;
          var w = this.w;
          return Math.sqrt(x * x + y * y + z * z + w * w);
        };

        _proto.lengthSqr = function lengthSqr() {
          var x = this.x;
          var y = this.y;
          var z = this.z;
          var w = this.w;
          return x * x + y * y + z * z + w * w;
        };

        _proto.normalize = function normalize() {
          var x = this.x;
          var y = this.y;
          var z = this.z;
          var w = this.w;
          var len = x * x + y * y + z * z + w * w;

          if (len > 0) {
            len = 1 / Math.sqrt(len);
            this.x = x * len;
            this.y = y * len;
            this.z = z * len;
            this.w = w * len;
          }

          return this;
        };

        _proto.transformMat4 = function transformMat4(matrix) {
          var x = this.x;
          var y = this.y;
          var z = this.z;
          var w = this.w;
          this.x = matrix.m00 * x + matrix.m04 * y + matrix.m08 * z + matrix.m12 * w;
          this.y = matrix.m01 * x + matrix.m05 * y + matrix.m09 * z + matrix.m13 * w;
          this.z = matrix.m02 * x + matrix.m06 * y + matrix.m10 * z + matrix.m14 * w;
          this.w = matrix.m03 * x + matrix.m07 * y + matrix.m11 * z + matrix.m15 * w;
          return this;
        };

        return Vec4;
      }(ValueType));
      Vec4.ZERO = Object.freeze(new Vec4(0, 0, 0, 0));
      Vec4.ONE = Object.freeze(new Vec4(1, 1, 1, 1));
      Vec4.NEG_ONE = Object.freeze(new Vec4(-1, -1, -1, -1));
      CCClass.fastDefine('cc.Vec4', Vec4, {
        x: 0,
        y: 0,
        z: 0,
        w: 0
      });
      legacyCC.Vec4 = Vec4;
      function v4(x, y, z, w) {
        return new Vec4(x, y, z, w);
      }
      legacyCC.v4 = v4;

      var toFloat = 1 / 255;
      var Color = exports('Color', function (_ValueType) {
        _inheritsLoose(Color, _ValueType);

        Color.clone = function clone(a) {
          var out = new Color();

          if (a._val) {
            out._val = a._val;
          } else {
            out._val = (a.a << 24 >>> 0) + (a.b << 16) + (a.g << 8) + a.r;
          }

          return out;
        };

        Color.copy = function copy(out, a) {
          out.r = a.r;
          out.g = a.g;
          out.b = a.b;
          out.a = a.a;
          return out;
        };

        Color.set = function set(out, r, g, b, a) {
          out.r = r;
          out.g = g;
          out.b = b;
          out.a = a;
          return out;
        };

        Color.toVec4 = function toVec4(color, out) {
          out = out !== undefined ? out : new Vec4();
          out.x = srgb8BitToLinear(color.r);
          out.y = srgb8BitToLinear(color.g);
          out.z = srgb8BitToLinear(color.b);
          out.w = srgb8BitToLinear(color.a);
          return out;
        };

        Color.fromVec4 = function fromVec4(value, out) {
          out = out === undefined ? new Color() : out;
          out.r = linearToSrgb8Bit(value.x);
          out.g = linearToSrgb8Bit(value.y);
          out.b = linearToSrgb8Bit(value.z);
          out.a = linearToSrgb8Bit(value.w);
          return out;
        };

        Color.fromHEX = function fromHEX(out, hexString) {
          hexString = hexString.indexOf('#') === 0 ? hexString.substring(1) : hexString;
          out.r = parseInt(hexString.substr(0, 2), 16) || 0;
          out.g = parseInt(hexString.substr(2, 2), 16) || 0;
          out.b = parseInt(hexString.substr(4, 2), 16) || 0;
          var a = parseInt(hexString.substr(6, 2), 16);
          out.a = !Number.isNaN(a) ? a : 255;
          out._val = (out.a << 24 >>> 0) + (out.b << 16) + (out.g << 8) + out.r;
          return out;
        };

        Color.add = function add(out, a, b) {
          out.r = a.r + b.r;
          out.g = a.g + b.g;
          out.b = a.b + b.b;
          out.a = a.a + b.a;
          return out;
        };

        Color.subtract = function subtract(out, a, b) {
          out.r = a.r - b.r;
          out.g = a.g - b.g;
          out.b = a.b - b.b;
          out.a = a.a - b.a;
          return out;
        };

        Color.multiply = function multiply(out, a, b) {
          out.r = a.r * b.r;
          out.g = a.g * b.g;
          out.b = a.b * b.b;
          out.a = a.a * b.a;
          return out;
        };

        Color.divide = function divide(out, a, b) {
          out.r = a.r / b.r;
          out.g = a.g / b.g;
          out.b = a.b / b.b;
          out.a = a.a / b.a;
          return out;
        };

        Color.scale = function scale(out, a, b) {
          out.r = a.r * b;
          out.g = a.g * b;
          out.b = a.b * b;
          out.a = a.a * b;
          return out;
        };

        Color.lerp = function lerp(out, from, to, ratio) {
          var r = from.r;
          var g = from.g;
          var b = from.b;
          var a = from.a;
          r += (to.r - r) * ratio;
          g += (to.g - g) * ratio;
          b += (to.b - b) * ratio;
          a += (to.a - a) * ratio;
          out._val = Math.floor((a << 24 >>> 0) + (b << 16) + (g << 8) + r);
          return out;
        };

        Color.toArray = function toArray(out, a, ofs) {
          if (ofs === void 0) {
            ofs = 0;
          }

          var scale = a instanceof Color || a.a > 1 ? 1 / 255 : 1;
          out[ofs + 0] = a.r * scale;
          out[ofs + 1] = a.g * scale;
          out[ofs + 2] = a.b * scale;
          out[ofs + 3] = a.a * scale;
          return out;
        };

        Color.fromArray = function fromArray(arr, out, ofs) {
          if (ofs === void 0) {
            ofs = 0;
          }

          out.r = arr[ofs + 0] * 255;
          out.g = arr[ofs + 1] * 255;
          out.b = arr[ofs + 2] * 255;
          out.a = arr[ofs + 3] * 255;
          return out;
        };

        Color.strictEquals = function strictEquals(a, b) {
          return a.r === b.r && a.g === b.g && a.b === b.b && a.a === b.a;
        };

        Color.equals = function equals(a, b, epsilon) {
          if (epsilon === void 0) {
            epsilon = EPSILON;
          }

          return Math.abs(a.r - b.r) <= epsilon * Math.max(1.0, Math.abs(a.r), Math.abs(b.r)) && Math.abs(a.g - b.g) <= epsilon * Math.max(1.0, Math.abs(a.g), Math.abs(b.g)) && Math.abs(a.b - b.b) <= epsilon * Math.max(1.0, Math.abs(a.b), Math.abs(b.b)) && Math.abs(a.a - b.a) <= epsilon * Math.max(1.0, Math.abs(a.a), Math.abs(b.a));
        };

        Color.hex = function hex(a) {
          return (a.r * 255 << 24 | a.g * 255 << 16 | a.b * 255 << 8 | a.a * 255) >>> 0;
        };

        function Color(r, g, b, a) {
          var _this;

          _this = _ValueType.call(this) || this;
          _this._val = 0;

          if (typeof r === 'string') {
            _this.fromHEX(r);
          } else if (g !== undefined) {
            _this.set(r, g, b, a);
          } else {
            _this.set(r);
          }

          return _this;
        }

        var _proto = Color.prototype;

        _proto.clone = function clone() {
          var ret = new Color();
          ret._val = this._val;
          return ret;
        };

        _proto.equals = function equals(other) {
          return other && this._val === other._val;
        };

        _proto.lerp = function lerp(to, ratio) {
          var r = this.r;
          var g = this.g;
          var b = this.b;
          var a = this.a;
          r += (to.r - r) * ratio;
          g += (to.g - g) * ratio;
          b += (to.b - b) * ratio;
          a += (to.a - a) * ratio;
          this._val = Math.floor((a << 24 >>> 0) + (b << 16) + (g << 8) + r);
          return this;
        };

        _proto.toString = function toString() {
          return "rgba(" + this.r.toFixed() + ", " + this.g.toFixed() + ", " + this.b.toFixed() + ", " + this.a.toFixed() + ")";
        };

        _proto.toCSS = function toCSS(opt) {
          if (opt === void 0) {
            opt = 'rgba';
          }

          if (opt === 'rgba') {
            return "rgba(" + this.r + "," + this.g + "," + this.b + "," + (this.a * toFloat).toFixed(2) + ")";
          } else if (opt === 'rgb') {
            return "rgb(" + this.r + "," + this.g + "," + this.b + ")";
          } else {
            return "#" + this.toHEX(opt);
          }
        };

        _proto.fromHEX = function fromHEX(hexString) {
          hexString = hexString.indexOf('#') === 0 ? hexString.substring(1) : hexString;
          var r = parseInt(hexString.substr(0, 2), 16) || 0;
          var g = parseInt(hexString.substr(2, 2), 16) || 0;
          var b = parseInt(hexString.substr(4, 2), 16) || 0;
          var a = parseInt(hexString.substr(6, 2), 16);
          a = !Number.isNaN(a) ? a : 255;
          this._val = (a << 24 >>> 0) + (b << 16) + (g << 8) + (r | 0);
          return this;
        };

        _proto.toHEX = function toHEX(fmt) {
          if (fmt === void 0) {
            fmt = '#rrggbb';
          }

          var prefix = '0';
          var hex = [(this.r < 16 ? prefix : '') + this.r.toString(16), (this.g < 16 ? prefix : '') + this.g.toString(16), (this.b < 16 ? prefix : '') + this.b.toString(16)];

          if (fmt === '#rgb') {
            hex[0] = hex[0][0];
            hex[1] = hex[1][0];
            hex[2] = hex[2][0];
          } else if (fmt === '#rrggbbaa') {
            hex.push((this.a < 16 ? prefix : '') + this.a.toString(16));
          }

          return hex.join('');
        };

        _proto.toRGBValue = function toRGBValue() {
          return this._val & 0x00ffffff;
        };

        _proto.fromHSV = function fromHSV(h, s, v) {
          var r = 0;
          var g = 0;
          var b = 0;

          if (s === 0) {
            r = g = b = v;
          } else if (v === 0) {
            r = g = b = 0;
          } else {
            if (h === 1) {
              h = 0;
            }

            h *= 6;
            var i = Math.floor(h);
            var f = h - i;
            var p = v * (1 - s);
            var q = v * (1 - s * f);
            var t = v * (1 - s * (1 - f));

            switch (i) {
              default:
                assertIsTrue(false);

              case 0:
                r = v;
                g = t;
                b = p;
                break;

              case 1:
                r = q;
                g = v;
                b = p;
                break;

              case 2:
                r = p;
                g = v;
                b = t;
                break;

              case 3:
                r = p;
                g = q;
                b = v;
                break;

              case 4:
                r = t;
                g = p;
                b = v;
                break;

              case 5:
                r = v;
                g = p;
                b = q;
                break;
            }
          }

          r *= 255;
          g *= 255;
          b *= 255;
          this._val = (this.a << 24 >>> 0) + (b << 16) + (g << 8) + (r | 0);
          return this;
        };

        _proto.toHSV = function toHSV() {
          var r = this.r * toFloat;
          var g = this.g * toFloat;
          var b = this.b * toFloat;
          var hsv = {
            h: 0,
            s: 0,
            v: 0
          };
          var max = Math.max(r, g, b);
          var min = Math.min(r, g, b);
          var delta = 0;
          hsv.v = max;
          hsv.s = max ? (max - min) / max : 0;

          if (!hsv.s) {
            hsv.h = 0;
          } else {
            delta = max - min;

            if (r === max) {
              hsv.h = (g - b) / delta;
            } else if (g === max) {
              hsv.h = 2 + (b - r) / delta;
            } else {
              hsv.h = 4 + (r - g) / delta;
            }

            hsv.h /= 6;

            if (hsv.h < 0) {
              hsv.h += 1.0;
            }
          }

          return hsv;
        };

        _proto.set = function set(r, g, b, a) {
          if (typeof r === 'object') {
            if (r._val != null) {
              this._val = r._val;
            } else {
              g = r.g || 0;
              b = r.b || 0;
              a = typeof r.a === 'number' ? r.a : 255;
              r = r.r || 0;
              this._val = (a << 24 >>> 0) + (b << 16) + (g << 8) + (r | 0);
            }
          } else {
            r = r || 0;
            g = g || 0;
            b = b || 0;
            a = typeof a === 'number' ? a : 255;
            this._val = (a << 24 >>> 0) + (b << 16) + (g << 8) + (r | 0);
          }

          return this;
        };

        _proto.multiply = function multiply(other) {
          var r = (this._val & 0x000000ff) * other.r >> 8;
          var g = (this._val & 0x0000ff00) * other.g >> 8;
          var b = (this._val & 0x00ff0000) * other.b >> 8;
          var a = ((this._val & 0xff000000) >>> 8) * other.a;
          this._val = a & 0xff000000 | b & 0x00ff0000 | g & 0x0000ff00 | r & 0x000000ff;
          return this;
        };

        _proto._set_r_unsafe = function _set_r_unsafe(red) {
          this._val = (this._val & 0xffffff00 | red) >>> 0;
          return this;
        };

        _proto._set_g_unsafe = function _set_g_unsafe(green) {
          this._val = (this._val & 0xffff00ff | green << 8) >>> 0;
          return this;
        };

        _proto._set_b_unsafe = function _set_b_unsafe(blue) {
          this._val = (this._val & 0xff00ffff | blue << 16) >>> 0;
          return this;
        };

        _proto._set_a_unsafe = function _set_a_unsafe(alpha) {
          this._val = (this._val & 0x00ffffff | alpha << 24) >>> 0;
          return this;
        };

        _createClass(Color, [{
          key: "r",
          get: function get() {
            return this._val & 0x000000ff;
          },
          set: function set(red) {
            red = ~~clamp(red, 0, 255);
            this._val = (this._val & 0xffffff00 | red) >>> 0;
          }
        }, {
          key: "g",
          get: function get() {
            return (this._val & 0x0000ff00) >> 8;
          },
          set: function set(green) {
            green = ~~clamp(green, 0, 255);
            this._val = (this._val & 0xffff00ff | green << 8) >>> 0;
          }
        }, {
          key: "b",
          get: function get() {
            return (this._val & 0x00ff0000) >> 16;
          },
          set: function set(blue) {
            blue = ~~clamp(blue, 0, 255);
            this._val = (this._val & 0xff00ffff | blue << 16) >>> 0;
          }
        }, {
          key: "a",
          get: function get() {
            return (this._val & 0xff000000) >>> 24;
          },
          set: function set(alpha) {
            alpha = ~~clamp(alpha, 0, 255);
            this._val = (this._val & 0x00ffffff | alpha << 24) >>> 0;
          }
        }, {
          key: "x",
          get: function get() {
            return this.r * toFloat;
          },
          set: function set(value) {
            this.r = value * 255;
          }
        }, {
          key: "y",
          get: function get() {
            return this.g * toFloat;
          },
          set: function set(value) {
            this.g = value * 255;
          }
        }, {
          key: "z",
          get: function get() {
            return this.b * toFloat;
          },
          set: function set(value) {
            this.b = value * 255;
          }
        }, {
          key: "w",
          get: function get() {
            return this.a * toFloat;
          },
          set: function set(value) {
            this.a = value * 255;
          }
        }]);

        return Color;
      }(ValueType));
      Color.WHITE = Object.freeze(new Color(255, 255, 255, 255));
      Color.GRAY = Object.freeze(new Color(127, 127, 127, 255));
      Color.BLACK = Object.freeze(new Color(0, 0, 0, 255));
      Color.TRANSPARENT = Object.freeze(new Color(0, 0, 0, 0));
      Color.RED = Object.freeze(new Color(255, 0, 0, 255));
      Color.GREEN = Object.freeze(new Color(0, 255, 0, 255));
      Color.BLUE = Object.freeze(new Color(0, 0, 255, 255));
      Color.CYAN = Object.freeze(new Color(0, 255, 255, 255));
      Color.MAGENTA = Object.freeze(new Color(255, 0, 255, 255));
      Color.YELLOW = Object.freeze(new Color(255, 255, 0, 255));
      CCClass.fastDefine('cc.Color', Color, {
        r: 0,
        g: 0,
        b: 0,
        a: 255
      });
      legacyCC.Color = Color;
      function color(r, g, b, a) {
        return new Color(r, g, b, a);
      }
      legacyCC.color = color;
      function srgbToLinear(x) {
        if (x <= 0) return 0;else if (x >= 1) return 1;else if (x < 0.04045) return x / 12.92;else return Math.pow((x + 0.055) / 1.055, 2.4);
      }
      function srgb8BitToLinear(x) {
        if ((x | 0) !== x || x >>> 8 !== 0) {
          throw new RangeError('Value out of 8-bit range');
        }

        return SRGB_8BIT_TO_LINEAR[x];
      }
      function linearToSrgb8Bit(x) {
        if (x <= 0) {
          return 0;
        }

        var TABLE = SRGB_8BIT_TO_LINEAR;

        if (x >= 1) {
          return TABLE.length - 1;
        }

        var y = 0;

        for (var i = TABLE.length >>> 1; i !== 0; i >>>= 1) {
          if (TABLE[y | i] <= x) {
            y |= i;
          }
        }

        if (x - TABLE[y] <= TABLE[y + 1] - x) {
          return y;
        } else {
          return y + 1;
        }
      }
      var SRGB_8BIT_TO_LINEAR = [];

      for (var i$1 = 0; i$1 < 256; i$1++) {
        SRGB_8BIT_TO_LINEAR.push(srgbToLinear(i$1 / 255.0));
      }

      function clampVec3(val, min, max) {
        if (min > max) {
          var temp = min;
          min = max;
          max = temp;
        }

        return val < min ? min : val > max ? max : val;
      }
      function floorVec3(val) {
        var temp = val.clone();
        temp.x = Math.floor(val.x);
        temp.y = Math.floor(val.y);
        temp.z = Math.floor(val.z);
        return temp;
      }
      function stepVec3(a, b) {
        if (a < b) {
          return b;
        } else {
          return a;
        }
      }
      function packRGBE(rgb) {
        var maxComp = Math.max(Math.max(rgb.x, rgb.y), rgb.z);
        var e = 128.0;

        if (maxComp > 0.0001) {
          e = Math.log(maxComp) / Math.log(1.1);
          e = Math.ceil(e);
          e = clamp(e + 128.0, 0.0, 255.0);
        }

        var sc = 1.0 / Math.pow(1.1, e - 128.0);
        var encode = clampVec3(rgb.multiplyScalar(sc), new Vec3(0.0, 0.0, 0.0), new Vec3(1.0, 1.0, 1.0));
        encode.multiplyScalar(255.0);
        var encode_rounded = floorVec3(encode).add(stepVec3(encode.subtract(floorVec3(encode)), new Vec3(0.5, 0.5, 0.5)));
        return new Vec4(encode_rounded.x / 255.0, encode_rounded.y / 255.0, encode_rounded.z / 255.0, e / 255.0);
      }

      var MathType;

      (function (MathType) {
        MathType[MathType["VEC2"] = 0] = "VEC2";
        MathType[MathType["VEC3"] = 1] = "VEC3";
        MathType[MathType["VEC4"] = 2] = "VEC4";
        MathType[MathType["QUATERNION"] = 3] = "QUATERNION";
        MathType[MathType["MAT3"] = 4] = "MAT3";
        MathType[MathType["MAT4"] = 5] = "MAT4";
        MathType[MathType["SIZE"] = 6] = "SIZE";
        MathType[MathType["RECT"] = 7] = "RECT";
        MathType[MathType["COLOR"] = 8] = "COLOR";
      })(MathType || (MathType = {}));

      var AffineTransform = exports('AffineTransform', function () {
        AffineTransform.identity = function identity() {
          return new AffineTransform();
        };

        AffineTransform.clone = function clone(affineTransform) {
          return new AffineTransform(affineTransform.a, affineTransform.b, affineTransform.c, affineTransform.d, affineTransform.tx, affineTransform.ty);
        };

        AffineTransform.concat = function concat(out, t1, t2) {
          var a = t1.a;
          var b = t1.b;
          var c = t1.c;
          var d = t1.d;
          var tx = t1.tx;
          var ty = t1.ty;
          out.a = a * t2.a + b * t2.c;
          out.b = a * t2.b + b * t2.d;
          out.c = c * t2.a + d * t2.c;
          out.d = c * t2.b + d * t2.d;
          out.tx = tx * t2.a + ty * t2.c + t2.tx;
          out.ty = tx * t2.b + ty * t2.d + t2.ty;
        };

        AffineTransform.invert = function invert(out, t) {
          var determinant = 1 / (t.a * t.d - t.b * t.c);
          out.a = determinant * t.d;
          out.b = -determinant * t.b;
          out.c = -determinant * t.c;
          out.d = determinant * t.a;
          out.tx = determinant * (t.c * t.ty - t.d * t.tx);
          out.ty = determinant * (t.b * t.tx - t.a * t.ty);
        };

        AffineTransform.fromMat4 = function fromMat4(out, mat) {
          out.a = mat.m00;
          out.b = mat.m01;
          out.c = mat.m04;
          out.d = mat.m05;
          out.tx = mat.m12;
          out.ty = mat.m13;
        };

        AffineTransform.transformVec2 = function transformVec2(out, point, transOrY, t) {
          var x;
          var y;

          if (!t) {
            t = transOrY;
            x = point.x;
            y = point.y;
          } else {
            x = point;
            y = transOrY;
          }

          out.x = t.a * x + t.c * y + t.tx;
          out.y = t.b * x + t.d * y + t.ty;
        };

        AffineTransform.transformSize = function transformSize(out, size, t) {
          out.width = t.a * size.width + t.c * size.height;
          out.height = t.b * size.width + t.d * size.height;
        };

        AffineTransform.transformRect = function transformRect(out, rect, t) {
          var or = rect.x + rect.width;
          var ot = rect.y + rect.height;
          var lbx = t.a * rect.x + t.c * rect.y + t.tx;
          var lby = t.b * rect.x + t.d * rect.y + t.ty;
          var rbx = t.a * or + t.c * rect.y + t.tx;
          var rby = t.b * or + t.d * rect.y + t.ty;
          var ltx = t.a * rect.x + t.c * ot + t.tx;
          var lty = t.b * rect.x + t.d * ot + t.ty;
          var rtx = t.a * or + t.c * ot + t.tx;
          var rty = t.b * or + t.d * ot + t.ty;
          var minX = Math.min(lbx, rbx, ltx, rtx);
          var maxX = Math.max(lbx, rbx, ltx, rtx);
          var minY = Math.min(lby, rby, lty, rty);
          var maxY = Math.max(lby, rby, lty, rty);
          out.x = minX;
          out.y = minY;
          out.width = maxX - minX;
          out.height = maxY - minY;
        };

        AffineTransform.transformObb = function transformObb(out_bl, out_tl, out_tr, out_br, rect, anAffineTransform) {
          var tx = anAffineTransform.a * rect.x + anAffineTransform.c * rect.y + anAffineTransform.tx;
          var ty = anAffineTransform.b * rect.x + anAffineTransform.d * rect.y + anAffineTransform.ty;
          var xa = anAffineTransform.a * rect.width;
          var xb = anAffineTransform.b * rect.width;
          var yc = anAffineTransform.c * rect.height;
          var yd = anAffineTransform.d * rect.height;
          out_tl.x = tx;
          out_tl.y = ty;
          out_tr.x = xa + tx;
          out_tr.y = xb + ty;
          out_bl.x = yc + tx;
          out_bl.y = yd + ty;
          out_br.x = xa + yc + tx;
          out_br.y = xb + yd + ty;
        };

        function AffineTransform(a, b, c, d, tx, ty) {
          if (a === void 0) {
            a = 1;
          }

          if (b === void 0) {
            b = 0;
          }

          if (c === void 0) {
            c = 0;
          }

          if (d === void 0) {
            d = 1;
          }

          if (tx === void 0) {
            tx = 0;
          }

          if (ty === void 0) {
            ty = 0;
          }

          this.a = a;
          this.b = b;
          this.c = c;
          this.d = d;
          this.tx = tx;
          this.ty = ty;
        }

        return AffineTransform;
      }());
      legacyCC.AffineTransform = AffineTransform;

      var Size = exports('Size', function (_ValueType) {
        _inheritsLoose(Size, _ValueType);

        Size.lerp = function lerp(out, from, to, ratio) {
          out.width = from.width + (to.width - from.width) * ratio;
          out.height = from.height + (to.height - from.height) * ratio;
          return out;
        };

        function Size(width, height) {
          var _this;

          _this = _ValueType.call(this) || this;

          if (width && typeof width === 'object') {
            _this.width = width.width;
            _this.height = width.height;
          } else {
            _this.width = width || 0;
            _this.height = height || 0;
          }

          return _this;
        }

        var _proto = Size.prototype;

        _proto.clone = function clone() {
          return new Size(this.width, this.height);
        };

        _proto.set = function set(width, height) {
          if (width && typeof width === 'object') {
            this.height = width.height;
            this.width = width.width;
          } else {
            this.width = width || 0;
            this.height = height || 0;
          }

          return this;
        };

        _proto.equals = function equals(other) {
          return this.width === other.width && this.height === other.height;
        };

        _proto.lerp = function lerp(to, ratio) {
          this.width += (to.width - this.width) * ratio;
          this.height += (to.height - this.height) * ratio;
          return this;
        };

        _proto.toString = function toString() {
          return "(" + this.width.toFixed(2) + ", " + this.height.toFixed(2) + ")";
        };

        _createClass(Size, [{
          key: "x",
          get: function get() {
            return this.width;
          },
          set: function set(val) {
            this.width = val;
          }
        }, {
          key: "y",
          get: function get() {
            return this.height;
          },
          set: function set(val) {
            this.height = val;
          }
        }]);

        return Size;
      }(ValueType));
      Size.ZERO = Object.freeze(new Size(0, 0));
      Size.ONE = Object.freeze(new Size(1, 1));
      CCClass.fastDefine('cc.Size', Size, {
        width: 0,
        height: 0
      });
      function size(width, height) {
        if (width === void 0) {
          width = 0;
        }

        if (height === void 0) {
          height = 0;
        }

        return new Size(width, height);
      }
      legacyCC.size = size;
      legacyCC.Size = Size;

      var Rect = exports('Rect', function (_ValueType) {
        _inheritsLoose(Rect, _ValueType);

        Rect.fromMinMax = function fromMinMax(out, v1, v2) {
          var minX = Math.min(v1.x, v2.x);
          var minY = Math.min(v1.y, v2.y);
          var maxX = Math.max(v1.x, v2.x);
          var maxY = Math.max(v1.y, v2.y);
          out.x = minX;
          out.y = minY;
          out.width = maxX - minX;
          out.height = maxY - minY;
          return out;
        };

        Rect.lerp = function lerp(out, from, to, ratio) {
          var x = from.x;
          var y = from.y;
          var w = from.width;
          var h = from.height;
          out.x = x + (to.x - x) * ratio;
          out.y = y + (to.y - y) * ratio;
          out.width = w + (to.width - w) * ratio;
          out.height = h + (to.height - h) * ratio;
          return out;
        };

        Rect.intersection = function intersection(out, one, other) {
          var axMin = one.x;
          var ayMin = one.y;
          var axMax = one.x + one.width;
          var ayMax = one.y + one.height;
          var bxMin = other.x;
          var byMin = other.y;
          var bxMax = other.x + other.width;
          var byMax = other.y + other.height;
          out.x = Math.max(axMin, bxMin);
          out.y = Math.max(ayMin, byMin);
          out.width = Math.min(axMax, bxMax) - out.x;
          out.height = Math.min(ayMax, byMax) - out.y;
          return out;
        };

        Rect.union = function union(out, one, other) {
          var x = one.x;
          var y = one.y;
          var w = one.width;
          var h = one.height;
          var bx = other.x;
          var by = other.y;
          var bw = other.width;
          var bh = other.height;
          out.x = Math.min(x, bx);
          out.y = Math.min(y, by);
          out.width = Math.max(x + w, bx + bw) - out.x;
          out.height = Math.max(y + h, by + bh) - out.y;
          return out;
        };

        function Rect(x, y, width, height) {
          var _this;

          _this = _ValueType.call(this) || this;

          if (x && typeof x === 'object') {
            _this.y = x.y;
            _this.width = x.width;
            _this.height = x.height;
            _this.x = x.x;
          } else {
            _this.x = x || 0;
            _this.y = y || 0;
            _this.width = width || 0;
            _this.height = height || 0;
          }

          return _this;
        }

        var _proto = Rect.prototype;

        _proto.clone = function clone() {
          return new Rect(this.x, this.y, this.width, this.height);
        };

        _proto.set = function set(x, y, width, height) {
          if (x && typeof x === 'object') {
            this.y = x.y;
            this.width = x.width;
            this.height = x.height;
            this.x = x.x;
          } else {
            this.x = x || 0;
            this.y = y || 0;
            this.width = width || 0;
            this.height = height || 0;
          }

          return this;
        };

        _proto.equals = function equals(other) {
          return this.x === other.x && this.y === other.y && this.width === other.width && this.height === other.height;
        };

        _proto.lerp = function lerp(to, ratio) {
          var x = this.x;
          var y = this.y;
          var w = this.width;
          var h = this.height;
          this.x = x + (to.x - x) * ratio;
          this.y = y + (to.y - y) * ratio;
          this.width = w + (to.width - w) * ratio;
          this.height = h + (to.height - h) * ratio;
          return this;
        };

        _proto.toString = function toString() {
          return "(" + this.x.toFixed(2) + ", " + this.y.toFixed(2) + ", " + this.width.toFixed(2) + ", " + this.height.toFixed(2) + ")";
        };

        _proto.intersects = function intersects(other) {
          var maxax = this.x + this.width;
          var maxay = this.y + this.height;
          var maxbx = other.x + other.width;
          var maxby = other.y + other.height;
          return !(maxax < other.x || maxbx < this.x || maxay < other.y || maxby < this.y);
        };

        _proto.contains = function contains(point) {
          return this.x <= point.x && this.x + this.width >= point.x && this.y <= point.y && this.y + this.height >= point.y;
        };

        _proto.containsRect = function containsRect(other) {
          return this.x <= other.x && this.x + this.width >= other.x + other.width && this.y <= other.y && this.y + this.height >= other.y + other.height;
        };

        _proto.transformMat4 = function transformMat4(mat) {
          var ol = this.x;
          var ob = this.y;
          var or = ol + this.width;
          var ot = ob + this.height;
          var lbx = mat.m00 * ol + mat.m04 * ob + mat.m12;
          var lby = mat.m01 * ol + mat.m05 * ob + mat.m13;
          var rbx = mat.m00 * or + mat.m04 * ob + mat.m12;
          var rby = mat.m01 * or + mat.m05 * ob + mat.m13;
          var ltx = mat.m00 * ol + mat.m04 * ot + mat.m12;
          var lty = mat.m01 * ol + mat.m05 * ot + mat.m13;
          var rtx = mat.m00 * or + mat.m04 * ot + mat.m12;
          var rty = mat.m01 * or + mat.m05 * ot + mat.m13;
          var minX = Math.min(lbx, rbx, ltx, rtx);
          var maxX = Math.max(lbx, rbx, ltx, rtx);
          var minY = Math.min(lby, rby, lty, rty);
          var maxY = Math.max(lby, rby, lty, rty);
          this.x = minX;
          this.y = minY;
          this.width = maxX - minX;
          this.height = maxY - minY;
          return this;
        };

        _proto.transformMat4ToPoints = function transformMat4ToPoints(mat, out_lb, out_lt, out_rt, out_rb) {
          var ol = this.x;
          var ob = this.y;
          var or = ol + this.width;
          var ot = ob + this.height;
          out_lb.x = mat.m00 * ol + mat.m04 * ob + mat.m12;
          out_lb.y = mat.m01 * ol + mat.m05 * ob + mat.m13;
          out_rb.x = mat.m00 * or + mat.m04 * ob + mat.m12;
          out_rb.y = mat.m01 * or + mat.m05 * ob + mat.m13;
          out_lt.x = mat.m00 * ol + mat.m04 * ot + mat.m12;
          out_lt.y = mat.m01 * ol + mat.m05 * ot + mat.m13;
          out_rt.x = mat.m00 * or + mat.m04 * ot + mat.m12;
          out_rt.y = mat.m01 * or + mat.m05 * ot + mat.m13;
        };

        _createClass(Rect, [{
          key: "xMin",
          get: function get() {
            return this.x;
          },
          set: function set(value) {
            this.width += this.x - value;
            this.x = value;
          }
        }, {
          key: "yMin",
          get: function get() {
            return this.y;
          },
          set: function set(value) {
            this.height += this.y - value;
            this.y = value;
          }
        }, {
          key: "xMax",
          get: function get() {
            return this.x + this.width;
          },
          set: function set(value) {
            this.width = value - this.x;
          }
        }, {
          key: "yMax",
          get: function get() {
            return this.y + this.height;
          },
          set: function set(value) {
            this.height = value - this.y;
          }
        }, {
          key: "center",
          get: function get() {
            return new Vec2(this.x + this.width * 0.5, this.y + this.height * 0.5);
          },
          set: function set(value) {
            this.x = value.x - this.width * 0.5;
            this.y = value.y - this.height * 0.5;
          }
        }, {
          key: "origin",
          get: function get() {
            return new Vec2(this.x, this.y);
          },
          set: function set(value) {
            this.x = value.x;
            this.y = value.y;
          }
        }, {
          key: "size",
          get: function get() {
            return new Size(this.width, this.height);
          },
          set: function set(value) {
            this.width = value.width;
            this.height = value.height;
          }
        }, {
          key: "z",
          get: function get() {
            return this.width;
          },
          set: function set(val) {
            this.width = val;
          }
        }, {
          key: "w",
          get: function get() {
            return this.height;
          },
          set: function set(val) {
            this.height = val;
          }
        }]);

        return Rect;
      }(ValueType));
      CCClass.fastDefine('cc.Rect', Rect, {
        x: 0,
        y: 0,
        width: 0,
        height: 0
      });
      legacyCC.Rect = Rect;
      function rect(x, y, width, height) {
        if (x === void 0) {
          x = 0;
        }

        if (y === void 0) {
          y = 0;
        }

        if (width === void 0) {
          width = 0;
        }

        if (height === void 0) {
          height = 0;
        }

        return new Rect(x, y, width, height);
      }
      legacyCC.rect = rect;

      var MATH_FLOAT_ARRAY = exports('MATH_FLOAT_ARRAY',  Float64Array);
      var MathBase = exports('MathBase', function (_ValueType) {
        _inheritsLoose(MathBase, _ValueType);

        function MathBase() {
          return _ValueType.apply(this, arguments) || this;
        }

        MathBase.createFloatArray = function createFloatArray(size) {
          return new MATH_FLOAT_ARRAY(size);
        };

        _createClass(MathBase, [{
          key: "array",
          get: function get() {
            return this._array;
          }
        }]);

        return MathBase;
      }(ValueType));

      var math = /*#__PURE__*/Object.freeze({
        __proto__: null,
        bits: bits,
        Vec2: Vec2,
        v2: v2,
        Vec3: Vec3,
        v3: v3,
        Vec4: Vec4,
        v4: v4,
        Quat: Quat,
        quat: quat,
        Mat3: Mat3,
        Mat4: Mat4,
        mat4: mat4,
        AffineTransform: AffineTransform,
        Size: Size,
        size: size,
        Rect: Rect,
        rect: rect,
        Color: Color,
        color: color,
        preTransforms: preTransforms,
        HALF_PI: HALF_PI,
        TWO_PI: TWO_PI,
        EPSILON: EPSILON,
        equals: equals,
        approx: approx,
        clamp: clamp,
        clamp01: clamp01,
        lerp: lerp,
        toRadian: toRadian,
        toDegree: toDegree,
        random: random,
        randomRange: randomRange,
        randomRangeInt: randomRangeInt,
        pseudoRandom: pseudoRandom,
        pseudoRandomRange: pseudoRandomRange,
        pseudoRandomRangeInt: pseudoRandomRangeInt,
        nextPow2: nextPow2$1,
        repeat: repeat,
        pingPong: pingPong,
        inverseLerp: inverseLerp,
        absMaxComponent: absMaxComponent,
        absMax: absMax,
        enumerableProps: enumerableProps,
        MATH_FLOAT_ARRAY: MATH_FLOAT_ARRAY,
        MathBase: MathBase
      });
      exports('math', math);

      var X = new Vec3();
      var Y = new Vec3();
      var Z = new Vec3();
      var d = new Vec3();
      var min$1 = new Vec3();
      var max$1 = new Vec3();
      var u = new Array(3);
      var e = new Array(3);
      function point_plane(point, plane_) {
        return Vec3.dot(plane_.n, point) - plane_.d;
      }
      function pt_point_plane(out, point, plane_) {
        var t = point_plane(point, plane_);
        return Vec3.subtract(out, point, Vec3.multiplyScalar(out, plane_.n, t));
      }
      function pt_point_aabb(out, point, aabb_) {
        Vec3.copy(out, point);
        Vec3.subtract(min$1, aabb_.center, aabb_.halfExtents);
        Vec3.add(max$1, aabb_.center, aabb_.halfExtents);
        out.x = out.x < min$1.x ? min$1.x : out.x;
        out.y = out.y < min$1.y ? min$1.y : out.y;
        out.z = out.z < min$1.z ? min$1.z : out.z;
        out.x = out.x > max$1.x ? max$1.x : out.x;
        out.y = out.y > max$1.y ? max$1.y : out.y;
        out.z = out.z > max$1.z ? max$1.z : out.z;
        return out;
      }
      function pt_point_obb(out, point, obb_) {
        Vec3.set(X, obb_.orientation.m00, obb_.orientation.m01, obb_.orientation.m02);
        Vec3.set(Y, obb_.orientation.m03, obb_.orientation.m04, obb_.orientation.m05);
        Vec3.set(Z, obb_.orientation.m06, obb_.orientation.m07, obb_.orientation.m08);
        u[0] = X;
        u[1] = Y;
        u[2] = Z;
        e[0] = obb_.halfExtents.x;
        e[1] = obb_.halfExtents.y;
        e[2] = obb_.halfExtents.z;
        Vec3.subtract(d, point, obb_.center);
        Vec3.set(out, obb_.center.x, obb_.center.y, obb_.center.z);

        for (var i = 0; i < 3; i++) {
          var dist = Vec3.dot(d, u[i]);

          if (dist > e[i]) {
            dist = e[i];
          }

          if (dist < -e[i]) {
            dist = -e[i];
          }

          out.x += dist * u[i].x;
          out.y += dist * u[i].y;
          out.z += dist * u[i].z;
        }

        return out;
      }
      function pt_point_line(out, point, linePointA, linePointB) {
        Vec3.subtract(X, linePointA, linePointB);
        var dir = X;
        var dirSquaredLength = Vec3.lengthSqr(dir);

        if (dirSquaredLength === 0) {
          Vec3.copy(out, linePointA);
        } else {
          Vec3.subtract(X, point, linePointA);
          var t = Vec3.dot(X, dir) / dirSquaredLength;

          if (t < 0) {
            Vec3.copy(out, linePointA);
          } else if (t > 1) {
            Vec3.copy(out, linePointB);
          } else {
            Vec3.scaleAndAdd(out, linePointA, dir, t);
          }
        }
      }

      var distance = /*#__PURE__*/Object.freeze({
        __proto__: null,
        point_plane: point_plane,
        pt_point_plane: pt_point_plane,
        pt_point_aabb: pt_point_aabb,
        pt_point_obb: pt_point_obb,
        pt_point_line: pt_point_line
      });

      var enums = {
        SHAPE_RAY: 1 << 0,
        SHAPE_LINE: 1 << 1,
        SHAPE_SPHERE: 1 << 2,
        SHAPE_AABB: 1 << 3,
        SHAPE_OBB: 1 << 4,
        SHAPE_PLANE: 1 << 5,
        SHAPE_TRIANGLE: 1 << 6,
        SHAPE_FRUSTUM: 1 << 7,
        SHAPE_FRUSTUM_ACCURATE: 1 << 8,
        SHAPE_CAPSULE: 1 << 9,
        SHAPE_SPLINE: 1 << 10
      };

      var Line = function () {
        Line.create = function create(sx, sy, sz, ex, ey, ez) {
          return new Line(sx, sy, sz, ex, ey, ez);
        };

        Line.clone = function clone(a) {
          return new Line(a.s.x, a.s.y, a.s.z, a.e.x, a.e.y, a.e.z);
        };

        Line.copy = function copy(out, a) {
          Vec3.copy(out.s, a.s);
          Vec3.copy(out.e, a.e);
          return out;
        };

        Line.fromPoints = function fromPoints(out, start, end) {
          Vec3.copy(out.s, start);
          Vec3.copy(out.e, end);
          return out;
        };

        Line.set = function set(out, sx, sy, sz, ex, ey, ez) {
          out.s.x = sx;
          out.s.y = sy;
          out.s.z = sz;
          out.e.x = ex;
          out.e.y = ey;
          out.e.z = ez;
          return out;
        };

        Line.len = function len(a) {
          return Vec3.distance(a.s, a.e);
        };

        function Line(sx, sy, sz, ex, ey, ez) {
          if (sx === void 0) {
            sx = 0;
          }

          if (sy === void 0) {
            sy = 0;
          }

          if (sz === void 0) {
            sz = 0;
          }

          if (ex === void 0) {
            ex = 0;
          }

          if (ey === void 0) {
            ey = 0;
          }

          if (ez === void 0) {
            ez = -1;
          }

          this.s = void 0;
          this.e = void 0;
          this._type = void 0;
          this._type = enums.SHAPE_LINE;
          this.s = new Vec3(sx, sy, sz);
          this.e = new Vec3(ex, ey, ez);
        }

        var _proto = Line.prototype;

        _proto.length = function length() {
          return Vec3.distance(this.s, this.e);
        };

        _createClass(Line, [{
          key: "type",
          get: function get() {
            return this._type;
          }
        }]);

        return Line;
      }();

      var v1 = new Vec3(0, 0, 0);
      var v2$1 = new Vec3(0, 0, 0);
      var temp_mat = legacyCC.mat4();
      var temp_vec4 = legacyCC.v4();
      var Plane = function () {
        Plane.create = function create(nx, ny, nz, d) {
          return new Plane(nx, ny, nz, d);
        };

        Plane.clone = function clone(p) {
          return new Plane(p.n.x, p.n.y, p.n.z, p.d);
        };

        Plane.copy = function copy(out, p) {
          Vec3.copy(out.n, p.n);
          out.d = p.d;
          return out;
        };

        Plane.fromPoints = function fromPoints(out, a, b, c) {
          Vec3.subtract(v1, b, a);
          Vec3.subtract(v2$1, c, a);
          Vec3.normalize(out.n, Vec3.cross(out.n, v1, v2$1));
          out.d = Vec3.dot(out.n, a);
          return out;
        };

        Plane.set = function set(out, nx, ny, nz, d) {
          out.n.x = nx;
          out.n.y = ny;
          out.n.z = nz;
          out.d = d;
          return out;
        };

        Plane.fromNormalAndPoint = function fromNormalAndPoint(out, normal, point) {
          Vec3.copy(out.n, normal);
          out.d = Vec3.dot(normal, point);
          return out;
        };

        Plane.normalize = function normalize(out, a) {
          var len = a.n.length();
          Vec3.normalize(out.n, a.n);

          if (len > 0) {
            out.d = a.d / len;
          }

          return out;
        };

        function Plane(nx, ny, nz, d) {
          if (nx === void 0) {
            nx = 0;
          }

          if (ny === void 0) {
            ny = 1;
          }

          if (nz === void 0) {
            nz = 0;
          }

          if (d === void 0) {
            d = 0;
          }

          this.n = void 0;
          this._type = enums.SHAPE_PLANE;
          this.n = new Vec3(nx, ny, nz);
          this.d = d;
        }

        var _proto = Plane.prototype;

        _proto.transform = function transform(mat) {
          Mat4.invert(temp_mat, mat);
          Mat4.transpose(temp_mat, temp_mat);
          Vec4.set(temp_vec4, this.n.x, this.n.y, this.n.z, this.d);
          Vec4.transformMat4(temp_vec4, temp_vec4, temp_mat);
          Vec3.set(this.n, temp_vec4.x, temp_vec4.y, temp_vec4.z);
          this.d = temp_vec4.w;
        };

        _createClass(Plane, [{
          key: "type",
          get: function get() {
            return this._type;
          }
        }, {
          key: "x",
          get: function get() {
            return this.n.x;
          },
          set: function set(val) {
            this.n.x = val;
          }
        }, {
          key: "y",
          get: function get() {
            return this.n.y;
          },
          set: function set(val) {
            this.n.y = val;
          }
        }, {
          key: "z",
          get: function get() {
            return this.n.z;
          },
          set: function set(val) {
            this.n.z = val;
          }
        }, {
          key: "w",
          get: function get() {
            return this.d;
          },
          set: function set(val) {
            this.d = val;
          }
        }]);

        return Plane;
      }();

      var Ray = function () {
        Ray.create = function create(ox, oy, oz, dx, dy, dz) {
          if (ox === void 0) {
            ox = 0;
          }

          if (oy === void 0) {
            oy = 0;
          }

          if (oz === void 0) {
            oz = 0;
          }

          if (dx === void 0) {
            dx = 0;
          }

          if (dy === void 0) {
            dy = 0;
          }

          if (dz === void 0) {
            dz = 1;
          }

          return new Ray(ox, oy, oz, dx, dy, dz);
        };

        Ray.clone = function clone(a) {
          return new Ray(a.o.x, a.o.y, a.o.z, a.d.x, a.d.y, a.d.z);
        };

        Ray.copy = function copy(out, a) {
          Vec3.copy(out.o, a.o);
          Vec3.copy(out.d, a.d);
          return out;
        };

        Ray.fromPoints = function fromPoints(out, origin, target) {
          Vec3.copy(out.o, origin);
          Vec3.normalize(out.d, Vec3.subtract(out.d, target, origin));
          return out;
        };

        Ray.set = function set(out, ox, oy, oz, dx, dy, dz) {
          out.o.x = ox;
          out.o.y = oy;
          out.o.z = oz;
          out.d.x = dx;
          out.d.y = dy;
          out.d.z = dz;
          return out;
        };

        function Ray(ox, oy, oz, dx, dy, dz) {
          if (ox === void 0) {
            ox = 0;
          }

          if (oy === void 0) {
            oy = 0;
          }

          if (oz === void 0) {
            oz = 0;
          }

          if (dx === void 0) {
            dx = 0;
          }

          if (dy === void 0) {
            dy = 0;
          }

          if (dz === void 0) {
            dz = -1;
          }

          this.o = void 0;
          this.d = void 0;
          this._type = void 0;
          this._type = enums.SHAPE_RAY;
          this.o = new Vec3(ox, oy, oz);
          this.d = new Vec3(dx, dy, dz);
        }

        var _proto = Ray.prototype;

        _proto.computeHit = function computeHit(out, distance) {
          Vec3.normalize(out, this.d);
          Vec3.scaleAndAdd(out, this.o, out, distance);
        };

        _createClass(Ray, [{
          key: "type",
          get: function get() {
            return this._type;
          }
        }]);

        return Ray;
      }();

      var Triangle = function () {
        Triangle.create = function create(ax, ay, az, bx, by, bz, cx, cy, cz) {
          if (ax === void 0) {
            ax = 1;
          }

          if (ay === void 0) {
            ay = 0;
          }

          if (az === void 0) {
            az = 0;
          }

          if (bx === void 0) {
            bx = 0;
          }

          if (by === void 0) {
            by = 0;
          }

          if (bz === void 0) {
            bz = 0;
          }

          if (cx === void 0) {
            cx = 0;
          }

          if (cy === void 0) {
            cy = 0;
          }

          if (cz === void 0) {
            cz = 1;
          }

          return new Triangle(ax, ay, az, bx, by, bz, cx, cy, cz);
        };

        Triangle.clone = function clone(t) {
          return new Triangle(t.a.x, t.a.y, t.a.z, t.b.x, t.b.y, t.b.z, t.c.x, t.c.y, t.c.z);
        };

        Triangle.copy = function copy(out, t) {
          Vec3.copy(out.a, t.a);
          Vec3.copy(out.b, t.b);
          Vec3.copy(out.c, t.c);
          return out;
        };

        Triangle.fromPoints = function fromPoints(out, a, b, c) {
          Vec3.copy(out.a, a);
          Vec3.copy(out.b, b);
          Vec3.copy(out.c, c);
          return out;
        };

        Triangle.set = function set(out, ax, ay, az, bx, by, bz, cx, cy, cz) {
          out.a.x = ax;
          out.a.y = ay;
          out.a.z = az;
          out.b.x = bx;
          out.b.y = by;
          out.b.z = bz;
          out.c.x = cx;
          out.c.y = cy;
          out.c.z = cz;
          return out;
        };

        function Triangle(ax, ay, az, bx, by, bz, cx, cy, cz) {
          if (ax === void 0) {
            ax = 0;
          }

          if (ay === void 0) {
            ay = 0;
          }

          if (az === void 0) {
            az = 0;
          }

          if (bx === void 0) {
            bx = 1;
          }

          if (by === void 0) {
            by = 0;
          }

          if (bz === void 0) {
            bz = 0;
          }

          if (cx === void 0) {
            cx = 0;
          }

          if (cy === void 0) {
            cy = 1;
          }

          if (cz === void 0) {
            cz = 0;
          }

          this.a = void 0;
          this.b = void 0;
          this.c = void 0;
          this._type = void 0;
          this._type = enums.SHAPE_TRIANGLE;
          this.a = new Vec3(ax, ay, az);
          this.b = new Vec3(bx, by, bz);
          this.c = new Vec3(cx, cy, cz);
        }

        _createClass(Triangle, [{
          key: "type",
          get: function get() {
            return this._type;
          }
        }]);

        return Triangle;
      }();

      var _v3_tmp = new Vec3();

      var _offset = new Vec3();

      var _min = new Vec3();

      var _max = new Vec3();

      function maxComponent(v) {
        return Math.max(Math.max(v.x, v.y), v.z);
      }

      var Sphere = function () {
        Sphere.create = function create(cx, cy, cz, r) {
          return new Sphere(cx, cy, cz, r);
        };

        Sphere.clone = function clone(p) {
          return new Sphere(p.center.x, p.center.y, p.center.z, p.radius);
        };

        Sphere.copy = function copy(out, p) {
          Vec3.copy(out.center, p.center);
          out.radius = p.radius;
          return out;
        };

        Sphere.fromPoints = function fromPoints(out, minPos, maxPos) {
          Vec3.multiplyScalar(out.center, Vec3.add(_v3_tmp, minPos, maxPos), 0.5);
          out.radius = Vec3.subtract(_v3_tmp, maxPos, minPos).length() * 0.5;
          return out;
        };

        Sphere.set = function set(out, cx, cy, cz, r) {
          out.center.x = cx;
          out.center.y = cy;
          out.center.z = cz;
          out.radius = r;
          return out;
        };

        function Sphere(cx, cy, cz, r) {
          if (cx === void 0) {
            cx = 0;
          }

          if (cy === void 0) {
            cy = 0;
          }

          if (cz === void 0) {
            cz = 0;
          }

          if (r === void 0) {
            r = 1;
          }

          this._center = new Vec3(0, 0, 0);
          this._radius = 0;
          this._type = void 0;
          this._type = enums.SHAPE_SPHERE;
          this._center = new Vec3(cx, cy, cz);
          this._radius = r;
        }

        var _proto = Sphere.prototype;

        _proto.destroy = function destroy() {};

        _proto.clone = function clone() {
          return Sphere.clone(this);
        };

        _proto.copy = function copy(a) {
          return Sphere.copy(this, a);
        };

        _proto.getBoundary = function getBoundary(minPos, maxPos) {
          Vec3.set(minPos, this.center.x - this.radius, this.center.y - this.radius, this.center.z - this.radius);
          Vec3.set(maxPos, this.center.x + this.radius, this.center.y + this.radius, this.center.z + this.radius);
        };

        _proto.transform = function transform(m, pos, rot, scale, out) {
          Vec3.transformMat4(out.center, this.center, m);
          out.radius = this.radius * maxComponent(scale);
        };

        _proto.translateAndRotate = function translateAndRotate(m, rot, out) {
          Vec3.transformMat4(out.center, this.center, m);
        };

        _proto.setScale = function setScale(scale, out) {
          out.radius = this.radius * maxComponent(scale);
        };

        _proto.mergePoint = function mergePoint(point) {
          if (this.radius < 0.0) {
            this.center.set(point);
            this.radius = 0.0;
          }

          Vec3.subtract(_offset, point, this.center);

          var dist = _offset.length();

          if (dist > this.radius) {
            var half = (dist - this.radius) * 0.5;
            this.radius += half;
            Vec3.multiplyScalar(_offset, _offset, half / dist);
            Vec3.add(this.center, this.center, _offset);
          }
        };

        _proto.mergePoints = function mergePoints(points) {
          var length = points.length;
          if (length < 1) return;
          this.radius = -1.0;

          for (var i = 0; i < length; i++) {
            this.mergePoint(points[i]);
          }
        };

        _proto.mergeAABB = function mergeAABB(a) {
          a.getBoundary(_min, _max);
          this.mergePoint(_min);
          this.mergePoint(_max);
        };

        _createClass(Sphere, [{
          key: "center",
          get: function get() {
            return this._center;
          },
          set: function set(val) {
            this._center = val;
          }
        }, {
          key: "radius",
          get: function get() {
            return this._radius;
          },
          set: function set(val) {
            this._radius = val;
          }
        }, {
          key: "type",
          get: function get() {
            return this._type;
          }
        }]);

        return Sphere;
      }();

      var _v3_tmp$1 = new Vec3();

      var _v3_tmp2 = new Vec3();

      var _v3_tmp3 = new Vec3();

      var _v3_tmp4 = new Vec3();

      var _m3_tmp = new Mat3();

      var transform_extent_m4 = function transform_extent_m4(out, extent, m4) {
        _m3_tmp.m00 = Math.abs(m4.m00);
        _m3_tmp.m01 = Math.abs(m4.m01);
        _m3_tmp.m02 = Math.abs(m4.m02);
        _m3_tmp.m03 = Math.abs(m4.m04);
        _m3_tmp.m04 = Math.abs(m4.m05);
        _m3_tmp.m05 = Math.abs(m4.m06);
        _m3_tmp.m06 = Math.abs(m4.m08);
        _m3_tmp.m07 = Math.abs(m4.m09);
        _m3_tmp.m08 = Math.abs(m4.m10);
        Vec3.transformMat3(out, extent, _m3_tmp);
      };

      var AABB = function () {
        AABB.create = function create(px, py, pz, hw, hh, hl) {
          return new AABB(px, py, pz, hw, hh, hl);
        };

        AABB.clone = function clone(a) {
          return new AABB(a.center.x, a.center.y, a.center.z, a.halfExtents.x, a.halfExtents.y, a.halfExtents.z);
        };

        AABB.copy = function copy(out, a) {
          Vec3.copy(out.center, a.center);
          Vec3.copy(out.halfExtents, a.halfExtents);
          return out;
        };

        AABB.fromPoints = function fromPoints(out, minPos, maxPos) {
          Vec3.add(_v3_tmp$1, maxPos, minPos);
          Vec3.subtract(_v3_tmp2, maxPos, minPos);
          Vec3.multiplyScalar(out.center, _v3_tmp$1, 0.5);
          Vec3.multiplyScalar(out.halfExtents, _v3_tmp2, 0.5);
          return out;
        };

        AABB.set = function set(out, px, py, pz, hw, hh, hl) {
          out.center.set(px, py, pz);
          out.halfExtents.set(hw, hh, hl);
          return out;
        };

        AABB.merge = function merge(out, a, b) {
          Vec3.subtract(_v3_tmp$1, a.center, a.halfExtents);
          Vec3.subtract(_v3_tmp2, b.center, b.halfExtents);
          Vec3.add(_v3_tmp3, a.center, a.halfExtents);
          Vec3.add(_v3_tmp4, b.center, b.halfExtents);
          Vec3.max(_v3_tmp4, _v3_tmp3, _v3_tmp4);
          Vec3.min(_v3_tmp3, _v3_tmp$1, _v3_tmp2);
          return AABB.fromPoints(out, _v3_tmp3, _v3_tmp4);
        };

        AABB.toBoundingSphere = function toBoundingSphere(out, a) {
          out.center.set(a.center);
          out.radius = a.halfExtents.length();
          return out;
        };

        AABB.transform = function transform(out, a, matrix) {
          Vec3.transformMat4(out.center, a.center, matrix);
          transform_extent_m4(out.halfExtents, a.halfExtents, matrix);
          return out;
        };

        function AABB(px, py, pz, hw, hh, hl) {
          if (px === void 0) {
            px = 0;
          }

          if (py === void 0) {
            py = 0;
          }

          if (pz === void 0) {
            pz = 0;
          }

          if (hw === void 0) {
            hw = 1;
          }

          if (hh === void 0) {
            hh = 1;
          }

          if (hl === void 0) {
            hl = 1;
          }

          this.center = void 0;
          this.halfExtents = void 0;
          this._type = void 0;
          this._type = enums.SHAPE_AABB;
          this.center = new Vec3(px, py, pz);
          this.halfExtents = new Vec3(hw, hh, hl);
        }

        var _proto = AABB.prototype;

        _proto.getBoundary = function getBoundary(minPos, maxPos) {
          Vec3.subtract(minPos, this.center, this.halfExtents);
          Vec3.add(maxPos, this.center, this.halfExtents);
        };

        _proto.transform = function transform(m, pos, rot, scale, out) {
          Vec3.transformMat4(out.center, this.center, m);
          transform_extent_m4(out.halfExtents, this.halfExtents, m);
        };

        _proto.clone = function clone() {
          return AABB.clone(this);
        };

        _proto.copy = function copy(a) {
          return AABB.copy(this, a);
        };

        _proto.mergePoint = function mergePoint(point) {
          this.getBoundary(_v3_tmp$1, _v3_tmp2);

          if (point.x < _v3_tmp$1.x) {
            _v3_tmp$1.x = point.x;
          }

          if (point.y < _v3_tmp$1.y) {
            _v3_tmp$1.y = point.y;
          }

          if (point.z < _v3_tmp$1.z) {
            _v3_tmp$1.z = point.z;
          }

          if (point.x > _v3_tmp2.x) {
            _v3_tmp2.x = point.x;
          }

          if (point.y > _v3_tmp2.y) {
            _v3_tmp2.y = point.y;
          }

          if (point.z > _v3_tmp2.z) {
            _v3_tmp2.z = point.z;
          }

          Vec3.add(_v3_tmp3, _v3_tmp$1, _v3_tmp2);
          this.center.set(Vec3.multiplyScalar(_v3_tmp3, _v3_tmp3, 0.5));
          this.halfExtents.set(_v3_tmp2.x - _v3_tmp3.x, _v3_tmp2.y - _v3_tmp3.y, _v3_tmp2.z - _v3_tmp3.z);
        };

        _proto.mergePoints = function mergePoints(points) {
          if (points.length < 1) {
            return;
          }

          for (var i = 0; i < points.length; i++) {
            this.mergePoint(points[i]);
          }
        };

        _proto.mergeFrustum = function mergeFrustum(frustum) {
          this.mergePoints(frustum.vertices);
        };

        _createClass(AABB, [{
          key: "type",
          get: function get() {
            return this._type;
          }
        }]);

        return AABB;
      }();

      var Capsule = function () {
        function Capsule(radius, halfHeight, axis) {
          if (radius === void 0) {
            radius = 0.5;
          }

          if (halfHeight === void 0) {
            halfHeight = 0.5;
          }

          if (axis === void 0) {
            axis = 1;
          }

          this._type = void 0;
          this.radius = void 0;
          this.halfHeight = void 0;
          this.axis = void 0;
          this.center = void 0;
          this.rotation = void 0;
          this.ellipseCenter0 = void 0;
          this.ellipseCenter1 = void 0;
          this._type = enums.SHAPE_CAPSULE;
          this.radius = radius;
          this.halfHeight = halfHeight;
          this.axis = axis;
          this.center = new Vec3();
          this.rotation = new Quat();
          this.ellipseCenter0 = new Vec3(0, halfHeight, 0);
          this.ellipseCenter1 = new Vec3(0, -halfHeight, 0);
          this.updateCache();
        }

        var _proto = Capsule.prototype;

        _proto.transform = function transform(m, pos, rot, scale, out) {
          var ws = scale;
          var s = absMaxComponent(ws);
          out.radius = this.radius * Math.abs(s);
          var halfTotalWorldHeight = (this.halfHeight + this.radius) * Math.abs(ws.y);
          var halfWorldHeight = halfTotalWorldHeight - out.radius;
          if (halfWorldHeight < 0) halfWorldHeight = 0;
          out.halfHeight = halfWorldHeight;
          Vec3.transformMat4(out.center, this.center, m);
          Quat.multiply(out.rotation, this.rotation, rot);
          out.updateCache();
        };

        _proto.updateCache = function updateCache() {
          this.updateLocalCenter();
          Vec3.transformQuat(this.ellipseCenter0, this.ellipseCenter0, this.rotation);
          Vec3.transformQuat(this.ellipseCenter1, this.ellipseCenter1, this.rotation);
          this.ellipseCenter0.add(this.center);
          this.ellipseCenter1.add(this.center);
        };

        _proto.updateLocalCenter = function updateLocalCenter() {
          var halfHeight = this.halfHeight;
          var axis = this.axis;

          switch (axis) {
            case 0:
              this.ellipseCenter0.set(halfHeight, 0, 0);
              this.ellipseCenter1.set(-halfHeight, 0, 0);
              break;

            case 1:
              this.ellipseCenter0.set(0, halfHeight, 0);
              this.ellipseCenter1.set(0, -halfHeight, 0);
              break;

            case 2:
              this.ellipseCenter0.set(0, 0, halfHeight);
              this.ellipseCenter1.set(0, 0, -halfHeight);
              break;
          }
        };

        _createClass(Capsule, [{
          key: "type",
          get: function get() {
            return this._type;
          }
        }]);

        return Capsule;
      }();

      var _v = new Array(8);

      _v[0] = new Vec3(1, 1, 1);
      _v[1] = new Vec3(-1, 1, 1);
      _v[2] = new Vec3(-1, -1, 1);
      _v[3] = new Vec3(1, -1, 1);
      _v[4] = new Vec3(1, 1, -1);
      _v[5] = new Vec3(-1, 1, -1);
      _v[6] = new Vec3(-1, -1, -1);
      _v[7] = new Vec3(1, -1, -1);

      var _nearTemp = new Vec3();

      var _farTemp = new Vec3();

      var _temp_v3 = new Vec3();

      var Frustum = function () {
        Frustum.createOrtho = function createOrtho(out, width, height, near, far, transform) {
          var halfWidth = width / 2;
          var halfHeight = height / 2;
          Vec3.set(_temp_v3, halfWidth, halfHeight, -near);
          Vec3.transformMat4(out.vertices[0], _temp_v3, transform);
          Vec3.set(_temp_v3, -halfWidth, halfHeight, -near);
          Vec3.transformMat4(out.vertices[1], _temp_v3, transform);
          Vec3.set(_temp_v3, -halfWidth, -halfHeight, -near);
          Vec3.transformMat4(out.vertices[2], _temp_v3, transform);
          Vec3.set(_temp_v3, halfWidth, -halfHeight, -near);
          Vec3.transformMat4(out.vertices[3], _temp_v3, transform);
          Vec3.set(_temp_v3, halfWidth, halfHeight, -far);
          Vec3.transformMat4(out.vertices[4], _temp_v3, transform);
          Vec3.set(_temp_v3, -halfWidth, halfHeight, -far);
          Vec3.transformMat4(out.vertices[5], _temp_v3, transform);
          Vec3.set(_temp_v3, -halfWidth, -halfHeight, -far);
          Vec3.transformMat4(out.vertices[6], _temp_v3, transform);
          Vec3.set(_temp_v3, halfWidth, -halfHeight, -far);
          Vec3.transformMat4(out.vertices[7], _temp_v3, transform);
          Plane.fromPoints(out.planes[0], out.vertices[1], out.vertices[6], out.vertices[5]);
          Plane.fromPoints(out.planes[1], out.vertices[3], out.vertices[4], out.vertices[7]);
          Plane.fromPoints(out.planes[2], out.vertices[6], out.vertices[3], out.vertices[7]);
          Plane.fromPoints(out.planes[3], out.vertices[0], out.vertices[5], out.vertices[4]);
          Plane.fromPoints(out.planes[4], out.vertices[2], out.vertices[0], out.vertices[3]);
          Plane.fromPoints(out.planes[5], out.vertices[7], out.vertices[5], out.vertices[6]);
        };

        Frustum.createFromAABB = function createFromAABB(out, aabb) {
          var vec3_min = new Vec3();
          var vec3_max = new Vec3();
          Vec3.subtract(vec3_min, aabb.center, aabb.halfExtents);
          Vec3.add(vec3_max, aabb.center, aabb.halfExtents);
          out.vertices[0].set(vec3_min.x, vec3_max.y, vec3_min.z);
          out.vertices[1].set(vec3_max.x, vec3_max.y, vec3_min.z);
          out.vertices[2].set(vec3_max.x, vec3_min.y, vec3_min.z);
          out.vertices[3].set(vec3_min.x, vec3_min.y, vec3_min.z);
          out.vertices[4].set(vec3_min.x, vec3_max.y, vec3_max.z);
          out.vertices[5].set(vec3_max.x, vec3_max.y, vec3_max.z);
          out.vertices[6].set(vec3_max.x, vec3_min.y, vec3_max.z);
          out.vertices[7].set(vec3_min.x, vec3_min.y, vec3_max.z);

          if (out._type !== enums.SHAPE_FRUSTUM_ACCURATE) {
            return out;
          }

          out.updatePlanes();
          return out;
        };

        var _proto = Frustum.prototype;

        _proto.split = function split(start, end, aspect, fov, m) {
          var h = Math.tan(fov * 0.5);
          var w = h * aspect;

          _nearTemp.set(start * w, start * h, start);

          _farTemp.set(end * w, end * h, end);

          var vertexes = this.vertices;

          _temp_v3.set(_nearTemp.x, _nearTemp.y, _nearTemp.z);

          Vec3.transformMat4(vertexes[0], _temp_v3, m);

          _temp_v3.set(-_nearTemp.x, _nearTemp.y, _nearTemp.z);

          Vec3.transformMat4(vertexes[1], _temp_v3, m);

          _temp_v3.set(-_nearTemp.x, -_nearTemp.y, _nearTemp.z);

          Vec3.transformMat4(vertexes[2], _temp_v3, m);

          _temp_v3.set(_nearTemp.x, -_nearTemp.y, _nearTemp.z);

          Vec3.transformMat4(vertexes[3], _temp_v3, m);

          _temp_v3.set(_farTemp.x, _farTemp.y, _farTemp.z);

          Vec3.transformMat4(vertexes[4], _temp_v3, m);

          _temp_v3.set(-_farTemp.x, _farTemp.y, _farTemp.z);

          Vec3.transformMat4(vertexes[5], _temp_v3, m);

          _temp_v3.set(-_farTemp.x, -_farTemp.y, _farTemp.z);

          Vec3.transformMat4(vertexes[6], _temp_v3, m);

          _temp_v3.set(_farTemp.x, -_farTemp.y, _farTemp.z);

          Vec3.transformMat4(vertexes[7], _temp_v3, m);
          this.updatePlanes();
        };

        Frustum.create = function create() {
          return new Frustum();
        };

        Frustum.clone = function clone(f) {
          return Frustum.copy(new Frustum(), f);
        };

        Frustum.copy = function copy(out, f) {
          out._type = f.type;

          for (var i = 0; i < 6; ++i) {
            Plane.copy(out.planes[i], f.planes[i]);
          }

          for (var _i = 0; _i < 8; ++_i) {
            Vec3.copy(out.vertices[_i], f.vertices[_i]);
          }

          return out;
        };

        function Frustum() {
          this.planes = void 0;
          this.vertices = void 0;
          this._type = void 0;
          this._type = enums.SHAPE_FRUSTUM;
          this.planes = new Array(6);

          for (var i = 0; i < 6; ++i) {
            this.planes[i] = Plane.create(0, 0, 0, 0);
          }

          this.vertices = new Array(8);

          for (var _i2 = 0; _i2 < 8; ++_i2) {
            this.vertices[_i2] = new Vec3();
          }
        }

        _proto.update = function update(m, inv) {
          Vec3.set(this.planes[0].n, m.m03 + m.m00, m.m07 + m.m04, m.m11 + m.m08);
          this.planes[0].d = -(m.m15 + m.m12);
          Vec3.set(this.planes[1].n, m.m03 - m.m00, m.m07 - m.m04, m.m11 - m.m08);
          this.planes[1].d = -(m.m15 - m.m12);
          Vec3.set(this.planes[2].n, m.m03 + m.m01, m.m07 + m.m05, m.m11 + m.m09);
          this.planes[2].d = -(m.m15 + m.m13);
          Vec3.set(this.planes[3].n, m.m03 - m.m01, m.m07 - m.m05, m.m11 - m.m09);
          this.planes[3].d = -(m.m15 - m.m13);
          Vec3.set(this.planes[4].n, m.m03 + m.m02, m.m07 + m.m06, m.m11 + m.m10);
          this.planes[4].d = -(m.m15 + m.m14);
          Vec3.set(this.planes[5].n, m.m03 - m.m02, m.m07 - m.m06, m.m11 - m.m10);
          this.planes[5].d = -(m.m15 - m.m14);

          if (this._type !== enums.SHAPE_FRUSTUM_ACCURATE) {
            return;
          }

          for (var i = 0; i < 6; i++) {
            var pl = this.planes[i];
            var invDist = 1 / pl.n.length();
            Vec3.multiplyScalar(pl.n, pl.n, invDist);
            pl.d *= invDist;
          }

          for (var _i3 = 0; _i3 < 8; _i3++) {
            Vec3.transformMat4(this.vertices[_i3], _v[_i3], inv);
          }
        };

        _proto.transform = function transform(mat) {
          if (this._type !== enums.SHAPE_FRUSTUM_ACCURATE) {
            return;
          }

          for (var i = 0; i < 8; i++) {
            Vec3.transformMat4(this.vertices[i], this.vertices[i], mat);
          }

          this.updatePlanes();
        };

        _proto.zero = function zero() {
          for (var i = 0; i < 8; i++) {
            this.vertices[i].set(0.0, 0.0, 0.0);
          }

          this.updatePlanes();
        };

        _proto.updatePlanes = function updatePlanes() {
          Plane.fromPoints(this.planes[0], this.vertices[1], this.vertices[6], this.vertices[5]);
          Plane.fromPoints(this.planes[1], this.vertices[3], this.vertices[4], this.vertices[7]);
          Plane.fromPoints(this.planes[2], this.vertices[6], this.vertices[3], this.vertices[7]);
          Plane.fromPoints(this.planes[3], this.vertices[0], this.vertices[5], this.vertices[4]);
          Plane.fromPoints(this.planes[4], this.vertices[2], this.vertices[0], this.vertices[3]);
          Plane.fromPoints(this.planes[5], this.vertices[7], this.vertices[5], this.vertices[6]);
        };

        _createClass(Frustum, [{
          key: "accurate",
          set: function set(b) {
            this._type = b ? enums.SHAPE_FRUSTUM_ACCURATE : enums.SHAPE_FRUSTUM;
          }
        }, {
          key: "type",
          get: function get() {
            return this._type;
          }
        }]);

        return Frustum;
      }();

      var rayPlane = function () {
        var pt = new Vec3(0, 0, 0);
        return function (ray, plane) {
          var denom = Vec3.dot(ray.d, plane.n);

          if (Math.abs(denom) < Number.EPSILON) {
            return 0;
          }

          Vec3.multiplyScalar(pt, plane.n, plane.d);
          var t = Vec3.dot(Vec3.subtract(pt, pt, ray.o), plane.n) / denom;

          if (t < 0) {
            return 0;
          }

          return t;
        };
      }();

      var rayTriangle = function () {
        var ab = new Vec3(0, 0, 0);
        var ac = new Vec3(0, 0, 0);
        var pvec = new Vec3(0, 0, 0);
        var tvec = new Vec3(0, 0, 0);
        var qvec = new Vec3(0, 0, 0);
        return function (ray, triangle, doubleSided) {
          Vec3.subtract(ab, triangle.b, triangle.a);
          Vec3.subtract(ac, triangle.c, triangle.a);
          Vec3.cross(pvec, ray.d, ac);
          var det = Vec3.dot(ab, pvec);

          if (det < Number.EPSILON && (!doubleSided || det > -Number.EPSILON)) {
            return 0;
          }

          var inv_det = 1 / det;
          Vec3.subtract(tvec, ray.o, triangle.a);
          var u = Vec3.dot(tvec, pvec) * inv_det;

          if (u < 0 || u > 1) {
            return 0;
          }

          Vec3.cross(qvec, tvec, ab);
          var v = Vec3.dot(ray.d, qvec) * inv_det;

          if (v < 0 || u + v > 1) {
            return 0;
          }

          var t = Vec3.dot(ac, qvec) * inv_det;
          return t < 0 ? 0 : t;
        };
      }();

      var raySphere = function () {
        var e = new Vec3(0, 0, 0);
        return function (ray, sphere) {
          var r = sphere.radius;
          var c = sphere.center;
          var o = ray.o;
          var d = ray.d;
          var rSq = r * r;
          Vec3.subtract(e, c, o);
          var eSq = e.lengthSqr();
          var aLength = Vec3.dot(e, d);
          var fSq = rSq - (eSq - aLength * aLength);

          if (fSq < 0) {
            return 0;
          }

          var f = Math.sqrt(fSq);
          var t = eSq < rSq ? aLength + f : aLength - f;

          if (t < 0) {
            return 0;
          }

          return t;
        };
      }();

      var rayAABB = function () {
        var min = new Vec3();
        var max = new Vec3();
        return function (ray, aabb) {
          Vec3.subtract(min, aabb.center, aabb.halfExtents);
          Vec3.add(max, aabb.center, aabb.halfExtents);
          return rayAABB2(ray, min, max);
        };
      }();

      function rayAABB2(ray, min, max) {
        var o = ray.o;
        var d = ray.d;
        var ix = 1 / d.x;
        var iy = 1 / d.y;
        var iz = 1 / d.z;
        var t1 = (min.x - o.x) * ix;
        var t2 = (max.x - o.x) * ix;
        var t3 = (min.y - o.y) * iy;
        var t4 = (max.y - o.y) * iy;
        var t5 = (min.z - o.z) * iz;
        var t6 = (max.z - o.z) * iz;
        var tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)), Math.min(t5, t6));
        var tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)), Math.max(t5, t6));

        if (tmax < 0 || tmin > tmax) {
          return 0;
        }

        return tmin > 0 ? tmin : tmax;
      }

      var rayOBB = function () {
        var center = new Vec3();
        var o = new Vec3();
        var d = new Vec3();
        var X = new Vec3();
        var Y = new Vec3();
        var Z = new Vec3();
        var p = new Vec3();
        var size = new Array(3);
        var f = new Array(3);
        var e = new Array(3);
        var t = new Array(6);
        return function (ray, obb) {
          size[0] = obb.halfExtents.x;
          size[1] = obb.halfExtents.y;
          size[2] = obb.halfExtents.z;
          center = obb.center;
          o = ray.o;
          d = ray.d;
          Vec3.set(X, obb.orientation.m00, obb.orientation.m01, obb.orientation.m02);
          Vec3.set(Y, obb.orientation.m03, obb.orientation.m04, obb.orientation.m05);
          Vec3.set(Z, obb.orientation.m06, obb.orientation.m07, obb.orientation.m08);
          Vec3.subtract(p, center, o);
          f[0] = Vec3.dot(X, d);
          f[1] = Vec3.dot(Y, d);
          f[2] = Vec3.dot(Z, d);
          e[0] = Vec3.dot(X, p);
          e[1] = Vec3.dot(Y, p);
          e[2] = Vec3.dot(Z, p);

          for (var i = 0; i < 3; ++i) {
            if (f[i] === 0) {
              if (-e[i] - size[i] > 0 || -e[i] + size[i] < 0) {
                return 0;
              }

              f[i] = 0.0000001;
            }

            t[i * 2 + 0] = (e[i] + size[i]) / f[i];
            t[i * 2 + 1] = (e[i] - size[i]) / f[i];
          }

          var tmin = Math.max(Math.max(Math.min(t[0], t[1]), Math.min(t[2], t[3])), Math.min(t[4], t[5]));
          var tmax = Math.min(Math.min(Math.max(t[0], t[1]), Math.max(t[2], t[3])), Math.max(t[4], t[5]));

          if (tmax < 0 || tmin > tmax) {
            return 0;
          }

          return tmin > 0 ? tmin : tmax;
        };
      }();

      var rayCapsule = function () {
        var v3_0 = new Vec3();
        var v3_1 = new Vec3();
        var v3_2 = new Vec3();
        var v3_3 = new Vec3();
        var v3_4 = new Vec3();
        var v3_5 = new Vec3();
        var v3_6 = new Vec3();
        var sphere_0 = new Sphere();
        return function (ray, capsule) {
          var radiusSqr = capsule.radius * capsule.radius;
          var vRayNorm = Vec3.normalize(v3_0, ray.d);
          var A = capsule.ellipseCenter0;
          var B = capsule.ellipseCenter1;
          var BA = Vec3.subtract(v3_1, B, A);

          if (BA.equals(Vec3.ZERO)) {
            sphere_0.radius = capsule.radius;
            sphere_0.center.set(capsule.ellipseCenter0);
            return intersect.raySphere(ray, sphere_0);
          }

          var O = ray.o;
          var OA = Vec3.subtract(v3_2, O, A);
          var VxBA = Vec3.cross(v3_3, vRayNorm, BA);
          var a = VxBA.lengthSqr();

          if (a === 0) {
            sphere_0.radius = capsule.radius;
            var BO = Vec3.subtract(v3_4, B, O);

            if (OA.lengthSqr() < BO.lengthSqr()) {
              sphere_0.center.set(capsule.ellipseCenter0);
            } else {
              sphere_0.center.set(capsule.ellipseCenter1);
            }

            return intersect.raySphere(ray, sphere_0);
          }

          var OAxBA = Vec3.cross(v3_4, OA, BA);
          var ab2 = BA.lengthSqr();
          var b = 2 * Vec3.dot(VxBA, OAxBA);
          var c = OAxBA.lengthSqr() - radiusSqr * ab2;
          var d = b * b - 4 * a * c;

          if (d < 0) {
            return 0;
          }

          var t = (-b - Math.sqrt(d)) / (2 * a);

          if (t < 0) {
            sphere_0.radius = capsule.radius;

            var _BO = Vec3.subtract(v3_5, B, O);

            if (OA.lengthSqr() < _BO.lengthSqr()) {
              sphere_0.center.set(capsule.ellipseCenter0);
            } else {
              sphere_0.center.set(capsule.ellipseCenter1);
            }

            return intersect.raySphere(ray, sphere_0);
          } else {
            var iPos = Vec3.scaleAndAdd(v3_5, ray.o, vRayNorm, t);
            var iPosLen = Vec3.subtract(v3_6, iPos, A);
            var tLimit = Vec3.dot(iPosLen, BA) / ab2;

            if (tLimit >= 0 && tLimit <= 1) {
              return t;
            } else if (tLimit < 0) {
              sphere_0.radius = capsule.radius;
              sphere_0.center.set(capsule.ellipseCenter0);
              return intersect.raySphere(ray, sphere_0);
            } else if (tLimit > 1) {
              sphere_0.radius = capsule.radius;
              sphere_0.center.set(capsule.ellipseCenter1);
              return intersect.raySphere(ray, sphere_0);
            } else {
              return 0;
            }
          }
        };
      }();

      var linePlane = function () {
        var ab = new Vec3(0, 0, 0);
        return function (line, plane) {
          Vec3.subtract(ab, line.e, line.s);
          var t = (plane.d - Vec3.dot(line.s, plane.n)) / Vec3.dot(ab, plane.n);

          if (t < 0 || t > 1) {
            return 0;
          }

          return t;
        };
      }();

      var lineTriangle = function () {
        var ab = new Vec3(0, 0, 0);
        var ac = new Vec3(0, 0, 0);
        var qp = new Vec3(0, 0, 0);
        var ap = new Vec3(0, 0, 0);
        var n = new Vec3(0, 0, 0);
        var e = new Vec3(0, 0, 0);
        return function (line, triangle, outPt) {
          Vec3.subtract(ab, triangle.b, triangle.a);
          Vec3.subtract(ac, triangle.c, triangle.a);
          Vec3.subtract(qp, line.s, line.e);
          Vec3.cross(n, ab, ac);
          var det = Vec3.dot(qp, n);

          if (det <= 0.0) {
            return 0;
          }

          Vec3.subtract(ap, line.s, triangle.a);
          var t = Vec3.dot(ap, n);

          if (t < 0 || t > det) {
            return 0;
          }

          Vec3.cross(e, qp, ap);
          var v = Vec3.dot(ac, e);

          if (v < 0 || v > det) {
            return 0;
          }

          var w = -Vec3.dot(ab, e);

          if (w < 0.0 || v + w > det) {
            return 0;
          }

          if (outPt) {
            var invDet = 1.0 / det;
            v *= invDet;
            w *= invDet;
            var u = 1.0 - v - w;
            Vec3.set(outPt, triangle.a.x * u + triangle.b.x * v + triangle.c.x * w, triangle.a.y * u + triangle.b.y * v + triangle.c.y * w, triangle.a.z * u + triangle.b.z * v + triangle.c.z * w);
          }

          return 1;
        };
      }();

      var r_t = new Ray();

      function lineAABB(line, aabb) {
        r_t.o.set(line.s);
        Vec3.subtract(r_t.d, line.e, line.s);
        r_t.d.normalize();
        var min = rayAABB(r_t, aabb);
        var len = line.length();

        if (min <= len) {
          return min;
        } else {
          return 0;
        }
      }

      function lineOBB(line, obb) {
        r_t.o.set(line.s);
        Vec3.subtract(r_t.d, line.e, line.s);
        r_t.d.normalize();
        var min = rayOBB(r_t, obb);
        var len = line.length();

        if (min <= len) {
          return min;
        } else {
          return 0;
        }
      }

      function lineSphere(line, sphere) {
        r_t.o.set(line.s);
        Vec3.subtract(r_t.d, line.e, line.s);
        r_t.d.normalize();
        var min = raySphere(r_t, sphere);
        var len = line.length();

        if (min <= len) {
          return min;
        } else {
          return 0;
        }
      }

      var aabbWithAABB = function () {
        var aMin = new Vec3();
        var aMax = new Vec3();
        var bMin = new Vec3();
        var bMax = new Vec3();
        return function (aabb1, aabb2) {
          Vec3.subtract(aMin, aabb1.center, aabb1.halfExtents);
          Vec3.add(aMax, aabb1.center, aabb1.halfExtents);
          Vec3.subtract(bMin, aabb2.center, aabb2.halfExtents);
          Vec3.add(bMax, aabb2.center, aabb2.halfExtents);
          return aMin.x <= bMax.x && aMax.x >= bMin.x && aMin.y <= bMax.y && aMax.y >= bMin.y && aMin.z <= bMax.z && aMax.z >= bMin.z;
        };
      }();

      function getAABBVertices(min, max, out) {
        Vec3.set(out[0], min.x, max.y, max.z);
        Vec3.set(out[1], min.x, max.y, min.z);
        Vec3.set(out[2], min.x, min.y, max.z);
        Vec3.set(out[3], min.x, min.y, min.z);
        Vec3.set(out[4], max.x, max.y, max.z);
        Vec3.set(out[5], max.x, max.y, min.z);
        Vec3.set(out[6], max.x, min.y, max.z);
        Vec3.set(out[7], max.x, min.y, min.z);
      }

      function getOBBVertices(c, e, a1, a2, a3, out) {
        Vec3.set(out[0], c.x + a1.x * e.x + a2.x * e.y + a3.x * e.z, c.y + a1.y * e.x + a2.y * e.y + a3.y * e.z, c.z + a1.z * e.x + a2.z * e.y + a3.z * e.z);
        Vec3.set(out[1], c.x - a1.x * e.x + a2.x * e.y + a3.x * e.z, c.y - a1.y * e.x + a2.y * e.y + a3.y * e.z, c.z - a1.z * e.x + a2.z * e.y + a3.z * e.z);
        Vec3.set(out[2], c.x + a1.x * e.x - a2.x * e.y + a3.x * e.z, c.y + a1.y * e.x - a2.y * e.y + a3.y * e.z, c.z + a1.z * e.x - a2.z * e.y + a3.z * e.z);
        Vec3.set(out[3], c.x + a1.x * e.x + a2.x * e.y - a3.x * e.z, c.y + a1.y * e.x + a2.y * e.y - a3.y * e.z, c.z + a1.z * e.x + a2.z * e.y - a3.z * e.z);
        Vec3.set(out[4], c.x - a1.x * e.x - a2.x * e.y - a3.x * e.z, c.y - a1.y * e.x - a2.y * e.y - a3.y * e.z, c.z - a1.z * e.x - a2.z * e.y - a3.z * e.z);
        Vec3.set(out[5], c.x + a1.x * e.x - a2.x * e.y - a3.x * e.z, c.y + a1.y * e.x - a2.y * e.y - a3.y * e.z, c.z + a1.z * e.x - a2.z * e.y - a3.z * e.z);
        Vec3.set(out[6], c.x - a1.x * e.x + a2.x * e.y - a3.x * e.z, c.y - a1.y * e.x + a2.y * e.y - a3.y * e.z, c.z - a1.z * e.x + a2.z * e.y - a3.z * e.z);
        Vec3.set(out[7], c.x - a1.x * e.x - a2.x * e.y + a3.x * e.z, c.y - a1.y * e.x - a2.y * e.y + a3.y * e.z, c.z - a1.z * e.x - a2.z * e.y + a3.z * e.z);
      }

      function getInterval(vertices, axis) {
        var min = Vec3.dot(axis, vertices[0]);
        var max = min;

        for (var i = 1; i < 8; ++i) {
          var projection = Vec3.dot(axis, vertices[i]);
          min = projection < min ? projection : min;
          max = projection > max ? projection : max;
        }

        return [min, max];
      }

      var aabbWithOBB = function () {
        var test = new Array(15);

        for (var i = 0; i < 15; i++) {
          test[i] = new Vec3(0, 0, 0);
        }

        var vertices = new Array(8);
        var vertices2 = new Array(8);

        for (var _i = 0; _i < 8; _i++) {
          vertices[_i] = new Vec3(0, 0, 0);
          vertices2[_i] = new Vec3(0, 0, 0);
        }

        var min = new Vec3();
        var max = new Vec3();
        return function (aabb, obb) {
          Vec3.set(test[0], 1, 0, 0);
          Vec3.set(test[1], 0, 1, 0);
          Vec3.set(test[2], 0, 0, 1);
          Vec3.set(test[3], obb.orientation.m00, obb.orientation.m01, obb.orientation.m02);
          Vec3.set(test[4], obb.orientation.m03, obb.orientation.m04, obb.orientation.m05);
          Vec3.set(test[5], obb.orientation.m06, obb.orientation.m07, obb.orientation.m08);

          for (var _i2 = 0; _i2 < 3; ++_i2) {
            Vec3.cross(test[6 + _i2 * 3 + 0], test[_i2], test[3]);
            Vec3.cross(test[6 + _i2 * 3 + 1], test[_i2], test[4]);
            Vec3.cross(test[6 + _i2 * 3 + 1], test[_i2], test[5]);
          }

          Vec3.subtract(min, aabb.center, aabb.halfExtents);
          Vec3.add(max, aabb.center, aabb.halfExtents);
          getAABBVertices(min, max, vertices);
          getOBBVertices(obb.center, obb.halfExtents, test[3], test[4], test[5], vertices2);

          for (var j = 0; j < 15; ++j) {
            var a = getInterval(vertices, test[j]);
            var b = getInterval(vertices2, test[j]);

            if (b[0] > a[1] || a[0] > b[1]) {
              return 0;
            }
          }

          return 1;
        };
      }();

      var aabbPlane = function aabbPlane(aabb, plane) {
        var r = aabb.halfExtents.x * Math.abs(plane.n.x) + aabb.halfExtents.y * Math.abs(plane.n.y) + aabb.halfExtents.z * Math.abs(plane.n.z);
        var dot = Vec3.dot(plane.n, aabb.center);

        if (dot + r < plane.d) {
          return -1;
        } else if (dot - r > plane.d) {
          return 0;
        }

        return 1;
      };

      var aabbFrustum = function aabbFrustum(aabb, frustum) {
        for (var i = 0; i < frustum.planes.length; i++) {
          if (aabbPlane(aabb, frustum.planes[i]) === -1) {
            return 0;
          }
        }

        return 1;
      };

      var aabbFrustumCompletelyInside = function aabbFrustumCompletelyInside(aabb, frustum) {
        for (var i = 0; i < frustum.planes.length; i++) {
          if (aabbPlane(aabb, frustum.planes[i]) !== 0) {
            return 0;
          }
        }

        return 1;
      };

      var aabbFrustumAccurate = function () {
        var tmp = new Array(8);
        var out1 = 0;
        var out2 = 0;

        for (var i = 0; i < tmp.length; i++) {
          tmp[i] = new Vec3(0, 0, 0);
        }

        return function (aabb, frustum) {
          var result = 0;
          var intersects = false;

          for (var _i3 = 0; _i3 < frustum.planes.length; _i3++) {
            result = aabbPlane(aabb, frustum.planes[_i3]);
            if (result === -1) return 0;else if (result === 1) {
                intersects = true;
              }
          }

          if (!intersects) {
            return 1;
          }

          for (var _i4 = 0; _i4 < frustum.vertices.length; _i4++) {
            Vec3.subtract(tmp[_i4], frustum.vertices[_i4], aabb.center);
          }

          out1 = 0, out2 = 0;

          for (var _i5 = 0; _i5 < frustum.vertices.length; _i5++) {
            if (tmp[_i5].x > aabb.halfExtents.x) {
              out1++;
            } else if (tmp[_i5].x < -aabb.halfExtents.x) {
              out2++;
            }
          }

          if (out1 === frustum.vertices.length || out2 === frustum.vertices.length) {
            return 0;
          }

          out1 = 0;
          out2 = 0;

          for (var _i6 = 0; _i6 < frustum.vertices.length; _i6++) {
            if (tmp[_i6].y > aabb.halfExtents.y) {
              out1++;
            } else if (tmp[_i6].y < -aabb.halfExtents.y) {
              out2++;
            }
          }

          if (out1 === frustum.vertices.length || out2 === frustum.vertices.length) {
            return 0;
          }

          out1 = 0;
          out2 = 0;

          for (var _i7 = 0; _i7 < frustum.vertices.length; _i7++) {
            if (tmp[_i7].z > aabb.halfExtents.z) {
              out1++;
            } else if (tmp[_i7].z < -aabb.halfExtents.z) {
              out2++;
            }
          }

          if (out1 === frustum.vertices.length || out2 === frustum.vertices.length) {
            return 0;
          }

          return 1;
        };
      }();

      var obbPoint = function () {
        var tmp = new Vec3(0, 0, 0);
        var m3 = new Mat3();

        var lessThan = function lessThan(a, b) {
          return Math.abs(a.x) < b.x && Math.abs(a.y) < b.y && Math.abs(a.z) < b.z;
        };

        return function (obb, point) {
          Vec3.subtract(tmp, point, obb.center);
          Vec3.transformMat3(tmp, tmp, Mat3.transpose(m3, obb.orientation));
          return lessThan(tmp, obb.halfExtents);
        };
      }();

      var obbPlane = function () {
        var absDot = function absDot(n, x, y, z) {
          return Math.abs(n.x * x + n.y * y + n.z * z);
        };

        return function (obb, plane) {
          var r = obb.halfExtents.x * absDot(plane.n, obb.orientation.m00, obb.orientation.m01, obb.orientation.m02) + obb.halfExtents.y * absDot(plane.n, obb.orientation.m03, obb.orientation.m04, obb.orientation.m05) + obb.halfExtents.z * absDot(plane.n, obb.orientation.m06, obb.orientation.m07, obb.orientation.m08);
          var dot = Vec3.dot(plane.n, obb.center);

          if (dot + r < plane.d) {
            return -1;
          } else if (dot - r > plane.d) {
            return 0;
          }

          return 1;
        };
      }();

      var obbFrustum = function obbFrustum(obb, frustum) {
        for (var i = 0; i < frustum.planes.length; i++) {
          if (obbPlane(obb, frustum.planes[i]) === -1) {
            return 0;
          }
        }

        return 1;
      };

      var obbFrustumAccurate = function () {
        var tmp = new Array(8);
        var dist = 0;
        var out1 = 0;
        var out2 = 0;

        for (var i = 0; i < tmp.length; i++) {
          tmp[i] = new Vec3(0, 0, 0);
        }

        var dot = function dot(n, x, y, z) {
          return n.x * x + n.y * y + n.z * z;
        };

        return function (obb, frustum) {
          var result = 0;
          var intersects = false;

          for (var _i8 = 0; _i8 < frustum.planes.length; _i8++) {
            result = obbPlane(obb, frustum.planes[_i8]);
            if (result === -1) return 0;else if (result === 1) {
                intersects = true;
              }
          }

          if (!intersects) {
            return 1;
          }

          for (var _i9 = 0; _i9 < frustum.vertices.length; _i9++) {
            Vec3.subtract(tmp[_i9], frustum.vertices[_i9], obb.center);
          }

          out1 = 0, out2 = 0;

          for (var _i10 = 0; _i10 < frustum.vertices.length; _i10++) {
            dist = dot(tmp[_i10], obb.orientation.m00, obb.orientation.m01, obb.orientation.m02);

            if (dist > obb.halfExtents.x) {
              out1++;
            } else if (dist < -obb.halfExtents.x) {
              out2++;
            }
          }

          if (out1 === frustum.vertices.length || out2 === frustum.vertices.length) {
            return 0;
          }

          out1 = 0;
          out2 = 0;

          for (var _i11 = 0; _i11 < frustum.vertices.length; _i11++) {
            dist = dot(tmp[_i11], obb.orientation.m03, obb.orientation.m04, obb.orientation.m05);

            if (dist > obb.halfExtents.y) {
              out1++;
            } else if (dist < -obb.halfExtents.y) {
              out2++;
            }
          }

          if (out1 === frustum.vertices.length || out2 === frustum.vertices.length) {
            return 0;
          }

          out1 = 0;
          out2 = 0;

          for (var _i12 = 0; _i12 < frustum.vertices.length; _i12++) {
            dist = dot(tmp[_i12], obb.orientation.m06, obb.orientation.m07, obb.orientation.m08);

            if (dist > obb.halfExtents.z) {
              out1++;
            } else if (dist < -obb.halfExtents.z) {
              out2++;
            }
          }

          if (out1 === frustum.vertices.length || out2 === frustum.vertices.length) {
            return 0;
          }

          return 1;
        };
      }();

      var obbWithOBB = function () {
        var test = new Array(15);

        for (var i = 0; i < 15; i++) {
          test[i] = new Vec3(0, 0, 0);
        }

        var vertices = new Array(8);
        var vertices2 = new Array(8);

        for (var _i13 = 0; _i13 < 8; _i13++) {
          vertices[_i13] = new Vec3(0, 0, 0);
          vertices2[_i13] = new Vec3(0, 0, 0);
        }

        return function (obb1, obb2) {
          Vec3.set(test[0], obb1.orientation.m00, obb1.orientation.m01, obb1.orientation.m02);
          Vec3.set(test[1], obb1.orientation.m03, obb1.orientation.m04, obb1.orientation.m05);
          Vec3.set(test[2], obb1.orientation.m06, obb1.orientation.m07, obb1.orientation.m08);
          Vec3.set(test[3], obb2.orientation.m00, obb2.orientation.m01, obb2.orientation.m02);
          Vec3.set(test[4], obb2.orientation.m03, obb2.orientation.m04, obb2.orientation.m05);
          Vec3.set(test[5], obb2.orientation.m06, obb2.orientation.m07, obb2.orientation.m08);

          for (var _i14 = 0; _i14 < 3; ++_i14) {
            Vec3.cross(test[6 + _i14 * 3 + 0], test[_i14], test[3]);
            Vec3.cross(test[6 + _i14 * 3 + 1], test[_i14], test[4]);
            Vec3.cross(test[6 + _i14 * 3 + 2], test[_i14], test[5]);
          }

          getOBBVertices(obb1.center, obb1.halfExtents, test[0], test[1], test[2], vertices);
          getOBBVertices(obb2.center, obb2.halfExtents, test[3], test[4], test[5], vertices2);

          for (var _i15 = 0; _i15 < 15; ++_i15) {
            var a = getInterval(vertices, test[_i15]);
            var b = getInterval(vertices2, test[_i15]);

            if (b[0] > a[1] || a[0] > b[1]) {
              return 0;
            }
          }

          return 1;
        };
      }();

      var obbCapsule = function () {
        var sphere_0 = new Sphere();
        var v3_0 = new Vec3();
        var v3_1 = new Vec3();
        var v3_2 = new Vec3();
        var v3_verts8 = new Array(8);

        for (var i = 0; i < 8; i++) {
          v3_verts8[i] = new Vec3();
        }

        var v3_axis8 = new Array(8);

        for (var _i16 = 0; _i16 < 8; _i16++) {
          v3_axis8[_i16] = new Vec3();
        }

        return function (obb, capsule) {
          var h = Vec3.squaredDistance(capsule.ellipseCenter0, capsule.ellipseCenter1);

          if (h === 0) {
            sphere_0.radius = capsule.radius;
            sphere_0.center.set(capsule.ellipseCenter0);
            return intersect.sphereOBB(sphere_0, obb);
          } else {
            v3_0.x = obb.orientation.m00;
            v3_0.y = obb.orientation.m01;
            v3_0.z = obb.orientation.m02;
            v3_1.x = obb.orientation.m03;
            v3_1.y = obb.orientation.m04;
            v3_1.z = obb.orientation.m05;
            v3_2.x = obb.orientation.m06;
            v3_2.y = obb.orientation.m07;
            v3_2.z = obb.orientation.m08;
            getOBBVertices(obb.center, obb.halfExtents, v3_0, v3_1, v3_2, v3_verts8);
            var axes = v3_axis8;
            var a0 = Vec3.copy(axes[0], v3_0);
            var a1 = Vec3.copy(axes[1], v3_1);
            var a2 = Vec3.copy(axes[2], v3_2);
            var C = Vec3.subtract(axes[3], capsule.center, obb.center);
            C.normalize();
            var B = Vec3.subtract(axes[4], capsule.ellipseCenter0, capsule.ellipseCenter1);
            B.normalize();
            Vec3.cross(axes[5], a0, B);
            Vec3.cross(axes[6], a1, B);
            Vec3.cross(axes[7], a2, B);

            for (var _i17 = 0; _i17 < 8; ++_i17) {
              var a = getInterval(v3_verts8, axes[_i17]);
              var d0 = Vec3.dot(axes[_i17], capsule.ellipseCenter0);
              var d1 = Vec3.dot(axes[_i17], capsule.ellipseCenter1);
              var max_d = Math.max(d0, d1);
              var min_d = Math.min(d0, d1);
              var d_min = min_d - capsule.radius;
              var d_max = max_d + capsule.radius;

              if (d_min > a[1] || a[0] > d_max) {
                return 0;
              }
            }

            return 1;
          }
        };
      }();

      var spherePlane = function spherePlane(sphere, plane) {
        var dot = Vec3.dot(plane.n, sphere.center);
        var r = sphere.radius * plane.n.length();

        if (dot + r < plane.d) {
          return -1;
        } else if (dot - r > plane.d) {
          return 0;
        }

        return 1;
      };

      var sphereFrustum = function sphereFrustum(sphere, frustum) {
        for (var i = 0; i < frustum.planes.length; i++) {
          if (spherePlane(sphere, frustum.planes[i]) === -1) {
            return 0;
          }
        }

        return 1;
      };

      var sphereFrustumAccurate = function () {
        var pt = new Vec3(0, 0, 0);
        var map = [1, -1, 1, -1, 1, -1];
        return function (sphere, frustum) {
          for (var i = 0; i < 6; i++) {
            var plane = frustum.planes[i];
            var _r = sphere.radius;
            var c = sphere.center;
            var n = plane.n;
            var d = plane.d;
            var dot = Vec3.dot(n, c);
            if (dot + _r < d) return 0;else if (dot - _r > d) {
                continue;
              }
            Vec3.add(pt, c, Vec3.multiplyScalar(pt, n, _r));

            for (var j = 0; j < 6; j++) {
              if (j === i || j === i + map[i]) {
                continue;
              }

              var test = frustum.planes[j];

              if (Vec3.dot(test.n, pt) < test.d) {
                return 0;
              }
            }
          }

          return 1;
        };
      }();

      var sphereWithSphere = function sphereWithSphere(sphere0, sphere1) {
        var r = sphere0.radius + sphere1.radius;
        return Vec3.squaredDistance(sphere0.center, sphere1.center) < r * r;
      };

      var sphereAABB = function () {
        var pt = new Vec3();
        return function (sphere, aabb) {
          pt_point_aabb(pt, sphere.center, aabb);
          return Vec3.squaredDistance(sphere.center, pt) < sphere.radius * sphere.radius;
        };
      }();

      var sphereOBB = function () {
        var pt = new Vec3();
        return function (sphere, obb) {
          pt_point_obb(pt, sphere.center, obb);
          return Vec3.squaredDistance(sphere.center, pt) < sphere.radius * sphere.radius;
        };
      }();

      var sphereCapsule = function () {
        var v3_0 = new Vec3();
        var v3_1 = new Vec3();
        return function (sphere, capsule) {
          var r = sphere.radius + capsule.radius;
          var squaredR = r * r;
          var h = Vec3.squaredDistance(capsule.ellipseCenter0, capsule.ellipseCenter1);

          if (h === 0) {
            return Vec3.squaredDistance(sphere.center, capsule.center) < squaredR;
          } else {
            Vec3.subtract(v3_0, sphere.center, capsule.ellipseCenter0);
            Vec3.subtract(v3_1, capsule.ellipseCenter1, capsule.ellipseCenter0);
            var t = Vec3.dot(v3_0, v3_1) / h;

            if (t < 0) {
              return Vec3.squaredDistance(sphere.center, capsule.ellipseCenter0) < squaredR;
            } else if (t > 1) {
              return Vec3.squaredDistance(sphere.center, capsule.ellipseCenter1) < squaredR;
            } else {
              Vec3.scaleAndAdd(v3_0, capsule.ellipseCenter0, v3_1, t);
              return Vec3.squaredDistance(sphere.center, v3_0) < squaredR;
            }
          }
        };
      }();

      var capsuleWithCapsule = function () {
        var v3_0 = new Vec3();
        var v3_1 = new Vec3();
        var v3_2 = new Vec3();
        var v3_3 = new Vec3();
        var v3_4 = new Vec3();
        var v3_5 = new Vec3();
        return function capsuleWithCapsule(capsuleA, capsuleB) {
          var u = Vec3.subtract(v3_0, capsuleA.ellipseCenter1, capsuleA.ellipseCenter0);
          var v = Vec3.subtract(v3_1, capsuleB.ellipseCenter1, capsuleB.ellipseCenter0);
          var w = Vec3.subtract(v3_2, capsuleA.ellipseCenter0, capsuleB.ellipseCenter0);
          var a = Vec3.dot(u, u);
          var b = Vec3.dot(u, v);
          var c = Vec3.dot(v, v);
          var d = Vec3.dot(u, w);
          var e = Vec3.dot(v, w);
          var D = a * c - b * b;
          var sN;
          var sD = D;
          var tN;
          var tD = D;

          if (D < EPSILON) {
            sN = 0.0;
            sD = 1.0;
            tN = e;
            tD = c;
          } else {
            sN = b * e - c * d;
            tN = a * e - b * d;

            if (sN < 0.0) {
              sN = 0.0;
              tN = e;
              tD = c;
            } else if (sN > sD) {
              sN = sD;
              tN = e + b;
              tD = c;
            }
          }

          if (tN < 0.0) {
            tN = 0.0;

            if (-d < 0.0) {
              sN = 0.0;
            } else if (-d > a) {
              sN = sD;
            } else {
              sN = -d;
              sD = a;
            }
          } else if (tN > tD) {
            tN = tD;

            if (-d + b < 0.0) {
              sN = 0;
            } else if (-d + b > a) {
              sN = sD;
            } else {
              sN = -d + b;
              sD = a;
            }
          }

          var sc = Math.abs(sN) < EPSILON ? 0.0 : sN / sD;
          var tc = Math.abs(tN) < EPSILON ? 0.0 : tN / tD;
          var dP = v3_3;
          dP.set(w);
          dP.add(Vec3.multiplyScalar(v3_4, u, sc));
          dP.subtract(Vec3.multiplyScalar(v3_5, v, tc));
          var radius = capsuleA.radius + capsuleB.radius;
          return dP.lengthSqr() < radius * radius;
        };
      }();

      var intersect = {
        raySphere: raySphere,
        rayAABB: rayAABB,
        rayOBB: rayOBB,
        rayPlane: rayPlane,
        rayTriangle: rayTriangle,
        rayCapsule: rayCapsule,
        raySubMesh: null,
        rayMesh: null,
        rayModel: null,
        lineSphere: lineSphere,
        lineAABB: lineAABB,
        lineOBB: lineOBB,
        linePlane: linePlane,
        lineTriangle: lineTriangle,
        sphereWithSphere: sphereWithSphere,
        sphereAABB: sphereAABB,
        sphereOBB: sphereOBB,
        spherePlane: spherePlane,
        sphereFrustum: sphereFrustum,
        sphereFrustumAccurate: sphereFrustumAccurate,
        sphereCapsule: sphereCapsule,
        aabbWithAABB: aabbWithAABB,
        aabbWithOBB: aabbWithOBB,
        aabbPlane: aabbPlane,
        aabbFrustum: aabbFrustum,
        aabbFrustumAccurate: aabbFrustumAccurate,
        obbWithOBB: obbWithOBB,
        obbPlane: obbPlane,
        obbFrustum: obbFrustum,
        obbFrustumAccurate: obbFrustumAccurate,
        obbPoint: obbPoint,
        obbCapsule: obbCapsule,
        aabbFrustumCompletelyInside: aabbFrustumCompletelyInside,
        capsuleWithCapsule: capsuleWithCapsule,
        resolve: function resolve(g1, g2, outPt) {
          if (outPt === void 0) {
            outPt = null;
          }

          var type1 = g1._type;
          var type2 = g2._type;
          var resolver = this[type1 | type2];
          return type1 < type2 ? resolver(g1, g2, outPt) : resolver(g2, g1, outPt);
        }
      };
      intersect[enums.SHAPE_RAY | enums.SHAPE_SPHERE] = raySphere;
      intersect[enums.SHAPE_RAY | enums.SHAPE_AABB] = rayAABB;
      intersect[enums.SHAPE_RAY | enums.SHAPE_OBB] = rayOBB;
      intersect[enums.SHAPE_RAY | enums.SHAPE_PLANE] = rayPlane;
      intersect[enums.SHAPE_RAY | enums.SHAPE_TRIANGLE] = rayTriangle;
      intersect[enums.SHAPE_RAY | enums.SHAPE_CAPSULE] = rayCapsule;
      intersect[enums.SHAPE_LINE | enums.SHAPE_SPHERE] = lineSphere;
      intersect[enums.SHAPE_LINE | enums.SHAPE_AABB] = lineAABB;
      intersect[enums.SHAPE_LINE | enums.SHAPE_OBB] = lineOBB;
      intersect[enums.SHAPE_LINE | enums.SHAPE_PLANE] = linePlane;
      intersect[enums.SHAPE_LINE | enums.SHAPE_TRIANGLE] = lineTriangle;
      intersect[enums.SHAPE_SPHERE] = sphereWithSphere;
      intersect[enums.SHAPE_SPHERE | enums.SHAPE_AABB] = sphereAABB;
      intersect[enums.SHAPE_SPHERE | enums.SHAPE_OBB] = sphereOBB;
      intersect[enums.SHAPE_SPHERE | enums.SHAPE_PLANE] = spherePlane;
      intersect[enums.SHAPE_SPHERE | enums.SHAPE_FRUSTUM] = sphereFrustum;
      intersect[enums.SHAPE_SPHERE | enums.SHAPE_FRUSTUM_ACCURATE] = sphereFrustumAccurate;
      intersect[enums.SHAPE_SPHERE | enums.SHAPE_CAPSULE] = sphereCapsule;
      intersect[enums.SHAPE_AABB] = aabbWithAABB;
      intersect[enums.SHAPE_AABB | enums.SHAPE_OBB] = aabbWithOBB;
      intersect[enums.SHAPE_AABB | enums.SHAPE_PLANE] = aabbPlane;
      intersect[enums.SHAPE_AABB | enums.SHAPE_FRUSTUM] = aabbFrustum;
      intersect[enums.SHAPE_AABB | enums.SHAPE_FRUSTUM_ACCURATE] = aabbFrustumAccurate;
      intersect[enums.SHAPE_OBB] = obbWithOBB;
      intersect[enums.SHAPE_OBB | enums.SHAPE_PLANE] = obbPlane;
      intersect[enums.SHAPE_OBB | enums.SHAPE_FRUSTUM] = obbFrustum;
      intersect[enums.SHAPE_OBB | enums.SHAPE_FRUSTUM_ACCURATE] = obbFrustumAccurate;
      intersect[enums.SHAPE_OBB | enums.SHAPE_CAPSULE] = obbCapsule;
      intersect[enums.SHAPE_CAPSULE] = capsuleWithCapsule;

      var _v3_tmp$2 = new Vec3();

      var _v3_tmp2$1 = new Vec3();

      var _m3_tmp$1 = new Mat3();

      var transform_extent_m3 = function transform_extent_m3(out, extent, m3) {
        _m3_tmp$1.m00 = Math.abs(m3.m00);
        _m3_tmp$1.m01 = Math.abs(m3.m01);
        _m3_tmp$1.m02 = Math.abs(m3.m02);
        _m3_tmp$1.m03 = Math.abs(m3.m03);
        _m3_tmp$1.m04 = Math.abs(m3.m04);
        _m3_tmp$1.m05 = Math.abs(m3.m05);
        _m3_tmp$1.m06 = Math.abs(m3.m06);
        _m3_tmp$1.m07 = Math.abs(m3.m07);
        _m3_tmp$1.m08 = Math.abs(m3.m08);
        Vec3.transformMat3(out, extent, _m3_tmp$1);
      };

      var OBB = function () {
        OBB.create = function create(cx, cy, cz, hw, hh, hl, ox_1, ox_2, ox_3, oy_1, oy_2, oy_3, oz_1, oz_2, oz_3) {
          return new OBB(cx, cy, cz, hw, hh, hl, ox_1, ox_2, ox_3, oy_1, oy_2, oy_3, oz_1, oz_2, oz_3);
        };

        OBB.clone = function clone(a) {
          return new OBB(a.center.x, a.center.y, a.center.z, a.halfExtents.x, a.halfExtents.y, a.halfExtents.z, a.orientation.m00, a.orientation.m01, a.orientation.m02, a.orientation.m03, a.orientation.m04, a.orientation.m05, a.orientation.m06, a.orientation.m07, a.orientation.m08);
        };

        OBB.copy = function copy(out, a) {
          Vec3.copy(out.center, a.center);
          Vec3.copy(out.halfExtents, a.halfExtents);
          Mat3.copy(out.orientation, a.orientation);
          return out;
        };

        OBB.fromPoints = function fromPoints(out, minPos, maxPos) {
          Vec3.multiplyScalar(out.center, Vec3.add(_v3_tmp$2, minPos, maxPos), 0.5);
          Vec3.multiplyScalar(out.halfExtents, Vec3.subtract(_v3_tmp2$1, maxPos, minPos), 0.5);
          Mat3.identity(out.orientation);
          return out;
        };

        OBB.set = function set(out, cx, cy, cz, hw, hh, hl, ox_1, ox_2, ox_3, oy_1, oy_2, oy_3, oz_1, oz_2, oz_3) {
          Vec3.set(out.center, cx, cy, cz);
          Vec3.set(out.halfExtents, hw, hh, hl);
          Mat3.set(out.orientation, ox_1, ox_2, ox_3, oy_1, oy_2, oy_3, oz_1, oz_2, oz_3);
          return out;
        };

        function OBB(cx, cy, cz, hw, hh, hl, ox_1, ox_2, ox_3, oy_1, oy_2, oy_3, oz_1, oz_2, oz_3) {
          if (cx === void 0) {
            cx = 0;
          }

          if (cy === void 0) {
            cy = 0;
          }

          if (cz === void 0) {
            cz = 0;
          }

          if (hw === void 0) {
            hw = 1;
          }

          if (hh === void 0) {
            hh = 1;
          }

          if (hl === void 0) {
            hl = 1;
          }

          if (ox_1 === void 0) {
            ox_1 = 1;
          }

          if (ox_2 === void 0) {
            ox_2 = 0;
          }

          if (ox_3 === void 0) {
            ox_3 = 0;
          }

          if (oy_1 === void 0) {
            oy_1 = 0;
          }

          if (oy_2 === void 0) {
            oy_2 = 1;
          }

          if (oy_3 === void 0) {
            oy_3 = 0;
          }

          if (oz_1 === void 0) {
            oz_1 = 0;
          }

          if (oz_2 === void 0) {
            oz_2 = 0;
          }

          if (oz_3 === void 0) {
            oz_3 = 1;
          }

          this.center = void 0;
          this.halfExtents = void 0;
          this.orientation = void 0;
          this._type = void 0;
          this._type = enums.SHAPE_OBB;
          this.center = new Vec3(cx, cy, cz);
          this.halfExtents = new Vec3(hw, hh, hl);
          this.orientation = new Mat3(ox_1, ox_2, ox_3, oy_1, oy_2, oy_3, oz_1, oz_2, oz_3);
        }

        var _proto = OBB.prototype;

        _proto.getBoundary = function getBoundary(minPos, maxPos) {
          transform_extent_m3(_v3_tmp$2, this.halfExtents, this.orientation);
          Vec3.subtract(minPos, this.center, _v3_tmp$2);
          Vec3.add(maxPos, this.center, _v3_tmp$2);
        };

        _proto.transform = function transform(m, pos, rot, scale, out) {
          Vec3.transformMat4(out.center, this.center, m);
          Mat3.fromQuat(out.orientation, rot);
          Vec3.multiply(out.halfExtents, this.halfExtents, scale);
        };

        _proto.translateAndRotate = function translateAndRotate(m, rot, out) {
          Vec3.transformMat4(out.center, this.center, m);
          Mat3.fromQuat(out.orientation, rot);
        };

        _proto.setScale = function setScale(scale, out) {
          Vec3.multiply(out.halfExtents, this.halfExtents, scale);
        };

        _createClass(OBB, [{
          key: "type",
          get: function get() {
            return this._type;
          }
        }]);

        return OBB;
      }();

      function binarySearch(array, value) {
        return binarySearchEpsilon(array, value, 0);
      }
      function binarySearchEpsilon(array, value, EPSILON) {
        if (EPSILON === void 0) {
          EPSILON = 1e-6;
        }

        var low = 0;
        var high = array.length - 1;
        var middle = high >>> 1;

        for (; low <= high; middle = low + high >>> 1) {
          var test = array[middle];

          if (test > value + EPSILON) {
            high = middle - 1;
          } else if (test < value - EPSILON) {
            low = middle + 1;
          } else {
            return middle;
          }
        }

        return ~low;
      }
      function binarySearchBy(array, value, lessThan) {
        var low = 0;
        var high = array.length - 1;
        var middle = high >>> 1;

        for (; low <= high; middle = low + high >>> 1) {
          var test = array[middle];

          if (lessThan(test, value) < 0) {
            high = middle - 1;
          } else if (lessThan(test, value) > 0) {
            low = middle + 1;
          } else {
            return middle;
          }
        }

        return ~low;
      }

      var _Symbol$iterator;
      _Symbol$iterator = Symbol.iterator;
      var KeyframeCurve = function () {
        function KeyframeCurve() {
          this._times = [];
          this._values = [];
        }

        var _proto = KeyframeCurve.prototype;

        _proto[_Symbol$iterator] = function () {
          var _this = this;

          var index = 0;
          return {
            next: function next() {
              if (index >= _this._times.length) {
                return {
                  done: true,
                  value: undefined
                };
              } else {
                var value = [_this._times[index], _this._values[index]];
                ++index;
                return {
                  done: false,
                  value: value
                };
              }
            }
          };
        };

        _proto.keyframes = function keyframes() {
          return this;
        };

        _proto.times = function times() {
          return this._times;
        };

        _proto.values = function values() {
          return this._values;
        };

        _proto.getKeyframeTime = function getKeyframeTime(index) {
          return this._times[index];
        };

        _proto.getKeyframeValue = function getKeyframeValue(index) {
          return this._values[index];
        };

        _proto.addKeyFrame = function addKeyFrame(time, keyframeValue) {
          return this._insertNewKeyframe(time, keyframeValue);
        };

        _proto.removeKeyframe = function removeKeyframe(index) {
          this._times.splice(index, 1);

          this._values.splice(index, 1);
        };

        _proto.indexOfKeyframe = function indexOfKeyframe(time) {
          return binarySearchEpsilon(this._times, time);
        };

        _proto.updateTime = function updateTime(index, time) {
          var value = this._values[index];
          this.removeKeyframe(index);

          this._insertNewKeyframe(time, value);
        };

        _proto.assignSorted = function assignSorted(times, values) {
          if (values !== undefined) {
            assertIsTrue(Array.isArray(times));
            this.setKeyframes(times.slice(), values.slice());
          } else {
            var _keyframes = Array.from(times);

            this.setKeyframes(_keyframes.map(function (_ref) {
              var time = _ref[0];
              return time;
            }), _keyframes.map(function (_ref2) {
              var value = _ref2[1];
              return value;
            }));
          }
        };

        _proto.clear = function clear() {
          this._times.length = 0;
          this._values.length = 0;
        };

        _proto.searchKeyframe = function searchKeyframe(time) {
          return binarySearchEpsilon(this._times, time);
        };

        _proto.setKeyframes = function setKeyframes(times, values) {
          assertIsTrue(times.length === values.length);
          assertIsTrue(isSorted(times));
          this._times = times;
          this._values = values;
        };

        _proto._insertNewKeyframe = function _insertNewKeyframe(time, value) {
          var times = this._times;
          var values = this._values;
          var nFrames = times.length;
          var index = binarySearchEpsilon(times, time);

          if (index >= 0) {
            return index;
          }

          var iNext = ~index;

          if (iNext === 0) {
            times.unshift(time);
            values.unshift(value);
          } else if (iNext === nFrames) {
            times.push(time);
            values.push(value);
          } else {
            assertIsTrue(nFrames > 1);
            times.splice(iNext - 1, 0, time);
            values.splice(iNext - 1, 0, value);
          }

          return iNext;
        };

        _createClass(KeyframeCurve, [{
          key: "keyFramesCount",
          get: function get() {
            return this._times.length;
          }
        }, {
          key: "rangeMin",
          get: function get() {
            return this._times[0];
          }
        }, {
          key: "rangeMax",
          get: function get() {
            return this._times[this._values.length - 1];
          }
        }]);

        return KeyframeCurve;
      }();
      CCClass.fastDefine('cc.KeyframeCurve', KeyframeCurve, {
        _times: [],
        _values: []
      });

      function isSorted(values) {
        return values.every(function (value, index, array) {
          return index === 0 || value > array[index - 1] || approx(value, array[index - 1], 1e-6);
        });
      }

      var RealInterpolationMode;

      (function (RealInterpolationMode) {
        RealInterpolationMode[RealInterpolationMode["LINEAR"] = 0] = "LINEAR";
        RealInterpolationMode[RealInterpolationMode["CONSTANT"] = 1] = "CONSTANT";
        RealInterpolationMode[RealInterpolationMode["CUBIC"] = 2] = "CUBIC";
      })(RealInterpolationMode || (RealInterpolationMode = exports('RealInterpolationMode', {})));

      var ExtrapolationMode;

      (function (ExtrapolationMode) {
        ExtrapolationMode[ExtrapolationMode["LINEAR"] = 0] = "LINEAR";
        ExtrapolationMode[ExtrapolationMode["CLAMP"] = 1] = "CLAMP";
        ExtrapolationMode[ExtrapolationMode["LOOP"] = 2] = "LOOP";
        ExtrapolationMode[ExtrapolationMode["PING_PONG"] = 3] = "PING_PONG";
      })(ExtrapolationMode || (ExtrapolationMode = exports('ExtrapolationMode', {})));

      var TangentWeightMode;

      (function (TangentWeightMode) {
        TangentWeightMode[TangentWeightMode["NONE"] = 0] = "NONE";
        TangentWeightMode[TangentWeightMode["LEFT"] = 1] = "LEFT";
        TangentWeightMode[TangentWeightMode["RIGHT"] = 2] = "RIGHT";
        TangentWeightMode[TangentWeightMode["BOTH"] = 3] = "BOTH";
      })(TangentWeightMode || (TangentWeightMode = exports('TangentWeightMode', {})));

      function solveCubic(coeff0, coeff1, coeff2, coeff3, solutions) {
        var a = coeff2 / coeff3;
        var b = coeff1 / coeff3;
        var c = coeff0 / coeff3;
        var sqrA = a * a;
        var p = 1.0 / 3.0 * (-1.0 / 3 * sqrA + b);
        var q = 1.0 / 2.0 * (2.0 / 27.0 * a * sqrA - 1.0 / 3 * a * b + c);
        var cubicP = p * p * p;
        var d = q * q + cubicP;
        var nSolutions = 0;

        if (isZero(d)) {
          if (isZero(q)) {
            solutions[0] = 0;
            return 1;
          } else {
            var u = Math.cbrt(-q);
            solutions[0] = 2 * u;
            solutions[1] = -u;
            return 2;
          }
        } else if (d < 0) {
          var phi = 1.0 / 3 * Math.acos(-q / Math.sqrt(-cubicP));
          var t = 2 * Math.sqrt(-p);
          solutions[0] = t * Math.cos(phi);
          solutions[1] = -t * Math.cos(phi + Math.PI / 3);
          solutions[2] = -t * Math.cos(phi - Math.PI / 3);
          nSolutions = 3;
        } else {
          var sqrtD = Math.sqrt(d);

          var _u = Math.cbrt(sqrtD - q);

          var v = -Math.cbrt(sqrtD + q);
          solutions[0] = _u + v;
          nSolutions = 1;
        }

        var sub = 1.0 / 3 * a;

        for (var i = 0; i < nSolutions; ++i) {
          solutions[i] -= sub;
        }

        return nSolutions;
      }
      var EQN_EPS = 1e-9;

      function isZero(x) {
        return x > -EQN_EPS && x < EQN_EPS;
      }

      function applyDecoratedInitializer(target, property, decorators, initializer) {
        return decorators.slice().reverse().reduce(function (decoratedInitializer, decorator) {
          return decorator(target, property, decoratedInitializer) || decoratedInitializer;
        }, initializer);
      }

      var emptyDecorator = function emptyDecorator() {};
      var emptyDecoratorFn = function emptyDecoratorFn() {
        return emptyDecorator;
      };
      var emptySmartClassDecorator = makeSmartClassDecorator(function () {});
      function makeSmartClassDecorator(decorate) {
        return proxyFn;

        function proxyFn(target) {
          if (typeof target === 'function') {
            return decorate(target);
          } else {
            return function (constructor) {
              return decorate(constructor, target);
            };
          }
        }
      }

      function writeEditorClassProperty(constructor, propertyName, value) {
        var cache = getClassCache(constructor);

        if (cache) {
          var proto = getSubDict(cache, 'proto');
          getSubDict(proto, 'editor')[propertyName] = value;
        }
      }

      function makeEditorClassDecoratorFn(propertyName) {
        return function (value) {
          return function (constructor) {
            writeEditorClassProperty(constructor, propertyName, value);
          };
        };
      }
      var CACHE_KEY = '__ccclassCache__';
      function getClassCache(ctor, decoratorName) {

        return getSubDict(ctor, CACHE_KEY);
      }
      function getSubDict(obj, key) {
        return obj[key] || (obj[key] = {});
      }

      var ccclass = makeSmartClassDecorator(function (constructor, name) {
        var base = getSuper(constructor);

        if (base === Object) {
          base = null;
        }

        var proto = {
          name: name,
          "extends": base,
          ctor: constructor
        };
        var cache = constructor[CACHE_KEY];

        if (cache) {
          var decoratedProto = cache.proto;

          if (decoratedProto) {
            mixin(proto, decoratedProto);
          }

          constructor[CACHE_KEY] = undefined;
        }

        var res = CCClass(proto);

        return res;
      });

      var requireComponent = makeEditorClassDecoratorFn('requireComponent');
      var executionOrder = makeEditorClassDecoratorFn('executionOrder');
      var disallowMultiple =  emptySmartClassDecorator;
      var allowReplicated = function allowReplicated(ctor) {
        CCClass.Attr.setClassAttr(ctor, 'replicated', 'visible', true);
      };

      function property(target, propertyKey, descriptorOrInitializer) {
        var options = null;

        function normalized(target, propertyKey, descriptorOrInitializer) {
          var classStash = getOrCreateClassStash(target);
          var propertyStash = getOrCreateEmptyPropertyStash(target, propertyKey);
          var classConstructor = target.constructor;
          mergePropertyOptions(classStash, propertyStash, classConstructor, propertyKey, options, descriptorOrInitializer);
        }

        if (target === undefined) {
          return property({
            type: undefined
          });
        } else if (typeof propertyKey === 'undefined') {
          options = target;
          return normalized;
        } else {
          normalized(target, propertyKey, descriptorOrInitializer);
          return undefined;
        }
      }

      function getDefaultFromInitializer(initializer) {
        var value;

        try {
          value = initializer();
        } catch (e) {
          return initializer;
        }

        if (typeof value !== 'object' || value === null) {
          return value;
        } else {
          return initializer;
        }
      }

      function extractActualDefaultValues(classConstructor) {
        var dummyObj;

        try {
          dummyObj = new classConstructor();
        } catch (e) {

          return {};
        }

        return dummyObj;
      }

      function getOrCreateClassStash(target) {
        var cache = getClassCache(target.constructor);
        return cache;
      }

      function getOrCreateEmptyPropertyStash(target, propertyKey) {
        var _ref, _properties$_ref;

        var classStash = getClassCache(target.constructor);
        var ccclassProto = getSubDict(classStash, 'proto');
        var properties = getSubDict(ccclassProto, 'properties');
        var propertyStash = (_properties$_ref = properties[_ref = propertyKey]) !== null && _properties$_ref !== void 0 ? _properties$_ref : properties[_ref] = {};
        return propertyStash;
      }

      function getOrCreatePropertyStash(target, propertyKey, descriptorOrInitializer) {
        var _ref2, _properties$_ref2;

        var classStash = getClassCache(target.constructor);
        var ccclassProto = getSubDict(classStash, 'proto');
        var properties = getSubDict(ccclassProto, 'properties');
        var propertyStash = (_properties$_ref2 = properties[_ref2 = propertyKey]) !== null && _properties$_ref2 !== void 0 ? _properties$_ref2 : properties[_ref2] = {};
        propertyStash.__internalFlags |= PropertyStashInternalFlag.STANDALONE;

        if (descriptorOrInitializer && typeof descriptorOrInitializer !== 'function' && (descriptorOrInitializer.get || descriptorOrInitializer.set)) {
          if (descriptorOrInitializer.get) {
            propertyStash.get = descriptorOrInitializer.get;
          }

          if (descriptorOrInitializer.set) {
            propertyStash.set = descriptorOrInitializer.set;
          }
        } else {
          setDefaultValue(classStash, propertyStash, target.constructor, propertyKey, descriptorOrInitializer);
        }

        return propertyStash;
      }

      function mergePropertyOptions(cache, propertyStash, ctor, propertyKey, options, descriptorOrInitializer) {
        var fullOptions;
        var isGetset = descriptorOrInitializer && typeof descriptorOrInitializer !== 'function' && (descriptorOrInitializer.get || descriptorOrInitializer.set);

        if (options) {
          fullOptions = getFullFormOfProperty(options, isGetset);
        }

        var propertyRecord = mixin(propertyStash, fullOptions || options || {});

        if (isGetset) {

          if (descriptorOrInitializer.get) {
            propertyRecord.get = descriptorOrInitializer.get;
          }

          if (descriptorOrInitializer.set) {
            propertyRecord.set = descriptorOrInitializer.set;
          }
        } else {

          setDefaultValue(cache, propertyRecord, ctor, propertyKey, descriptorOrInitializer);
        }
      }

      function setDefaultValue(classStash, propertyStash, classConstructor, propertyKey, descriptorOrInitializer) {
        if (descriptorOrInitializer !== undefined) {
          if (typeof descriptorOrInitializer === 'function') {
            propertyStash["default"] = getDefaultFromInitializer(descriptorOrInitializer);
          } else if (descriptorOrInitializer === null) ; else if (descriptorOrInitializer.initializer) {
            propertyStash["default"] = getDefaultFromInitializer(descriptorOrInitializer.initializer);
          }
        } else {
          var actualDefaultValues = classStash["default"] || (classStash["default"] = extractActualDefaultValues(classConstructor));

          if (actualDefaultValues.hasOwnProperty(propertyKey)) {
            propertyStash["default"] = actualDefaultValues[propertyKey];
          }
        }
      }

      var sMetadataTag = Symbol('cc:SerializationMetadata');
      function getSerializationMetadata(constructor) {
        return constructor[sMetadataTag];
      }
      function getOrCreateSerializationMetadata(constructor) {
        var _ref, _ref$sMetadataTag;

        return (_ref$sMetadataTag = (_ref = constructor)[sMetadataTag]) !== null && _ref$sMetadataTag !== void 0 ? _ref$sMetadataTag : _ref[sMetadataTag] = {};
      }

      var serializable = exports('serializable', function serializable(target, propertyKey, descriptorOrInitializer) {
        var propertyStash = getOrCreatePropertyStash(target, propertyKey, descriptorOrInitializer);
        setImplicitSerializable(propertyStash);
      });
      function formerlySerializedAs(name) {
        return function (target, propertyKey, descriptorOrInitializer) {
          var propertyStash = getOrCreatePropertyStash(target, propertyKey, descriptorOrInitializer);
          propertyStash.formerlySerializedAs = name;
          setImplicitSerializable(propertyStash);
        };
      }
      var editorOnly = function editorOnly(target, propertyKey, descriptorOrInitializer) {
        var propertyStash = getOrCreatePropertyStash(target, propertyKey, descriptorOrInitializer);
        propertyStash.editorOnly = true;
        setImplicitSerializable(propertyStash);
      };

      function setImplicitSerializable(propertyStash) {
        propertyStash.__internalFlags |= PropertyStashInternalFlag.IMPLICIT_SERIALIZABLE;
      }

      var uniquelyReferenced =  emptyDecorator ;

      var executeInEditMode =  emptySmartClassDecorator;
      var menu =  emptyDecoratorFn;
      var playOnFocus =  emptySmartClassDecorator;
      var inspector =  emptyDecoratorFn;
      var icon =  emptyDecoratorFn;
      var help =  emptyDecoratorFn;
      var editable = exports('editable',  emptyDecorator );
      var visible = exports('visible',  emptyDecoratorFn );
      var displayName = exports('displayName',  emptyDecoratorFn );
      var tooltip = exports('tooltip',  emptyDecoratorFn );
      var range = exports('range',  emptyDecoratorFn );
      var rangeStep = exports('rangeStep',  emptyDecoratorFn );
      var slide = exports('slide',  emptyDecorator );
      var displayOrder = exports('displayOrder',  emptyDecoratorFn );
      var disallowAnimation = exports('disallowAnimation',  emptyDecorator );

      var integer = type(CCInteger);

      var _float = type(CCFloat);

      var _boolean = type(CCBoolean);
      var string = type(CCString);
      function type(type) {
        return property({
          type: type
        });
      }

      var override = exports('override', function override(target, propertyKey, descriptorOrInitializer) {
        var propertyStash = getOrCreatePropertyStash(target, propertyKey, descriptorOrInitializer);
        propertyStash.override = true;
      });

      var editorExtrasTag = exports('editorExtrasTag', '__editorExtras__');

      var Empty = function Empty() {};

      var EditorExtendable = exports('EditorExtendable', editorExtendableInternal());
      assertIsTrue(editorExtrasTag === '__editorExtras__', 'editorExtrasTag needs to be updated.');

      function editorExtendableInternal(Base, className) {
        {
          return Base !== null && Base !== void 0 ? Base : Empty;
        }
      }

      var _decorator = /*#__PURE__*/Object.freeze({
        __proto__: null,
        uniquelyReferenced: uniquelyReferenced,
        ccclass: ccclass,
        property: property,
        requireComponent: requireComponent,
        executionOrder: executionOrder,
        disallowMultiple: disallowMultiple,
        allowReplicated: allowReplicated,
        executeInEditMode: executeInEditMode,
        menu: menu,
        playOnFocus: playOnFocus,
        inspector: inspector,
        icon: icon,
        help: help,
        type: type,
        integer: integer,
        float: _float,
        boolean: _boolean,
        string: string,
        editable: editable,
        tooltip: tooltip,
        visible: visible,
        displayName: displayName,
        displayOrder: displayOrder,
        range: range,
        rangeStep: rangeStep,
        slide: slide,
        disallowAnimation: disallowAnimation,
        override: override,
        formerlySerializedAs: formerlySerializedAs,
        serializable: serializable
      });
      exports('_decorator', _decorator);

      var _CCClass$fastDefine;
      var Destroyed = 1 << 0;
      var ToDestroy = 1 << 2;
      var DontSave = 1 << 3;
      var EditorOnly = 1 << 4;
      var Dirty = 1 << 5;
      var DontDestroy = 1 << 6;
      var Destroying = 1 << 7;
      var Deactivating = 1 << 8;
      var LockedInEditor = 1 << 9;
      var HideInHierarchy = 1 << 10;
      var IsOnEnableCalled = 1 << 11;
      var IsEditorOnEnableCalled = 1 << 12;
      var IsPreloadStarted = 1 << 13;
      var IsOnLoadCalled = 1 << 14;
      var IsOnLoadStarted = 1 << 15;
      var IsStartCalled = 1 << 16;
      var IsRotationLocked = 1 << 17;
      var IsScaleLocked = 1 << 18;
      var IsAnchorLocked = 1 << 19;
      var IsSizeLocked = 1 << 20;
      var IsPositionLocked = 1 << 21;
      var IsReplicated = 1 << 22;
      var PersistentMask = ~(ToDestroy | Dirty | Destroying | DontDestroy | Deactivating | IsPreloadStarted | IsOnLoadStarted | IsOnLoadCalled | IsStartCalled | IsOnEnableCalled | IsEditorOnEnableCalled | IsRotationLocked | IsScaleLocked | IsAnchorLocked | IsSizeLocked | IsPositionLocked);
      var AllHideMasks = DontSave | EditorOnly | LockedInEditor | HideInHierarchy;
      var objectsToDestroy = [];

      function compileDestruct(obj, ctor) {
        var shouldSkipId = obj instanceof legacyCC.Node || obj instanceof legacyCC.Component;
        var idToSkip = shouldSkipId ? '_id' : null;
        var key;
        var propsToReset = {};

        for (key in obj) {
          if (obj.hasOwnProperty(key)) {
            if (key === idToSkip) {
              continue;
            }

            switch (typeof obj[key]) {
              case 'string':
                propsToReset[key] = '';
                break;

              case 'object':
              case 'function':
                propsToReset[key] = null;
                break;
            }
          }
        }

        if (CCClass._isCCClass(ctor)) {
          var attrs = legacyCC.Class.Attr.getClassAttrs(ctor);
          var propList = ctor.__props__;

          for (var i = 0; i < propList.length; i++) {
            key = propList[i];
            var attrKey = "" + key;

            if (attrKey in attrs) {
              if (shouldSkipId && key === '_id') {
                continue;
              }

              switch (typeof attrs[attrKey]) {
                case 'string':
                  propsToReset[key] = '';
                  break;

                case 'object':
                case 'function':
                  propsToReset[key] = null;
                  break;

                case 'undefined':
                  propsToReset[key] = undefined;
                  break;
              }
            }
          }
        }

        {
          var func = '';

          for (key in propsToReset) {
            var statement = void 0;

            if (CCClass.IDENTIFIER_RE.test(key)) {
              statement = "o." + key + "=";
            } else {
              statement = "o[" + CCClass.escapeForJS(key) + "]=";
            }

            var val = propsToReset[key];

            if (val === '') {
              val = '""';
            }

            func += statement + val + ";\n";
          }

          return Function('o', func);
        }
      }

      var CCObject = exports('CCObject', function () {
        CCObject._deferredDestroy = function _deferredDestroy() {
          var deleteCount = objectsToDestroy.length;

          for (var i = 0; i < deleteCount; ++i) {
            var obj = objectsToDestroy[i];

            if (!(obj._objFlags & Destroyed)) {
              obj._destroyImmediate();
            }
          }

          if (deleteCount === objectsToDestroy.length) {
            objectsToDestroy.length = 0;
          } else {
            objectsToDestroy.splice(0, deleteCount);
          }
        };

        function CCObject(name) {
          if (name === void 0) {
            name = '';
          }

          this._objFlags = void 0;
          this._name = void 0;
          this._name = name;
          this._objFlags = 0;
        }

        var _proto = CCObject.prototype;

        _proto.destroy = function destroy() {
          if (this._objFlags & Destroyed) {
            warnID(5000);
            return false;
          }

          if (this._objFlags & ToDestroy) {
            return false;
          }

          this._objFlags |= ToDestroy;
          objectsToDestroy.push(this);

          return true;
        };

        _proto._destruct = function _destruct() {
          var ctor = this.constructor;
          var destruct = ctor.__destruct__;

          if (!destruct) {
            destruct = compileDestruct(this, ctor);
            value(ctor, '__destruct__', destruct, true);
          }

          destruct(this);
        };

        _proto._destroyImmediate = function _destroyImmediate() {
          if (this._objFlags & Destroyed) {
            errorID(5000);
            return;
          }

          if (this._onPreDestroy) {
            this._onPreDestroy();
          }

          {

            this._destruct();
          }

          this._objFlags |= Destroyed;
        };

        _createClass(CCObject, [{
          key: "name",
          get: function get() {
            return this._name;
          },
          set: function set(value) {
            this._name = value;
          }
        }, {
          key: "hideFlags",
          get: function get() {
            return this._objFlags & CCObject.Flags.AllHideMasks;
          },
          set: function set(hideFlags) {
            var flags = hideFlags & CCObject.Flags.AllHideMasks;
            this._objFlags = this._objFlags & ~CCObject.Flags.AllHideMasks | flags;
          }
        }, {
          key: "replicated",
          get: function get() {
            return !!(this._objFlags & IsReplicated);
          },
          set: function set(value) {
            if (value) {
              this._objFlags |= IsReplicated;
            } else {
              this._objFlags &= ~IsReplicated;
            }
          }
        }, {
          key: "isValid",
          get: function get() {
            return !(this._objFlags & Destroyed);
          }
        }]);

        return CCObject;
      }());

      var prototype = CCObject.prototype;

      prototype._deserialize = null;
      prototype._onPreDestroy = null;
      CCClass.fastDefine('cc.Object', CCObject, (_CCClass$fastDefine = {
        _name: '',
        _objFlags: 0
      }, _CCClass$fastDefine[editorExtrasTag] = {}, _CCClass$fastDefine));
      CCClass.Attr.setClassAttr(CCObject, editorExtrasTag, 'editorOnly', true);
      CCClass.Attr.setClassAttr(CCObject, 'replicated', 'visible', false);
      value(CCObject, 'Flags', {
        Destroyed: Destroyed,
        DontSave: DontSave,
        EditorOnly: EditorOnly,
        Dirty: Dirty,
        DontDestroy: DontDestroy,
        PersistentMask: PersistentMask,
        Destroying: Destroying,
        Deactivating: Deactivating,
        LockedInEditor: LockedInEditor,
        HideInHierarchy: HideInHierarchy,
        AllHideMasks: AllHideMasks,
        IsPreloadStarted: IsPreloadStarted,
        IsOnLoadStarted: IsOnLoadStarted,
        IsOnLoadCalled: IsOnLoadCalled,
        IsOnEnableCalled: IsOnEnableCalled,
        IsStartCalled: IsStartCalled,
        IsEditorOnEnableCalled: IsEditorOnEnableCalled,
        IsPositionLocked: IsPositionLocked,
        IsRotationLocked: IsRotationLocked,
        IsScaleLocked: IsScaleLocked,
        IsAnchorLocked: IsAnchorLocked,
        IsSizeLocked: IsSizeLocked
      });
      function isCCObject(object) {
        return object instanceof CCObject;
      }
      function isValid(value, strictMode) {
        if (typeof value === 'object') {
          return !!value && !(value._objFlags & (strictMode ? Destroyed | ToDestroy : Destroyed));
        } else {
          return typeof value !== 'undefined';
        }
      }
      legacyCC.isValid = isValid;

      legacyCC.Object = CCObject;

      var _dec, _class, _class2, _initializer, _initializer2, _initializer3, _initializer4, _class3, _temp, _BuiltinElementTypeTr;
      var StorageUnit;

      (function (StorageUnit) {
        StorageUnit[StorageUnit["Uint8"] = 0] = "Uint8";
        StorageUnit[StorageUnit["Uint16"] = 1] = "Uint16";
        StorageUnit[StorageUnit["Uint32"] = 2] = "Uint32";
        StorageUnit[StorageUnit["Int8"] = 3] = "Int8";
        StorageUnit[StorageUnit["Int16"] = 4] = "Int16";
        StorageUnit[StorageUnit["Int32"] = 5] = "Int32";
        StorageUnit[StorageUnit["Float32"] = 6] = "Float32";
        StorageUnit[StorageUnit["Float64"] = 7] = "Float64";
      })(StorageUnit || (StorageUnit = {}));

      var ElementType;

      (function (ElementType) {
        ElementType[ElementType["Scalar"] = 0] = "Scalar";
        ElementType[ElementType["Vec2"] = 1] = "Vec2";
        ElementType[ElementType["Vec3"] = 2] = "Vec3";
        ElementType[ElementType["Vec4"] = 3] = "Vec4";
        ElementType[ElementType["Quat"] = 4] = "Quat";
        ElementType[ElementType["Mat4"] = 5] = "Mat4";
      })(ElementType || (ElementType = {}));

      var elementTypeBits = 3;
      function combineStorageUnitElementType(unit, elementType) {
        return (elementType << elementTypeBits) + unit;
      }
      function extractStorageUnitElementType(combined) {
        return {
          storageUnit: ~(-1 << elementTypeBits) & combined,
          elementType: combined >> elementTypeBits
        };
      }
      var CompactValueTypeArray = exports('CompactValueTypeArray', (_dec = ccclass('cc.CompactValueTypeArray'), _dec(_class = (_class2 = (_temp = _class3 = function () {
        function CompactValueTypeArray() {
          this._byteOffset = _initializer && _initializer();
          this._unitCount = _initializer2 && _initializer2();
          this._unitElement = _initializer3 && _initializer3();
          this._length = _initializer4 && _initializer4();
        }

        CompactValueTypeArray.lengthFor = function lengthFor(values, elementType, unit) {
          var elementTraits = getElementTraits(elementType);
          return elementTraits.requiredUnits * values.length * getStorageConstructor(unit).BYTES_PER_ELEMENT;
        };

        CompactValueTypeArray.compress = function compress(values, elementType, unit, arrayBuffer, byteOffset, presumedByteOffset) {
          var elementTraits = getElementTraits(elementType);
          var storageConstructor = getStorageConstructor(unit);
          var unitCount = elementTraits.requiredUnits * values.length;
          var storage = new storageConstructor(arrayBuffer, byteOffset, unitCount);

          for (var i = 0; i < values.length; ++i) {
            elementTraits.compress(storage, i, values[i]);
          }

          var result = new CompactValueTypeArray();
          result._unitElement = combineStorageUnitElementType(unit, elementType);
          result._byteOffset = presumedByteOffset;
          result._unitCount = unitCount;
          result._length = values.length;
          return result;
        };

        var _proto = CompactValueTypeArray.prototype;

        _proto.decompress = function decompress(arrayBuffer) {
          var _extractStorageUnitEl = extractStorageUnitElementType(this._unitElement),
              storageUnit = _extractStorageUnitEl.storageUnit,
              elementType = _extractStorageUnitEl.elementType;

          var elementTraits = getElementTraits(elementType);
          var storageConstructor = getStorageConstructor(storageUnit);
          var storage = new storageConstructor(arrayBuffer, this._byteOffset, this._unitCount);
          var result = new Array(this._length);

          for (var i = 0; i < this._length; ++i) {
            result[i] = elementTraits.decompress(storage, i);
          }

          return result;
        };

        return CompactValueTypeArray;
      }(), _class3.StorageUnit = StorageUnit, _class3.ElementType = ElementType, _temp), (_initializer = applyDecoratedInitializer(_class2.prototype, "_byteOffset", [serializable], function () {
        return 0;
      }), _initializer2 = applyDecoratedInitializer(_class2.prototype, "_unitCount", [serializable], function () {
        return 0;
      }), _initializer3 = applyDecoratedInitializer(_class2.prototype, "_unitElement", [serializable], function () {
        return combineStorageUnitElementType(StorageUnit.Uint8, ElementType.Scalar);
      }), _initializer4 = applyDecoratedInitializer(_class2.prototype, "_length", [serializable], function () {
        return 0;
      })), _class2)) || _class));

      function getElementTraits(elementType) {
        return BuiltinElementTypeTraits[elementType];
      }

      function getStorageConstructor(unit) {
        switch (unit) {
          case StorageUnit.Uint8:
            return Uint8Array;

          case StorageUnit.Uint16:
            return Uint16Array;

          case StorageUnit.Uint32:
            return Uint32Array;

          case StorageUnit.Int8:
            return Int8Array;

          case StorageUnit.Int16:
            return Int16Array;

          case StorageUnit.Int32:
            return Int32Array;

          case StorageUnit.Float32:
            return Float32Array;

          case StorageUnit.Float64:
            return Float64Array;
        }
      }

      var BuiltinElementTypeTraits = (_BuiltinElementTypeTr = {}, _BuiltinElementTypeTr[ElementType.Scalar] = {
        requiredUnits: 1,
        compress: function compress(storage, index, value) {
          storage[index] = value;
        },
        decompress: function decompress(storage, index) {
          return storage[index];
        }
      }, _BuiltinElementTypeTr[ElementType.Vec2] = {
        requiredUnits: 2,
        compress: function compress(storage, index, value) {
          storage[index * 2] = value.x;
          storage[index * 2 + 1] = value.y;
        },
        decompress: function decompress(storage, index) {
          return new Vec3(storage[index * 2], storage[index * 2 + 1]);
        }
      }, _BuiltinElementTypeTr[ElementType.Vec3] = {
        requiredUnits: 3,
        compress: function compress(storage, index, value) {
          storage[index * 3] = value.x;
          storage[index * 3 + 1] = value.y;
          storage[index * 3 + 2] = value.z;
        },
        decompress: function decompress(storage, index) {
          return new Vec3(storage[index * 3], storage[index * 3 + 1], storage[index * 3 + 2]);
        }
      }, _BuiltinElementTypeTr[ElementType.Vec4] = {
        requiredUnits: 4,
        compress: function compress(storage, index, value) {
          storage[index * 4] = value.x;
          storage[index * 4 + 1] = value.y;
          storage[index * 4 + 2] = value.z;
          storage[index * 4 + 3] = value.w;
        },
        decompress: function decompress(storage, index) {
          return new Vec4(storage[index * 4], storage[index * 4 + 1], storage[index * 4 + 2], storage[index * 4 + 3]);
        }
      }, _BuiltinElementTypeTr[ElementType.Quat] = {
        requiredUnits: 4,
        compress: function compress(storage, index, value) {
          storage[index * 4] = value.x;
          storage[index * 4 + 1] = value.y;
          storage[index * 4 + 2] = value.z;
          storage[index * 4 + 3] = value.w;
        },
        decompress: function decompress(storage, index) {
          return new Quat(storage[index * 4], storage[index * 4 + 1], storage[index * 4 + 2], storage[index * 4 + 3]);
        }
      }, _BuiltinElementTypeTr[ElementType.Mat4] = {
        requiredUnits: 16,
        compress: function compress(storage, index, value) {
          Mat4.toArray(storage, value, index * 16);
        },
        decompress: function decompress(storage, index) {
          return Mat4.fromArray(new Mat4(), storage, index * 16);
        }
      }, _BuiltinElementTypeTr);

      var serializeTag = exports('serializeTag', Symbol('[[Serialize]]'));
      var deserializeTag = exports('deserializeTag', Symbol('[[Deserialize]]'));

      legacyCC._decorator = _decorator;

      function constant() {
        return 0;
      }
      function linear(k) {
        return k;
      }
      function quadIn(k) {
        return k * k;
      }
      function quadOut(k) {
        return k * (2 - k);
      }
      function quadInOut(k) {
        k *= 2;

        if (k < 1) {
          return 0.5 * k * k;
        }

        return -0.5 * (--k * (k - 2) - 1);
      }
      function cubicIn(k) {
        return k * k * k;
      }
      function cubicOut(k) {
        return --k * k * k + 1;
      }
      function cubicInOut(k) {
        k *= 2;

        if (k < 1) {
          return 0.5 * k * k * k;
        }

        return 0.5 * ((k -= 2) * k * k + 2);
      }
      function quartIn(k) {
        return k * k * k * k;
      }
      function quartOut(k) {
        return 1 - --k * k * k * k;
      }
      function quartInOut(k) {
        k *= 2;

        if (k < 1) {
          return 0.5 * k * k * k * k;
        }

        return -0.5 * ((k -= 2) * k * k * k - 2);
      }
      function quintIn(k) {
        return k * k * k * k * k;
      }
      function quintOut(k) {
        return --k * k * k * k * k + 1;
      }
      function quintInOut(k) {
        k *= 2;

        if (k < 1) {
          return 0.5 * k * k * k * k * k;
        }

        return 0.5 * ((k -= 2) * k * k * k * k + 2);
      }
      function sineIn(k) {
        if (k === 1) {
          return 1;
        }

        return 1 - Math.cos(k * Math.PI / 2);
      }
      function sineOut(k) {
        return Math.sin(k * Math.PI / 2);
      }
      function sineInOut(k) {
        return 0.5 * (1 - Math.cos(Math.PI * k));
      }
      function expoIn(k) {
        return k === 0 ? 0 : Math.pow(1024, k - 1);
      }
      function expoOut(k) {
        return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);
      }
      function expoInOut(k) {
        if (k === 0) {
          return 0;
        }

        if (k === 1) {
          return 1;
        }

        k *= 2;

        if (k < 1) {
          return 0.5 * Math.pow(1024, k - 1);
        }

        return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);
      }
      function circIn(k) {
        return 1 - Math.sqrt(1 - k * k);
      }
      function circOut(k) {
        return Math.sqrt(1 - --k * k);
      }
      function circInOut(k) {
        k *= 2;

        if (k < 1) {
          return -0.5 * (Math.sqrt(1 - k * k) - 1);
        }

        return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);
      }
      function elasticIn(k) {
        var s;
        var a = 0.1;
        var p = 0.4;

        if (k === 0) {
          return 0;
        }

        if (k === 1) {
          return 1;
        }

        if (!a || a < 1) {
          a = 1;
          s = p / 4;
        } else {
          s = p * Math.asin(1 / a) / (2 * Math.PI);
        }

        return -(a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
      }
      function elasticOut(k) {
        var s;
        var a = 0.1;
        var p = 0.4;

        if (k === 0) {
          return 0;
        }

        if (k === 1) {
          return 1;
        }

        if (!a || a < 1) {
          a = 1;
          s = p / 4;
        } else {
          s = p * Math.asin(1 / a) / (2 * Math.PI);
        }

        return a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) + 1;
      }
      function elasticInOut(k) {
        var s;
        var a = 0.1;
        var p = 0.4;

        if (k === 0) {
          return 0;
        }

        if (k === 1) {
          return 1;
        }

        if (!a || a < 1) {
          a = 1;
          s = p / 4;
        } else {
          s = p * Math.asin(1 / a) / (2 * Math.PI);
        }

        k *= 2;

        if (k < 1) {
          return -0.5 * (a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
        }

        return a * Math.pow(2, -10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;
      }
      function backIn(k) {
        if (k === 1) {
          return 1;
        }

        var s = 1.70158;
        return k * k * ((s + 1) * k - s);
      }
      function backOut(k) {
        if (k === 0) {
          return 0;
        }

        var s = 1.70158;
        return --k * k * ((s + 1) * k + s) + 1;
      }
      function backInOut(k) {
        var s = 1.70158 * 1.525;
        k *= 2;

        if (k < 1) {
          return 0.5 * (k * k * ((s + 1) * k - s));
        }

        return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
      }
      function bounceIn(k) {
        return 1 - bounceOut(1 - k);
      }
      function bounceOut(k) {
        if (k < 1 / 2.75) {
          return 7.5625 * k * k;
        } else if (k < 2 / 2.75) {
          return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;
        } else if (k < 2.5 / 2.75) {
          return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;
        } else {
          return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;
        }
      }
      function bounceInOut(k) {
        if (k < 0.5) {
          return bounceIn(k * 2) * 0.5;
        }

        return bounceOut(k * 2 - 1) * 0.5 + 0.5;
      }
      function smooth(k) {
        if (k <= 0) {
          return 0;
        }

        if (k >= 1) {
          return 1;
        }

        return k * k * (3 - 2 * k);
      }
      function fade(k) {
        if (k <= 0) {
          return 0;
        }

        if (k >= 1) {
          return 1;
        }

        return k * k * k * (k * (k * 6 - 15) + 10);
      }
      var quadOutIn = _makeOutIn(quadIn, quadOut);
      var cubicOutIn = _makeOutIn(cubicIn, cubicOut);
      var quartOutIn = _makeOutIn(quartIn, quartOut);
      var quintOutIn = _makeOutIn(quintIn, quintOut);
      var sineOutIn = _makeOutIn(sineIn, sineOut);
      var expoOutIn = _makeOutIn(expoIn, expoOut);
      var circOutIn = _makeOutIn(circIn, circOut);
      var elasticOutIn = _makeOutIn(elasticIn, elasticOut);
      var backOutIn = _makeOutIn(backIn, backOut);
      var bounceOutIn = _makeOutIn(bounceIn, bounceOut);

      function _makeOutIn(fnIn, fnOut) {
        return function (k) {
          if (k < 0.5) {
            return fnOut(k * 2) / 2;
          }

          return fnIn(2 * k - 1) / 2 + 0.5;
        };
      }

      var easing = /*#__PURE__*/Object.freeze({
        __proto__: null,
        constant: constant,
        linear: linear,
        quadIn: quadIn,
        quadOut: quadOut,
        quadInOut: quadInOut,
        cubicIn: cubicIn,
        cubicOut: cubicOut,
        cubicInOut: cubicInOut,
        quartIn: quartIn,
        quartOut: quartOut,
        quartInOut: quartInOut,
        quintIn: quintIn,
        quintOut: quintOut,
        quintInOut: quintInOut,
        sineIn: sineIn,
        sineOut: sineOut,
        sineInOut: sineInOut,
        expoIn: expoIn,
        expoOut: expoOut,
        expoInOut: expoInOut,
        circIn: circIn,
        circOut: circOut,
        circInOut: circInOut,
        elasticIn: elasticIn,
        elasticOut: elasticOut,
        elasticInOut: elasticInOut,
        backIn: backIn,
        backOut: backOut,
        backInOut: backInOut,
        bounceIn: bounceIn,
        bounceOut: bounceOut,
        bounceInOut: bounceInOut,
        smooth: smooth,
        fade: fade,
        quadOutIn: quadOutIn,
        cubicOutIn: cubicOutIn,
        quartOutIn: quartOutIn,
        quintOutIn: quintOutIn,
        sineOutIn: sineOutIn,
        expoOutIn: expoOutIn,
        circOutIn: circOutIn,
        elasticOutIn: elasticOutIn,
        backOutIn: backOutIn,
        bounceOutIn: bounceOutIn
      });
      exports('easing', easing);

      var _easingMethodFnMap;
      var EasingMethod;

      (function (EasingMethod) {
        EasingMethod[EasingMethod["LINEAR"] = 0] = "LINEAR";
        EasingMethod[EasingMethod["CONSTANT"] = 1] = "CONSTANT";
        EasingMethod[EasingMethod["QUAD_IN"] = 2] = "QUAD_IN";
        EasingMethod[EasingMethod["QUAD_OUT"] = 3] = "QUAD_OUT";
        EasingMethod[EasingMethod["QUAD_IN_OUT"] = 4] = "QUAD_IN_OUT";
        EasingMethod[EasingMethod["QUAD_OUT_IN"] = 5] = "QUAD_OUT_IN";
        EasingMethod[EasingMethod["CUBIC_IN"] = 6] = "CUBIC_IN";
        EasingMethod[EasingMethod["CUBIC_OUT"] = 7] = "CUBIC_OUT";
        EasingMethod[EasingMethod["CUBIC_IN_OUT"] = 8] = "CUBIC_IN_OUT";
        EasingMethod[EasingMethod["CUBIC_OUT_IN"] = 9] = "CUBIC_OUT_IN";
        EasingMethod[EasingMethod["QUART_IN"] = 10] = "QUART_IN";
        EasingMethod[EasingMethod["QUART_OUT"] = 11] = "QUART_OUT";
        EasingMethod[EasingMethod["QUART_IN_OUT"] = 12] = "QUART_IN_OUT";
        EasingMethod[EasingMethod["QUART_OUT_IN"] = 13] = "QUART_OUT_IN";
        EasingMethod[EasingMethod["QUINT_IN"] = 14] = "QUINT_IN";
        EasingMethod[EasingMethod["QUINT_OUT"] = 15] = "QUINT_OUT";
        EasingMethod[EasingMethod["QUINT_IN_OUT"] = 16] = "QUINT_IN_OUT";
        EasingMethod[EasingMethod["QUINT_OUT_IN"] = 17] = "QUINT_OUT_IN";
        EasingMethod[EasingMethod["SINE_IN"] = 18] = "SINE_IN";
        EasingMethod[EasingMethod["SINE_OUT"] = 19] = "SINE_OUT";
        EasingMethod[EasingMethod["SINE_IN_OUT"] = 20] = "SINE_IN_OUT";
        EasingMethod[EasingMethod["SINE_OUT_IN"] = 21] = "SINE_OUT_IN";
        EasingMethod[EasingMethod["EXPO_IN"] = 22] = "EXPO_IN";
        EasingMethod[EasingMethod["EXPO_OUT"] = 23] = "EXPO_OUT";
        EasingMethod[EasingMethod["EXPO_IN_OUT"] = 24] = "EXPO_IN_OUT";
        EasingMethod[EasingMethod["EXPO_OUT_IN"] = 25] = "EXPO_OUT_IN";
        EasingMethod[EasingMethod["CIRC_IN"] = 26] = "CIRC_IN";
        EasingMethod[EasingMethod["CIRC_OUT"] = 27] = "CIRC_OUT";
        EasingMethod[EasingMethod["CIRC_IN_OUT"] = 28] = "CIRC_IN_OUT";
        EasingMethod[EasingMethod["CIRC_OUT_IN"] = 29] = "CIRC_OUT_IN";
        EasingMethod[EasingMethod["ELASTIC_IN"] = 30] = "ELASTIC_IN";
        EasingMethod[EasingMethod["ELASTIC_OUT"] = 31] = "ELASTIC_OUT";
        EasingMethod[EasingMethod["ELASTIC_IN_OUT"] = 32] = "ELASTIC_IN_OUT";
        EasingMethod[EasingMethod["ELASTIC_OUT_IN"] = 33] = "ELASTIC_OUT_IN";
        EasingMethod[EasingMethod["BACK_IN"] = 34] = "BACK_IN";
        EasingMethod[EasingMethod["BACK_OUT"] = 35] = "BACK_OUT";
        EasingMethod[EasingMethod["BACK_IN_OUT"] = 36] = "BACK_IN_OUT";
        EasingMethod[EasingMethod["BACK_OUT_IN"] = 37] = "BACK_OUT_IN";
        EasingMethod[EasingMethod["BOUNCE_IN"] = 38] = "BOUNCE_IN";
        EasingMethod[EasingMethod["BOUNCE_OUT"] = 39] = "BOUNCE_OUT";
        EasingMethod[EasingMethod["BOUNCE_IN_OUT"] = 40] = "BOUNCE_IN_OUT";
        EasingMethod[EasingMethod["BOUNCE_OUT_IN"] = 41] = "BOUNCE_OUT_IN";
        EasingMethod[EasingMethod["SMOOTH"] = 42] = "SMOOTH";
        EasingMethod[EasingMethod["FADE"] = 43] = "FADE";
      })(EasingMethod || (EasingMethod = exports('EasingMethod', {})));

      var easingMethodFnMap = (_easingMethodFnMap = {}, _easingMethodFnMap[EasingMethod.CONSTANT] = constant, _easingMethodFnMap[EasingMethod.LINEAR] = linear, _easingMethodFnMap[EasingMethod.QUAD_IN] = quadIn, _easingMethodFnMap[EasingMethod.QUAD_OUT] = quadOut, _easingMethodFnMap[EasingMethod.QUAD_IN_OUT] = quadInOut, _easingMethodFnMap[EasingMethod.QUAD_OUT_IN] = quadOutIn, _easingMethodFnMap[EasingMethod.CUBIC_IN] = cubicIn, _easingMethodFnMap[EasingMethod.CUBIC_OUT] = cubicOut, _easingMethodFnMap[EasingMethod.CUBIC_IN_OUT] = cubicInOut, _easingMethodFnMap[EasingMethod.CUBIC_OUT_IN] = cubicOutIn, _easingMethodFnMap[EasingMethod.QUART_IN] = quartIn, _easingMethodFnMap[EasingMethod.QUART_OUT] = quartOut, _easingMethodFnMap[EasingMethod.QUART_IN_OUT] = quartInOut, _easingMethodFnMap[EasingMethod.QUART_OUT_IN] = quartOutIn, _easingMethodFnMap[EasingMethod.QUINT_IN] = quintIn, _easingMethodFnMap[EasingMethod.QUINT_OUT] = quintOut, _easingMethodFnMap[EasingMethod.QUINT_IN_OUT] = quintInOut, _easingMethodFnMap[EasingMethod.QUINT_OUT_IN] = quintOutIn, _easingMethodFnMap[EasingMethod.SINE_IN] = sineIn, _easingMethodFnMap[EasingMethod.SINE_OUT] = sineOut, _easingMethodFnMap[EasingMethod.SINE_IN_OUT] = sineInOut, _easingMethodFnMap[EasingMethod.SINE_OUT_IN] = sineOutIn, _easingMethodFnMap[EasingMethod.EXPO_IN] = expoIn, _easingMethodFnMap[EasingMethod.EXPO_OUT] = expoOut, _easingMethodFnMap[EasingMethod.EXPO_IN_OUT] = expoInOut, _easingMethodFnMap[EasingMethod.EXPO_OUT_IN] = expoOutIn, _easingMethodFnMap[EasingMethod.CIRC_IN] = circIn, _easingMethodFnMap[EasingMethod.CIRC_OUT] = circOut, _easingMethodFnMap[EasingMethod.CIRC_IN_OUT] = circInOut, _easingMethodFnMap[EasingMethod.CIRC_OUT_IN] = circOutIn, _easingMethodFnMap[EasingMethod.ELASTIC_IN] = elasticIn, _easingMethodFnMap[EasingMethod.ELASTIC_OUT] = elasticOut, _easingMethodFnMap[EasingMethod.ELASTIC_IN_OUT] = elasticInOut, _easingMethodFnMap[EasingMethod.ELASTIC_OUT_IN] = elasticOutIn, _easingMethodFnMap[EasingMethod.BACK_IN] = backIn, _easingMethodFnMap[EasingMethod.BACK_OUT] = backOut, _easingMethodFnMap[EasingMethod.BACK_IN_OUT] = backInOut, _easingMethodFnMap[EasingMethod.BACK_OUT_IN] = backOutIn, _easingMethodFnMap[EasingMethod.BOUNCE_IN] = bounceIn, _easingMethodFnMap[EasingMethod.BOUNCE_OUT] = bounceOut, _easingMethodFnMap[EasingMethod.BOUNCE_IN_OUT] = bounceInOut, _easingMethodFnMap[EasingMethod.BOUNCE_OUT_IN] = bounceOutIn, _easingMethodFnMap[EasingMethod.SMOOTH] = smooth, _easingMethodFnMap[EasingMethod.FADE] = fade, _easingMethodFnMap);
      function getEasingFn(easingMethod) {
        assertIsTrue(easingMethod in easingMethodFnMap);
        return easingMethodFnMap[easingMethod];
      }

      var _CCClass$fastDefine$1;
      var REAL_KEYFRAME_VALUE_FLAGS_INTERPOLATION_MODE_START = 0;
      var REAL_KEYFRAME_VALUE_FLAGS_INTERPOLATION_MODE_MASK = 0xFF << REAL_KEYFRAME_VALUE_FLAGS_INTERPOLATION_MODE_START;
      var REAL_KEYFRAME_VALUE_FLAGS_TANGENT_WEIGHT_MODE_START = 8;
      var REAL_KEYFRAME_VALUE_FLAGS_TANGENT_WEIGHT_MODE_MASK = 0xFF << REAL_KEYFRAME_VALUE_FLAGS_TANGENT_WEIGHT_MODE_START;
      var REAL_KEYFRAME_VALUE_FLAGS_EASING_METHOD_START = 16;
      var REAL_KEYFRAME_VALUE_FLAGS_EASING_METHOD_MASK = 0xFF << REAL_KEYFRAME_VALUE_FLAGS_EASING_METHOD_START;
      assertIsTrue(REAL_KEYFRAME_VALUE_FLAGS_TANGENT_WEIGHT_MODE_START === REAL_KEYFRAME_VALUE_FLAGS_INTERPOLATION_MODE_START + popCount(REAL_KEYFRAME_VALUE_FLAGS_INTERPOLATION_MODE_MASK));
      assertIsTrue(REAL_KEYFRAME_VALUE_FLAGS_EASING_METHOD_START === REAL_KEYFRAME_VALUE_FLAGS_TANGENT_WEIGHT_MODE_START + popCount(REAL_KEYFRAME_VALUE_FLAGS_TANGENT_WEIGHT_MODE_MASK));
      var REAL_KEYFRAME_VALUE_DEFAULT_FLAGS = RealInterpolationMode.LINEAR << REAL_KEYFRAME_VALUE_FLAGS_INTERPOLATION_MODE_START | TangentWeightMode.NONE << REAL_KEYFRAME_VALUE_FLAGS_TANGENT_WEIGHT_MODE_START | EasingMethod.LINEAR << REAL_KEYFRAME_VALUE_FLAGS_EASING_METHOD_START;

      var RealKeyframeValue = function (_EditorExtendable) {
        _inheritsLoose(RealKeyframeValue, _EditorExtendable);

        function RealKeyframeValue() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _EditorExtendable.call.apply(_EditorExtendable, [this].concat(args)) || this;
          _this.value = 0.0;
          _this.rightTangent = 0.0;
          _this.rightTangentWeight = 0.0;
          _this.leftTangent = 0.0;
          _this.leftTangentWeight = 0.0;
          _this._flags = REAL_KEYFRAME_VALUE_DEFAULT_FLAGS;
          return _this;
        }

        _createClass(RealKeyframeValue, [{
          key: "interpolationMode",
          get: function get() {
            return (this._flags & REAL_KEYFRAME_VALUE_FLAGS_INTERPOLATION_MODE_MASK) >> REAL_KEYFRAME_VALUE_FLAGS_INTERPOLATION_MODE_START;
          },
          set: function set(value) {
            this._flags &= ~REAL_KEYFRAME_VALUE_FLAGS_INTERPOLATION_MODE_MASK;
            this._flags |= value << REAL_KEYFRAME_VALUE_FLAGS_INTERPOLATION_MODE_START;
          }
        }, {
          key: "tangentWeightMode",
          get: function get() {
            return (this._flags & REAL_KEYFRAME_VALUE_FLAGS_TANGENT_WEIGHT_MODE_MASK) >> REAL_KEYFRAME_VALUE_FLAGS_TANGENT_WEIGHT_MODE_START;
          },
          set: function set(value) {
            this._flags &= ~REAL_KEYFRAME_VALUE_FLAGS_TANGENT_WEIGHT_MODE_MASK;
            this._flags |= value << REAL_KEYFRAME_VALUE_FLAGS_TANGENT_WEIGHT_MODE_START;
          }
        }, {
          key: "easingMethod",
          get: function get() {
            return (this._flags & REAL_KEYFRAME_VALUE_FLAGS_EASING_METHOD_MASK) >> REAL_KEYFRAME_VALUE_FLAGS_EASING_METHOD_START;
          },
          set: function set(value) {
            this._flags &= ~REAL_KEYFRAME_VALUE_FLAGS_EASING_METHOD_MASK;
            this._flags |= value << REAL_KEYFRAME_VALUE_FLAGS_EASING_METHOD_START;
          }
        }]);

        return RealKeyframeValue;
      }(EditorExtendable);

      CCClass.fastDefine('cc.RealKeyframeValue', RealKeyframeValue, (_CCClass$fastDefine$1 = {
        interpolationMode: RealInterpolationMode.LINEAR,
        tangentWeightMode: TangentWeightMode.NONE,
        value: 0.0,
        rightTangent: 0.0,
        rightTangentWeight: 0.0,
        leftTangent: 0.0,
        leftTangentWeight: 0.0,
        easingMethod: EasingMethod.LINEAR
      }, _CCClass$fastDefine$1[editorExtrasTag] = undefined, _CCClass$fastDefine$1));
      CCClass.Attr.setClassAttr(RealKeyframeValue, editorExtrasTag, 'editorOnly', true);
      getOrCreateSerializationMetadata(RealKeyframeValue).uniquelyReferenced = true;

      function createRealKeyframeValue(params) {
        var realKeyframeValue = new RealKeyframeValue();

        if (typeof params === 'number') {
          realKeyframeValue.value = params;
        } else {
          var interpolationMode = params.interpolationMode,
              tangentWeightMode = params.tangentWeightMode,
              value = params.value,
              rightTangent = params.rightTangent,
              rightTangentWeight = params.rightTangentWeight,
              leftTangent = params.leftTangent,
              leftTangentWeight = params.leftTangentWeight,
              easingMethod = params.easingMethod,
              editorExtras = params[editorExtrasTag];
          realKeyframeValue.value = value !== null && value !== void 0 ? value : realKeyframeValue.value;
          realKeyframeValue.rightTangent = rightTangent !== null && rightTangent !== void 0 ? rightTangent : realKeyframeValue.rightTangent;
          realKeyframeValue.rightTangentWeight = rightTangentWeight !== null && rightTangentWeight !== void 0 ? rightTangentWeight : realKeyframeValue.rightTangentWeight;
          realKeyframeValue.leftTangent = leftTangent !== null && leftTangent !== void 0 ? leftTangent : realKeyframeValue.leftTangent;
          realKeyframeValue.leftTangentWeight = leftTangentWeight !== null && leftTangentWeight !== void 0 ? leftTangentWeight : realKeyframeValue.leftTangentWeight;
          realKeyframeValue.interpolationMode = interpolationMode !== null && interpolationMode !== void 0 ? interpolationMode : realKeyframeValue.interpolationMode;
          realKeyframeValue.tangentWeightMode = tangentWeightMode !== null && tangentWeightMode !== void 0 ? tangentWeightMode : realKeyframeValue.tangentWeightMode;
          realKeyframeValue.easingMethod = easingMethod !== null && easingMethod !== void 0 ? easingMethod : realKeyframeValue.easingMethod;

          if (editorExtras) {
            realKeyframeValue[editorExtrasTag] = editorExtras;
          }
        }

        return realKeyframeValue;
      }

      var RealCurve = exports('RealCurve', function (_KeyframeCurve) {
        _inheritsLoose(RealCurve, _KeyframeCurve);

        function RealCurve() {
          var _this2;

          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          _this2 = _KeyframeCurve.call.apply(_KeyframeCurve, [this].concat(args)) || this;
          _this2.preExtrapolation = ExtrapolationMode.CLAMP;
          _this2.postExtrapolation = ExtrapolationMode.CLAMP;
          return _this2;
        }

        var _proto = RealCurve.prototype;

        _proto.evaluate = function evaluate(time) {
          var times = this._times,
              values = this._values;
          var nFrames = times.length;

          if (nFrames === 0) {
            return 0.0;
          }

          var firstTime = times[0];
          var lastTime = times[nFrames - 1];

          if (time < firstTime) {
            var preExtrapolation = this.preExtrapolation;
            var _preValue = values[0];

            if (preExtrapolation === ExtrapolationMode.CLAMP || nFrames < 2) {
              return _preValue.value;
            }

            switch (preExtrapolation) {
              case ExtrapolationMode.LINEAR:
                return linearTrend(firstTime, values[0].value, times[1], values[1].value, time);

              case ExtrapolationMode.LOOP:
                time = wrapRepeat(time, firstTime, lastTime);
                break;

              case ExtrapolationMode.PING_PONG:
                time = wrapPingPong(time, firstTime, lastTime);
                break;

              default:
                return _preValue.value;
            }
          } else if (time > lastTime) {
            var postExtrapolation = this.postExtrapolation;
            var preFrame = values[nFrames - 1];

            if (postExtrapolation === ExtrapolationMode.CLAMP || nFrames < 2) {
              return preFrame.value;
            }

            switch (postExtrapolation) {
              case ExtrapolationMode.LINEAR:
                return linearTrend(lastTime, preFrame.value, times[nFrames - 2], values[nFrames - 2].value, time);

              case ExtrapolationMode.LOOP:
                time = wrapRepeat(time, firstTime, lastTime);
                break;

              case ExtrapolationMode.PING_PONG:
                time = wrapPingPong(time, firstTime, lastTime);
                break;

              default:
                return preFrame.value;
            }
          }

          var index = binarySearchEpsilon(times, time);

          if (index >= 0) {
            return values[index].value;
          }

          var iNext = ~index;
          assertIsTrue(iNext !== 0 && iNext !== nFrames && nFrames > 1);
          var iPre = iNext - 1;
          var preTime = times[iPre];
          var preValue = values[iPre];
          var nextTime = times[iNext];
          var nextValue = values[iNext];
          assertIsTrue(nextTime > time && time > preTime);
          var dt = nextTime - preTime;
          var ratio = (time - preTime) / dt;
          return evalBetweenTwoKeyFrames(preTime, preValue, nextTime, nextValue, ratio);
        };

        _proto.addKeyFrame = function addKeyFrame(time, value) {
          return _KeyframeCurve.prototype.addKeyFrame.call(this, time, createRealKeyframeValue(value));
        };

        _proto.assignSorted = function assignSorted(times, values) {
          if (values !== undefined) {
            assertIsTrue(Array.isArray(times));
            this.setKeyframes(times.slice(), values.map(function (value) {
              return createRealKeyframeValue(value);
            }));
          } else {
            var _keyframes = Array.from(times);

            this.setKeyframes(_keyframes.map(function (_ref) {
              var time = _ref[0];
              return time;
            }), _keyframes.map(function (_ref2) {
              var value = _ref2[1];
              return createRealKeyframeValue(value);
            }));
          }
        };

        _proto.isConstant = function isConstant(tolerance) {
          if (this._values.length <= 1) {
            return true;
          }

          var firstVal = this._values[0].value;
          return this._values.every(function (frame) {
            return approx(frame.value, firstVal, tolerance);
          });
        };

        _proto[serializeTag] = function (output, context) {
          if (!context.toCCON) {
            output.writeThis();
            return;
          }

          var times = this._times,
              keyframeValues = this._values;
          var nKeyframes = times.length;
          var dataSize = 0 + OVERFLOW_BYTES + OVERFLOW_BYTES + FRAME_COUNT_BYTES + TIME_BYTES * nKeyframes + REAL_KEY_FRAME_VALUE_MAX_SIZE * nKeyframes;
          var dataView = new DataView(new ArrayBuffer(dataSize));
          var currentOffset = 0;
          dataView.setUint8(currentOffset, this.preExtrapolation);
          currentOffset += OVERFLOW_BYTES;
          dataView.setUint8(currentOffset, this.postExtrapolation);
          currentOffset += OVERFLOW_BYTES;
          dataView.setUint32(currentOffset, nKeyframes, true);
          currentOffset += FRAME_COUNT_BYTES;
          times.forEach(function (time, index) {
            return dataView.setFloat32(currentOffset + TIME_BYTES * index, time, true);
          });
          currentOffset += TIME_BYTES * nKeyframes;

          for (var _iterator = _createForOfIteratorHelperLoose(keyframeValues), _step; !(_step = _iterator()).done;) {
            var keyframeValue = _step.value;
            currentOffset = saveRealKeyFrameValue(dataView, keyframeValue, currentOffset);
          }

          var bytes = new Uint8Array(dataView.buffer, 0, currentOffset);
          output.writeProperty('bytes', bytes);
          var keyframeValueEditorExtras = keyframeValues.map(function (keyframeValue) {
            return keyframeValue[editorExtrasTag];
          });

          if (keyframeValueEditorExtras.some(function (extras) {
            return extras !== undefined;
          })) {
            output.writeProperty("keyframeValueEditorExtras", keyframeValueEditorExtras);
          }
        };

        _proto[deserializeTag] = function (input, context) {
          if (!context.fromCCON) {
            input.readThis();
            return;
          }

          var bytes = input.readProperty('bytes');
          var dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
          var currentOffset = 0;
          this.preExtrapolation = dataView.getUint8(currentOffset);
          currentOffset += OVERFLOW_BYTES;
          this.postExtrapolation = dataView.getUint8(currentOffset);
          currentOffset += OVERFLOW_BYTES;
          var nKeyframes = dataView.getUint32(currentOffset, true);
          currentOffset += FRAME_COUNT_BYTES;
          var times = Array.from({
            length: nKeyframes
          }, function (_, index) {
            return dataView.getFloat32(currentOffset + TIME_BYTES * index, true);
          });
          currentOffset += TIME_BYTES * nKeyframes;
          var keyframeValues = new Array(nKeyframes);

          for (var iKeyFrame = 0; iKeyFrame < nKeyframes; ++iKeyFrame) {
            var keyframeValue = createRealKeyframeValue({});
            currentOffset = loadRealKeyFrameValue(dataView, keyframeValue, currentOffset);
            keyframeValues[iKeyFrame] = keyframeValue;
          }

          assertIsTrue(currentOffset === bytes.byteLength);
          var keyframeValueEditorExtras = input.readProperty("keyframeValueEditorExtras");

          if (keyframeValueEditorExtras) {
            assertIsTrue(keyframeValueEditorExtras.length === nKeyframes);
            keyframeValueEditorExtras.forEach(function (extras, index) {
              return keyframeValues[index][editorExtrasTag] = extras;
            });
          }

          this._times = times;
          this._values = keyframeValues;
        };

        return RealCurve;
      }(KeyframeCurve));
      CCClass.fastDefine('cc.RealCurve', RealCurve, {
        _times: [],
        _values: [],
        preExtrapolation: ExtrapolationMode.CLAMP,
        postExtrapolation: ExtrapolationMode.CLAMP
      });
      var FLAGS_EASING_METHOD_BITS_START = 8;
      var FLAG_EASING_METHOD_MASK = 0xFF << FLAGS_EASING_METHOD_BITS_START;
      var KeyframeValueFlagMask;

      (function (KeyframeValueFlagMask) {
        KeyframeValueFlagMask[KeyframeValueFlagMask["VALUE"] = 1] = "VALUE";
        KeyframeValueFlagMask[KeyframeValueFlagMask["INTERPOLATION_MODE"] = 2] = "INTERPOLATION_MODE";
        KeyframeValueFlagMask[KeyframeValueFlagMask["TANGENT_WEIGHT_MODE"] = 4] = "TANGENT_WEIGHT_MODE";
        KeyframeValueFlagMask[KeyframeValueFlagMask["LEFT_TANGENT"] = 8] = "LEFT_TANGENT";
        KeyframeValueFlagMask[KeyframeValueFlagMask["LEFT_TANGENT_WEIGHT"] = 16] = "LEFT_TANGENT_WEIGHT";
        KeyframeValueFlagMask[KeyframeValueFlagMask["RIGHT_TANGENT"] = 32] = "RIGHT_TANGENT";
        KeyframeValueFlagMask[KeyframeValueFlagMask["RIGHT_TANGENT_WEIGHT"] = 64] = "RIGHT_TANGENT_WEIGHT";
      })(KeyframeValueFlagMask || (KeyframeValueFlagMask = {}));

      var OVERFLOW_BYTES = 1;
      var FRAME_COUNT_BYTES = 4;
      var TIME_BYTES = 4;
      var KEY_FRAME_VALUE_FLAGS_BYTES = 4;
      var VALUE_BYTES = 4;
      var INTERPOLATION_MODE_BYTES = 1;
      var TANGENT_WEIGHT_MODE_BYTES = 1;
      var LEFT_TANGENT_BYTES = 4;
      var LEFT_TANGENT_WEIGHT_BYTES = 4;
      var RIGHT_TANGENT_BYTES = 4;
      var RIGHT_TANGENT_WEIGHT_BYTES = 4;

      var _createRealKeyframeVa = createRealKeyframeValue({}),
          DEFAULT_INTERPOLATION_MODE = _createRealKeyframeVa.interpolationMode,
          DEFAULT_TANGENT_WEIGHT_MODE = _createRealKeyframeVa.tangentWeightMode,
          DEFAULT_LEFT_TANGENT = _createRealKeyframeVa.leftTangent,
          DEFAULT_LEFT_TANGENT_WEIGHT = _createRealKeyframeVa.leftTangentWeight,
          DEFAULT_RIGHT_TANGENT = _createRealKeyframeVa.rightTangent,
          DEFAULT_RIGHT_TANGENT_WEIGHT = _createRealKeyframeVa.rightTangentWeight;

      var REAL_KEY_FRAME_VALUE_MAX_SIZE = KEY_FRAME_VALUE_FLAGS_BYTES + VALUE_BYTES + INTERPOLATION_MODE_BYTES + TANGENT_WEIGHT_MODE_BYTES + LEFT_TANGENT_BYTES + LEFT_TANGENT_WEIGHT_BYTES + RIGHT_TANGENT_BYTES + RIGHT_TANGENT_WEIGHT_BYTES + 0;

      function saveRealKeyFrameValue(dataView, keyframeValue, offset) {
        var flags = 0;
        var currentOffset = offset;
        var pFlags = currentOffset;
        currentOffset += KEY_FRAME_VALUE_FLAGS_BYTES;
        var value = keyframeValue.value,
            interpolationMode = keyframeValue.interpolationMode,
            tangentWeightMode = keyframeValue.tangentWeightMode,
            rightTangent = keyframeValue.rightTangent,
            rightTangentWeight = keyframeValue.rightTangentWeight,
            leftTangent = keyframeValue.leftTangent,
            leftTangentWeight = keyframeValue.leftTangentWeight,
            easingMethod = keyframeValue.easingMethod;
        dataView.setFloat32(currentOffset, value, true);
        currentOffset += VALUE_BYTES;

        if (interpolationMode !== DEFAULT_INTERPOLATION_MODE) {
          flags |= KeyframeValueFlagMask.INTERPOLATION_MODE;
          dataView.setUint8(currentOffset, interpolationMode);
          currentOffset += INTERPOLATION_MODE_BYTES;
        }

        if (tangentWeightMode !== DEFAULT_TANGENT_WEIGHT_MODE) {
          flags |= KeyframeValueFlagMask.TANGENT_WEIGHT_MODE;
          dataView.setUint8(currentOffset, tangentWeightMode);
          currentOffset += TANGENT_WEIGHT_MODE_BYTES;
        }

        if (leftTangent !== DEFAULT_LEFT_TANGENT) {
          flags |= KeyframeValueFlagMask.LEFT_TANGENT;
          dataView.setFloat32(currentOffset, leftTangent, true);
          currentOffset += LEFT_TANGENT_BYTES;
        }

        if (leftTangentWeight !== DEFAULT_LEFT_TANGENT_WEIGHT) {
          flags |= KeyframeValueFlagMask.LEFT_TANGENT_WEIGHT;
          dataView.setFloat32(currentOffset, leftTangentWeight, true);
          currentOffset += LEFT_TANGENT_WEIGHT_BYTES;
        }

        if (rightTangent !== DEFAULT_RIGHT_TANGENT) {
          flags |= KeyframeValueFlagMask.RIGHT_TANGENT;
          dataView.setFloat32(currentOffset, rightTangent, true);
          currentOffset += RIGHT_TANGENT_BYTES;
        }

        if (rightTangentWeight !== DEFAULT_RIGHT_TANGENT_WEIGHT) {
          flags |= KeyframeValueFlagMask.RIGHT_TANGENT_WEIGHT;
          dataView.setFloat32(currentOffset, rightTangentWeight, true);
          currentOffset += RIGHT_TANGENT_WEIGHT_BYTES;
        }

        flags |= easingMethod << FLAGS_EASING_METHOD_BITS_START;
        dataView.setUint32(pFlags, flags, true);
        return currentOffset;
      }

      function loadRealKeyFrameValue(dataView, keyframeValue, offset) {
        var currentOffset = offset;
        var flags = dataView.getUint32(currentOffset, true);
        currentOffset += KEY_FRAME_VALUE_FLAGS_BYTES;
        keyframeValue.value = dataView.getFloat32(currentOffset, true);
        currentOffset += VALUE_BYTES;

        if (flags & KeyframeValueFlagMask.INTERPOLATION_MODE) {
          keyframeValue.interpolationMode = dataView.getUint8(currentOffset);
          currentOffset += INTERPOLATION_MODE_BYTES;
        }

        if (flags & KeyframeValueFlagMask.TANGENT_WEIGHT_MODE) {
          keyframeValue.tangentWeightMode = dataView.getUint8(currentOffset);
          currentOffset += TANGENT_WEIGHT_MODE_BYTES;
        }

        if (flags & KeyframeValueFlagMask.LEFT_TANGENT) {
          keyframeValue.leftTangent = dataView.getFloat32(currentOffset, true);
          currentOffset += LEFT_TANGENT_BYTES;
        }

        if (flags & KeyframeValueFlagMask.LEFT_TANGENT_WEIGHT) {
          keyframeValue.leftTangentWeight = dataView.getFloat32(currentOffset, true);
          currentOffset += LEFT_TANGENT_WEIGHT_BYTES;
        }

        if (flags & KeyframeValueFlagMask.RIGHT_TANGENT) {
          keyframeValue.rightTangent = dataView.getFloat32(currentOffset, true);
          currentOffset += RIGHT_TANGENT_BYTES;
        }

        if (flags & KeyframeValueFlagMask.RIGHT_TANGENT_WEIGHT) {
          keyframeValue.rightTangentWeight = dataView.getFloat32(currentOffset, true);
          currentOffset += RIGHT_TANGENT_WEIGHT_BYTES;
        }

        var easingMethod = (flags & FLAG_EASING_METHOD_MASK) >> FLAGS_EASING_METHOD_BITS_START;
        keyframeValue.easingMethod = easingMethod;
        return currentOffset;
      }

      function wrapRepeat(time, prevTime, nextTime) {
        return prevTime + repeat(time - prevTime, nextTime - prevTime);
      }

      function wrapPingPong(time, prevTime, nextTime) {
        return prevTime + pingPong(time - prevTime, nextTime - prevTime);
      }

      function linearTrend(prevTime, prevValue, nextTime, nextValue, time) {
        var slope = (nextValue - prevValue) / (nextTime - prevTime);
        return prevValue + (time - prevTime) * slope;
      }

      function evalBetweenTwoKeyFrames(prevTime, prevValue, nextTime, nextValue, ratio) {
        var dt = nextTime - prevTime;

        switch (prevValue.interpolationMode) {
          default:
          case RealInterpolationMode.CONSTANT:
            return prevValue.value;

          case RealInterpolationMode.LINEAR:
            {
              var transformedRatio = prevValue.easingMethod === EasingMethod.LINEAR ? ratio : getEasingFn(prevValue.easingMethod)(ratio);
              return lerp(prevValue.value, nextValue.value, transformedRatio);
            }

          case RealInterpolationMode.CUBIC:
            {
              var ONE_THIRD = 1.0 / 3.0;
              var prevTangent = prevValue.rightTangent,
                  prevTangentWeightSpecified = prevValue.rightTangentWeight;
              var prevTangentWeightEnabled = isRightTangentWeightEnabled(prevValue.tangentWeightMode);
              var nextTangent = nextValue.leftTangent,
                  nextTangentWeightSpecified = nextValue.leftTangentWeight;
              var nextTangentWeightEnabled = isLeftTangentWeightEnabled(nextValue.tangentWeightMode);

              if (!prevTangentWeightEnabled && !nextTangentWeightEnabled) {
                var p1 = prevValue.value + ONE_THIRD * prevTangent * dt;
                var p2 = nextValue.value - ONE_THIRD * nextTangent * dt;
                return bezierInterpolate(prevValue.value, p1, p2, nextValue.value, ratio);
              } else {
                var prevTangentWeight = 0.0;

                if (prevTangentWeightEnabled) {
                  prevTangentWeight = prevTangentWeightSpecified;
                } else {
                  var x = dt;

                  var _y = dt * prevTangent;

                  prevTangentWeight = Math.sqrt(x * x + _y * _y) * ONE_THIRD;
                }

                var angle0 = Math.atan(prevTangent);
                var tx0 = Math.cos(angle0) * prevTangentWeight + prevTime;
                var ty0 = Math.sin(angle0) * prevTangentWeight + prevValue.value;
                var nextTangentWeight = 0.0;

                if (nextTangentWeightEnabled) {
                  nextTangentWeight = nextTangentWeightSpecified;
                } else {
                  var _x = dt;

                  var _y2 = dt * nextTangent;

                  nextTangentWeight = Math.sqrt(_x * _x + _y2 * _y2) * ONE_THIRD;
                }

                var angle1 = Math.atan(nextTangent);
                var tx1 = -Math.cos(angle1) * nextTangentWeight + nextTime;
                var ty1 = -Math.sin(angle1) * nextTangentWeight + nextValue.value;
                var dx = dt;
                var u0x = (tx0 - prevTime) / dx;
                var u1x = (tx1 - prevTime) / dx;
                var u0y = ty0;
                var u1y = ty1;
                var coeff0 = 0.0;
                var coeff1 = 3.0 * u0x;
                var coeff2 = 3.0 * u1x - 6.0 * u0x;
                var coeff3 = 3.0 * (u0x - u1x) + 1.0;
                var solutions = [0.0, 0.0, 0.0];
                var nSolutions = solveCubic(coeff0 - ratio, coeff1, coeff2, coeff3, solutions);
                var param = getParamFromCubicSolution(solutions, nSolutions, ratio);
                var y = bezierInterpolate(prevValue.value, u0y, u1y, nextValue.value, param);
                return y;
              }
            }
        }
      }

      function isLeftTangentWeightEnabled(tangentWeightMode) {
        return (tangentWeightMode & TangentWeightMode.LEFT) !== 0;
      }

      function isRightTangentWeightEnabled(tangentWeightMode) {
        return (tangentWeightMode & TangentWeightMode.RIGHT) !== 0;
      }

      function bezierInterpolate(p0, p1, p2, p3, t) {
        var u = 1 - t;
        var coeff0 = u * u * u;
        var coeff1 = 3 * u * u * t;
        var coeff2 = 3 * u * t * t;
        var coeff3 = t * t * t;
        return coeff0 * p0 + coeff1 * p1 + coeff2 * p2 + coeff3 * p3;
      }

      function getParamFromCubicSolution(solutions, solutionsCount, x) {
        var param = x;

        if (solutionsCount === 1) {
          param = solutions[0];
        } else {
          param = -Infinity;

          for (var iSolution = 0; iSolution < solutionsCount; ++iSolution) {
            var solution = solutions[iSolution];

            if (solution >= 0.0 && solution <= 1.0) {
              if (solution > param) {
                param = solution;
              }
            }
          }

          if (param === -Infinity) {
            param = 0.0;
          }
        }

        return param;
      }

      function bezier(C1, C2, C3, C4, t) {
        var t1 = 1 - t;
        return t1 * (t1 * (C1 + (C2 * 3 - C1) * t) + C3 * 3 * t * t) + C4 * t * t * t;
      }
      legacyCC.bezier = bezier;
      var cos = Math.cos;
      var acos = Math.acos;
      var max$2 = Math.max;
      var pi = Math.PI;
      var tau = 2 * pi;
      var sqrt = Math.sqrt;

      function crt(v) {
        if (v < 0) {
          return -Math.pow(-v, 1 / 3);
        } else {
          return Math.pow(v, 1 / 3);
        }
      }

      function cardano(curve, x) {
        var pa = x - 0;
        var pb = x - curve[0];
        var pc = x - curve[2];
        var pd = x - 1;
        var pa3 = pa * 3;
        var pb3 = pb * 3;
        var pc3 = pc * 3;
        var d = -pa + pb3 - pc3 + pd;
        var rd = 1 / d;
        var r3 = 1 / 3;
        var a = (pa3 - 6 * pb + pc3) * rd;
        var a3 = a * r3;
        var b = (-pa3 + pb3) * rd;
        var c = pa * rd;
        var p = (3 * b - a * a) * r3;
        var p3 = p * r3;
        var q = (2 * a * a * a - 9 * a * b + 27 * c) / 27;
        var q2 = q / 2;
        var discriminant = q2 * q2 + p3 * p3 * p3;
        var u1;
        var v1;
        var x1;
        var x2;
        var x3;

        if (discriminant < 0) {
          var mp3 = -p * r3;
          var mp33 = mp3 * mp3 * mp3;
          var r = sqrt(mp33);
          var t = -q / (2 * r);
          var cosphi = t < -1 ? -1 : t > 1 ? 1 : t;
          var phi = acos(cosphi);
          var crtr = crt(r);
          var t1 = 2 * crtr;
          x1 = t1 * cos(phi * r3) - a3;
          x2 = t1 * cos((phi + tau) * r3) - a3;
          x3 = t1 * cos((phi + 2 * tau) * r3) - a3;

          if (x1 >= 0 && x1 <= 1) {
            if (x2 >= 0 && x2 <= 1) {
              if (x3 >= 0 && x3 <= 1) {
                return max$2(x1, x2, x3);
              } else {
                return max$2(x1, x2);
              }
            } else if (x3 >= 0 && x3 <= 1) {
              return max$2(x1, x3);
            } else {
              return x1;
            }
          } else if (x2 >= 0 && x2 <= 1) {
            if (x3 >= 0 && x3 <= 1) {
              return max$2(x2, x3);
            } else {
              return x2;
            }
          } else {
            return x3;
          }
        } else if (discriminant === 0) {
          u1 = q2 < 0 ? crt(-q2) : -crt(q2);
          x1 = 2 * u1 - a3;
          x2 = -u1 - a3;

          if (x1 >= 0 && x1 <= 1) {
            if (x2 >= 0 && x2 <= 1) {
              return max$2(x1, x2);
            } else {
              return x1;
            }
          } else {
            return x2;
          }
        } else {
            var sd = sqrt(discriminant);
            u1 = crt(-q2 + sd);
            v1 = crt(q2 + sd);
            x1 = u1 - v1 - a3;
            return x1;
          }
      }

      function bezierByTime(controlPoints, x) {
        var percent = cardano(controlPoints, x);
        var p1y = controlPoints[1];
        var p2y = controlPoints[3];
        return ((1 - percent) * (p1y + (p2y - p1y) * percent) * 3 + percent * percent) * percent;
      }
      legacyCC.bezierByTime = bezierByTime;

      var _dec$1, _class$1, _class2$1, _initializer$1, _initializer2$1, _initializer3$1, _dec2, _class4, _class5, _initializer4$1, _initializer5;
      var QuatInterpolationMode;

      (function (QuatInterpolationMode) {
        QuatInterpolationMode[QuatInterpolationMode["SLERP"] = 0] = "SLERP";
        QuatInterpolationMode[QuatInterpolationMode["CONSTANT"] = 1] = "CONSTANT";
      })(QuatInterpolationMode || (QuatInterpolationMode = exports('QuatInterpolationMode', {})));

      var QuatKeyframeValue = (_dec$1 = ccclass('cc.QuatKeyframeValue'), _dec$1(_class$1 = uniquelyReferenced(_class$1 = (_class2$1 = function QuatKeyframeValue(_temp) {
        var _ref = _temp === void 0 ? {} : _temp,
            value = _ref.value,
            interpolationMode = _ref.interpolationMode,
            easingMethod = _ref.easingMethod;

        this.interpolationMode = _initializer$1 && _initializer$1();
        this.value = _initializer2$1 && _initializer2$1();
        this.easingMethod = _initializer3$1 && _initializer3$1();
        this.value = value ? Quat.clone(value) : this.value;
        this.interpolationMode = interpolationMode !== null && interpolationMode !== void 0 ? interpolationMode : this.interpolationMode;
        this.easingMethod = easingMethod !== null && easingMethod !== void 0 ? easingMethod : this.easingMethod;
      }, (_initializer$1 = applyDecoratedInitializer(_class2$1.prototype, "interpolationMode", [serializable], function () {
        return QuatInterpolationMode.SLERP;
      }), _initializer2$1 = applyDecoratedInitializer(_class2$1.prototype, "value", [serializable], function () {
        return Quat.clone(Quat.IDENTITY);
      }), _initializer3$1 = applyDecoratedInitializer(_class2$1.prototype, "easingMethod", [serializable], function () {
        return EasingMethod.LINEAR;
      })), _class2$1)) || _class$1) || _class$1);

      function createQuatKeyframeValue(params) {
        return new QuatKeyframeValue(params);
      }

      var QuatCurve = exports('QuatCurve', (_dec2 = ccclass('cc.QuatCurve'), _dec2(_class4 = (_class5 = function (_KeyframeCurve) {
        _inheritsLoose(QuatCurve, _KeyframeCurve);

        function QuatCurve() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _KeyframeCurve.call.apply(_KeyframeCurve, [this].concat(args)) || this;
          _this.preExtrapolation = _initializer4$1 && _initializer4$1();
          _this.postExtrapolation = _initializer5 && _initializer5();
          return _this;
        }

        var _proto = QuatCurve.prototype;

        _proto.evaluate = function evaluate(time, quat) {
          var _quat;

          (_quat = quat) !== null && _quat !== void 0 ? _quat : quat = new Quat();
          var times = this._times,
              values = this._values,
              postExtrapolation = this.postExtrapolation,
              preExtrapolation = this.preExtrapolation;
          var nFrames = times.length;

          if (nFrames === 0) {
            return quat;
          }

          var firstTime = times[0];
          var lastTime = times[nFrames - 1];

          if (time < firstTime) {
            var _preValue = values[0];

            switch (preExtrapolation) {
              case ExtrapolationMode.LOOP:
                time = firstTime + repeat(time - firstTime, lastTime - firstTime);
                break;

              case ExtrapolationMode.PING_PONG:
                time = firstTime + pingPong(time - firstTime, lastTime - firstTime);
                break;

              case ExtrapolationMode.CLAMP:
              default:
                return Quat.copy(quat, _preValue.value);
            }
          } else if (time > lastTime) {
            var _preValue2 = values[nFrames - 1];

            switch (postExtrapolation) {
              case ExtrapolationMode.LOOP:
                time = firstTime + repeat(time - firstTime, lastTime - firstTime);
                break;

              case ExtrapolationMode.PING_PONG:
                time = firstTime + pingPong(time - firstTime, lastTime - firstTime);
                break;

              case ExtrapolationMode.CLAMP:
              default:
                return Quat.copy(quat, _preValue2.value);
            }
          }

          var index = binarySearchEpsilon(times, time);

          if (index >= 0) {
            return Quat.copy(quat, values[index].value);
          }

          var iNext = ~index;
          assertIsTrue(iNext !== 0 && iNext !== nFrames && nFrames > 1);
          var iPre = iNext - 1;
          var preTime = times[iPre];
          var preValue = values[iPre];
          var nextTime = times[iNext];
          var nextValue = values[iNext];
          assertIsTrue(nextTime > time && time > preTime);
          var dt = nextTime - preTime;
          var ratio = (time - preTime) / dt;

          switch (preValue.interpolationMode) {
            default:
            case QuatInterpolationMode.CONSTANT:
              return Quat.copy(quat, preValue.value);

            case QuatInterpolationMode.SLERP:
              {
                var easingMethod = preValue.easingMethod;
                var transformedRatio = easingMethod === EasingMethod.LINEAR ? ratio : Array.isArray(easingMethod) ? bezierByTime(easingMethod, ratio) : getEasingFn(easingMethod)(ratio);
                return Quat.slerp(quat, preValue.value, nextValue.value, transformedRatio);
              }
          }
        };

        _proto.addKeyFrame = function addKeyFrame(time, value) {
          var keyframeValue = new QuatKeyframeValue(value);
          return _KeyframeCurve.prototype.addKeyFrame.call(this, time, keyframeValue);
        };

        _proto.assignSorted = function assignSorted(times, values) {
          if (values !== undefined) {
            assertIsTrue(Array.isArray(times));
            this.setKeyframes(times.slice(), values.map(function (value) {
              return createQuatKeyframeValue(value);
            }));
          } else {
            var _keyframes = Array.from(times);

            this.setKeyframes(_keyframes.map(function (_ref2) {
              var time = _ref2[0];
              return time;
            }), _keyframes.map(function (_ref3) {
              var value = _ref3[1];
              return createQuatKeyframeValue(value);
            }));
          }
        };

        _proto[serializeTag] = function (output, context) {
          if (!context.toCCON) {
            output.writeThis();
            return;
          }

          var times = this._times,
              keyframeValues = this._values;
          var interpolationModeRepeated = true;
          keyframeValues.forEach(function (keyframeValue, _index, _ref4) {
            var firstKeyframeValue = _ref4[0];

            if (interpolationModeRepeated && keyframeValue.interpolationMode !== firstKeyframeValue.interpolationMode) {
              interpolationModeRepeated = false;
            }
          });
          var nKeyframes = times.length;
          var nFrames = nKeyframes;
          var interpolationModesSize = INTERPOLATION_MODE_BYTES$1 * (interpolationModeRepeated ? 1 : nFrames);
          var easingMethodsSize = keyframeValues.reduce(function (result, _ref5) {
            var easingMethod = _ref5.easingMethod;
            return result += Array.isArray(easingMethod) ? EASING_METHOD_BYTES + EASING_METHOD_BEZIER_COMPONENT_BYTES * 4 : EASING_METHOD_BYTES;
          }, 0);
          var dataSize = 0;
          dataSize += FLAGS_BYTES + FRAME_COUNT_BYTES$1 + TIME_BYTES$1 * nFrames + VALUE_BYTES$1 * 4 * nFrames + easingMethodsSize + interpolationModesSize + 0;
          var dataView = new DataView(new ArrayBuffer(dataSize));
          var P = 0;
          var flags = 0;

          if (interpolationModeRepeated) {
            flags |= KeyframeValueFlagMask$1.INTERPOLATION_MODE;
          }

          dataView.setUint32(P, flags, true);
          P += FLAGS_BYTES;
          dataView.setUint32(P, nFrames, true);
          P += FRAME_COUNT_BYTES$1;
          times.forEach(function (time, index) {
            return dataView.setFloat32(P + TIME_BYTES$1 * index, time, true);
          });
          P += TIME_BYTES$1 * nFrames;
          keyframeValues.forEach(function (_ref6, index) {
            var _ref6$value = _ref6.value,
                x = _ref6$value.x,
                y = _ref6$value.y,
                z = _ref6$value.z,
                w = _ref6$value.w;
            var pQuat = P + VALUE_BYTES$1 * 4 * index;
            dataView.setFloat32(pQuat + VALUE_BYTES$1 * 0, x, true);
            dataView.setFloat32(pQuat + VALUE_BYTES$1 * 1, y, true);
            dataView.setFloat32(pQuat + VALUE_BYTES$1 * 2, z, true);
            dataView.setFloat32(pQuat + VALUE_BYTES$1 * 3, w, true);
          });
          P += VALUE_BYTES$1 * 4 * nFrames;
          keyframeValues.forEach(function (_ref7, index) {
            var easingMethod = _ref7.easingMethod;

            if (!Array.isArray(easingMethod)) {
              dataView.setUint8(P, easingMethod);
              ++P;
            } else {
              dataView.setUint8(P, EASING_METHOD_BEZIER_TAG);
              ++P;
              dataView.setFloat32(P + EASING_METHOD_BEZIER_COMPONENT_BYTES * 0, easingMethod[0], true);
              dataView.setFloat32(P + EASING_METHOD_BEZIER_COMPONENT_BYTES * 1, easingMethod[1], true);
              dataView.setFloat32(P + EASING_METHOD_BEZIER_COMPONENT_BYTES * 2, easingMethod[2], true);
              dataView.setFloat32(P + EASING_METHOD_BEZIER_COMPONENT_BYTES * 3, easingMethod[3], true);
              P += EASING_METHOD_BEZIER_COMPONENT_BYTES * 4;
            }
          });
          var INTERPOLATION_MODES_START = P;
          P += interpolationModesSize;
          var pInterpolationMode = INTERPOLATION_MODES_START;
          keyframeValues.forEach(function (_ref8) {
            var interpolationMode = _ref8.interpolationMode;
            dataView.setUint8(pInterpolationMode, interpolationMode);

            if (!interpolationModeRepeated) {
              pInterpolationMode += INTERPOLATION_MODE_BYTES$1;
            }
          });
          var bytes = new Uint8Array(dataView.buffer);
          output.writeProperty('bytes', bytes);
        };

        _proto[deserializeTag] = function (input, context) {
          if (!context.fromCCON) {
            input.readThis();
            return;
          }

          var bytes = input.readProperty('bytes');
          var dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
          var P = 0;
          var flags = dataView.getUint32(P, true);
          P += FLAGS_BYTES;
          var interpolationModeRepeated = flags & KeyframeValueFlagMask$1.INTERPOLATION_MODE;
          var nFrames = dataView.getUint32(P, true);
          P += FRAME_COUNT_BYTES$1;
          var times = Array.from({
            length: nFrames
          }, function (_, index) {
            return dataView.getFloat32(P + TIME_BYTES$1 * index, true);
          });
          P += TIME_BYTES$1 * nFrames;
          var P_VALUES = P;
          P += VALUE_BYTES$1 * 4 * nFrames;
          var keyframeValues = Array.from({
            length: nFrames
          }, function (_, index) {
            var pQuat = P_VALUES + VALUE_BYTES$1 * 4 * index;
            var x = dataView.getFloat32(pQuat + VALUE_BYTES$1 * 0, true);
            var y = dataView.getFloat32(pQuat + VALUE_BYTES$1 * 1, true);
            var z = dataView.getFloat32(pQuat + VALUE_BYTES$1 * 2, true);
            var w = dataView.getFloat32(pQuat + VALUE_BYTES$1 * 3, true);
            var easingMethod = dataView.getUint8(P);
            ++P;
            var keyframeValue = createQuatKeyframeValue({
              value: {
                x: x,
                y: y,
                z: z,
                w: w
              }
            });

            if (easingMethod !== EASING_METHOD_BEZIER_TAG) {
              keyframeValue.easingMethod = easingMethod;
            } else {
              keyframeValue.easingMethod = [dataView.getFloat32(P + EASING_METHOD_BEZIER_COMPONENT_BYTES * 0, true), dataView.getFloat32(P + EASING_METHOD_BEZIER_COMPONENT_BYTES * 1, true), dataView.getFloat32(P + EASING_METHOD_BEZIER_COMPONENT_BYTES * 2, true), dataView.getFloat32(P + EASING_METHOD_BEZIER_COMPONENT_BYTES * 3, true)];
              P += EASING_METHOD_BEZIER_COMPONENT_BYTES * 4;
            }

            return keyframeValue;
          });

          if (interpolationModeRepeated) {
            var interpolationMode = dataView.getUint8(P);
            ++P;

            for (var iKeyframe = 0; iKeyframe < nFrames; ++iKeyframe) {
              keyframeValues[iKeyframe].interpolationMode = interpolationMode;
            }
          } else {
            for (var _iKeyframe = 0; _iKeyframe < nFrames; ++_iKeyframe) {
              var _interpolationMode = dataView.getUint8(P + _iKeyframe);

              keyframeValues[_iKeyframe].interpolationMode = _interpolationMode;
            }

            P += nFrames;
          }

          this._times = times;
          this._values = keyframeValues;
        };

        return QuatCurve;
      }(KeyframeCurve), (_initializer4$1 = applyDecoratedInitializer(_class5.prototype, "preExtrapolation", [serializable], function () {
        return ExtrapolationMode.CLAMP;
      }), _initializer5 = applyDecoratedInitializer(_class5.prototype, "postExtrapolation", [serializable], function () {
        return ExtrapolationMode.CLAMP;
      })), _class5)) || _class4));
      var KeyframeValueFlagMask$1;

      (function (KeyframeValueFlagMask) {
        KeyframeValueFlagMask[KeyframeValueFlagMask["INTERPOLATION_MODE"] = 1] = "INTERPOLATION_MODE";
      })(KeyframeValueFlagMask$1 || (KeyframeValueFlagMask$1 = {}));

      var FLAGS_BYTES = 1;
      var FRAME_COUNT_BYTES$1 = 4;
      var TIME_BYTES$1 = 4;
      var VALUE_BYTES$1 = 4;
      var INTERPOLATION_MODE_BYTES$1 = 1;
      var EASING_METHOD_BYTES = 1;
      var EASING_METHOD_BEZIER_TAG = 255;
      var EASING_METHOD_BEZIER_COMPONENT_BYTES = 4;

      var _dec$2, _class$2;
      var ObjectCurve = exports('ObjectCurve', (_dec$2 = ccclass('cc.ObjectCurve'), _dec$2(_class$2 = function (_KeyframeCurve) {
        _inheritsLoose(ObjectCurve, _KeyframeCurve);

        function ObjectCurve() {
          return _KeyframeCurve.apply(this, arguments) || this;
        }

        var _proto = ObjectCurve.prototype;

        _proto.evaluate = function evaluate(time) {
          var iSearch = this.searchKeyframe(time);

          if (iSearch >= 0) {
            return this._values[iSearch];
          }

          var iPrev = clamp(~iSearch - 1, 0, this._values.length - 1);
          return this._values[iPrev];
        };

        return ObjectCurve;
      }(KeyframeCurve)) || _class$2));

      var LOOK_FORWARD = 3;
      var Keyframe = function Keyframe() {
        this.time = 0;
        this.value = 0;
        this.inTangent = 0;
        this.outTangent = 0;
      };
      CCClass.fastDefine('cc.Keyframe', Keyframe, {
        time: 0,
        value: 0,
        inTangent: 0,
        outTangent: 0
      });
      var OptimizedKey = function () {
        function OptimizedKey() {
          this.index = void 0;
          this.time = void 0;
          this.endTime = void 0;
          this.coefficient = void 0;
          this.index = -1;
          this.time = 0;
          this.endTime = 0;
          this.coefficient = new Float32Array(4);
        }

        var _proto = OptimizedKey.prototype;

        _proto.evaluate = function evaluate(T) {
          var t = T - this.time;
          return evalOptCurve(t, this.coefficient);
        };

        return OptimizedKey;
      }();
      function evalOptCurve(t, coefs) {
        return t * (t * (t * coefs[0] + coefs[1]) + coefs[2]) + coefs[3];
      }
      var AnimationCurve = function () {
        function AnimationCurve(keyFrames) {
          if (keyFrames === void 0) {
            keyFrames = null;
          }

          this.cachedKey = void 0;

          if (keyFrames instanceof RealCurve) {
            this._curve = keyFrames;
          } else {
            var curve = new RealCurve();
            this._curve = curve;
            curve.preExtrapolation = ExtrapolationMode.LOOP;
            curve.postExtrapolation = ExtrapolationMode.CLAMP;

            if (!keyFrames) {
              curve.assignSorted([[0.0, {
                interpolationMode: RealInterpolationMode.CUBIC,
                value: 1.0
              }], [1.0, {
                interpolationMode: RealInterpolationMode.CUBIC,
                value: 1.0
              }]]);
            } else {
              curve.assignSorted(keyFrames.map(function (legacyKeyframe) {
                return [legacyKeyframe.time, {
                  interpolationMode: RealInterpolationMode.CUBIC,
                  value: legacyKeyframe.value,
                  leftTangent: legacyKeyframe.inTangent,
                  rightTangent: legacyKeyframe.outTangent
                }];
              }));
            }
          }

          this.cachedKey = new OptimizedKey();
        }

        var _proto2 = AnimationCurve.prototype;

        _proto2.addKey = function addKey(keyFrame) {
          if (!keyFrame) {
            this._curve.clear();
          } else {
            this._curve.addKeyFrame(keyFrame.time, {
              interpolationMode: RealInterpolationMode.CUBIC,
              value: keyFrame.value,
              leftTangent: keyFrame.inTangent,
              rightTangent: keyFrame.outTangent
            });
          }
        };

        _proto2.evaluate_slow = function evaluate_slow(time) {
          return this._curve.evaluate(time);
        };

        _proto2.evaluate = function evaluate(time) {
          var cachedKey = this.cachedKey,
              curve = this._curve;
          var nKeyframes = curve.keyFramesCount;
          var lastKeyframeIndex = nKeyframes - 1;
          var wrappedTime = time;
          var extrapolationMode = time < 0 ? curve.preExtrapolation : curve.postExtrapolation;
          var startTime = curve.getKeyframeTime(0);
          var endTime = curve.getKeyframeTime(lastKeyframeIndex);

          switch (extrapolationMode) {
            case ExtrapolationMode.LOOP:
              wrappedTime = repeat(time - startTime, endTime - startTime) + startTime;
              break;

            case ExtrapolationMode.PING_PONG:
              wrappedTime = pingPong(time - startTime, endTime - startTime) + startTime;
              break;

            case ExtrapolationMode.CLAMP:
            default:
              wrappedTime = clamp(time, startTime, endTime);
              break;
          }

          if (wrappedTime >= cachedKey.time && wrappedTime < cachedKey.endTime) {
            return cachedKey.evaluate(wrappedTime);
          }

          var leftIndex = this.findIndex(cachedKey, wrappedTime);
          var rightIndex = Math.min(leftIndex + 1, lastKeyframeIndex);
          this.calcOptimizedKey(cachedKey, leftIndex, rightIndex);
          return cachedKey.evaluate(wrappedTime);
        };

        _proto2.calcOptimizedKey = function calcOptimizedKey(optKey, leftIndex, rightIndex) {
          var lhsTime = this._curve.getKeyframeTime(leftIndex);

          var rhsTime = this._curve.getKeyframeTime(rightIndex);

          var _this$_curve$getKeyfr = this._curve.getKeyframeValue(leftIndex),
              lhsValue = _this$_curve$getKeyfr.value,
              lhsOutTangent = _this$_curve$getKeyfr.leftTangent;

          var _this$_curve$getKeyfr2 = this._curve.getKeyframeValue(rightIndex),
              rhsValue = _this$_curve$getKeyfr2.value,
              rhsInTangent = _this$_curve$getKeyfr2.rightTangent;

          optKey.index = leftIndex;
          optKey.time = lhsTime;
          optKey.endTime = rhsTime;
          var dx = rhsTime - lhsTime;
          var dy = rhsValue - lhsValue;
          var length = 1 / (dx * dx);
          var d1 = lhsOutTangent * dx;
          var d2 = rhsInTangent * dx;
          optKey.coefficient[0] = (d1 + d2 - dy - dy) * length / dx;
          optKey.coefficient[1] = (dy + dy + dy - d1 - d1 - d2) * length;
          optKey.coefficient[2] = lhsOutTangent;
          optKey.coefficient[3] = lhsValue;
        };

        _proto2.findIndex = function findIndex(optKey, t) {
          var curve = this._curve;
          var nKeyframes = curve.keyFramesCount;
          var cachedIndex = optKey.index;

          if (cachedIndex !== -1) {
            var cachedTime = curve.getKeyframeTime(cachedIndex);

            if (t > cachedTime) {
              for (var i = 0; i < LOOK_FORWARD; i++) {
                var currIndex = cachedIndex + i;

                if (currIndex + 1 < nKeyframes && curve.getKeyframeTime(currIndex + 1) > t) {
                  return currIndex;
                }
              }
            } else {
              for (var _i = 0; _i < LOOK_FORWARD; _i++) {
                var _currIndex = cachedIndex - _i;

                if (_currIndex >= 0 && curve.getKeyframeTime(_currIndex - 1) <= t) {
                  return _currIndex - 1;
                }
              }
            }
          }

          var left = 0;
          var right = nKeyframes;
          var mid;

          while (right - left > 1) {
            mid = Math.floor((left + right) / 2);

            if (curve.getKeyframeTime(mid) >= t) {
              right = mid;
            } else {
              left = mid;
            }
          }

          return left;
        };

        _createClass(AnimationCurve, [{
          key: "_internalCurve",
          get: function get() {
            return this._curve;
          }
        }, {
          key: "keyFrames",
          get: function get() {
            return Array.from(this._curve.keyframes()).map(function (_ref) {
              var time = _ref[0],
                  value = _ref[1];
              var legacyKeyframe = new Keyframe();
              legacyKeyframe.time = time;
              legacyKeyframe.value = value.value;
              legacyKeyframe.inTangent = value.leftTangent;
              legacyKeyframe.outTangent = value.rightTangent;
              return legacyKeyframe;
            });
          },
          set: function set(value) {
            this._curve.assignSorted(value.map(function (legacyCurve) {
              return [legacyCurve.time, {
                interpolationMode: RealInterpolationMode.CUBIC,
                value: legacyCurve.value,
                leftTangent: legacyCurve.inTangent,
                rightTangent: legacyCurve.outTangent
              }];
            }));
          }
        }, {
          key: "preWrapMode",
          get: function get() {
            return toLegacyWrapMode(this._curve.preExtrapolation);
          },
          set: function set(value) {
            this._curve.preExtrapolation = fromLegacyWrapMode(value);
          }
        }, {
          key: "postWrapMode",
          get: function get() {
            return toLegacyWrapMode(this._curve.postExtrapolation);
          },
          set: function set(value) {
            this._curve.postExtrapolation = fromLegacyWrapMode(value);
          }
        }]);

        return AnimationCurve;
      }();
      AnimationCurve.defaultKF = [{
        time: 0,
        value: 1,
        inTangent: 0,
        outTangent: 0
      }, {
        time: 1,
        value: 1,
        inTangent: 0,
        outTangent: 0
      }];
      CCClass.fastDefine('cc.AnimationCurve', AnimationCurve, {
        _curve: null
      });
      var WrapModeMask;

      (function (WrapModeMask) {
        WrapModeMask[WrapModeMask["Default"] = 0] = "Default";
        WrapModeMask[WrapModeMask["Normal"] = 1] = "Normal";
        WrapModeMask[WrapModeMask["Loop"] = 2] = "Loop";
        WrapModeMask[WrapModeMask["ShouldWrap"] = 4] = "ShouldWrap";
        WrapModeMask[WrapModeMask["Clamp"] = 8] = "Clamp";
        WrapModeMask[WrapModeMask["PingPong"] = 22] = "PingPong";
        WrapModeMask[WrapModeMask["Reverse"] = 36] = "Reverse";
      })(WrapModeMask || (WrapModeMask = {}));

      function fromLegacyWrapMode(legacyWrapMode) {
        switch (legacyWrapMode) {
          default:
          case WrapModeMask.Default:
          case WrapModeMask.Normal:
          case WrapModeMask.Clamp:
            return ExtrapolationMode.CLAMP;

          case WrapModeMask.PingPong:
            return ExtrapolationMode.PING_PONG;

          case WrapModeMask.Loop:
            return ExtrapolationMode.LOOP;
        }
      }

      function toLegacyWrapMode(extrapolationMode) {
        switch (extrapolationMode) {
          default:
          case ExtrapolationMode.LINEAR:
          case ExtrapolationMode.CLAMP:
            return WrapModeMask.Clamp;

          case ExtrapolationMode.PING_PONG:
            return WrapModeMask.PingPong;

          case ExtrapolationMode.LOOP:
            return WrapModeMask.Loop;
        }
      }

      function constructLegacyCurveAndConvert() {
        var curve = new RealCurve();
        curve.assignSorted([[0.0, {
          interpolationMode: RealInterpolationMode.CUBIC,
          value: 1.0
        }], [1.0, {
          interpolationMode: RealInterpolationMode.CUBIC,
          value: 1.0
        }]]);
        return curve;
      }

      var SplineMode;

      (function (SplineMode) {
        SplineMode[SplineMode["LINEAR"] = 0] = "LINEAR";
        SplineMode[SplineMode["BEZIER"] = 1] = "BEZIER";
        SplineMode[SplineMode["CATMULL_ROM"] = 2] = "CATMULL_ROM";
      })(SplineMode || (SplineMode = {}));

      var SPLINE_WHOLE_INDEX = 0xffffffff;

      var _v0 = new Vec3();

      var _v1 = new Vec3();

      var _v2 = new Vec3();

      var _v3 = new Vec3();

      var Spline = function () {
        function Spline(mode, knots) {
          if (mode === void 0) {
            mode = SplineMode.CATMULL_ROM;
          }

          if (knots === void 0) {
            knots = [];
          }

          this._type = void 0;
          this._mode = SplineMode.CATMULL_ROM;
          this._knots = [];
          this._type = enums.SHAPE_SPLINE;
          this._mode = mode;

          for (var i = 0; i < knots.length; i++) {
            this._knots[i] = new Vec3(knots[i]);
          }
        }

        Spline.create = function create(mode, knots) {
          if (knots === void 0) {
            knots = [];
          }

          return new Spline(mode, knots);
        };

        Spline.clone = function clone(s) {
          return new Spline(s.mode, s.knots);
        };

        Spline.copy = function copy(out, s) {
          out._mode = s.mode;
          out._knots.length = 0;
          var knots = s.knots;
          var length = knots.length;

          for (var i = 0; i < length; i++) {
            out._knots[i] = new Vec3(knots[i]);
          }

          return out;
        };

        var _proto = Spline.prototype;

        _proto.setModeAndKnots = function setModeAndKnots(mode, knots) {
          this._mode = mode;
          this._knots.length = 0;

          for (var i = 0; i < knots.length; i++) {
            this._knots[i] = new Vec3(knots[i]);
          }
        };

        _proto.clearKnots = function clearKnots() {
          this._knots.length = 0;
        };

        _proto.getKnotCount = function getKnotCount() {
          return this._knots.length;
        };

        _proto.addKnot = function addKnot(knot) {
          this._knots.push(new Vec3(knot));
        };

        _proto.insertKnot = function insertKnot(index, knot) {
          var item = new Vec3(knot);

          if (index >= this._knots.length) {
            this._knots.push(item);

            return;
          }

          this._knots.splice(index, 0, item);
        };

        _proto.removeKnot = function removeKnot(index) {
          assertIsTrue(index >= 0 && index < this._knots.length, 'Spline: invalid index');

          this._knots.splice(index, 1);
        };

        _proto.setKnot = function setKnot(index, knot) {
          assertIsTrue(index >= 0 && index < this._knots.length, 'Spline: invalid index');

          this._knots[index].set(knot);
        };

        _proto.getKnot = function getKnot(index) {
          assertIsTrue(index >= 0 && index < this._knots.length, 'Spline: invalid index');
          return this._knots[index];
        };

        _proto.getPoint = function getPoint(t, index) {
          if (index === void 0) {
            index = SPLINE_WHOLE_INDEX;
          }

          t = clamp(t, 0.0, 1.0);
          var segments = this.getSegments();

          if (segments === 0) {
            return new Vec3(0.0, 0.0, 0.0);
          }

          if (index === SPLINE_WHOLE_INDEX) {
            var deltaT = 1.0 / segments;
            index = Math.floor(t / deltaT);
            t = t % deltaT / deltaT;
          }

          if (index >= segments) {
            return new Vec3(this._knots[this._knots.length - 1]);
          }

          switch (this._mode) {
            case SplineMode.LINEAR:
              return Spline.calcLinear(this._knots[index], this._knots[index + 1], t);

            case SplineMode.BEZIER:
              return Spline.calcBezier(this._knots[index * 4], this._knots[index * 4 + 1], this._knots[index * 4 + 2], this._knots[index * 4 + 3], t);

            case SplineMode.CATMULL_ROM:
              {
                var v0 = index > 0 ? this._knots[index - 1] : this._knots[index];
                var v3 = index + 2 < this._knots.length ? this._knots[index + 2] : this._knots[index + 1];
                return Spline.calcCatmullRom(v0, this._knots[index], this._knots[index + 1], v3, t);
              }

            default:
              return new Vec3(0.0, 0.0, 0.0);
          }
        };

        _proto.getPoints = function getPoints(num, index) {
          if (index === void 0) {
            index = SPLINE_WHOLE_INDEX;
          }

          if (num === 0) {
            return [];
          }

          if (num === 1) {
            var point = this.getPoint(0.0, index);
            return [point];
          }

          var points = [];
          var deltaT = 1.0 / (num - 1.0);

          for (var i = 0; i < num; i++) {
            var t = i * deltaT;

            var _point = this.getPoint(t, index);

            points.push(_point);
          }

          return points;
        };

        _proto.getSegments = function getSegments() {
          var count = this._knots.length;

          switch (this._mode) {
            case SplineMode.LINEAR:
            case SplineMode.CATMULL_ROM:
              if (count < 2) {
                warnID(14300);
                return 0;
              }

              return count - 1;

            case SplineMode.BEZIER:
              if (count < 4 || count % 4 != 0) {
                warnID(14301);
                return 0;
              }

              return count / 4;

            default:
              assertIsTrue(false, 'Spline error: invalid mode');
          }
        };

        Spline.calcLinear = function calcLinear(v0, v1, t) {
          var result = new Vec3();
          Vec3.multiplyScalar(_v0, v0, 1.0 - t);
          Vec3.multiplyScalar(_v1, v1, t);
          Vec3.add(result, _v0, _v1);
          return result;
        };

        Spline.calcBezier = function calcBezier(v0, v1, v2, v3, t) {
          var result = new Vec3();
          var s = 1.0 - t;
          Vec3.multiplyScalar(_v0, v0, s * s * s);
          Vec3.multiplyScalar(_v1, v1, 3.0 * t * s * s);
          Vec3.multiplyScalar(_v2, v2, 3.0 * t * t * s);
          Vec3.multiplyScalar(_v3, v3, t * t * t);
          Vec3.add(_v0, _v0, _v1);
          Vec3.add(_v2, _v2, _v3);
          Vec3.add(result, _v0, _v2);
          return result;
        };

        Spline.calcCatmullRom = function calcCatmullRom(v0, v1, v2, v3, t) {
          var result = new Vec3();
          var t2 = t * t;
          var t3 = t2 * t;
          Vec3.multiplyScalar(_v0, v0, -0.5 * t3 + t2 - 0.5 * t);
          Vec3.multiplyScalar(_v1, v1, 1.5 * t3 - 2.5 * t2 + 1.0);
          Vec3.multiplyScalar(_v2, v2, -1.5 * t3 + 2.0 * t2 + 0.5 * t);
          Vec3.multiplyScalar(_v3, v3, 0.5 * t3 - 0.5 * t2);
          Vec3.add(_v0, _v0, _v1);
          Vec3.add(_v2, _v2, _v3);
          Vec3.add(result, _v0, _v2);
          return result;
        };

        _createClass(Spline, [{
          key: "type",
          get: function get() {
            return this._type;
          }
        }, {
          key: "mode",
          get: function get() {
            return this._mode;
          }
        }, {
          key: "knots",
          get: function get() {
            return this._knots;
          }
        }]);

        return Spline;
      }();

      var ERaycastMode;

      (function (ERaycastMode) {
        ERaycastMode[ERaycastMode["ALL"] = 0] = "ALL";
        ERaycastMode[ERaycastMode["CLOSEST"] = 1] = "CLOSEST";
        ERaycastMode[ERaycastMode["ANY"] = 2] = "ANY";
      })(ERaycastMode || (ERaycastMode = {}));

      var geometry = /*#__PURE__*/Object.freeze({
        __proto__: null,
        distance: distance,
        enums: enums,
        intersect: intersect,
        Line: Line,
        Plane: Plane,
        Ray: Ray,
        Triangle: Triangle,
        Sphere: Sphere,
        AABB: AABB,
        OBB: OBB,
        Capsule: Capsule,
        Frustum: Frustum,
        Keyframe: Keyframe,
        AnimationCurve: AnimationCurve,
        get WrapModeMask () { return WrapModeMask; },
        get SplineMode () { return SplineMode; },
        Spline: Spline,
        constructLegacyCurveAndConvert: constructLegacyCurveAndConvert,
        OptimizedKey: OptimizedKey,
        evalOptCurve: evalOptCurve,
        get ERaycastMode () { return ERaycastMode; }
      });
      exports('geometry', geometry);

      var ContainerManager = function () {
        function ContainerManager() {
          this._pools = [];
          this._lastShrinkPassed = 0;
          this.shrinkTimeSpan = 5;
        }

        var _proto = ContainerManager.prototype;

        _proto.addContainer = function addContainer(pool) {
          if (pool._poolHandle !== -1) return;
          pool._poolHandle = this._pools.length;

          this._pools.push(pool);
        };

        _proto.removeContainer = function removeContainer(pool) {
          if (pool._poolHandle === -1) return;
          this._pools[this._pools.length - 1]._poolHandle = pool._poolHandle;
          fastRemoveAt(this._pools, pool._poolHandle);
          pool._poolHandle = -1;
        };

        _proto.tryShrink = function tryShrink() {
          for (var i = 0; i < this._pools.length; i++) {
            this._pools[i].tryShrink();
          }
        };

        _proto.update = function update(dt) {
          this._lastShrinkPassed += dt;

          if (this._lastShrinkPassed > this.shrinkTimeSpan) {
            this.tryShrink();
            this._lastShrinkPassed -= this.shrinkTimeSpan;
          }
        };

        return ContainerManager;
      }();

      var containerManager = new ContainerManager();

      var ScalableContainer = function () {
        function ScalableContainer() {
          this._poolHandle = -1;
          containerManager.addContainer(this);
        }

        var _proto = ScalableContainer.prototype;

        _proto.destroy = function destroy() {
          containerManager.removeContainer(this);
        };

        return ScalableContainer;
      }();

      var Pool$1 = exports('Pool', function (_ScalableContainer) {
        _inheritsLoose(Pool, _ScalableContainer);

        function Pool(ctor, elementsPerBatch, dtor) {
          var _this;

          _this = _ScalableContainer.call(this) || this;
          _this._ctor = void 0;
          _this._elementsPerBatch = void 0;
          _this._nextAvail = void 0;
          _this._freePool = [];
          _this._dtor = void 0;
          _this._ctor = ctor;
          _this._dtor = dtor || null;
          _this._elementsPerBatch = Math.max(elementsPerBatch, 1);
          _this._nextAvail = _this._elementsPerBatch - 1;

          for (var i = 0; i < _this._elementsPerBatch; ++i) {
            _this._freePool.push(ctor());
          }

          return _this;
        }

        var _proto = Pool.prototype;

        _proto.alloc = function alloc() {
          if (this._nextAvail < 0) {
            this._freePool.length = this._elementsPerBatch;

            for (var i = 0; i < this._elementsPerBatch; i++) {
              this._freePool[i] = this._ctor();
            }

            this._nextAvail = this._elementsPerBatch - 1;
          }

          return this._freePool[this._nextAvail--];
        };

        _proto.free = function free(obj) {
          this._freePool[++this._nextAvail] = obj;
        };

        _proto.freeArray = function freeArray(objs) {
          this._freePool.length = this._nextAvail + 1;
          Array.prototype.push.apply(this._freePool, objs);
          this._nextAvail += objs.length;
        };

        _proto.tryShrink = function tryShrink() {
          if (this._nextAvail >> 1 > this._elementsPerBatch) {
            if (this._dtor) {
              for (var i = this._nextAvail >> 1; i <= this._nextAvail; i++) {
                this._dtor(this._freePool[i]);
              }
            }

            this._freePool.length = this._nextAvail >> 1;
            this._nextAvail = this._freePool.length - 1;
          }
        };

        _proto.destroy = function destroy() {
          var dtor = arguments.length > 0 ? arguments[0] : null;

          if (dtor) {
            warnID(14100);
          }

          var readDtor = dtor || this._dtor;

          if (readDtor) {
            for (var i = 0; i <= this._nextAvail; i++) {
              readDtor(this._freePool[i]);
            }
          }

          this._freePool.length = 0;
          this._nextAvail = -1;

          _ScalableContainer.prototype.destroy.call(this);
        };

        return Pool;
      }(ScalableContainer));

      var RecyclePool = exports('RecyclePool', function (_ScalableContainer) {
        _inheritsLoose(RecyclePool, _ScalableContainer);

        function RecyclePool(fn, size, dtor) {
          var _this;

          _this = _ScalableContainer.call(this) || this;
          _this._fn = void 0;
          _this._dtor = null;
          _this._count = 0;
          _this._data = void 0;
          _this._initSize = 0;
          _this._fn = fn;
          _this._dtor = dtor || null;
          _this._data = new Array(size);
          _this._initSize = size;

          for (var i = 0; i < size; ++i) {
            _this._data[i] = fn();
          }

          return _this;
        }

        var _proto = RecyclePool.prototype;

        _proto.reset = function reset() {
          this._count = 0;
        };

        _proto.resize = function resize(size) {
          if (size > this._data.length) {
            for (var i = this._data.length; i < size; ++i) {
              this._data[i] = this._fn();
            }
          }
        };

        _proto.add = function add() {
          if (this._count >= this._data.length) {
            this.resize(this._data.length << 1);
          }

          return this._data[this._count++];
        };

        _proto.destroy = function destroy() {
          if (this._dtor) {
            for (var i = 0; i < this._data.length; i++) {
              this._dtor(this._data[i]);
            }
          }

          this._data.length = 0;
          this._count = 0;

          _ScalableContainer.prototype.destroy.call(this);
        };

        _proto.tryShrink = function tryShrink() {
          if (this._data.length >> 2 > this._count) {
            var length = Math.max(this._initSize, this._data.length >> 1);

            if (this._dtor) {
              for (var i = length; i < this._data.length; i++) {
                this._dtor(this._data[i]);
              }
            }

            this._data.length = length;
          }
        };

        _proto.removeAt = function removeAt(idx) {
          if (idx >= this._count) {
            return;
          }

          var last = this._count - 1;
          var tmp = this._data[idx];
          this._data[idx] = this._data[last];
          this._data[last] = tmp;
          this._count -= 1;
        };

        _createClass(RecyclePool, [{
          key: "length",
          get: function get() {
            return this._count;
          }
        }, {
          key: "data",
          get: function get() {
            return this._data;
          }
        }]);

        return RecyclePool;
      }(ScalableContainer));

      var CachedArray = exports('CachedArray', function (_ScalableContainer) {
        _inheritsLoose(CachedArray, _ScalableContainer);

        function CachedArray(length, compareFn) {
          var _this;

          _this = _ScalableContainer.call(this) || this;
          _this.array = void 0;
          _this.length = 0;
          _this._compareFn = void 0;
          _this._initSize = 0;
          _this.array = new Array(length);
          _this._initSize = length;
          _this.length = 0;
          _this._compareFn = compareFn;
          return _this;
        }

        var _proto = CachedArray.prototype;

        _proto.push = function push(item) {
          this.array[this.length++] = item;
        };

        _proto.pop = function pop() {
          return this.array[--this.length];
        };

        _proto.get = function get(idx) {
          return this.array[idx];
        };

        _proto.clear = function clear() {
          this.length = 0;
        };

        _proto.destroy = function destroy() {
          this.length = 0;
          this.array.length = 0;

          _ScalableContainer.prototype.destroy.call(this);
        };

        _proto.tryShrink = function tryShrink() {
          if (this.array.length >> 2 > this.length) {
            this.array.length = Math.max(this._initSize, this.array.length >> 1);
          }
        };

        _proto.sort = function sort() {
          this.array.length = this.length;
          this.array.sort(this._compareFn);
        };

        _proto.concat = function concat(array) {
          for (var i = 0; i < array.length; ++i) {
            this.array[this.length++] = array[i];
          }
        };

        _proto.fastRemove = function fastRemove(idx) {
          if (idx >= this.length || idx < 0) {
            return;
          }

          var last = --this.length;
          this.array[idx] = this.array[last];
        };

        _proto.indexOf = function indexOf(val) {
          for (var i = 0, len = this.length; i < len; ++i) {
            if (this.array[i] === val) {
              return i;
            }
          }

          return -1;
        };

        return CachedArray;
      }(ScalableContainer));

      var index = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Pool: Pool$1,
        RecyclePool: RecyclePool,
        CachedArray: CachedArray
      });
      exports('memop', index);

      var defaultLogTimes = 10;
      function setDefaultLogTimes(times) {
        if (times > 0) {
          defaultLogTimes = times;
        }
      }
      var replaceProperty;
      var removeProperty;
      var markAsWarning;
      var replacePropertyLog;
      var markAsWarningLog;
      var removePropertyLog;
      var messageID = 0;
      var messageMap = new Map();

      replacePropertyLog = function replacePropertyLog(n, dp, n2, newp, f, id, s) {
        var item = messageMap.get(id);

        if (item && item.logTimes > item.count) {
          f("'%s' is deprecated, please use '%s' instead. " + s, n + "." + dp, n2 + "." + newp);
          item.count++;
        }
      };

      replaceProperty = exports('replaceProperty', function replaceProperty(owner, ownerName, properties) {
        if (owner == null) return;
        properties.forEach(function (item) {
          var id = messageID++;
          messageMap.set(id, {
            id: id,
            count: 0,
            logTimes: item.logTimes !== undefined ? item.logTimes : defaultLogTimes
          });
          var target = item.target != null ? item.target : owner;
          var newName = item.newName != null ? item.newName : item.name;
          var targetName = item.targetName != null ? item.targetName : ownerName;
          var sameTarget = target === owner;
          var suggest = item.suggest ? "(" + item.suggest + ")" : '';

          if (item.customFunction != null) {
            owner[item.name] = function () {
              var _ref;

              replacePropertyLog(ownerName, item.name, targetName, newName, warn, id, suggest);
              return (_ref = item.customFunction).call.apply(_ref, [this].concat(Array.prototype.slice.call(arguments)));
            };
          } else if (item.customSetter != null || item.customGetter != null) {
            var hasSetter = item.customSetter != null;
            var hasGetter = item.customGetter != null;

            if (hasSetter && hasGetter) {
              Object.defineProperty(owner, item.name, {
                get: function get() {
                  replacePropertyLog(ownerName, item.name, targetName, newName, warn, id, suggest);
                  return item.customGetter.call(this);
                },
                set: function set(v) {
                  replacePropertyLog(ownerName, item.name, targetName, newName, warn, id, suggest);
                  item.customSetter.call(this, v);
                },
                enumerable: false
              });
            } else if (hasSetter) {
              Object.defineProperty(owner, item.name, {
                set: function set(v) {
                  replacePropertyLog(ownerName, item.name, targetName, newName, warn, id, suggest);
                  item.customSetter.call(this, v);
                },
                enumerable: false
              });
            } else if (hasGetter) {
              Object.defineProperty(owner, item.name, {
                get: function get() {
                  replacePropertyLog(ownerName, item.name, targetName, newName, warn, id, suggest);
                  return item.customGetter.call(this);
                },
                enumerable: false
              });
            }
          } else {
            Object.defineProperty(owner, item.name, {
              get: function get() {
                replacePropertyLog(ownerName, item.name, targetName, newName, warn, id, suggest);
                return sameTarget ? this[newName] : target[newName];
              },
              set: function set(v) {
                replacePropertyLog(ownerName, item.name, targetName, newName, warn, id, suggest);

                if (sameTarget) {
                  this[newName] = v;
                } else {
                  target[newName] = v;
                }
              },
              enumerable: false
            });
          }
        });
      });

      removePropertyLog = function removePropertyLog(n, dp, f, id, s) {
        var item = messageMap.get(id);

        if (item && item.logTimes > item.count) {
          f("'%s' has been removed. " + s, n + "." + dp);
          item.count++;
        }
      };

      removeProperty = exports('removeProperty', function removeProperty(owner, ownerName, properties) {
        if (owner == null) return;
        properties.forEach(function (item) {
          var id = messageID++;
          messageMap.set(id, {
            id: id,
            count: 0,
            logTimes: item.logTimes !== undefined ? item.logTimes : defaultLogTimes
          });
          var suggest = item.suggest ? "(" + item.suggest + ")" : '';
          Object.defineProperty(owner, item.name, {
            get: function get() {
              return removePropertyLog(ownerName, item.name, error, id, suggest);
            },
            set: function set() {
              removePropertyLog(ownerName, item.name, error, id, suggest);
            },
            enumerable: false
          });
        });
      });

      markAsWarningLog = function markAsWarningLog(n, dp, f, id, s) {
        var item = messageMap.get(id);

        if (item && item.logTimes > item.count) {
          f("'%s' is deprecated. " + s, n + "." + dp);
          item.count++;
        }
      };

      markAsWarning = exports('markAsWarning', function markAsWarning(owner, ownerName, properties) {
        if (owner == null) return;

        var _defaultGetSet = function _defaultGetSet(d, n, dp, f, id, s) {
          if (d.get) {
            var oldGet = d.get;

            d.get = function () {
              markAsWarningLog(n, dp, f, id, s);
              return oldGet.call(this);
            };
          }

          if (d.set) {
            var oldSet = d.set;

            d.set = function (v) {
              markAsWarningLog(n, dp, f, id, s);
              oldSet.call(this, v);
            };
          }

          Object.defineProperty(owner, dp, d);
        };

        properties.forEach(function (item) {
          var deprecatedProp = item.name;
          var descriptor = Object.getOwnPropertyDescriptor(owner, deprecatedProp);

          if (!descriptor || !descriptor.configurable) {
            return;
          }

          var id = messageID++;
          messageMap.set(id, {
            id: id,
            count: 0,
            logTimes: item.logTimes !== undefined ? item.logTimes : defaultLogTimes
          });
          var suggest = item.suggest ? "(" + item.suggest + ")" : '';

          if (typeof descriptor.value !== 'undefined') {
            if (typeof descriptor.value === 'function') {
              var oldValue = descriptor.value;

              owner[deprecatedProp] = function () {
                markAsWarningLog(ownerName, deprecatedProp, warn, id, suggest);
                return oldValue.call.apply(oldValue, [this].concat(Array.prototype.slice.call(arguments)));
              };
            } else {
              var _oldValue = descriptor.value;
              Object.defineProperty(owner, deprecatedProp, {
                configurable: true,
                get: function get() {
                  markAsWarningLog(ownerName, deprecatedProp, warn, id, suggest);
                  return _oldValue;
                }
              });

              if (descriptor.writable) {
                Object.defineProperty(owner, deprecatedProp, {
                  set: function set(value) {
                    markAsWarningLog(ownerName, deprecatedProp, warn, id, suggest);
                    _oldValue = value;
                  }
                });
              }
            }
          } else {
            _defaultGetSet(descriptor, ownerName, deprecatedProp, warn, id, suggest);
          }

          Object.defineProperty(owner, deprecatedProp, {
            enumerable: false
          });
        });
      });

      var topLevelDeprecateList = {};
      function deprecateModuleExportedName(deprecateList) {
        for (var deprecateName in deprecateList) {
          var deprecateInfo = deprecateList[deprecateName];
          topLevelDeprecateList[deprecateName] = deprecateInfo;
        }
      }

      function _checkObsoleteByName(checkName) {
        var deprecateInfo = topLevelDeprecateList[checkName];

        if (!deprecateInfo) {
          return;
        }

        var newName = deprecateInfo.newName,
            since = deprecateInfo.since,
            removed = deprecateInfo.removed;

        if (removed) {
          if (newName) {
            errorID(16003, checkName, since, newName);
          } else {
            errorID(16002, checkName, since);
          }
        } else if (newName) {
          warnID(16001, checkName, since, newName);
        } else {
          warnID(16000, checkName, since);
        }
      }

      function __checkObsolete__(checkList) {
        for (var _iterator = _createForOfIteratorHelperLoose(checkList), _step; !(_step = _iterator()).done;) {
          var checkName = _step.value;

          _checkObsoleteByName(checkName);
        }
      }

      var _cachedProxy;

      function __checkObsoleteInNamespace__(ccNamespace) {
        if (!_cachedProxy) {
          if (typeof Proxy === 'undefined') {
            _cachedProxy = {};
          } else {
            _cachedProxy = new Proxy(ccNamespace, {
              get: function get(target, name, receiver) {
                _checkObsoleteByName(name);

                return Reflect.get(target, name, receiver);
              }
            });
          }
        }

        return _cachedProxy;
      }

      deprecateModuleExportedName({
        replaceProperty: {
          since: '3.6.0',
          removed: false
        },
        removeProperty: {
          since: '3.6.0',
          removed: false
        },
        markAsWarning: {
          since: '3.6.0',
          removed: false
        },
        setDefaultLogTimes: {
          since: '3.6.0',
          removed: false
        }
      });

      var fastRemoveAt$1 = fastRemoveAt;

      function empty() {}

      var CallbackInfo = function () {
        function CallbackInfo() {
          this.callback = empty;
          this.target = undefined;
          this.once = false;
        }

        var _proto = CallbackInfo.prototype;

        _proto.set = function set(callback, target, once) {
          this.callback = callback || empty;
          this.target = target;
          this.once = !!once;
        };

        _proto.reset = function reset() {
          this.target = undefined;
          this.callback = empty;
          this.once = false;
        };

        _proto.check = function check() {
          if (isCCObject(this.target) && !isValid(this.target, true)) {
            return false;
          } else {
            return true;
          }
        };

        return CallbackInfo;
      }();

      var callbackInfoPool = new Pool$1(function () {
        return new CallbackInfo();
      }, 32);
      var CallbackList = function () {
        function CallbackList() {
          this.callbackInfos = [];
          this.isInvoking = false;
          this.containCanceled = false;
        }

        var _proto2 = CallbackList.prototype;

        _proto2.removeByCallback = function removeByCallback(cb) {
          for (var i = 0; i < this.callbackInfos.length; ++i) {
            var info = this.callbackInfos[i];

            if (info && info.callback === cb) {
              info.reset();
              callbackInfoPool.free(info);
              fastRemoveAt$1(this.callbackInfos, i);
              --i;
            }
          }
        };

        _proto2.removeByTarget = function removeByTarget(target) {
          for (var i = 0; i < this.callbackInfos.length; ++i) {
            var info = this.callbackInfos[i];

            if (info && info.target === target) {
              info.reset();
              callbackInfoPool.free(info);
              fastRemoveAt$1(this.callbackInfos, i);
              --i;
            }
          }
        };

        _proto2.cancel = function cancel(index) {
          var info = this.callbackInfos[index];

          if (info) {
            info.reset();

            if (this.isInvoking) {
              this.callbackInfos[index] = null;
            } else {
              fastRemoveAt$1(this.callbackInfos, index);
            }

            callbackInfoPool.free(info);
          }

          this.containCanceled = true;
        };

        _proto2.cancelAll = function cancelAll() {
          for (var i = 0; i < this.callbackInfos.length; i++) {
            var info = this.callbackInfos[i];

            if (info) {
              info.reset();
              callbackInfoPool.free(info);
              this.callbackInfos[i] = null;
            }
          }

          this.containCanceled = true;
        };

        _proto2.purgeCanceled = function purgeCanceled() {
          for (var i = this.callbackInfos.length - 1; i >= 0; --i) {
            var info = this.callbackInfos[i];

            if (!info) {
              fastRemoveAt$1(this.callbackInfos, i);
            }
          }

          this.containCanceled = false;
        };

        _proto2.clear = function clear() {
          this.cancelAll();
          this.callbackInfos.length = 0;
          this.isInvoking = false;
          this.containCanceled = false;
        };

        return CallbackList;
      }();
      var MAX_SIZE = 16;
      var callbackListPool = new Pool$1(function () {
        return new CallbackList();
      }, MAX_SIZE);
      var CallbacksInvoker = exports('CallbacksInvoker', function () {
        function CallbacksInvoker() {
          this._callbackTable = createMap(true);
          this._offCallback = void 0;
        }

        var _proto3 = CallbacksInvoker.prototype;

        _proto3.on = function on(key, callback, target, once) {
          if (!this.hasEventListener(key, callback, target)) {
            var list = this._callbackTable[key];

            if (!list) {
              list = this._callbackTable[key] = callbackListPool.alloc();
            }

            var info = callbackInfoPool.alloc();
            info.set(callback, target, once);
            list.callbackInfos.push(info);
          }

          return callback;
        };

        _proto3.hasEventListener = function hasEventListener(key, callback, target) {
          var list = this._callbackTable && this._callbackTable[key];

          if (!list) {
            return false;
          }

          var infos = list.callbackInfos;

          if (!callback) {
            if (list.isInvoking) {
              for (var i = 0; i < infos.length; ++i) {
                if (infos[i]) {
                  return true;
                }
              }

              return false;
            } else {
              return infos.length > 0;
            }
          }

          for (var _i = 0; _i < infos.length; ++_i) {
            var info = infos[_i];

            if (info && info.check() && info.callback === callback && info.target === target) {
              return true;
            }
          }

          return false;
        };

        _proto3.removeAll = function removeAll(keyOrTarget) {
          var type = typeof keyOrTarget;

          if (type === 'string' || type === 'number') {
            var list = this._callbackTable && this._callbackTable[keyOrTarget];

            if (list) {
              if (list.isInvoking) {
                list.cancelAll();
              } else {
                list.clear();
                callbackListPool.free(list);
                delete this._callbackTable[keyOrTarget];
              }
            }
          } else if (keyOrTarget) {
            for (var key in this._callbackTable) {
              var _list = this._callbackTable[key];

              if (_list.isInvoking) {
                var infos = _list.callbackInfos;

                for (var i = 0; i < infos.length; ++i) {
                  var info = infos[i];

                  if (info && info.target === keyOrTarget) {
                    _list.cancel(i);
                  }
                }
              } else {
                _list.removeByTarget(keyOrTarget);
              }
            }
          }
        };

        _proto3.off = function off(key, callback, target) {
          var _this$_offCallback;

          var list = this._callbackTable && this._callbackTable[key];

          if (list) {
            var infos = list.callbackInfos;

            if (callback) {
              for (var i = 0; i < infos.length; ++i) {
                var info = infos[i];

                if (info && info.callback === callback && info.target === target) {
                  list.cancel(i);
                  break;
                }
              }
            } else {
              this.removeAll(key);
            }
          }

          (_this$_offCallback = this._offCallback) === null || _this$_offCallback === void 0 ? void 0 : _this$_offCallback.call(this);
        };

        _proto3.emit = function emit(key, arg0, arg1, arg2, arg3, arg4) {
          var list = this._callbackTable && this._callbackTable[key];

          if (list) {
            var rootInvoker = !list.isInvoking;
            list.isInvoking = true;
            var infos = list.callbackInfos;

            for (var i = 0, len = infos.length; i < len; ++i) {
              var info = infos[i];

              if (info) {
                var callback = info.callback;
                var target = info.target;

                if (info.once) {
                  this.off(key, callback, target);
                }

                if (!info.check()) {
                  this.off(key, callback, target);
                } else if (target) {
                  callback.call(target, arg0, arg1, arg2, arg3, arg4);
                } else {
                  callback(arg0, arg1, arg2, arg3, arg4);
                }
              }
            }

            if (rootInvoker) {
              list.isInvoking = false;

              if (list.containCanceled) {
                list.purgeCanceled();
              }
            }
          }
        };

        _proto3.clear = function clear() {
          for (var key in this._callbackTable) {
            var list = this._callbackTable[key];

            if (list) {
              list.clear();
              callbackListPool.free(list);
              delete this._callbackTable[key];
            }
          }
        };

        _proto3._registerOffCallback = function _registerOffCallback(cb) {
          this._offCallback = cb;
        };

        return CallbacksInvoker;
      }());

      function Eventify(base) {
        var Eventified = function (_ref) {
          _inheritsLoose(Eventified, _ref);

          function Eventified() {
            var _this;

            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            _this = _ref.call.apply(_ref, [this].concat(args)) || this;
            _this._callbackTable = createMap(true);
            return _this;
          }

          var _proto = Eventified.prototype;

          _proto.once = function once(type, callback, target) {
            return this.on(type, callback, target, true);
          };

          _proto.targetOff = function targetOff(typeOrTarget) {
            this.removeAll(typeOrTarget);
          };

          return Eventified;
        }(base);

        var callbacksInvokerPrototype = CallbacksInvoker.prototype;
        var propertyKeys = Object.getOwnPropertyNames(callbacksInvokerPrototype).concat(Object.getOwnPropertySymbols(callbacksInvokerPrototype));

        for (var iPropertyKey = 0; iPropertyKey < propertyKeys.length; ++iPropertyKey) {
          var propertyKey = propertyKeys[iPropertyKey];

          if (!(propertyKey in Eventified.prototype)) {
            var propertyDescriptor = Object.getOwnPropertyDescriptor(callbacksInvokerPrototype, propertyKey);

            if (propertyDescriptor) {
              Object.defineProperty(Eventified.prototype, propertyKey, propertyDescriptor);
            }
          }
        }

        return Eventified;
      }

      var Empty$1 = function Empty() {};

      var EventTarget = exports('EventTarget', Eventify(Empty$1));
      legacyCC.EventTarget = EventTarget;

      var AsyncDelegate = exports('AsyncDelegate', function () {
        function AsyncDelegate() {
          this._delegates = [];
        }

        var _proto = AsyncDelegate.prototype;

        _proto.add = function add(callback) {
          if (!this._delegates.includes(callback)) {
            this._delegates.push(callback);
          }
        };

        _proto.hasListener = function hasListener(callback) {
          return this._delegates.includes(callback);
        };

        _proto.remove = function remove(callback) {
          fastRemove(this._delegates, callback);
        };

        _proto.dispatch = function dispatch() {
          var _arguments = arguments;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          return Promise.all(this._delegates.map(function (func) {
            return func.apply(void 0, _arguments);
          }).filter(Boolean));
        };

        return AsyncDelegate;
      }());

      var BrowserType;

      (function (BrowserType) {
        BrowserType["UNKNOWN"] = "unknown";
        BrowserType["WECHAT"] = "wechat";
        BrowserType["ANDROID"] = "androidbrowser";
        BrowserType["IE"] = "ie";
        BrowserType["EDGE"] = "edge";
        BrowserType["QQ"] = "qqbrowser";
        BrowserType["MOBILE_QQ"] = "mqqbrowser";
        BrowserType["UC"] = "ucbrowser";
        BrowserType["UCBS"] = "ucbs";
        BrowserType["BROWSER_360"] = "360browser";
        BrowserType["BAIDU_APP"] = "baiduboxapp";
        BrowserType["BAIDU"] = "baidubrowser";
        BrowserType["MAXTHON"] = "maxthon";
        BrowserType["OPERA"] = "opera";
        BrowserType["OUPENG"] = "oupeng";
        BrowserType["MIUI"] = "miuibrowser";
        BrowserType["FIREFOX"] = "firefox";
        BrowserType["SAFARI"] = "safari";
        BrowserType["CHROME"] = "chrome";
        BrowserType["LIEBAO"] = "liebao";
        BrowserType["QZONE"] = "qzone";
        BrowserType["SOUGOU"] = "sogou";
        BrowserType["HUAWEI"] = "huawei";
      })(BrowserType || (BrowserType = {}));

      var Language;

      (function (Language) {
        Language["UNKNOWN"] = "unknown";
        Language["ENGLISH"] = "en";
        Language["CHINESE"] = "zh";
        Language["FRENCH"] = "fr";
        Language["ITALIAN"] = "it";
        Language["GERMAN"] = "de";
        Language["SPANISH"] = "es";
        Language["DUTCH"] = "du";
        Language["RUSSIAN"] = "ru";
        Language["KOREAN"] = "ko";
        Language["JAPANESE"] = "ja";
        Language["HUNGARIAN"] = "hu";
        Language["PORTUGUESE"] = "pt";
        Language["ARABIC"] = "ar";
        Language["NORWEGIAN"] = "no";
        Language["POLISH"] = "pl";
        Language["TURKISH"] = "tr";
        Language["UKRAINIAN"] = "uk";
        Language["ROMANIAN"] = "ro";
        Language["BULGARIAN"] = "bg";
        Language["HINDI"] = "hi";
      })(Language || (Language = {}));

      var NetworkType;

      (function (NetworkType) {
        NetworkType[NetworkType["NONE"] = 0] = "NONE";
        NetworkType[NetworkType["LAN"] = 1] = "LAN";
        NetworkType[NetworkType["WWAN"] = 2] = "WWAN";
      })(NetworkType || (NetworkType = {}));

      var OS;

      (function (OS) {
        OS["UNKNOWN"] = "Unknown";
        OS["IOS"] = "iOS";
        OS["ANDROID"] = "Android";
        OS["WINDOWS"] = "Windows";
        OS["LINUX"] = "Linux";
        OS["OSX"] = "OS X";
        OS["OHOS"] = "OHOS";
      })(OS || (OS = {}));

      var Platform;

      (function (Platform) {
        Platform["UNKNOWN"] = "UNKNOWN";
        Platform["EDITOR_PAGE"] = "EDITOR_PAGE";
        Platform["EDITOR_CORE"] = "EDITOR_CORE";
        Platform["MOBILE_BROWSER"] = "MOBILE_BROWSER";
        Platform["DESKTOP_BROWSER"] = "DESKTOP_BROWSER";
        Platform["WIN32"] = "WIN32";
        Platform["ANDROID"] = "ANDROID";
        Platform["IOS"] = "IOS";
        Platform["MACOS"] = "MACOS";
        Platform["OHOS"] = "OHOS";
        Platform["WECHAT_GAME"] = "WECHAT_GAME";
        Platform["BAIDU_MINI_GAME"] = "BAIDU_MINI_GAME";
        Platform["XIAOMI_QUICK_GAME"] = "XIAOMI_QUICK_GAME";
        Platform["ALIPAY_MINI_GAME"] = "ALIPAY_MINI_GAME";
        Platform["TAOBAO_CREATIVE_APP"] = "TAOBAO_CREATIVE_APP";
        Platform["BYTEDANCE_MINI_GAME"] = "BYTEDANCE_MINI_GAME";
        Platform["OPPO_MINI_GAME"] = "OPPO_MINI_GAME";
        Platform["VIVO_MINI_GAME"] = "VIVO_MINI_GAME";
        Platform["HUAWEI_QUICK_GAME"] = "HUAWEI_QUICK_GAME";
        Platform["COCOSPLAY"] = "COCOSPLAY";
        Platform["LINKSURE_MINI_GAME"] = "LINKSURE_MINI_GAME";
        Platform["QTT_MINI_GAME"] = "QTT_MINI_GAME";
      })(Platform || (Platform = {}));

      var Feature;

      (function (Feature) {
        Feature["WEBP"] = "WEBP";
        Feature["IMAGE_BITMAP"] = "IMAGE_BITMAP";
        Feature["WEB_VIEW"] = "WEB_VIEW";
        Feature["VIDEO_PLAYER"] = "VIDEO_PLAYER";
        Feature["SAFE_AREA"] = "SAFE_AREA";
        Feature["INPUT_TOUCH"] = "INPUT_TOUCH";
        Feature["EVENT_KEYBOARD"] = "EVENT_KEYBOARD";
        Feature["EVENT_MOUSE"] = "EVENT_MOUSE";
        Feature["EVENT_TOUCH"] = "EVENT_TOUCH";
        Feature["EVENT_ACCELEROMETER"] = "EVENT_ACCELEROMETER";
        Feature["EVENT_GAMEPAD"] = "EVENT_GAMEPAD";
        Feature["EVENT_HANDLE"] = "EVENT_HANDLE";
        Feature["EVENT_HMD"] = "EVENT_HMD";
        Feature["EVENT_HANDHELD"] = "EVENT_HANDHELD";
      })(Feature || (Feature = {}));

      var SystemInfo = function (_EventTarget) {
        _inheritsLoose(SystemInfo, _EventTarget);

        function SystemInfo() {
          var _nav$getBattery, _this$_featureMap;

          var _this;

          _this = _EventTarget.call(this) || this;
          _this.networkType = void 0;
          _this.isNative = void 0;
          _this.isBrowser = void 0;
          _this.isMobile = void 0;
          _this.isLittleEndian = void 0;
          _this.platform = void 0;
          _this.language = void 0;
          _this.nativeLanguage = void 0;
          _this.os = void 0;
          _this.osVersion = void 0;
          _this.osMainVersion = void 0;
          _this.browserType = void 0;
          _this.browserVersion = void 0;
          _this.isXR = void 0;
          _this._battery = void 0;
          _this._featureMap = void 0;
          _this._initPromise = void 0;
          var nav = window.navigator;
          var ua = nav.userAgent.toLowerCase();
          (_nav$getBattery = nav.getBattery) === null || _nav$getBattery === void 0 ? void 0 : _nav$getBattery.call(nav).then(function (battery) {
            _this._battery = battery;
          });
          _this.networkType = NetworkType.LAN;
          _this.isNative = false;
          _this.isBrowser = true;

          {
            _this.isMobile = /mobile|android|iphone|ipad/.test(ua);
            _this.platform = _this.isMobile ? Platform.MOBILE_BROWSER : Platform.DESKTOP_BROWSER;
          }

          _this.isLittleEndian = function () {
            var buffer = new ArrayBuffer(2);
            new DataView(buffer).setInt16(0, 256, true);
            return new Int16Array(buffer)[0] === 256;
          }();

          var currLanguage = nav.language;
          _this.nativeLanguage = currLanguage.toLowerCase();
          currLanguage = currLanguage || nav.browserLanguage;
          currLanguage = currLanguage ? currLanguage.split('-')[0] : Language.ENGLISH;
          _this.language = currLanguage;
          var isAndroid = false;
          var iOS = false;
          var osVersion = '';
          var osMajorVersion = 0;
          var uaResult = /android\s*(\d+(?:\.\d+)*)/i.exec(ua) || /android\s*(\d+(?:\.\d+)*)/i.exec(nav.platform);

          if (uaResult) {
            isAndroid = true;
            osVersion = uaResult[1] || '';
            osMajorVersion = parseInt(osVersion) || 0;
          }

          uaResult = /(iPad|iPhone|iPod).*OS ((\d+_?){2,3})/i.exec(ua);

          if (uaResult) {
            iOS = true;
            osVersion = uaResult[2] || '';
            osMajorVersion = parseInt(osVersion) || 0;
          } else if (/(iPhone|iPad|iPod)/.exec(nav.platform) || nav.platform === 'MacIntel' && nav.maxTouchPoints && nav.maxTouchPoints > 1) {
            iOS = true;
            osVersion = '';
            osMajorVersion = 0;
          }

          var osName = OS.UNKNOWN;

          if (nav.appVersion.indexOf('Win') !== -1) {
            osName = OS.WINDOWS;
          } else if (iOS) {
            osName = OS.IOS;
          } else if (nav.appVersion.indexOf('Mac') !== -1) {
            osName = OS.OSX;
          } else if (nav.appVersion.indexOf('X11') !== -1 && nav.appVersion.indexOf('Linux') === -1) {
            osName = OS.LINUX;
          } else if (isAndroid) {
            osName = OS.ANDROID;
          } else if (nav.appVersion.indexOf('Linux') !== -1 || ua.indexOf('ubuntu') !== -1) {
            osName = OS.LINUX;
          }

          _this.os = osName;
          _this.osVersion = osVersion;
          _this.osMainVersion = osMajorVersion;
          _this.browserType = BrowserType.UNKNOWN;
          var typeReg0 = /wechat|weixin|micromessenger/i;
          var typeReg1 = /mqqbrowser|micromessenger|qqbrowser|sogou|qzone|liebao|maxthon|ucbs|360 aphone|360browser|baiduboxapp|baidubrowser|maxthon|mxbrowser|miuibrowser/i;
          var typeReg2 = /qq|qqbrowser|ucbrowser|ubrowser|edge|HuaweiBrowser/i;
          var typeReg3 = /chrome|safari|firefox|trident|opera|opr\/|oupeng/i;
          var browserTypes = typeReg0.exec(ua) || typeReg1.exec(ua) || typeReg2.exec(ua) || typeReg3.exec(ua);
          var browserType = browserTypes ? browserTypes[0].toLowerCase() : OS.UNKNOWN;

          if (browserType === 'safari' && isAndroid) {
            browserType = BrowserType.ANDROID;
          } else if (browserType === 'qq' && /android.*applewebkit/i.test(ua)) {
            browserType = BrowserType.ANDROID;
          }

          var typeMap = {
            micromessenger: BrowserType.WECHAT,
            wechat: BrowserType.WECHAT,
            weixin: BrowserType.WECHAT,
            trident: BrowserType.IE,
            edge: BrowserType.EDGE,
            '360 aphone': BrowserType.BROWSER_360,
            mxbrowser: BrowserType.MAXTHON,
            'opr/': BrowserType.OPERA,
            ubrowser: BrowserType.UC,
            huaweibrowser: BrowserType.HUAWEI
          };
          _this.browserType = typeMap[browserType] || browserType;
          _this.browserVersion = '';
          var versionReg1 = /(mqqbrowser|micromessenger|qqbrowser|sogou|qzone|liebao|maxthon|uc|ucbs|360 aphone|360|baiduboxapp|baidu|maxthon|mxbrowser|miui(?:.hybrid)?)(mobile)?(browser)?\/?([\d.]+)/i;
          var versionReg2 = /(qq|chrome|safari|firefox|trident|opera|opr\/|oupeng)(mobile)?(browser)?\/?([\d.]+)/i;
          var tmp = versionReg1.exec(ua);

          if (!tmp) {
            tmp = versionReg2.exec(ua);
          }

          _this.browserVersion = tmp ? tmp[4] : '';
          _this.isXR = false;

          var _tmpCanvas1 = document.createElement('canvas');

          var supportCanvas =  !!_tmpCanvas1.getContext('2d');

          var supportWebp;

          try {
            supportWebp = TEST ? false : _tmpCanvas1.toDataURL('image/webp').startsWith('data:image/webp');
          } catch (e) {
            supportWebp = false;
          }

          if (_this.browserType === BrowserType.SAFARI) {
            var _$exec;

            var result = (_$exec = / version\/(\d+)/.exec(ua)) === null || _$exec === void 0 ? void 0 : _$exec[1];

            if (typeof result === 'string') {
              if (Number.parseInt(result) >= 14) {
                supportWebp = true;
              }
            }
          }

          var supportTouch = document.documentElement.ontouchstart !== undefined || document.ontouchstart !== undefined || EDITOR;
          var supportMouse = document.documentElement.onmouseup !== undefined || EDITOR;
          _this._featureMap = (_this$_featureMap = {}, _this$_featureMap[Feature.WEBP] = supportWebp, _this$_featureMap[Feature.IMAGE_BITMAP] = false, _this$_featureMap[Feature.WEB_VIEW] = true, _this$_featureMap[Feature.VIDEO_PLAYER] = true, _this$_featureMap[Feature.SAFE_AREA] = false, _this$_featureMap[Feature.INPUT_TOUCH] = supportTouch, _this$_featureMap[Feature.EVENT_KEYBOARD] = document.documentElement.onkeyup !== undefined || EDITOR, _this$_featureMap[Feature.EVENT_MOUSE] = supportMouse, _this$_featureMap[Feature.EVENT_TOUCH] = supportTouch || supportMouse, _this$_featureMap[Feature.EVENT_ACCELEROMETER] = window.DeviceMotionEvent !== undefined || window.DeviceOrientationEvent !== undefined, _this$_featureMap[Feature.EVENT_GAMEPAD] = navigator.getGamepads !== undefined || navigator.webkitGetGamepads !== undefined, _this$_featureMap[Feature.EVENT_HANDLE] =  PREVIEW, _this$_featureMap[Feature.EVENT_HMD] = _this.isXR, _this$_featureMap[Feature.EVENT_HANDHELD] = typeof navigator.xr !== 'undefined', _this$_featureMap);
          _this._initPromise = [];

          _this._initPromise.push(_this._supportsImageBitmapPromise());

          _this._registerEvent();

          return _this;
        }

        var _proto = SystemInfo.prototype;

        _proto._supportsImageBitmapPromise = function _supportsImageBitmapPromise() {
          var _this2 = this;

          if ( typeof createImageBitmap !== 'undefined' && typeof Blob !== 'undefined') {
            var canvas = document.createElement('canvas');
            canvas.width = canvas.height = 2;
            var promise = createImageBitmap(canvas, {});

            if (promise instanceof Promise) {
              return promise.then(function (imageBitmap) {
                _this2._setFeature(Feature.IMAGE_BITMAP, true);

                imageBitmap === null || imageBitmap === void 0 ? void 0 : imageBitmap.close();
              });
            } else {
              console.warn('The return value of createImageBitmap is not Promise.');
            }
          }

          return Promise.resolve();
        };

        _proto._registerEvent = function _registerEvent() {
          var _this3 = this;

          var hiddenPropName;

          if (typeof document.hidden !== 'undefined') {
            hiddenPropName = 'hidden';
          } else if (typeof document.mozHidden !== 'undefined') {
            hiddenPropName = 'mozHidden';
          } else if (typeof document.msHidden !== 'undefined') {
            hiddenPropName = 'msHidden';
          } else if (typeof document.webkitHidden !== 'undefined') {
            hiddenPropName = 'webkitHidden';
          } else {
            hiddenPropName = 'hidden';
          }

          var hidden = false;

          var onHidden = function onHidden() {
            if (!hidden) {
              hidden = true;

              _this3.emit('hide');
            }
          };

          var onShown = function onShown(arg0, arg1, arg2, arg3, arg4) {
            if (hidden) {
              hidden = false;

              _this3.emit('show', arg0, arg1, arg2, arg3, arg4);
            }
          };

          if (hiddenPropName) {
            var changeList = ['visibilitychange', 'mozvisibilitychange', 'msvisibilitychange', 'webkitvisibilitychange', 'qbrowserVisibilityChange'];

            for (var i = 0; i < changeList.length; i++) {
              document.addEventListener(changeList[i], function (event) {
                var visible = document[hiddenPropName];
                visible = visible || event.hidden;

                if (visible) {
                  onHidden();
                } else {
                  onShown();
                }
              });
            }
          } else {
            window.addEventListener('blur', onHidden);
            window.addEventListener('focus', onShown);
          }

          if (window.navigator.userAgent.indexOf('MicroMessenger') > -1) {
            window.onfocus = onShown;
          }

          if ('onpageshow' in window && 'onpagehide' in window) {
            window.addEventListener('pagehide', onHidden);
            window.addEventListener('pageshow', onShown);
            document.addEventListener('pagehide', onHidden);
            document.addEventListener('pageshow', onShown);
          }
        };

        _proto._setFeature = function _setFeature(feature, value) {
          return this._featureMap[feature] = value;
        };

        _proto.init = function init() {
          return Promise.all(this._initPromise);
        };

        _proto.hasFeature = function hasFeature(feature) {
          return this._featureMap[feature];
        };

        _proto.getBatteryLevel = function getBatteryLevel() {
          if (this._battery) {
            return this._battery.level;
          } else {
            {
              console.warn('getBatteryLevel is not supported');
            }

            return 1;
          }
        };

        _proto.triggerGC = function triggerGC() {
          {
            console.warn('triggerGC is not supported.');
          }
        };

        _proto.openURL = function openURL(url) {
          window.open(url);
        };

        _proto.now = function now() {
          if (Date.now) {
            return Date.now();
          }

          return +new Date();
        };

        _proto.restartJSVM = function restartJSVM() {
          {
            console.warn('restartJSVM is not supported.');
          }
        };

        _proto.close = function close() {
          this.emit('close');
          window.close();
        };

        return SystemInfo;
      }(EventTarget);

      var systemInfo = new SystemInfo();

      var EXTNAME_RE = /(\.[^\.\/\?\\]*)(\?.*)?$/;
      var DIRNAME_RE = /((.*)(\/|\\|\\\\))?(.*?\..*$)?/;
      var NORMALIZE_RE = /[^\.\/]+\/\.\.\//;
      function join() {
        var result = '';

        for (var _len = arguments.length, segments = new Array(_len), _key = 0; _key < _len; _key++) {
          segments[_key] = arguments[_key];
        }

        for (var _i = 0, _segments = segments; _i < _segments.length; _i++) {
          var segment = _segments[_i];
          result = (result + (result === '' ? '' : '/') + segment).replace(/(\/|\\\\)$/, '');
        }

        return result;
      }
      function extname(path) {
        var temp = EXTNAME_RE.exec(path);
        return temp ? temp[1] : '';
      }
      function mainFileName(fileName) {
        if (fileName) {
          var idx = fileName.lastIndexOf('.');

          if (idx !== -1) {
            return fileName.substring(0, idx);
          }
        }

        return fileName;
      }
      function basename(path, extName) {
        var index = path.indexOf('?');

        if (index > 0) {
          path = path.substring(0, index);
        }

        var reg = /(\/|\\)([^\/\\]+)$/g;
        var result = reg.exec(path.replace(/(\/|\\)$/, ''));

        if (!result) {
          return path;
        }

        var baseName = result[2];

        if (extName && path.substring(path.length - extName.length).toLowerCase() === extName.toLowerCase()) {
          return baseName.substring(0, baseName.length - extName.length);
        }

        return baseName;
      }
      function dirname(path) {
        var temp = DIRNAME_RE.exec(path);
        return temp ? temp[2] : '';
      }
      function changeExtname(path, extName) {
        extName = extName || '';
        var index = path.indexOf('?');
        var tempStr = '';

        if (index > 0) {
          tempStr = path.substring(index);
          path = path.substring(0, index);
        }

        index = path.lastIndexOf('.');

        if (index < 0) {
          return path + extName + tempStr;
        }

        return path.substring(0, index) + extName + tempStr;
      }
      function changeBasename(path, newBaseName, keepExt) {
        if (newBaseName.indexOf('.') === 0) {
          return changeExtname(path, newBaseName);
        }

        var index = path.indexOf('?');
        var tempStr = '';
        var ext = keepExt ? extname(path) : '';

        if (index > 0) {
          tempStr = path.substring(index);
          path = path.substring(0, index);
        }

        index = path.lastIndexOf('/');
        index = index <= 0 ? 0 : index + 1;
        return path.substring(0, index) + newBaseName + ext + tempStr;
      }
      function _normalize(url) {
        var oldUrl = url = String(url);

        do {
          oldUrl = url;
          url = url.replace(NORMALIZE_RE, '');
        } while (oldUrl.length !== url.length);

        return url;
      }
      function stripSep(path) {
        return path.replace(/[\/\\]$/, '');
      }
      function getSeperator() {
        return systemInfo.os === OS.WINDOWS ? '\\' : '/';
      }

      var path = /*#__PURE__*/Object.freeze({
        __proto__: null,
        join: join,
        extname: extname,
        mainFileName: mainFileName,
        basename: basename,
        dirname: dirname,
        changeExtname: changeExtname,
        changeBasename: changeBasename,
        _normalize: _normalize,
        stripSep: stripSep,
        getSeperator: getSeperator
      });
      exports('path', path);

      var _vec3 = new Vec3();

      function WorldNode3DToLocalNodeUI(mainCamera, wpos, uiNode, out) {
        if (!out) {
          out = new Vec3();
        }

        mainCamera.convertToUINode(wpos, uiNode, out);
        var pos = uiNode.position;
        out.add(pos);
        return out;
      }
      function WorldNode3DToWorldNodeUI(mainCamera, wpos, out) {
        if (!out) {
          out = new Vec3();
        }

        mainCamera.worldToScreen(wpos, out);
        out.x /= legacyCC.view.getScaleX();
        out.y /= legacyCC.view.getScaleY();
        return out;
      }
      var convertUtils = exports('convertUtils', {
        WorldNode3DToLocalNodeUI: WorldNode3DToLocalNodeUI,
        WorldNode3DToWorldNodeUI: WorldNode3DToWorldNodeUI
      });
      legacyCC.pipelineUtils = convertUtils;
      replaceProperty(legacyCC.pipelineUtils, 'cc.pipelineUtils', [{
        name: 'WorldNode3DToLocalNodeUI',
        newName: 'convertToUINode',
        targetName: 'cc.Camera.prototype',
        customFunction: function customFunction() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          var camera = args[0];
          var out = args[3] || _vec3;
          camera.convertToUINode(args[1], args[2], out);
          out.add(args[2].position);
          return args[3] || out.clone();
        }
      }]);

      markAsWarning(js$1, 'js', [{
        name: 'js',
        suggest: "'js.js' is deprecated since v3.7.0, please access 'js' directly instead."
      }]);

      var _PORTRAIT = 1;

      var _PORTRAIT_UPSIDE_DOWN = _PORTRAIT << 1;

      var _LEFT = _PORTRAIT << 2;

      var _RIGHT = _PORTRAIT << 3;

      var _LANDSCAPE = _LEFT | _RIGHT;

      var _AUTO = _PORTRAIT | _LANDSCAPE;

      var Orientation;

      (function (Orientation) {
        Orientation[Orientation["PORTRAIT"] = _PORTRAIT] = "PORTRAIT";
        Orientation[Orientation["PORTRAIT_UPSIDE_DOWN"] = _PORTRAIT_UPSIDE_DOWN] = "PORTRAIT_UPSIDE_DOWN";
        Orientation[Orientation["LANDSCAPE_LEFT"] = _LEFT] = "LANDSCAPE_LEFT";
        Orientation[Orientation["LANDSCAPE_RIGHT"] = _RIGHT] = "LANDSCAPE_RIGHT";
        Orientation[Orientation["LANDSCAPE"] = _LANDSCAPE] = "LANDSCAPE";
        Orientation[Orientation["AUTO"] = _AUTO] = "AUTO";
      })(Orientation || (Orientation = {}));

      var EVENT_TIMEOUT =  200;
      var orientationMap = {
        auto: Orientation.AUTO,
        landscape: Orientation.LANDSCAPE,
        portrait: Orientation.PORTRAIT
      };
      var WindowType;

      (function (WindowType) {
        WindowType[WindowType["Unknown"] = 0] = "Unknown";
        WindowType[WindowType["SubFrame"] = 1] = "SubFrame";
        WindowType[WindowType["BrowserWindow"] = 2] = "BrowserWindow";
        WindowType[WindowType["Fullscreen"] = 3] = "Fullscreen";
      })(WindowType || (WindowType = {}));

      var ScreenAdapter = function (_EventTarget) {
        _inheritsLoose(ScreenAdapter, _EventTarget);

        function ScreenAdapter() {
          var _this;

          _this = _EventTarget.call(this) || this;
          _this.isFrameRotated = false;
          _this.handleResizeEvent = true;
          _this._gameFrame = void 0;
          _this._gameContainer = void 0;
          _this._gameCanvas = void 0;
          _this._isProportionalToFrame = false;
          _this._cachedFrameStyle = {
            width: '0px',
            height: '0px'
          };
          _this._cachedContainerStyle = {
            width: '0px',
            height: '0px'
          };
          _this._cbToUpdateFrameBuffer = void 0;
          _this._supportFullScreen = false;
          _this._touchEventName = void 0;
          _this._onFullscreenChange = void 0;
          _this._onFullscreenError = void 0;
          _this._orientationChangeTimeoutId = -1;
          _this._cachedFrameSize = new Size(0, 0);
          _this._exactFitScreen = false;
          _this._isHeadlessMode = false;
          _this._fn = {};
          _this._fnGroup = [['requestFullscreen', 'exitFullscreen', 'fullscreenchange', 'fullscreenEnabled', 'fullscreenElement', 'fullscreenerror'], ['requestFullScreen', 'exitFullScreen', 'fullScreenchange', 'fullScreenEnabled', 'fullScreenElement', 'fullscreenerror'], ['webkitRequestFullScreen', 'webkitCancelFullScreen', 'webkitfullscreenchange', 'webkitIsFullScreen', 'webkitCurrentFullScreenElement', 'webkitfullscreenerror'], ['mozRequestFullScreen', 'mozCancelFullScreen', 'mozfullscreenchange', 'mozFullScreen', 'mozFullScreenElement', 'mozfullscreenerror'], ['msRequestFullscreen', 'msExitFullscreen', 'MSFullscreenChange', 'msFullscreenEnabled', 'msFullscreenElement', 'msfullscreenerror']];
          _this._resolutionScale = 1;
          _this._orientation = Orientation.AUTO;
          _this._gameFrame = document.getElementById('GameDiv');
          _this._gameContainer = document.getElementById('Cocos3dGameContainer');
          _this._gameCanvas = document.getElementById('GameCanvas');

          {
            if (!_this._gameFrame) {
              var _this$_gameCanvas, _this$_gameCanvas$par;

              _this._gameFrame = document.createElement('div');

              _this._gameFrame.setAttribute('id', 'GameDiv');

              (_this$_gameCanvas = _this._gameCanvas) === null || _this$_gameCanvas === void 0 ? void 0 : (_this$_gameCanvas$par = _this$_gameCanvas.parentNode) === null || _this$_gameCanvas$par === void 0 ? void 0 : _this$_gameCanvas$par.insertBefore(_this._gameFrame, _this._gameCanvas);

              _this._gameFrame.appendChild(_this._gameCanvas);
            }

            if (!_this._gameContainer) {
              var _this$_gameCanvas2, _this$_gameCanvas2$pa;

              _this._gameContainer = document.createElement('div');

              _this._gameContainer.setAttribute('id', 'Cocos3dGameContainer');

              (_this$_gameCanvas2 = _this._gameCanvas) === null || _this$_gameCanvas2 === void 0 ? void 0 : (_this$_gameCanvas2$pa = _this$_gameCanvas2.parentNode) === null || _this$_gameCanvas2$pa === void 0 ? void 0 : _this$_gameCanvas2$pa.insertBefore(_this._gameContainer, _this._gameCanvas);

              _this._gameContainer.appendChild(_this._gameCanvas);
            }
          }

          var fnList;
          var fnGroup = _this._fnGroup;

          for (var i = 0; i < fnGroup.length; i++) {
            fnList = fnGroup[i];

            if (typeof document[fnList[1]] !== 'undefined') {
              for (var _i = 0; _i < fnList.length; _i++) {
                _this._fn[fnGroup[0][_i]] = fnList[_i];
              }

              break;
            }
          }

          _this._supportFullScreen = _this._fn.requestFullscreen !== undefined;
          _this._touchEventName = 'ontouchstart' in window ? 'touchend' : 'mousedown';

          _this._registerEvent();

          return _this;
        }

        var _proto = ScreenAdapter.prototype;

        _proto.init = function init(options, cbToRebuildFrameBuffer) {
          this._cbToUpdateFrameBuffer = cbToRebuildFrameBuffer;
          this.orientation = orientationMap[options.configOrientation];
          this._exactFitScreen = options.exactFitScreen;
          this._isHeadlessMode = options.isHeadlessMode;

          this._resizeFrame();
        };

        _proto.requestFullScreen = function requestFullScreen() {
          var _this2 = this;

          return new Promise(function (resolve, reject) {
            if (_this2.isFullScreen) {
              resolve();
              return;
            }

            _this2._cachedFrameSize = _this2.windowSize;

            _this2._doRequestFullScreen().then(function () {
              resolve();
            })["catch"](function () {
              var fullscreenTarget = _this2._getFullscreenTarget();

              if (!fullscreenTarget) {
                reject(new Error('Cannot access fullscreen target'));
                return;
              }

              fullscreenTarget.addEventListener(_this2._touchEventName, function () {
                _this2._doRequestFullScreen().then(function () {
                  resolve();
                })["catch"](reject);
              }, {
                once: true,
                capture: true
              });
            });
          });
        };

        _proto.exitFullScreen = function exitFullScreen() {
          var _this3 = this;

          return new Promise(function (resolve, reject) {
            var requestPromise = document[_this3._fn.exitFullscreen]();

            if (window.Promise && requestPromise instanceof Promise) {
              requestPromise.then(function () {
                _this3.windowSize = _this3._cachedFrameSize;
                resolve();
              })["catch"](reject);
              return;
            }

            _this3.windowSize = _this3._cachedFrameSize;
            resolve();
          });
        };

        _proto._registerEvent = function _registerEvent() {
          var _this4 = this;

          document.addEventListener(this._fn.fullscreenerror, function () {
            var _this4$_onFullscreenE;

            (_this4$_onFullscreenE = _this4._onFullscreenError) === null || _this4$_onFullscreenE === void 0 ? void 0 : _this4$_onFullscreenE.call(_this4);
          });
          window.addEventListener('resize', function () {
            if (!_this4.handleResizeEvent) {
              return;
            }

            _this4._resizeFrame();
          });

          if (typeof window.matchMedia === 'function') {
            var updateDPRChangeListener = function updateDPRChangeListener() {
              var _window$matchMedia, _window$matchMedia$ad;

              var dpr = window.devicePixelRatio;
              (_window$matchMedia = window.matchMedia("(resolution: " + dpr + "dppx)")) === null || _window$matchMedia === void 0 ? void 0 : (_window$matchMedia$ad = _window$matchMedia.addEventListener) === null || _window$matchMedia$ad === void 0 ? void 0 : _window$matchMedia$ad.call(_window$matchMedia, 'change', function () {
                _this4.emit('window-resize', _this4.windowSize.width, _this4.windowSize.height);

                updateDPRChangeListener();
              }, {
                once: true
              });
            };

            updateDPRChangeListener();
          }

          window.addEventListener('orientationchange', function () {
            if (_this4._orientationChangeTimeoutId !== -1) {
              clearTimeout(_this4._orientationChangeTimeoutId);
            }

            _this4._orientationChangeTimeoutId = setTimeout(function () {
              if (!_this4.handleResizeEvent) {
                return;
              }

              _this4._updateFrameState();

              _this4._resizeFrame();

              _this4.emit('orientation-change', _this4.windowSize.width, _this4.windowSize.height);

              _this4._orientationChangeTimeoutId = -1;
            }, EVENT_TIMEOUT);
          });
          document.addEventListener(this._fn.fullscreenchange, function () {
            var _this4$_onFullscreenC;

            (_this4$_onFullscreenC = _this4._onFullscreenChange) === null || _this4$_onFullscreenC === void 0 ? void 0 : _this4$_onFullscreenC.call(_this4);

            _this4.emit('fullscreen-change', _this4.windowSize.width, _this4.windowSize.height);
          });
        };

        _proto._convertToSizeInCssPixels = function _convertToSizeInCssPixels(size) {
          var clonedSize = size.clone();
          var dpr = this.devicePixelRatio;
          clonedSize.width /= dpr;
          clonedSize.height /= dpr;
          return clonedSize;
        };

        _proto._resizeFrame = function _resizeFrame(sizeInCssPixels) {
          if (!this._gameFrame) {
            return;
          }

          this._gameFrame.style.display = 'flex';
          this._gameFrame.style['justify-content'] = 'center';
          this._gameFrame.style['align-items'] = 'center';

          if (this._windowType === WindowType.SubFrame) {
            if (!sizeInCssPixels) {
              this._updateContainer();

              return;
            }

            this._gameFrame.style.width = sizeInCssPixels.width + "px";
            this._gameFrame.style.height = sizeInCssPixels.height + "px";
          } else {
            var winWidth = window.innerWidth;
            var winHeight = window.innerHeight;

            if (this.isFrameRotated) {
              this._gameFrame.style['-webkit-transform'] = 'rotate(90deg)';
              this._gameFrame.style.transform = 'rotate(90deg)';
              this._gameFrame.style['-webkit-transform-origin'] = '0px 0px 0px';
              this._gameFrame.style.transformOrigin = '0px 0px 0px';
              this._gameFrame.style.margin = "0 0 0 " + winWidth + "px";
              this._gameFrame.style.width = winHeight + "px";
              this._gameFrame.style.height = winWidth + "px";
            } else {
              this._gameFrame.style['-webkit-transform'] = 'rotate(0deg)';
              this._gameFrame.style.transform = 'rotate(0deg)';
              this._gameFrame.style.margin = '0px auto';
              this._gameFrame.style.width = winWidth + "px";
              this._gameFrame.style.height = winHeight + "px";
            }
          }

          this._updateContainer();
        };

        _proto._getFullscreenTarget = function _getFullscreenTarget() {
          var windowType = this._windowType;

          if (windowType === WindowType.Fullscreen) {
            return document[this._fn.fullscreenElement];
          }

          if (windowType === WindowType.SubFrame) {
            return this._gameFrame;
          }

          return document.body;
        };

        _proto._doRequestFullScreen = function _doRequestFullScreen() {
          var _this5 = this;

          return new Promise(function (resolve, reject) {
            if (!_this5._supportFullScreen) {
              reject(new Error('fullscreen is not supported'));
              return;
            }

            var fullscreenTarget = _this5._getFullscreenTarget();

            if (!fullscreenTarget) {
              reject(new Error('Cannot access fullscreen target'));
              return;
            }

            _this5._onFullscreenChange = undefined;
            _this5._onFullscreenError = undefined;

            var requestPromise = fullscreenTarget[_this5._fn.requestFullscreen]();

            if (window.Promise && requestPromise instanceof Promise) {
              requestPromise.then(resolve)["catch"](reject);
            } else {
              _this5._onFullscreenChange = resolve;
              _this5._onFullscreenError = reject;
            }
          });
        };

        _proto._updateFrameState = function _updateFrameState() {
          var orientation = this.orientation;
          var width = window.innerWidth;
          var height = window.innerHeight;
          var isBrowserLandscape = width > height;
          this.isFrameRotated = systemInfo.isMobile && (isBrowserLandscape && orientation === Orientation.PORTRAIT || !isBrowserLandscape && orientation === Orientation.LANDSCAPE);
        };

        _proto._updateContainer = function _updateContainer() {
          if (!this._gameContainer) {
            warnID(9201);
            return;
          }

          if (this.isProportionalToFrame) {
            if (!this._gameFrame) {
              warnID(9201);
              return;
            }

            var designedResolution = legacyCC.view.getDesignResolutionSize();
            var frame = this._gameFrame;
            var frameW = frame.clientWidth;
            var frameH = frame.clientHeight;
            var designW = designedResolution.width;
            var designH = designedResolution.height;
            var scaleX = frameW / designW;
            var scaleY = frameH / designH;
            var containerStyle = this._gameContainer.style;
            var containerW;
            var containerH;

            if (scaleX < scaleY) {
              containerW = frameW;
              containerH = designH * scaleX;
            } else {
              containerW = designW * scaleY;
              containerH = frameH;
            }

            containerStyle.width = containerW + "px";
            containerStyle.height = containerH + "px";
          } else {
            var _containerStyle = this._gameContainer.style;
            _containerStyle.width = '100%';
            _containerStyle.height = '100%';
          }

          if (this._gameFrame && (this._cachedFrameStyle.width !== this._gameFrame.style.width || this._cachedFrameStyle.height !== this._gameFrame.style.height || this._cachedContainerStyle.width !== this._gameContainer.style.width || this._cachedContainerStyle.height !== this._gameContainer.style.height)) {
            this.emit('window-resize', this.windowSize.width, this.windowSize.height);
            this._cachedFrameStyle.width = this._gameFrame.style.width;
            this._cachedFrameStyle.height = this._gameFrame.style.height;
            this._cachedContainerStyle.width = this._gameContainer.style.width;
            this._cachedContainerStyle.height = this._gameContainer.style.height;
          }
        };

        _createClass(ScreenAdapter, [{
          key: "supportFullScreen",
          get: function get() {
            return this._supportFullScreen;
          }
        }, {
          key: "isFullScreen",
          get: function get() {
            if (!this._supportFullScreen) {
              return false;
            }

            return !!document[this._fn.fullscreenElement];
          }
        }, {
          key: "devicePixelRatio",
          get: function get() {
            var _window$devicePixelRa;

            return Math.min((_window$devicePixelRa = window.devicePixelRatio) !== null && _window$devicePixelRa !== void 0 ? _window$devicePixelRa : 1, 2);
          }
        }, {
          key: "windowSize",
          get: function get() {
            var result = this._windowSizeInCssPixels;
            var dpr = this.devicePixelRatio;
            result.width *= dpr;
            result.height *= dpr;
            return result;
          },
          set: function set(size) {
            if (this._windowType !== WindowType.SubFrame) {
              warnID(9202);
              return;
            }

            this._resizeFrame(this._convertToSizeInCssPixels(size));
          }
        }, {
          key: "resolution",
          get: function get() {
            var windowSize = this.windowSize;
            var resolutionScale = this.resolutionScale;
            return new Size(windowSize.width * resolutionScale, windowSize.height * resolutionScale);
          }
        }, {
          key: "resolutionScale",
          get: function get() {
            return this._resolutionScale;
          },
          set: function set(v) {
            var _this$_cbToUpdateFram;

            if (v === this._resolutionScale) {
              return;
            }

            this._resolutionScale = v;
            (_this$_cbToUpdateFram = this._cbToUpdateFrameBuffer) === null || _this$_cbToUpdateFram === void 0 ? void 0 : _this$_cbToUpdateFram.call(this);
          }
        }, {
          key: "orientation",
          get: function get() {
            return this._orientation;
          },
          set: function set(value) {
            if (this._orientation === value) {
              return;
            }

            this._orientation = value;

            this._updateFrameState();
          }
        }, {
          key: "safeAreaEdge",
          get: function get() {
            var _top = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--safe-top') || '0');

            var _bottom = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--safe-bottom') || '0');

            var _left = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--safe-left') || '0');

            var _right = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--safe-right') || '0');

            return {
              top: _top,
              bottom: _bottom,
              left: _left,
              right: _right
            };
          }
        }, {
          key: "isProportionalToFrame",
          get: function get() {
            return this._isProportionalToFrame;
          },
          set: function set(v) {
            if (this._isProportionalToFrame === v) {
              return;
            }

            this._isProportionalToFrame = v;

            this._updateContainer();
          }
        }, {
          key: "_windowSizeInCssPixels",
          get: function get() {

            if (this.isProportionalToFrame) {
              if (!this._gameContainer) {
                warnID(9201);
                return new Size(0, 0);
              }

              return new Size(this._gameContainer.clientWidth, this._gameContainer.clientHeight);
            }

            var fullscreenTarget;
            var width;
            var height;

            switch (this._windowType) {
              case WindowType.SubFrame:
                if (!this._gameFrame) {
                  warnID(9201);
                  return new Size(0, 0);
                }

                return new Size(this._gameFrame.clientWidth, this._gameFrame.clientHeight);

              case WindowType.Fullscreen:
                fullscreenTarget = this._getFullscreenTarget();
                width = this.isFrameRotated ? fullscreenTarget.clientHeight : fullscreenTarget.clientWidth;
                height = this.isFrameRotated ? fullscreenTarget.clientWidth : fullscreenTarget.clientHeight;
                return new Size(width, height);

              case WindowType.BrowserWindow:
                width = this.isFrameRotated ? window.innerHeight : window.innerWidth;
                height = this.isFrameRotated ? window.innerWidth : window.innerHeight;
                return new Size(width, height);

              case WindowType.Unknown:
              default:
                return new Size(0, 0);
            }
          }
        }, {
          key: "_windowType",
          get: function get() {
            if (this._isHeadlessMode) {
              return WindowType.Unknown;
            }

            if (this.isFullScreen) {
              return WindowType.Fullscreen;
            }

            if (!this._gameFrame) {
              warnID(9201);
              return WindowType.Unknown;
            }

            if (this._exactFitScreen) {
              return WindowType.BrowserWindow;
            }

            return WindowType.SubFrame;
          }
        }]);

        return ScreenAdapter;
      }(EventTarget);

      var screenAdapter = new ScreenAdapter();

      var Screen = function () {
        function Screen() {}

        var _proto = Screen.prototype;

        _proto.init = function init() {
          var _settings$querySettin, _settings$querySettin2;

          var exactFitScreen = (_settings$querySettin = settings.querySettings(Settings.Category.SCREEN, 'exactFitScreen')) !== null && _settings$querySettin !== void 0 ? _settings$querySettin : true;
          var orientation = (_settings$querySettin2 = settings.querySettings(Settings.Category.SCREEN, 'orientation')) !== null && _settings$querySettin2 !== void 0 ? _settings$querySettin2 : 'auto';
          var isHeadlessMode = settings.querySettings(Settings.Category.RENDERING, 'renderMode') === 3;
          screenAdapter.init({
            exactFitScreen: exactFitScreen,
            configOrientation: orientation,
            isHeadlessMode: isHeadlessMode
          }, function () {
            var _director$root;

            var director = legacyCC.director;

            if (!((_director$root = director.root) !== null && _director$root !== void 0 && _director$root.pipeline)) {
              warnID(1220);
              return;
            }

            director.root.pipeline.shadingScale = screenAdapter.resolutionScale;
          });
        };

        _proto.fullScreen = function fullScreen() {
          return screenAdapter.isFullScreen;
        };

        _proto.requestFullScreen = function requestFullScreen(element, onFullScreenChange, onFullScreenError) {
          if (arguments.length > 0) {
            warnID(1400, 'screen.requestFullScreen(element, onFullScreenChange?, onFullScreenError?)', 'screen.requestFullScreen(): Promise');
          }

          return screenAdapter.requestFullScreen().then(function () {
            onFullScreenChange === null || onFullScreenChange === void 0 ? void 0 : onFullScreenChange();
          })["catch"](function (err) {
            console.error(err);
            onFullScreenError === null || onFullScreenError === void 0 ? void 0 : onFullScreenError();
          });
        };

        _proto.exitFullScreen = function exitFullScreen() {
          return screenAdapter.exitFullScreen();
        };

        _proto.autoFullScreen = function autoFullScreen(element, onFullScreenChange) {
          var _this$requestFullScre;

          (_this$requestFullScre = this.requestFullScreen(element, onFullScreenChange)) === null || _this$requestFullScre === void 0 ? void 0 : _this$requestFullScre["catch"](function (e) {});
        };

        _proto.disableAutoFullScreen = function disableAutoFullScreen(element) {};

        _createClass(Screen, [{
          key: "devicePixelRatio",
          get: function get() {
            return screenAdapter.devicePixelRatio;
          }
        }, {
          key: "windowSize",
          get: function get() {
            return screenAdapter.windowSize;
          },
          set: function set(size) {
            screenAdapter.windowSize = size;
          }
        }, {
          key: "resolution",
          get: function get() {
            return screenAdapter.resolution;
          }
        }, {
          key: "supportsFullScreen",
          get: function get() {
            return screenAdapter.supportFullScreen;
          }
        }]);

        return Screen;
      }();

      var screen = exports('screen', new Screen());
      legacyCC.screen = screen;

      var sys = exports('sys', {
        Feature: Feature,
        hasFeature: function hasFeature(feature) {
          return systemInfo.hasFeature(feature);
        },
        NetworkType: NetworkType,
        Language: Language,
        OS: OS,
        Platform: Platform,
        BrowserType: BrowserType,
        isNative: systemInfo.isNative,
        isBrowser: systemInfo.isBrowser,
        isMobile: systemInfo.isMobile,
        isLittleEndian: systemInfo.isLittleEndian,
        platform: systemInfo.platform,
        language: systemInfo.language,
        languageCode: systemInfo.nativeLanguage,
        os: systemInfo.os,
        osVersion: systemInfo.osVersion,
        osMainVersion: systemInfo.osMainVersion,
        browserType: systemInfo.browserType,
        browserVersion: systemInfo.browserVersion,
        isXR: systemInfo.isXR,
        windowPixelResolution: screen.windowSize,
        capabilities: {
          canvas: true,
          opengl: true,
          webp: systemInfo.hasFeature(Feature.WEBP),
          imageBitmap: systemInfo.hasFeature(Feature.IMAGE_BITMAP),
          touches: systemInfo.hasFeature(Feature.INPUT_TOUCH),
          mouse: systemInfo.hasFeature(Feature.EVENT_MOUSE),
          keyboard: systemInfo.hasFeature(Feature.EVENT_KEYBOARD),
          accelerometer: systemInfo.hasFeature(Feature.EVENT_ACCELEROMETER)
        },
        localStorage: {},
        getNetworkType: function getNetworkType() {
          return systemInfo.networkType;
        },
        getBatteryLevel: function getBatteryLevel() {
          return systemInfo.getBatteryLevel();
        },
        garbageCollect: function garbageCollect() {
          systemInfo.triggerGC();
        },
        isObjectValid: function isObjectValid(obj) {
          if (obj === null || obj === undefined) {
            return false;
          }

          return true;
        },
        dump: function dump() {
          var str = '';
          str += "isMobile : " + this.isMobile + "\r\n";
          str += "language : " + this.language + "\r\n";
          str += "browserType : " + this.browserType + "\r\n";
          str += "browserVersion : " + this.browserVersion + "\r\n";
          str += "supports webp: " + sys.hasFeature(Feature.WEBP) + "\r\n";
          str += "supports bitmap: " + sys.hasFeature(Feature.IMAGE_BITMAP) + "\r\n";
          str += "supports touches: " + sys.hasFeature(Feature.INPUT_TOUCH) + "\r\n";
          str += "supports mouse: " + sys.hasFeature(Feature.EVENT_MOUSE) + "\r\n";
          str += "supports keyboard: " + sys.hasFeature(Feature.EVENT_KEYBOARD) + "\r\n";
          str += "supports accelerometer: " + sys.hasFeature(Feature.EVENT_ACCELEROMETER) + "\r\n";
          str += "os : " + this.os + "\r\n";
          str += "osVersion : " + this.osVersion + "\r\n";
          str += "platform : " + this.platform + "\r\n";
          str += "Using " + (legacyCC.game.renderType === legacyCC.game.RENDER_TYPE_WEBGL ? 'WEBGL' : 'CANVAS') + " renderer.\r\n";
          log(str);
        },
        openURL: function openURL(url) {
          systemInfo.openURL(url);
        },
        init: function init() {
          var _this = this;

          return Promise.resolve().then(function () {
            return systemInfo.init();
          }).then(function () {
            try {
              var localStorage = sys.localStorage = window.localStorage;
              localStorage.setItem('storage', '');
              localStorage.removeItem('storage');
              localStorage = null;
            } catch (e) {
              var warn = function warn() {
                warnID(5200);
              };

              _this.localStorage = {
                getItem: warn,
                setItem: warn,
                clear: warn,
                removeItem: warn
              };
            }

            {
              _this.__isWebIOS14OrIPadOS14Env = (sys.os === OS.IOS || sys.os === OS.OSX) && systemInfo.isBrowser && /(OS 14)|(Version\/14)/.test(window.navigator.userAgent);
            }
          });
        },
        now: function now() {
          return systemInfo.now();
        },
        restartVM: function restartVM() {
          systemInfo.restartJSVM();
        },
        getSafeAreaRect: function getSafeAreaRect() {
          var locView = legacyCC.view;
          var edge = screenAdapter.safeAreaEdge;
          var windowSize = screenAdapter.windowSize;
          var leftBottom = new Vec2(edge.left, edge.bottom);
          var rightTop = new Vec2(windowSize.width - edge.right, windowSize.height - edge.top);

          locView._convertToUISpace(leftBottom);

          locView._convertToUISpace(rightTop);

          var x = leftBottom.x;
          var y = leftBottom.y;
          var width = rightTop.x - leftBottom.x;
          var height = rightTop.y - leftBottom.y;
          return new Rect(x, y, width, height);
        }
      });
      legacyCC.sys = sys;

      var visibleRect = exports('visibleRect', {
        topLeft: legacyCC.v2(0, 0),
        topRight: legacyCC.v2(0, 0),
        top: legacyCC.v2(0, 0),
        bottomLeft: legacyCC.v2(0, 0),
        bottomRight: legacyCC.v2(0, 0),
        bottom: legacyCC.v2(0, 0),
        center: legacyCC.v2(0, 0),
        left: legacyCC.v2(0, 0),
        right: legacyCC.v2(0, 0),
        width: 0,
        height: 0,
        init: function init(visibleRect_) {
          var w = this.width = visibleRect_.width;
          var h = this.height = visibleRect_.height;
          var l = visibleRect_.x;
          var b = visibleRect_.y;
          var t = b + h;
          var r = l + w;
          this.topLeft.x = l;
          this.topLeft.y = t;
          this.topRight.x = r;
          this.topRight.y = t;
          this.top.x = l + w / 2;
          this.top.y = t;
          this.bottomLeft.x = l;
          this.bottomLeft.y = b;
          this.bottomRight.x = r;
          this.bottomRight.y = b;
          this.bottom.x = l + w / 2;
          this.bottom.y = b;
          this.center.x = l + w / 2;
          this.center.y = b + h / 2;
          this.left.x = l;
          this.left.y = b + h / 2;
          this.right.x = r;
          this.right.y = b + h / 2;
        }
      });
      legacyCC.visibleRect = visibleRect;

      var System = exports('System', function () {
        function System() {
          this._id = '';
          this._priority = 0;
          this._executeInEditMode = false;
        }

        System.sortByPriority = function sortByPriority(a, b) {
          if (a._priority < b._priority) {
            return 1;
          } else if (a._priority > b.priority) {
            return -1;
          } else {
            return 0;
          }
        };

        var _proto = System.prototype;

        _proto.init = function init() {};

        _proto.update = function update(dt) {};

        _proto.postUpdate = function postUpdate(dt) {};

        _proto.destroy = function destroy() {};

        _createClass(System, [{
          key: "priority",
          get: function get() {
            return this._priority;
          },
          set: function set(value) {
            this._priority = value;
          }
        }, {
          key: "id",
          get: function get() {
            return this._id;
          },
          set: function set(id) {
            this._id = id;
          }
        }]);

        return System;
      }());
      System.Priority = Enum({
        LOW: 0,
        MEDIUM: 100,
        HIGH: 200,
        SCHEDULER: 1 << 31 >>> 0
      });

      var MAX_POOL_SIZE = 20;
      var idGenerator = new IDGenerator('Scheduler');

      var ListEntry = function ListEntry(target, priority, paused, markedForDeletion) {
        this.target = void 0;
        this.priority = void 0;
        this.paused = void 0;
        this.markedForDeletion = void 0;
        this.target = target;
        this.priority = priority;
        this.paused = paused;
        this.markedForDeletion = markedForDeletion;
      };

      ListEntry.get = function (target, priority, paused, markedForDeletion) {
        var result = ListEntry._listEntries.pop();

        if (result) {
          result.target = target;
          result.priority = priority;
          result.paused = paused;
          result.markedForDeletion = markedForDeletion;
        } else {
          result = new ListEntry(target, priority, paused, markedForDeletion);
        }

        return result;
      };

      ListEntry.put = function (entry) {
        if (ListEntry._listEntries.length < MAX_POOL_SIZE) {
          entry.target = null;

          ListEntry._listEntries.push(entry);
        }
      };

      ListEntry._listEntries = [];

      var HashUpdateEntry = function HashUpdateEntry(list, entry, target, callback) {
        this.list = void 0;
        this.entry = void 0;
        this.target = void 0;
        this.callback = void 0;
        this.list = list;
        this.entry = entry;
        this.target = target;
        this.callback = callback;
      };

      HashUpdateEntry.get = function (list, entry, target, callback) {
        var result = HashUpdateEntry._hashUpdateEntries.pop();

        if (result) {
          result.list = list;
          result.entry = entry;
          result.target = target;
          result.callback = callback;
        } else {
          result = new HashUpdateEntry(list, entry, target, callback);
        }

        return result;
      };

      HashUpdateEntry.put = function (entry) {
        if (HashUpdateEntry._hashUpdateEntries.length < MAX_POOL_SIZE) {
          entry.list = entry.entry = entry.target = entry.callback = null;

          HashUpdateEntry._hashUpdateEntries.push(entry);
        }
      };

      HashUpdateEntry._hashUpdateEntries = [];

      var HashTimerEntry = function HashTimerEntry(timers, target, timerIndex, currentTimer, currentTimerSalvaged, paused) {
        this.timers = void 0;
        this.target = void 0;
        this.timerIndex = void 0;
        this.currentTimer = void 0;
        this.currentTimerSalvaged = void 0;
        this.paused = void 0;
        this.timers = timers;
        this.target = target;
        this.timerIndex = timerIndex;
        this.currentTimer = currentTimer;
        this.currentTimerSalvaged = currentTimerSalvaged;
        this.paused = paused;
      };

      HashTimerEntry.get = function (timers, target, timerIndex, currentTimer, currentTimerSalvaged, paused) {
        var result = HashTimerEntry._hashTimerEntries.pop();

        if (result) {
          result.timers = timers;
          result.target = target;
          result.timerIndex = timerIndex;
          result.currentTimer = currentTimer;
          result.currentTimerSalvaged = currentTimerSalvaged;
          result.paused = paused;
        } else {
          result = new HashTimerEntry(timers, target, timerIndex, currentTimer, currentTimerSalvaged, paused);
        }

        return result;
      };

      HashTimerEntry.put = function (entry) {
        if (HashTimerEntry._hashTimerEntries.length < MAX_POOL_SIZE) {
          entry.timers = entry.target = entry.currentTimer = null;

          HashTimerEntry._hashTimerEntries.push(entry);
        }
      };

      HashTimerEntry._hashTimerEntries = [];

      var CallbackTimer = function () {
        function CallbackTimer() {
          this._lock = void 0;
          this._scheduler = void 0;
          this._elapsed = void 0;
          this._runForever = void 0;
          this._useDelay = void 0;
          this._timesExecuted = void 0;
          this._repeat = void 0;
          this._delay = void 0;
          this._interval = void 0;
          this._target = void 0;
          this._callback = void 0;
          this._lock = false;
          this._scheduler = null;
          this._elapsed = -1;
          this._runForever = false;
          this._useDelay = false;
          this._timesExecuted = 0;
          this._repeat = 0;
          this._delay = 0;
          this._interval = 0;
          this._target = null;
          this._callback = null;
        }

        var _proto = CallbackTimer.prototype;

        _proto.initWithCallback = function initWithCallback(scheduler, callback, target, seconds, repeat, delay) {
          this._lock = false;
          this._scheduler = scheduler;
          this._target = target;
          this._callback = callback;
          this._elapsed = -1;
          this._interval = seconds;
          this._delay = delay;
          this._useDelay = this._delay > 0;
          this._repeat = repeat;
          this._runForever = this._repeat === legacyCC.macro.REPEAT_FOREVER;
          return true;
        };

        _proto.getInterval = function getInterval() {
          return this._interval;
        };

        _proto.setInterval = function setInterval(interval) {
          this._interval = interval;
        };

        _proto.update = function update(dt) {
          if (this._elapsed === -1) {
            this._elapsed = 0;
            this._timesExecuted = 0;
          } else {
            this._elapsed += dt;

            if (this._runForever && !this._useDelay) {
              if (this._elapsed >= this._interval) {
                this.trigger();
                this._elapsed = 0;
              }
            } else {
              if (this._useDelay) {
                if (this._elapsed >= this._delay) {
                  this.trigger();
                  this._elapsed -= this._delay;
                  this._timesExecuted += 1;
                  this._useDelay = false;
                }
              } else if (this._elapsed >= this._interval) {
                this.trigger();
                this._elapsed = 0;
                this._timesExecuted += 1;
              }

              if (this._callback && !this._runForever && this._timesExecuted > this._repeat) {
                this.cancel();
              }
            }
          }
        };

        _proto.getCallback = function getCallback() {
          return this._callback;
        };

        _proto.trigger = function trigger() {
          if (this._target && this._callback) {
            this._lock = true;

            this._callback.call(this._target, this._elapsed);

            this._lock = false;
          }
        };

        _proto.cancel = function cancel() {
          this._scheduler.unschedule(this._callback, this._target);
        };

        return CallbackTimer;
      }();

      CallbackTimer._timers = [];

      CallbackTimer.get = function () {
        return CallbackTimer._timers.pop() || new CallbackTimer();
      };

      CallbackTimer.put = function (timer) {
        if (CallbackTimer._timers.length < MAX_POOL_SIZE && !timer._lock) {
          timer._scheduler = timer._target = timer._callback = null;

          CallbackTimer._timers.push(timer);
        }
      };

      var Scheduler = exports('Scheduler', function (_System) {
        _inheritsLoose(Scheduler, _System);

        Scheduler.enableForTarget = function enableForTarget(target) {
          var found = false;

          if (target.uuid) {
            found = true;
          } else if (target.id) {
            found = true;
          }

          if (!found) {
            if (target.__instanceId) {
              warnID(1513);
            } else {
              target.id = idGenerator.getNewId();
            }
          }
        };

        function Scheduler() {
          var _this;

          _this = _System.call(this) || this;
          _this._timeScale = void 0;
          _this._updatesNegList = void 0;
          _this._updates0List = void 0;
          _this._updatesPosList = void 0;
          _this._hashForUpdates = void 0;
          _this._hashForTimers = void 0;
          _this._currentTarget = void 0;
          _this._currentTargetSalvaged = void 0;
          _this._updateHashLocked = void 0;
          _this._arrayForTimers = void 0;
          _this._timeScale = 1.0;
          _this._updatesNegList = [];
          _this._updates0List = [];
          _this._updatesPosList = [];
          _this._hashForUpdates = createMap(true);
          _this._hashForTimers = createMap(true);
          _this._currentTarget = null;
          _this._currentTargetSalvaged = false;
          _this._updateHashLocked = false;
          _this._arrayForTimers = [];
          return _this;
        }

        var _proto2 = Scheduler.prototype;

        _proto2.setTimeScale = function setTimeScale(timeScale) {
          this._timeScale = timeScale;
        };

        _proto2.getTimeScale = function getTimeScale() {
          return this._timeScale;
        };

        _proto2.update = function update(dt) {
          this._updateHashLocked = true;

          if (this._timeScale !== 1) {
            dt *= this._timeScale;
          }

          var i;
          var list;
          var len;
          var entry;

          for (i = 0, list = this._updatesNegList, len = list.length; i < len; i++) {
            entry = list[i];

            if (!entry.paused && !entry.markedForDeletion) {
              entry.target.update(dt);
            }
          }

          for (i = 0, list = this._updates0List, len = list.length; i < len; i++) {
            entry = list[i];

            if (!entry.paused && !entry.markedForDeletion) {
              entry.target.update(dt);
            }
          }

          for (i = 0, list = this._updatesPosList, len = list.length; i < len; i++) {
            entry = list[i];

            if (!entry.paused && !entry.markedForDeletion) {
              entry.target.update(dt);
            }
          }

          var elt;
          var arr = this._arrayForTimers;

          for (i = 0; i < arr.length; i++) {
            elt = arr[i];
            this._currentTarget = elt;
            this._currentTargetSalvaged = false;

            if (!elt.paused) {
              for (elt.timerIndex = 0; elt.timerIndex < elt.timers.length; ++elt.timerIndex) {
                elt.currentTimer = elt.timers[elt.timerIndex];
                elt.currentTimerSalvaged = false;
                elt.currentTimer.update(dt);
                elt.currentTimer = null;
              }
            }

            if (this._currentTargetSalvaged && this._currentTarget.timers.length === 0) {
              this._removeHashElement(this._currentTarget);

              --i;
            }
          }

          for (i = 0, list = this._updatesNegList; i < list.length;) {
            entry = list[i];

            if (entry.markedForDeletion) {
              this._removeUpdateFromHash(entry);
            } else {
              i++;
            }
          }

          for (i = 0, list = this._updates0List; i < list.length;) {
            entry = list[i];

            if (entry.markedForDeletion) {
              this._removeUpdateFromHash(entry);
            } else {
              i++;
            }
          }

          for (i = 0, list = this._updatesPosList; i < list.length;) {
            entry = list[i];

            if (entry.markedForDeletion) {
              this._removeUpdateFromHash(entry);
            } else {
              i++;
            }
          }

          this._updateHashLocked = false;
          this._currentTarget = null;
        };

        _proto2.schedule = function schedule(callback, target, interval, repeat, delay, paused) {
          if (typeof callback !== 'function') {
            var tmp = callback;
            callback = target;
            target = tmp;
          }

          if (arguments.length === 3 || arguments.length === 4 || arguments.length === 5) {
            paused = !!repeat;
            repeat = legacyCC.macro.REPEAT_FOREVER;
            delay = 0;
          }

          assertID(target, 1502);
          var targetId = target.uuid || target.id;

          if (!targetId) {
            errorID(1510);
            return;
          }

          var element = this._hashForTimers[targetId];

          if (!element) {
            element = HashTimerEntry.get(null, target, 0, null, null, paused);

            this._arrayForTimers.push(element);

            this._hashForTimers[targetId] = element;
          } else if (element.paused !== paused) {
            warnID(1511);
          }

          var timer;
          var i;

          if (element.timers == null) {
            element.timers = [];
          } else {
            for (i = 0; i < element.timers.length; ++i) {
              timer = element.timers[i];

              if (timer && callback === timer._callback) {
                logID(1507, timer.getInterval(), interval);
                timer._interval = interval;
                return;
              }
            }
          }

          timer = CallbackTimer.get();
          timer.initWithCallback(this, callback, target, interval, repeat, delay);
          element.timers.push(timer);

          if (this._currentTarget === element && this._currentTargetSalvaged) {
            this._currentTargetSalvaged = false;
          }
        };

        _proto2.scheduleUpdate = function scheduleUpdate(target, priority, paused) {
          var targetId = target.uuid || target.id;

          if (!targetId) {
            errorID(1510);
            return;
          }

          var hashElement = this._hashForUpdates[targetId];

          if (hashElement && hashElement.entry) {
            if (hashElement.entry.priority !== priority) {
              if (this._updateHashLocked) {
                logID(1506);
                hashElement.entry.markedForDeletion = false;
                hashElement.entry.paused = paused;
                return;
              } else {
                this.unscheduleUpdate(target);
              }
            } else {
              hashElement.entry.markedForDeletion = false;
              hashElement.entry.paused = paused;
              return;
            }
          }

          var listElement = ListEntry.get(target, priority, paused, false);
          var ppList;

          if (priority === 0) {
            ppList = this._updates0List;

            this._appendIn(ppList, listElement);
          } else {
            ppList = priority < 0 ? this._updatesNegList : this._updatesPosList;

            this._priorityIn(ppList, listElement, priority);
          }

          this._hashForUpdates[targetId] = HashUpdateEntry.get(ppList, listElement, target, null);
        };

        _proto2.unschedule = function unschedule(callback, target) {
          if (!target || !callback) {
            return;
          }

          var targetId = target.uuid || target.id;

          if (!targetId) {
            errorID(1510);
            return;
          }

          var element = this._hashForTimers[targetId];

          if (element) {
            var timers = element.timers;

            for (var i = 0, li = timers.length; i < li; i++) {
              var timer = timers[i];

              if (callback === timer._callback) {
                if (timer === element.currentTimer && !element.currentTimerSalvaged) {
                  element.currentTimerSalvaged = true;
                }

                timers.splice(i, 1);
                CallbackTimer.put(timer);

                if (element.timerIndex >= i) {
                  element.timerIndex--;
                }

                if (timers.length === 0) {
                  if (this._currentTarget === element) {
                    this._currentTargetSalvaged = true;
                  } else {
                    this._removeHashElement(element);
                  }
                }

                return;
              }
            }
          }
        };

        _proto2.unscheduleUpdate = function unscheduleUpdate(target) {
          if (!target) {
            return;
          }

          var targetId = target.uuid || target.id;

          if (!targetId) {
            errorID(1510);
            return;
          }

          var element = this._hashForUpdates[targetId];

          if (element) {
            if (this._updateHashLocked) {
              element.entry.markedForDeletion = true;
            } else {
              this._removeUpdateFromHash(element.entry);
            }
          }
        };

        _proto2.unscheduleAllForTarget = function unscheduleAllForTarget(target) {
          if (!target) {
            return;
          }

          var targetId = target.uuid || target.id;

          if (!targetId) {
            errorID(1510);
            return;
          }

          var element = this._hashForTimers[targetId];

          if (element) {
            var timers = element.timers;

            if (timers.indexOf(element.currentTimer) > -1 && !element.currentTimerSalvaged) {
              element.currentTimerSalvaged = true;
            }

            for (var i = 0, l = timers.length; i < l; i++) {
              CallbackTimer.put(timers[i]);
            }

            timers.length = 0;

            if (this._currentTarget === element) {
              this._currentTargetSalvaged = true;
            } else {
              this._removeHashElement(element);
            }
          }

          this.unscheduleUpdate(target);
        };

        _proto2.unscheduleAll = function unscheduleAll() {
          this.unscheduleAllWithMinPriority(System.Priority.SCHEDULER);
        };

        _proto2.unscheduleAllWithMinPriority = function unscheduleAllWithMinPriority(minPriority) {
          var i;
          var element;
          var arr = this._arrayForTimers;

          for (i = arr.length - 1; i >= 0; i--) {
            element = arr[i];
            this.unscheduleAllForTarget(element.target);
          }

          var entry;
          var temp_length = 0;

          if (minPriority < 0) {
            for (i = 0; i < this._updatesNegList.length;) {
              temp_length = this._updatesNegList.length;
              entry = this._updatesNegList[i];

              if (entry && entry.priority >= minPriority) {
                this.unscheduleUpdate(entry.target);
              }

              if (temp_length === this._updatesNegList.length) {
                i++;
              }
            }
          }

          if (minPriority <= 0) {
            for (i = 0; i < this._updates0List.length;) {
              temp_length = this._updates0List.length;
              entry = this._updates0List[i];

              if (entry) {
                this.unscheduleUpdate(entry.target);
              }

              if (temp_length === this._updates0List.length) {
                i++;
              }
            }
          }

          for (i = 0; i < this._updatesPosList.length;) {
            temp_length = this._updatesPosList.length;
            entry = this._updatesPosList[i];

            if (entry && entry.priority >= minPriority) {
              this.unscheduleUpdate(entry.target);
            }

            if (temp_length === this._updatesPosList.length) {
              i++;
            }
          }
        };

        _proto2.isScheduled = function isScheduled(callback, target) {
          assertID(callback, 1508);
          assertID(target, 1509);
          var targetId = target.uuid || target.id;

          if (!targetId) {
            errorID(1510);
            return false;
          }

          var element = this._hashForTimers[targetId];

          if (!element) {
            return false;
          }

          if (element.timers == null) {
            return false;
          } else {
            var timers = element.timers;

            for (var i = 0; i < timers.length; ++i) {
              var timer = timers[i];

              if (callback === timer._callback) {
                return true;
              }
            }

            return false;
          }
        };

        _proto2.pauseAllTargets = function pauseAllTargets() {
          return this.pauseAllTargetsWithMinPriority(System.Priority.SCHEDULER);
        };

        _proto2.pauseAllTargetsWithMinPriority = function pauseAllTargetsWithMinPriority(minPriority) {
          var idsWithSelectors = [];
          var element;
          var locArrayForTimers = this._arrayForTimers;
          var i;
          var li;

          for (i = 0, li = locArrayForTimers.length; i < li; i++) {
            element = locArrayForTimers[i];

            if (element) {
              element.paused = true;
              idsWithSelectors.push(element.target);
            }
          }

          var entry;

          if (minPriority < 0) {
            for (i = 0; i < this._updatesNegList.length; i++) {
              entry = this._updatesNegList[i];

              if (entry) {
                if (entry.priority >= minPriority) {
                  entry.paused = true;
                  idsWithSelectors.push(entry.target);
                }
              }
            }
          }

          if (minPriority <= 0) {
            for (i = 0; i < this._updates0List.length; i++) {
              entry = this._updates0List[i];

              if (entry) {
                entry.paused = true;
                idsWithSelectors.push(entry.target);
              }
            }
          }

          for (i = 0; i < this._updatesPosList.length; i++) {
            entry = this._updatesPosList[i];

            if (entry) {
              if (entry.priority >= minPriority) {
                entry.paused = true;
                idsWithSelectors.push(entry.target);
              }
            }
          }

          return idsWithSelectors;
        };

        _proto2.resumeTargets = function resumeTargets(targetsToResume) {
          if (!targetsToResume) {
            return;
          }

          for (var i = 0; i < targetsToResume.length; i++) {
            this.resumeTarget(targetsToResume[i]);
          }
        };

        _proto2.pauseTarget = function pauseTarget(target) {
          assertID(target, 1503);
          var targetId = target.uuid || target.id;

          if (!targetId) {
            errorID(1510);
            return;
          }

          var element = this._hashForTimers[targetId];

          if (element) {
            element.paused = true;
          }

          var elementUpdate = this._hashForUpdates[targetId];

          if (elementUpdate) {
            elementUpdate.entry.paused = true;
          }
        };

        _proto2.resumeTarget = function resumeTarget(target) {
          assertID(target, 1504);
          var targetId = target.uuid || target.id;

          if (!targetId) {
            errorID(1510);
            return;
          }

          var element = this._hashForTimers[targetId];

          if (element) {
            element.paused = false;
          }

          var elementUpdate = this._hashForUpdates[targetId];

          if (elementUpdate) {
            elementUpdate.entry.paused = false;
          }
        };

        _proto2.isTargetPaused = function isTargetPaused(target) {
          assertID(target, 1505);
          var targetId = target.uuid || target.id;

          if (!targetId) {
            errorID(1510);
            return false;
          }

          var element = this._hashForTimers[targetId];

          if (element) {
            return element.paused;
          }

          var elementUpdate = this._hashForUpdates[targetId];

          if (elementUpdate) {
            return elementUpdate.entry.paused;
          }

          return false;
        };

        _proto2._removeHashElement = function _removeHashElement(element) {
          var targetId = element.target.uuid || element.target.id;
          delete this._hashForTimers[targetId];
          var arr = this._arrayForTimers;

          for (var i = 0, l = arr.length; i < l; i++) {
            if (arr[i] === element) {
              arr.splice(i, 1);
              break;
            }
          }

          HashTimerEntry.put(element);
        };

        _proto2._removeUpdateFromHash = function _removeUpdateFromHash(entry) {
          var targetId = entry.target.uuid || entry.target.id;
          var element = this._hashForUpdates[targetId];

          if (element) {
            var list = element.list;
            var listEntry = element.entry;

            for (var i = 0, l = list.length; i < l; i++) {
              if (list[i] === listEntry) {
                list.splice(i, 1);
                break;
              }
            }

            delete this._hashForUpdates[targetId];
            ListEntry.put(listEntry);
            HashUpdateEntry.put(element);
          }
        };

        _proto2._priorityIn = function _priorityIn(ppList, listElement, priority) {
          for (var i = 0; i < ppList.length; i++) {
            if (priority < ppList[i].priority) {
              ppList.splice(i, 0, listElement);
              return;
            }
          }

          ppList.push(listElement);
        };

        _proto2._appendIn = function _appendIn(ppList, listElement) {
          ppList.push(listElement);
        };

        return Scheduler;
      }(System));
      Scheduler.ID = 'scheduler';
      legacyCC.Scheduler = Scheduler;

      var getUint8ForString = String.prototype.charCodeAt;

      function getUint8ForArray(idx) {
        return this[idx];
      }

      function murmurhash2_32_gc(input, seed) {
        var l = input.length;
        var h = seed ^ l;
        var i = 0;
        var getUint8 = typeof input === 'string' ? getUint8ForString : getUint8ForArray;

        while (l >= 4) {
          var k = getUint8.call(input, i) & 0xff | (getUint8.call(input, ++i) & 0xff) << 8 | (getUint8.call(input, ++i) & 0xff) << 16 | (getUint8.call(input, ++i) & 0xff) << 24;
          k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);
          k ^= k >>> 24;
          k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);
          h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16) ^ k;
          l -= 4;
          ++i;
        }

        switch (l) {
          case 3:
            h ^= (getUint8.call(input, i + 2) & 0xff) << 16;

          case 2:
            h ^= (getUint8.call(input, i + 1) & 0xff) << 8;

          case 1:
            h ^= getUint8.call(input, i) & 0xff;
            h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);
            break;
        }

        h ^= h >>> 13;
        h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);
        h ^= h >>> 15;
        return h >>> 0;
      }

      legacyCC.easing = easing;

      function syncNodeValues(node) {
        var lpos = node._lpos;
        node.setPositionForJS(lpos.x, lpos.y, lpos.z);
        var lscale = node._lscale;
        node.setScaleForJS(lscale.x, lscale.y, lscale.z);
        var lrot = node._lrot;
        node.setRotationForJS(lrot.x, lrot.y, lrot.z, lrot.w);
        var euler = node._euler;
        node.setRotationFromEulerForJS(euler.x, euler.y, euler.z);
      }
      function updateChildrenForDeserialize(node) {
        if (!node) {
          return;
        }

        var children = node._children;

        if (!children) {
          return;
        }

        var len = children.length;

        if (!len) {
          return;
        }

        node._setChildren(children);

        for (var i = 0; i < len; ++i) {
          var child = children[i];
          updateChildrenForDeserialize(child);
        }
      }
      function ExtraEventMethods() {}

      ExtraEventMethods.prototype.once = function once(type, callback, target) {
        return this.on(type, callback, target, true);
      };

      ExtraEventMethods.prototype.targetOff = function targetOff(typeOrTarget) {
        this.removeAll(typeOrTarget);
      };

      var jsbUtils = /*#__PURE__*/Object.freeze({
        __proto__: null,
        syncNodeValues: syncNodeValues,
        updateChildrenForDeserialize: updateChildrenForDeserialize,
        ExtraEventMethods: ExtraEventMethods
      });
      exports('jsbUtils', jsbUtils);

      function shift(array, first, last) {
        assertsArrayIndex(array, first);
        assertsArrayIndex(array, last);

        if (first === last) {
          return array;
        }

        var element = array[first];

        if (first < last) {
          for (var iElement = first + 1; iElement <= last; ++iElement) {
            array[iElement - 1] = array[iElement];
          }
        } else {
          for (var _iElement = first; _iElement !== last; --_iElement) {
            array[_iElement] = array[_iElement - 1];
          }
        }

        array[last] = element;
        return array;
      }

      var GarbageCollectionManager = function () {
        function GarbageCollectionManager() {
          this._finalizationRegistry =  null;
          this._gcObjects = new WeakMap();
        }

        var _proto = GarbageCollectionManager.prototype;

        _proto.registerGCObject = function registerGCObject(gcObject) {
          {
            return gcObject;
          }
        };

        _proto.init = function init() {};

        _proto.finalizationRegistryCallback = function finalizationRegistryCallback(token) {
          var gcObject = this._gcObjects.get(token);

          if (gcObject) {
            this._gcObjects["delete"](token);

            gcObject.destroy();
          }

          this._finalizationRegistry.unregister(token);
        };

        _proto.destroy = function destroy() {};

        return GarbageCollectionManager;
      }();

      var garbageCollectionManager = exports('garbageCollectionManager', new GarbageCollectionManager());

      var GCObject = exports('GCObject', function () {
        function GCObject() {
          return garbageCollectionManager.registerGCObject(this);
        }

        var _proto = GCObject.prototype;

        _proto.destroy = function destroy() {};

        return GCObject;
      }());

      function deepFlatten(strList, array) {
        for (var _iterator = _createForOfIteratorHelperLoose(array), _step; !(_step = _iterator()).done;) {
          var item = _step.value;

          if (Array.isArray(item)) {
            deepFlatten(strList, item);
          } else {
              strList.push(item);
            }
        }
      }

      function flattenCodeArray(array) {
        var separator =  '';
        var strList = [];
        deepFlatten(strList, array);
        return strList.join(separator);
      }

      function applyMixins(derivedCtor, baseCtors) {
        baseCtors.forEach(function (baseCtor) {
          Object.getOwnPropertyNames(baseCtor.prototype).forEach(function (name) {
            if (name !== 'constructor') {
              Object.defineProperty(derivedCtor.prototype, name, Object.getOwnPropertyDescriptor(baseCtor.prototype, name));
            }
          });
        });
      }

      legacyCC.math = math;
      legacyCC.geometry = geometry;

      var deepCopy = function deepCopy(target, source, Ctor) {
        for (var i = 0; i < source.length; ++i) {
          if (target.length <= i) target.push(new Ctor());
          target[i].copy(source[i]);
        }

        target.length = source.length;
      };

      var ObjectType;

      (function (ObjectType) {
        ObjectType[ObjectType["UNKNOWN"] = 0] = "UNKNOWN";
        ObjectType[ObjectType["SWAPCHAIN"] = 1] = "SWAPCHAIN";
        ObjectType[ObjectType["BUFFER"] = 2] = "BUFFER";
        ObjectType[ObjectType["TEXTURE"] = 3] = "TEXTURE";
        ObjectType[ObjectType["RENDER_PASS"] = 4] = "RENDER_PASS";
        ObjectType[ObjectType["FRAMEBUFFER"] = 5] = "FRAMEBUFFER";
        ObjectType[ObjectType["SAMPLER"] = 6] = "SAMPLER";
        ObjectType[ObjectType["SHADER"] = 7] = "SHADER";
        ObjectType[ObjectType["DESCRIPTOR_SET_LAYOUT"] = 8] = "DESCRIPTOR_SET_LAYOUT";
        ObjectType[ObjectType["PIPELINE_LAYOUT"] = 9] = "PIPELINE_LAYOUT";
        ObjectType[ObjectType["PIPELINE_STATE"] = 10] = "PIPELINE_STATE";
        ObjectType[ObjectType["DESCRIPTOR_SET"] = 11] = "DESCRIPTOR_SET";
        ObjectType[ObjectType["INPUT_ASSEMBLER"] = 12] = "INPUT_ASSEMBLER";
        ObjectType[ObjectType["COMMAND_BUFFER"] = 13] = "COMMAND_BUFFER";
        ObjectType[ObjectType["QUEUE"] = 14] = "QUEUE";
        ObjectType[ObjectType["QUERY_POOL"] = 15] = "QUERY_POOL";
        ObjectType[ObjectType["GLOBAL_BARRIER"] = 16] = "GLOBAL_BARRIER";
        ObjectType[ObjectType["TEXTURE_BARRIER"] = 17] = "TEXTURE_BARRIER";
        ObjectType[ObjectType["BUFFER_BARRIER"] = 18] = "BUFFER_BARRIER";
        ObjectType[ObjectType["COUNT"] = 19] = "COUNT";
      })(ObjectType || (ObjectType = {}));

      var Status;

      (function (Status) {
        Status[Status["UNREADY"] = 0] = "UNREADY";
        Status[Status["FAILED"] = 1] = "FAILED";
        Status[Status["SUCCESS"] = 2] = "SUCCESS";
      })(Status || (Status = {}));

      var API;

      (function (API) {
        API[API["UNKNOWN"] = 0] = "UNKNOWN";
        API[API["GLES2"] = 1] = "GLES2";
        API[API["GLES3"] = 2] = "GLES3";
        API[API["METAL"] = 3] = "METAL";
        API[API["VULKAN"] = 4] = "VULKAN";
        API[API["NVN"] = 5] = "NVN";
        API[API["WEBGL"] = 6] = "WEBGL";
        API[API["WEBGL2"] = 7] = "WEBGL2";
        API[API["WEBGPU"] = 8] = "WEBGPU";
      })(API || (API = {}));

      var SurfaceTransform;

      (function (SurfaceTransform) {
        SurfaceTransform[SurfaceTransform["IDENTITY"] = 0] = "IDENTITY";
        SurfaceTransform[SurfaceTransform["ROTATE_90"] = 1] = "ROTATE_90";
        SurfaceTransform[SurfaceTransform["ROTATE_180"] = 2] = "ROTATE_180";
        SurfaceTransform[SurfaceTransform["ROTATE_270"] = 3] = "ROTATE_270";
      })(SurfaceTransform || (SurfaceTransform = {}));

      var Feature$1;

      (function (Feature) {
        Feature[Feature["ELEMENT_INDEX_UINT"] = 0] = "ELEMENT_INDEX_UINT";
        Feature[Feature["INSTANCED_ARRAYS"] = 1] = "INSTANCED_ARRAYS";
        Feature[Feature["MULTIPLE_RENDER_TARGETS"] = 2] = "MULTIPLE_RENDER_TARGETS";
        Feature[Feature["BLEND_MINMAX"] = 3] = "BLEND_MINMAX";
        Feature[Feature["COMPUTE_SHADER"] = 4] = "COMPUTE_SHADER";
        Feature[Feature["INPUT_ATTACHMENT_BENEFIT"] = 5] = "INPUT_ATTACHMENT_BENEFIT";
        Feature[Feature["COUNT"] = 6] = "COUNT";
      })(Feature$1 || (Feature$1 = {}));

      var Format;

      (function (Format) {
        Format[Format["UNKNOWN"] = 0] = "UNKNOWN";
        Format[Format["A8"] = 1] = "A8";
        Format[Format["L8"] = 2] = "L8";
        Format[Format["LA8"] = 3] = "LA8";
        Format[Format["R8"] = 4] = "R8";
        Format[Format["R8SN"] = 5] = "R8SN";
        Format[Format["R8UI"] = 6] = "R8UI";
        Format[Format["R8I"] = 7] = "R8I";
        Format[Format["R16F"] = 8] = "R16F";
        Format[Format["R16UI"] = 9] = "R16UI";
        Format[Format["R16I"] = 10] = "R16I";
        Format[Format["R32F"] = 11] = "R32F";
        Format[Format["R32UI"] = 12] = "R32UI";
        Format[Format["R32I"] = 13] = "R32I";
        Format[Format["RG8"] = 14] = "RG8";
        Format[Format["RG8SN"] = 15] = "RG8SN";
        Format[Format["RG8UI"] = 16] = "RG8UI";
        Format[Format["RG8I"] = 17] = "RG8I";
        Format[Format["RG16F"] = 18] = "RG16F";
        Format[Format["RG16UI"] = 19] = "RG16UI";
        Format[Format["RG16I"] = 20] = "RG16I";
        Format[Format["RG32F"] = 21] = "RG32F";
        Format[Format["RG32UI"] = 22] = "RG32UI";
        Format[Format["RG32I"] = 23] = "RG32I";
        Format[Format["RGB8"] = 24] = "RGB8";
        Format[Format["SRGB8"] = 25] = "SRGB8";
        Format[Format["RGB8SN"] = 26] = "RGB8SN";
        Format[Format["RGB8UI"] = 27] = "RGB8UI";
        Format[Format["RGB8I"] = 28] = "RGB8I";
        Format[Format["RGB16F"] = 29] = "RGB16F";
        Format[Format["RGB16UI"] = 30] = "RGB16UI";
        Format[Format["RGB16I"] = 31] = "RGB16I";
        Format[Format["RGB32F"] = 32] = "RGB32F";
        Format[Format["RGB32UI"] = 33] = "RGB32UI";
        Format[Format["RGB32I"] = 34] = "RGB32I";
        Format[Format["RGBA8"] = 35] = "RGBA8";
        Format[Format["BGRA8"] = 36] = "BGRA8";
        Format[Format["SRGB8_A8"] = 37] = "SRGB8_A8";
        Format[Format["RGBA8SN"] = 38] = "RGBA8SN";
        Format[Format["RGBA8UI"] = 39] = "RGBA8UI";
        Format[Format["RGBA8I"] = 40] = "RGBA8I";
        Format[Format["RGBA16F"] = 41] = "RGBA16F";
        Format[Format["RGBA16UI"] = 42] = "RGBA16UI";
        Format[Format["RGBA16I"] = 43] = "RGBA16I";
        Format[Format["RGBA32F"] = 44] = "RGBA32F";
        Format[Format["RGBA32UI"] = 45] = "RGBA32UI";
        Format[Format["RGBA32I"] = 46] = "RGBA32I";
        Format[Format["R5G6B5"] = 47] = "R5G6B5";
        Format[Format["R11G11B10F"] = 48] = "R11G11B10F";
        Format[Format["RGB5A1"] = 49] = "RGB5A1";
        Format[Format["RGBA4"] = 50] = "RGBA4";
        Format[Format["RGB10A2"] = 51] = "RGB10A2";
        Format[Format["RGB10A2UI"] = 52] = "RGB10A2UI";
        Format[Format["RGB9E5"] = 53] = "RGB9E5";
        Format[Format["DEPTH"] = 54] = "DEPTH";
        Format[Format["DEPTH_STENCIL"] = 55] = "DEPTH_STENCIL";
        Format[Format["BC1"] = 56] = "BC1";
        Format[Format["BC1_ALPHA"] = 57] = "BC1_ALPHA";
        Format[Format["BC1_SRGB"] = 58] = "BC1_SRGB";
        Format[Format["BC1_SRGB_ALPHA"] = 59] = "BC1_SRGB_ALPHA";
        Format[Format["BC2"] = 60] = "BC2";
        Format[Format["BC2_SRGB"] = 61] = "BC2_SRGB";
        Format[Format["BC3"] = 62] = "BC3";
        Format[Format["BC3_SRGB"] = 63] = "BC3_SRGB";
        Format[Format["BC4"] = 64] = "BC4";
        Format[Format["BC4_SNORM"] = 65] = "BC4_SNORM";
        Format[Format["BC5"] = 66] = "BC5";
        Format[Format["BC5_SNORM"] = 67] = "BC5_SNORM";
        Format[Format["BC6H_UF16"] = 68] = "BC6H_UF16";
        Format[Format["BC6H_SF16"] = 69] = "BC6H_SF16";
        Format[Format["BC7"] = 70] = "BC7";
        Format[Format["BC7_SRGB"] = 71] = "BC7_SRGB";
        Format[Format["ETC_RGB8"] = 72] = "ETC_RGB8";
        Format[Format["ETC2_RGB8"] = 73] = "ETC2_RGB8";
        Format[Format["ETC2_SRGB8"] = 74] = "ETC2_SRGB8";
        Format[Format["ETC2_RGB8_A1"] = 75] = "ETC2_RGB8_A1";
        Format[Format["ETC2_SRGB8_A1"] = 76] = "ETC2_SRGB8_A1";
        Format[Format["ETC2_RGBA8"] = 77] = "ETC2_RGBA8";
        Format[Format["ETC2_SRGB8_A8"] = 78] = "ETC2_SRGB8_A8";
        Format[Format["EAC_R11"] = 79] = "EAC_R11";
        Format[Format["EAC_R11SN"] = 80] = "EAC_R11SN";
        Format[Format["EAC_RG11"] = 81] = "EAC_RG11";
        Format[Format["EAC_RG11SN"] = 82] = "EAC_RG11SN";
        Format[Format["PVRTC_RGB2"] = 83] = "PVRTC_RGB2";
        Format[Format["PVRTC_RGBA2"] = 84] = "PVRTC_RGBA2";
        Format[Format["PVRTC_RGB4"] = 85] = "PVRTC_RGB4";
        Format[Format["PVRTC_RGBA4"] = 86] = "PVRTC_RGBA4";
        Format[Format["PVRTC2_2BPP"] = 87] = "PVRTC2_2BPP";
        Format[Format["PVRTC2_4BPP"] = 88] = "PVRTC2_4BPP";
        Format[Format["ASTC_RGBA_4X4"] = 89] = "ASTC_RGBA_4X4";
        Format[Format["ASTC_RGBA_5X4"] = 90] = "ASTC_RGBA_5X4";
        Format[Format["ASTC_RGBA_5X5"] = 91] = "ASTC_RGBA_5X5";
        Format[Format["ASTC_RGBA_6X5"] = 92] = "ASTC_RGBA_6X5";
        Format[Format["ASTC_RGBA_6X6"] = 93] = "ASTC_RGBA_6X6";
        Format[Format["ASTC_RGBA_8X5"] = 94] = "ASTC_RGBA_8X5";
        Format[Format["ASTC_RGBA_8X6"] = 95] = "ASTC_RGBA_8X6";
        Format[Format["ASTC_RGBA_8X8"] = 96] = "ASTC_RGBA_8X8";
        Format[Format["ASTC_RGBA_10X5"] = 97] = "ASTC_RGBA_10X5";
        Format[Format["ASTC_RGBA_10X6"] = 98] = "ASTC_RGBA_10X6";
        Format[Format["ASTC_RGBA_10X8"] = 99] = "ASTC_RGBA_10X8";
        Format[Format["ASTC_RGBA_10X10"] = 100] = "ASTC_RGBA_10X10";
        Format[Format["ASTC_RGBA_12X10"] = 101] = "ASTC_RGBA_12X10";
        Format[Format["ASTC_RGBA_12X12"] = 102] = "ASTC_RGBA_12X12";
        Format[Format["ASTC_SRGBA_4X4"] = 103] = "ASTC_SRGBA_4X4";
        Format[Format["ASTC_SRGBA_5X4"] = 104] = "ASTC_SRGBA_5X4";
        Format[Format["ASTC_SRGBA_5X5"] = 105] = "ASTC_SRGBA_5X5";
        Format[Format["ASTC_SRGBA_6X5"] = 106] = "ASTC_SRGBA_6X5";
        Format[Format["ASTC_SRGBA_6X6"] = 107] = "ASTC_SRGBA_6X6";
        Format[Format["ASTC_SRGBA_8X5"] = 108] = "ASTC_SRGBA_8X5";
        Format[Format["ASTC_SRGBA_8X6"] = 109] = "ASTC_SRGBA_8X6";
        Format[Format["ASTC_SRGBA_8X8"] = 110] = "ASTC_SRGBA_8X8";
        Format[Format["ASTC_SRGBA_10X5"] = 111] = "ASTC_SRGBA_10X5";
        Format[Format["ASTC_SRGBA_10X6"] = 112] = "ASTC_SRGBA_10X6";
        Format[Format["ASTC_SRGBA_10X8"] = 113] = "ASTC_SRGBA_10X8";
        Format[Format["ASTC_SRGBA_10X10"] = 114] = "ASTC_SRGBA_10X10";
        Format[Format["ASTC_SRGBA_12X10"] = 115] = "ASTC_SRGBA_12X10";
        Format[Format["ASTC_SRGBA_12X12"] = 116] = "ASTC_SRGBA_12X12";
        Format[Format["COUNT"] = 117] = "COUNT";
      })(Format || (Format = {}));

      var FormatType;

      (function (FormatType) {
        FormatType[FormatType["NONE"] = 0] = "NONE";
        FormatType[FormatType["UNORM"] = 1] = "UNORM";
        FormatType[FormatType["SNORM"] = 2] = "SNORM";
        FormatType[FormatType["UINT"] = 3] = "UINT";
        FormatType[FormatType["INT"] = 4] = "INT";
        FormatType[FormatType["UFLOAT"] = 5] = "UFLOAT";
        FormatType[FormatType["FLOAT"] = 6] = "FLOAT";
      })(FormatType || (FormatType = {}));

      var Type;

      (function (Type) {
        Type[Type["UNKNOWN"] = 0] = "UNKNOWN";
        Type[Type["BOOL"] = 1] = "BOOL";
        Type[Type["BOOL2"] = 2] = "BOOL2";
        Type[Type["BOOL3"] = 3] = "BOOL3";
        Type[Type["BOOL4"] = 4] = "BOOL4";
        Type[Type["INT"] = 5] = "INT";
        Type[Type["INT2"] = 6] = "INT2";
        Type[Type["INT3"] = 7] = "INT3";
        Type[Type["INT4"] = 8] = "INT4";
        Type[Type["UINT"] = 9] = "UINT";
        Type[Type["UINT2"] = 10] = "UINT2";
        Type[Type["UINT3"] = 11] = "UINT3";
        Type[Type["UINT4"] = 12] = "UINT4";
        Type[Type["FLOAT"] = 13] = "FLOAT";
        Type[Type["FLOAT2"] = 14] = "FLOAT2";
        Type[Type["FLOAT3"] = 15] = "FLOAT3";
        Type[Type["FLOAT4"] = 16] = "FLOAT4";
        Type[Type["MAT2"] = 17] = "MAT2";
        Type[Type["MAT2X3"] = 18] = "MAT2X3";
        Type[Type["MAT2X4"] = 19] = "MAT2X4";
        Type[Type["MAT3X2"] = 20] = "MAT3X2";
        Type[Type["MAT3"] = 21] = "MAT3";
        Type[Type["MAT3X4"] = 22] = "MAT3X4";
        Type[Type["MAT4X2"] = 23] = "MAT4X2";
        Type[Type["MAT4X3"] = 24] = "MAT4X3";
        Type[Type["MAT4"] = 25] = "MAT4";
        Type[Type["SAMPLER1D"] = 26] = "SAMPLER1D";
        Type[Type["SAMPLER1D_ARRAY"] = 27] = "SAMPLER1D_ARRAY";
        Type[Type["SAMPLER2D"] = 28] = "SAMPLER2D";
        Type[Type["SAMPLER2D_ARRAY"] = 29] = "SAMPLER2D_ARRAY";
        Type[Type["SAMPLER3D"] = 30] = "SAMPLER3D";
        Type[Type["SAMPLER_CUBE"] = 31] = "SAMPLER_CUBE";
        Type[Type["SAMPLER"] = 32] = "SAMPLER";
        Type[Type["TEXTURE1D"] = 33] = "TEXTURE1D";
        Type[Type["TEXTURE1D_ARRAY"] = 34] = "TEXTURE1D_ARRAY";
        Type[Type["TEXTURE2D"] = 35] = "TEXTURE2D";
        Type[Type["TEXTURE2D_ARRAY"] = 36] = "TEXTURE2D_ARRAY";
        Type[Type["TEXTURE3D"] = 37] = "TEXTURE3D";
        Type[Type["TEXTURE_CUBE"] = 38] = "TEXTURE_CUBE";
        Type[Type["IMAGE1D"] = 39] = "IMAGE1D";
        Type[Type["IMAGE1D_ARRAY"] = 40] = "IMAGE1D_ARRAY";
        Type[Type["IMAGE2D"] = 41] = "IMAGE2D";
        Type[Type["IMAGE2D_ARRAY"] = 42] = "IMAGE2D_ARRAY";
        Type[Type["IMAGE3D"] = 43] = "IMAGE3D";
        Type[Type["IMAGE_CUBE"] = 44] = "IMAGE_CUBE";
        Type[Type["SUBPASS_INPUT"] = 45] = "SUBPASS_INPUT";
        Type[Type["COUNT"] = 46] = "COUNT";
      })(Type || (Type = {}));

      var BufferUsageBit;

      (function (BufferUsageBit) {
        BufferUsageBit[BufferUsageBit["NONE"] = 0] = "NONE";
        BufferUsageBit[BufferUsageBit["TRANSFER_SRC"] = 1] = "TRANSFER_SRC";
        BufferUsageBit[BufferUsageBit["TRANSFER_DST"] = 2] = "TRANSFER_DST";
        BufferUsageBit[BufferUsageBit["INDEX"] = 4] = "INDEX";
        BufferUsageBit[BufferUsageBit["VERTEX"] = 8] = "VERTEX";
        BufferUsageBit[BufferUsageBit["UNIFORM"] = 16] = "UNIFORM";
        BufferUsageBit[BufferUsageBit["STORAGE"] = 32] = "STORAGE";
        BufferUsageBit[BufferUsageBit["INDIRECT"] = 64] = "INDIRECT";
      })(BufferUsageBit || (BufferUsageBit = {}));

      var BufferFlagBit;

      (function (BufferFlagBit) {
        BufferFlagBit[BufferFlagBit["NONE"] = 0] = "NONE";
      })(BufferFlagBit || (BufferFlagBit = {}));

      var MemoryAccessBit;

      (function (MemoryAccessBit) {
        MemoryAccessBit[MemoryAccessBit["NONE"] = 0] = "NONE";
        MemoryAccessBit[MemoryAccessBit["READ_ONLY"] = 1] = "READ_ONLY";
        MemoryAccessBit[MemoryAccessBit["WRITE_ONLY"] = 2] = "WRITE_ONLY";
        MemoryAccessBit[MemoryAccessBit["READ_WRITE"] = 3] = "READ_WRITE";
      })(MemoryAccessBit || (MemoryAccessBit = {}));

      var MemoryUsageBit;

      (function (MemoryUsageBit) {
        MemoryUsageBit[MemoryUsageBit["NONE"] = 0] = "NONE";
        MemoryUsageBit[MemoryUsageBit["DEVICE"] = 1] = "DEVICE";
        MemoryUsageBit[MemoryUsageBit["HOST"] = 2] = "HOST";
      })(MemoryUsageBit || (MemoryUsageBit = {}));

      var TextureType;

      (function (TextureType) {
        TextureType[TextureType["TEX1D"] = 0] = "TEX1D";
        TextureType[TextureType["TEX2D"] = 1] = "TEX2D";
        TextureType[TextureType["TEX3D"] = 2] = "TEX3D";
        TextureType[TextureType["CUBE"] = 3] = "CUBE";
        TextureType[TextureType["TEX1D_ARRAY"] = 4] = "TEX1D_ARRAY";
        TextureType[TextureType["TEX2D_ARRAY"] = 5] = "TEX2D_ARRAY";
      })(TextureType || (TextureType = {}));

      var TextureUsageBit;

      (function (TextureUsageBit) {
        TextureUsageBit[TextureUsageBit["NONE"] = 0] = "NONE";
        TextureUsageBit[TextureUsageBit["TRANSFER_SRC"] = 1] = "TRANSFER_SRC";
        TextureUsageBit[TextureUsageBit["TRANSFER_DST"] = 2] = "TRANSFER_DST";
        TextureUsageBit[TextureUsageBit["SAMPLED"] = 4] = "SAMPLED";
        TextureUsageBit[TextureUsageBit["STORAGE"] = 8] = "STORAGE";
        TextureUsageBit[TextureUsageBit["COLOR_ATTACHMENT"] = 16] = "COLOR_ATTACHMENT";
        TextureUsageBit[TextureUsageBit["DEPTH_STENCIL_ATTACHMENT"] = 32] = "DEPTH_STENCIL_ATTACHMENT";
        TextureUsageBit[TextureUsageBit["INPUT_ATTACHMENT"] = 64] = "INPUT_ATTACHMENT";
      })(TextureUsageBit || (TextureUsageBit = {}));

      var TextureFlagBit;

      (function (TextureFlagBit) {
        TextureFlagBit[TextureFlagBit["NONE"] = 0] = "NONE";
        TextureFlagBit[TextureFlagBit["GEN_MIPMAP"] = 1] = "GEN_MIPMAP";
        TextureFlagBit[TextureFlagBit["GENERAL_LAYOUT"] = 2] = "GENERAL_LAYOUT";
      })(TextureFlagBit || (TextureFlagBit = {}));

      var FormatFeatureBit;

      (function (FormatFeatureBit) {
        FormatFeatureBit[FormatFeatureBit["NONE"] = 0] = "NONE";
        FormatFeatureBit[FormatFeatureBit["RENDER_TARGET"] = 1] = "RENDER_TARGET";
        FormatFeatureBit[FormatFeatureBit["SAMPLED_TEXTURE"] = 2] = "SAMPLED_TEXTURE";
        FormatFeatureBit[FormatFeatureBit["LINEAR_FILTER"] = 4] = "LINEAR_FILTER";
        FormatFeatureBit[FormatFeatureBit["STORAGE_TEXTURE"] = 8] = "STORAGE_TEXTURE";
        FormatFeatureBit[FormatFeatureBit["VERTEX_ATTRIBUTE"] = 16] = "VERTEX_ATTRIBUTE";
      })(FormatFeatureBit || (FormatFeatureBit = {}));

      var SampleCount;

      (function (SampleCount) {
        SampleCount[SampleCount["ONE"] = 0] = "ONE";
        SampleCount[SampleCount["MULTIPLE_PERFORMANCE"] = 1] = "MULTIPLE_PERFORMANCE";
        SampleCount[SampleCount["MULTIPLE_BALANCE"] = 2] = "MULTIPLE_BALANCE";
        SampleCount[SampleCount["MULTIPLE_QUALITY"] = 3] = "MULTIPLE_QUALITY";
      })(SampleCount || (SampleCount = {}));

      var VsyncMode;

      (function (VsyncMode) {
        VsyncMode[VsyncMode["OFF"] = 0] = "OFF";
        VsyncMode[VsyncMode["ON"] = 1] = "ON";
        VsyncMode[VsyncMode["RELAXED"] = 2] = "RELAXED";
        VsyncMode[VsyncMode["MAILBOX"] = 3] = "MAILBOX";
        VsyncMode[VsyncMode["HALF"] = 4] = "HALF";
      })(VsyncMode || (VsyncMode = {}));

      var Filter;

      (function (Filter) {
        Filter[Filter["NONE"] = 0] = "NONE";
        Filter[Filter["POINT"] = 1] = "POINT";
        Filter[Filter["LINEAR"] = 2] = "LINEAR";
        Filter[Filter["ANISOTROPIC"] = 3] = "ANISOTROPIC";
      })(Filter || (Filter = {}));

      var Address;

      (function (Address) {
        Address[Address["WRAP"] = 0] = "WRAP";
        Address[Address["MIRROR"] = 1] = "MIRROR";
        Address[Address["CLAMP"] = 2] = "CLAMP";
        Address[Address["BORDER"] = 3] = "BORDER";
      })(Address || (Address = {}));

      var ComparisonFunc;

      (function (ComparisonFunc) {
        ComparisonFunc[ComparisonFunc["NEVER"] = 0] = "NEVER";
        ComparisonFunc[ComparisonFunc["LESS"] = 1] = "LESS";
        ComparisonFunc[ComparisonFunc["EQUAL"] = 2] = "EQUAL";
        ComparisonFunc[ComparisonFunc["LESS_EQUAL"] = 3] = "LESS_EQUAL";
        ComparisonFunc[ComparisonFunc["GREATER"] = 4] = "GREATER";
        ComparisonFunc[ComparisonFunc["NOT_EQUAL"] = 5] = "NOT_EQUAL";
        ComparisonFunc[ComparisonFunc["GREATER_EQUAL"] = 6] = "GREATER_EQUAL";
        ComparisonFunc[ComparisonFunc["ALWAYS"] = 7] = "ALWAYS";
      })(ComparisonFunc || (ComparisonFunc = {}));

      var StencilOp;

      (function (StencilOp) {
        StencilOp[StencilOp["ZERO"] = 0] = "ZERO";
        StencilOp[StencilOp["KEEP"] = 1] = "KEEP";
        StencilOp[StencilOp["REPLACE"] = 2] = "REPLACE";
        StencilOp[StencilOp["INCR"] = 3] = "INCR";
        StencilOp[StencilOp["DECR"] = 4] = "DECR";
        StencilOp[StencilOp["INVERT"] = 5] = "INVERT";
        StencilOp[StencilOp["INCR_WRAP"] = 6] = "INCR_WRAP";
        StencilOp[StencilOp["DECR_WRAP"] = 7] = "DECR_WRAP";
      })(StencilOp || (StencilOp = {}));

      var BlendFactor;

      (function (BlendFactor) {
        BlendFactor[BlendFactor["ZERO"] = 0] = "ZERO";
        BlendFactor[BlendFactor["ONE"] = 1] = "ONE";
        BlendFactor[BlendFactor["SRC_ALPHA"] = 2] = "SRC_ALPHA";
        BlendFactor[BlendFactor["DST_ALPHA"] = 3] = "DST_ALPHA";
        BlendFactor[BlendFactor["ONE_MINUS_SRC_ALPHA"] = 4] = "ONE_MINUS_SRC_ALPHA";
        BlendFactor[BlendFactor["ONE_MINUS_DST_ALPHA"] = 5] = "ONE_MINUS_DST_ALPHA";
        BlendFactor[BlendFactor["SRC_COLOR"] = 6] = "SRC_COLOR";
        BlendFactor[BlendFactor["DST_COLOR"] = 7] = "DST_COLOR";
        BlendFactor[BlendFactor["ONE_MINUS_SRC_COLOR"] = 8] = "ONE_MINUS_SRC_COLOR";
        BlendFactor[BlendFactor["ONE_MINUS_DST_COLOR"] = 9] = "ONE_MINUS_DST_COLOR";
        BlendFactor[BlendFactor["SRC_ALPHA_SATURATE"] = 10] = "SRC_ALPHA_SATURATE";
        BlendFactor[BlendFactor["CONSTANT_COLOR"] = 11] = "CONSTANT_COLOR";
        BlendFactor[BlendFactor["ONE_MINUS_CONSTANT_COLOR"] = 12] = "ONE_MINUS_CONSTANT_COLOR";
        BlendFactor[BlendFactor["CONSTANT_ALPHA"] = 13] = "CONSTANT_ALPHA";
        BlendFactor[BlendFactor["ONE_MINUS_CONSTANT_ALPHA"] = 14] = "ONE_MINUS_CONSTANT_ALPHA";
      })(BlendFactor || (BlendFactor = {}));

      var BlendOp;

      (function (BlendOp) {
        BlendOp[BlendOp["ADD"] = 0] = "ADD";
        BlendOp[BlendOp["SUB"] = 1] = "SUB";
        BlendOp[BlendOp["REV_SUB"] = 2] = "REV_SUB";
        BlendOp[BlendOp["MIN"] = 3] = "MIN";
        BlendOp[BlendOp["MAX"] = 4] = "MAX";
      })(BlendOp || (BlendOp = {}));

      var ColorMask;

      (function (ColorMask) {
        ColorMask[ColorMask["NONE"] = 0] = "NONE";
        ColorMask[ColorMask["R"] = 1] = "R";
        ColorMask[ColorMask["G"] = 2] = "G";
        ColorMask[ColorMask["B"] = 4] = "B";
        ColorMask[ColorMask["A"] = 8] = "A";
        ColorMask[ColorMask["ALL"] = 15] = "ALL";
      })(ColorMask || (ColorMask = {}));

      var ShaderStageFlagBit;

      (function (ShaderStageFlagBit) {
        ShaderStageFlagBit[ShaderStageFlagBit["NONE"] = 0] = "NONE";
        ShaderStageFlagBit[ShaderStageFlagBit["VERTEX"] = 1] = "VERTEX";
        ShaderStageFlagBit[ShaderStageFlagBit["CONTROL"] = 2] = "CONTROL";
        ShaderStageFlagBit[ShaderStageFlagBit["EVALUATION"] = 4] = "EVALUATION";
        ShaderStageFlagBit[ShaderStageFlagBit["GEOMETRY"] = 8] = "GEOMETRY";
        ShaderStageFlagBit[ShaderStageFlagBit["FRAGMENT"] = 16] = "FRAGMENT";
        ShaderStageFlagBit[ShaderStageFlagBit["COMPUTE"] = 32] = "COMPUTE";
        ShaderStageFlagBit[ShaderStageFlagBit["ALL"] = 63] = "ALL";
      })(ShaderStageFlagBit || (ShaderStageFlagBit = {}));

      var LoadOp;

      (function (LoadOp) {
        LoadOp[LoadOp["LOAD"] = 0] = "LOAD";
        LoadOp[LoadOp["CLEAR"] = 1] = "CLEAR";
        LoadOp[LoadOp["DISCARD"] = 2] = "DISCARD";
      })(LoadOp || (LoadOp = {}));

      var StoreOp;

      (function (StoreOp) {
        StoreOp[StoreOp["STORE"] = 0] = "STORE";
        StoreOp[StoreOp["DISCARD"] = 1] = "DISCARD";
      })(StoreOp || (StoreOp = {}));

      var AccessFlagBit;

      (function (AccessFlagBit) {
        AccessFlagBit[AccessFlagBit["NONE"] = 0] = "NONE";
        AccessFlagBit[AccessFlagBit["INDIRECT_BUFFER"] = 1] = "INDIRECT_BUFFER";
        AccessFlagBit[AccessFlagBit["INDEX_BUFFER"] = 2] = "INDEX_BUFFER";
        AccessFlagBit[AccessFlagBit["VERTEX_BUFFER"] = 4] = "VERTEX_BUFFER";
        AccessFlagBit[AccessFlagBit["VERTEX_SHADER_READ_UNIFORM_BUFFER"] = 8] = "VERTEX_SHADER_READ_UNIFORM_BUFFER";
        AccessFlagBit[AccessFlagBit["VERTEX_SHADER_READ_TEXTURE"] = 16] = "VERTEX_SHADER_READ_TEXTURE";
        AccessFlagBit[AccessFlagBit["VERTEX_SHADER_READ_OTHER"] = 32] = "VERTEX_SHADER_READ_OTHER";
        AccessFlagBit[AccessFlagBit["FRAGMENT_SHADER_READ_UNIFORM_BUFFER"] = 64] = "FRAGMENT_SHADER_READ_UNIFORM_BUFFER";
        AccessFlagBit[AccessFlagBit["FRAGMENT_SHADER_READ_TEXTURE"] = 128] = "FRAGMENT_SHADER_READ_TEXTURE";
        AccessFlagBit[AccessFlagBit["FRAGMENT_SHADER_READ_COLOR_INPUT_ATTACHMENT"] = 256] = "FRAGMENT_SHADER_READ_COLOR_INPUT_ATTACHMENT";
        AccessFlagBit[AccessFlagBit["FRAGMENT_SHADER_READ_DEPTH_STENCIL_INPUT_ATTACHMENT"] = 512] = "FRAGMENT_SHADER_READ_DEPTH_STENCIL_INPUT_ATTACHMENT";
        AccessFlagBit[AccessFlagBit["FRAGMENT_SHADER_READ_OTHER"] = 1024] = "FRAGMENT_SHADER_READ_OTHER";
        AccessFlagBit[AccessFlagBit["COLOR_ATTACHMENT_READ"] = 2048] = "COLOR_ATTACHMENT_READ";
        AccessFlagBit[AccessFlagBit["DEPTH_STENCIL_ATTACHMENT_READ"] = 4096] = "DEPTH_STENCIL_ATTACHMENT_READ";
        AccessFlagBit[AccessFlagBit["COMPUTE_SHADER_READ_UNIFORM_BUFFER"] = 8192] = "COMPUTE_SHADER_READ_UNIFORM_BUFFER";
        AccessFlagBit[AccessFlagBit["COMPUTE_SHADER_READ_TEXTURE"] = 16384] = "COMPUTE_SHADER_READ_TEXTURE";
        AccessFlagBit[AccessFlagBit["COMPUTE_SHADER_READ_OTHER"] = 32768] = "COMPUTE_SHADER_READ_OTHER";
        AccessFlagBit[AccessFlagBit["TRANSFER_READ"] = 65536] = "TRANSFER_READ";
        AccessFlagBit[AccessFlagBit["HOST_READ"] = 131072] = "HOST_READ";
        AccessFlagBit[AccessFlagBit["PRESENT"] = 262144] = "PRESENT";
        AccessFlagBit[AccessFlagBit["VERTEX_SHADER_WRITE"] = 524288] = "VERTEX_SHADER_WRITE";
        AccessFlagBit[AccessFlagBit["FRAGMENT_SHADER_WRITE"] = 1048576] = "FRAGMENT_SHADER_WRITE";
        AccessFlagBit[AccessFlagBit["COLOR_ATTACHMENT_WRITE"] = 2097152] = "COLOR_ATTACHMENT_WRITE";
        AccessFlagBit[AccessFlagBit["DEPTH_STENCIL_ATTACHMENT_WRITE"] = 4194304] = "DEPTH_STENCIL_ATTACHMENT_WRITE";
        AccessFlagBit[AccessFlagBit["COMPUTE_SHADER_WRITE"] = 8388608] = "COMPUTE_SHADER_WRITE";
        AccessFlagBit[AccessFlagBit["TRANSFER_WRITE"] = 16777216] = "TRANSFER_WRITE";
        AccessFlagBit[AccessFlagBit["HOST_PREINITIALIZED"] = 33554432] = "HOST_PREINITIALIZED";
        AccessFlagBit[AccessFlagBit["HOST_WRITE"] = 67108864] = "HOST_WRITE";
      })(AccessFlagBit || (AccessFlagBit = {}));

      var ResolveMode;

      (function (ResolveMode) {
        ResolveMode[ResolveMode["NONE"] = 0] = "NONE";
        ResolveMode[ResolveMode["SAMPLE_ZERO"] = 1] = "SAMPLE_ZERO";
        ResolveMode[ResolveMode["AVERAGE"] = 2] = "AVERAGE";
        ResolveMode[ResolveMode["MIN"] = 3] = "MIN";
        ResolveMode[ResolveMode["MAX"] = 4] = "MAX";
      })(ResolveMode || (ResolveMode = {}));

      var PipelineBindPoint;

      (function (PipelineBindPoint) {
        PipelineBindPoint[PipelineBindPoint["GRAPHICS"] = 0] = "GRAPHICS";
        PipelineBindPoint[PipelineBindPoint["COMPUTE"] = 1] = "COMPUTE";
        PipelineBindPoint[PipelineBindPoint["RAY_TRACING"] = 2] = "RAY_TRACING";
      })(PipelineBindPoint || (PipelineBindPoint = {}));

      var PrimitiveMode;

      (function (PrimitiveMode) {
        PrimitiveMode[PrimitiveMode["POINT_LIST"] = 0] = "POINT_LIST";
        PrimitiveMode[PrimitiveMode["LINE_LIST"] = 1] = "LINE_LIST";
        PrimitiveMode[PrimitiveMode["LINE_STRIP"] = 2] = "LINE_STRIP";
        PrimitiveMode[PrimitiveMode["LINE_LOOP"] = 3] = "LINE_LOOP";
        PrimitiveMode[PrimitiveMode["LINE_LIST_ADJACENCY"] = 4] = "LINE_LIST_ADJACENCY";
        PrimitiveMode[PrimitiveMode["LINE_STRIP_ADJACENCY"] = 5] = "LINE_STRIP_ADJACENCY";
        PrimitiveMode[PrimitiveMode["ISO_LINE_LIST"] = 6] = "ISO_LINE_LIST";
        PrimitiveMode[PrimitiveMode["TRIANGLE_LIST"] = 7] = "TRIANGLE_LIST";
        PrimitiveMode[PrimitiveMode["TRIANGLE_STRIP"] = 8] = "TRIANGLE_STRIP";
        PrimitiveMode[PrimitiveMode["TRIANGLE_FAN"] = 9] = "TRIANGLE_FAN";
        PrimitiveMode[PrimitiveMode["TRIANGLE_LIST_ADJACENCY"] = 10] = "TRIANGLE_LIST_ADJACENCY";
        PrimitiveMode[PrimitiveMode["TRIANGLE_STRIP_ADJACENCY"] = 11] = "TRIANGLE_STRIP_ADJACENCY";
        PrimitiveMode[PrimitiveMode["TRIANGLE_PATCH_ADJACENCY"] = 12] = "TRIANGLE_PATCH_ADJACENCY";
        PrimitiveMode[PrimitiveMode["QUAD_PATCH_LIST"] = 13] = "QUAD_PATCH_LIST";
      })(PrimitiveMode || (PrimitiveMode = {}));

      var PolygonMode;

      (function (PolygonMode) {
        PolygonMode[PolygonMode["FILL"] = 0] = "FILL";
        PolygonMode[PolygonMode["POINT"] = 1] = "POINT";
        PolygonMode[PolygonMode["LINE"] = 2] = "LINE";
      })(PolygonMode || (PolygonMode = {}));

      var ShadeModel;

      (function (ShadeModel) {
        ShadeModel[ShadeModel["GOURAND"] = 0] = "GOURAND";
        ShadeModel[ShadeModel["FLAT"] = 1] = "FLAT";
      })(ShadeModel || (ShadeModel = {}));

      var CullMode;

      (function (CullMode) {
        CullMode[CullMode["NONE"] = 0] = "NONE";
        CullMode[CullMode["FRONT"] = 1] = "FRONT";
        CullMode[CullMode["BACK"] = 2] = "BACK";
      })(CullMode || (CullMode = {}));

      var DynamicStateFlagBit;

      (function (DynamicStateFlagBit) {
        DynamicStateFlagBit[DynamicStateFlagBit["NONE"] = 0] = "NONE";
        DynamicStateFlagBit[DynamicStateFlagBit["LINE_WIDTH"] = 1] = "LINE_WIDTH";
        DynamicStateFlagBit[DynamicStateFlagBit["DEPTH_BIAS"] = 2] = "DEPTH_BIAS";
        DynamicStateFlagBit[DynamicStateFlagBit["BLEND_CONSTANTS"] = 4] = "BLEND_CONSTANTS";
        DynamicStateFlagBit[DynamicStateFlagBit["DEPTH_BOUNDS"] = 8] = "DEPTH_BOUNDS";
        DynamicStateFlagBit[DynamicStateFlagBit["STENCIL_WRITE_MASK"] = 16] = "STENCIL_WRITE_MASK";
        DynamicStateFlagBit[DynamicStateFlagBit["STENCIL_COMPARE_MASK"] = 32] = "STENCIL_COMPARE_MASK";
      })(DynamicStateFlagBit || (DynamicStateFlagBit = {}));

      var StencilFace;

      (function (StencilFace) {
        StencilFace[StencilFace["FRONT"] = 1] = "FRONT";
        StencilFace[StencilFace["BACK"] = 2] = "BACK";
        StencilFace[StencilFace["ALL"] = 3] = "ALL";
      })(StencilFace || (StencilFace = {}));

      var DescriptorType;

      (function (DescriptorType) {
        DescriptorType[DescriptorType["UNKNOWN"] = 0] = "UNKNOWN";
        DescriptorType[DescriptorType["UNIFORM_BUFFER"] = 1] = "UNIFORM_BUFFER";
        DescriptorType[DescriptorType["DYNAMIC_UNIFORM_BUFFER"] = 2] = "DYNAMIC_UNIFORM_BUFFER";
        DescriptorType[DescriptorType["STORAGE_BUFFER"] = 4] = "STORAGE_BUFFER";
        DescriptorType[DescriptorType["DYNAMIC_STORAGE_BUFFER"] = 8] = "DYNAMIC_STORAGE_BUFFER";
        DescriptorType[DescriptorType["SAMPLER_TEXTURE"] = 16] = "SAMPLER_TEXTURE";
        DescriptorType[DescriptorType["SAMPLER"] = 32] = "SAMPLER";
        DescriptorType[DescriptorType["TEXTURE"] = 64] = "TEXTURE";
        DescriptorType[DescriptorType["STORAGE_IMAGE"] = 128] = "STORAGE_IMAGE";
        DescriptorType[DescriptorType["INPUT_ATTACHMENT"] = 256] = "INPUT_ATTACHMENT";
      })(DescriptorType || (DescriptorType = {}));

      var QueueType;

      (function (QueueType) {
        QueueType[QueueType["GRAPHICS"] = 0] = "GRAPHICS";
        QueueType[QueueType["COMPUTE"] = 1] = "COMPUTE";
        QueueType[QueueType["TRANSFER"] = 2] = "TRANSFER";
      })(QueueType || (QueueType = {}));

      var QueryType;

      (function (QueryType) {
        QueryType[QueryType["OCCLUSION"] = 0] = "OCCLUSION";
        QueryType[QueryType["PIPELINE_STATISTICS"] = 1] = "PIPELINE_STATISTICS";
        QueryType[QueryType["TIMESTAMP"] = 2] = "TIMESTAMP";
      })(QueryType || (QueryType = {}));

      var CommandBufferType;

      (function (CommandBufferType) {
        CommandBufferType[CommandBufferType["PRIMARY"] = 0] = "PRIMARY";
        CommandBufferType[CommandBufferType["SECONDARY"] = 1] = "SECONDARY";
      })(CommandBufferType || (CommandBufferType = {}));

      var ClearFlagBit;

      (function (ClearFlagBit) {
        ClearFlagBit[ClearFlagBit["NONE"] = 0] = "NONE";
        ClearFlagBit[ClearFlagBit["COLOR"] = 1] = "COLOR";
        ClearFlagBit[ClearFlagBit["DEPTH"] = 2] = "DEPTH";
        ClearFlagBit[ClearFlagBit["STENCIL"] = 4] = "STENCIL";
        ClearFlagBit[ClearFlagBit["DEPTH_STENCIL"] = 6] = "DEPTH_STENCIL";
        ClearFlagBit[ClearFlagBit["ALL"] = 7] = "ALL";
      })(ClearFlagBit || (ClearFlagBit = {}));

      var BarrierType;

      (function (BarrierType) {
        BarrierType[BarrierType["FULL"] = 0] = "FULL";
        BarrierType[BarrierType["SPLIT_BEGIN"] = 1] = "SPLIT_BEGIN";
        BarrierType[BarrierType["SPLIT_END"] = 2] = "SPLIT_END";
      })(BarrierType || (BarrierType = {}));

      var PassType;

      (function (PassType) {
        PassType[PassType["RASTER"] = 0] = "RASTER";
        PassType[PassType["COMPUTE"] = 1] = "COMPUTE";
        PassType[PassType["COPY"] = 2] = "COPY";
        PassType[PassType["MOVE"] = 3] = "MOVE";
        PassType[PassType["RAYTRACE"] = 4] = "RAYTRACE";
        PassType[PassType["PRESENT"] = 5] = "PRESENT";
      })(PassType || (PassType = {}));

      var Size$1 = function () {
        function Size(x, y, z) {
          if (x === void 0) {
            x = 0;
          }

          if (y === void 0) {
            y = 0;
          }

          if (z === void 0) {
            z = 0;
          }

          this.x = x;
          this.y = y;
          this.z = z;
        }

        var _proto = Size.prototype;

        _proto.copy = function copy(info) {
          this.x = info.x;
          this.y = info.y;
          this.z = info.z;
          return this;
        };

        return Size;
      }();
      var DeviceCaps = function () {
        function DeviceCaps(maxVertexAttributes, maxVertexUniformVectors, maxFragmentUniformVectors, maxTextureUnits, maxImageUnits, maxVertexTextureUnits, maxColorRenderTargets, maxShaderStorageBufferBindings, maxShaderStorageBlockSize, maxUniformBufferBindings, maxUniformBlockSize, maxTextureSize, maxCubeMapTextureSize, maxArrayTextureLayers, max3DTextureSize, uboOffsetAlignment, maxComputeSharedMemorySize, maxComputeWorkGroupInvocations, maxComputeWorkGroupSize, maxComputeWorkGroupCount, supportQuery, clipSpaceMinZ, screenSpaceSignY, clipSpaceSignY) {
          if (maxVertexAttributes === void 0) {
            maxVertexAttributes = 0;
          }

          if (maxVertexUniformVectors === void 0) {
            maxVertexUniformVectors = 0;
          }

          if (maxFragmentUniformVectors === void 0) {
            maxFragmentUniformVectors = 0;
          }

          if (maxTextureUnits === void 0) {
            maxTextureUnits = 0;
          }

          if (maxImageUnits === void 0) {
            maxImageUnits = 0;
          }

          if (maxVertexTextureUnits === void 0) {
            maxVertexTextureUnits = 0;
          }

          if (maxColorRenderTargets === void 0) {
            maxColorRenderTargets = 0;
          }

          if (maxShaderStorageBufferBindings === void 0) {
            maxShaderStorageBufferBindings = 0;
          }

          if (maxShaderStorageBlockSize === void 0) {
            maxShaderStorageBlockSize = 0;
          }

          if (maxUniformBufferBindings === void 0) {
            maxUniformBufferBindings = 0;
          }

          if (maxUniformBlockSize === void 0) {
            maxUniformBlockSize = 0;
          }

          if (maxTextureSize === void 0) {
            maxTextureSize = 0;
          }

          if (maxCubeMapTextureSize === void 0) {
            maxCubeMapTextureSize = 0;
          }

          if (maxArrayTextureLayers === void 0) {
            maxArrayTextureLayers = 0;
          }

          if (max3DTextureSize === void 0) {
            max3DTextureSize = 0;
          }

          if (uboOffsetAlignment === void 0) {
            uboOffsetAlignment = 1;
          }

          if (maxComputeSharedMemorySize === void 0) {
            maxComputeSharedMemorySize = 0;
          }

          if (maxComputeWorkGroupInvocations === void 0) {
            maxComputeWorkGroupInvocations = 0;
          }

          if (maxComputeWorkGroupSize === void 0) {
            maxComputeWorkGroupSize = new Size$1();
          }

          if (maxComputeWorkGroupCount === void 0) {
            maxComputeWorkGroupCount = new Size$1();
          }

          if (supportQuery === void 0) {
            supportQuery = false;
          }

          if (clipSpaceMinZ === void 0) {
            clipSpaceMinZ = -1;
          }

          if (screenSpaceSignY === void 0) {
            screenSpaceSignY = 1;
          }

          if (clipSpaceSignY === void 0) {
            clipSpaceSignY = 1;
          }

          this.maxVertexAttributes = maxVertexAttributes;
          this.maxVertexUniformVectors = maxVertexUniformVectors;
          this.maxFragmentUniformVectors = maxFragmentUniformVectors;
          this.maxTextureUnits = maxTextureUnits;
          this.maxImageUnits = maxImageUnits;
          this.maxVertexTextureUnits = maxVertexTextureUnits;
          this.maxColorRenderTargets = maxColorRenderTargets;
          this.maxShaderStorageBufferBindings = maxShaderStorageBufferBindings;
          this.maxShaderStorageBlockSize = maxShaderStorageBlockSize;
          this.maxUniformBufferBindings = maxUniformBufferBindings;
          this.maxUniformBlockSize = maxUniformBlockSize;
          this.maxTextureSize = maxTextureSize;
          this.maxCubeMapTextureSize = maxCubeMapTextureSize;
          this.maxArrayTextureLayers = maxArrayTextureLayers;
          this.max3DTextureSize = max3DTextureSize;
          this.uboOffsetAlignment = uboOffsetAlignment;
          this.maxComputeSharedMemorySize = maxComputeSharedMemorySize;
          this.maxComputeWorkGroupInvocations = maxComputeWorkGroupInvocations;
          this.maxComputeWorkGroupSize = maxComputeWorkGroupSize;
          this.maxComputeWorkGroupCount = maxComputeWorkGroupCount;
          this.supportQuery = supportQuery;
          this.clipSpaceMinZ = clipSpaceMinZ;
          this.screenSpaceSignY = screenSpaceSignY;
          this.clipSpaceSignY = clipSpaceSignY;
        }

        var _proto2 = DeviceCaps.prototype;

        _proto2.copy = function copy(info) {
          this.maxVertexAttributes = info.maxVertexAttributes;
          this.maxVertexUniformVectors = info.maxVertexUniformVectors;
          this.maxFragmentUniformVectors = info.maxFragmentUniformVectors;
          this.maxTextureUnits = info.maxTextureUnits;
          this.maxImageUnits = info.maxImageUnits;
          this.maxVertexTextureUnits = info.maxVertexTextureUnits;
          this.maxColorRenderTargets = info.maxColorRenderTargets;
          this.maxShaderStorageBufferBindings = info.maxShaderStorageBufferBindings;
          this.maxShaderStorageBlockSize = info.maxShaderStorageBlockSize;
          this.maxUniformBufferBindings = info.maxUniformBufferBindings;
          this.maxUniformBlockSize = info.maxUniformBlockSize;
          this.maxTextureSize = info.maxTextureSize;
          this.maxCubeMapTextureSize = info.maxCubeMapTextureSize;
          this.maxArrayTextureLayers = info.maxArrayTextureLayers;
          this.max3DTextureSize = info.max3DTextureSize;
          this.uboOffsetAlignment = info.uboOffsetAlignment;
          this.maxComputeSharedMemorySize = info.maxComputeSharedMemorySize;
          this.maxComputeWorkGroupInvocations = info.maxComputeWorkGroupInvocations;
          this.maxComputeWorkGroupSize.copy(info.maxComputeWorkGroupSize);
          this.maxComputeWorkGroupCount.copy(info.maxComputeWorkGroupCount);
          this.supportQuery = info.supportQuery;
          this.clipSpaceMinZ = info.clipSpaceMinZ;
          this.screenSpaceSignY = info.screenSpaceSignY;
          this.clipSpaceSignY = info.clipSpaceSignY;
          return this;
        };

        return DeviceCaps;
      }();
      var DeviceOptions = function () {
        function DeviceOptions(enableBarrierDeduce) {
          if (enableBarrierDeduce === void 0) {
            enableBarrierDeduce = true;
          }

          this.enableBarrierDeduce = enableBarrierDeduce;
        }

        var _proto3 = DeviceOptions.prototype;

        _proto3.copy = function copy(info) {
          this.enableBarrierDeduce = info.enableBarrierDeduce;
          return this;
        };

        return DeviceOptions;
      }();
      var Offset = function () {
        function Offset(x, y, z) {
          if (x === void 0) {
            x = 0;
          }

          if (y === void 0) {
            y = 0;
          }

          if (z === void 0) {
            z = 0;
          }

          this.x = x;
          this.y = y;
          this.z = z;
        }

        var _proto4 = Offset.prototype;

        _proto4.copy = function copy(info) {
          this.x = info.x;
          this.y = info.y;
          this.z = info.z;
          return this;
        };

        return Offset;
      }();
      var Rect$1 = function () {
        function Rect(x, y, width, height) {
          if (x === void 0) {
            x = 0;
          }

          if (y === void 0) {
            y = 0;
          }

          if (width === void 0) {
            width = 0;
          }

          if (height === void 0) {
            height = 0;
          }

          this.x = x;
          this.y = y;
          this.width = width;
          this.height = height;
        }

        var _proto5 = Rect.prototype;

        _proto5.copy = function copy(info) {
          this.x = info.x;
          this.y = info.y;
          this.width = info.width;
          this.height = info.height;
          return this;
        };

        return Rect;
      }();
      var Extent = function () {
        function Extent(width, height, depth) {
          if (width === void 0) {
            width = 0;
          }

          if (height === void 0) {
            height = 0;
          }

          if (depth === void 0) {
            depth = 1;
          }

          this.width = width;
          this.height = height;
          this.depth = depth;
        }

        var _proto6 = Extent.prototype;

        _proto6.copy = function copy(info) {
          this.width = info.width;
          this.height = info.height;
          this.depth = info.depth;
          return this;
        };

        return Extent;
      }();
      var TextureSubresLayers = function () {
        function TextureSubresLayers(mipLevel, baseArrayLayer, layerCount) {
          if (mipLevel === void 0) {
            mipLevel = 0;
          }

          if (baseArrayLayer === void 0) {
            baseArrayLayer = 0;
          }

          if (layerCount === void 0) {
            layerCount = 1;
          }

          this.mipLevel = mipLevel;
          this.baseArrayLayer = baseArrayLayer;
          this.layerCount = layerCount;
        }

        var _proto7 = TextureSubresLayers.prototype;

        _proto7.copy = function copy(info) {
          this.mipLevel = info.mipLevel;
          this.baseArrayLayer = info.baseArrayLayer;
          this.layerCount = info.layerCount;
          return this;
        };

        return TextureSubresLayers;
      }();
      var TextureSubresRange = function () {
        function TextureSubresRange(baseMipLevel, levelCount, baseArrayLayer, layerCount) {
          if (baseMipLevel === void 0) {
            baseMipLevel = 0;
          }

          if (levelCount === void 0) {
            levelCount = 1;
          }

          if (baseArrayLayer === void 0) {
            baseArrayLayer = 0;
          }

          if (layerCount === void 0) {
            layerCount = 1;
          }

          this.baseMipLevel = baseMipLevel;
          this.levelCount = levelCount;
          this.baseArrayLayer = baseArrayLayer;
          this.layerCount = layerCount;
        }

        var _proto8 = TextureSubresRange.prototype;

        _proto8.copy = function copy(info) {
          this.baseMipLevel = info.baseMipLevel;
          this.levelCount = info.levelCount;
          this.baseArrayLayer = info.baseArrayLayer;
          this.layerCount = info.layerCount;
          return this;
        };

        return TextureSubresRange;
      }();
      var TextureCopy = function () {
        function TextureCopy(srcSubres, srcOffset, dstSubres, dstOffset, extent) {
          if (srcSubres === void 0) {
            srcSubres = new TextureSubresLayers();
          }

          if (srcOffset === void 0) {
            srcOffset = new Offset();
          }

          if (dstSubres === void 0) {
            dstSubres = new TextureSubresLayers();
          }

          if (dstOffset === void 0) {
            dstOffset = new Offset();
          }

          if (extent === void 0) {
            extent = new Extent();
          }

          this.srcSubres = srcSubres;
          this.srcOffset = srcOffset;
          this.dstSubres = dstSubres;
          this.dstOffset = dstOffset;
          this.extent = extent;
        }

        var _proto9 = TextureCopy.prototype;

        _proto9.copy = function copy(info) {
          this.srcSubres.copy(info.srcSubres);
          this.srcOffset.copy(info.srcOffset);
          this.dstSubres.copy(info.dstSubres);
          this.dstOffset.copy(info.dstOffset);
          this.extent.copy(info.extent);
          return this;
        };

        return TextureCopy;
      }();
      var TextureBlit = function () {
        function TextureBlit(srcSubres, srcOffset, srcExtent, dstSubres, dstOffset, dstExtent) {
          if (srcSubres === void 0) {
            srcSubres = new TextureSubresLayers();
          }

          if (srcOffset === void 0) {
            srcOffset = new Offset();
          }

          if (srcExtent === void 0) {
            srcExtent = new Extent();
          }

          if (dstSubres === void 0) {
            dstSubres = new TextureSubresLayers();
          }

          if (dstOffset === void 0) {
            dstOffset = new Offset();
          }

          if (dstExtent === void 0) {
            dstExtent = new Extent();
          }

          this.srcSubres = srcSubres;
          this.srcOffset = srcOffset;
          this.srcExtent = srcExtent;
          this.dstSubres = dstSubres;
          this.dstOffset = dstOffset;
          this.dstExtent = dstExtent;
        }

        var _proto10 = TextureBlit.prototype;

        _proto10.copy = function copy(info) {
          this.srcSubres.copy(info.srcSubres);
          this.srcOffset.copy(info.srcOffset);
          this.srcExtent.copy(info.srcExtent);
          this.dstSubres.copy(info.dstSubres);
          this.dstOffset.copy(info.dstOffset);
          this.dstExtent.copy(info.dstExtent);
          return this;
        };

        return TextureBlit;
      }();
      var BufferTextureCopy = function () {
        function BufferTextureCopy(buffOffset, buffStride, buffTexHeight, texOffset, texExtent, texSubres) {
          if (buffOffset === void 0) {
            buffOffset = 0;
          }

          if (buffStride === void 0) {
            buffStride = 0;
          }

          if (buffTexHeight === void 0) {
            buffTexHeight = 0;
          }

          if (texOffset === void 0) {
            texOffset = new Offset();
          }

          if (texExtent === void 0) {
            texExtent = new Extent();
          }

          if (texSubres === void 0) {
            texSubres = new TextureSubresLayers();
          }

          this.buffOffset = buffOffset;
          this.buffStride = buffStride;
          this.buffTexHeight = buffTexHeight;
          this.texOffset = texOffset;
          this.texExtent = texExtent;
          this.texSubres = texSubres;
        }

        var _proto11 = BufferTextureCopy.prototype;

        _proto11.copy = function copy(info) {
          this.buffOffset = info.buffOffset;
          this.buffStride = info.buffStride;
          this.buffTexHeight = info.buffTexHeight;
          this.texOffset.copy(info.texOffset);
          this.texExtent.copy(info.texExtent);
          this.texSubres.copy(info.texSubres);
          return this;
        };

        return BufferTextureCopy;
      }();
      var Viewport = function () {
        function Viewport(left, top, width, height, minDepth, maxDepth) {
          if (left === void 0) {
            left = 0;
          }

          if (top === void 0) {
            top = 0;
          }

          if (width === void 0) {
            width = 0;
          }

          if (height === void 0) {
            height = 0;
          }

          if (minDepth === void 0) {
            minDepth = 0;
          }

          if (maxDepth === void 0) {
            maxDepth = 1;
          }

          this.left = left;
          this.top = top;
          this.width = width;
          this.height = height;
          this.minDepth = minDepth;
          this.maxDepth = maxDepth;
        }

        var _proto12 = Viewport.prototype;

        _proto12.copy = function copy(info) {
          this.left = info.left;
          this.top = info.top;
          this.width = info.width;
          this.height = info.height;
          this.minDepth = info.minDepth;
          this.maxDepth = info.maxDepth;
          return this;
        };

        return Viewport;
      }();
      var Color$1 = function () {
        function Color(x, y, z, w) {
          if (x === void 0) {
            x = 0;
          }

          if (y === void 0) {
            y = 0;
          }

          if (z === void 0) {
            z = 0;
          }

          if (w === void 0) {
            w = 0;
          }

          this.x = x;
          this.y = y;
          this.z = z;
          this.w = w;
        }

        var _proto13 = Color.prototype;

        _proto13.copy = function copy(info) {
          this.x = info.x;
          this.y = info.y;
          this.z = info.z;
          this.w = info.w;
          return this;
        };

        return Color;
      }();
      var BindingMappingInfo = function () {
        function BindingMappingInfo(maxBlockCounts, maxSamplerTextureCounts, maxSamplerCounts, maxTextureCounts, maxBufferCounts, maxImageCounts, maxSubpassInputCounts, setIndices) {
          if (maxBlockCounts === void 0) {
            maxBlockCounts = [0];
          }

          if (maxSamplerTextureCounts === void 0) {
            maxSamplerTextureCounts = [0];
          }

          if (maxSamplerCounts === void 0) {
            maxSamplerCounts = [0];
          }

          if (maxTextureCounts === void 0) {
            maxTextureCounts = [0];
          }

          if (maxBufferCounts === void 0) {
            maxBufferCounts = [0];
          }

          if (maxImageCounts === void 0) {
            maxImageCounts = [0];
          }

          if (maxSubpassInputCounts === void 0) {
            maxSubpassInputCounts = [0];
          }

          if (setIndices === void 0) {
            setIndices = [0];
          }

          this.maxBlockCounts = maxBlockCounts;
          this.maxSamplerTextureCounts = maxSamplerTextureCounts;
          this.maxSamplerCounts = maxSamplerCounts;
          this.maxTextureCounts = maxTextureCounts;
          this.maxBufferCounts = maxBufferCounts;
          this.maxImageCounts = maxImageCounts;
          this.maxSubpassInputCounts = maxSubpassInputCounts;
          this.setIndices = setIndices;
        }

        var _proto14 = BindingMappingInfo.prototype;

        _proto14.copy = function copy(info) {
          this.maxBlockCounts = info.maxBlockCounts.slice();
          this.maxSamplerTextureCounts = info.maxSamplerTextureCounts.slice();
          this.maxSamplerCounts = info.maxSamplerCounts.slice();
          this.maxTextureCounts = info.maxTextureCounts.slice();
          this.maxBufferCounts = info.maxBufferCounts.slice();
          this.maxImageCounts = info.maxImageCounts.slice();
          this.maxSubpassInputCounts = info.maxSubpassInputCounts.slice();
          this.setIndices = info.setIndices.slice();
          return this;
        };

        return BindingMappingInfo;
      }();
      var SwapchainInfo = function () {
        function SwapchainInfo(windowId, windowHandle, vsyncMode, width, height) {
          if (windowId === void 0) {
            windowId = 0;
          }

          if (windowHandle === void 0) {
            windowHandle = null;
          }

          if (vsyncMode === void 0) {
            vsyncMode = VsyncMode.ON;
          }

          if (width === void 0) {
            width = 0;
          }

          if (height === void 0) {
            height = 0;
          }

          this.windowId = windowId;
          this.windowHandle = windowHandle;
          this.vsyncMode = vsyncMode;
          this.width = width;
          this.height = height;
        }

        var _proto15 = SwapchainInfo.prototype;

        _proto15.copy = function copy(info) {
          this.windowId = info.windowId;
          this.windowHandle = info.windowHandle;
          this.vsyncMode = info.vsyncMode;
          this.width = info.width;
          this.height = info.height;
          return this;
        };

        return SwapchainInfo;
      }();
      var DeviceInfo = function () {
        function DeviceInfo(bindingMappingInfo) {
          if (bindingMappingInfo === void 0) {
            bindingMappingInfo = new BindingMappingInfo();
          }

          this.bindingMappingInfo = bindingMappingInfo;
        }

        var _proto16 = DeviceInfo.prototype;

        _proto16.copy = function copy(info) {
          this.bindingMappingInfo.copy(info.bindingMappingInfo);
          return this;
        };

        return DeviceInfo;
      }();
      var BufferInfo = function () {
        function BufferInfo(usage, memUsage, size, stride, flags) {
          if (usage === void 0) {
            usage = BufferUsageBit.NONE;
          }

          if (memUsage === void 0) {
            memUsage = MemoryUsageBit.NONE;
          }

          if (size === void 0) {
            size = 0;
          }

          if (stride === void 0) {
            stride = 1;
          }

          if (flags === void 0) {
            flags = BufferFlagBit.NONE;
          }

          this.usage = usage;
          this.memUsage = memUsage;
          this.size = size;
          this.stride = stride;
          this.flags = flags;
        }

        var _proto17 = BufferInfo.prototype;

        _proto17.copy = function copy(info) {
          this.usage = info.usage;
          this.memUsage = info.memUsage;
          this.size = info.size;
          this.stride = info.stride;
          this.flags = info.flags;
          return this;
        };

        return BufferInfo;
      }();
      var BufferViewInfo = function () {
        function BufferViewInfo(buffer, offset, range) {
          if (buffer === void 0) {
            buffer = null;
          }

          if (offset === void 0) {
            offset = 0;
          }

          if (range === void 0) {
            range = 0;
          }

          this.buffer = buffer;
          this.offset = offset;
          this.range = range;
        }

        var _proto18 = BufferViewInfo.prototype;

        _proto18.copy = function copy(info) {
          this.buffer = info.buffer;
          this.offset = info.offset;
          this.range = info.range;
          return this;
        };

        return BufferViewInfo;
      }();
      var DrawInfo = function () {
        function DrawInfo(vertexCount, firstVertex, indexCount, firstIndex, vertexOffset, instanceCount, firstInstance) {
          if (vertexCount === void 0) {
            vertexCount = 0;
          }

          if (firstVertex === void 0) {
            firstVertex = 0;
          }

          if (indexCount === void 0) {
            indexCount = 0;
          }

          if (firstIndex === void 0) {
            firstIndex = 0;
          }

          if (vertexOffset === void 0) {
            vertexOffset = 0;
          }

          if (instanceCount === void 0) {
            instanceCount = 0;
          }

          if (firstInstance === void 0) {
            firstInstance = 0;
          }

          this.vertexCount = vertexCount;
          this.firstVertex = firstVertex;
          this.indexCount = indexCount;
          this.firstIndex = firstIndex;
          this.vertexOffset = vertexOffset;
          this.instanceCount = instanceCount;
          this.firstInstance = firstInstance;
        }

        var _proto19 = DrawInfo.prototype;

        _proto19.copy = function copy(info) {
          this.vertexCount = info.vertexCount;
          this.firstVertex = info.firstVertex;
          this.indexCount = info.indexCount;
          this.firstIndex = info.firstIndex;
          this.vertexOffset = info.vertexOffset;
          this.instanceCount = info.instanceCount;
          this.firstInstance = info.firstInstance;
          return this;
        };

        return DrawInfo;
      }();
      var DispatchInfo = function () {
        function DispatchInfo(groupCountX, groupCountY, groupCountZ, indirectBuffer, indirectOffset) {
          if (groupCountX === void 0) {
            groupCountX = 0;
          }

          if (groupCountY === void 0) {
            groupCountY = 0;
          }

          if (groupCountZ === void 0) {
            groupCountZ = 0;
          }

          if (indirectBuffer === void 0) {
            indirectBuffer = null;
          }

          if (indirectOffset === void 0) {
            indirectOffset = 0;
          }

          this.groupCountX = groupCountX;
          this.groupCountY = groupCountY;
          this.groupCountZ = groupCountZ;
          this.indirectBuffer = indirectBuffer;
          this.indirectOffset = indirectOffset;
        }

        var _proto20 = DispatchInfo.prototype;

        _proto20.copy = function copy(info) {
          this.groupCountX = info.groupCountX;
          this.groupCountY = info.groupCountY;
          this.groupCountZ = info.groupCountZ;
          this.indirectBuffer = info.indirectBuffer;
          this.indirectOffset = info.indirectOffset;
          return this;
        };

        return DispatchInfo;
      }();
      var IndirectBuffer = function () {
        function IndirectBuffer(drawInfos) {
          if (drawInfos === void 0) {
            drawInfos = [];
          }

          this.drawInfos = drawInfos;
        }

        var _proto21 = IndirectBuffer.prototype;

        _proto21.copy = function copy(info) {
          deepCopy(this.drawInfos, info.drawInfos, DrawInfo);
          return this;
        };

        return IndirectBuffer;
      }();
      var TextureInfo = function () {
        function TextureInfo(type, usage, format, width, height, flags, layerCount, levelCount, samples, depth, externalRes) {
          if (type === void 0) {
            type = TextureType.TEX2D;
          }

          if (usage === void 0) {
            usage = TextureUsageBit.NONE;
          }

          if (format === void 0) {
            format = Format.UNKNOWN;
          }

          if (width === void 0) {
            width = 0;
          }

          if (height === void 0) {
            height = 0;
          }

          if (flags === void 0) {
            flags = TextureFlagBit.NONE;
          }

          if (layerCount === void 0) {
            layerCount = 1;
          }

          if (levelCount === void 0) {
            levelCount = 1;
          }

          if (samples === void 0) {
            samples = SampleCount.ONE;
          }

          if (depth === void 0) {
            depth = 1;
          }

          if (externalRes === void 0) {
            externalRes = 0;
          }

          this.type = type;
          this.usage = usage;
          this.format = format;
          this.width = width;
          this.height = height;
          this.flags = flags;
          this.layerCount = layerCount;
          this.levelCount = levelCount;
          this.samples = samples;
          this.depth = depth;
          this.externalRes = externalRes;
        }

        var _proto22 = TextureInfo.prototype;

        _proto22.copy = function copy(info) {
          this.type = info.type;
          this.usage = info.usage;
          this.format = info.format;
          this.width = info.width;
          this.height = info.height;
          this.flags = info.flags;
          this.layerCount = info.layerCount;
          this.levelCount = info.levelCount;
          this.samples = info.samples;
          this.depth = info.depth;
          this.externalRes = info.externalRes;
          return this;
        };

        return TextureInfo;
      }();
      var TextureViewInfo = function () {
        function TextureViewInfo(texture, type, format, baseLevel, levelCount, baseLayer, layerCount) {
          if (texture === void 0) {
            texture = null;
          }

          if (type === void 0) {
            type = TextureType.TEX2D;
          }

          if (format === void 0) {
            format = Format.UNKNOWN;
          }

          if (baseLevel === void 0) {
            baseLevel = 0;
          }

          if (levelCount === void 0) {
            levelCount = 1;
          }

          if (baseLayer === void 0) {
            baseLayer = 0;
          }

          if (layerCount === void 0) {
            layerCount = 1;
          }

          this.texture = texture;
          this.type = type;
          this.format = format;
          this.baseLevel = baseLevel;
          this.levelCount = levelCount;
          this.baseLayer = baseLayer;
          this.layerCount = layerCount;
        }

        var _proto23 = TextureViewInfo.prototype;

        _proto23.copy = function copy(info) {
          this.texture = info.texture;
          this.type = info.type;
          this.format = info.format;
          this.baseLevel = info.baseLevel;
          this.levelCount = info.levelCount;
          this.baseLayer = info.baseLayer;
          this.layerCount = info.layerCount;
          return this;
        };

        return TextureViewInfo;
      }();
      var SamplerInfo = function () {
        function SamplerInfo(minFilter, magFilter, mipFilter, addressU, addressV, addressW, maxAnisotropy, cmpFunc) {
          if (minFilter === void 0) {
            minFilter = Filter.LINEAR;
          }

          if (magFilter === void 0) {
            magFilter = Filter.LINEAR;
          }

          if (mipFilter === void 0) {
            mipFilter = Filter.NONE;
          }

          if (addressU === void 0) {
            addressU = Address.WRAP;
          }

          if (addressV === void 0) {
            addressV = Address.WRAP;
          }

          if (addressW === void 0) {
            addressW = Address.WRAP;
          }

          if (maxAnisotropy === void 0) {
            maxAnisotropy = 0;
          }

          if (cmpFunc === void 0) {
            cmpFunc = ComparisonFunc.ALWAYS;
          }

          this.minFilter = minFilter;
          this.magFilter = magFilter;
          this.mipFilter = mipFilter;
          this.addressU = addressU;
          this.addressV = addressV;
          this.addressW = addressW;
          this.maxAnisotropy = maxAnisotropy;
          this.cmpFunc = cmpFunc;
        }

        var _proto24 = SamplerInfo.prototype;

        _proto24.copy = function copy(info) {
          this.minFilter = info.minFilter;
          this.magFilter = info.magFilter;
          this.mipFilter = info.mipFilter;
          this.addressU = info.addressU;
          this.addressV = info.addressV;
          this.addressW = info.addressW;
          this.maxAnisotropy = info.maxAnisotropy;
          this.cmpFunc = info.cmpFunc;
          return this;
        };

        return SamplerInfo;
      }();
      var Uniform = function () {
        function Uniform(name, type, count) {
          if (name === void 0) {
            name = '';
          }

          if (type === void 0) {
            type = Type.UNKNOWN;
          }

          if (count === void 0) {
            count = 0;
          }

          this.name = name;
          this.type = type;
          this.count = count;
        }

        var _proto25 = Uniform.prototype;

        _proto25.copy = function copy(info) {
          this.name = info.name;
          this.type = info.type;
          this.count = info.count;
          return this;
        };

        return Uniform;
      }();
      var UniformBlock = function () {
        function UniformBlock(set, binding, name, members, count, flattened) {
          if (set === void 0) {
            set = 0;
          }

          if (binding === void 0) {
            binding = 0;
          }

          if (name === void 0) {
            name = '';
          }

          if (members === void 0) {
            members = [];
          }

          if (count === void 0) {
            count = 0;
          }

          if (flattened === void 0) {
            flattened = 0;
          }

          this.set = set;
          this.binding = binding;
          this.name = name;
          this.members = members;
          this.count = count;
          this.flattened = flattened;
        }

        var _proto26 = UniformBlock.prototype;

        _proto26.copy = function copy(info) {
          this.set = info.set;
          this.binding = info.binding;
          this.name = info.name;
          deepCopy(this.members, info.members, Uniform);
          this.count = info.count;
          this.flattened = info.flattened;
          return this;
        };

        return UniformBlock;
      }();
      var UniformSamplerTexture = function () {
        function UniformSamplerTexture(set, binding, name, type, count, flattened) {
          if (set === void 0) {
            set = 0;
          }

          if (binding === void 0) {
            binding = 0;
          }

          if (name === void 0) {
            name = '';
          }

          if (type === void 0) {
            type = Type.UNKNOWN;
          }

          if (count === void 0) {
            count = 0;
          }

          if (flattened === void 0) {
            flattened = 0;
          }

          this.set = set;
          this.binding = binding;
          this.name = name;
          this.type = type;
          this.count = count;
          this.flattened = flattened;
        }

        var _proto27 = UniformSamplerTexture.prototype;

        _proto27.copy = function copy(info) {
          this.set = info.set;
          this.binding = info.binding;
          this.name = info.name;
          this.type = info.type;
          this.count = info.count;
          this.flattened = info.flattened;
          return this;
        };

        return UniformSamplerTexture;
      }();
      var UniformSampler = function () {
        function UniformSampler(set, binding, name, count, flattened) {
          if (set === void 0) {
            set = 0;
          }

          if (binding === void 0) {
            binding = 0;
          }

          if (name === void 0) {
            name = '';
          }

          if (count === void 0) {
            count = 0;
          }

          if (flattened === void 0) {
            flattened = 0;
          }

          this.set = set;
          this.binding = binding;
          this.name = name;
          this.count = count;
          this.flattened = flattened;
        }

        var _proto28 = UniformSampler.prototype;

        _proto28.copy = function copy(info) {
          this.set = info.set;
          this.binding = info.binding;
          this.name = info.name;
          this.count = info.count;
          this.flattened = info.flattened;
          return this;
        };

        return UniformSampler;
      }();
      var UniformTexture = function () {
        function UniformTexture(set, binding, name, type, count, flattened) {
          if (set === void 0) {
            set = 0;
          }

          if (binding === void 0) {
            binding = 0;
          }

          if (name === void 0) {
            name = '';
          }

          if (type === void 0) {
            type = Type.UNKNOWN;
          }

          if (count === void 0) {
            count = 0;
          }

          if (flattened === void 0) {
            flattened = 0;
          }

          this.set = set;
          this.binding = binding;
          this.name = name;
          this.type = type;
          this.count = count;
          this.flattened = flattened;
        }

        var _proto29 = UniformTexture.prototype;

        _proto29.copy = function copy(info) {
          this.set = info.set;
          this.binding = info.binding;
          this.name = info.name;
          this.type = info.type;
          this.count = info.count;
          this.flattened = info.flattened;
          return this;
        };

        return UniformTexture;
      }();
      var UniformStorageImage = function () {
        function UniformStorageImage(set, binding, name, type, count, memoryAccess, flattened) {
          if (set === void 0) {
            set = 0;
          }

          if (binding === void 0) {
            binding = 0;
          }

          if (name === void 0) {
            name = '';
          }

          if (type === void 0) {
            type = Type.UNKNOWN;
          }

          if (count === void 0) {
            count = 0;
          }

          if (memoryAccess === void 0) {
            memoryAccess = MemoryAccessBit.READ_WRITE;
          }

          if (flattened === void 0) {
            flattened = 0;
          }

          this.set = set;
          this.binding = binding;
          this.name = name;
          this.type = type;
          this.count = count;
          this.memoryAccess = memoryAccess;
          this.flattened = flattened;
        }

        var _proto30 = UniformStorageImage.prototype;

        _proto30.copy = function copy(info) {
          this.set = info.set;
          this.binding = info.binding;
          this.name = info.name;
          this.type = info.type;
          this.count = info.count;
          this.memoryAccess = info.memoryAccess;
          this.flattened = info.flattened;
          return this;
        };

        return UniformStorageImage;
      }();
      var UniformStorageBuffer = function () {
        function UniformStorageBuffer(set, binding, name, count, memoryAccess, flattened) {
          if (set === void 0) {
            set = 0;
          }

          if (binding === void 0) {
            binding = 0;
          }

          if (name === void 0) {
            name = '';
          }

          if (count === void 0) {
            count = 0;
          }

          if (memoryAccess === void 0) {
            memoryAccess = MemoryAccessBit.READ_WRITE;
          }

          if (flattened === void 0) {
            flattened = 0;
          }

          this.set = set;
          this.binding = binding;
          this.name = name;
          this.count = count;
          this.memoryAccess = memoryAccess;
          this.flattened = flattened;
        }

        var _proto31 = UniformStorageBuffer.prototype;

        _proto31.copy = function copy(info) {
          this.set = info.set;
          this.binding = info.binding;
          this.name = info.name;
          this.count = info.count;
          this.memoryAccess = info.memoryAccess;
          this.flattened = info.flattened;
          return this;
        };

        return UniformStorageBuffer;
      }();
      var UniformInputAttachment = function () {
        function UniformInputAttachment(set, binding, name, count, flattened) {
          if (set === void 0) {
            set = 0;
          }

          if (binding === void 0) {
            binding = 0;
          }

          if (name === void 0) {
            name = '';
          }

          if (count === void 0) {
            count = 0;
          }

          if (flattened === void 0) {
            flattened = 0;
          }

          this.set = set;
          this.binding = binding;
          this.name = name;
          this.count = count;
          this.flattened = flattened;
        }

        var _proto32 = UniformInputAttachment.prototype;

        _proto32.copy = function copy(info) {
          this.set = info.set;
          this.binding = info.binding;
          this.name = info.name;
          this.count = info.count;
          this.flattened = info.flattened;
          return this;
        };

        return UniformInputAttachment;
      }();
      var ShaderStage = function () {
        function ShaderStage(stage, source) {
          if (stage === void 0) {
            stage = ShaderStageFlagBit.NONE;
          }

          if (source === void 0) {
            source = '';
          }

          this.stage = stage;
          this.source = source;
        }

        var _proto33 = ShaderStage.prototype;

        _proto33.copy = function copy(info) {
          this.stage = info.stage;
          this.source = info.source;
          return this;
        };

        return ShaderStage;
      }();
      var Attribute = function () {
        function Attribute(name, format, isNormalized, stream, isInstanced, location) {
          if (name === void 0) {
            name = '';
          }

          if (format === void 0) {
            format = Format.UNKNOWN;
          }

          if (isNormalized === void 0) {
            isNormalized = false;
          }

          if (stream === void 0) {
            stream = 0;
          }

          if (isInstanced === void 0) {
            isInstanced = false;
          }

          if (location === void 0) {
            location = 0;
          }

          this.name = name;
          this.format = format;
          this.isNormalized = isNormalized;
          this.stream = stream;
          this.isInstanced = isInstanced;
          this.location = location;
        }

        var _proto34 = Attribute.prototype;

        _proto34.copy = function copy(info) {
          this.name = info.name;
          this.format = info.format;
          this.isNormalized = info.isNormalized;
          this.stream = info.stream;
          this.isInstanced = info.isInstanced;
          this.location = info.location;
          return this;
        };

        return Attribute;
      }();
      var ShaderInfo = function () {
        function ShaderInfo(name, stages, attributes, blocks, buffers, samplerTextures, samplers, textures, images, subpassInputs) {
          if (name === void 0) {
            name = '';
          }

          if (stages === void 0) {
            stages = [];
          }

          if (attributes === void 0) {
            attributes = [];
          }

          if (blocks === void 0) {
            blocks = [];
          }

          if (buffers === void 0) {
            buffers = [];
          }

          if (samplerTextures === void 0) {
            samplerTextures = [];
          }

          if (samplers === void 0) {
            samplers = [];
          }

          if (textures === void 0) {
            textures = [];
          }

          if (images === void 0) {
            images = [];
          }

          if (subpassInputs === void 0) {
            subpassInputs = [];
          }

          this.name = name;
          this.stages = stages;
          this.attributes = attributes;
          this.blocks = blocks;
          this.buffers = buffers;
          this.samplerTextures = samplerTextures;
          this.samplers = samplers;
          this.textures = textures;
          this.images = images;
          this.subpassInputs = subpassInputs;
        }

        var _proto35 = ShaderInfo.prototype;

        _proto35.copy = function copy(info) {
          this.name = info.name;
          deepCopy(this.stages, info.stages, ShaderStage);
          deepCopy(this.attributes, info.attributes, Attribute);
          deepCopy(this.blocks, info.blocks, UniformBlock);
          deepCopy(this.buffers, info.buffers, UniformStorageBuffer);
          deepCopy(this.samplerTextures, info.samplerTextures, UniformSamplerTexture);
          deepCopy(this.samplers, info.samplers, UniformSampler);
          deepCopy(this.textures, info.textures, UniformTexture);
          deepCopy(this.images, info.images, UniformStorageImage);
          deepCopy(this.subpassInputs, info.subpassInputs, UniformInputAttachment);
          return this;
        };

        return ShaderInfo;
      }();
      var InputAssemblerInfo = function () {
        function InputAssemblerInfo(attributes, vertexBuffers, indexBuffer, indirectBuffer) {
          if (attributes === void 0) {
            attributes = [];
          }

          if (vertexBuffers === void 0) {
            vertexBuffers = [];
          }

          if (indexBuffer === void 0) {
            indexBuffer = null;
          }

          if (indirectBuffer === void 0) {
            indirectBuffer = null;
          }

          this.attributes = attributes;
          this.vertexBuffers = vertexBuffers;
          this.indexBuffer = indexBuffer;
          this.indirectBuffer = indirectBuffer;
        }

        var _proto36 = InputAssemblerInfo.prototype;

        _proto36.copy = function copy(info) {
          deepCopy(this.attributes, info.attributes, Attribute);
          this.vertexBuffers = info.vertexBuffers.slice();
          this.indexBuffer = info.indexBuffer;
          this.indirectBuffer = info.indirectBuffer;
          return this;
        };

        return InputAssemblerInfo;
      }();
      var ColorAttachment = function () {
        function ColorAttachment(format, sampleCount, loadOp, storeOp, barrier, isGeneralLayout) {
          if (format === void 0) {
            format = Format.UNKNOWN;
          }

          if (sampleCount === void 0) {
            sampleCount = SampleCount.ONE;
          }

          if (loadOp === void 0) {
            loadOp = LoadOp.CLEAR;
          }

          if (storeOp === void 0) {
            storeOp = StoreOp.STORE;
          }

          if (barrier === void 0) {
            barrier = null;
          }

          if (isGeneralLayout === void 0) {
            isGeneralLayout = false;
          }

          this.format = format;
          this.sampleCount = sampleCount;
          this.loadOp = loadOp;
          this.storeOp = storeOp;
          this.barrier = barrier;
          this.isGeneralLayout = isGeneralLayout;
        }

        var _proto37 = ColorAttachment.prototype;

        _proto37.copy = function copy(info) {
          this.format = info.format;
          this.sampleCount = info.sampleCount;
          this.loadOp = info.loadOp;
          this.storeOp = info.storeOp;
          this.barrier = info.barrier;
          this.isGeneralLayout = info.isGeneralLayout;
          return this;
        };

        return ColorAttachment;
      }();
      var DepthStencilAttachment = function () {
        function DepthStencilAttachment(format, sampleCount, depthLoadOp, depthStoreOp, stencilLoadOp, stencilStoreOp, barrier, isGeneralLayout) {
          if (format === void 0) {
            format = Format.UNKNOWN;
          }

          if (sampleCount === void 0) {
            sampleCount = SampleCount.ONE;
          }

          if (depthLoadOp === void 0) {
            depthLoadOp = LoadOp.CLEAR;
          }

          if (depthStoreOp === void 0) {
            depthStoreOp = StoreOp.STORE;
          }

          if (stencilLoadOp === void 0) {
            stencilLoadOp = LoadOp.CLEAR;
          }

          if (stencilStoreOp === void 0) {
            stencilStoreOp = StoreOp.STORE;
          }

          if (barrier === void 0) {
            barrier = null;
          }

          if (isGeneralLayout === void 0) {
            isGeneralLayout = false;
          }

          this.format = format;
          this.sampleCount = sampleCount;
          this.depthLoadOp = depthLoadOp;
          this.depthStoreOp = depthStoreOp;
          this.stencilLoadOp = stencilLoadOp;
          this.stencilStoreOp = stencilStoreOp;
          this.barrier = barrier;
          this.isGeneralLayout = isGeneralLayout;
        }

        var _proto38 = DepthStencilAttachment.prototype;

        _proto38.copy = function copy(info) {
          this.format = info.format;
          this.sampleCount = info.sampleCount;
          this.depthLoadOp = info.depthLoadOp;
          this.depthStoreOp = info.depthStoreOp;
          this.stencilLoadOp = info.stencilLoadOp;
          this.stencilStoreOp = info.stencilStoreOp;
          this.barrier = info.barrier;
          this.isGeneralLayout = info.isGeneralLayout;
          return this;
        };

        return DepthStencilAttachment;
      }();
      var SubpassInfo = function () {
        function SubpassInfo(inputs, colors, resolves, preserves, depthStencil, depthStencilResolve, depthResolveMode, stencilResolveMode) {
          if (inputs === void 0) {
            inputs = [];
          }

          if (colors === void 0) {
            colors = [];
          }

          if (resolves === void 0) {
            resolves = [];
          }

          if (preserves === void 0) {
            preserves = [];
          }

          if (depthStencil === void 0) {
            depthStencil = -1;
          }

          if (depthStencilResolve === void 0) {
            depthStencilResolve = -1;
          }

          if (depthResolveMode === void 0) {
            depthResolveMode = ResolveMode.NONE;
          }

          if (stencilResolveMode === void 0) {
            stencilResolveMode = ResolveMode.NONE;
          }

          this.inputs = inputs;
          this.colors = colors;
          this.resolves = resolves;
          this.preserves = preserves;
          this.depthStencil = depthStencil;
          this.depthStencilResolve = depthStencilResolve;
          this.depthResolveMode = depthResolveMode;
          this.stencilResolveMode = stencilResolveMode;
        }

        var _proto39 = SubpassInfo.prototype;

        _proto39.copy = function copy(info) {
          this.inputs = info.inputs.slice();
          this.colors = info.colors.slice();
          this.resolves = info.resolves.slice();
          this.preserves = info.preserves.slice();
          this.depthStencil = info.depthStencil;
          this.depthStencilResolve = info.depthStencilResolve;
          this.depthResolveMode = info.depthResolveMode;
          this.stencilResolveMode = info.stencilResolveMode;
          return this;
        };

        return SubpassInfo;
      }();
      var SubpassDependency = function () {
        function SubpassDependency(srcSubpass, dstSubpass, generalBarrier, bufferBarriers, buffers, bufferBarrierCount, textureBarriers, textures, textureBarrierCount) {
          if (srcSubpass === void 0) {
            srcSubpass = 0;
          }

          if (dstSubpass === void 0) {
            dstSubpass = 0;
          }

          if (generalBarrier === void 0) {
            generalBarrier = null;
          }

          if (bufferBarriers === void 0) {
            bufferBarriers = null;
          }

          if (buffers === void 0) {
            buffers = null;
          }

          if (bufferBarrierCount === void 0) {
            bufferBarrierCount = 0;
          }

          if (textureBarriers === void 0) {
            textureBarriers = null;
          }

          if (textures === void 0) {
            textures = null;
          }

          if (textureBarrierCount === void 0) {
            textureBarrierCount = 0;
          }

          this.srcSubpass = srcSubpass;
          this.dstSubpass = dstSubpass;
          this.generalBarrier = generalBarrier;
          this.bufferBarriers = bufferBarriers;
          this.buffers = buffers;
          this.bufferBarrierCount = bufferBarrierCount;
          this.textureBarriers = textureBarriers;
          this.textures = textures;
          this.textureBarrierCount = textureBarrierCount;
        }

        var _proto40 = SubpassDependency.prototype;

        _proto40.copy = function copy(info) {
          this.srcSubpass = info.srcSubpass;
          this.dstSubpass = info.dstSubpass;
          this.generalBarrier = info.generalBarrier;
          this.bufferBarriers = info.bufferBarriers;
          this.buffers = info.buffers;
          this.bufferBarrierCount = info.bufferBarrierCount;
          this.textureBarriers = info.textureBarriers;
          this.textures = info.textures;
          this.textureBarrierCount = info.textureBarrierCount;
          return this;
        };

        return SubpassDependency;
      }();
      var RenderPassInfo = function () {
        function RenderPassInfo(colorAttachments, depthStencilAttachment, subpasses, dependencies) {
          if (colorAttachments === void 0) {
            colorAttachments = [];
          }

          if (depthStencilAttachment === void 0) {
            depthStencilAttachment = new DepthStencilAttachment();
          }

          if (subpasses === void 0) {
            subpasses = [];
          }

          if (dependencies === void 0) {
            dependencies = [];
          }

          this.colorAttachments = colorAttachments;
          this.depthStencilAttachment = depthStencilAttachment;
          this.subpasses = subpasses;
          this.dependencies = dependencies;
        }

        var _proto41 = RenderPassInfo.prototype;

        _proto41.copy = function copy(info) {
          deepCopy(this.colorAttachments, info.colorAttachments, ColorAttachment);
          this.depthStencilAttachment.copy(info.depthStencilAttachment);
          deepCopy(this.subpasses, info.subpasses, SubpassInfo);
          deepCopy(this.dependencies, info.dependencies, SubpassDependency);
          return this;
        };

        return RenderPassInfo;
      }();
      var GeneralBarrierInfo = function () {
        function GeneralBarrierInfo(prevAccesses, nextAccesses, type) {
          if (prevAccesses === void 0) {
            prevAccesses = AccessFlagBit.NONE;
          }

          if (nextAccesses === void 0) {
            nextAccesses = AccessFlagBit.NONE;
          }

          if (type === void 0) {
            type = BarrierType.FULL;
          }

          this.prevAccesses = prevAccesses;
          this.nextAccesses = nextAccesses;
          this.type = type;
        }

        var _proto42 = GeneralBarrierInfo.prototype;

        _proto42.copy = function copy(info) {
          this.prevAccesses = info.prevAccesses;
          this.nextAccesses = info.nextAccesses;
          this.type = info.type;
          return this;
        };

        return GeneralBarrierInfo;
      }();
      var TextureBarrierInfo = function () {
        function TextureBarrierInfo(prevAccesses, nextAccesses, type, baseMipLevel, levelCount, baseSlice, sliceCount, discardContents, srcQueue, dstQueue) {
          if (prevAccesses === void 0) {
            prevAccesses = AccessFlagBit.NONE;
          }

          if (nextAccesses === void 0) {
            nextAccesses = AccessFlagBit.NONE;
          }

          if (type === void 0) {
            type = BarrierType.FULL;
          }

          if (baseMipLevel === void 0) {
            baseMipLevel = 0;
          }

          if (levelCount === void 0) {
            levelCount = 1;
          }

          if (baseSlice === void 0) {
            baseSlice = 0;
          }

          if (sliceCount === void 0) {
            sliceCount = 1;
          }

          if (discardContents === void 0) {
            discardContents = false;
          }

          if (srcQueue === void 0) {
            srcQueue = null;
          }

          if (dstQueue === void 0) {
            dstQueue = null;
          }

          this.prevAccesses = prevAccesses;
          this.nextAccesses = nextAccesses;
          this.type = type;
          this.baseMipLevel = baseMipLevel;
          this.levelCount = levelCount;
          this.baseSlice = baseSlice;
          this.sliceCount = sliceCount;
          this.discardContents = discardContents;
          this.srcQueue = srcQueue;
          this.dstQueue = dstQueue;
        }

        var _proto43 = TextureBarrierInfo.prototype;

        _proto43.copy = function copy(info) {
          this.prevAccesses = info.prevAccesses;
          this.nextAccesses = info.nextAccesses;
          this.type = info.type;
          this.baseMipLevel = info.baseMipLevel;
          this.levelCount = info.levelCount;
          this.baseSlice = info.baseSlice;
          this.sliceCount = info.sliceCount;
          this.discardContents = info.discardContents;
          this.srcQueue = info.srcQueue;
          this.dstQueue = info.dstQueue;
          return this;
        };

        return TextureBarrierInfo;
      }();
      var BufferBarrierInfo = function () {
        function BufferBarrierInfo(prevAccesses, nextAccesses, type, offset, size, discardContents, srcQueue, dstQueue) {
          if (prevAccesses === void 0) {
            prevAccesses = AccessFlagBit.NONE;
          }

          if (nextAccesses === void 0) {
            nextAccesses = AccessFlagBit.NONE;
          }

          if (type === void 0) {
            type = BarrierType.FULL;
          }

          if (offset === void 0) {
            offset = 0;
          }

          if (size === void 0) {
            size = 0;
          }

          if (discardContents === void 0) {
            discardContents = false;
          }

          if (srcQueue === void 0) {
            srcQueue = null;
          }

          if (dstQueue === void 0) {
            dstQueue = null;
          }

          this.prevAccesses = prevAccesses;
          this.nextAccesses = nextAccesses;
          this.type = type;
          this.offset = offset;
          this.size = size;
          this.discardContents = discardContents;
          this.srcQueue = srcQueue;
          this.dstQueue = dstQueue;
        }

        var _proto44 = BufferBarrierInfo.prototype;

        _proto44.copy = function copy(info) {
          this.prevAccesses = info.prevAccesses;
          this.nextAccesses = info.nextAccesses;
          this.type = info.type;
          this.offset = info.offset;
          this.size = info.size;
          this.discardContents = info.discardContents;
          this.srcQueue = info.srcQueue;
          this.dstQueue = info.dstQueue;
          return this;
        };

        return BufferBarrierInfo;
      }();
      var FramebufferInfo = function () {
        function FramebufferInfo(renderPass, colorTextures, depthStencilTexture) {
          if (renderPass === void 0) {
            renderPass = null;
          }

          if (colorTextures === void 0) {
            colorTextures = [];
          }

          if (depthStencilTexture === void 0) {
            depthStencilTexture = null;
          }

          this.renderPass = renderPass;
          this.colorTextures = colorTextures;
          this.depthStencilTexture = depthStencilTexture;
        }

        var _proto45 = FramebufferInfo.prototype;

        _proto45.copy = function copy(info) {
          this.renderPass = info.renderPass;
          this.colorTextures = info.colorTextures.slice();
          this.depthStencilTexture = info.depthStencilTexture;
          return this;
        };

        return FramebufferInfo;
      }();
      var DescriptorSetLayoutBinding = function () {
        function DescriptorSetLayoutBinding(binding, descriptorType, count, stageFlags, immutableSamplers) {
          if (binding === void 0) {
            binding = -1;
          }

          if (descriptorType === void 0) {
            descriptorType = DescriptorType.UNKNOWN;
          }

          if (count === void 0) {
            count = 0;
          }

          if (stageFlags === void 0) {
            stageFlags = ShaderStageFlagBit.NONE;
          }

          if (immutableSamplers === void 0) {
            immutableSamplers = [];
          }

          this.binding = binding;
          this.descriptorType = descriptorType;
          this.count = count;
          this.stageFlags = stageFlags;
          this.immutableSamplers = immutableSamplers;
        }

        var _proto46 = DescriptorSetLayoutBinding.prototype;

        _proto46.copy = function copy(info) {
          this.binding = info.binding;
          this.descriptorType = info.descriptorType;
          this.count = info.count;
          this.stageFlags = info.stageFlags;
          this.immutableSamplers = info.immutableSamplers.slice();
          return this;
        };

        return DescriptorSetLayoutBinding;
      }();
      var DescriptorSetLayoutInfo = function () {
        function DescriptorSetLayoutInfo(bindings) {
          if (bindings === void 0) {
            bindings = [];
          }

          this.bindings = bindings;
        }

        var _proto47 = DescriptorSetLayoutInfo.prototype;

        _proto47.copy = function copy(info) {
          deepCopy(this.bindings, info.bindings, DescriptorSetLayoutBinding);
          return this;
        };

        return DescriptorSetLayoutInfo;
      }();
      var DescriptorSetInfo = function () {
        function DescriptorSetInfo(layout) {
          if (layout === void 0) {
            layout = null;
          }

          this.layout = layout;
        }

        var _proto48 = DescriptorSetInfo.prototype;

        _proto48.copy = function copy(info) {
          this.layout = info.layout;
          return this;
        };

        return DescriptorSetInfo;
      }();
      var PipelineLayoutInfo = function () {
        function PipelineLayoutInfo(setLayouts) {
          if (setLayouts === void 0) {
            setLayouts = [];
          }

          this.setLayouts = setLayouts;
        }

        var _proto49 = PipelineLayoutInfo.prototype;

        _proto49.copy = function copy(info) {
          this.setLayouts = info.setLayouts.slice();
          return this;
        };

        return PipelineLayoutInfo;
      }();
      var InputState = function () {
        function InputState(attributes) {
          if (attributes === void 0) {
            attributes = [];
          }

          this.attributes = attributes;
        }

        var _proto50 = InputState.prototype;

        _proto50.copy = function copy(info) {
          deepCopy(this.attributes, info.attributes, Attribute);
          return this;
        };

        return InputState;
      }();
      var CommandBufferInfo = function () {
        function CommandBufferInfo(queue, type) {
          if (queue === void 0) {
            queue = null;
          }

          if (type === void 0) {
            type = CommandBufferType.PRIMARY;
          }

          this.queue = queue;
          this.type = type;
        }

        var _proto51 = CommandBufferInfo.prototype;

        _proto51.copy = function copy(info) {
          this.queue = info.queue;
          this.type = info.type;
          return this;
        };

        return CommandBufferInfo;
      }();
      var QueueInfo = function () {
        function QueueInfo(type) {
          if (type === void 0) {
            type = QueueType.GRAPHICS;
          }

          this.type = type;
        }

        var _proto52 = QueueInfo.prototype;

        _proto52.copy = function copy(info) {
          this.type = info.type;
          return this;
        };

        return QueueInfo;
      }();
      var QueryPoolInfo = function () {
        function QueryPoolInfo(type, maxQueryObjects, forceWait) {
          if (type === void 0) {
            type = QueryType.OCCLUSION;
          }

          if (maxQueryObjects === void 0) {
            maxQueryObjects = 32767;
          }

          if (forceWait === void 0) {
            forceWait = true;
          }

          this.type = type;
          this.maxQueryObjects = maxQueryObjects;
          this.forceWait = forceWait;
        }

        var _proto53 = QueryPoolInfo.prototype;

        _proto53.copy = function copy(info) {
          this.type = info.type;
          this.maxQueryObjects = info.maxQueryObjects;
          this.forceWait = info.forceWait;
          return this;
        };

        return QueryPoolInfo;
      }();
      var FormatInfo = function FormatInfo(name, size, count, type, hasAlpha, hasDepth, hasStencil, isCompressed) {
        if (name === void 0) {
          name = '';
        }

        if (size === void 0) {
          size = 0;
        }

        if (count === void 0) {
          count = 0;
        }

        if (type === void 0) {
          type = FormatType.NONE;
        }

        if (hasAlpha === void 0) {
          hasAlpha = false;
        }

        if (hasDepth === void 0) {
          hasDepth = false;
        }

        if (hasStencil === void 0) {
          hasStencil = false;
        }

        if (isCompressed === void 0) {
          isCompressed = false;
        }

        this.name = name;
        this.size = size;
        this.count = count;
        this.type = type;
        this.hasAlpha = hasAlpha;
        this.hasDepth = hasDepth;
        this.hasStencil = hasStencil;
        this.isCompressed = isCompressed;
      };
      var MemoryStatus = function () {
        function MemoryStatus(bufferSize, textureSize) {
          if (bufferSize === void 0) {
            bufferSize = 0;
          }

          if (textureSize === void 0) {
            textureSize = 0;
          }

          this.bufferSize = bufferSize;
          this.textureSize = textureSize;
        }

        var _proto54 = MemoryStatus.prototype;

        _proto54.copy = function copy(info) {
          this.bufferSize = info.bufferSize;
          this.textureSize = info.textureSize;
          return this;
        };

        return MemoryStatus;
      }();
      var DynamicStencilStates = function () {
        function DynamicStencilStates(writeMask, compareMask, reference) {
          if (writeMask === void 0) {
            writeMask = 0;
          }

          if (compareMask === void 0) {
            compareMask = 0;
          }

          if (reference === void 0) {
            reference = 0;
          }

          this.writeMask = writeMask;
          this.compareMask = compareMask;
          this.reference = reference;
        }

        var _proto55 = DynamicStencilStates.prototype;

        _proto55.copy = function copy(info) {
          this.writeMask = info.writeMask;
          this.compareMask = info.compareMask;
          this.reference = info.reference;
          return this;
        };

        return DynamicStencilStates;
      }();
      var DynamicStates = function () {
        function DynamicStates(viewport, scissor, blendConstant, lineWidth, depthBiasConstant, depthBiasClamp, depthBiasSlope, depthMinBounds, depthMaxBounds, stencilStatesFront, stencilStatesBack) {
          if (viewport === void 0) {
            viewport = new Viewport();
          }

          if (scissor === void 0) {
            scissor = new Rect$1();
          }

          if (blendConstant === void 0) {
            blendConstant = new Color$1();
          }

          if (lineWidth === void 0) {
            lineWidth = 1;
          }

          if (depthBiasConstant === void 0) {
            depthBiasConstant = 0;
          }

          if (depthBiasClamp === void 0) {
            depthBiasClamp = 0;
          }

          if (depthBiasSlope === void 0) {
            depthBiasSlope = 0;
          }

          if (depthMinBounds === void 0) {
            depthMinBounds = 0;
          }

          if (depthMaxBounds === void 0) {
            depthMaxBounds = 0;
          }

          if (stencilStatesFront === void 0) {
            stencilStatesFront = new DynamicStencilStates();
          }

          if (stencilStatesBack === void 0) {
            stencilStatesBack = new DynamicStencilStates();
          }

          this.viewport = viewport;
          this.scissor = scissor;
          this.blendConstant = blendConstant;
          this.lineWidth = lineWidth;
          this.depthBiasConstant = depthBiasConstant;
          this.depthBiasClamp = depthBiasClamp;
          this.depthBiasSlope = depthBiasSlope;
          this.depthMinBounds = depthMinBounds;
          this.depthMaxBounds = depthMaxBounds;
          this.stencilStatesFront = stencilStatesFront;
          this.stencilStatesBack = stencilStatesBack;
        }

        var _proto56 = DynamicStates.prototype;

        _proto56.copy = function copy(info) {
          this.viewport.copy(info.viewport);
          this.scissor.copy(info.scissor);
          this.blendConstant.copy(info.blendConstant);
          this.lineWidth = info.lineWidth;
          this.depthBiasConstant = info.depthBiasConstant;
          this.depthBiasClamp = info.depthBiasClamp;
          this.depthBiasSlope = info.depthBiasSlope;
          this.depthMinBounds = info.depthMinBounds;
          this.depthMaxBounds = info.depthMaxBounds;
          this.stencilStatesFront.copy(info.stencilStatesFront);
          this.stencilStatesBack.copy(info.stencilStatesBack);
          return this;
        };

        return DynamicStates;
      }();
      var GFXObject = function (_GCObject) {
        _inheritsLoose(GFXObject, _GCObject);

        function GFXObject(objectType) {
          var _this;

          _this = _GCObject.call(this) || this;
          _this._objectType = ObjectType.UNKNOWN;
          _this._objectID = 0;
          _this._typedID = 0;
          _this._objectType = objectType;
          _this._objectID = GFXObject._idTable[ObjectType.UNKNOWN]++;
          _this._typedID = GFXObject._idTable[objectType]++;
          return _this;
        }

        _createClass(GFXObject, [{
          key: "objectType",
          get: function get() {
            return this._objectType;
          }
        }, {
          key: "objectID",
          get: function get() {
            return this._objectID;
          }
        }, {
          key: "typedID",
          get: function get() {
            return this._typedID;
          }
        }]);

        return GFXObject;
      }(GCObject);
      GFXObject._idTable = Array(ObjectType.COUNT).fill(1 << 16);
      var AttributeName;

      (function (AttributeName) {
        AttributeName["ATTR_POSITION"] = "a_position";
        AttributeName["ATTR_NORMAL"] = "a_normal";
        AttributeName["ATTR_TANGENT"] = "a_tangent";
        AttributeName["ATTR_BITANGENT"] = "a_bitangent";
        AttributeName["ATTR_WEIGHTS"] = "a_weights";
        AttributeName["ATTR_JOINTS"] = "a_joints";
        AttributeName["ATTR_COLOR"] = "a_color";
        AttributeName["ATTR_COLOR1"] = "a_color1";
        AttributeName["ATTR_COLOR2"] = "a_color2";
        AttributeName["ATTR_TEX_COORD"] = "a_texCoord";
        AttributeName["ATTR_TEX_COORD1"] = "a_texCoord1";
        AttributeName["ATTR_TEX_COORD2"] = "a_texCoord2";
        AttributeName["ATTR_TEX_COORD3"] = "a_texCoord3";
        AttributeName["ATTR_TEX_COORD4"] = "a_texCoord4";
        AttributeName["ATTR_TEX_COORD5"] = "a_texCoord5";
        AttributeName["ATTR_TEX_COORD6"] = "a_texCoord6";
        AttributeName["ATTR_TEX_COORD7"] = "a_texCoord7";
        AttributeName["ATTR_TEX_COORD8"] = "a_texCoord8";
        AttributeName["ATTR_BATCH_ID"] = "a_batch_id";
        AttributeName["ATTR_BATCH_UV"] = "a_batch_uv";
      })(AttributeName || (AttributeName = {}));

      var FormatInfos = Object.freeze([new FormatInfo('UNKNOWN', 0, 0, FormatType.NONE, false, false, false, false), new FormatInfo('A8', 1, 1, FormatType.UNORM, true, false, false, false), new FormatInfo('L8', 1, 1, FormatType.UNORM, false, false, false, false), new FormatInfo('LA8', 1, 2, FormatType.UNORM, true, false, false, false), new FormatInfo('R8', 1, 1, FormatType.UNORM, false, false, false, false), new FormatInfo('R8SN', 1, 1, FormatType.SNORM, false, false, false, false), new FormatInfo('R8UI', 1, 1, FormatType.UINT, false, false, false, false), new FormatInfo('R8I', 1, 1, FormatType.INT, false, false, false, false), new FormatInfo('R16F', 2, 1, FormatType.FLOAT, false, false, false, false), new FormatInfo('R16UI', 2, 1, FormatType.UINT, false, false, false, false), new FormatInfo('R16I', 2, 1, FormatType.INT, false, false, false, false), new FormatInfo('R32F', 4, 1, FormatType.FLOAT, false, false, false, false), new FormatInfo('R32UI', 4, 1, FormatType.UINT, false, false, false, false), new FormatInfo('R32I', 4, 1, FormatType.INT, false, false, false, false), new FormatInfo('RG8', 2, 2, FormatType.UNORM, false, false, false, false), new FormatInfo('RG8SN', 2, 2, FormatType.SNORM, false, false, false, false), new FormatInfo('RG8UI', 2, 2, FormatType.UINT, false, false, false, false), new FormatInfo('RG8I', 2, 2, FormatType.INT, false, false, false, false), new FormatInfo('RG16F', 4, 2, FormatType.FLOAT, false, false, false, false), new FormatInfo('RG16UI', 4, 2, FormatType.UINT, false, false, false, false), new FormatInfo('RG16I', 4, 2, FormatType.INT, false, false, false, false), new FormatInfo('RG32F', 8, 2, FormatType.FLOAT, false, false, false, false), new FormatInfo('RG32UI', 8, 2, FormatType.UINT, false, false, false, false), new FormatInfo('RG32I', 8, 2, FormatType.INT, false, false, false, false), new FormatInfo('RGB8', 3, 3, FormatType.UNORM, false, false, false, false), new FormatInfo('SRGB8', 3, 3, FormatType.UNORM, false, false, false, false), new FormatInfo('RGB8SN', 3, 3, FormatType.SNORM, false, false, false, false), new FormatInfo('RGB8UI', 3, 3, FormatType.UINT, false, false, false, false), new FormatInfo('RGB8I', 3, 3, FormatType.INT, false, false, false, false), new FormatInfo('RGB16F', 6, 3, FormatType.FLOAT, false, false, false, false), new FormatInfo('RGB16UI', 6, 3, FormatType.UINT, false, false, false, false), new FormatInfo('RGB16I', 6, 3, FormatType.INT, false, false, false, false), new FormatInfo('RGB32F', 12, 3, FormatType.FLOAT, false, false, false, false), new FormatInfo('RGB32UI', 12, 3, FormatType.UINT, false, false, false, false), new FormatInfo('RGB32I', 12, 3, FormatType.INT, false, false, false, false), new FormatInfo('RGBA8', 4, 4, FormatType.UNORM, true, false, false, false), new FormatInfo('BGRA8', 4, 4, FormatType.UNORM, true, false, false, false), new FormatInfo('SRGB8_A8', 4, 4, FormatType.UNORM, true, false, false, false), new FormatInfo('RGBA8SN', 4, 4, FormatType.SNORM, true, false, false, false), new FormatInfo('RGBA8UI', 4, 4, FormatType.UINT, true, false, false, false), new FormatInfo('RGBA8I', 4, 4, FormatType.INT, true, false, false, false), new FormatInfo('RGBA16F', 8, 4, FormatType.FLOAT, true, false, false, false), new FormatInfo('RGBA16UI', 8, 4, FormatType.UINT, true, false, false, false), new FormatInfo('RGBA16I', 8, 4, FormatType.INT, true, false, false, false), new FormatInfo('RGBA32F', 16, 4, FormatType.FLOAT, true, false, false, false), new FormatInfo('RGBA32UI', 16, 4, FormatType.UINT, true, false, false, false), new FormatInfo('RGBA32I', 16, 4, FormatType.INT, true, false, false, false), new FormatInfo('R5G6B5', 2, 3, FormatType.UNORM, false, false, false, false), new FormatInfo('R11G11B10F', 4, 3, FormatType.FLOAT, false, false, false, false), new FormatInfo('RGB5A1', 2, 4, FormatType.UNORM, true, false, false, false), new FormatInfo('RGBA4', 2, 4, FormatType.UNORM, true, false, false, false), new FormatInfo('RGB10A2', 2, 4, FormatType.UNORM, true, false, false, false), new FormatInfo('RGB10A2UI', 2, 4, FormatType.UINT, true, false, false, false), new FormatInfo('RGB9E5', 2, 4, FormatType.FLOAT, true, false, false, false), new FormatInfo('DEPTH', 4, 1, FormatType.FLOAT, false, true, false, false), new FormatInfo('DEPTH_STENCIL', 5, 2, FormatType.FLOAT, false, true, true, false), new FormatInfo('BC1', 1, 3, FormatType.UNORM, false, false, false, true), new FormatInfo('BC1_ALPHA', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('BC1_SRGB', 1, 3, FormatType.UNORM, false, false, false, true), new FormatInfo('BC1_SRGB_ALPHA', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('BC2', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('BC2_SRGB', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('BC3', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('BC3_SRGB', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('BC4', 1, 1, FormatType.UNORM, false, false, false, true), new FormatInfo('BC4_SNORM', 1, 1, FormatType.SNORM, false, false, false, true), new FormatInfo('BC5', 1, 2, FormatType.UNORM, false, false, false, true), new FormatInfo('BC5_SNORM', 1, 2, FormatType.SNORM, false, false, false, true), new FormatInfo('BC6H_UF16', 1, 3, FormatType.UFLOAT, false, false, false, true), new FormatInfo('BC6H_SF16', 1, 3, FormatType.FLOAT, false, false, false, true), new FormatInfo('BC7', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('BC7_SRGB', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ETC_RGB8', 1, 3, FormatType.UNORM, false, false, false, true), new FormatInfo('ETC2_RGB8', 1, 3, FormatType.UNORM, false, false, false, true), new FormatInfo('ETC2_SRGB8', 1, 3, FormatType.UNORM, false, false, false, true), new FormatInfo('ETC2_RGB8_A1', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ETC2_SRGB8_A1', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ETC2_RGBA8', 2, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ETC2_SRGB8_A8', 2, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('EAC_R11', 1, 1, FormatType.UNORM, false, false, false, true), new FormatInfo('EAC_R11SN', 1, 1, FormatType.SNORM, false, false, false, true), new FormatInfo('EAC_RG11', 2, 2, FormatType.UNORM, false, false, false, true), new FormatInfo('EAC_RG11SN', 2, 2, FormatType.SNORM, false, false, false, true), new FormatInfo('PVRTC_RGB2', 2, 3, FormatType.UNORM, false, false, false, true), new FormatInfo('PVRTC_RGBA2', 2, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('PVRTC_RGB4', 2, 3, FormatType.UNORM, false, false, false, true), new FormatInfo('PVRTC_RGBA4', 2, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('PVRTC2_2BPP', 2, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('PVRTC2_4BPP', 2, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_4x4', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_5x4', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_5x5', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_6x5', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_6x6', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_8x5', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_8x6', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_8x8', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_10x5', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_10x6', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_10x8', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_10x10', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_12x10', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_12x12', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_4x4', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_5x4', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_5x5', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_6x5', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_6x6', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_8x5', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_8x6', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_8x8', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_10x5', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_10x6', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_10x8', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_10x10', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_12x10', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_12x12', 1, 4, FormatType.UNORM, true, false, false, true)]);
      var DESCRIPTOR_BUFFER_TYPE = DescriptorType.UNIFORM_BUFFER | DescriptorType.DYNAMIC_UNIFORM_BUFFER | DescriptorType.STORAGE_BUFFER | DescriptorType.DYNAMIC_STORAGE_BUFFER;
      var DESCRIPTOR_SAMPLER_TYPE = DescriptorType.SAMPLER_TEXTURE | DescriptorType.SAMPLER | DescriptorType.TEXTURE | DescriptorType.STORAGE_IMAGE | DescriptorType.INPUT_ATTACHMENT;
      var DESCRIPTOR_DYNAMIC_TYPE = DescriptorType.DYNAMIC_STORAGE_BUFFER | DescriptorType.DYNAMIC_UNIFORM_BUFFER;
      var DRAW_INFO_SIZE = 28;
      function IsPowerOf2(x) {
        return x > 0 && (x & x - 1) === 0;
      }
      function FormatSize(format, width, height, depth) {
        if (!FormatInfos[format].isCompressed) {
          return width * height * depth * FormatInfos[format].size;
        } else {
          switch (format) {
            case Format.BC1:
            case Format.BC1_ALPHA:
            case Format.BC1_SRGB:
            case Format.BC1_SRGB_ALPHA:
              return Math.ceil(width / 4) * Math.ceil(height / 4) * 8 * depth;

            case Format.BC2:
            case Format.BC2_SRGB:
            case Format.BC3:
            case Format.BC3_SRGB:
            case Format.BC4:
            case Format.BC4_SNORM:
            case Format.BC6H_SF16:
            case Format.BC6H_UF16:
            case Format.BC7:
            case Format.BC7_SRGB:
              return Math.ceil(width / 4) * Math.ceil(height / 4) * 16 * depth;

            case Format.BC5:
            case Format.BC5_SNORM:
              return Math.ceil(width / 4) * Math.ceil(height / 4) * 32 * depth;

            case Format.ETC_RGB8:
            case Format.ETC2_RGB8:
            case Format.ETC2_SRGB8:
            case Format.ETC2_RGB8_A1:
            case Format.EAC_R11:
            case Format.EAC_R11SN:
              return Math.ceil(width / 4) * Math.ceil(height / 4) * 8 * depth;

            case Format.ETC2_RGBA8:
            case Format.ETC2_SRGB8_A1:
            case Format.EAC_RG11:
            case Format.EAC_RG11SN:
              return Math.ceil(width / 4) * Math.ceil(height / 4) * 16 * depth;

            case Format.PVRTC_RGB2:
            case Format.PVRTC_RGBA2:
            case Format.PVRTC2_2BPP:
              return Math.ceil(width / 8) * Math.ceil(height / 4) * 8 * depth;

            case Format.PVRTC_RGB4:
            case Format.PVRTC_RGBA4:
            case Format.PVRTC2_4BPP:
              return Math.ceil(width / 4) * Math.ceil(height / 4) * 8 * depth;

            case Format.ASTC_RGBA_4X4:
            case Format.ASTC_SRGBA_4X4:
              return Math.ceil(width / 4) * Math.ceil(height / 4) * 16 * depth;

            case Format.ASTC_RGBA_5X4:
            case Format.ASTC_SRGBA_5X4:
              return Math.ceil(width / 5) * Math.ceil(height / 4) * 16 * depth;

            case Format.ASTC_RGBA_5X5:
            case Format.ASTC_SRGBA_5X5:
              return Math.ceil(width / 5) * Math.ceil(height / 5) * 16 * depth;

            case Format.ASTC_RGBA_6X5:
            case Format.ASTC_SRGBA_6X5:
              return Math.ceil(width / 6) * Math.ceil(height / 5) * 16 * depth;

            case Format.ASTC_RGBA_6X6:
            case Format.ASTC_SRGBA_6X6:
              return Math.ceil(width / 6) * Math.ceil(height / 6) * 16 * depth;

            case Format.ASTC_RGBA_8X5:
            case Format.ASTC_SRGBA_8X5:
              return Math.ceil(width / 8) * Math.ceil(height / 5) * 16 * depth;

            case Format.ASTC_RGBA_8X6:
            case Format.ASTC_SRGBA_8X6:
              return Math.ceil(width / 8) * Math.ceil(height / 6) * 16 * depth;

            case Format.ASTC_RGBA_8X8:
            case Format.ASTC_SRGBA_8X8:
              return Math.ceil(width / 8) * Math.ceil(height / 8) * 16 * depth;

            case Format.ASTC_RGBA_10X5:
            case Format.ASTC_SRGBA_10X5:
              return Math.ceil(width / 10) * Math.ceil(height / 5) * 16 * depth;

            case Format.ASTC_RGBA_10X6:
            case Format.ASTC_SRGBA_10X6:
              return Math.ceil(width / 10) * Math.ceil(height / 6) * 16 * depth;

            case Format.ASTC_RGBA_10X8:
            case Format.ASTC_SRGBA_10X8:
              return Math.ceil(width / 10) * Math.ceil(height / 8) * 16 * depth;

            case Format.ASTC_RGBA_10X10:
            case Format.ASTC_SRGBA_10X10:
              return Math.ceil(width / 10) * Math.ceil(height / 10) * 16 * depth;

            case Format.ASTC_RGBA_12X10:
            case Format.ASTC_SRGBA_12X10:
              return Math.ceil(width / 12) * Math.ceil(height / 10) * 16 * depth;

            case Format.ASTC_RGBA_12X12:
            case Format.ASTC_SRGBA_12X12:
              return Math.ceil(width / 12) * Math.ceil(height / 12) * 16 * depth;

            default:
              {
                return 0;
              }
          }
        }
      }
      function FormatSurfaceSize(format, width, height, depth, mips) {
        var size = 0;

        for (var i = 0; i < mips; ++i) {
          size += FormatSize(format, width, height, depth);
          width = Math.max(width >> 1, 1);
          height = Math.max(height >> 1, 1);
        }

        return size;
      }
      var _type2size = [0, 4, 8, 12, 16, 4, 8, 12, 16, 4, 8, 12, 16, 4, 8, 12, 16, 16, 24, 32, 24, 36, 48, 32, 48, 64, 4, 4, 4, 4, 4, 4];
      function GetTypeSize(type) {
        return _type2size[type] || 0;
      }
      function getTypedArrayConstructor(info) {
        if (info.isCompressed) {
          return Uint8Array;
        }

        var stride = info.size / info.count;

        switch (info.type) {
          case FormatType.UNORM:
          case FormatType.UINT:
            {
              switch (stride) {
                case 1:
                  return Uint8Array;

                case 2:
                  return Uint16Array;

                case 4:
                  return Uint32Array;

                default:
                  return Uint8Array;
              }
            }

          case FormatType.SNORM:
          case FormatType.INT:
            {
              switch (stride) {
                case 1:
                  return Int8Array;

                case 2:
                  return Int16Array;

                case 4:
                  return Int32Array;

                default:
                  return Int8Array;
              }
            }

          case FormatType.FLOAT:
            {
              return Float32Array;
            }
        }

        return Float32Array;
      }
      function formatAlignment(format) {
        switch (format) {
          case Format.BC1:
          case Format.BC1_ALPHA:
          case Format.BC1_SRGB:
          case Format.BC1_SRGB_ALPHA:
          case Format.BC2:
          case Format.BC2_SRGB:
          case Format.BC3:
          case Format.BC3_SRGB:
          case Format.BC4:
          case Format.BC4_SNORM:
          case Format.BC6H_SF16:
          case Format.BC6H_UF16:
          case Format.BC7:
          case Format.BC7_SRGB:
          case Format.BC5:
          case Format.BC5_SNORM:
          case Format.ETC_RGB8:
          case Format.ETC2_RGB8:
          case Format.ETC2_SRGB8:
          case Format.ETC2_RGB8_A1:
          case Format.EAC_R11:
          case Format.EAC_R11SN:
          case Format.ETC2_RGBA8:
          case Format.ETC2_SRGB8_A1:
          case Format.EAC_RG11:
          case Format.EAC_RG11SN:
            return {
              width: 4,
              height: 4
            };

          case Format.PVRTC_RGB2:
          case Format.PVRTC_RGBA2:
          case Format.PVRTC2_2BPP:
            return {
              width: 8,
              height: 4
            };

          case Format.PVRTC_RGB4:
          case Format.PVRTC_RGBA4:
          case Format.PVRTC2_4BPP:
            return {
              width: 4,
              height: 4
            };

          case Format.ASTC_RGBA_4X4:
          case Format.ASTC_SRGBA_4X4:
            return {
              width: 4,
              height: 4
            };

          case Format.ASTC_RGBA_5X4:
          case Format.ASTC_SRGBA_5X4:
            return {
              width: 5,
              height: 4
            };

          case Format.ASTC_RGBA_5X5:
          case Format.ASTC_SRGBA_5X5:
            return {
              width: 5,
              height: 5
            };

          case Format.ASTC_RGBA_6X5:
          case Format.ASTC_SRGBA_6X5:
            return {
              width: 6,
              height: 5
            };

          case Format.ASTC_RGBA_6X6:
          case Format.ASTC_SRGBA_6X6:
            return {
              width: 6,
              height: 6
            };

          case Format.ASTC_RGBA_8X5:
          case Format.ASTC_SRGBA_8X5:
            return {
              width: 8,
              height: 5
            };

          case Format.ASTC_RGBA_8X6:
          case Format.ASTC_SRGBA_8X6:
            return {
              width: 8,
              height: 6
            };

          case Format.ASTC_RGBA_8X8:
          case Format.ASTC_SRGBA_8X8:
            return {
              width: 8,
              height: 8
            };

          case Format.ASTC_RGBA_10X5:
          case Format.ASTC_SRGBA_10X5:
            return {
              width: 10,
              height: 5
            };

          case Format.ASTC_RGBA_10X6:
          case Format.ASTC_SRGBA_10X6:
            return {
              width: 10,
              height: 6
            };

          case Format.ASTC_RGBA_10X8:
          case Format.ASTC_SRGBA_10X8:
            return {
              width: 10,
              height: 8
            };

          case Format.ASTC_RGBA_10X10:
          case Format.ASTC_SRGBA_10X10:
            return {
              width: 10,
              height: 10
            };

          case Format.ASTC_RGBA_12X10:
          case Format.ASTC_SRGBA_12X10:
            return {
              width: 12,
              height: 10
            };

          case Format.ASTC_RGBA_12X12:
          case Format.ASTC_SRGBA_12X12:
            return {
              width: 12,
              height: 12
            };

          default:
            return {
              width: 1,
              height: 1
            };
        }
      }
      function alignTo(size, alignment) {
        return Math.ceil(size / alignment) * alignment;
      }

      var defines = /*#__PURE__*/Object.freeze({
        __proto__: null,
        get ObjectType () { return ObjectType; },
        get Status () { return Status; },
        get API () { return API; },
        get SurfaceTransform () { return SurfaceTransform; },
        get Feature () { return Feature$1; },
        get Format () { return Format; },
        get FormatType () { return FormatType; },
        get Type () { return Type; },
        get BufferUsageBit () { return BufferUsageBit; },
        get BufferFlagBit () { return BufferFlagBit; },
        get MemoryAccessBit () { return MemoryAccessBit; },
        get MemoryUsageBit () { return MemoryUsageBit; },
        get TextureType () { return TextureType; },
        get TextureUsageBit () { return TextureUsageBit; },
        get TextureFlagBit () { return TextureFlagBit; },
        get FormatFeatureBit () { return FormatFeatureBit; },
        get SampleCount () { return SampleCount; },
        get VsyncMode () { return VsyncMode; },
        get Filter () { return Filter; },
        get Address () { return Address; },
        get ComparisonFunc () { return ComparisonFunc; },
        get StencilOp () { return StencilOp; },
        get BlendFactor () { return BlendFactor; },
        get BlendOp () { return BlendOp; },
        get ColorMask () { return ColorMask; },
        get ShaderStageFlagBit () { return ShaderStageFlagBit; },
        get LoadOp () { return LoadOp; },
        get StoreOp () { return StoreOp; },
        get AccessFlagBit () { return AccessFlagBit; },
        get ResolveMode () { return ResolveMode; },
        get PipelineBindPoint () { return PipelineBindPoint; },
        get PrimitiveMode () { return PrimitiveMode; },
        get PolygonMode () { return PolygonMode; },
        get ShadeModel () { return ShadeModel; },
        get CullMode () { return CullMode; },
        get DynamicStateFlagBit () { return DynamicStateFlagBit; },
        get StencilFace () { return StencilFace; },
        get DescriptorType () { return DescriptorType; },
        get QueueType () { return QueueType; },
        get QueryType () { return QueryType; },
        get CommandBufferType () { return CommandBufferType; },
        get ClearFlagBit () { return ClearFlagBit; },
        get BarrierType () { return BarrierType; },
        get PassType () { return PassType; },
        Size: Size$1,
        DeviceCaps: DeviceCaps,
        DeviceOptions: DeviceOptions,
        Offset: Offset,
        Rect: Rect$1,
        Extent: Extent,
        TextureSubresLayers: TextureSubresLayers,
        TextureSubresRange: TextureSubresRange,
        TextureCopy: TextureCopy,
        TextureBlit: TextureBlit,
        BufferTextureCopy: BufferTextureCopy,
        Viewport: Viewport,
        Color: Color$1,
        BindingMappingInfo: BindingMappingInfo,
        SwapchainInfo: SwapchainInfo,
        DeviceInfo: DeviceInfo,
        BufferInfo: BufferInfo,
        BufferViewInfo: BufferViewInfo,
        DrawInfo: DrawInfo,
        DispatchInfo: DispatchInfo,
        IndirectBuffer: IndirectBuffer,
        TextureInfo: TextureInfo,
        TextureViewInfo: TextureViewInfo,
        SamplerInfo: SamplerInfo,
        Uniform: Uniform,
        UniformBlock: UniformBlock,
        UniformSamplerTexture: UniformSamplerTexture,
        UniformSampler: UniformSampler,
        UniformTexture: UniformTexture,
        UniformStorageImage: UniformStorageImage,
        UniformStorageBuffer: UniformStorageBuffer,
        UniformInputAttachment: UniformInputAttachment,
        ShaderStage: ShaderStage,
        Attribute: Attribute,
        ShaderInfo: ShaderInfo,
        InputAssemblerInfo: InputAssemblerInfo,
        ColorAttachment: ColorAttachment,
        DepthStencilAttachment: DepthStencilAttachment,
        SubpassInfo: SubpassInfo,
        SubpassDependency: SubpassDependency,
        RenderPassInfo: RenderPassInfo,
        GeneralBarrierInfo: GeneralBarrierInfo,
        TextureBarrierInfo: TextureBarrierInfo,
        BufferBarrierInfo: BufferBarrierInfo,
        FramebufferInfo: FramebufferInfo,
        DescriptorSetLayoutBinding: DescriptorSetLayoutBinding,
        DescriptorSetLayoutInfo: DescriptorSetLayoutInfo,
        DescriptorSetInfo: DescriptorSetInfo,
        PipelineLayoutInfo: PipelineLayoutInfo,
        InputState: InputState,
        CommandBufferInfo: CommandBufferInfo,
        QueueInfo: QueueInfo,
        QueryPoolInfo: QueryPoolInfo,
        FormatInfo: FormatInfo,
        MemoryStatus: MemoryStatus,
        DynamicStencilStates: DynamicStencilStates,
        DynamicStates: DynamicStates,
        GFXObject: GFXObject,
        get AttributeName () { return AttributeName; },
        FormatInfos: FormatInfos,
        DESCRIPTOR_BUFFER_TYPE: DESCRIPTOR_BUFFER_TYPE,
        DESCRIPTOR_SAMPLER_TYPE: DESCRIPTOR_SAMPLER_TYPE,
        DESCRIPTOR_DYNAMIC_TYPE: DESCRIPTOR_DYNAMIC_TYPE,
        DRAW_INFO_SIZE: DRAW_INFO_SIZE,
        IsPowerOf2: IsPowerOf2,
        FormatSize: FormatSize,
        FormatSurfaceSize: FormatSurfaceSize,
        GetTypeSize: GetTypeSize,
        getTypedArrayConstructor: getTypedArrayConstructor,
        formatAlignment: formatAlignment,
        alignTo: alignTo
      });

      var Buffer = function (_GFXObject) {
        _inheritsLoose(Buffer, _GFXObject);

        function Buffer() {
          var _this;

          _this = _GFXObject.call(this, ObjectType.BUFFER) || this;
          _this._usage = BufferUsageBit.NONE;
          _this._memUsage = MemoryUsageBit.NONE;
          _this._size = 0;
          _this._stride = 1;
          _this._count = 0;
          _this._flags = BufferFlagBit.NONE;
          _this._isBufferView = false;
          return _this;
        }

        _createClass(Buffer, [{
          key: "usage",
          get: function get() {
            return this._usage;
          }
        }, {
          key: "memUsage",
          get: function get() {
            return this._memUsage;
          }
        }, {
          key: "size",
          get: function get() {
            return this._size;
          }
        }, {
          key: "stride",
          get: function get() {
            return this._stride;
          }
        }, {
          key: "count",
          get: function get() {
            return this._count;
          }
        }, {
          key: "flags",
          get: function get() {
            return this._flags;
          }
        }]);

        return Buffer;
      }(GFXObject);

      var CommandBuffer = function (_GFXObject) {
        _inheritsLoose(CommandBuffer, _GFXObject);

        function CommandBuffer() {
          var _this;

          _this = _GFXObject.call(this, ObjectType.COMMAND_BUFFER) || this;
          _this._queue = null;
          _this._type = CommandBufferType.PRIMARY;
          _this._numDrawCalls = 0;
          _this._numInstances = 0;
          _this._numTris = 0;
          return _this;
        }

        _createClass(CommandBuffer, [{
          key: "type",
          get: function get() {
            return this._type;
          }
        }, {
          key: "queue",
          get: function get() {
            return this._queue;
          }
        }, {
          key: "numDrawCalls",
          get: function get() {
            return this._numDrawCalls;
          }
        }, {
          key: "numInstances",
          get: function get() {
            return this._numInstances;
          }
        }, {
          key: "numTris",
          get: function get() {
            return this._numTris;
          }
        }]);

        return CommandBuffer;
      }(GFXObject);

      var Device = function () {
        function Device() {
          this._gfxAPI = API.UNKNOWN;
          this._renderer = '';
          this._vendor = '';
          this._features = new Array(Feature$1.COUNT);
          this._formatFeatures = new Array(Format.COUNT);
          this._queue = null;
          this._cmdBuff = null;
          this._numDrawCalls = 0;
          this._numInstances = 0;
          this._numTris = 0;
          this._memoryStatus = new MemoryStatus();
          this._caps = new DeviceCaps();
          this._bindingMappingInfo = new BindingMappingInfo();
          this._samplers = new Map();
          this._generalBarrierss = new Map();
          this._textureBarriers = new Map();
          this._bufferBarriers = new Map();
        }

        var _proto = Device.prototype;

        _proto.hasFeature = function hasFeature(feature) {
          return this._features[feature];
        };

        _proto.getFormatFeatures = function getFormatFeatures(format) {
          return this._formatFeatures[format];
        };

        _createClass(Device, [{
          key: "gfxAPI",
          get: function get() {
            return this._gfxAPI;
          }
        }, {
          key: "queue",
          get: function get() {
            return this._queue;
          }
        }, {
          key: "commandBuffer",
          get: function get() {
            return this._cmdBuff;
          }
        }, {
          key: "renderer",
          get: function get() {
            return this._renderer;
          }
        }, {
          key: "vendor",
          get: function get() {
            return this._vendor;
          }
        }, {
          key: "numDrawCalls",
          get: function get() {
            return this._numDrawCalls;
          }
        }, {
          key: "numInstances",
          get: function get() {
            return this._numInstances;
          }
        }, {
          key: "numTris",
          get: function get() {
            return this._numTris;
          }
        }, {
          key: "memoryStatus",
          get: function get() {
            return this._memoryStatus;
          }
        }, {
          key: "capabilities",
          get: function get() {
            return this._caps;
          }
        }, {
          key: "bindingMappingInfo",
          get: function get() {
            return this._bindingMappingInfo;
          }
        }]);

        return Device;
      }();
      Device.canvas = void 0;
      var DefaultResource = function () {
        function DefaultResource(device) {
          this._texture2D = null;
          this._texture3D = null;
          this._textureCube = null;
          this._texture2DArray = null;
          var bufferSize = 64;
          var buffer = new Uint8Array(bufferSize);
          buffer.fill(255);

          if (device.capabilities.maxTextureSize >= 2) {
            this._texture2D = device.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.STORAGE | TextureUsageBit.SAMPLED, Format.RGBA8, 2, 2, TextureFlagBit.NONE));
            var copyRegion = new BufferTextureCopy(0, 0, 0, new Offset(0, 0, 0), new Extent(2, 2, 1));
            device.copyBuffersToTexture([buffer], this._texture2D, [copyRegion]);
          }

          if (device.capabilities.maxTextureSize >= 2) {
            this._textureCube = device.createTexture(new TextureInfo(TextureType.CUBE, TextureUsageBit.STORAGE | TextureUsageBit.SAMPLED, Format.RGBA8, 2, 2, TextureFlagBit.NONE, 6));

            var _copyRegion = new BufferTextureCopy(0, 0, 0, new Offset(0, 0, 0), new Extent(2, 2, 1));

            device.copyBuffersToTexture([buffer], this._textureCube, [_copyRegion]);
            _copyRegion.texSubres.baseArrayLayer = 1;
            device.copyBuffersToTexture([buffer], this._textureCube, [_copyRegion]);
            _copyRegion.texSubres.baseArrayLayer = 2;
            device.copyBuffersToTexture([buffer], this._textureCube, [_copyRegion]);
            _copyRegion.texSubres.baseArrayLayer = 3;
            device.copyBuffersToTexture([buffer], this._textureCube, [_copyRegion]);
            _copyRegion.texSubres.baseArrayLayer = 4;
            device.copyBuffersToTexture([buffer], this._textureCube, [_copyRegion]);
            _copyRegion.texSubres.baseArrayLayer = 5;
            device.copyBuffersToTexture([buffer], this._textureCube, [_copyRegion]);
          }

          if (device.capabilities.max3DTextureSize >= 2) {
            this._texture3D = device.createTexture(new TextureInfo(TextureType.TEX3D, TextureUsageBit.STORAGE | TextureUsageBit.SAMPLED, Format.RGBA8, 2, 2, TextureFlagBit.NONE, 1, 1, SampleCount.ONE, 2));

            var _copyRegion2 = new BufferTextureCopy(0, 0, 0, new Offset(0, 0, 0), new Extent(2, 2, 2), new TextureSubresLayers(0, 0, 1));

            device.copyBuffersToTexture([buffer], this._texture3D, [_copyRegion2]);
          }

          if (device.capabilities.maxArrayTextureLayers >= 2) {
            this._texture2DArray = device.createTexture(new TextureInfo(TextureType.TEX2D_ARRAY, TextureUsageBit.STORAGE | TextureUsageBit.SAMPLED, Format.RGBA8, 2, 2, TextureFlagBit.NONE, 2));

            var _copyRegion3 = new BufferTextureCopy(0, 0, 0, new Offset(0, 0, 0), new Extent(2, 2, 1), new TextureSubresLayers(0, 0, 1));

            device.copyBuffersToTexture([buffer], this._texture2DArray, [_copyRegion3]);
            _copyRegion3.texSubres.baseArrayLayer = 1;
            device.copyBuffersToTexture([buffer], this._texture2DArray, [_copyRegion3]);
          }
        }

        var _proto2 = DefaultResource.prototype;

        _proto2.getTexture = function getTexture(type) {
          switch (type) {
            case TextureType.TEX2D:
              return this._texture2D;

            case TextureType.TEX3D:
              return this._texture3D;

            case TextureType.CUBE:
              return this._textureCube;

            case TextureType.TEX2D_ARRAY:
              return this._texture2DArray;

            default:
              return null;
          }
        };

        return DefaultResource;
      }();

      var Swapchain = function (_GFXObject) {
        _inheritsLoose(Swapchain, _GFXObject);

        function Swapchain() {
          var _this;

          _this = _GFXObject.call(this, ObjectType.SWAPCHAIN) || this;
          _this._transform = SurfaceTransform.IDENTITY;
          _this._colorTexture = null;
          _this._depthStencilTexture = null;
          return _this;
        }

        _createClass(Swapchain, [{
          key: "colorTexture",
          get: function get() {
            return this._colorTexture;
          }
        }, {
          key: "depthStencilTexture",
          get: function get() {
            return this._depthStencilTexture;
          }
        }, {
          key: "surfaceTransform",
          get: function get() {
            return this._transform;
          }
        }, {
          key: "width",
          get: function get() {
            return this._colorTexture.width;
          }
        }, {
          key: "height",
          get: function get() {
            return this._colorTexture.height;
          }
        }]);

        return Swapchain;
      }(GFXObject);

      var Framebuffer = function (_GFXObject) {
        _inheritsLoose(Framebuffer, _GFXObject);

        function Framebuffer() {
          var _this;

          _this = _GFXObject.call(this, ObjectType.FRAMEBUFFER) || this;
          _this._renderPass = null;
          _this._colorTextures = [];
          _this._depthStencilTexture = null;
          return _this;
        }

        _createClass(Framebuffer, [{
          key: "renderPass",
          get: function get() {
            return this._renderPass;
          }
        }, {
          key: "colorTextures",
          get: function get() {
            return this._colorTextures;
          }
        }, {
          key: "depthStencilTexture",
          get: function get() {
            return this._depthStencilTexture;
          }
        }]);

        return Framebuffer;
      }(GFXObject);

      var InputAssembler = function (_GFXObject) {
        _inheritsLoose(InputAssembler, _GFXObject);

        function InputAssembler() {
          var _this;

          _this = _GFXObject.call(this, ObjectType.INPUT_ASSEMBLER) || this;
          _this._attributes = [];
          _this._attributesHash = 0;
          _this._vertexBuffers = [];
          _this._indexBuffer = null;
          _this._indirectBuffer = null;
          _this._drawInfo = new DrawInfo();
          return _this;
        }

        var _proto = InputAssembler.prototype;

        _proto.getVertexBuffer = function getVertexBuffer(stream) {
          if (stream === void 0) {
            stream = 0;
          }

          if (stream < this._vertexBuffers.length) {
            return this._vertexBuffers[stream];
          } else {
            return null;
          }
        };

        _proto.computeAttributesHash = function computeAttributesHash() {
          var res = 'attrs';

          for (var i = 0; i < this.attributes.length; ++i) {
            var at = this.attributes[i];
            res += "," + at.name + "," + at.format + "," + at.isNormalized + "," + at.stream + "," + at.isInstanced + "," + at.location;
          }

          return murmurhash2_32_gc(res, 666);
        };

        _createClass(InputAssembler, [{
          key: "attributes",
          get: function get() {
            return this._attributes;
          }
        }, {
          key: "vertexBuffers",
          get: function get() {
            return this._vertexBuffers;
          }
        }, {
          key: "indexBuffer",
          get: function get() {
            return this._indexBuffer;
          }
        }, {
          key: "indirectBuffer",
          get: function get() {
            return this._indirectBuffer;
          }
        }, {
          key: "attributesHash",
          get: function get() {
            return this._attributesHash;
          }
        }, {
          key: "vertexCount",
          get: function get() {
            return this._drawInfo.vertexCount;
          },
          set: function set(count) {
            this._drawInfo.vertexCount = count;
          }
        }, {
          key: "firstVertex",
          get: function get() {
            return this._drawInfo.firstVertex;
          },
          set: function set(first) {
            this._drawInfo.firstVertex = first;
          }
        }, {
          key: "indexCount",
          get: function get() {
            return this._drawInfo.indexCount;
          },
          set: function set(count) {
            this._drawInfo.indexCount = count;
          }
        }, {
          key: "firstIndex",
          get: function get() {
            return this._drawInfo.firstIndex;
          },
          set: function set(first) {
            this._drawInfo.firstIndex = first;
          }
        }, {
          key: "vertexOffset",
          get: function get() {
            return this._drawInfo.vertexOffset;
          },
          set: function set(offset) {
            this._drawInfo.vertexOffset = offset;
          }
        }, {
          key: "instanceCount",
          get: function get() {
            return this._drawInfo.instanceCount;
          },
          set: function set(count) {
            this._drawInfo.instanceCount = count;
          }
        }, {
          key: "firstInstance",
          get: function get() {
            return this._drawInfo.firstInstance;
          },
          set: function set(first) {
            this._drawInfo.firstInstance = first;
          }
        }, {
          key: "drawInfo",
          get: function get() {
            return this._drawInfo;
          },
          set: function set(info) {
            this._drawInfo = info;
          }
        }]);

        return InputAssembler;
      }(GFXObject);

      var DescriptorSet = function (_GFXObject) {
        _inheritsLoose(DescriptorSet, _GFXObject);

        function DescriptorSet() {
          var _this;

          _this = _GFXObject.call(this, ObjectType.DESCRIPTOR_SET) || this;
          _this._layout = null;
          _this._buffers = [];
          _this._textures = [];
          _this._samplers = [];
          _this._isDirty = false;
          return _this;
        }

        var _proto = DescriptorSet.prototype;

        _proto.bindBuffer = function bindBuffer(binding, buffer, index) {
          if (index === void 0) {
            index = 0;
          }

          var bindingIndex = this._layout.bindingIndices[binding];
          var info = this._layout.bindings[bindingIndex];

          if (!info) {
            return;
          }

          if (info.descriptorType & DESCRIPTOR_BUFFER_TYPE) {
            var descriptorIndex = this._layout.descriptorIndices[binding];

            if (this._buffers[descriptorIndex + index] !== buffer) {
              this._buffers[descriptorIndex + index] = buffer;
              this._isDirty = true;
            }
          }
        };

        _proto.bindSampler = function bindSampler(binding, sampler, index) {
          if (index === void 0) {
            index = 0;
          }

          var bindingIndex = this._layout.bindingIndices[binding];
          var info = this._layout.bindings[bindingIndex];

          if (!info) {
            return;
          }

          if (info.descriptorType & DESCRIPTOR_SAMPLER_TYPE) {
            var descriptorIndex = this._layout.descriptorIndices[binding];

            if (this._samplers[descriptorIndex + index] !== sampler) {
              this._samplers[descriptorIndex + index] = sampler;
              this._isDirty = true;
            }
          }
        };

        _proto.bindTexture = function bindTexture(binding, texture, index) {
          if (index === void 0) {
            index = 0;
          }

          var bindingIndex = this._layout.bindingIndices[binding];
          var info = this._layout.bindings[bindingIndex];

          if (!info) {
            return;
          }

          if (info.descriptorType & DESCRIPTOR_SAMPLER_TYPE) {
            var descriptorIndex = this._layout.descriptorIndices[binding];

            if (this._textures[descriptorIndex + index] !== texture) {
              this._textures[descriptorIndex + index] = texture;
              this._isDirty = true;
            }
          }
        };

        _proto.getBuffer = function getBuffer(binding, index) {
          if (index === void 0) {
            index = 0;
          }

          var descriptorIndex = this._layout.descriptorIndices[binding];
          return this._buffers[descriptorIndex + index];
        };

        _proto.getSampler = function getSampler(binding, index) {
          if (index === void 0) {
            index = 0;
          }

          var descriptorIndex = this._layout.descriptorIndices[binding];
          return this._samplers[descriptorIndex + index];
        };

        _proto.getTexture = function getTexture(binding, index) {
          if (index === void 0) {
            index = 0;
          }

          var descriptorIndex = this._layout.descriptorIndices[binding];
          return this._textures[descriptorIndex + index];
        };

        _createClass(DescriptorSet, [{
          key: "layout",
          get: function get() {
            return this._layout;
          }
        }]);

        return DescriptorSet;
      }(GFXObject);

      var DescriptorSetLayout = function (_GFXObject) {
        _inheritsLoose(DescriptorSetLayout, _GFXObject);

        function DescriptorSetLayout() {
          var _this;

          _this = _GFXObject.call(this, ObjectType.DESCRIPTOR_SET_LAYOUT) || this;
          _this._bindings = [];
          _this._bindingIndices = [];
          _this._descriptorIndices = [];
          return _this;
        }

        _createClass(DescriptorSetLayout, [{
          key: "bindings",
          get: function get() {
            return this._bindings;
          }
        }, {
          key: "bindingIndices",
          get: function get() {
            return this._bindingIndices;
          }
        }, {
          key: "descriptorIndices",
          get: function get() {
            return this._descriptorIndices;
          }
        }]);

        return DescriptorSetLayout;
      }(GFXObject);

      var PipelineLayout = function (_GFXObject) {
        _inheritsLoose(PipelineLayout, _GFXObject);

        function PipelineLayout() {
          var _this;

          _this = _GFXObject.call(this, ObjectType.PIPELINE_LAYOUT) || this;
          _this._setLayouts = [];
          return _this;
        }

        _createClass(PipelineLayout, [{
          key: "setLayouts",
          get: function get() {
            return this._setLayouts;
          }
        }]);

        return PipelineLayout;
      }(GFXObject);

      var RasterizerState = function () {
        function RasterizerState(isDiscard, polygonMode, shadeModel, cullMode, isFrontFaceCCW, depthBiasEnabled, depthBias, depthBiasClamp, depthBiasSlop, isDepthClip, isMultisample, lineWidth) {
          if (isDiscard === void 0) {
            isDiscard = false;
          }

          if (polygonMode === void 0) {
            polygonMode = PolygonMode.FILL;
          }

          if (shadeModel === void 0) {
            shadeModel = ShadeModel.GOURAND;
          }

          if (cullMode === void 0) {
            cullMode = CullMode.BACK;
          }

          if (isFrontFaceCCW === void 0) {
            isFrontFaceCCW = true;
          }

          if (depthBiasEnabled === void 0) {
            depthBiasEnabled = false;
          }

          if (depthBias === void 0) {
            depthBias = 0;
          }

          if (depthBiasClamp === void 0) {
            depthBiasClamp = 0.0;
          }

          if (depthBiasSlop === void 0) {
            depthBiasSlop = 0.0;
          }

          if (isDepthClip === void 0) {
            isDepthClip = true;
          }

          if (isMultisample === void 0) {
            isMultisample = false;
          }

          if (lineWidth === void 0) {
            lineWidth = 1.0;
          }

          this.isDiscard = isDiscard;
          this.polygonMode = polygonMode;
          this.shadeModel = shadeModel;
          this.cullMode = cullMode;
          this.isFrontFaceCCW = isFrontFaceCCW;
          this.depthBiasEnabled = depthBiasEnabled;
          this.depthBias = depthBias;
          this.depthBiasClamp = depthBiasClamp;
          this.depthBiasSlop = depthBiasSlop;
          this.isDepthClip = isDepthClip;
          this.isMultisample = isMultisample;
          this.lineWidth = lineWidth;
        }

        var _proto = RasterizerState.prototype;

        _proto.reset = function reset() {
          this.isDiscard = false;
          this.polygonMode = PolygonMode.FILL;
          this.shadeModel = ShadeModel.GOURAND;
          this.cullMode = CullMode.BACK;
          this.isFrontFaceCCW = true;
          this.depthBiasEnabled = false;
          this.depthBias = 0;
          this.depthBiasClamp = 0.0;
          this.depthBiasSlop = 0.0;
          this.isDepthClip = true;
          this.isMultisample = false;
          this.lineWidth = 1.0;
        };

        _proto.assign = function assign(rs) {
          Object.assign(this, rs);
        };

        _proto.destroy = function destroy() {};

        _createClass(RasterizerState, [{
          key: "native",
          get: function get() {
            return this;
          }
        }]);

        return RasterizerState;
      }();
      var DepthStencilState = function () {
        function DepthStencilState(depthTest, depthWrite, depthFunc, stencilTestFront, stencilFuncFront, stencilReadMaskFront, stencilWriteMaskFront, stencilFailOpFront, stencilZFailOpFront, stencilPassOpFront, stencilRefFront, stencilTestBack, stencilFuncBack, stencilReadMaskBack, stencilWriteMaskBack, stencilFailOpBack, stencilZFailOpBack, stencilPassOpBack, stencilRefBack) {
          if (depthTest === void 0) {
            depthTest = true;
          }

          if (depthWrite === void 0) {
            depthWrite = true;
          }

          if (depthFunc === void 0) {
            depthFunc = ComparisonFunc.LESS;
          }

          if (stencilTestFront === void 0) {
            stencilTestFront = false;
          }

          if (stencilFuncFront === void 0) {
            stencilFuncFront = ComparisonFunc.ALWAYS;
          }

          if (stencilReadMaskFront === void 0) {
            stencilReadMaskFront = 0xffff;
          }

          if (stencilWriteMaskFront === void 0) {
            stencilWriteMaskFront = 0xffff;
          }

          if (stencilFailOpFront === void 0) {
            stencilFailOpFront = StencilOp.KEEP;
          }

          if (stencilZFailOpFront === void 0) {
            stencilZFailOpFront = StencilOp.KEEP;
          }

          if (stencilPassOpFront === void 0) {
            stencilPassOpFront = StencilOp.KEEP;
          }

          if (stencilRefFront === void 0) {
            stencilRefFront = 1;
          }

          if (stencilTestBack === void 0) {
            stencilTestBack = false;
          }

          if (stencilFuncBack === void 0) {
            stencilFuncBack = ComparisonFunc.ALWAYS;
          }

          if (stencilReadMaskBack === void 0) {
            stencilReadMaskBack = 0xffff;
          }

          if (stencilWriteMaskBack === void 0) {
            stencilWriteMaskBack = 0xffff;
          }

          if (stencilFailOpBack === void 0) {
            stencilFailOpBack = StencilOp.KEEP;
          }

          if (stencilZFailOpBack === void 0) {
            stencilZFailOpBack = StencilOp.KEEP;
          }

          if (stencilPassOpBack === void 0) {
            stencilPassOpBack = StencilOp.KEEP;
          }

          if (stencilRefBack === void 0) {
            stencilRefBack = 1;
          }

          this.depthTest = depthTest;
          this.depthWrite = depthWrite;
          this.depthFunc = depthFunc;
          this.stencilTestFront = stencilTestFront;
          this.stencilFuncFront = stencilFuncFront;
          this.stencilReadMaskFront = stencilReadMaskFront;
          this.stencilWriteMaskFront = stencilWriteMaskFront;
          this.stencilFailOpFront = stencilFailOpFront;
          this.stencilZFailOpFront = stencilZFailOpFront;
          this.stencilPassOpFront = stencilPassOpFront;
          this.stencilRefFront = stencilRefFront;
          this.stencilTestBack = stencilTestBack;
          this.stencilFuncBack = stencilFuncBack;
          this.stencilReadMaskBack = stencilReadMaskBack;
          this.stencilWriteMaskBack = stencilWriteMaskBack;
          this.stencilFailOpBack = stencilFailOpBack;
          this.stencilZFailOpBack = stencilZFailOpBack;
          this.stencilPassOpBack = stencilPassOpBack;
          this.stencilRefBack = stencilRefBack;
        }

        var _proto2 = DepthStencilState.prototype;

        _proto2.reset = function reset() {
          this.depthTest = true;
          this.depthWrite = true;
          this.depthFunc = ComparisonFunc.LESS;
          this.stencilTestFront = false;
          this.stencilFuncFront = ComparisonFunc.ALWAYS;
          this.stencilReadMaskFront = 0xffff;
          this.stencilWriteMaskFront = 0xffff;
          this.stencilFailOpFront = StencilOp.KEEP;
          this.stencilZFailOpFront = StencilOp.KEEP;
          this.stencilPassOpFront = StencilOp.KEEP;
          this.stencilRefFront = 1;
          this.stencilTestBack = false;
          this.stencilFuncBack = ComparisonFunc.ALWAYS;
          this.stencilReadMaskBack = 0xffff;
          this.stencilWriteMaskBack = 0xffff;
          this.stencilFailOpBack = StencilOp.KEEP;
          this.stencilZFailOpBack = StencilOp.KEEP;
          this.stencilPassOpBack = StencilOp.KEEP;
          this.stencilRefBack = 1;
        };

        _proto2.assign = function assign(dss) {
          Object.assign(this, dss);
        };

        _proto2.destroy = function destroy() {};

        _createClass(DepthStencilState, [{
          key: "native",
          get: function get() {
            return this;
          }
        }]);

        return DepthStencilState;
      }();
      var BlendTarget = function () {
        function BlendTarget(blend, blendSrc, blendDst, blendEq, blendSrcAlpha, blendDstAlpha, blendAlphaEq, blendColorMask) {
          if (blend === void 0) {
            blend = false;
          }

          if (blendSrc === void 0) {
            blendSrc = BlendFactor.ONE;
          }

          if (blendDst === void 0) {
            blendDst = BlendFactor.ZERO;
          }

          if (blendEq === void 0) {
            blendEq = BlendOp.ADD;
          }

          if (blendSrcAlpha === void 0) {
            blendSrcAlpha = BlendFactor.ONE;
          }

          if (blendDstAlpha === void 0) {
            blendDstAlpha = BlendFactor.ZERO;
          }

          if (blendAlphaEq === void 0) {
            blendAlphaEq = BlendOp.ADD;
          }

          if (blendColorMask === void 0) {
            blendColorMask = ColorMask.ALL;
          }

          this.blend = blend;
          this.blendSrc = blendSrc;
          this.blendDst = blendDst;
          this.blendEq = blendEq;
          this.blendSrcAlpha = blendSrcAlpha;
          this.blendDstAlpha = blendDstAlpha;
          this.blendAlphaEq = blendAlphaEq;
          this.blendColorMask = blendColorMask;
        }

        var _proto3 = BlendTarget.prototype;

        _proto3.reset = function reset() {
          this.blend = false;
          this.blendSrc = BlendFactor.ONE;
          this.blendDst = BlendFactor.ZERO;
          this.blendEq = BlendOp.ADD;
          this.blendSrcAlpha = BlendFactor.ONE;
          this.blendDstAlpha = BlendFactor.ZERO;
          this.blendAlphaEq = BlendOp.ADD;
          this.blendColorMask = ColorMask.ALL;
        };

        _proto3.assign = function assign(target) {
          Object.assign(this, target);
        };

        _proto3.destroy = function destroy() {};

        return BlendTarget;
      }();
      var BlendState = function () {
        function BlendState(isA2C, isIndepend, blendColor, targets) {
          if (isA2C === void 0) {
            isA2C = false;
          }

          if (isIndepend === void 0) {
            isIndepend = false;
          }

          if (blendColor === void 0) {
            blendColor = new Color$1();
          }

          if (targets === void 0) {
            targets = [new BlendTarget()];
          }

          this.isA2C = isA2C;
          this.isIndepend = isIndepend;
          this.blendColor = blendColor;
          this.targets = targets;
        }

        var _proto4 = BlendState.prototype;

        _proto4.setTarget = function setTarget(index, target) {
          var tg = this.targets[index];

          if (!tg) {
            tg = this.targets[index] = new BlendTarget();
          }

          Object.assign(tg, target);
        };

        _proto4.reset = function reset() {
          this.isA2C = false;
          this.isIndepend = false;
          this.blendColor.x = 0;
          this.blendColor.y = 0;
          this.blendColor.z = 0;
          this.blendColor.w = 0;
          this.targets.length = 1;
          this.targets[0].reset();
        };

        _proto4.destroy = function destroy() {};

        _createClass(BlendState, [{
          key: "native",
          get: function get() {
            return this;
          }
        }]);

        return BlendState;
      }();
      var PipelineStateInfo = function PipelineStateInfo(shader, pipelineLayout, renderPass, inputState, rasterizerState, depthStencilState, blendState, primitive, dynamicStates, bindPoint) {
        if (shader === void 0) {
          shader = null;
        }

        if (pipelineLayout === void 0) {
          pipelineLayout = null;
        }

        if (renderPass === void 0) {
          renderPass = null;
        }

        if (inputState === void 0) {
          inputState = new InputState();
        }

        if (rasterizerState === void 0) {
          rasterizerState = new RasterizerState();
        }

        if (depthStencilState === void 0) {
          depthStencilState = new DepthStencilState();
        }

        if (blendState === void 0) {
          blendState = new BlendState();
        }

        if (primitive === void 0) {
          primitive = PrimitiveMode.TRIANGLE_LIST;
        }

        if (dynamicStates === void 0) {
          dynamicStates = DynamicStateFlagBit.NONE;
        }

        if (bindPoint === void 0) {
          bindPoint = PipelineBindPoint.GRAPHICS;
        }

        this.shader = shader;
        this.pipelineLayout = pipelineLayout;
        this.renderPass = renderPass;
        this.inputState = inputState;
        this.rasterizerState = rasterizerState;
        this.depthStencilState = depthStencilState;
        this.blendState = blendState;
        this.primitive = primitive;
        this.dynamicStates = dynamicStates;
        this.bindPoint = bindPoint;
      };
      var PipelineState = function (_GFXObject) {
        _inheritsLoose(PipelineState, _GFXObject);

        function PipelineState() {
          var _this;

          _this = _GFXObject.call(this, ObjectType.PIPELINE_STATE) || this;
          _this._shader = null;
          _this._pipelineLayout = null;
          _this._primitive = PrimitiveMode.TRIANGLE_LIST;
          _this._is = null;
          _this._rs = new RasterizerState();
          _this._dss = new DepthStencilState();
          _this._bs = new BlendState();
          _this._dynamicStates = DynamicStateFlagBit.NONE;
          _this._renderPass = null;
          return _this;
        }

        _createClass(PipelineState, [{
          key: "shader",
          get: function get() {
            return this._shader;
          }
        }, {
          key: "pipelineLayout",
          get: function get() {
            return this._pipelineLayout;
          }
        }, {
          key: "primitive",
          get: function get() {
            return this._primitive;
          }
        }, {
          key: "rasterizerState",
          get: function get() {
            return this._rs;
          }
        }, {
          key: "depthStencilState",
          get: function get() {
            return this._dss;
          }
        }, {
          key: "blendState",
          get: function get() {
            return this._bs;
          }
        }, {
          key: "inputState",
          get: function get() {
            return this._is;
          }
        }, {
          key: "dynamicStates",
          get: function get() {
            return this._dynamicStates;
          }
        }, {
          key: "renderPass",
          get: function get() {
            return this._renderPass;
          }
        }]);

        return PipelineState;
      }(GFXObject);

      var Queue = function (_GFXObject) {
        _inheritsLoose(Queue, _GFXObject);

        function Queue() {
          var _this;

          _this = _GFXObject.call(this, ObjectType.QUEUE) || this;
          _this._type = QueueType.GRAPHICS;
          return _this;
        }

        _createClass(Queue, [{
          key: "type",
          get: function get() {
            return this._type;
          }
        }]);

        return Queue;
      }(GFXObject);

      var RenderPass = function (_GFXObject) {
        _inheritsLoose(RenderPass, _GFXObject);

        function RenderPass() {
          var _this;

          _this = _GFXObject.call(this, ObjectType.RENDER_PASS) || this;
          _this._colorInfos = [];
          _this._depthStencilInfo = null;
          _this._subpasses = [];
          _this._hash = 0;
          return _this;
        }

        var _proto = RenderPass.prototype;

        _proto.computeHash = function computeHash() {
          var res = '';

          if (this._subpasses.length) {
            for (var i = 0; i < this._subpasses.length; ++i) {
              var subpass = this._subpasses[i];

              if (subpass.inputs.length) {
                res += 'ia';

                for (var j = 0; j < subpass.inputs.length; ++j) {
                  var ia = this._colorInfos[subpass.inputs[j]];
                  res += "," + ia.format + "," + ia.sampleCount;
                }
              }

              if (subpass.colors.length) {
                res += 'ca';

                for (var _j = 0; _j < subpass.inputs.length; ++_j) {
                  var ca = this._colorInfos[subpass.inputs[_j]];
                  res += "," + ca.format + "," + ca.sampleCount;
                }
              }

              if (subpass.depthStencil >= 0) {
                var ds = this._colorInfos[subpass.depthStencil];
                res += "ds," + ds.format + "," + ds.sampleCount;
              }
            }
          } else {
            res += 'ca';

            for (var _i = 0; _i < this._colorInfos.length; ++_i) {
              var _ca = this._colorInfos[_i];
              res += "," + _ca.format + "," + _ca.sampleCount;
            }

            var _ds = this._depthStencilInfo;

            if (_ds) {
              res += "ds," + _ds.format + "," + _ds.sampleCount;
            }
          }

          return murmurhash2_32_gc(res, 666);
        };

        _createClass(RenderPass, [{
          key: "colorAttachments",
          get: function get() {
            return this._colorInfos;
          }
        }, {
          key: "depthStencilAttachment",
          get: function get() {
            return this._depthStencilInfo;
          }
        }, {
          key: "subPasses",
          get: function get() {
            return this._subpasses;
          }
        }, {
          key: "hash",
          get: function get() {
            return this._hash;
          }
        }]);

        return RenderPass;
      }(GFXObject);

      var Sampler = function (_GFXObject) {
        _inheritsLoose(Sampler, _GFXObject);

        function Sampler(info, hash) {
          var _this;

          _this = _GFXObject.call(this, ObjectType.SAMPLER) || this;
          _this._info = new SamplerInfo();
          _this._hash = 0;

          _this._info.copy(info);

          _this._hash = hash;
          return _this;
        }

        Sampler.computeHash = function computeHash(info) {
          var hash = info.minFilter;
          hash |= info.magFilter << 2;
          hash |= info.mipFilter << 4;
          hash |= info.addressU << 6;
          hash |= info.addressV << 8;
          hash |= info.addressW << 10;
          hash |= info.maxAnisotropy << 12;
          hash |= info.cmpFunc << 16;
          return hash;
        };

        Sampler.unpackFromHash = function unpackFromHash(hash) {
          var info = new SamplerInfo();
          info.minFilter = (hash & (1 << 2) - 1) >> 0;
          info.magFilter = (hash & (1 << 2) - 1) >> 2;
          info.mipFilter = (hash & (1 << 2) - 1) >> 4;
          info.addressU = (hash & (1 << 2) - 1) >> 6;
          info.addressV = (hash & (1 << 2) - 1) >> 8;
          info.addressW = (hash & (1 << 2) - 1) >> 10;
          info.maxAnisotropy = (hash & (1 << 4) - 1) >> 12;
          info.cmpFunc = (hash & (1 << 3) - 1) >> 16;
          return info;
        };

        _createClass(Sampler, [{
          key: "info",
          get: function get() {
            return this._info;
          }
        }, {
          key: "hash",
          get: function get() {
            return this._hash;
          }
        }]);

        return Sampler;
      }(GFXObject);

      var Shader = function (_GFXObject) {
        _inheritsLoose(Shader, _GFXObject);

        function Shader() {
          var _this;

          _this = _GFXObject.call(this, ObjectType.SHADER) || this;
          _this._name = '';
          _this._stages = [];
          _this._attributes = [];
          _this._blocks = [];
          _this._samplers = [];
          return _this;
        }

        _createClass(Shader, [{
          key: "name",
          get: function get() {
            return this._name;
          }
        }, {
          key: "attributes",
          get: function get() {
            return this._attributes;
          }
        }, {
          key: "blocks",
          get: function get() {
            return this._blocks;
          }
        }, {
          key: "samplers",
          get: function get() {
            return this._samplers;
          }
        }]);

        return Shader;
      }(GFXObject);

      var Texture = function (_GFXObject) {
        _inheritsLoose(Texture, _GFXObject);

        function Texture() {
          var _this;

          _this = _GFXObject.call(this, ObjectType.TEXTURE) || this;
          _this._info = new TextureInfo();
          _this._viewInfo = new TextureViewInfo();
          _this._isPowerOf2 = false;
          _this._isTextureView = false;
          _this._size = 0;
          return _this;
        }

        Texture.getLevelCount = function getLevelCount(width, height) {
          return Math.floor(Math.log2(Math.max(width, height)));
        };

        _createClass(Texture, [{
          key: "type",
          get: function get() {
            return this._info.type;
          }
        }, {
          key: "usage",
          get: function get() {
            return this._info.usage;
          }
        }, {
          key: "format",
          get: function get() {
            return this._info.format;
          }
        }, {
          key: "width",
          get: function get() {
            return this._info.width;
          }
        }, {
          key: "height",
          get: function get() {
            return this._info.height;
          }
        }, {
          key: "depth",
          get: function get() {
            return this._info.depth;
          }
        }, {
          key: "layerCount",
          get: function get() {
            return this._info.layerCount;
          }
        }, {
          key: "levelCount",
          get: function get() {
            return this._info.levelCount;
          }
        }, {
          key: "samples",
          get: function get() {
            return this._info.samples;
          }
        }, {
          key: "flags",
          get: function get() {
            return this._info.flags;
          }
        }, {
          key: "size",
          get: function get() {
            return this._size;
          }
        }, {
          key: "info",
          get: function get() {
            return this._info;
          }
        }, {
          key: "viewInfo",
          get: function get() {
            return this._viewInfo;
          }
        }, {
          key: "isTextureView",
          get: function get() {
            return this._isTextureView;
          }
        }]);

        return Texture;
      }(GFXObject);

      var GeneralBarrier = function (_GFXObject) {
        _inheritsLoose(GeneralBarrier, _GFXObject);

        function GeneralBarrier(info, hash) {
          var _this;

          _this = _GFXObject.call(this, ObjectType.GLOBAL_BARRIER) || this;
          _this._info = new GeneralBarrierInfo();
          _this._hash = 0;

          _this._info.copy(info);

          _this._hash = hash;
          return _this;
        }

        GeneralBarrier.computeHash = function computeHash(info) {
          return murmurhash2_32_gc(info.prevAccesses + " " + info.nextAccesses + " " + info.type, 666);
        };

        _createClass(GeneralBarrier, [{
          key: "info",
          get: function get() {
            return this._info;
          }
        }, {
          key: "hash",
          get: function get() {
            return this._hash;
          }
        }]);

        return GeneralBarrier;
      }(GFXObject);

      var TextureBarrier = function (_GFXObject) {
        _inheritsLoose(TextureBarrier, _GFXObject);

        function TextureBarrier(info, hash) {
          var _this;

          _this = _GFXObject.call(this, ObjectType.TEXTURE_BARRIER) || this;
          _this._info = new TextureBarrierInfo();
          _this._hash = 0;

          _this._info.copy(info);

          _this._hash = hash;
          return _this;
        }

        TextureBarrier.computeHash = function computeHash(info) {
          var res = info.prevAccesses + " " + info.nextAccesses;
          res += info.type;
          res += info.baseMipLevel;
          res += info.levelCount;
          res += info.baseSlice;
          res += info.sliceCount;
          res += info.discardContents;
          res += info.srcQueue ? info.srcQueue.type : 0;
          res += info.dstQueue ? info.dstQueue.type : 0;
          return murmurhash2_32_gc(res, 666);
        };

        _createClass(TextureBarrier, [{
          key: "info",
          get: function get() {
            return this._info;
          }
        }, {
          key: "hash",
          get: function get() {
            return this._hash;
          }
        }]);

        return TextureBarrier;
      }(GFXObject);

      var BufferBarrier = function (_GFXObject) {
        _inheritsLoose(BufferBarrier, _GFXObject);

        function BufferBarrier(info, hash) {
          var _this;

          _this = _GFXObject.call(this, ObjectType.BUFFER_BARRIER) || this;
          _this._info = new BufferBarrierInfo();
          _this._hash = 0;

          _this._info.copy(info);

          _this._hash = hash;
          return _this;
        }

        BufferBarrier.computeHash = function computeHash(info) {
          var res = info.prevAccesses + " " + info.nextAccesses;
          res += info.type;
          res += info.offset;
          res += info.size;
          res += info.discardContents;
          res += info.srcQueue ? info.srcQueue.type : 0;
          res += info.dstQueue ? info.dstQueue.type : 0;
          return murmurhash2_32_gc(res, 666);
        };

        _createClass(BufferBarrier, [{
          key: "info",
          get: function get() {
            return this._info;
          }
        }, {
          key: "hash",
          get: function get() {
            return this._hash;
          }
        }]);

        return BufferBarrier;
      }(GFXObject);

      var polyfills = {
        Device: Device,
        Swapchain: Swapchain,
        Buffer: Buffer,
        Texture: Texture,
        Sampler: Sampler,
        Shader: Shader,
        InputAssembler: InputAssembler,
        RenderPass: RenderPass,
        Framebuffer: Framebuffer,
        DescriptorSet: DescriptorSet,
        DescriptorSetLayout: DescriptorSetLayout,
        PipelineLayout: PipelineLayout,
        PipelineState: PipelineState,
        CommandBuffer: CommandBuffer,
        Queue: Queue,
        GeneralBarrier: GeneralBarrier,
        TextureBarrier: TextureBarrier,
        BufferBarrier: BufferBarrier,
        RasterizerState: RasterizerState,
        BlendState: BlendState,
        BlendTarget: BlendTarget,
        DepthStencilState: DepthStencilState,
        PipelineStateInfo: PipelineStateInfo
      };
      Object.assign(polyfills, defines);
      legacyCC.gfx = polyfills;

      removeProperty(Feature$1, 'Feature', [{
        name: 'COLOR_FLOAT',
        suggest: 'Please use device.getFormatFeatures() instead, like: \n' + 'let isSupported = device.getFormatFeatures(Format.R32F) & FormatFeatureBit.RENDER_TARGET;'
      }, {
        name: 'COLOR_HALF_FLOAT',
        suggest: 'Please use device.getFormatFeatures() instead, like: \n' + 'let isSupported = device.getFormatFeatures(Format.R16F) & FormatFeatureBit.RENDER_TARGET;'
      }, {
        name: 'TEXTURE_FLOAT',
        suggest: 'Please use device.getFormatFeatures() instead, like: \n' + 'let isSupported = (device.getFormatFeatures(Format.R32F) & (FormatFeatureBit.RENDER_TARGET' + ' | FormatFeatureBit.SAMPLED_TEXTURE)) === (FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE);'
      }, {
        name: 'TEXTURE_HALF_FLOAT',
        suggest: 'Please use device.getFormatFeatures() instead, like: \n' + 'let isSupported = (device.getFormatFeatures(Format.R16F) & (FormatFeatureBit.RENDER_TARGET' + ' | FormatFeatureBit.SAMPLED_TEXTURE)) === (FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE);'
      }, {
        name: 'TEXTURE_FLOAT_LINEAR',
        suggest: 'Please use device.getFormatFeatures() instead, like: \n' + 'let isSupported = device.getFormatFeatures(Format.R32F) & FormatFeatureBit.LINEAR_FILTER;'
      }, {
        name: 'TEXTURE_HALF_FLOAT_LINEAR',
        suggest: 'Please use device.getFormatFeatures() instead, like: \n' + 'let isSupported = device.getFormatFeatures(Format.R16F) & FormatFeatureBit.LINEAR_FILTER;'
      }, {
        name: 'FORMAT_R11G11B10F',
        suggest: 'Please use device.getFormatFeatures() instead, like: \n' + 'let isSupported = device.getFormatFeatures(Format.R11G11B10F) !== FormatFeatureBit.NONE;'
      }, {
        name: 'FORMAT_SRGB',
        suggest: 'Please use device.getFormatFeatures() instead, like: \n' + 'let isSupported = device.getFormatFeatures(Format.SRGB8) !== FormatFeatureBit.NONE;'
      }, {
        name: 'FORMAT_ETC1',
        suggest: 'Please use device.getFormatFeatures() instead, like: \n' + 'let isSupported = device.getFormatFeatures(Format.ETC_RGB8) !== FormatFeatureBit.NONE;'
      }, {
        name: 'FORMAT_ETC2',
        suggest: 'Please use device.getFormatFeatures() instead, like: \n' + 'let isSupported = device.getFormatFeatures(Format.ETC2_RGB8) !== FormatFeatureBit.NONE;'
      }, {
        name: 'FORMAT_DXT',
        suggest: 'Please use device.getFormatFeatures() instead, like: \n' + 'let isSupported = device.getFormatFeatures(Format.BC1) !== FormatFeatureBit.NONE;'
      }, {
        name: 'FORMAT_PVRTC',
        suggest: 'Please use device.getFormatFeatures() instead, like: \n' + 'let isSupported = device.getFormatFeatures(Format.PVRTC_RGB2) !== FormatFeatureBit.NONE;'
      }, {
        name: 'FORMAT_ASTC',
        suggest: 'Please use device.getFormatFeatures() instead, like: \n' + 'let isSupported = device.getFormatFeatures(Format.ASTC_RGBA_4x4) !== FormatFeatureBit.NONE;'
      }, {
        name: 'FORMAT_RGB8',
        suggest: 'Please use device.getFormatFeatures() instead, like: \n' + 'let isSupported = device.getFormatFeatures(Format.RGB8) !== FormatFeatureBit.NONE;'
      }]);
      removeProperty(ColorAttachment.prototype, 'ColorAttachment', [{
        name: 'beginAccesses',
        suggest: 'Please assign to ColorAttachment.barrier instead'
      }, {
        name: 'endAccesses',
        suggest: 'Please assign to ColorAttachment.barrier instead'
      }]);
      removeProperty(DepthStencilAttachment.prototype, 'DepthStencilAttachment', [{
        name: 'beginAccesses',
        suggest: 'Please assign to DepthStencilAttachment.barrier instead'
      }, {
        name: 'endAccesses',
        suggest: 'Please assign to DepthStencilAttachment.barrier instead'
      }]);
      replaceProperty(Device.prototype, 'Device', [{
        name: 'getGlobalBarrier',
        newName: 'getGeneralBarrier'
      }]);

      var LegacyRenderMode;

      (function (LegacyRenderMode) {
        LegacyRenderMode[LegacyRenderMode["AUTO"] = 0] = "AUTO";
        LegacyRenderMode[LegacyRenderMode["CANVAS"] = 1] = "CANVAS";
        LegacyRenderMode[LegacyRenderMode["WEBGL"] = 2] = "WEBGL";
        LegacyRenderMode[LegacyRenderMode["HEADLESS"] = 3] = "HEADLESS";
      })(LegacyRenderMode || (LegacyRenderMode = {}));

      var RenderType;

      (function (RenderType) {
        RenderType[RenderType["UNKNOWN"] = -1] = "UNKNOWN";
        RenderType[RenderType["CANVAS"] = 0] = "CANVAS";
        RenderType[RenderType["WEBGL"] = 1] = "WEBGL";
        RenderType[RenderType["OPENGL"] = 2] = "OPENGL";
        RenderType[RenderType["HEADLESS"] = 3] = "HEADLESS";
      })(RenderType || (RenderType = {}));

      var DeviceManager = function () {
        function DeviceManager() {
          this.initialized = false;
          this._canvas = null;
          this._renderType = RenderType.UNKNOWN;
        }

        var _proto = DeviceManager.prototype;

        _proto.init = function init(canvas, bindingMappingInfo) {
          if (this.initialized) {
            return;
          }

          var renderMode = settings.querySettings(Settings.Category.RENDERING, 'renderMode');
          this._canvas = canvas;
          this._renderType = this._determineRenderType(renderMode);

          if (this._renderType === RenderType.WEBGL) {
            var deviceInfo = new DeviceInfo(bindingMappingInfo);

            {
              var useWebGL2 = !!globalThis.WebGL2RenderingContext;
              var userAgent = globalThis.navigator.userAgent.toLowerCase();

              if (userAgent.indexOf('safari') !== -1 && userAgent.indexOf('chrome') === -1 || sys.browserType === BrowserType.UC) {
                  useWebGL2 = false;
                }

              var deviceCtors = [];

              if (useWebGL2 && legacyCC.WebGL2Device) {
                deviceCtors.push(legacyCC.WebGL2Device);
              }

              if (legacyCC.WebGLDevice) {
                deviceCtors.push(legacyCC.WebGLDevice);
              }

              if (legacyCC.EmptyDevice) {
                deviceCtors.push(legacyCC.EmptyDevice);
              }

              Device.canvas = canvas;

              for (var i = 0; i < deviceCtors.length; i++) {
                this._gfxDevice = new deviceCtors[i]();

                if (this._gfxDevice.initialize(deviceInfo)) {
                  break;
                }
              }

              this._initSwapchain();
            }
          } else if (this._renderType === RenderType.HEADLESS && legacyCC.EmptyDevice) {
            this._gfxDevice = new legacyCC.EmptyDevice();

            this._gfxDevice.initialize(new DeviceInfo(bindingMappingInfo));

            this._initSwapchain();
          }

          if (!this._gfxDevice) {
            error('can not support canvas rendering in 3D');
            this._renderType = RenderType.UNKNOWN;
            return;
          }

          if (this._canvas) {
            this._canvas.oncontextmenu = function () {
              return false;
            };
          }
        };

        _proto._initSwapchain = function _initSwapchain() {
          var swapchainInfo = new SwapchainInfo(1, this._canvas);
          var windowSize = screen.windowSize;
          swapchainInfo.width = windowSize.width;
          swapchainInfo.height = windowSize.height;
          this._swapchain = this._gfxDevice.createSwapchain(swapchainInfo);
        };

        _proto._determineRenderType = function _determineRenderType(renderMode) {
          if (typeof renderMode !== 'number' || renderMode > RenderType.HEADLESS || renderMode < LegacyRenderMode.AUTO) {
            renderMode = LegacyRenderMode.AUTO;
          }

          var renderType = RenderType.CANVAS;
          var supportRender = false;

          if (renderMode === LegacyRenderMode.CANVAS) {
            renderType = RenderType.CANVAS;
            supportRender = true;
          } else if (renderMode === LegacyRenderMode.AUTO || renderMode === LegacyRenderMode.WEBGL) {
            renderType = RenderType.WEBGL;
            supportRender = true;
          } else if (renderMode === LegacyRenderMode.HEADLESS) {
            renderType = RenderType.HEADLESS;
            supportRender = true;
          }

          if (!supportRender) {
            throw new Error(getError(3820, renderMode));
          }

          return renderType;
        };

        _createClass(DeviceManager, [{
          key: "gfxDevice",
          get: function get() {
            return this._gfxDevice;
          }
        }, {
          key: "swapchain",
          get: function get() {
            return this._swapchain;
          }
        }]);

        return DeviceManager;
      }();
      var deviceManager = new DeviceManager();

      var index$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        DescriptorSet: DescriptorSet,
        Buffer: Buffer,
        CommandBuffer: CommandBuffer,
        get ObjectType () { return ObjectType; },
        get Status () { return Status; },
        get API () { return API; },
        get SurfaceTransform () { return SurfaceTransform; },
        get Feature () { return Feature$1; },
        get Format () { return Format; },
        get FormatType () { return FormatType; },
        get Type () { return Type; },
        get BufferUsageBit () { return BufferUsageBit; },
        get BufferFlagBit () { return BufferFlagBit; },
        get MemoryAccessBit () { return MemoryAccessBit; },
        get MemoryUsageBit () { return MemoryUsageBit; },
        get TextureType () { return TextureType; },
        get TextureUsageBit () { return TextureUsageBit; },
        get TextureFlagBit () { return TextureFlagBit; },
        get FormatFeatureBit () { return FormatFeatureBit; },
        get SampleCount () { return SampleCount; },
        get VsyncMode () { return VsyncMode; },
        get Filter () { return Filter; },
        get Address () { return Address; },
        get ComparisonFunc () { return ComparisonFunc; },
        get StencilOp () { return StencilOp; },
        get BlendFactor () { return BlendFactor; },
        get BlendOp () { return BlendOp; },
        get ColorMask () { return ColorMask; },
        get ShaderStageFlagBit () { return ShaderStageFlagBit; },
        get LoadOp () { return LoadOp; },
        get StoreOp () { return StoreOp; },
        get AccessFlagBit () { return AccessFlagBit; },
        get ResolveMode () { return ResolveMode; },
        get PipelineBindPoint () { return PipelineBindPoint; },
        get PrimitiveMode () { return PrimitiveMode; },
        get PolygonMode () { return PolygonMode; },
        get ShadeModel () { return ShadeModel; },
        get CullMode () { return CullMode; },
        get DynamicStateFlagBit () { return DynamicStateFlagBit; },
        get StencilFace () { return StencilFace; },
        get DescriptorType () { return DescriptorType; },
        get QueueType () { return QueueType; },
        get QueryType () { return QueryType; },
        get CommandBufferType () { return CommandBufferType; },
        get ClearFlagBit () { return ClearFlagBit; },
        get BarrierType () { return BarrierType; },
        get PassType () { return PassType; },
        Size: Size$1,
        DeviceCaps: DeviceCaps,
        DeviceOptions: DeviceOptions,
        Offset: Offset,
        Rect: Rect$1,
        Extent: Extent,
        TextureSubresLayers: TextureSubresLayers,
        TextureSubresRange: TextureSubresRange,
        TextureCopy: TextureCopy,
        TextureBlit: TextureBlit,
        BufferTextureCopy: BufferTextureCopy,
        Viewport: Viewport,
        Color: Color$1,
        BindingMappingInfo: BindingMappingInfo,
        SwapchainInfo: SwapchainInfo,
        DeviceInfo: DeviceInfo,
        BufferInfo: BufferInfo,
        BufferViewInfo: BufferViewInfo,
        DrawInfo: DrawInfo,
        DispatchInfo: DispatchInfo,
        IndirectBuffer: IndirectBuffer,
        TextureInfo: TextureInfo,
        TextureViewInfo: TextureViewInfo,
        SamplerInfo: SamplerInfo,
        Uniform: Uniform,
        UniformBlock: UniformBlock,
        UniformSamplerTexture: UniformSamplerTexture,
        UniformSampler: UniformSampler,
        UniformTexture: UniformTexture,
        UniformStorageImage: UniformStorageImage,
        UniformStorageBuffer: UniformStorageBuffer,
        UniformInputAttachment: UniformInputAttachment,
        ShaderStage: ShaderStage,
        Attribute: Attribute,
        ShaderInfo: ShaderInfo,
        InputAssemblerInfo: InputAssemblerInfo,
        ColorAttachment: ColorAttachment,
        DepthStencilAttachment: DepthStencilAttachment,
        SubpassInfo: SubpassInfo,
        SubpassDependency: SubpassDependency,
        RenderPassInfo: RenderPassInfo,
        GeneralBarrierInfo: GeneralBarrierInfo,
        TextureBarrierInfo: TextureBarrierInfo,
        BufferBarrierInfo: BufferBarrierInfo,
        FramebufferInfo: FramebufferInfo,
        DescriptorSetLayoutBinding: DescriptorSetLayoutBinding,
        DescriptorSetLayoutInfo: DescriptorSetLayoutInfo,
        DescriptorSetInfo: DescriptorSetInfo,
        PipelineLayoutInfo: PipelineLayoutInfo,
        InputState: InputState,
        CommandBufferInfo: CommandBufferInfo,
        QueueInfo: QueueInfo,
        QueryPoolInfo: QueryPoolInfo,
        FormatInfo: FormatInfo,
        MemoryStatus: MemoryStatus,
        DynamicStencilStates: DynamicStencilStates,
        DynamicStates: DynamicStates,
        GFXObject: GFXObject,
        get AttributeName () { return AttributeName; },
        FormatInfos: FormatInfos,
        DESCRIPTOR_BUFFER_TYPE: DESCRIPTOR_BUFFER_TYPE,
        DESCRIPTOR_SAMPLER_TYPE: DESCRIPTOR_SAMPLER_TYPE,
        DESCRIPTOR_DYNAMIC_TYPE: DESCRIPTOR_DYNAMIC_TYPE,
        DRAW_INFO_SIZE: DRAW_INFO_SIZE,
        IsPowerOf2: IsPowerOf2,
        FormatSize: FormatSize,
        FormatSurfaceSize: FormatSurfaceSize,
        GetTypeSize: GetTypeSize,
        getTypedArrayConstructor: getTypedArrayConstructor,
        formatAlignment: formatAlignment,
        alignTo: alignTo,
        Device: Device,
        DefaultResource: DefaultResource,
        Swapchain: Swapchain,
        Framebuffer: Framebuffer,
        InputAssembler: InputAssembler,
        DescriptorSetLayout: DescriptorSetLayout,
        PipelineLayout: PipelineLayout,
        RasterizerState: RasterizerState,
        DepthStencilState: DepthStencilState,
        BlendTarget: BlendTarget,
        BlendState: BlendState,
        PipelineStateInfo: PipelineStateInfo,
        PipelineState: PipelineState,
        Queue: Queue,
        RenderPass: RenderPass,
        Sampler: Sampler,
        Shader: Shader,
        Texture: Texture,
        GeneralBarrier: GeneralBarrier,
        TextureBarrier: TextureBarrier,
        get LegacyRenderMode () { return LegacyRenderMode; },
        get RenderType () { return RenderType; },
        DeviceManager: DeviceManager,
        deviceManager: deviceManager
      });
      exports('gfx', index$1);

      var m = new Mat4();
      function fillMeshVertices3D(node, renderer, renderData, color) {
        var chunk = renderData.chunk;
        var dataList = renderData.data;
        var vData = chunk.vb;
        var vertexCount = renderData.vertexCount;
        node.getWorldMatrix(m);
        var vertexOffset = 0;

        for (var i = 0; i < vertexCount; i++) {
          var vert = dataList[i];
          var x = vert.x;
          var y = vert.y;
          var rhw = m.m03 * x + m.m07 * y + m.m15;
          rhw = rhw ? Math.abs(1 / rhw) : 1;
          vData[vertexOffset + 0] = (m.m00 * x + m.m04 * y + m.m12) * rhw;
          vData[vertexOffset + 1] = (m.m01 * x + m.m05 * y + m.m13) * rhw;
          vData[vertexOffset + 2] = (m.m02 * x + m.m06 * y + m.m14) * rhw;
          Color.toArray(vData, color, vertexOffset + 5);
          vertexOffset += 9;
        }

        var bid = chunk.bufferId;
        var vid = chunk.vertexOffset;
        var meshBuffer = chunk.meshBuffer;
        var ib = chunk.meshBuffer.iData;
        var indexOffset = meshBuffer.indexOffset;

        for (var _i = 0, count = vertexCount / 4; _i < count; _i++) {
          var start = vid + _i * 4;
          ib[indexOffset++] = start;
          ib[indexOffset++] = start + 1;
          ib[indexOffset++] = start + 2;
          ib[indexOffset++] = start + 1;
          ib[indexOffset++] = start + 3;
          ib[indexOffset++] = start + 2;
        }

        meshBuffer.indexOffset += renderData.indexCount;
        meshBuffer.setDirty();
      }
      function updateOpacity(renderData, opacity) {
        var vfmt = renderData.vertexFormat;
        var vb = renderData.chunk.vb;
        var attr;
        var format;
        var stride;
        var offset = 0;

        for (var i = 0; i < vfmt.length; ++i) {
          attr = vfmt[i];
          format = FormatInfos[attr.format];

          if (format.hasAlpha) {
            stride = renderData.floatStride;

            if (format.size / format.count === 1) {
              var alpha = ~~clamp(Math.round(opacity * 255), 0, 255);

              for (var color = offset; color < vb.length; color += stride) {
                vb[color] = (vb[color] & 0xffffff00 | alpha) >>> 0;
              }
            } else if (format.size / format.count === 4) {
              for (var _alpha = offset + 3; _alpha < vb.length; _alpha += stride) {
                vb[_alpha] = opacity;
              }
            }
          }

          offset += format.size >> 2;
        }
      }

      var minigame = {};

      var Cache = function () {
        function Cache(map) {
          this._map = null;
          this._count = 0;

          if (map) {
            this._map = map;
            this._count = Object.keys(map).length;
          } else {
            this._map = createMap(true);
            this._count = 0;
          }
        }

        var _proto = Cache.prototype;

        _proto.add = function add(key, val) {
          if (!(key in this._map)) {
            this._count++;
          }

          return this._map[key] = val;
        };

        _proto.get = function get(key) {
          return this._map[key];
        };

        _proto.has = function has(key) {
          return key in this._map;
        };

        _proto.remove = function remove(key) {
          var out = this._map[key];

          if (key in this._map) {
            delete this._map[key];
            this._count--;
          }

          return out;
        };

        _proto.clear = function clear() {
          if (this._count !== 0) {
            this._map = createMap(true);
            this._count = 0;
          }
        };

        _proto.forEach = function forEach(func) {
          for (var _key in this._map) {
            func(this._map[_key], _key);
          }
        };

        _proto.find = function find(predicate) {
          for (var _key2 in this._map) {
            if (predicate(this._map[_key2], _key2)) {
              return this._map[_key2];
            }
          }

          return null;
        };

        _proto.destroy = function destroy() {
          this._map = null;
        };

        _createClass(Cache, [{
          key: "count",
          get: function get() {
            return this._count;
          }
        }]);

        return Cache;
      }();

      var Pipeline = function () {
        function Pipeline(name, funcs) {
          this.id = Pipeline._pipelineId++;
          this.name = '';
          this.pipes = [];
          this.name = name;

          for (var i = 0, l = funcs.length; i < l; i++) {
            this.pipes.push(funcs[i]);
          }
        }

        var _proto = Pipeline.prototype;

        _proto.insert = function insert(func, index) {
          if (index > this.pipes.length) {
            warnID(4921);
            return this;
          }

          this.pipes.splice(index, 0, func);
          return this;
        };

        _proto.append = function append(func) {
          this.pipes.push(func);
          return this;
        };

        _proto.remove = function remove(index) {
          this.pipes.splice(index, 1);
          return this;
        };

        _proto.sync = function sync(task) {
          var pipes = this.pipes;

          if (pipes.length === 0) {
            return null;
          }

          task.isFinished = false;

          for (var i = 0, l = pipes.length; i < l;) {
            var pipe = pipes[i];
            var result = pipe(task);

            if (result) {
              task.isFinished = true;
              return result;
            }

            i++;

            if (i !== l) {
              task.input = task.output;
              task.output = null;
            }
          }

          task.isFinished = true;
          return task.output;
        };

        _proto.async = function async(task) {
          var pipes = this.pipes;

          if (pipes.length === 0) {
            return;
          }

          task.isFinished = false;

          this._flow(0, task);
        };

        _proto._flow = function _flow(index, task) {
          var _this = this;

          var pipe = this.pipes[index];
          pipe(task, function (result) {
            if (result) {
              task.isFinished = true;
              task.dispatch('complete', result);
            } else {
              index++;

              if (index < _this.pipes.length) {
                task.input = task.output;
                task.output = null;

                _this._flow(index, task);
              } else {
                task.isFinished = true;
                task.dispatch('complete', result, task.output);
              }
            }
          });
        };

        return Pipeline;
      }();
      Pipeline._pipelineId = 0;

      var WeakCache = function () {
        function WeakCache(map) {
          this._weakMap = {};
          if (typeof window.WeakRef === 'undefined') throw new Error('this platform does not support WeakRef!');

          if (map) {
            for (var _key in map) {
              this._weakMap[_key] = new WeakRef(map[_key]);
            }
          }
        }

        var _proto = WeakCache.prototype;

        _proto.add = function add(key, val) {
          this._weakMap[key] = new WeakRef(val);
          return val;
        };

        _proto.has = function has(key) {
          return key in this._weakMap && !!this._weakMap[key].deref();
        };

        _proto.get = function get(key) {
          return this._weakMap[key] && this._weakMap[key].deref();
        };

        _proto.remove = function remove(key) {
          var out = this._weakMap[key];
          delete this._weakMap[key];
          return out && out.deref();
        };

        _proto.clear = function clear() {
          this._weakMap = createMap(true);
        };

        _proto.forEach = function forEach(func) {
          for (var _key2 in this._weakMap) {
            var _val = this.get(_key2);

            if (_val) {
              func(_val, _key2);
            }
          }
        };

        _proto.find = function find(predicate) {
          for (var _key3 in this._weakMap) {
            var _val2 = this.get(_key3);

            if (_val2 && predicate(_val2, _key3)) {
              return this._weakMap[_key3].deref();
            }
          }

          return null;
        };

        _proto.destroy = function destroy() {
          this._weakMap = {};
        };

        _createClass(WeakCache, [{
          key: "count",
          get: function get() {
            return Object.values(this._weakMap).filter(function (weakRef) {
              return weakRef.deref();
            }).length;
          }
        }]);

        return WeakCache;
      }();

      var assets =  new Cache();
      var files = new Cache();
      var parsed = new Cache();
      var bundles = new Cache();
      var pipeline = new Pipeline('normal load', []);
      var fetchPipeline = new Pipeline('fetch', []);
      var transformPipeline = new Pipeline('transform url', []);
      var references =  null;
      var assetsOverrideMap = new Map();
      var RequestType;

      (function (RequestType) {
        RequestType["UUID"] = "uuid";
        RequestType["PATH"] = "path";
        RequestType["DIR"] = "dir";
        RequestType["URL"] = "url";
        RequestType["SCENE"] = "scene";
      })(RequestType || (RequestType = {}));

      var presets = {
        "default": {
          priority: 0
        },
        preload: {
          maxConcurrency: 6,
          maxRequestsPerFrame: 2,
          priority: -1
        },
        scene: {
          maxConcurrency: 20,
          maxRequestsPerFrame: 20,
          priority: 1
        },
        bundle: {
          maxConcurrency: 20,
          maxRequestsPerFrame: 20,
          priority: 2
        },
        remote: {
          maxRetryCount: 4
        }
      };
      var BuiltinBundleName;

      (function (BuiltinBundleName) {
        BuiltinBundleName["INTERNAL"] = "internal";
        BuiltinBundleName["RESOURCES"] = "resources";
        BuiltinBundleName["MAIN"] = "main";
        BuiltinBundleName["START_SCENE"] = "start-scene";
      })(BuiltinBundleName || (BuiltinBundleName = {}));

      var Task = function () {
        Task.create = function create(options) {
          var out;

          if (Task._deadPool.length !== 0) {
            out = Task._deadPool.pop();
            out.set(options);
          } else {
            out = new Task(options);
          }

          return out;
        };

        function Task(options) {
          this.id = Task._taskId++;
          this.onComplete = null;
          this.onProgress = null;
          this.onError = null;
          this.source = null;
          this.output = null;
          this.input = null;
          this.progress = null;
          this.options = null;
          this.isFinished = true;
          this.set(options);
        }

        var _proto = Task.prototype;

        _proto.set = function set(options) {
          if (options === void 0) {
            options = Object.create(null);
          }

          this.onComplete = options.onComplete || null;
          this.onProgress = options.onProgress || null;
          this.onError = options.onError || null;
          this.source = this.input = options.input;
          this.output = null;
          this.progress = options.progress;
          this.options = options.options || Object.create(null);
        };

        _proto.dispatch = function dispatch(event, param1, param2, param3, param4) {
          switch (event) {
            case 'complete':
              if (this.onComplete) {
                this.onComplete(param1, param2);
              }

              break;

            case 'progress':
              if (this.onProgress) {
                this.onProgress(param1, param2, param3, param4);
              }

              break;

            case 'error':
              if (this.onError) {
                this.onError(param1, param2, param3, param4);
              }

              break;

            default:
              {
                var str = "on" + event[0].toUpperCase() + event.substr(1);

                if (typeof this[str] === 'function') {
                  this[str](param1, param2, param3, param4);
                }

                break;
              }
          }
        };

        _proto.recycle = function recycle() {
          if (Task._deadPool.length === Task.MAX_DEAD_NUM) {
            return;
          }

          this.onComplete = null;
          this.onProgress = null;
          this.onError = null;
          this.source = this.output = this.input = null;
          this.progress = null;
          this.options = null;

          Task._deadPool.push(this);
        };

        _createClass(Task, [{
          key: "isFinish",
          get: function get() {
            return this.isFinished;
          },
          set: function set(val) {
            this.isFinished = val;
          }
        }]);

        return Task;
      }();

      Task.MAX_DEAD_NUM = 500;
      Task._taskId = 0;
      Task._deadPool = [];

      var separator = '@';
      var HexChars = '0123456789abcdef'.split('');
      var _t = ['', '', '', ''];

      var UuidTemplate = _t.concat(_t, '-', _t, '-', _t, '-', _t, '-', _t, _t, _t);

      var Indices = UuidTemplate.map(function (x, i) {
        return x === '-' ? NaN : i;
      }).filter(Number.isFinite);
      function decodeUuid(base64) {
        var strs = base64.split(separator);
        var uuid = strs[0];

        if (uuid.length !== 22) {
          return base64;
        }

        UuidTemplate[0] = base64[0];
        UuidTemplate[1] = base64[1];

        for (var i = 2, j = 2; i < 22; i += 2) {
          var lhs = BASE64_VALUES[base64.charCodeAt(i)];
          var rhs = BASE64_VALUES[base64.charCodeAt(i + 1)];
          UuidTemplate[Indices[j++]] = HexChars[lhs >> 2];
          UuidTemplate[Indices[j++]] = HexChars[(lhs & 3) << 2 | rhs >> 4];
          UuidTemplate[Indices[j++]] = HexChars[rhs & 0xF];
        }

        return base64.replace(uuid, UuidTemplate.join(''));
      }

      var _uuidRegex = /.*[/\\][0-9a-fA-F]{2}[/\\]([0-9a-fA-F-@]{8,}).*/;
      function getUuidFromURL(url) {
        var matches = _uuidRegex.exec(url);

        if (matches) {
          return matches[1];
        }

        return '';
      }
      function getUrlWithUuid(uuid, options) {
        options = options || Object.create(null);
        options.__isNative__ = options.isNative;

        if (options.nativeExt) {
          options.ext = options.nativeExt;
        }

        var bundle = bundles.find(function (b) {
          return !!b.getAssetInfo(uuid);
        });

        if (bundle) {
          options.bundle = bundle.name;
        }

        return transform(uuid, options);
      }
      function isScene(asset) {
        return !!asset && (asset instanceof legacyCC.SceneAsset || asset instanceof legacyCC.Scene);
      }
      function normalize(url) {
        if (url) {
          if (url.charCodeAt(0) === 46 && url.charCodeAt(1) === 47) {
            url = url.slice(2);
          } else if (url.charCodeAt(0) === 47) {
            url = url.slice(1);
          }
        }

        return url;
      }
      function transform(input, options) {
        var subTask = Task.create({
          input: input,
          options: options
        });
        var urls = [];

        try {
          var result = transformPipeline.sync(subTask);

          for (var _iterator = _createForOfIteratorHelperLoose(result), _step; !(_step = _iterator()).done;) {
            var requestItem = _step.value;
            var url = requestItem.url;
            requestItem.recycle();
            urls.push(url);
          }
        } catch (e) {
          for (var _iterator2 = _createForOfIteratorHelperLoose(subTask.output), _step2; !(_step2 = _iterator2()).done;) {
            var item = _step2.value;
            item.recycle();
          }

          error(e.message, e.stack);
        }

        subTask.recycle();
        return urls.length > 1 ? urls : urls[0];
      }

      var helper = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getUuidFromURL: getUuidFromURL,
        getUrlWithUuid: getUrlWithUuid,
        isScene: isScene,
        normalize: normalize,
        transform: transform,
        decodeUuid: decodeUuid
      });

      var _dec$3, _class$3, _class2$2, _initializer$2;
      var ccclass$1 = ccclass,
          serializable$1 = serializable,
          property$1 = property;
      var Asset = exports('Asset', (_dec$3 = ccclass$1('cc.Asset'), _dec$3(_class$3 = (_class2$2 = function (_Eventify) {
        _inheritsLoose(Asset, _Eventify);

        Asset.deserialize = function deserialize(data) {
          return legacyCC.deserialize(data);
        };

        function Asset() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Eventify.call.apply(_Eventify, [this].concat(args)) || this;
          _this.loaded = true;
          _this._native = _initializer$2 && _initializer$2();
          _this._nativeUrl = '';
          _this._file = null;
          _this._ref = 0;
          Object.defineProperty(_assertThisInitialized(_this), '_uuid', {
            value: '',
            writable: true
          });

          return _this;
        }

        var _proto = Asset.prototype;

        _proto.toString = function toString() {
          return this.nativeUrl;
        };

        _proto.serialize = function serialize() {};

        _proto._setRawAsset = function _setRawAsset(filename, inLibrary) {
          if (inLibrary === void 0) {
            inLibrary = true;
          }

          if (inLibrary !== false) {
            this._native = filename || '';
          } else {
            this._native = "/" + filename;
          }
        };

        _proto.addRef = function addRef() {
          this._ref++;
          return this;
        };

        _proto.decRef = function decRef(autoRelease) {
          if (autoRelease === void 0) {
            autoRelease = true;
          }

          if (this._ref > 0) {
            this._ref--;
          }

          if (autoRelease) {
            legacyCC.assetManager._releaseManager.tryRelease(this);
          }

          return this;
        };

        _proto.onLoaded = function onLoaded() {};

        _proto.initDefault = function initDefault(uuid) {
          if (uuid) {
            this._uuid = uuid;
          }

          this.isDefault = true;
        };

        _proto.validate = function validate() {
          return true;
        };

        _proto.destroy = function destroy() {
          debug(getError(12101, this._uuid));
          return _Eventify.prototype.destroy.call(this);
        };

        _createClass(Asset, [{
          key: "nativeUrl",
          get: function get() {
            if (!this._nativeUrl) {
              if (!this._native) return '';
              var name = this._native;

              if (name.charCodeAt(0) === 47) {
                return name.slice(1);
              }

              if (name.charCodeAt(0) === 46) {
                this._nativeUrl = getUrlWithUuid(this._uuid, {
                  nativeExt: name,
                  isNative: true
                });
              } else {
                this._nativeUrl = getUrlWithUuid(this._uuid, {
                  __nativeName__: name,
                  nativeExt: extname(name),
                  isNative: true
                });
              }
            }

            return this._nativeUrl;
          }
        }, {
          key: "uuid",
          get: function get() {
            return this._uuid;
          }
        }, {
          key: "_nativeAsset",
          get: function get() {
            return this._file;
          },
          set: function set(obj) {
            this._file = obj;
          }
        }, {
          key: "_nativeDep",
          get: function get() {
            if (this._native) {
              return {
                __isNative__: true,
                uuid: this._uuid,
                ext: this._native
              };
            }

            return undefined;
          }
        }, {
          key: "refCount",
          get: function get() {
            return this._ref;
          }
        }]);

        return Asset;
      }(Eventify(CCObject)), (_initializer$2 = applyDecoratedInitializer(_class2$2.prototype, "_native", [serializable$1], function () {
        return '';
      }), _applyDecoratedDescriptor(_class2$2.prototype, "_nativeAsset", [property$1], Object.getOwnPropertyDescriptor(_class2$2.prototype, "_nativeAsset"), _class2$2.prototype)), _class2$2)) || _class$3));
      Asset.prototype.createNode = null;
      legacyCC.Asset = Asset;

      var CUSTOM_PIXEL_FORMAT = 1024;
      var PixelFormat;

      (function (PixelFormat) {
        PixelFormat[PixelFormat["RGB565"] = Format.R5G6B5] = "RGB565";
        PixelFormat[PixelFormat["RGB5A1"] = Format.RGB5A1] = "RGB5A1";
        PixelFormat[PixelFormat["RGBA4444"] = Format.RGBA4] = "RGBA4444";
        PixelFormat[PixelFormat["RGB888"] = Format.RGB8] = "RGB888";
        PixelFormat[PixelFormat["RGB32F"] = Format.RGB32F] = "RGB32F";
        PixelFormat[PixelFormat["RGBA8888"] = Format.RGBA8] = "RGBA8888";
        PixelFormat[PixelFormat["RGBA32F"] = Format.RGBA32F] = "RGBA32F";
        PixelFormat[PixelFormat["A8"] = Format.A8] = "A8";
        PixelFormat[PixelFormat["I8"] = Format.L8] = "I8";
        PixelFormat[PixelFormat["AI8"] = Format.LA8] = "AI8";
        PixelFormat[PixelFormat["RGB_PVRTC_2BPPV1"] = Format.PVRTC_RGB2] = "RGB_PVRTC_2BPPV1";
        PixelFormat[PixelFormat["RGBA_PVRTC_2BPPV1"] = Format.PVRTC_RGBA2] = "RGBA_PVRTC_2BPPV1";
        PixelFormat[PixelFormat["RGB_A_PVRTC_2BPPV1"] = CUSTOM_PIXEL_FORMAT] = "RGB_A_PVRTC_2BPPV1";
        PixelFormat[PixelFormat["RGB_PVRTC_4BPPV1"] = Format.PVRTC_RGB4] = "RGB_PVRTC_4BPPV1";
        PixelFormat[PixelFormat["RGBA_PVRTC_4BPPV1"] = Format.PVRTC_RGBA4] = "RGBA_PVRTC_4BPPV1";
        PixelFormat[PixelFormat["RGB_A_PVRTC_4BPPV1"] = CUSTOM_PIXEL_FORMAT + 1] = "RGB_A_PVRTC_4BPPV1";
        PixelFormat[PixelFormat["RGB_ETC1"] = Format.ETC_RGB8] = "RGB_ETC1";
        PixelFormat[PixelFormat["RGBA_ETC1"] = CUSTOM_PIXEL_FORMAT + 2] = "RGBA_ETC1";
        PixelFormat[PixelFormat["RGB_ETC2"] = Format.ETC2_RGB8] = "RGB_ETC2";
        PixelFormat[PixelFormat["RGBA_ETC2"] = Format.ETC2_RGBA8] = "RGBA_ETC2";
        PixelFormat[PixelFormat["RGBA_ASTC_4x4"] = Format.ASTC_RGBA_4X4] = "RGBA_ASTC_4x4";
        PixelFormat[PixelFormat["RGBA_ASTC_5x4"] = Format.ASTC_RGBA_5X4] = "RGBA_ASTC_5x4";
        PixelFormat[PixelFormat["RGBA_ASTC_5x5"] = Format.ASTC_RGBA_5X5] = "RGBA_ASTC_5x5";
        PixelFormat[PixelFormat["RGBA_ASTC_6x5"] = Format.ASTC_RGBA_6X5] = "RGBA_ASTC_6x5";
        PixelFormat[PixelFormat["RGBA_ASTC_6x6"] = Format.ASTC_RGBA_6X6] = "RGBA_ASTC_6x6";
        PixelFormat[PixelFormat["RGBA_ASTC_8x5"] = Format.ASTC_RGBA_8X5] = "RGBA_ASTC_8x5";
        PixelFormat[PixelFormat["RGBA_ASTC_8x6"] = Format.ASTC_RGBA_8X6] = "RGBA_ASTC_8x6";
        PixelFormat[PixelFormat["RGBA_ASTC_8x8"] = Format.ASTC_RGBA_8X8] = "RGBA_ASTC_8x8";
        PixelFormat[PixelFormat["RGBA_ASTC_10x5"] = Format.ASTC_RGBA_10X5] = "RGBA_ASTC_10x5";
        PixelFormat[PixelFormat["RGBA_ASTC_10x6"] = Format.ASTC_RGBA_10X6] = "RGBA_ASTC_10x6";
        PixelFormat[PixelFormat["RGBA_ASTC_10x8"] = Format.ASTC_RGBA_10X8] = "RGBA_ASTC_10x8";
        PixelFormat[PixelFormat["RGBA_ASTC_10x10"] = Format.ASTC_RGBA_10X10] = "RGBA_ASTC_10x10";
        PixelFormat[PixelFormat["RGBA_ASTC_12x10"] = Format.ASTC_RGBA_12X10] = "RGBA_ASTC_12x10";
        PixelFormat[PixelFormat["RGBA_ASTC_12x12"] = Format.ASTC_RGBA_12X12] = "RGBA_ASTC_12x12";
      })(PixelFormat || (PixelFormat = {}));

      var WrapMode;

      (function (WrapMode) {
        WrapMode[WrapMode["REPEAT"] = Address.WRAP] = "REPEAT";
        WrapMode[WrapMode["CLAMP_TO_EDGE"] = Address.CLAMP] = "CLAMP_TO_EDGE";
        WrapMode[WrapMode["MIRRORED_REPEAT"] = Address.MIRROR] = "MIRRORED_REPEAT";
        WrapMode[WrapMode["CLAMP_TO_BORDER"] = Address.BORDER] = "CLAMP_TO_BORDER";
      })(WrapMode || (WrapMode = {}));

      var Filter$1;

      (function (Filter$1) {
        Filter$1[Filter$1["NONE"] = Filter.NONE] = "NONE";
        Filter$1[Filter$1["LINEAR"] = Filter.LINEAR] = "LINEAR";
        Filter$1[Filter$1["NEAREST"] = Filter.POINT] = "NEAREST";
      })(Filter$1 || (Filter$1 = {}));

      var _dec$4, _class$4, _class2$3, _class3$1, _temp$1;
      var COMPRESSED_HEADER_LENGTH = 4;
      var COMPRESSED_MIPMAP_DATA_SIZE_LENGTH = 4;
      var COMPRESSED_MIPMAP_LEVEL_COUNT_LENGTH = 4;
      var COMPRESSED_MIPMAP_MAGIC = 0x50494d43;
      var compressType = Enum({
        PVR: 0,
        PKM: 1,
        ASTC: 2
      });
      var PVR_HEADER_LENGTH = 13;
      var PVR_MAGIC = 0x03525650;
      var PVR_HEADER_MAGIC = 0;
      var PVR_HEADER_HEIGHT = 6;
      var PVR_HEADER_WIDTH = 7;
      var PVR_HEADER_METADATA = 12;
      var ETC_PKM_HEADER_LENGTH = 16;
      var ETC_PKM_FORMAT_OFFSET = 6;
      var ETC_PKM_WIDTH_OFFSET = 12;
      var ETC_PKM_HEIGHT_OFFSET = 14;
      var ETC1_RGB_NO_MIPMAPS = 0;
      var ETC2_RGB_NO_MIPMAPS = 1;
      var ETC2_RGBA_NO_MIPMAPS = 3;
      var ASTC_MAGIC = 0x5CA1AB13;
      var ASTC_HEADER_LENGTH = 16;
      var ASTC_HEADER_MAGIC = 4;
      var ASTC_HEADER_SIZE_X_BEGIN = 7;
      var ASTC_HEADER_SIZE_Y_BEGIN = 10;

      function getASTCFormat(xdim, ydim) {
        if (xdim === 4) {
          return PixelFormat.RGBA_ASTC_4x4;
        }

        if (xdim === 5) {
          if (ydim === 4) {
            return PixelFormat.RGBA_ASTC_5x4;
          }

          return PixelFormat.RGBA_ASTC_5x5;
        }

        if (xdim === 6) {
          if (ydim === 5) {
            return PixelFormat.RGBA_ASTC_6x5;
          }

          return PixelFormat.RGBA_ASTC_6x6;
        }

        if (xdim === 8) {
          if (ydim === 5) {
            return PixelFormat.RGBA_ASTC_8x5;
          }

          if (ydim === 6) {
            return PixelFormat.RGBA_ASTC_8x6;
          }

          return PixelFormat.RGBA_ASTC_8x8;
        }

        if (xdim === 10) {
          if (ydim === 5) {
            return PixelFormat.RGBA_ASTC_10x5;
          }

          if (ydim === 6) {
            return PixelFormat.RGBA_ASTC_10x6;
          }

          if (ydim === 8) {
            return PixelFormat.RGBA_ASTC_10x8;
          }

          return PixelFormat.RGBA_ASTC_10x10;
        }

        if (ydim === 10) {
          return PixelFormat.RGBA_ASTC_12x10;
        }

        return PixelFormat.RGBA_ASTC_12x12;
      }

      function readBEUint16(header, offset) {
        return header[offset] << 8 | header[offset + 1];
      }

      function isImageBitmap(imageSource) {
        return !!(sys.hasFeature(sys.Feature.IMAGE_BITMAP) && imageSource instanceof ImageBitmap);
      }

      function isNativeImage(imageSource) {

        return imageSource instanceof HTMLImageElement || imageSource instanceof HTMLCanvasElement || isImageBitmap(imageSource);
      }

      var ImageAsset = exports('ImageAsset', (_dec$4 = ccclass('cc.ImageAsset'), _dec$4(_class$4 = (_class2$3 = (_temp$1 = _class3$1 = function (_Asset) {
        _inheritsLoose(ImageAsset, _Asset);

        ImageAsset.mergeCompressedTextureMips = function mergeCompressedTextureMips(files) {
          var out = new Uint8Array(0);
          var err = null;

          try {
            var fileHeaderLength = COMPRESSED_HEADER_LENGTH + COMPRESSED_MIPMAP_LEVEL_COUNT_LENGTH + files.length * COMPRESSED_MIPMAP_DATA_SIZE_LENGTH;
            var fileLength = 0;

            for (var _iterator = _createForOfIteratorHelperLoose(files), _step; !(_step = _iterator()).done;) {
              var _file = _step.value;
              fileLength += _file.byteLength;
            }

            fileLength += fileHeaderLength;
            out = new Uint8Array(fileLength);
            var outView = new DataView(out.buffer, out.byteOffset, out.byteLength);
            outView.setUint32(0, COMPRESSED_MIPMAP_MAGIC, true);
            outView.setUint32(COMPRESSED_HEADER_LENGTH, files.length, true);
            var dataOffset = fileHeaderLength;

            for (var i = 0; i < files.length; i++) {
              var file = files[i];
              outView.setUint32(COMPRESSED_HEADER_LENGTH + COMPRESSED_MIPMAP_LEVEL_COUNT_LENGTH + i * COMPRESSED_MIPMAP_DATA_SIZE_LENGTH, file.byteLength, true);

              if (file instanceof ArrayBuffer) {
                var srcArray = new Uint8Array(file);
                out.set(srcArray, dataOffset);
              } else {
                var _srcArray = new Uint8Array(file.buffer, file.byteOffset, file.byteLength);

                out.set(_srcArray, dataOffset);
              }

              dataOffset += file.byteLength;
            }
          } catch (e) {
            err = e;
            console.warn(err);
          }

          return out;
        };

        ImageAsset.parseCompressedTextures = function parseCompressedTextures(file, type) {
          var out = {
            _data: new Uint8Array(0),
            _compressed: true,
            width: 0,
            height: 0,
            format: 0,
            mipmapLevelDataSize: []
          };
          var buffer = file instanceof ArrayBuffer ? file : file.buffer;
          var bufferView = new DataView(buffer);
          var magicNumber = bufferView.getUint32(0, true);

          if (magicNumber === COMPRESSED_MIPMAP_MAGIC) {
            var mipmapLevelNumber = bufferView.getUint32(COMPRESSED_HEADER_LENGTH, true);
            var mipmapLevelDataSize = bufferView.getUint32(COMPRESSED_HEADER_LENGTH + COMPRESSED_MIPMAP_LEVEL_COUNT_LENGTH, true);
            var fileHeaderByteLength = COMPRESSED_HEADER_LENGTH + COMPRESSED_MIPMAP_LEVEL_COUNT_LENGTH + mipmapLevelNumber * COMPRESSED_MIPMAP_DATA_SIZE_LENGTH;
            ImageAsset.parseCompressedTexture(file, 0, fileHeaderByteLength, mipmapLevelDataSize, type, out);
            var beginOffset = fileHeaderByteLength + mipmapLevelDataSize;

            for (var i = 1; i < mipmapLevelNumber; i++) {
              var endOffset = bufferView.getUint32(COMPRESSED_HEADER_LENGTH + COMPRESSED_MIPMAP_LEVEL_COUNT_LENGTH + i * COMPRESSED_MIPMAP_DATA_SIZE_LENGTH, true);
              ImageAsset.parseCompressedTexture(file, i, beginOffset, endOffset, type, out);
              beginOffset += endOffset;
            }
          } else {
            ImageAsset.parseCompressedTexture(file, 0, 0, 0, type, out);
          }

          return out;
        };

        ImageAsset.parseCompressedTexture = function parseCompressedTexture(file, levelIndex, beginOffset, endOffset, type, out) {
          switch (type) {
            case compressType.PVR:
              ImageAsset.parsePVRTexture(file, levelIndex, beginOffset, endOffset, out);
              break;

            case compressType.PKM:
              ImageAsset.parsePKMTexture(file, levelIndex, beginOffset, endOffset, out);
              break;

            case compressType.ASTC:
              ImageAsset.parseASTCTexture(file, levelIndex, beginOffset, endOffset, out);
              break;
          }
        };

        ImageAsset.parsePVRTexture = function parsePVRTexture(file, levelIndex, beginOffset, endOffset, out) {
          var buffer = file instanceof ArrayBuffer ? file : file.buffer;
          var header = new Int32Array(buffer, beginOffset, PVR_HEADER_LENGTH);

          if (header[PVR_HEADER_MAGIC] === PVR_MAGIC) {
            var byteOffset = beginOffset + header[PVR_HEADER_METADATA] + 52;
            var length = endOffset - header.byteLength;

            if (endOffset > 0) {
              var srcView = new Uint8Array(buffer, byteOffset, length);
              var dstView = new Uint8Array(out._data.byteLength + srcView.byteLength);
              dstView.set(out._data);
              dstView.set(srcView, out._data.byteLength);
              out._data = dstView;
              out.mipmapLevelDataSize[levelIndex] = length;
            } else {
              out._data = new Uint8Array(buffer, byteOffset);
            }

            out.width = levelIndex > 0 ? out.width : header[PVR_HEADER_WIDTH];
            out.height = levelIndex > 0 ? out.height : header[PVR_HEADER_HEIGHT];
          } else if (header[11] === 0x21525650) {
            var _byteOffset = beginOffset + header[0];

            var _length = endOffset - header.byteLength;

            if (endOffset > 0) {
              var _srcView = new Uint8Array(buffer, _byteOffset, _length);

              var _dstView = new Uint8Array(out._data.byteLength + _srcView.byteLength);

              _dstView.set(out._data);

              _dstView.set(_srcView, out._data.byteLength);

              out._data = _dstView;
              out.mipmapLevelDataSize[levelIndex] = _length;
            } else {
              out._data = new Uint8Array(buffer, _byteOffset);
            }

            out.width = levelIndex > 0 ? out.width : header[1];
            out.height = levelIndex > 0 ? out.height : header[2];
          } else {
            throw new Error('Invalid magic number in PVR header');
          }
        };

        ImageAsset.parsePKMTexture = function parsePKMTexture(file, levelIndex, beginOffset, endOffset, out) {
          var buffer = file instanceof ArrayBuffer ? file : file.buffer;
          var header = new Uint8Array(buffer, beginOffset, ETC_PKM_HEADER_LENGTH);
          var format = readBEUint16(header, ETC_PKM_FORMAT_OFFSET);

          if (format !== ETC1_RGB_NO_MIPMAPS && format !== ETC2_RGB_NO_MIPMAPS && format !== ETC2_RGBA_NO_MIPMAPS) {
            throw new Error('Invalid magic number in ETC header');
          }

          var byteOffset = beginOffset + ETC_PKM_HEADER_LENGTH;
          var length = endOffset - ETC_PKM_HEADER_LENGTH;

          if (endOffset > 0) {
            var srcView = new Uint8Array(buffer, byteOffset, length);
            var dstView = new Uint8Array(out._data.byteLength + srcView.byteLength);
            dstView.set(out._data);
            dstView.set(srcView, out._data.byteLength);
            out._data = dstView;
            out.mipmapLevelDataSize[levelIndex] = length;
          } else {
            out._data = new Uint8Array(buffer, byteOffset);
          }

          out.width = levelIndex > 0 ? out.width : readBEUint16(header, ETC_PKM_WIDTH_OFFSET);
          out.height = levelIndex > 0 ? out.height : readBEUint16(header, ETC_PKM_HEIGHT_OFFSET);
        };

        ImageAsset.parseASTCTexture = function parseASTCTexture(file, levelIndex, beginOffset, endOffset, out) {
          var buffer = file instanceof ArrayBuffer ? file : file.buffer;
          var header = new Uint8Array(buffer, beginOffset, ASTC_HEADER_LENGTH);
          var magicval = header[0] + (header[1] << 8) + (header[2] << 16) + (header[3] << 24);

          if (magicval !== ASTC_MAGIC) {
            throw new Error('Invalid magic number in ASTC header');
          }

          var xdim = header[ASTC_HEADER_MAGIC];
          var ydim = header[ASTC_HEADER_MAGIC + 1];
          var zdim = header[ASTC_HEADER_MAGIC + 2];

          if ((xdim < 3 || xdim > 6 || ydim < 3 || ydim > 6 || zdim < 3 || zdim > 6) && (xdim < 4 || xdim === 7 || xdim === 9 || xdim === 11 || xdim > 12 || ydim < 4 || ydim === 7 || ydim === 9 || ydim === 11 || ydim > 12 || zdim !== 1)) {
            throw new Error('Invalid block number in ASTC header');
          }

          var format = getASTCFormat(xdim, ydim);
          var byteOffset = beginOffset + ASTC_HEADER_LENGTH;
          var length = endOffset - ASTC_HEADER_LENGTH;

          if (endOffset > 0) {
            var srcView = new Uint8Array(buffer, byteOffset, length);
            var dstView = new Uint8Array(out._data.byteLength + srcView.byteLength);
            dstView.set(out._data);
            dstView.set(srcView, out._data.byteLength);
            out._data = dstView;
            out.mipmapLevelDataSize[levelIndex] = length;
          } else {
            out._data = new Uint8Array(buffer, byteOffset);
          }

          out.width = levelIndex > 0 ? out.width : header[ASTC_HEADER_SIZE_X_BEGIN] + (header[ASTC_HEADER_SIZE_X_BEGIN + 1] << 8) + (header[ASTC_HEADER_SIZE_X_BEGIN + 2] << 16);
          out.height = levelIndex > 0 ? out.height : header[ASTC_HEADER_SIZE_Y_BEGIN] + (header[ASTC_HEADER_SIZE_Y_BEGIN + 1] << 8) + (header[ASTC_HEADER_SIZE_Y_BEGIN + 2] << 16);
          out.format = format;
        };

        function ImageAsset(nativeAsset) {
          var _this;

          _this = _Asset.call(this) || this;
          _this._nativeData = void 0;
          _this._exportedExts = undefined;
          _this._format = PixelFormat.RGBA8888;
          _this._width = 0;
          _this._height = 0;
          _this._nativeData = {
            _data: null,
            width: 0,
            height: 0,
            format: 0,
            _compressed: false,
            mipmapLevelDataSize: []
          };

          if (nativeAsset !== undefined) {
            _this.reset(nativeAsset);
          }

          return _this;
        }

        var _proto = ImageAsset.prototype;

        _proto.reset = function reset(data) {
          if (isImageBitmap(data)) {
            this._nativeData = data;
          } else if (!(data instanceof HTMLElement)) {
            this._nativeData = data;
            this._format = data.format;
          } else {
            this._nativeData = data;
          }
        };

        _proto.destroy = function destroy() {
          if (this.data && this.data instanceof HTMLImageElement) {
            this.data.src = '';

            this._setRawAsset('');
          } else if (isImageBitmap(this.data)) {
            this.data.close && this.data.close();
          }

          return _Asset.prototype.destroy.call(this);
        };

        _proto._serialize = function _serialize() {
        };

        _proto._deserialize = function _deserialize(data) {
          var fmtStr = '';

          if (typeof data === 'string') {
            fmtStr = data;
          } else {
            this._width = data.w;
            this._height = data.h;
            fmtStr = data.fmt;
          }

          var device = _getGlobalDevice();

          var extensionIDs = fmtStr.split('_');
          var preferedExtensionIndex = Number.MAX_VALUE;
          var format = this._format;
          var ext = '';
          var SupportTextureFormats = macro.SUPPORT_TEXTURE_FORMATS;

          for (var _iterator3 = _createForOfIteratorHelperLoose(extensionIDs), _step3; !(_step3 = _iterator3()).done;) {
            var extensionID = _step3.value;
            var extFormat = extensionID.split('@');
            var i = parseInt(extFormat[0], undefined);
            var tmpExt = ImageAsset.extnames[i] || extFormat[0];
            var index = SupportTextureFormats.indexOf(tmpExt);

            if (index !== -1 && index < preferedExtensionIndex) {
              var fmt = extFormat[1] ? parseInt(extFormat[1]) : this._format;

              if (tmpExt === '.astc' && (!device || !(device.getFormatFeatures(Format.ASTC_RGBA_4X4) & FormatFeatureBit.SAMPLED_TEXTURE))) {
                continue;
              } else if (tmpExt === '.pvr' && (!device || !(device.getFormatFeatures(Format.PVRTC_RGBA4) & FormatFeatureBit.SAMPLED_TEXTURE))) {
                continue;
              } else if ((fmt === PixelFormat.RGB_ETC1 || fmt === PixelFormat.RGBA_ETC1) && (!device || !(device.getFormatFeatures(Format.ETC_RGB8) & FormatFeatureBit.SAMPLED_TEXTURE))) {
                continue;
              } else if ((fmt === PixelFormat.RGB_ETC2 || fmt === PixelFormat.RGBA_ETC2) && (!device || !(device.getFormatFeatures(Format.ETC2_RGB8) & FormatFeatureBit.SAMPLED_TEXTURE))) {
                continue;
              } else if (tmpExt === '.webp' && !sys.hasFeature(sys.Feature.WEBP)) {
                continue;
              }

              preferedExtensionIndex = index;
              ext = tmpExt;
              format = fmt;
            }
          }

          if (ext) {
            this._setRawAsset(ext);

            this._format = format;
          } else {
            warnID(3121);
          }
        };

        _proto.initDefault = function initDefault(uuid) {
          _Asset.prototype.initDefault.call(this, uuid);

          if (!ImageAsset._sharedPlaceHolderCanvas) {
            var canvas = ccwindow.document.createElement('canvas');
            var context = canvas.getContext('2d');
            var l = canvas.width = canvas.height = 2;
            context.fillStyle = '#ff00ff';
            context.fillRect(0, 0, l, l);
            this.reset(canvas);
            ImageAsset._sharedPlaceHolderCanvas = canvas;
          } else {
            this.reset(ImageAsset._sharedPlaceHolderCanvas);
          }
        };

        _proto.validate = function validate() {
          return !!this.data;
        };

        _createClass(ImageAsset, [{
          key: "_nativeAsset",
          get: function get() {
            return this._nativeData;
          },
          set: function set(value) {
            if (!(value instanceof HTMLElement) && !isImageBitmap(value)) {
              value.format = value.format || this._format;
            }

            this.reset(value);
          }
        }, {
          key: "data",
          get: function get() {
            if (this._nativeData && isNativeImage(this._nativeData)) {
              return this._nativeData;
            }

            return this._nativeData && this._nativeData._data;
          }
        }, {
          key: "width",
          get: function get() {
            return this._nativeData.width || this._width;
          }
        }, {
          key: "height",
          get: function get() {
            return this._nativeData.height || this._height;
          }
        }, {
          key: "format",
          get: function get() {
            return this._format;
          }
        }, {
          key: "isCompressed",
          get: function get() {
            return this._format >= PixelFormat.RGB_ETC1 && this._format <= PixelFormat.RGBA_ASTC_12x12 || this._format >= PixelFormat.RGB_A_PVRTC_2BPPV1 && this._format <= PixelFormat.RGBA_ETC1;
          }
        }, {
          key: "mipmapLevelDataSize",
          get: function get() {
            return this._nativeData.mipmapLevelDataSize;
          }
        }, {
          key: "url",
          get: function get() {
            return this.nativeUrl;
          }
        }]);

        return ImageAsset;
      }(Asset), _class3$1.extnames = ['.png', '.jpg', '.jpeg', '.bmp', '.webp', '.pvr', '.pkm', '.astc'], _class3$1._sharedPlaceHolderCanvas = null, _temp$1), (_applyDecoratedDescriptor(_class2$3.prototype, "_nativeAsset", [override], Object.getOwnPropertyDescriptor(_class2$3.prototype, "_nativeAsset"), _class2$3.prototype)), _class2$3)) || _class$4));

      function _getGlobalDevice() {
        return deviceManager.gfxDevice;
      }

      legacyCC.ImageAsset = ImageAsset;

      var _dec$5, _class$5, _class2$4, _initializer$3, _initializer2$2, _initializer3$2, _initializer4$2, _initializer5$1, _initializer6, _initializer7, _initializer8, _class3$2, _temp$2;
      ccenum(Format);
      var idGenerator$1 = new IDGenerator('Tex');
      var TextureBase = (_dec$5 = ccclass('cc.TextureBase'), _dec$5(_class$5 = (_class2$4 = (_temp$2 = _class3$2 = function (_Asset) {
        _inheritsLoose(TextureBase, _Asset);

        function TextureBase() {
          var _this;

          _this = _Asset.call(this) || this;
          _this._format = _initializer$3 && _initializer$3();
          _this._minFilter = _initializer2$2 && _initializer2$2();
          _this._magFilter = _initializer3$2 && _initializer3$2();
          _this._mipFilter = _initializer4$2 && _initializer4$2();
          _this._wrapS = _initializer5$1 && _initializer5$1();
          _this._wrapT = _initializer6 && _initializer6();
          _this._wrapR = _initializer7 && _initializer7();
          _this._anisotropy = _initializer8 && _initializer8();
          _this._width = 1;
          _this._height = 1;
          _this._id = void 0;
          _this._samplerInfo = new SamplerInfo();
          _this._gfxSampler = null;
          _this._gfxDevice = null;
          _this._textureHash = 0;
          _this._id = idGenerator$1.getNewId();
          _this._gfxDevice = _this._getGFXDevice();
          _this._textureHash = murmurhash2_32_gc(_this._id, 666);
          return _this;
        }

        var _proto = TextureBase.prototype;

        _proto.getId = function getId() {
          return this._id;
        };

        _proto.getPixelFormat = function getPixelFormat() {
          return this._format;
        };

        _proto.getAnisotropy = function getAnisotropy() {
          return this._anisotropy;
        };

        _proto.setWrapMode = function setWrapMode(wrapS, wrapT, wrapR) {
          if (wrapR === undefined) wrapR = wrapS;
          this._wrapS = wrapS;
          this._samplerInfo.addressU = wrapS;
          this._wrapT = wrapT;
          this._samplerInfo.addressV = wrapT;
          this._wrapR = wrapR;
          this._samplerInfo.addressW = wrapR;

          if (this._gfxDevice) {
            this._gfxSampler = this._gfxDevice.getSampler(this._samplerInfo);
          }
        };

        _proto.setFilters = function setFilters(minFilter, magFilter) {
          this._minFilter = minFilter;
          this._samplerInfo.minFilter = minFilter;
          this._magFilter = magFilter;
          this._samplerInfo.magFilter = magFilter;

          if (this._gfxDevice) {
            this._gfxSampler = this._gfxDevice.getSampler(this._samplerInfo);
          }
        };

        _proto.setMipFilter = function setMipFilter(mipFilter) {
          this._mipFilter = mipFilter;
          this._samplerInfo.mipFilter = mipFilter;

          if (this._gfxDevice) {
            this._gfxSampler = this._gfxDevice.getSampler(this._samplerInfo);
          }
        };

        _proto.setAnisotropy = function setAnisotropy(anisotropy) {
          this._anisotropy = anisotropy;
          this._samplerInfo.maxAnisotropy = anisotropy;

          if (this._gfxDevice) {
            this._gfxSampler = this._gfxDevice.getSampler(this._samplerInfo);
          }
        };

        _proto.destroy = function destroy() {
          var _cclegacy$director$ro;

          var destroyed = _Asset.prototype.destroy.call(this);

          if (destroyed && (_cclegacy$director$ro = legacyCC.director.root) !== null && _cclegacy$director$ro !== void 0 && _cclegacy$director$ro.batcher2D) {
            legacyCC.director.root.batcher2D._releaseDescriptorSetCache(this._textureHash);
          }

          return destroyed;
        };

        _proto.getHash = function getHash() {
          return this._textureHash;
        };

        _proto.getGFXTexture = function getGFXTexture() {
          return null;
        };

        _proto.getSamplerInfo = function getSamplerInfo() {
          return this._samplerInfo;
        };

        _proto.getGFXSampler = function getGFXSampler() {
          if (!this._gfxSampler) {
            if (this._gfxDevice) {
              this._gfxSampler = this._gfxDevice.getSampler(this._samplerInfo);
            } else {
              errorID(9302);
            }
          }

          return this._gfxSampler;
        };

        _proto._serialize = function _serialize(ctxForExporting) {

          return '';
        };

        _proto._deserialize = function _deserialize(serializedData, handle) {
          var data = serializedData;
          var fields = data.split(',');
          fields.unshift('');

          if (fields.length >= 5) {
            this.setFilters(parseInt(fields[1]), parseInt(fields[2]));
            this.setWrapMode(parseInt(fields[3]), parseInt(fields[4]));
          }

          if (fields.length >= 7) {
            this.setMipFilter(parseInt(fields[5]));
            this.setAnisotropy(parseInt(fields[6]));
          }
        };

        _proto._getGFXDevice = function _getGFXDevice() {
          return deviceManager.gfxDevice;
        };

        _proto._getGFXFormat = function _getGFXFormat() {
          return this._getGFXPixelFormat(this._format);
        };

        _proto._setGFXFormat = function _setGFXFormat(format) {
          this._format = format === undefined ? PixelFormat.RGBA8888 : format;
        };

        _proto._getGFXPixelFormat = function _getGFXPixelFormat(format) {
          if (format === PixelFormat.RGBA_ETC1) {
            format = PixelFormat.RGB_ETC1;
          } else if (format === PixelFormat.RGB_A_PVRTC_4BPPV1) {
            format = PixelFormat.RGB_PVRTC_4BPPV1;
          } else if (format === PixelFormat.RGB_A_PVRTC_2BPPV1) {
            format = PixelFormat.RGB_PVRTC_2BPPV1;
          }

          return format;
        };

        _createClass(TextureBase, [{
          key: "isCompressed",
          get: function get() {
            return this._format >= PixelFormat.RGB_ETC1 && this._format <= PixelFormat.RGBA_ASTC_12x12 || this._format >= PixelFormat.RGB_A_PVRTC_2BPPV1 && this._format <= PixelFormat.RGBA_ETC1;
          }
        }, {
          key: "width",
          get: function get() {
            return this._width;
          }
        }, {
          key: "height",
          get: function get() {
            return this._height;
          }
        }]);

        return TextureBase;
      }(Asset), _class3$2.PixelFormat = PixelFormat, _class3$2.WrapMode = WrapMode, _class3$2.Filter = Filter$1, _temp$2), (_initializer$3 = applyDecoratedInitializer(_class2$4.prototype, "_format", [serializable], function () {
        return PixelFormat.RGBA8888;
      }), _initializer2$2 = applyDecoratedInitializer(_class2$4.prototype, "_minFilter", [serializable], function () {
        return Filter$1.LINEAR;
      }), _initializer3$2 = applyDecoratedInitializer(_class2$4.prototype, "_magFilter", [serializable], function () {
        return Filter$1.LINEAR;
      }), _initializer4$2 = applyDecoratedInitializer(_class2$4.prototype, "_mipFilter", [serializable], function () {
        return Filter$1.NONE;
      }), _initializer5$1 = applyDecoratedInitializer(_class2$4.prototype, "_wrapS", [serializable], function () {
        return WrapMode.REPEAT;
      }), _initializer6 = applyDecoratedInitializer(_class2$4.prototype, "_wrapT", [serializable], function () {
        return WrapMode.REPEAT;
      }), _initializer7 = applyDecoratedInitializer(_class2$4.prototype, "_wrapR", [serializable], function () {
        return WrapMode.REPEAT;
      }), _initializer8 = applyDecoratedInitializer(_class2$4.prototype, "_anisotropy", [serializable], function () {
        return 0;
      })), _class2$4)) || _class$5);
      legacyCC.TextureBase = TextureBase;

      var _dec$6, _class$6, _dec2$1, _class2$5, _dec3, _class3$3;
      var Script = exports('Script', (_dec$6 = ccclass('cc.Script'), _dec$6(_class$6 = function (_Asset) {
        _inheritsLoose(Script, _Asset);

        function Script() {
          return _Asset.apply(this, arguments) || this;
        }

        return Script;
      }(Asset)) || _class$6));
      legacyCC._Script = Script;
      var JavaScript = exports('JavaScript', (_dec2$1 = ccclass('cc.JavaScript'), _dec2$1(_class2$5 = function (_Script) {
        _inheritsLoose(JavaScript, _Script);

        function JavaScript() {
          return _Script.apply(this, arguments) || this;
        }

        return JavaScript;
      }(Script)) || _class2$5));
      legacyCC._JavaScript = JavaScript;
      var TypeScript = exports('TypeScript', (_dec3 = ccclass('cc.TypeScript'), _dec3(_class3$3 = function (_Script2) {
        _inheritsLoose(TypeScript, _Script2);

        function TypeScript() {
          return _Script2.apply(this, arguments) || this;
        }

        return TypeScript;
      }(Script)) || _class3$3));
      legacyCC._TypeScript = TypeScript;

      var _dec$7, _class$7, _class2$6, _initializer$4, _initializer2$3, _initializer3$3, _initializer4$3, _initializer5$2;
      var EventHandler = exports('EventHandler', (_dec$7 = ccclass('cc.ClickEvent'), _dec$7(_class$7 = (_class2$6 = function () {
        function EventHandler() {
          this.target = _initializer$4 && _initializer$4();
          this.component = _initializer2$3 && _initializer2$3();
          this._componentId = _initializer3$3 && _initializer3$3();
          this.handler = _initializer4$3 && _initializer4$3();
          this.customEventData = _initializer5$2 && _initializer5$2();
        }

        EventHandler.emitEvents = function emitEvents(events) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          for (var i = 0, l = events.length; i < l; i++) {
            var event = events[i];

            if (!(event instanceof EventHandler)) {
              continue;
            }

            event.emit(args);
          }
        };

        var _proto = EventHandler.prototype;

        _proto.emit = function emit(params) {
          var target = this.target;

          if (!legacyCC.isValid(target)) {
            return;
          }

          this._genCompIdIfNeeded();

          var compType = legacyCC.js.getClassById(this._componentId);
          var comp = target.getComponent(compType);

          if (!legacyCC.isValid(comp)) {
            return;
          }

          var handler = comp[this.handler];

          if (typeof handler !== 'function') {
            return;
          }

          if (this.customEventData != null && this.customEventData !== '') {
            params = params.slice();
            params.push(this.customEventData);
          }

          handler.apply(comp, params);
        };

        _proto._compName2Id = function _compName2Id(compName) {
          var comp = legacyCC.js.getClassByName(compName);
          return legacyCC.js.getClassId(comp);
        };

        _proto._compId2Name = function _compId2Name(compId) {
          var comp = legacyCC.js.getClassById(compId);
          return legacyCC.js.getClassName(comp);
        };

        _proto._genCompIdIfNeeded = function _genCompIdIfNeeded() {
          if (!this._componentId) {
            this._componentName = this.component;
            this.component = '';
          }
        };

        _createClass(EventHandler, [{
          key: "_componentName",
          get: function get() {
            this._genCompIdIfNeeded();

            return this._compId2Name(this._componentId);
          },
          set: function set(value) {
            this._componentId = this._compName2Id(value);
          }
        }]);

        return EventHandler;
      }(), (_initializer$4 = applyDecoratedInitializer(_class2$6.prototype, "target", [serializable], function () {
        return null;
      }), _initializer2$3 = applyDecoratedInitializer(_class2$6.prototype, "component", [serializable], function () {
        return '';
      }), _initializer3$3 = applyDecoratedInitializer(_class2$6.prototype, "_componentId", [serializable], function () {
        return '';
      }), _initializer4$3 = applyDecoratedInitializer(_class2$6.prototype, "handler", [serializable], function () {
        return '';
      }), _initializer5$2 = applyDecoratedInitializer(_class2$6.prototype, "customEventData", [serializable], function () {
        return '';
      })), _class2$6)) || _class$7));

      var _dec$8, _dec2$2, _class$8, _class2$7, _initializer$5, _initializer2$4, _initializer3$4, _class3$4, _temp$3;
      var idGenerator$2 = new IDGenerator('Comp');
      var IsOnLoadCalled$1 = CCObject.Flags.IsOnLoadCalled;
      var NullNode = null;
      var Component = exports('Component', (_dec$8 = ccclass('cc.Component'), _dec2$2 = type(Script), _dec$8(_class$8 = (_class2$7 = (_temp$3 = _class3$4 = function (_CCObject) {
        _inheritsLoose(Component, _CCObject);

        function Component() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _CCObject.call.apply(_CCObject, [this].concat(args)) || this;
          _this.node = _initializer$5 && _initializer$5();
          _this._enabled = _initializer2$4 && _initializer2$4();
          _this.__prefab = _initializer3$4 && _initializer3$4();
          _this._sceneGetter = null;
          _this._id = idGenerator$2.getNewId();
          return _this;
        }

        var _proto = Component.prototype;

        _proto._getRenderScene = function _getRenderScene() {
          if (this._sceneGetter) {
            return this._sceneGetter();
          }

          return this.node.scene.renderScene;
        };

        _proto.addComponent = function addComponent(typeOrClassName) {
          return this.node.addComponent(typeOrClassName);
        };

        _proto.getComponent = function getComponent(typeOrClassName) {
          return this.node.getComponent(typeOrClassName);
        };

        _proto.getComponents = function getComponents(typeOrClassName) {
          return this.node.getComponents(typeOrClassName);
        };

        _proto.getComponentInChildren = function getComponentInChildren(typeOrClassName) {
          return this.node.getComponentInChildren(typeOrClassName);
        };

        _proto.getComponentsInChildren = function getComponentsInChildren(typeOrClassName) {
          return this.node.getComponentsInChildren(typeOrClassName);
        };

        _proto.destroy = function destroy() {

          if (_CCObject.prototype.destroy.call(this)) {
            if (this._enabled && this.node.activeInHierarchy) {
              legacyCC.director._compScheduler.disableComp(this);
            }

            return true;
          }

          return false;
        };

        _proto._onPreDestroy = function _onPreDestroy() {
          this.unscheduleAllCallbacks();

          legacyCC.director._nodeActivator.destroyComp(this);

          this.node._removeComponent(this);
        };

        _proto._instantiate = function _instantiate(cloned) {
          if (!cloned) {
            cloned = legacyCC.instantiate._clone(this, this);
          }

          if (cloned) {
            cloned.node = NullNode;
          }

          return cloned;
        };

        _proto.schedule = function schedule(callback, interval, repeat, delay) {
          if (interval === void 0) {
            interval = 0;
          }

          if (repeat === void 0) {
            repeat = legacyCC.macro.REPEAT_FOREVER;
          }

          if (delay === void 0) {
            delay = 0;
          }

          assertID(callback, 1619);
          interval = interval || 0;
          assertID(interval >= 0, 1620);
          repeat = Number.isNaN(repeat) ? legacyCC.macro.REPEAT_FOREVER : repeat;
          delay = delay || 0;
          var scheduler = legacyCC.director.getScheduler();
          var paused = scheduler.isTargetPaused(this);
          scheduler.schedule(callback, this, interval, repeat, delay, paused);
        };

        _proto.scheduleOnce = function scheduleOnce(callback, delay) {
          if (delay === void 0) {
            delay = 0;
          }

          this.schedule(callback, 0, 0, delay);
        };

        _proto.unschedule = function unschedule(callback_fn) {
          if (!callback_fn) {
            return;
          }

          legacyCC.director.getScheduler().unschedule(callback_fn, this);
        };

        _proto.unscheduleAllCallbacks = function unscheduleAllCallbacks() {
          legacyCC.director.getScheduler().unscheduleAllForTarget(this);
        };

        _createClass(Component, [{
          key: "name",
          get: function get() {
            if (this._name) {
              return this._name;
            }

            var className = getClassName(this);
            var trimLeft = className.lastIndexOf('.');

            if (trimLeft >= 0) {
              className = className.slice(trimLeft + 1);
            }

            if (this.node) {
              return this.node.name + "<" + className + ">";
            } else {
              return className;
            }
          },
          set: function set(value) {
            this._name = value;
          }
        }, {
          key: "uuid",
          get: function get() {
            return this._id;
          }
        }, {
          key: "__scriptAsset",
          get: function get() {
            return null;
          }
        }, {
          key: "enabled",
          get: function get() {
            return this._enabled;
          },
          set: function set(value) {
            if (this._enabled !== value) {
              this._enabled = value;

              if (this.node.activeInHierarchy) {
                var compScheduler = legacyCC.director._compScheduler;

                if (value) {
                  compScheduler.enableComp(this);
                } else {
                  compScheduler.disableComp(this);
                }
              }
            }
          }
        }, {
          key: "enabledInHierarchy",
          get: function get() {
            return this._enabled && this.node && this.node.activeInHierarchy;
          }
        }, {
          key: "_isOnLoadCalled",
          get: function get() {
            return this._objFlags & IsOnLoadCalled$1;
          }
        }]);

        return Component;
      }(CCObject), _class3$4.EventHandler = EventHandler, _class3$4.system = null, _temp$3), (_applyDecoratedDescriptor(_class2$7.prototype, "__scriptAsset", [_dec2$2], Object.getOwnPropertyDescriptor(_class2$7.prototype, "__scriptAsset"), _class2$7.prototype), _initializer$5 = applyDecoratedInitializer(_class2$7.prototype, "node", [serializable], function () {
        return NullNode;
      }), _initializer2$4 = applyDecoratedInitializer(_class2$7.prototype, "_enabled", [serializable], function () {
        return true;
      }), _initializer3$4 = applyDecoratedInitializer(_class2$7.prototype, "__prefab", [serializable], function () {
        return null;
      })), _class2$7)) || _class$8));
      var proto = Component.prototype;
      proto.update = null;
      proto.lateUpdate = null;
      proto.__preload = null;
      proto.onLoad = null;
      proto.start = null;
      proto.onEnable = null;
      proto.onDisable = null;
      proto.onDestroy = null;
      proto.onFocusInEditor = null;
      proto.onLostFocusInEditor = null;
      proto.resetInEditor = null;
      proto._getLocalBounds = null;
      proto.onRestore = null;
      Component._requireComponent = null;
      Component._executionOrder = 0;

      value(Component, '_registerEditorProps', function (cls, props) {
        var reqComp = props.requireComponent;

        if (reqComp) {
          if (Array.isArray(reqComp)) {
            reqComp = reqComp.filter(Boolean);
          }

          cls._requireComponent = reqComp;
        }

        var order = props.executionOrder;

        if (order && typeof order === 'number') {
          cls._executionOrder = order;
        }
      });
      legacyCC.Component = Component;

      var _dec$9, _class$9, _class2$8, _initializer$6;
      var MissingScript = exports('MissingScript', (_dec$9 = ccclass('cc.MissingScript'), _dec$9(_class$9 = (_class2$8 = function (_Component) {
        _inheritsLoose(MissingScript, _Component);

        MissingScript.safeFindClass = function safeFindClass(id) {
          var cls = getClassById(id);

          if (cls) {
            return cls;
          }

          legacyCC.deserialize.reportMissingClass(id);
          return undefined;
        };

        function MissingScript() {
          var _this;

          _this = _Component.call(this) || this;
          _this._$erialized = _initializer$6 && _initializer$6();
          return _this;
        }

        var _proto = MissingScript.prototype;

        _proto.onLoad = function onLoad() {
          warnID(4600, this.node.name);
        };

        return MissingScript;
      }(Component), (_initializer$6 = applyDecoratedInitializer(_class2$8.prototype, "_$erialized", [serializable, editorOnly], function () {
        return null;
      })), _class2$8)) || _class$9));
      legacyCC._MissingScript = MissingScript;

      try {
        var props = MissingScript.__values__;

        if (props.length === 0 || props[props.length - 1] !== '_$erialized') {
          error("The '_$erialized' prop in MissingScript is missing. Please contact jare.");
          error("    Error props: ['" + props + "']");
        }
      } catch (e) {
        error("Error when checking MissingScript 5, " + e);
      }

      var VERSION = 1;
      var MAGIC = 0x4E4F4343;
      var CHUNK_ALIGN_AS = 8;
      var CCON = function () {
        function CCON(document, chunks) {
          this._document = void 0;
          this._chunks = void 0;
          this._document = document;
          this._chunks = chunks;
        }

        _createClass(CCON, [{
          key: "document",
          get: function get() {
            return this._document;
          }
        }, {
          key: "chunks",
          get: function get() {
            return this._chunks;
          }
        }]);

        return CCON;
      }();
      function parseCCONJson(json) {
        var cconPreface = json;
        return {
          chunks: cconPreface.chunks,
          document: cconPreface.document
        };
      }
      function decodeCCONBinary(bytes) {
        if (bytes.length < 16) {
          throw new InvalidCCONError(getError(13102));
        }

        var dataView = new DataView(bytes.buffer, bytes.byteOffset, bytes.byteLength);
        var magic = dataView.getUint32(0, true);

        if (magic !== MAGIC) {
          throw new InvalidCCONError(getError(13100));
        }

        var version = dataView.getUint32(4, true);

        if (version !== VERSION) {
          throw new InvalidCCONError(getError(13101, version));
        }

        var dataByteLength = dataView.getUint32(8, true);

        if (dataByteLength !== dataView.byteLength) {
          throw new InvalidCCONError(getError(13102));
        }

        var chunksStart = 12;
        var jsonDataLength = dataView.getUint32(chunksStart, true);
        chunksStart += 4;
        var jsonData = new Uint8Array(dataView.buffer, chunksStart + dataView.byteOffset, jsonDataLength);
        chunksStart += jsonDataLength;
        var jsonString = decodeJson(jsonData);
        var json;

        try {
          json = JSON.parse(jsonString);
        } catch (err) {
          throw new InvalidCCONError(err);
        }

        var chunks = [];

        while (chunksStart < dataView.byteLength) {
          if (chunksStart % CHUNK_ALIGN_AS !== 0) {
            var padding = CHUNK_ALIGN_AS - chunksStart % CHUNK_ALIGN_AS;
            chunksStart += padding;
          }

          var chunkDataLength = dataView.getUint32(chunksStart, true);
          chunksStart += 4;
          chunks.push(new Uint8Array(dataView.buffer, chunksStart + dataView.byteOffset, chunkDataLength));
          chunksStart += chunkDataLength;
        }

        if (chunksStart !== dataView.byteLength) {
          throw new InvalidCCONError(getError(13102));
        }

        return new CCON(json, chunks);
      }

      function decodeJson(data) {
        if (typeof TextDecoder !== 'undefined') {
          return new TextDecoder().decode(data);
        } else if ('Buffer' in globalThis) {
          var _ref2 = globalThis,
              _Buffer2 = _ref2.Buffer;
          return _Buffer2.from(data.buffer, data.byteOffset, data.byteLength).toString();
        } else {
          throw new Error(getError(13104));
        }
      }

      var InvalidCCONError = function (_Error) {
        _inheritsLoose(InvalidCCONError, _Error);

        function InvalidCCONError() {
          return _Error.apply(this, arguments) || this;
        }

        return InvalidCCONError;
      }(_wrapNativeSuper(Error));
      var BufferBuilder = function () {
        function BufferBuilder() {
          this._viewOrPaddings = [];
          this._length = 0;
        }

        var _proto = BufferBuilder.prototype;

        _proto.alignAs = function alignAs(align) {
          if (align !== 0) {
            var remainder = this._length % align;

            if (remainder !== 0) {
              var padding = align - remainder;

              this._viewOrPaddings.push(padding);

              this._length += padding;
              return padding;
            }
          }

          return 0;
        };

        _proto.append = function append(view) {
          var result = this._length;

          this._viewOrPaddings.push(view);

          this._length += view.byteLength;
          return result;
        };

        _proto.get = function get() {
          var result = new Uint8Array(this._length);
          var counter = 0;

          this._viewOrPaddings.forEach(function (viewOrPadding) {
            if (typeof viewOrPadding === 'number') {
              counter += viewOrPadding;
            } else {
              result.set(new Uint8Array(viewOrPadding.buffer, viewOrPadding.byteOffset, viewOrPadding.byteLength), counter);
              counter += viewOrPadding.byteLength;
            }
          });

          return result;
        };

        _createClass(BufferBuilder, [{
          key: "byteLength",
          get: function get() {
            return this._length;
          }
        }]);

        return BufferBuilder;
      }();
      legacyCC.internal.parseCCONJson = parseCCONJson;
      legacyCC.internal.decodeCCONBinary = decodeCCONBinary;
      legacyCC.internal.CCON = CCON;

      function compileObjectTypeJit(sources, defaultValue, accessorToSet, propNameLiteralToSet, assumeHavePropIfIsValue) {
        if (defaultValue instanceof legacyCC.ValueType) {
          if (!assumeHavePropIfIsValue) {
            sources.push('if(prop){');
          }

          var ctorCode = getClassName(defaultValue);
          sources.push("s._deserializeFastDefinedObject(o" + accessorToSet + ",prop," + ctorCode + ");");

          if (!assumeHavePropIfIsValue) {
            sources.push("}else o" + accessorToSet + "=null;");
          }
        } else {
          sources.push("\nif (prop) {\n    s._deserializeAndAssignField(o, prop, " + propNameLiteralToSet + ");\n} else {\n    o" + accessorToSet + "=null;\n}\n");
        }
      }

      var compileDeserialize =  compileDeserializeJIT ;
      var DELIMITER = CCClass.Attr.DELIMETER;
      var POSTFIX_TYPE = DELIMITER + "type";
      var POSTFIX_DEFAULT = DELIMITER + "default";
      var POSTFIX_FORMERLY_SERIALIZED_AS = DELIMITER + "formerlySerializedAs";

      function compileDeserializeJIT(self, klass) {
        var attrs = CCClass.Attr.getClassAttrs(klass);
        var props = klass.__values__;
        var sources = ['var prop;'];
        var fastMode = BUILTIN_CLASSID_RE.test(getClassId(klass));

        for (var p = 0; p < props.length; p++) {
          var propName = props[p];

          var accessorToSet = void 0;
          var propNameLiteralToSet = void 0;

          if (CCClass.IDENTIFIER_RE.test(propName)) {
            propNameLiteralToSet = "\"" + propName + "\"";
            accessorToSet = "." + propName;
          } else {
            propNameLiteralToSet = CCClass.escapeForJS(propName);
            accessorToSet = "[" + propNameLiteralToSet + "]";
          }

          var accessorToGet = accessorToSet;

          if (attrs[propName + POSTFIX_FORMERLY_SERIALIZED_AS]) {
            var propNameToRead = attrs[propName + POSTFIX_FORMERLY_SERIALIZED_AS];

            if (CCClass.IDENTIFIER_RE.test(propNameToRead)) {
              accessorToGet = "." + propNameToRead;
            } else {
              accessorToGet = "[" + CCClass.escapeForJS(propNameToRead) + "]";
            }
          }

          sources.push("prop=d" + accessorToGet + ";");
          sources.push("if(typeof " + ( 'prop') + "!==\"undefined\"){");
          var defaultValue = CCClass.getDefault(attrs[propName + POSTFIX_DEFAULT]);
          var userType = attrs[propName + POSTFIX_TYPE];

          if (fastMode && (defaultValue !== undefined || userType)) {
            var isPrimitiveType = void 0;

            if (defaultValue === undefined) {
              isPrimitiveType = userType instanceof CCClass.Attr.PrimitiveType || userType === ENUM_TAG || userType === BITMASK_TAG;
            } else {
              var defaultType = typeof defaultValue;
              isPrimitiveType = defaultType === 'string' || defaultType === 'number' || defaultType === 'boolean';
            }

            if (isPrimitiveType) {
              sources.push("o" + accessorToSet + "=prop;");
            } else {
              compileObjectTypeJit(sources, defaultValue, accessorToSet, propNameLiteralToSet, true);
            }
          } else {
            sources.push("" + ("if(typeof " + ( 'prop') + "!==\"object\"){" + 'o') + accessorToSet + "=prop;" + "}else{");
            compileObjectTypeJit(sources, defaultValue, accessorToSet, propNameLiteralToSet, false);
            sources.push('}');
          }

          sources.push('}');
        }

        if (isChildClassOf(klass, legacyCC.Node) || isChildClassOf(klass, legacyCC.Component)) {
          {
            sources.push('d._id&&(o._id=d._id);');
          }
        }

        if (props[props.length - 1] === '_$erialized') {
          sources.push('o._$erialized=JSON.parse(JSON.stringify(d));');
          sources.push('s._fillPlainObject(o._$erialized,d);');
        }

        return Function('s', 'o', 'd', 'k', sources.join(''));
      }

      var DeserializerPool = function (_js$Pool) {
        _inheritsLoose(DeserializerPool, _js$Pool);

        function DeserializerPool() {
          return _js$Pool.call(this, function (deserializer) {
            deserializer.clear();
          }, 1) || this;
        }

        var _proto = DeserializerPool.prototype;

        _proto.get = function get(details, classFinder, reportMissingClass, customEnv, ignoreEditorOnly) {
          var cache = this._get();

          if (cache) {
            cache.reset(details, classFinder, reportMissingClass, customEnv, ignoreEditorOnly);
            return cache;
          } else {
            return new _Deserializer(details, classFinder, reportMissingClass, customEnv, ignoreEditorOnly);
          }
        };

        return DeserializerPool;
      }(Pool);

      var _Deserializer = function () {
        function _Deserializer(result, classFinder, reportMissingClass, customEnv, ignoreEditorOnly) {
          this.deserializedList = void 0;
          this.deserializedData = void 0;
          this._ignoreEditorOnly = void 0;
          this.result = result;
          this.customEnv = customEnv;
          this.deserializedList = [];
          this.deserializedData = null;
          this._classFinder = classFinder;
          this._reportMissingClass = reportMissingClass;
          this._onDereferenced = classFinder === null || classFinder === void 0 ? void 0 : classFinder.onDereferenced;
        }

        var _proto2 = _Deserializer.prototype;

        _proto2.reset = function reset(result, classFinder, reportMissingClass, customEnv, ignoreEditorOnly) {
          this.result = result;
          this.customEnv = customEnv;
          this._classFinder = classFinder;
          this._reportMissingClass = reportMissingClass;
          this._onDereferenced = classFinder === null || classFinder === void 0 ? void 0 : classFinder.onDereferenced;
        };

        _proto2.clear = function clear() {
          this.result = null;
          this.customEnv = null;
          this.deserializedList.length = 0;
          this.deserializedData = null;
          this._classFinder = null;
          this._reportMissingClass = null;
          this._onDereferenced = null;
        };

        _proto2.deserialize = function deserialize(serializedData) {
          var fromCCON = false;
          var jsonObj;

          if (serializedData instanceof CCON) {
            fromCCON = true;
            jsonObj = serializedData.document;

            if (serializedData.chunks.length > 0) {
              assertIsTrue(serializedData.chunks.length === 1);
              this._mainBinChunk = serializedData.chunks[0];
            }
          } else {
            jsonObj = serializedData;
          }

          this._serializedData = jsonObj;
          this._context = {
            fromCCON: fromCCON
          };
          var serializedRootObject = Array.isArray(jsonObj) ? jsonObj[0] : jsonObj;

          {
            this.deserializedData = this._deserializeObject(serializedRootObject, 0);
          }

          this._serializedData = undefined;
          this._mainBinChunk = undefined;
          this._context = undefined;
          return this.deserializedData;
        };

        _proto2._deserializeObject = function _deserializeObject(serialized, globalIndex, owner, propName) {
          switch (serialized.__type__) {
            case 'TypedArray':
              return this._deserializeTypedArrayView(serialized);

            case 'TypedArrayRef':
              return this._deserializeTypedArrayViewRef(serialized);

            default:
              if (serialized.__type__) {
                return this._deserializeTypeTaggedObject(serialized, globalIndex, owner, propName);
              } else if (!Array.isArray(serialized)) {
                return this._deserializePlainObject(serialized);
              } else {
                return this._deserializeArray(serialized);
              }

          }
        };

        _proto2._deserializeTypedArrayView = function _deserializeTypedArrayView(value) {
          return globalThis[value.ctor].from(value.array);
        };

        _proto2._deserializeTypedArrayViewRef = function _deserializeTypedArrayViewRef(value) {
          var offset = value.offset,
              length = value.length,
              constructorName = value.ctor;
          var obj = new globalThis[constructorName](this._mainBinChunk.buffer, this._mainBinChunk.byteOffset + offset, length);
          return obj;
        };

        _proto2._deserializeArray = function _deserializeArray(value) {
          var obj = new Array(value.length);
          var prop;

          for (var i = 0; i < value.length; i++) {
            prop = value[i];

            if (typeof prop === 'object' && prop) {
              var isAssetType = this._deserializeAndAssignField(obj, prop, "" + i);

              if (isAssetType) {
                obj[i] = null;
              }
            } else {
              obj[i] = prop;
            }
          }

          return obj;
        };

        _proto2._deserializePlainObject = function _deserializePlainObject(value) {
          var obj = {};

          this._fillPlainObject(obj, value);

          return obj;
        };

        _proto2._deserializeTypeTaggedObject = function _deserializeTypeTaggedObject(value, globalIndex, owner, propName) {
          var _this = this;

          var type = value.__type__;

          var klass = this._classFinder(type, value, owner, propName);

          if (!klass) {
            var notReported = this._classFinder === getClassById;

            if (notReported) {
              this._reportMissingClass(type);
            }

            return null;
          }

          var createObject = function createObject(constructor) {
            var obj = new constructor();

            if (globalIndex >= 0) {
              _this.deserializedList[globalIndex] = obj;
            }

            return obj;
          };

          {
            var obj = createObject(klass);

            this._deserializeInto(value, obj, klass);

            return obj;
          }
        };

        _proto2._deserializeInto = function _deserializeInto(value, object, constructor, skipCustomized) {
          if (skipCustomized === void 0) {
            skipCustomized = false;
          }

          if (!skipCustomized && object[deserializeTag]) {
            this._runCustomizedDeserialize(value, object, constructor);

            return;
          }

          if (object._deserialize) {
            object._deserialize(value.content, this);

            return;
          }

          if (legacyCC.Class._isCCClass(constructor)) {
            this._deserializeFireClass(object, value, constructor);
          } else {
            this._deserializeFastDefinedObject(object, value, constructor);
          }
        };

        _proto2._runCustomizedDeserialize = function _runCustomizedDeserialize(value, object, constructor) {
          var _this2 = this;

          var serializationInput = {
            readProperty: function readProperty(name) {
              var serializedField = value[name];

              if (typeof serializedField !== 'object' || !serializedField) {
                return serializedField;
              } else {
                return _this2._deserializeObjectField(serializedField);
              }
            },
            readThis: function readThis() {
              _this2._deserializeInto(value, object, constructor, true);
            },
            readSuper: function readSuper() {
              var superConstructor = getSuper(constructor);

              if (superConstructor) {
                _this2._deserializeInto(value, object, superConstructor);
              }
            }
          };
          object[deserializeTag](serializationInput, this._context);
        };

        _proto2._deserializeFireClass = function _deserializeFireClass(obj, serialized, klass) {
          var deserialize;

          if (klass.hasOwnProperty('__deserialize__')) {
            deserialize = klass.__deserialize__;
          } else {
            deserialize = compileDeserialize(this, klass);

            try {
              if (klass === MissingScript) {
                var props = klass.__values__;

                if (props.length === 0 || props[props.length - 1] !== '_$erialized') {
                  error("The '_$erialized' prop of MissingScript is missing. Will force the raw data to be save.");
                  error("    Error props: ['" + props + "']. Please contact jare.");
                }

                var rawDeserialize = deserialize;

                deserialize = function deserialize(deserializer, object, deserialized, constructor) {
                  rawDeserialize(deserializer, object, deserialized, constructor);

                  if (!object._$erialized) {
                    error("Unable to stash previously serialized data. " + JSON.stringify(deserialized));
                  }
                };
              }
            } catch (e) {
              error("Error when checking MissingScript 6, " + e);
            }

            value(klass, '__deserialize__', deserialize, true);
          }

          deserialize(this, obj, serialized, klass);
        };

        _proto2._deserializeAndAssignField = function _deserializeAndAssignField(obj, serializedField, propName) {
          var id = serializedField.__id__;

          if (typeof id === 'number') {
            var field = this.deserializedList[id];

            if (field) {
              obj[propName] = field;
            } else {
              var _this$_onDereferenced;

              var source = this._serializedData[id];

              {
                obj[propName] = this._deserializeObject(source, id, undefined, propName);
              }

              (_this$_onDereferenced = this._onDereferenced) === null || _this$_onDereferenced === void 0 ? void 0 : _this$_onDereferenced.call(this, this.deserializedList, id, obj, propName);
            }
          } else {
            var uuid = serializedField.__uuid__;

            if (uuid) {
              var expectedType = serializedField.__expectedType__;
              this.result.push(obj, propName, uuid, expectedType);
            } else {
              obj[propName] = this._deserializeObject(serializedField, -1);
            }
          }

          return false;
        };

        _proto2._deserializeObjectField = function _deserializeObjectField(serializedField) {
          var id = serializedField.__id__;

          if (typeof id === 'number') {
            var field = this.deserializedList[id];

            if (field) {
              return field;
            } else {
              var source = this._serializedData[id];

              var _field = this._deserializeObject(source, id, undefined, undefined);

              return _field;
            }
          } else {
            var uuid = serializedField.__uuid__;

            if (uuid) {
              var _expectedType = serializedField.__expectedType__;
              throw new Error("Asset reference field serialization is currently not supported in custom serialization.");
            } else {
              return this._deserializeObject(serializedField, -1);
            }
          }
        };

        _proto2._fillPlainObject = function _fillPlainObject(instance, serialized) {
          for (var propName in serialized) {
            if (!serialized.hasOwnProperty(propName)) {
              continue;
            }

            var prop = serialized[propName];

            if (typeof prop !== 'object') {
              if (propName !== '__type__') {
                  instance[propName] = prop;
                }
            } else if (prop) {
              var isAssetType = this._deserializeAndAssignField(instance, prop, propName);

              if (isAssetType) {
                instance[propName] = null;
              }
            } else {
              instance[propName] = null;
            }
          }
        };

        _proto2._deserializeFastDefinedObject = function _deserializeFastDefinedObject(instance, serialized, klass) {
          if (klass === legacyCC.Vec2) {
            instance.x = serialized.x || 0;
            instance.y = serialized.y || 0;
            return;
          } else if (klass === legacyCC.Vec3) {
            instance.x = serialized.x || 0;
            instance.y = serialized.y || 0;
            instance.z = serialized.z || 0;
            return;
          } else if (klass === legacyCC.Color) {
            instance.r = serialized.r || 0;
            instance.g = serialized.g || 0;
            instance.b = serialized.b || 0;
            var a = serialized.a;
            instance.a = a === undefined ? 255 : a;
            return;
          } else if (klass === legacyCC.Size) {
            instance.width = serialized.width || 0;
            instance.height = serialized.height || 0;
            return;
          }

          var attrs = CCClass.Attr.getClassAttrs(klass);
          var props = klass.__values__;

          if ( !props) {
            error("Unable to deserialize " + getClassName(klass) + ". " + 'For non-CCClass types, they can only be marked as serializable by `CCClass.fastDefine`.');
          }

          for (var i = 0; i < props.length; i++) {
            var propName = props[i];
            var value = serialized[propName];
            var exists = value !== undefined || serialized.hasOwnProperty(propName);

            if (!exists) {
              value = CCClass.getDefault(attrs[propName + POSTFIX_DEFAULT]);
            }

            if (typeof value !== 'object') {
              instance[propName] = value;
            } else if (value) {
              this._deserializeAndAssignField(instance, value, propName);
            } else {
              instance[propName] = null;
            }
          }
        };

        return _Deserializer;
      }();

      _Deserializer.pool = new DeserializerPool();
      function deserializeDynamic(data, details, options) {
        var _options$reportMissin;

        options = options || {};
        var classFinder = options.classFinder || getClassById;
        var createAssetRefs = options.createAssetRefs || sys.platform === Platform.EDITOR_CORE;
        var customEnv = options.customEnv;
        var ignoreEditorOnly = options.ignoreEditorOnly;
        var reportMissingClass = (_options$reportMissin = options.reportMissingClass) !== null && _options$reportMissin !== void 0 ? _options$reportMissin : legacyCC.deserialize.reportMissingClass;
        details.init();

        var deserializer = _Deserializer.pool.get(details, classFinder, reportMissingClass, customEnv, ignoreEditorOnly);

        legacyCC.game._isCloning = true;
        var res = deserializer.deserialize(data);
        legacyCC.game._isCloning = false;

        _Deserializer.pool.put(deserializer);

        if (createAssetRefs) {
          details.assignAssetsBy(function (uuid, options) {
            return EditorExtends.serialize.asAsset(uuid, options.type);
          });
        }

        return res;
      }

      function reportMissingClass(id) {
        {
          errorID(5302, id);
        }
      }

      var SUPPORT_MIN_FORMAT_VERSION = 1;
      var EMPTY_PLACEHOLDER = 0;
      var BuiltinValueTypes = [Vec2, Vec3, Vec4, Quat, Color, Size, Rect, Mat4];

      function BuiltinValueTypeParsers_xyzw(obj, data) {
        obj.x = data[1];
        obj.y = data[2];
        obj.z = data[3];
        obj.w = data[4];
      }

      var BuiltinValueTypeSetters = [function (obj, data) {
        obj.x = data[1];
        obj.y = data[2];
      }, function (obj, data) {
        obj.x = data[1];
        obj.y = data[2];
        obj.z = data[3];
      }, BuiltinValueTypeParsers_xyzw, BuiltinValueTypeParsers_xyzw, function (obj, data) {
        obj._val = data[1];
      }, function (obj, data) {
        obj.width = data[1];
        obj.height = data[2];
      }, function (obj, data) {
        obj.x = data[1];
        obj.y = data[2];
        obj.width = data[3];
        obj.height = data[4];
      }, function (obj, data) {
        Mat4.fromArray(obj, data, 1);
      }];

      var DataTypeID = {
        SimpleType: 0,
        InstanceRef: 1,
        Array_InstanceRef: 2,
        Array_AssetRefByInnerObj: 3,
        Class: 4,
        ValueTypeCreated: 5,
        AssetRefByInnerObj: 6,
        TRS: 7,
        ValueType: 8,
        Array_Class: 9,
        CustomizedClass: 10,
        Dict: 11,
        Array: 12,
        ARRAY_LENGTH: 13
      };
      var CLASS_TYPE = 0;
      var CLASS_KEYS = 1;
      var CLASS_PROP_TYPE_OFFSET = 2;
      var MASK_CLASS = 0;
      var OBJ_DATA_MASK = 0;
      var CUSTOM_OBJ_DATA_CLASS = 0;
      var CUSTOM_OBJ_DATA_CONTENT = 1;
      var VALUETYPE_SETTER = 0;
      var DICT_JSON_LAYOUT = 0;
      var ARRAY_ITEM_VALUES = 0;
      var Refs = {
        EACH_RECORD_LENGTH: 3,
        OWNER_OFFSET: 0,
        KEY_OFFSET: 1,
        TARGET_OFFSET: 2
      };
      var File = {
        Version: 0,
        Context: 0,
        SharedUuids: 1,
        SharedStrings: 2,
        SharedClasses: 3,
        SharedMasks: 4,
        Instances: 5,
        InstanceTypes: 6,
        Refs: 7,
        DependObjs: 8,
        DependKeys: 9,
        DependUuidIndices: 10,
        ARRAY_LENGTH: 11
      };
      var PACKED_SECTIONS = File.Instances;
      var Details = exports('Details', function () {
        function Details() {
          this.uuidObjList = null;
          this.uuidPropList = null;
          this.uuidList = null;
          this.uuidTypeList = [];
        }

        var _proto = Details.prototype;

        _proto.init = function init(data) {
          if ( data) {
            this.uuidObjList = data[File.DependObjs];
            this.uuidPropList = data[File.DependKeys];
            this.uuidList = data[File.DependUuidIndices];
          } else {
            var used = this.uuidList;

            if (!used) {
              this.uuidList = [];
              this.uuidObjList = [];
              this.uuidPropList = [];
              this.uuidTypeList = [];
            }
          }
        };

        _proto.reset = function reset() {
          {
            var used = this.uuidList;

            if (used) {
              this.uuidList.length = 0;
              this.uuidObjList.length = 0;
              this.uuidPropList.length = 0;
              this.uuidTypeList.length = 0;
            }
          }
        };

        _proto.push = function push(obj, propName, uuid, type) {
          this.uuidObjList.push(obj);
          this.uuidPropList.push(propName);
          this.uuidList.push(uuid);
          this.uuidTypeList.push(type || '');
        };

        return Details;
      }());
      Details.pool = new Pool(function (obj) {
        obj.reset();
      }, 5);

      Details.pool.get = function () {
        return this._get() || new Details();
      };

      function dereference(refs, instances, strings) {
        var dataLength = refs.length - 1;
        var i = 0;
        var instanceOffset = refs[dataLength] * Refs.EACH_RECORD_LENGTH;

        for (; i < instanceOffset; i += Refs.EACH_RECORD_LENGTH) {
          var _owner = refs[i];
          var target = instances[refs[i + Refs.TARGET_OFFSET]];
          var keyIndex = refs[i + Refs.KEY_OFFSET];

          if (keyIndex >= 0) {
            _owner[strings[keyIndex]] = target;
          } else {
            _owner[~keyIndex] = target;
          }
        }

        for (; i < dataLength; i += Refs.EACH_RECORD_LENGTH) {
          var _owner2 = instances[refs[i]];
          var _target = instances[refs[i + Refs.TARGET_OFFSET]];
          var _keyIndex = refs[i + Refs.KEY_OFFSET];

          if (_keyIndex >= 0) {
            _owner2[strings[_keyIndex]] = _target;
          } else {
            _owner2[~_keyIndex] = _target;
          }
        }
      }

      function deserializeCCObject(data, objectData) {
        var mask = data[File.SharedMasks][objectData[OBJ_DATA_MASK]];
        var clazz = mask[MASK_CLASS];
        var ctor = clazz[CLASS_TYPE];
        var obj = new ctor();
        var keys = clazz[CLASS_KEYS];
        var classTypeOffset = clazz[CLASS_PROP_TYPE_OFFSET];
        var maskTypeOffset = mask[mask.length - 1];
        var i = MASK_CLASS + 1;

        for (; i < maskTypeOffset; ++i) {
          var _key = keys[mask[i]];
          obj[_key] = objectData[i];
        }

        for (; i < objectData.length; ++i) {
          var _key2 = keys[mask[i]];
          var _type3 = clazz[mask[i] + classTypeOffset];
          var op = ASSIGNMENTS[_type3];
          op(data, obj, _key2, objectData[i]);
        }

        return obj;
      }

      function deserializeCustomCCObject(data, ctor, value) {
        var obj = new ctor();

        if (obj._deserialize) {
          obj._deserialize(value, data[File.Context]);
        } else {
          errorID(5303, getClassName(ctor));
        }

        return obj;
      }

      function assignSimple(data, owner, key, value) {
        owner[key] = value;
      }

      function assignInstanceRef(data, owner, key, value) {
        if (value >= 0) {
          owner[key] = data[File.Instances][value];
        } else {
          data[File.Refs][~value * Refs.EACH_RECORD_LENGTH] = owner;
        }
      }

      function genArrayParser(parser) {
        return function (data, owner, key, value) {
          for (var i = 0; i < value.length; ++i) {
            parser(data, value, i, value[i]);
          }

          owner[key] = value;
        };
      }

      function parseAssetRefByInnerObj(data, owner, key, value) {
        owner[key] = null;
        data[File.DependObjs][value] = owner;
      }

      function parseClass(data, owner, key, value) {
        owner[key] = deserializeCCObject(data, value);
      }

      function parseCustomClass(data, owner, key, value) {
        var ctor = data[File.SharedClasses][value[CUSTOM_OBJ_DATA_CLASS]];
        owner[key] = deserializeCustomCCObject(data, ctor, value[CUSTOM_OBJ_DATA_CONTENT]);
      }

      function parseValueTypeCreated(data, owner, key, value) {
        {
          BuiltinValueTypeSetters[value[VALUETYPE_SETTER]](owner[key], value);
        }
      }

      function parseValueType(data, owner, key, value) {
        var val = new BuiltinValueTypes[value[VALUETYPE_SETTER]]();
        BuiltinValueTypeSetters[value[VALUETYPE_SETTER]](val, value);
        owner[key] = val;
      }

      function parseTRS(data, owner, key, value) {
        var typedArray = owner[key];
        typedArray.set(value);
      }

      function parseDict(data, owner, key, value) {
        var dict = value[DICT_JSON_LAYOUT];
        owner[key] = dict;

        for (var i = DICT_JSON_LAYOUT + 1; i < value.length; i += 3) {
          var subKey = value[i];
          var subType = value[i + 1];
          var subValue = value[i + 2];
          var op = ASSIGNMENTS[subType];
          op(data, dict, subKey, subValue);
        }
      }

      function parseArray(data, owner, key, value) {
        var array = value[ARRAY_ITEM_VALUES];

        for (var i = 0; i < array.length; ++i) {
          var subValue = array[i];
          var _type4 = value[i + 1];

          if (_type4 !== DataTypeID.SimpleType) {
            var op = ASSIGNMENTS[_type4];
            op(data, array, i, subValue);
          }
        }

        owner[key] = array;
      }

      var ASSIGNMENTS = new Array(DataTypeID.ARRAY_LENGTH);
      ASSIGNMENTS[DataTypeID.SimpleType] = assignSimple;
      ASSIGNMENTS[DataTypeID.InstanceRef] = assignInstanceRef;
      ASSIGNMENTS[DataTypeID.Array_InstanceRef] = genArrayParser(assignInstanceRef);
      ASSIGNMENTS[DataTypeID.Array_AssetRefByInnerObj] = genArrayParser(parseAssetRefByInnerObj);
      ASSIGNMENTS[DataTypeID.Class] = parseClass;
      ASSIGNMENTS[DataTypeID.ValueTypeCreated] = parseValueTypeCreated;
      ASSIGNMENTS[DataTypeID.AssetRefByInnerObj] = parseAssetRefByInnerObj;
      ASSIGNMENTS[DataTypeID.TRS] = parseTRS;
      ASSIGNMENTS[DataTypeID.ValueType] = parseValueType;
      ASSIGNMENTS[DataTypeID.Array_Class] = genArrayParser(parseClass);
      ASSIGNMENTS[DataTypeID.CustomizedClass] = parseCustomClass;
      ASSIGNMENTS[DataTypeID.Dict] = parseDict;
      ASSIGNMENTS[DataTypeID.Array] = parseArray;

      function parseInstances(data) {
        var instances = data[File.Instances];
        var instanceTypes = data[File.InstanceTypes];
        var instanceTypesLen = instanceTypes === EMPTY_PLACEHOLDER ? 0 : instanceTypes.length;
        var rootIndex = instances[instances.length - 1];
        var normalObjectCount = instances.length - instanceTypesLen;

        if (typeof rootIndex !== 'number') {
          rootIndex = 0;
        } else {
          if (rootIndex < 0) {
            rootIndex = ~rootIndex;
          }

          --normalObjectCount;
        }

        var insIndex = 0;

        for (; insIndex < normalObjectCount; ++insIndex) {
          instances[insIndex] = deserializeCCObject(data, instances[insIndex]);
        }

        var classes = data[File.SharedClasses];

        for (var typeIndex = 0; typeIndex < instanceTypesLen; ++typeIndex, ++insIndex) {
          var _type5 = instanceTypes[typeIndex];
          var eachData = instances[insIndex];

          if (_type5 >= 0) {
            var ctor = classes[_type5];
            instances[insIndex] = deserializeCustomCCObject(data, ctor, eachData);
          } else {
            _type5 = ~_type5;
            var op = ASSIGNMENTS[_type5];
            op(data, instances, insIndex, eachData);
          }
        }

        return rootIndex;
      }

      function getMissingClass(hasCustomFinder, type, reportMissingClass) {
        if (!hasCustomFinder) {
          reportMissingClass(type);
        }

        return Object;
      }

      function doLookupClass(classFinder, type, container, index, silent, hasCustomFinder, reportMissingClass) {
        var klass = classFinder(type);

        if (!klass) {
          if (silent) {
            container[index] = function (c, i, t) {
              return function proxy() {
                var actualClass = classFinder(t) || getMissingClass(hasCustomFinder, t, reportMissingClass);
                c[i] = actualClass;
                return new actualClass();
              };
            }(container, index, type);

            return;
          } else {
            klass = getMissingClass(hasCustomFinder, type, reportMissingClass);
          }
        }

        container[index] = klass;
      }

      function lookupClasses(data, silent, customFinder, reportMissingClass) {
        var classFinder = customFinder || getClassById;
        var classes = data[File.SharedClasses];

        for (var i = 0; i < classes.length; ++i) {
          var klassLayout = classes[i];

          if (typeof klassLayout !== 'string') {
            {
              if (typeof klassLayout[CLASS_TYPE] === 'function') {
                throw new Error('Can not deserialize the same JSON data again.');
              }
            }

            var _type6 = klassLayout[CLASS_TYPE];
            doLookupClass(classFinder, _type6, klassLayout, CLASS_TYPE, silent, customFinder, reportMissingClass);
          } else {
            doLookupClass(classFinder, klassLayout, classes, i, silent, customFinder, reportMissingClass);
          }
        }
      }

      function cacheMasks(data) {
        var masks = data[File.SharedMasks];

        if (masks) {
          var classes = data[File.SharedClasses];

          for (var i = 0; i < masks.length; ++i) {
            var mask = masks[i];
            mask[MASK_CLASS] = classes[mask[MASK_CLASS]];
          }
        }
      }

      function parseResult(data) {
        var instances = data[File.Instances];
        var sharedStrings = data[File.SharedStrings];
        var dependSharedUuids = data[File.SharedUuids];
        var dependObjs = data[File.DependObjs];
        var dependKeys = data[File.DependKeys];
        var dependUuids = data[File.DependUuidIndices];

        for (var i = 0; i < dependObjs.length; ++i) {
          var _obj2 = dependObjs[i];

          if (typeof _obj2 === 'number') {
            dependObjs[i] = instances[_obj2];
          }

          var _key3 = dependKeys[i];

          if (typeof _key3 === 'number') {
            if (_key3 >= 0) {
              _key3 = sharedStrings[_key3];
            } else {
              _key3 = ~_key3;
            }

            dependKeys[i] = _key3;
          }

          var _uuid2 = dependUuids[i];

          if (typeof _uuid2 === 'number') {
            dependUuids[i] = dependSharedUuids[_uuid2];
          }
        }
      }

      function isCompiledJson(json) {
        if (Array.isArray(json)) {
          var version = json[0];
          return typeof version === 'number' || version instanceof FileInfo;
        } else {
          return false;
        }
      }
      function deserialize(data, details, options) {
        if (typeof data === 'string') {
          data = JSON.parse(data);
        }

        var borrowDetails = !details;
        details = details || Details.pool.get();
        var res;

        if ( !isCompiledJson(data)) {
          res = deserializeDynamic(data, details, options);
        } else {
          details.init(data);
          options = options || {};
          var version = data[File.Version];
          var preprocessed = false;

          if (typeof version === 'object') {
            preprocessed = version.preprocessed;
            version = version.version;
          }

          if (version < SUPPORT_MIN_FORMAT_VERSION) {
            throw new Error(getError(5304, version));
          }

          options._version = version;
          options.result = details;
          data[File.Context] = options;

          if (!preprocessed) {
            var _options$reportMissin;

            lookupClasses(data, false, options.classFinder, (_options$reportMissin = options.reportMissingClass) !== null && _options$reportMissin !== void 0 ? _options$reportMissin : deserialize.reportMissingClass);
            cacheMasks(data);
          }

          legacyCC.game._isCloning = true;
          var instances = data[File.Instances];
          var rootIndex = parseInstances(data);
          legacyCC.game._isCloning = false;

          if (data[File.Refs]) {
            dereference(data[File.Refs], instances, data[File.SharedStrings]);
          }

          parseResult(data);
          res = instances[rootIndex];
        }

        if (borrowDetails) {
          Details.pool.put(details);
        }

        return res;
      }
      deserialize.Details = Details;
      deserialize.reportMissingClass = reportMissingClass;

      var FileInfo = function FileInfo(version) {
        this.preprocessed = true;
        this.version = version;
      };

      function unpackJSONs(data, classFinder, reportMissingClass) {
        if (data[File.Version] < SUPPORT_MIN_FORMAT_VERSION) {
          throw new Error(getError(5304, data[File.Version]));
        }

        lookupClasses(data, true, classFinder, reportMissingClass !== null && reportMissingClass !== void 0 ? reportMissingClass : deserialize.reportMissingClass);
        cacheMasks(data);
        var version = new FileInfo(data[File.Version]);
        var sharedUuids = data[File.SharedUuids];
        var sharedStrings = data[File.SharedStrings];
        var sharedClasses = data[File.SharedClasses];
        var sharedMasks = data[File.SharedMasks];
        var sections = data[PACKED_SECTIONS];

        for (var i = 0; i < sections.length; ++i) {
          sections[i].unshift(version, sharedUuids, sharedStrings, sharedClasses, sharedMasks);
        }

        return sections;
      }
      function packCustomObjData(type, data, hasNativeDep) {
        return [SUPPORT_MIN_FORMAT_VERSION, EMPTY_PLACEHOLDER, EMPTY_PLACEHOLDER, [type], EMPTY_PLACEHOLDER, hasNativeDep ? [data, ~0] : [data], [0], EMPTY_PLACEHOLDER, [], [], []];
      }
      function hasNativeDep(data) {
        var instances = data[File.Instances];
        var rootInfo = instances[instances.length - 1];

        if (typeof rootInfo !== 'number') {
          return false;
        } else {
          return rootInfo < 0;
        }
      }

      function getDependUuidList(json) {
        var sharedUuids = json[File.SharedUuids];
        return json[File.DependUuidIndices].map(function (index) {
          return sharedUuids[index];
        });
      }

      function parseUuidDependencies(serialized) {
        {
          return getDependUuidList(serialized);
        }
      }

      legacyCC.deserialize = deserialize;

      var dependMap = new WeakMap();
      var nativeDependMap = new WeakSet();
      var onLoadedInvokedMap = new WeakSet();

      function deserializeAsset(json, options) {
        var classFinder;

        {
          classFinder = MissingScript.safeFindClass;
        }

        var tdInfo = Details.pool.get();
        var asset;

        try {
          asset = deserialize(json, tdInfo, {
            classFinder: classFinder,
            customEnv: options
          });
        } catch (e) {
          error(e);
          Details.pool.put(tdInfo);
          throw e;
        }

        asset._uuid = options.__uuid__ || '';

        var uuidList = tdInfo.uuidList;
        var objList = tdInfo.uuidObjList;
        var propList = tdInfo.uuidPropList;
        var typeList = tdInfo.uuidTypeList || [];
        var depends = [];

        for (var i = 0; i < uuidList.length; i++) {
          var dependUuid = uuidList[i];
          depends[i] = {
            uuid: decodeUuid(dependUuid),
            owner: objList[i],
            prop: propList[i],
            type: getClassById(typeList[i])
          };
        }

        dependMap.set(asset, depends);

        if (asset._native) {
          nativeDependMap.add(asset);
        }

        Details.pool.put(tdInfo);
        return asset;
      }

      var DependUtil = function () {
        function DependUtil() {
          this._depends = new Cache();
        }

        var _proto = DependUtil.prototype;

        _proto.init = function init() {
          this._depends.clear();
        };

        _proto.getNativeDep = function getNativeDep(uuid) {
          var depend = this._depends.get(uuid);

          if (depend && depend.nativeDep) {
            return _extends({}, depend.nativeDep);
          }

          return null;
        };

        _proto.getDeps = function getDeps(uuid) {
          if (this._depends.has(uuid)) {
            return this._depends.get(uuid).deps;
          }

          return [];
        };

        _proto.getDepsRecursively = function getDepsRecursively(uuid) {
          var exclude = Object.create(null);
          var depends = [];

          this._descend(uuid, exclude, depends);

          return depends;
        };

        _proto.remove = function remove(uuid) {
          this._depends.remove(uuid);
        };

        _proto.parse = function parse(uuid, json) {
          var out = null;

          if (Array.isArray(json) || json.__type__ || json instanceof CCON) {
            if (this._depends.has(uuid)) {
              return this._depends.get(uuid);
            }

            if (Array.isArray(json) && ( !hasNativeDep(json))) {
              out = {
                deps: this._parseDepsFromJson(json)
              };
            } else {
              try {
                var asset = deserializeAsset(json, {
                  __uuid__: uuid
                });
                out = this._parseDepsFromAsset(asset);

                if (out.nativeDep) {
                  out.nativeDep.uuid = uuid;
                }

                parsed.add(uuid + "@import", asset);
              } catch (e) {
                files.remove(uuid + "@import");
                out = {
                  deps: []
                };
              }
            }
          } else {
            if ( this._depends.has(uuid)) {
              out = this._depends.get(uuid);

              if (out.parsedFromExistAsset) {
                return out;
              }
            }

            out = this._parseDepsFromAsset(json);
          }

          this._depends.add(uuid, out);

          return out;
        };

        _proto._parseDepsFromAsset = function _parseDepsFromAsset(asset) {
          var out = {
            deps: [],
            parsedFromExistAsset: true
          };
          var deps = dependMap.get(asset);
          assertIsNonNullable(deps);

          for (var i = 0, l = deps.length; i < l; i++) {
            out.deps.push(deps[i].uuid);
          }

          if (nativeDependMap.has(asset)) {
            out.nativeDep = asset._nativeDep;
          }

          return out;
        };

        _proto._parseDepsFromJson = function _parseDepsFromJson(json) {
          var depends = parseUuidDependencies(json);
          depends.forEach(function (uuid, index) {
            return depends[index] = decodeUuid(uuid);
          });
          return depends;
        };

        _proto._descend = function _descend(uuid, exclude, depends) {
          var deps = this.getDeps(uuid);

          for (var i = 0; i < deps.length; i++) {
            var depend = deps[i];

            if (!exclude[depend]) {
              exclude[depend] = true;
              depends.push(depend);

              this._descend(depend, exclude, depends);
            }
          }
        };

        _createClass(DependUtil, null, [{
          key: "instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new DependUtil();
            }

            return this._instance;
          }
        }]);

        return DependUtil;
      }();
      DependUtil._instance = void 0;
      var dependUtil = DependUtil.instance;

      var _dec$a, _class$a;
      var _regions = [new BufferTextureCopy()];

      function getMipLevel(width, height) {
        var size = Math.max(width, height);
        var level = 0;

        while (size) {
          size >>= 1;
          level++;
        }

        return level;
      }

      function isPOT(n) {
        return n && (n & n - 1) === 0;
      }

      function canGenerateMipmap(device, w, h) {
        var needCheckPOT = device.gfxAPI === API.WEBGL;

        if (needCheckPOT) {
          return isPOT(w) && isPOT(h);
        }

        return true;
      }

      var SimpleTexture = (_dec$a = ccclass('cc.SimpleTexture'), _dec$a(_class$a = function (_TextureBase) {
        _inheritsLoose(SimpleTexture, _TextureBase);

        function SimpleTexture() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _TextureBase.call.apply(_TextureBase, [this].concat(args)) || this;
          _this._gfxTexture = null;
          _this._gfxTextureView = null;
          _this._mipmapLevel = 1;
          _this._textureWidth = 0;
          _this._textureHeight = 0;
          _this._baseLevel = 0;
          _this._maxLevel = 1000;
          return _this;
        }

        var _proto = SimpleTexture.prototype;

        _proto.getGFXTexture = function getGFXTexture() {
          return this._gfxTextureView;
        };

        _proto.destroy = function destroy() {
          this._tryDestroyTextureView();

          this._tryDestroyTexture();

          return _TextureBase.prototype.destroy.call(this);
        };

        _proto.updateImage = function updateImage() {
          this.updateMipmaps(0);
        };

        _proto.updateMipmaps = function updateMipmaps(firstLevel, count) {
        };

        _proto.uploadData = function uploadData(source, level, arrayIndex) {
          if (level === void 0) {
            level = 0;
          }

          if (arrayIndex === void 0) {
            arrayIndex = 0;
          }

          if (!this._gfxTexture || this._mipmapLevel <= level) {
            return;
          }

          var gfxDevice = this._getGFXDevice();

          if (!gfxDevice) {
            return;
          }

          var region = _regions[0];
          region.texExtent.width = this._textureWidth >> level;
          region.texExtent.height = this._textureHeight >> level;
          region.texSubres.mipLevel = level;
          region.texSubres.baseArrayLayer = arrayIndex;

          if (ArrayBuffer.isView(source)) {
            gfxDevice.copyBuffersToTexture([source], this._gfxTexture, _regions);
          } else {
            gfxDevice.copyTexImagesToTexture([source], this._gfxTexture, _regions);
          }
        };

        _proto._assignImage = function _assignImage(image, level, arrayIndex) {
          var data = image.data;

          if (!data) {
            return;
          }

          this.uploadData(data, level, arrayIndex);

          this._checkTextureLoaded();

          if (macro.CLEANUP_IMAGE_CACHE) {
            var deps = dependUtil.getDeps(this._uuid);
            var index = deps.indexOf(image._uuid);

            if (index !== -1) {
              fastRemoveAt(deps, index);
              image.decRef();
            }
          }
        };

        _proto._checkTextureLoaded = function _checkTextureLoaded() {
          this._textureReady();
        };

        _proto._textureReady = function _textureReady() {
          this.loaded = true;
          this.emit('load');
        };

        _proto._setMipmapLevel = function _setMipmapLevel(value) {
          this._mipmapLevel = value < 1 ? 1 : value;
        };

        _proto._setMipRange = function _setMipRange(baseLevel, maxLevel) {
          this._baseLevel = baseLevel < 1 ? 0 : baseLevel;
          this._maxLevel = maxLevel < 1 ? 0 : maxLevel;
        };

        _proto.setMipRange = function setMipRange(baseLevel, maxLevel) {
          assertID(baseLevel <= maxLevel, 3124);

          this._setMipRange(baseLevel, maxLevel);

          var device = this._getGFXDevice();

          if (!device) {
            return;
          }

          var textureView = this._createTextureView(device);

          this._tryDestroyTextureView();

          this._gfxTextureView = textureView;
        };

        _proto._getGfxTextureCreateInfo = function _getGfxTextureCreateInfo(presumed) {
          return null;
        };

        _proto._getGfxTextureViewCreateInfo = function _getGfxTextureViewCreateInfo(presumed) {
          return null;
        };

        _proto._tryReset = function _tryReset() {
          this._tryDestroyTextureView();

          this._tryDestroyTexture();

          if (this._mipmapLevel === 0) {
            return;
          }

          var device = this._getGFXDevice();

          if (!device) {
            return;
          }

          this._createTexture(device);

          this._gfxTextureView = this._createTextureView(device);
        };

        _proto.isUsingOfflineMipmaps = function isUsingOfflineMipmaps() {
          return false;
        };

        _proto._createTexture = function _createTexture(device) {
          if (this._width === 0 || this._height === 0) {
            return;
          }

          var flags = TextureFlagBit.NONE;

          if (this._mipFilter !== Filter$1.NONE && canGenerateMipmap(device, this._width, this._height)) {
            this._mipmapLevel = getMipLevel(this._width, this._height);

            if (!this.isUsingOfflineMipmaps() && !this.isCompressed) {
              flags = TextureFlagBit.GEN_MIPMAP;
            }
          }

          var textureCreateInfo = this._getGfxTextureCreateInfo({
            usage: TextureUsageBit.SAMPLED | TextureUsageBit.TRANSFER_DST,
            format: this._getGFXFormat(),
            levelCount: this._mipmapLevel,
            flags: flags
          });

          if (!textureCreateInfo) {
            return;
          }

          var texture = device.createTexture(textureCreateInfo);
          this._textureWidth = textureCreateInfo.width;
          this._textureHeight = textureCreateInfo.height;
          this._gfxTexture = texture;
        };

        _proto._createTextureView = function _createTextureView(device) {
          if (!this._gfxTexture) {
            return null;
          }

          var maxLevel = this._maxLevel < this._mipmapLevel ? this._maxLevel : this._mipmapLevel - 1;

          var textureViewCreateInfo = this._getGfxTextureViewCreateInfo({
            texture: this._gfxTexture,
            format: this._getGFXFormat(),
            baseLevel: this._baseLevel,
            levelCount: maxLevel - this._baseLevel + 1
          });

          if (!textureViewCreateInfo) {
            return null;
          }

          return device.createTexture(textureViewCreateInfo);
        };

        _proto._tryDestroyTexture = function _tryDestroyTexture() {
          if (this._gfxTexture) {
            this._gfxTexture.destroy();

            this._gfxTexture = null;
          }
        };

        _proto._tryDestroyTextureView = function _tryDestroyTextureView() {
          if (this._gfxTextureView) {
            this._gfxTextureView.destroy();

            this._gfxTextureView = null;
          }
        };

        _createClass(SimpleTexture, [{
          key: "mipmapLevel",
          get: function get() {
            return this._mipmapLevel;
          }
        }]);

        return SimpleTexture;
      }(TextureBase)) || _class$a);
      legacyCC.SimpleTexture = SimpleTexture;

      var _dec$b, _dec2$3, _class$b, _class2$9, _initializer$7;
      var compressedImageAsset = [];
      var Texture2D = exports('Texture2D', (_dec$b = ccclass('cc.Texture2D'), _dec2$3 = type([ImageAsset]), _dec$b(_class$b = (_class2$9 = function (_SimpleTexture) {
        _inheritsLoose(Texture2D, _SimpleTexture);

        function Texture2D() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SimpleTexture.call.apply(_SimpleTexture, [this].concat(args)) || this;
          _this._mipmaps = _initializer$7 && _initializer$7();
          return _this;
        }

        var _proto = Texture2D.prototype;

        _proto._setMipmapParams = function _setMipmapParams(value) {
          var _this2 = this;

          this._mipmaps = value;

          this._setMipmapLevel(this._mipmaps.length);

          if (this._mipmaps.length > 0) {
            var imageAsset = this._mipmaps[0];
            this.reset({
              width: imageAsset.width,
              height: imageAsset.height,
              format: imageAsset.format,
              mipmapLevel: this._mipmaps.length,
              baseLevel: this._baseLevel,
              maxLevel: this._maxLevel
            });

            this._mipmaps.forEach(function (mipmap, level) {
              _this2._assignImage(mipmap, level);
            });
          } else {
            this.reset({
              width: 0,
              height: 0,
              mipmapLevel: this._mipmaps.length,
              baseLevel: this._baseLevel,
              maxLevel: this._maxLevel
            });
          }
        };

        _proto.initialize = function initialize() {
          this.mipmaps = this._mipmaps;
        };

        _proto.onLoaded = function onLoaded() {
          this.initialize();
        };

        _proto.reset = function reset(info) {
          this._width = info.width;
          this._height = info.height;

          this._setGFXFormat(info.format);

          var mipLevels = info.mipmapLevel === undefined ? 1 : info.mipmapLevel;

          this._setMipmapLevel(mipLevels);

          var minLod = info.baseLevel === undefined ? 0 : info.baseLevel;
          var maxLod = info.maxLevel === undefined ? 1000 : info.maxLevel;

          this._setMipRange(minLod, maxLod);

          this._tryReset();
        };

        _proto.create = function create(width, height, format, mipmapLevel, baseLevel, maxLevel) {
          if (format === void 0) {
            format = PixelFormat.RGBA8888;
          }

          if (mipmapLevel === void 0) {
            mipmapLevel = 1;
          }

          if (baseLevel === void 0) {
            baseLevel = 0;
          }

          if (maxLevel === void 0) {
            maxLevel = 1000;
          }

          this.reset({
            width: width,
            height: height,
            format: format,
            mipmapLevel: mipmapLevel,
            baseLevel: baseLevel,
            maxLevel: maxLevel
          });
        };

        _proto.toString = function toString() {
          return this._mipmaps.length !== 0 ? this._mipmaps[0].url : '';
        };

        _proto.updateMipmaps = function updateMipmaps(firstLevel, count) {
          if (firstLevel === void 0) {
            firstLevel = 0;
          }

          if (firstLevel >= this._mipmaps.length) {
            return;
          }

          var nUpdate = Math.min(count === undefined ? this._mipmaps.length : count, this._mipmaps.length - firstLevel);

          for (var i = 0; i < nUpdate; ++i) {
            var level = firstLevel + i;

            this._assignImage(this._mipmaps[level], level);
          }
        };

        _proto.getHtmlElementObj = function getHtmlElementObj() {
          return this._mipmaps[0] && this._mipmaps[0].data instanceof HTMLElement ? this._mipmaps[0].data : null;
        };

        _proto.destroy = function destroy() {
          this._mipmaps = [];
          return _SimpleTexture.prototype.destroy.call(this);
        };

        _proto.description = function description() {
          var url = this._mipmaps[0] ? this._mipmaps[0].url : '';
          return "<cc.Texture2D | Name = " + url + " | Dimension = " + this.width + " x " + this.height + ">";
        };

        _proto.releaseTexture = function releaseTexture() {
          this.destroy();
        };

        _proto._serialize = function _serialize(ctxForExporting) {

          return null;
        };

        _proto._deserialize = function _deserialize(serializedData, handle) {
          var data = serializedData;

          _SimpleTexture.prototype._deserialize.call(this, data.base, handle);

          this._mipmaps = new Array(data.mipmaps.length);

          for (var i = 0; i < data.mipmaps.length; ++i) {
            this._mipmaps[i] = new ImageAsset();

            if (!data.mipmaps[i]) {
              continue;
            }

            var mipmapUUID = data.mipmaps[i];
            handle.result.push(this._mipmaps, "" + i, mipmapUUID, getClassId(ImageAsset));
          }
        };

        _proto._getGfxTextureCreateInfo = function _getGfxTextureCreateInfo(presumed) {
          var texInfo = new TextureInfo(TextureType.TEX2D);
          texInfo.width = this._width;
          texInfo.height = this._height;
          Object.assign(texInfo, presumed);
          return texInfo;
        };

        _proto._getGfxTextureViewCreateInfo = function _getGfxTextureViewCreateInfo(presumed) {
          var texViewInfo = new TextureViewInfo();
          texViewInfo.type = TextureType.TEX2D;
          Object.assign(texViewInfo, presumed);
          return texViewInfo;
        };

        _proto.initDefault = function initDefault(uuid) {
          _SimpleTexture.prototype.initDefault.call(this, uuid);

          var imageAsset = new ImageAsset();
          imageAsset.initDefault();
          this.image = imageAsset;
        };

        _proto.validate = function validate() {
          return this.mipmaps && this.mipmaps.length !== 0;
        };

        _createClass(Texture2D, [{
          key: "mipmaps",
          get: function get() {
            return this._mipmaps;
          },
          set: function set(value) {
            if (value.length > 0 && value[0].mipmapLevelDataSize && value[0].mipmapLevelDataSize.length > 0) {
              compressedImageAsset.length = 0;
              var mipmapLevelDataSize = value[0].mipmapLevelDataSize;
              var data = value[0].data;
              var _width = value[0].width;
              var _height = value[0].height;
              var _format = value[0].format;
              var byteOffset = 0;

              for (var i = 0; i < mipmapLevelDataSize.length; i++) {
                var srcView = new Uint8Array(data.buffer, byteOffset, mipmapLevelDataSize[i]);
                var dstView = new Uint8Array(mipmapLevelDataSize[i]);
                dstView.set(srcView);
                compressedImageAsset[i] = new ImageAsset({
                  _data: dstView,
                  _compressed: true,
                  width: _width,
                  height: _height,
                  format: _format,
                  mipmapLevelDataSize: []
                });
                compressedImageAsset[i]._uuid = value[0]._uuid;
                this.setMipFilter(Filter$1.LINEAR);
                byteOffset += mipmapLevelDataSize[i];
              }

              this._setMipmapParams(compressedImageAsset);
            } else {
              this._setMipmapParams(value);
            }
          }
        }, {
          key: "image",
          get: function get() {
            return this._mipmaps.length === 0 ? null : this._mipmaps[0];
          },
          set: function set(value) {
            this.mipmaps = value ? [value] : [];
          }
        }]);

        return Texture2D;
      }(SimpleTexture), (_initializer$7 = applyDecoratedInitializer(_class2$9.prototype, "_mipmaps", [_dec2$3], function () {
        return [];
      })), _class2$9)) || _class$b));
      legacyCC.Texture2D = Texture2D;

      var space = 2;
      var Atlas = function () {
        function Atlas(width, height) {
          this._texture = void 0;
          this._width = void 0;
          this._height = void 0;
          this._x = void 0;
          this._y = void 0;
          this._nexty = void 0;
          this._innerTextureInfos = {};
          this._innerSpriteFrames = void 0;
          this._count = void 0;
          var texture = new DynamicAtlasTexture();
          texture.initWithSize(width, height);
          this._texture = texture;
          this._width = width;
          this._height = height;
          this._x = space;
          this._y = space;
          this._nexty = space;
          this._innerTextureInfos = {};
          this._innerSpriteFrames = [];
          this._count = 0;
        }

        var _proto = Atlas.prototype;

        _proto.insertSpriteFrame = function insertSpriteFrame(spriteFrame) {
          var rect = spriteFrame.rect;
          var texture = spriteFrame.texture;

          var info = this._innerTextureInfos[texture.getId()];

          var sx = rect.x;
          var sy = rect.y;

          if (info) {
            sx += info.x;
            sy += info.y;
          } else {
            var width = texture.width;
            var height = texture.height;

            if (this._x + width + space > this._width) {
              this._x = space;
              this._y = this._nexty;
            }

            if (this._y + height + space > this._nexty) {
              this._nexty = this._y + height + space;
            }

            if (this._nexty > this._height) {
              return null;
            }

            if (legacyCC.internal.dynamicAtlasManager.textureBleeding) {
              if (width <= 8 || height <= 8) {
                this._texture.drawTextureAt(texture.image, this._x - 1, this._y - 1);

                this._texture.drawTextureAt(texture.image, this._x - 1, this._y + 1);

                this._texture.drawTextureAt(texture.image, this._x + 1, this._y - 1);

                this._texture.drawTextureAt(texture.image, this._x + 1, this._y + 1);
              }

              this._texture.drawTextureAt(texture.image, this._x - 1, this._y);

              this._texture.drawTextureAt(texture.image, this._x + 1, this._y);

              this._texture.drawTextureAt(texture.image, this._x, this._y - 1);

              this._texture.drawTextureAt(texture.image, this._x, this._y + 1);
            }

            this._texture.drawTextureAt(texture.image, this._x, this._y);

            this._innerTextureInfos[texture.getId()] = {
              x: this._x,
              y: this._y,
              texture: texture
            };
            this._count++;
            sx += this._x;
            sy += this._y;
            this._x += width + space;
          }

          var frame = {
            x: sx,
            y: sy,
            texture: this._texture
          };

          this._innerSpriteFrames.push(spriteFrame);

          return frame;
        };

        _proto.deleteInnerTexture = function deleteInnerTexture(texture) {
          if (texture && this._innerTextureInfos[texture.getId()]) {
            delete this._innerTextureInfos[texture.getId()];
            this._count--;
          }
        };

        _proto.isEmpty = function isEmpty() {
          return this._count <= 0;
        };

        _proto.reset = function reset() {
          this._x = space;
          this._y = space;
          this._nexty = space;
          var frames = this._innerSpriteFrames;

          for (var i = 0, l = frames.length; i < l; i++) {
            var frame = frames[i];

            if (!frame.isValid) {
              continue;
            }

            frame._resetDynamicAtlasFrame();
          }

          this._innerSpriteFrames.length = 0;
          this._innerTextureInfos = {};
        };

        _proto.destroy = function destroy() {
          this.reset();

          this._texture.destroy();
        };

        return Atlas;
      }();
      var DynamicAtlasTexture = function (_Texture2D) {
        _inheritsLoose(DynamicAtlasTexture, _Texture2D);

        function DynamicAtlasTexture() {
          return _Texture2D.apply(this, arguments) || this;
        }

        var _proto2 = DynamicAtlasTexture.prototype;

        _proto2.initWithSize = function initWithSize(width, height, format) {
          if (format === void 0) {
            format = PixelFormat.RGBA8888;
          }

          this.reset({
            width: width,
            height: height,
            format: format
          });
        };

        _proto2.drawTextureAt = function drawTextureAt(image, x, y) {
          var gfxTexture = this.getGFXTexture();

          if (!image || !gfxTexture) {
            return;
          }

          var gfxDevice = this._getGFXDevice();

          if (!gfxDevice) {
            console.warn('Unable to get device');
            return;
          }

          var region = new BufferTextureCopy();
          region.texOffset.x = x;
          region.texOffset.y = y;
          region.texExtent.width = image.width;
          region.texExtent.height = image.height;
          gfxDevice.copyTexImagesToTexture([image.data], gfxTexture, [region]);
        };

        return DynamicAtlasTexture;
      }(Texture2D);

      var layerList = {
        NONE: 0,
        IGNORE_RAYCAST: 1 << 20,
        GIZMOS: 1 << 21,
        EDITOR: 1 << 22,
        UI_3D: 1 << 23,
        SCENE_GIZMO: 1 << 24,
        UI_2D: 1 << 25,
        PROFILER: 1 << 28,
        DEFAULT: 1 << 30,
        ALL: 0xffffffff
      };
      var Layers = exports('Layers', function () {
        function Layers() {}

        Layers.init = function init() {
          var userLayers = settings.querySettings(Settings.Category.ENGINE, 'customLayers');
          if (!userLayers) return;

          for (var i = 0; i < userLayers.length; i++) {
            var layer = userLayers[i];
            Layers.addLayer(layer.name, layer.bit);
          }
        };

        Layers.makeMaskInclude = function makeMaskInclude(includes) {
          var mask = 0;

          for (var _iterator = _createForOfIteratorHelperLoose(includes), _step; !(_step = _iterator()).done;) {
            var inc = _step.value;
            mask |= inc;
          }

          return mask;
        };

        Layers.makeMaskExclude = function makeMaskExclude(excludes) {
          return ~Layers.makeMaskInclude(excludes);
        };

        Layers.addLayer = function addLayer(name, bitNum) {
          if (bitNum === undefined) {
            console.warn('bitNum can\'t be undefined');
            return;
          }

          if (bitNum > 19 || bitNum < 0) {
            console.warn('maximum layers reached.');
            return;
          }

          var val = 1 << bitNum;
          assertIsTrue(!Layers.Enum[name], getError(2104, name));
          Layers.Enum[name] = val;
          value(Layers.Enum, String(val), name);
          Layers.BitMask[name] = val;
          value(Layers.BitMask, String(val), name);
        };

        Layers.deleteLayer = function deleteLayer(bitNum) {
          if (bitNum > 19 || bitNum < 0) {
            console.warn('do not change buildin layers.');
            return;
          }

          var val = 1 << bitNum;
          delete Layers.Enum[Layers.Enum[val]];
          delete Layers.Enum[val];
          delete Layers.BitMask[Layers.BitMask[val]];
          delete Layers.BitMask[val];
        };

        Layers.nameToLayer = function nameToLayer(name) {
          if (name === undefined) {
            console.warn('name can\'t be undefined');
            return -1;
          }

          return log2(Layers.Enum[name]);
        };

        Layers.layerToName = function layerToName(bitNum) {
          if (bitNum > 31 || bitNum < 0) {
            console.warn('Unable to access unknown layer.');
            return '';
          }

          return Layers.Enum[1 << bitNum];
        };

        return Layers;
      }());
      Layers.Enum = Enum(layerList);
      Layers.BitMask = BitMask(_extends({}, layerList));
      legacyCC.Layers = Layers;

      var PIPELINE_FLOW_MAIN = 'MainFlow';
      var PIPELINE_FLOW_FORWARD = 'ForwardFlow';
      var PIPELINE_FLOW_SHADOW = 'ShadowFlow';
      var PIPELINE_FLOW_SMAA = 'SMAAFlow';
      var PIPELINE_FLOW_TONEMAP = 'ToneMapFlow';
      var RenderPassStage;

      (function (RenderPassStage) {
        RenderPassStage[RenderPassStage["DEFAULT"] = 100] = "DEFAULT";
        RenderPassStage[RenderPassStage["UI"] = 200] = "UI";
      })(RenderPassStage || (RenderPassStage = {}));

      legacyCC.RenderPassStage = RenderPassStage;
      var RenderPriority;

      (function (RenderPriority) {
        RenderPriority[RenderPriority["MIN"] = 0] = "MIN";
        RenderPriority[RenderPriority["MAX"] = 255] = "MAX";
        RenderPriority[RenderPriority["DEFAULT"] = 128] = "DEFAULT";
      })(RenderPriority || (RenderPriority = {}));

      var globalDescriptorSetLayout = {
        bindings: [],
        layouts: {}
      };
      var localDescriptorSetLayout = {
        bindings: [],
        layouts: {}
      };
      var PipelineGlobalBindings;

      (function (PipelineGlobalBindings) {
        PipelineGlobalBindings[PipelineGlobalBindings["UBO_GLOBAL"] = 0] = "UBO_GLOBAL";
        PipelineGlobalBindings[PipelineGlobalBindings["UBO_CAMERA"] = 1] = "UBO_CAMERA";
        PipelineGlobalBindings[PipelineGlobalBindings["UBO_SHADOW"] = 2] = "UBO_SHADOW";
        PipelineGlobalBindings[PipelineGlobalBindings["UBO_CSM"] = 3] = "UBO_CSM";
        PipelineGlobalBindings[PipelineGlobalBindings["SAMPLER_SHADOWMAP"] = 4] = "SAMPLER_SHADOWMAP";
        PipelineGlobalBindings[PipelineGlobalBindings["SAMPLER_ENVIRONMENT"] = 5] = "SAMPLER_ENVIRONMENT";
        PipelineGlobalBindings[PipelineGlobalBindings["SAMPLER_SPOT_SHADOW_MAP"] = 6] = "SAMPLER_SPOT_SHADOW_MAP";
        PipelineGlobalBindings[PipelineGlobalBindings["SAMPLER_DIFFUSEMAP"] = 7] = "SAMPLER_DIFFUSEMAP";
        PipelineGlobalBindings[PipelineGlobalBindings["COUNT"] = 8] = "COUNT";
      })(PipelineGlobalBindings || (PipelineGlobalBindings = {}));

      var GLOBAL_UBO_COUNT = PipelineGlobalBindings.SAMPLER_SHADOWMAP;
      var GLOBAL_SAMPLER_COUNT = PipelineGlobalBindings.COUNT - GLOBAL_UBO_COUNT;
      var ModelLocalBindings;

      (function (ModelLocalBindings) {
        ModelLocalBindings[ModelLocalBindings["UBO_LOCAL"] = 0] = "UBO_LOCAL";
        ModelLocalBindings[ModelLocalBindings["UBO_FORWARD_LIGHTS"] = 1] = "UBO_FORWARD_LIGHTS";
        ModelLocalBindings[ModelLocalBindings["UBO_SKINNING_ANIMATION"] = 2] = "UBO_SKINNING_ANIMATION";
        ModelLocalBindings[ModelLocalBindings["UBO_SKINNING_TEXTURE"] = 3] = "UBO_SKINNING_TEXTURE";
        ModelLocalBindings[ModelLocalBindings["UBO_MORPH"] = 4] = "UBO_MORPH";
        ModelLocalBindings[ModelLocalBindings["UBO_UI_LOCAL"] = 5] = "UBO_UI_LOCAL";
        ModelLocalBindings[ModelLocalBindings["UBO_SH"] = 6] = "UBO_SH";
        ModelLocalBindings[ModelLocalBindings["SAMPLER_JOINTS"] = 7] = "SAMPLER_JOINTS";
        ModelLocalBindings[ModelLocalBindings["SAMPLER_MORPH_POSITION"] = 8] = "SAMPLER_MORPH_POSITION";
        ModelLocalBindings[ModelLocalBindings["SAMPLER_MORPH_NORMAL"] = 9] = "SAMPLER_MORPH_NORMAL";
        ModelLocalBindings[ModelLocalBindings["SAMPLER_MORPH_TANGENT"] = 10] = "SAMPLER_MORPH_TANGENT";
        ModelLocalBindings[ModelLocalBindings["SAMPLER_LIGHTMAP"] = 11] = "SAMPLER_LIGHTMAP";
        ModelLocalBindings[ModelLocalBindings["SAMPLER_SPRITE"] = 12] = "SAMPLER_SPRITE";
        ModelLocalBindings[ModelLocalBindings["SAMPLER_REFLECTION"] = 13] = "SAMPLER_REFLECTION";
        ModelLocalBindings[ModelLocalBindings["STORAGE_REFLECTION"] = 14] = "STORAGE_REFLECTION";
        ModelLocalBindings[ModelLocalBindings["SAMPLER_REFLECTION_PROBE_CUBE"] = 15] = "SAMPLER_REFLECTION_PROBE_CUBE";
        ModelLocalBindings[ModelLocalBindings["SAMPLER_REFLECTION_PROBE_PLANAR"] = 16] = "SAMPLER_REFLECTION_PROBE_PLANAR";
        ModelLocalBindings[ModelLocalBindings["COUNT"] = 17] = "COUNT";
      })(ModelLocalBindings || (ModelLocalBindings = {}));

      var LOCAL_UBO_COUNT = ModelLocalBindings.SAMPLER_JOINTS;
      var LOCAL_SAMPLER_COUNT = ModelLocalBindings.STORAGE_REFLECTION - LOCAL_UBO_COUNT;
      var LOCAL_STORAGE_IMAGE_COUNT = ModelLocalBindings.COUNT - LOCAL_UBO_COUNT - LOCAL_SAMPLER_COUNT;
      var SetIndex;

      (function (SetIndex) {
        SetIndex[SetIndex["GLOBAL"] = 0] = "GLOBAL";
        SetIndex[SetIndex["MATERIAL"] = 1] = "MATERIAL";
        SetIndex[SetIndex["LOCAL"] = 2] = "LOCAL";
      })(SetIndex || (SetIndex = {}));

      var bindingMappingInfo = new BindingMappingInfo([GLOBAL_UBO_COUNT, 0, LOCAL_UBO_COUNT], [GLOBAL_SAMPLER_COUNT, 0, LOCAL_SAMPLER_COUNT], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, LOCAL_STORAGE_IMAGE_COUNT], [0, 0, 0], [0, 2, 1]);
      var UBOGlobal = function UBOGlobal() {};
      UBOGlobal.TIME_OFFSET = 0;
      UBOGlobal.SCREEN_SIZE_OFFSET = UBOGlobal.TIME_OFFSET + 4;
      UBOGlobal.NATIVE_SIZE_OFFSET = UBOGlobal.SCREEN_SIZE_OFFSET + 4;
      UBOGlobal.DEBUG_VIEW_MODE_OFFSET = UBOGlobal.NATIVE_SIZE_OFFSET + 4;
      UBOGlobal.DEBUG_VIEW_COMPOSITE_PACK_1_OFFSET = UBOGlobal.DEBUG_VIEW_MODE_OFFSET + 4;
      UBOGlobal.DEBUG_VIEW_COMPOSITE_PACK_2_OFFSET = UBOGlobal.DEBUG_VIEW_COMPOSITE_PACK_1_OFFSET + 4;
      UBOGlobal.DEBUG_VIEW_COMPOSITE_PACK_3_OFFSET = UBOGlobal.DEBUG_VIEW_COMPOSITE_PACK_2_OFFSET + 4;
      UBOGlobal.COUNT = UBOGlobal.DEBUG_VIEW_COMPOSITE_PACK_3_OFFSET + 4;
      UBOGlobal.SIZE = UBOGlobal.COUNT * 4;
      UBOGlobal.NAME = 'CCGlobal';
      UBOGlobal.BINDING = PipelineGlobalBindings.UBO_GLOBAL;
      UBOGlobal.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOGlobal.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.ALL);
      UBOGlobal.LAYOUT = new UniformBlock(SetIndex.GLOBAL, UBOGlobal.BINDING, UBOGlobal.NAME, [new Uniform('cc_time', Type.FLOAT4, 1), new Uniform('cc_screenSize', Type.FLOAT4, 1), new Uniform('cc_nativeSize', Type.FLOAT4, 1), new Uniform('cc_debug_view_mode', Type.FLOAT, 4), new Uniform('cc_debug_view_composite_pack_1', Type.FLOAT, 4), new Uniform('cc_debug_view_composite_pack_2', Type.FLOAT, 4), new Uniform('cc_debug_view_composite_pack_3', Type.FLOAT, 4)], 1);
      globalDescriptorSetLayout.layouts[UBOGlobal.NAME] = UBOGlobal.LAYOUT;
      globalDescriptorSetLayout.bindings[UBOGlobal.BINDING] = UBOGlobal.DESCRIPTOR;
      var UBOCamera = function UBOCamera() {};
      UBOCamera.MAT_VIEW_OFFSET = 0;
      UBOCamera.MAT_VIEW_INV_OFFSET = UBOCamera.MAT_VIEW_OFFSET + 16;
      UBOCamera.MAT_PROJ_OFFSET = UBOCamera.MAT_VIEW_INV_OFFSET + 16;
      UBOCamera.MAT_PROJ_INV_OFFSET = UBOCamera.MAT_PROJ_OFFSET + 16;
      UBOCamera.MAT_VIEW_PROJ_OFFSET = UBOCamera.MAT_PROJ_INV_OFFSET + 16;
      UBOCamera.MAT_VIEW_PROJ_INV_OFFSET = UBOCamera.MAT_VIEW_PROJ_OFFSET + 16;
      UBOCamera.CAMERA_POS_OFFSET = UBOCamera.MAT_VIEW_PROJ_INV_OFFSET + 16;
      UBOCamera.SURFACE_TRANSFORM_OFFSET = UBOCamera.CAMERA_POS_OFFSET + 4;
      UBOCamera.SCREEN_SCALE_OFFSET = UBOCamera.SURFACE_TRANSFORM_OFFSET + 4;
      UBOCamera.EXPOSURE_OFFSET = UBOCamera.SCREEN_SCALE_OFFSET + 4;
      UBOCamera.MAIN_LIT_DIR_OFFSET = UBOCamera.EXPOSURE_OFFSET + 4;
      UBOCamera.MAIN_LIT_COLOR_OFFSET = UBOCamera.MAIN_LIT_DIR_OFFSET + 4;
      UBOCamera.AMBIENT_SKY_OFFSET = UBOCamera.MAIN_LIT_COLOR_OFFSET + 4;
      UBOCamera.AMBIENT_GROUND_OFFSET = UBOCamera.AMBIENT_SKY_OFFSET + 4;
      UBOCamera.GLOBAL_FOG_COLOR_OFFSET = UBOCamera.AMBIENT_GROUND_OFFSET + 4;
      UBOCamera.GLOBAL_FOG_BASE_OFFSET = UBOCamera.GLOBAL_FOG_COLOR_OFFSET + 4;
      UBOCamera.GLOBAL_FOG_ADD_OFFSET = UBOCamera.GLOBAL_FOG_BASE_OFFSET + 4;
      UBOCamera.NEAR_FAR_OFFSET = UBOCamera.GLOBAL_FOG_ADD_OFFSET + 4;
      UBOCamera.VIEW_PORT_OFFSET = UBOCamera.NEAR_FAR_OFFSET + 4;
      UBOCamera.COUNT = UBOCamera.VIEW_PORT_OFFSET + 4;
      UBOCamera.SIZE = UBOCamera.COUNT * 4;
      UBOCamera.NAME = 'CCCamera';
      UBOCamera.BINDING = PipelineGlobalBindings.UBO_CAMERA;
      UBOCamera.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOCamera.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.ALL);
      UBOCamera.LAYOUT = new UniformBlock(SetIndex.GLOBAL, UBOCamera.BINDING, UBOCamera.NAME, [new Uniform('cc_matView', Type.MAT4, 1), new Uniform('cc_matViewInv', Type.MAT4, 1), new Uniform('cc_matProj', Type.MAT4, 1), new Uniform('cc_matProjInv', Type.MAT4, 1), new Uniform('cc_matViewProj', Type.MAT4, 1), new Uniform('cc_matViewProjInv', Type.MAT4, 1), new Uniform('cc_cameraPos', Type.FLOAT4, 1), new Uniform('cc_surfaceTransform', Type.FLOAT4, 1), new Uniform('cc_screenScale', Type.FLOAT4, 1), new Uniform('cc_exposure', Type.FLOAT4, 1), new Uniform('cc_mainLitDir', Type.FLOAT4, 1), new Uniform('cc_mainLitColor', Type.FLOAT4, 1), new Uniform('cc_ambientSky', Type.FLOAT4, 1), new Uniform('cc_ambientGround', Type.FLOAT4, 1), new Uniform('cc_fogColor', Type.FLOAT4, 1), new Uniform('cc_fogBase', Type.FLOAT4, 1), new Uniform('cc_fogAdd', Type.FLOAT4, 1), new Uniform('cc_nearFar', Type.FLOAT4, 1), new Uniform('cc_viewPort', Type.FLOAT4, 1)], 1);
      globalDescriptorSetLayout.layouts[UBOCamera.NAME] = UBOCamera.LAYOUT;
      globalDescriptorSetLayout.bindings[UBOCamera.BINDING] = UBOCamera.DESCRIPTOR;
      var UBOShadow = function UBOShadow() {};
      UBOShadow.MAT_LIGHT_VIEW_OFFSET = 0;
      UBOShadow.MAT_LIGHT_VIEW_PROJ_OFFSET = UBOShadow.MAT_LIGHT_VIEW_OFFSET + 16;
      UBOShadow.SHADOW_INV_PROJ_DEPTH_INFO_OFFSET = UBOShadow.MAT_LIGHT_VIEW_PROJ_OFFSET + 16;
      UBOShadow.SHADOW_PROJ_DEPTH_INFO_OFFSET = UBOShadow.SHADOW_INV_PROJ_DEPTH_INFO_OFFSET + 4;
      UBOShadow.SHADOW_PROJ_INFO_OFFSET = UBOShadow.SHADOW_PROJ_DEPTH_INFO_OFFSET + 4;
      UBOShadow.SHADOW_NEAR_FAR_LINEAR_SATURATION_INFO_OFFSET = UBOShadow.SHADOW_PROJ_INFO_OFFSET + 4;
      UBOShadow.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET = UBOShadow.SHADOW_NEAR_FAR_LINEAR_SATURATION_INFO_OFFSET + 4;
      UBOShadow.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET = UBOShadow.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET + 4;
      UBOShadow.SHADOW_COLOR_OFFSET = UBOShadow.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET + 4;
      UBOShadow.PLANAR_NORMAL_DISTANCE_INFO_OFFSET = UBOShadow.SHADOW_COLOR_OFFSET + 4;
      UBOShadow.COUNT = UBOShadow.PLANAR_NORMAL_DISTANCE_INFO_OFFSET + 4;
      UBOShadow.SIZE = UBOShadow.COUNT * 4;
      UBOShadow.NAME = 'CCShadow';
      UBOShadow.BINDING = PipelineGlobalBindings.UBO_SHADOW;
      UBOShadow.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOShadow.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.ALL);
      UBOShadow.LAYOUT = new UniformBlock(SetIndex.GLOBAL, UBOShadow.BINDING, UBOShadow.NAME, [new Uniform('cc_matLightView', Type.MAT4, 1), new Uniform('cc_matLightViewProj', Type.MAT4, 1), new Uniform('cc_shadowInvProjDepthInfo', Type.FLOAT4, 1), new Uniform('cc_shadowProjDepthInfo', Type.FLOAT4, 1), new Uniform('cc_shadowProjInfo', Type.FLOAT4, 1), new Uniform('cc_shadowNFLSInfo', Type.FLOAT4, 1), new Uniform('cc_shadowWHPBInfo', Type.FLOAT4, 1), new Uniform('cc_shadowLPNNInfo', Type.FLOAT4, 1), new Uniform('cc_shadowColor', Type.FLOAT4, 1), new Uniform('cc_planarNDInfo', Type.FLOAT4, 1)], 1);
      globalDescriptorSetLayout.layouts[UBOShadow.NAME] = UBOShadow.LAYOUT;
      globalDescriptorSetLayout.bindings[UBOShadow.BINDING] = UBOShadow.DESCRIPTOR;
      var UBOCSM = function UBOCSM() {};
      UBOCSM.CSM_LEVEL_COUNT = 4;
      UBOCSM.CSM_VIEW_DIR_0_OFFSET = 0;
      UBOCSM.CSM_VIEW_DIR_1_OFFSET = UBOCSM.CSM_VIEW_DIR_0_OFFSET + 4 * UBOCSM.CSM_LEVEL_COUNT;
      UBOCSM.CSM_VIEW_DIR_2_OFFSET = UBOCSM.CSM_VIEW_DIR_1_OFFSET + 4 * UBOCSM.CSM_LEVEL_COUNT;
      UBOCSM.CSM_ATLAS_OFFSET = UBOCSM.CSM_VIEW_DIR_2_OFFSET + 4 * UBOCSM.CSM_LEVEL_COUNT;
      UBOCSM.MAT_CSM_VIEW_PROJ_OFFSET = UBOCSM.CSM_ATLAS_OFFSET + 4 * UBOCSM.CSM_LEVEL_COUNT;
      UBOCSM.CSM_PROJ_DEPTH_INFO_OFFSET = UBOCSM.MAT_CSM_VIEW_PROJ_OFFSET + 16 * UBOCSM.CSM_LEVEL_COUNT;
      UBOCSM.CSM_PROJ_INFO_OFFSET = UBOCSM.CSM_PROJ_DEPTH_INFO_OFFSET + 4 * UBOCSM.CSM_LEVEL_COUNT;
      UBOCSM.CSM_SPLITS_INFO_OFFSET = UBOCSM.CSM_PROJ_INFO_OFFSET + 4 * UBOCSM.CSM_LEVEL_COUNT;
      UBOCSM.COUNT = UBOCSM.CSM_SPLITS_INFO_OFFSET + 4;
      UBOCSM.SIZE = UBOCSM.COUNT * 4;
      UBOCSM.NAME = 'CCCSM';
      UBOCSM.BINDING = PipelineGlobalBindings.UBO_CSM;
      UBOCSM.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOCSM.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.FRAGMENT);
      UBOCSM.LAYOUT = new UniformBlock(SetIndex.GLOBAL, UBOCSM.BINDING, UBOCSM.NAME, [new Uniform('cc_csmViewDir0', Type.FLOAT4, UBOCSM.CSM_LEVEL_COUNT), new Uniform('cc_csmViewDir1', Type.FLOAT4, UBOCSM.CSM_LEVEL_COUNT), new Uniform('cc_csmViewDir2', Type.FLOAT4, UBOCSM.CSM_LEVEL_COUNT), new Uniform('cc_csmAtlas', Type.FLOAT4, UBOCSM.CSM_LEVEL_COUNT), new Uniform('cc_matCSMViewProj', Type.MAT4, UBOCSM.CSM_LEVEL_COUNT), new Uniform('cc_csmProjDepthInfo', Type.FLOAT4, UBOCSM.CSM_LEVEL_COUNT), new Uniform('cc_csmProjInfo', Type.FLOAT4, UBOCSM.CSM_LEVEL_COUNT), new Uniform('cc_csmSplitsInfo', Type.FLOAT4, 1)], 1);
      globalDescriptorSetLayout.layouts[UBOCSM.NAME] = UBOCSM.LAYOUT;
      globalDescriptorSetLayout.bindings[UBOCSM.BINDING] = UBOCSM.DESCRIPTOR;
      var UNIFORM_SHADOWMAP_NAME = 'cc_shadowMap';
      var UNIFORM_SHADOWMAP_BINDING = PipelineGlobalBindings.SAMPLER_SHADOWMAP;
      var UNIFORM_SHADOWMAP_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_SHADOWMAP_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
      var UNIFORM_SHADOWMAP_LAYOUT = new UniformSamplerTexture(SetIndex.GLOBAL, UNIFORM_SHADOWMAP_BINDING, UNIFORM_SHADOWMAP_NAME, Type.SAMPLER2D, 1);
      globalDescriptorSetLayout.layouts[UNIFORM_SHADOWMAP_NAME] = UNIFORM_SHADOWMAP_LAYOUT;
      globalDescriptorSetLayout.bindings[UNIFORM_SHADOWMAP_BINDING] = UNIFORM_SHADOWMAP_DESCRIPTOR;
      var UNIFORM_ENVIRONMENT_NAME = 'cc_environment';
      var UNIFORM_ENVIRONMENT_BINDING = PipelineGlobalBindings.SAMPLER_ENVIRONMENT;
      var UNIFORM_ENVIRONMENT_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_ENVIRONMENT_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
      var UNIFORM_ENVIRONMENT_LAYOUT = new UniformSamplerTexture(SetIndex.GLOBAL, UNIFORM_ENVIRONMENT_BINDING, UNIFORM_ENVIRONMENT_NAME, Type.SAMPLER_CUBE, 1);
      globalDescriptorSetLayout.layouts[UNIFORM_ENVIRONMENT_NAME] = UNIFORM_ENVIRONMENT_LAYOUT;
      globalDescriptorSetLayout.bindings[UNIFORM_ENVIRONMENT_BINDING] = UNIFORM_ENVIRONMENT_DESCRIPTOR;
      var UNIFORM_DIFFUSEMAP_NAME = 'cc_diffuseMap';
      var UNIFORM_DIFFUSEMAP_BINDING = PipelineGlobalBindings.SAMPLER_DIFFUSEMAP;
      var UNIFORM_DIFFUSEMAP_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_DIFFUSEMAP_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
      var UNIFORM_DIFFUSEMAP_LAYOUT = new UniformSamplerTexture(SetIndex.GLOBAL, UNIFORM_DIFFUSEMAP_BINDING, UNIFORM_DIFFUSEMAP_NAME, Type.SAMPLER_CUBE, 1);
      globalDescriptorSetLayout.layouts[UNIFORM_DIFFUSEMAP_NAME] = UNIFORM_DIFFUSEMAP_LAYOUT;
      globalDescriptorSetLayout.bindings[UNIFORM_DIFFUSEMAP_BINDING] = UNIFORM_DIFFUSEMAP_DESCRIPTOR;
      var UNIFORM_SPOT_SHADOW_MAP_TEXTURE_NAME = 'cc_spotShadowMap';
      var UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING = PipelineGlobalBindings.SAMPLER_SPOT_SHADOW_MAP;
      var UNIFORM_SPOT_SHADOW_MAP_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
      var UNIFORM_SPOT_SHADOW_MAP_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.GLOBAL, UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING, UNIFORM_SPOT_SHADOW_MAP_TEXTURE_NAME, Type.SAMPLER2D, 1);
      globalDescriptorSetLayout.layouts[UNIFORM_SPOT_SHADOW_MAP_TEXTURE_NAME] = UNIFORM_SPOT_SHADOW_MAP_TEXTURE_LAYOUT;
      globalDescriptorSetLayout.bindings[UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING] = UNIFORM_SPOT_SHADOW_MAP_TEXTURE_DESCRIPTOR;
      var UBOLocal = function UBOLocal() {};
      UBOLocal.MAT_WORLD_OFFSET = 0;
      UBOLocal.MAT_WORLD_IT_OFFSET = UBOLocal.MAT_WORLD_OFFSET + 16;
      UBOLocal.LIGHTINGMAP_UVPARAM = UBOLocal.MAT_WORLD_IT_OFFSET + 16;
      UBOLocal.LOCAL_SHADOW_BIAS = UBOLocal.LIGHTINGMAP_UVPARAM + 4;
      UBOLocal.COUNT = UBOLocal.LOCAL_SHADOW_BIAS + 4;
      UBOLocal.SIZE = UBOLocal.COUNT * 4;
      UBOLocal.NAME = 'CCLocal';
      UBOLocal.BINDING = ModelLocalBindings.UBO_LOCAL;
      UBOLocal.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOLocal.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.VERTEX | ShaderStageFlagBit.COMPUTE);
      UBOLocal.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOLocal.BINDING, UBOLocal.NAME, [new Uniform('cc_matWorld', Type.MAT4, 1), new Uniform('cc_matWorldIT', Type.MAT4, 1), new Uniform('cc_lightingMapUVParam', Type.FLOAT4, 1), new Uniform('cc_localShadowBias', Type.FLOAT4, 1)], 1);
      localDescriptorSetLayout.layouts[UBOLocal.NAME] = UBOLocal.LAYOUT;
      localDescriptorSetLayout.bindings[UBOLocal.BINDING] = UBOLocal.DESCRIPTOR;
      var UBOWorldBound = function UBOWorldBound() {};
      UBOWorldBound.WORLD_BOUND_CENTER = 0;
      UBOWorldBound.WORLD_BOUND_HALF_EXTENTS = UBOWorldBound.WORLD_BOUND_CENTER + 4;
      UBOWorldBound.COUNT = UBOWorldBound.WORLD_BOUND_HALF_EXTENTS + 4;
      UBOWorldBound.SIZE = UBOWorldBound.COUNT * 4;
      UBOWorldBound.NAME = 'CCWorldBound';
      UBOWorldBound.BINDING = ModelLocalBindings.UBO_LOCAL;
      UBOWorldBound.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOWorldBound.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.VERTEX | ShaderStageFlagBit.COMPUTE);
      UBOWorldBound.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOWorldBound.BINDING, UBOWorldBound.NAME, [new Uniform('cc_worldBoundCenter', Type.FLOAT4, 1), new Uniform('cc_worldBoundHalfExtents', Type.FLOAT4, 1)], 1);
      localDescriptorSetLayout.layouts[UBOWorldBound.NAME] = UBOWorldBound.LAYOUT;
      localDescriptorSetLayout.bindings[UBOWorldBound.BINDING] = UBOWorldBound.DESCRIPTOR;
      var INST_MAT_WORLD = 'a_matWorld0';
      var INST_SH = 'a_sh_linear_const_r';
      var UBOLocalBatched = function UBOLocalBatched() {};
      UBOLocalBatched.BATCHING_COUNT = 10;
      UBOLocalBatched.MAT_WORLDS_OFFSET = 0;
      UBOLocalBatched.COUNT = 16 * UBOLocalBatched.BATCHING_COUNT;
      UBOLocalBatched.SIZE = UBOLocalBatched.COUNT * 4;
      UBOLocalBatched.NAME = 'CCLocalBatched';
      UBOLocalBatched.BINDING = ModelLocalBindings.UBO_LOCAL;
      UBOLocalBatched.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOLocalBatched.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.VERTEX | ShaderStageFlagBit.COMPUTE);
      UBOLocalBatched.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOLocalBatched.BINDING, UBOLocalBatched.NAME, [new Uniform('cc_matWorlds', Type.MAT4, UBOLocalBatched.BATCHING_COUNT)], 1);
      localDescriptorSetLayout.layouts[UBOLocalBatched.NAME] = UBOLocalBatched.LAYOUT;
      localDescriptorSetLayout.bindings[UBOLocalBatched.BINDING] = UBOLocalBatched.DESCRIPTOR;
      var UBOForwardLight = function UBOForwardLight() {};
      UBOForwardLight.LIGHTS_PER_PASS = 1;
      UBOForwardLight.LIGHT_POS_OFFSET = 0;
      UBOForwardLight.LIGHT_COLOR_OFFSET = UBOForwardLight.LIGHT_POS_OFFSET + UBOForwardLight.LIGHTS_PER_PASS * 4;
      UBOForwardLight.LIGHT_SIZE_RANGE_ANGLE_OFFSET = UBOForwardLight.LIGHT_COLOR_OFFSET + UBOForwardLight.LIGHTS_PER_PASS * 4;
      UBOForwardLight.LIGHT_DIR_OFFSET = UBOForwardLight.LIGHT_SIZE_RANGE_ANGLE_OFFSET + UBOForwardLight.LIGHTS_PER_PASS * 4;
      UBOForwardLight.COUNT = UBOForwardLight.LIGHT_DIR_OFFSET + UBOForwardLight.LIGHTS_PER_PASS * 4;
      UBOForwardLight.SIZE = UBOForwardLight.COUNT * 4;
      UBOForwardLight.NAME = 'CCForwardLight';
      UBOForwardLight.BINDING = ModelLocalBindings.UBO_FORWARD_LIGHTS;
      UBOForwardLight.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOForwardLight.BINDING, DescriptorType.DYNAMIC_UNIFORM_BUFFER, 1, ShaderStageFlagBit.FRAGMENT);
      UBOForwardLight.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOForwardLight.BINDING, UBOForwardLight.NAME, [new Uniform('cc_lightPos', Type.FLOAT4, UBOForwardLight.LIGHTS_PER_PASS), new Uniform('cc_lightColor', Type.FLOAT4, UBOForwardLight.LIGHTS_PER_PASS), new Uniform('cc_lightSizeRangeAngle', Type.FLOAT4, UBOForwardLight.LIGHTS_PER_PASS), new Uniform('cc_lightDir', Type.FLOAT4, UBOForwardLight.LIGHTS_PER_PASS)], 1);
      localDescriptorSetLayout.layouts[UBOForwardLight.NAME] = UBOForwardLight.LAYOUT;
      localDescriptorSetLayout.bindings[UBOForwardLight.BINDING] = UBOForwardLight.DESCRIPTOR;
      var UBODeferredLight = function UBODeferredLight() {};
      UBODeferredLight.LIGHTS_PER_PASS = 10;
      var JOINT_UNIFORM_CAPACITY = 30;
      var UBOSkinningTexture = function UBOSkinningTexture() {};
      UBOSkinningTexture.JOINTS_TEXTURE_INFO_OFFSET = 0;
      UBOSkinningTexture.COUNT = UBOSkinningTexture.JOINTS_TEXTURE_INFO_OFFSET + 4;
      UBOSkinningTexture.SIZE = UBOSkinningTexture.COUNT * 4;
      UBOSkinningTexture.NAME = 'CCSkinningTexture';
      UBOSkinningTexture.BINDING = ModelLocalBindings.UBO_SKINNING_TEXTURE;
      UBOSkinningTexture.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOSkinningTexture.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.VERTEX);
      UBOSkinningTexture.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOSkinningTexture.BINDING, UBOSkinningTexture.NAME, [new Uniform('cc_jointTextureInfo', Type.FLOAT4, 1)], 1);
      localDescriptorSetLayout.layouts[UBOSkinningTexture.NAME] = UBOSkinningTexture.LAYOUT;
      localDescriptorSetLayout.bindings[UBOSkinningTexture.BINDING] = UBOSkinningTexture.DESCRIPTOR;
      var UBOSkinningAnimation = function UBOSkinningAnimation() {};
      UBOSkinningAnimation.JOINTS_ANIM_INFO_OFFSET = 0;
      UBOSkinningAnimation.COUNT = UBOSkinningAnimation.JOINTS_ANIM_INFO_OFFSET + 4;
      UBOSkinningAnimation.SIZE = UBOSkinningAnimation.COUNT * 4;
      UBOSkinningAnimation.NAME = 'CCSkinningAnimation';
      UBOSkinningAnimation.BINDING = ModelLocalBindings.UBO_SKINNING_ANIMATION;
      UBOSkinningAnimation.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOSkinningAnimation.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.VERTEX);
      UBOSkinningAnimation.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOSkinningAnimation.BINDING, UBOSkinningAnimation.NAME, [new Uniform('cc_jointAnimInfo', Type.FLOAT4, 1)], 1);
      localDescriptorSetLayout.layouts[UBOSkinningAnimation.NAME] = UBOSkinningAnimation.LAYOUT;
      localDescriptorSetLayout.bindings[UBOSkinningAnimation.BINDING] = UBOSkinningAnimation.DESCRIPTOR;
      var INST_JOINT_ANIM_INFO = 'a_jointAnimInfo';
      var UBOSkinning = function () {
        function UBOSkinning() {}

        UBOSkinning.initLayout = function initLayout(capacity) {
          UBOSkinning._jointUniformCapacity = capacity;
          UBOSkinning._count = capacity * 12;
          UBOSkinning._size = UBOSkinning._count * 4;
          UBOSkinning.LAYOUT.members[0].count = capacity * 3;
        };

        _createClass(UBOSkinning, null, [{
          key: "JOINT_UNIFORM_CAPACITY",
          get: function get() {
            return UBOSkinning._jointUniformCapacity;
          }
        }, {
          key: "COUNT",
          get: function get() {
            return UBOSkinning._count;
          }
        }, {
          key: "SIZE",
          get: function get() {
            return UBOSkinning._size;
          }
        }]);

        return UBOSkinning;
      }();
      UBOSkinning._jointUniformCapacity = 0;
      UBOSkinning._count = 0;
      UBOSkinning._size = 0;
      UBOSkinning.NAME = 'CCSkinning';
      UBOSkinning.BINDING = ModelLocalBindings.UBO_SKINNING_TEXTURE;
      UBOSkinning.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOSkinning.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.VERTEX);
      UBOSkinning.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOSkinning.BINDING, UBOSkinning.NAME, [new Uniform('cc_joints', Type.FLOAT4, 1)], 1);
      function localDescriptorSetLayout_ResizeMaxJoints(maxCount) {
        UBOSkinning.initLayout(maxCount);
        localDescriptorSetLayout.layouts[UBOSkinning.NAME] = UBOSkinning.LAYOUT;
        localDescriptorSetLayout.bindings[UBOSkinning.BINDING] = UBOSkinning.DESCRIPTOR;
      }
      var UBOMorph = function UBOMorph() {};
      UBOMorph.MAX_MORPH_TARGET_COUNT = 60;
      UBOMorph.OFFSET_OF_WEIGHTS = 0;
      UBOMorph.OFFSET_OF_DISPLACEMENT_TEXTURE_WIDTH = 4 * UBOMorph.MAX_MORPH_TARGET_COUNT;
      UBOMorph.OFFSET_OF_DISPLACEMENT_TEXTURE_HEIGHT = UBOMorph.OFFSET_OF_DISPLACEMENT_TEXTURE_WIDTH + 4;
      UBOMorph.OFFSET_OF_VERTICES_COUNT = UBOMorph.OFFSET_OF_DISPLACEMENT_TEXTURE_HEIGHT + 4;
      UBOMorph.COUNT_BASE_4_BYTES = 4 * Math.ceil(UBOMorph.MAX_MORPH_TARGET_COUNT / 4) + 4;
      UBOMorph.SIZE = UBOMorph.COUNT_BASE_4_BYTES * 4;
      UBOMorph.NAME = 'CCMorph';
      UBOMorph.BINDING = ModelLocalBindings.UBO_MORPH;
      UBOMorph.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOMorph.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.VERTEX);
      UBOMorph.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOMorph.BINDING, UBOMorph.NAME, [new Uniform('cc_displacementWeights', Type.FLOAT4, UBOMorph.MAX_MORPH_TARGET_COUNT / 4), new Uniform('cc_displacementTextureInfo', Type.FLOAT4, 1)], 1);
      localDescriptorSetLayout.layouts[UBOMorph.NAME] = UBOMorph.LAYOUT;
      localDescriptorSetLayout.bindings[UBOMorph.BINDING] = UBOMorph.DESCRIPTOR;
      var UBOUILocal = function UBOUILocal() {};
      UBOUILocal.NAME = 'CCUILocal';
      UBOUILocal.BINDING = ModelLocalBindings.UBO_UI_LOCAL;
      UBOUILocal.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOUILocal.BINDING, DescriptorType.DYNAMIC_UNIFORM_BUFFER, 1, ShaderStageFlagBit.VERTEX);
      UBOUILocal.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOUILocal.BINDING, UBOUILocal.NAME, [new Uniform('cc_local_data', Type.FLOAT4, 1)], 1);
      localDescriptorSetLayout.layouts[UBOUILocal.NAME] = UBOUILocal.LAYOUT;
      localDescriptorSetLayout.bindings[UBOUILocal.BINDING] = UBOUILocal.DESCRIPTOR;
      var UBOSH = function UBOSH() {};
      UBOSH.SH_LINEAR_CONST_R_OFFSET = 0;
      UBOSH.SH_LINEAR_CONST_G_OFFSET = UBOSH.SH_LINEAR_CONST_R_OFFSET + 4;
      UBOSH.SH_LINEAR_CONST_B_OFFSET = UBOSH.SH_LINEAR_CONST_G_OFFSET + 4;
      UBOSH.SH_QUADRATIC_R_OFFSET = UBOSH.SH_LINEAR_CONST_B_OFFSET + 4;
      UBOSH.SH_QUADRATIC_G_OFFSET = UBOSH.SH_QUADRATIC_R_OFFSET + 4;
      UBOSH.SH_QUADRATIC_B_OFFSET = UBOSH.SH_QUADRATIC_G_OFFSET + 4;
      UBOSH.SH_QUADRATIC_A_OFFSET = UBOSH.SH_QUADRATIC_B_OFFSET + 4;
      UBOSH.COUNT = UBOSH.SH_QUADRATIC_A_OFFSET + 4;
      UBOSH.SIZE = UBOSH.COUNT * 4;
      UBOSH.NAME = 'CCSH';
      UBOSH.BINDING = ModelLocalBindings.UBO_SH;
      UBOSH.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOSH.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.FRAGMENT);
      UBOSH.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOSH.BINDING, UBOSH.NAME, [new Uniform('cc_sh_linear_const_r', Type.FLOAT4, 1), new Uniform('cc_sh_linear_const_g', Type.FLOAT4, 1), new Uniform('cc_sh_linear_const_b', Type.FLOAT4, 1), new Uniform('cc_sh_quadratic_r', Type.FLOAT4, 1), new Uniform('cc_sh_quadratic_g', Type.FLOAT4, 1), new Uniform('cc_sh_quadratic_b', Type.FLOAT4, 1), new Uniform('cc_sh_quadratic_a', Type.FLOAT4, 1)], 1);
      localDescriptorSetLayout.layouts[UBOSH.NAME] = UBOSH.LAYOUT;
      localDescriptorSetLayout.bindings[UBOSH.BINDING] = UBOSH.DESCRIPTOR;
      var UNIFORM_JOINT_TEXTURE_NAME = 'cc_jointTexture';
      var UNIFORM_JOINT_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_JOINTS;
      var UNIFORM_JOINT_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_JOINT_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.VERTEX);
      var UNIFORM_JOINT_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_JOINT_TEXTURE_BINDING, UNIFORM_JOINT_TEXTURE_NAME, Type.SAMPLER2D, 1);
      localDescriptorSetLayout.layouts[UNIFORM_JOINT_TEXTURE_NAME] = UNIFORM_JOINT_TEXTURE_LAYOUT;
      localDescriptorSetLayout.bindings[UNIFORM_JOINT_TEXTURE_BINDING] = UNIFORM_JOINT_TEXTURE_DESCRIPTOR;
      var UNIFORM_REALTIME_JOINT_TEXTURE_NAME = 'cc_realtimeJoint';
      var UNIFORM_REALTIME_JOINT_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_JOINTS;
      var UNIFORM_REALTIME_JOINT_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_REALTIME_JOINT_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.VERTEX);
      var UNIFORM_REALTIME_JOINT_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_REALTIME_JOINT_TEXTURE_BINDING, UNIFORM_REALTIME_JOINT_TEXTURE_NAME, Type.SAMPLER2D, 1);
      localDescriptorSetLayout.layouts[UNIFORM_REALTIME_JOINT_TEXTURE_NAME] = UNIFORM_REALTIME_JOINT_TEXTURE_LAYOUT;
      localDescriptorSetLayout.bindings[UNIFORM_REALTIME_JOINT_TEXTURE_BINDING] = UNIFORM_REALTIME_JOINT_TEXTURE_DESCRIPTOR;
      var UNIFORM_POSITION_MORPH_TEXTURE_NAME = 'cc_PositionDisplacements';
      var UNIFORM_POSITION_MORPH_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_MORPH_POSITION;
      var UNIFORM_POSITION_MORPH_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_POSITION_MORPH_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.VERTEX);
      var UNIFORM_POSITION_MORPH_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_POSITION_MORPH_TEXTURE_BINDING, UNIFORM_POSITION_MORPH_TEXTURE_NAME, Type.SAMPLER2D, 1);
      localDescriptorSetLayout.layouts[UNIFORM_POSITION_MORPH_TEXTURE_NAME] = UNIFORM_POSITION_MORPH_TEXTURE_LAYOUT;
      localDescriptorSetLayout.bindings[UNIFORM_POSITION_MORPH_TEXTURE_BINDING] = UNIFORM_POSITION_MORPH_TEXTURE_DESCRIPTOR;
      var UNIFORM_NORMAL_MORPH_TEXTURE_NAME = 'cc_NormalDisplacements';
      var UNIFORM_NORMAL_MORPH_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_MORPH_NORMAL;
      var UNIFORM_NORMAL_MORPH_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_NORMAL_MORPH_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.VERTEX);
      var UNIFORM_NORMAL_MORPH_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_NORMAL_MORPH_TEXTURE_BINDING, UNIFORM_NORMAL_MORPH_TEXTURE_NAME, Type.SAMPLER2D, 1);
      localDescriptorSetLayout.layouts[UNIFORM_NORMAL_MORPH_TEXTURE_NAME] = UNIFORM_NORMAL_MORPH_TEXTURE_LAYOUT;
      localDescriptorSetLayout.bindings[UNIFORM_NORMAL_MORPH_TEXTURE_BINDING] = UNIFORM_NORMAL_MORPH_TEXTURE_DESCRIPTOR;
      var UNIFORM_TANGENT_MORPH_TEXTURE_NAME = 'cc_TangentDisplacements';
      var UNIFORM_TANGENT_MORPH_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_MORPH_TANGENT;
      var UNIFORM_TANGENT_MORPH_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_TANGENT_MORPH_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.VERTEX);
      var UNIFORM_TANGENT_MORPH_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_TANGENT_MORPH_TEXTURE_BINDING, UNIFORM_TANGENT_MORPH_TEXTURE_NAME, Type.SAMPLER2D, 1);
      localDescriptorSetLayout.layouts[UNIFORM_TANGENT_MORPH_TEXTURE_NAME] = UNIFORM_TANGENT_MORPH_TEXTURE_LAYOUT;
      localDescriptorSetLayout.bindings[UNIFORM_TANGENT_MORPH_TEXTURE_BINDING] = UNIFORM_TANGENT_MORPH_TEXTURE_DESCRIPTOR;
      var UNIFORM_LIGHTMAP_TEXTURE_NAME = 'cc_lightingMap';
      var UNIFORM_LIGHTMAP_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_LIGHTMAP;
      var UNIFORM_LIGHTMAP_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_LIGHTMAP_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
      var UNIFORM_LIGHTMAP_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_LIGHTMAP_TEXTURE_BINDING, UNIFORM_LIGHTMAP_TEXTURE_NAME, Type.SAMPLER2D, 1);
      localDescriptorSetLayout.layouts[UNIFORM_LIGHTMAP_TEXTURE_NAME] = UNIFORM_LIGHTMAP_TEXTURE_LAYOUT;
      localDescriptorSetLayout.bindings[UNIFORM_LIGHTMAP_TEXTURE_BINDING] = UNIFORM_LIGHTMAP_TEXTURE_DESCRIPTOR;
      var UNIFORM_SPRITE_TEXTURE_NAME = 'cc_spriteTexture';
      var UNIFORM_SPRITE_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_SPRITE;
      var UNIFORM_SPRITE_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_SPRITE_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
      var UNIFORM_SPRITE_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_SPRITE_TEXTURE_BINDING, UNIFORM_SPRITE_TEXTURE_NAME, Type.SAMPLER2D, 1);
      localDescriptorSetLayout.layouts[UNIFORM_SPRITE_TEXTURE_NAME] = UNIFORM_SPRITE_TEXTURE_LAYOUT;
      localDescriptorSetLayout.bindings[UNIFORM_SPRITE_TEXTURE_BINDING] = UNIFORM_SPRITE_TEXTURE_DESCRIPTOR;
      var UNIFORM_REFLECTION_TEXTURE_NAME = 'cc_reflectionTexture';
      var UNIFORM_REFLECTION_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_REFLECTION;
      var UNIFORM_REFLECTION_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_REFLECTION_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
      var UNIFORM_REFLECTION_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_REFLECTION_TEXTURE_BINDING, UNIFORM_REFLECTION_TEXTURE_NAME, Type.SAMPLER2D, 1);
      localDescriptorSetLayout.layouts[UNIFORM_REFLECTION_TEXTURE_NAME] = UNIFORM_REFLECTION_TEXTURE_LAYOUT;
      localDescriptorSetLayout.bindings[UNIFORM_REFLECTION_TEXTURE_BINDING] = UNIFORM_REFLECTION_TEXTURE_DESCRIPTOR;
      var UNIFORM_REFLECTION_STORAGE_NAME = 'cc_reflectionStorage';
      var UNIFORM_REFLECTION_STORAGE_BINDING = ModelLocalBindings.STORAGE_REFLECTION;
      var UNIFORM_REFLECTION_STORAGE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_REFLECTION_STORAGE_BINDING, DescriptorType.STORAGE_IMAGE, 1, ShaderStageFlagBit.COMPUTE);
      var UNIFORM_REFLECTION_STORAGE_LAYOUT = new UniformStorageImage(SetIndex.LOCAL, UNIFORM_REFLECTION_STORAGE_BINDING, UNIFORM_REFLECTION_STORAGE_NAME, Type.IMAGE2D, 1);
      localDescriptorSetLayout.layouts[UNIFORM_REFLECTION_STORAGE_NAME] = UNIFORM_REFLECTION_STORAGE_LAYOUT;
      localDescriptorSetLayout.bindings[UNIFORM_REFLECTION_STORAGE_BINDING] = UNIFORM_REFLECTION_STORAGE_DESCRIPTOR;
      var UNIFORM_REFLECTION_PROBE_CUBEMAP_NAME = 'cc_reflectionProbeCubemap';
      var UNIFORM_REFLECTION_PROBE_CUBEMAP_BINDING = ModelLocalBindings.SAMPLER_REFLECTION_PROBE_CUBE;
      var UNIFORM_REFLECTION_PROBE_CUBEMAP_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_REFLECTION_PROBE_CUBEMAP_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
      var UNIFORM_REFLECTION_PROBE_CUBEMAP_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_REFLECTION_PROBE_CUBEMAP_BINDING, UNIFORM_REFLECTION_PROBE_CUBEMAP_NAME, Type.SAMPLER_CUBE, 1);
      localDescriptorSetLayout.layouts[UNIFORM_REFLECTION_PROBE_CUBEMAP_NAME] = UNIFORM_REFLECTION_PROBE_CUBEMAP_LAYOUT;
      localDescriptorSetLayout.bindings[UNIFORM_REFLECTION_PROBE_CUBEMAP_BINDING] = UNIFORM_REFLECTION_PROBE_CUBEMAP_DESCRIPTOR;
      var UNIFORM_REFLECTION_PROBE_TEXTURE_NAME = 'cc_reflectionProbePlanarMap';
      var UNIFORM_REFLECTION_PROBE_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_REFLECTION_PROBE_PLANAR;
      var UNIFORM_REFLECTION_PROBE_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_REFLECTION_PROBE_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
      var UNIFORM_REFLECTION_PROBE_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_REFLECTION_PROBE_TEXTURE_BINDING, UNIFORM_REFLECTION_PROBE_TEXTURE_NAME, Type.SAMPLER2D, 1);
      localDescriptorSetLayout.layouts[UNIFORM_REFLECTION_PROBE_TEXTURE_NAME] = UNIFORM_REFLECTION_PROBE_TEXTURE_LAYOUT;
      localDescriptorSetLayout.bindings[UNIFORM_REFLECTION_PROBE_TEXTURE_BINDING] = UNIFORM_REFLECTION_PROBE_TEXTURE_DESCRIPTOR;
      var CAMERA_DEFAULT_MASK = Layers.makeMaskExclude([Layers.BitMask.UI_2D, Layers.BitMask.GIZMOS, Layers.BitMask.EDITOR, Layers.BitMask.SCENE_GIZMO, Layers.BitMask.PROFILER]);
      var CAMERA_EDITOR_MASK = Layers.makeMaskExclude([Layers.BitMask.UI_2D, Layers.BitMask.PROFILER]);
      var MODEL_ALWAYS_MASK = Layers.Enum.ALL;
      function supportsR16HalfFloatTexture(device) {
        return (device.getFormatFeatures(Format.R16F) & (FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE)) === (FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE);
      }
      function supportsR32FloatTexture(device) {
        return (device.getFormatFeatures(Format.R32F) & (FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE)) === (FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE) && !(device.gfxAPI === API.WEBGL);
      }
      function isEnableEffect() {
        return !!(legacyCC.rendering && legacyCC.rendering.enableEffectImport);
      }

      var define$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        PIPELINE_FLOW_MAIN: PIPELINE_FLOW_MAIN,
        PIPELINE_FLOW_FORWARD: PIPELINE_FLOW_FORWARD,
        PIPELINE_FLOW_SHADOW: PIPELINE_FLOW_SHADOW,
        PIPELINE_FLOW_SMAA: PIPELINE_FLOW_SMAA,
        PIPELINE_FLOW_TONEMAP: PIPELINE_FLOW_TONEMAP,
        get RenderPassStage () { return RenderPassStage; },
        get RenderPriority () { return RenderPriority; },
        globalDescriptorSetLayout: globalDescriptorSetLayout,
        localDescriptorSetLayout: localDescriptorSetLayout,
        get PipelineGlobalBindings () { return PipelineGlobalBindings; },
        get ModelLocalBindings () { return ModelLocalBindings; },
        get SetIndex () { return SetIndex; },
        bindingMappingInfo: bindingMappingInfo,
        UBOGlobal: UBOGlobal,
        UBOCamera: UBOCamera,
        UBOShadow: UBOShadow,
        UBOCSM: UBOCSM,
        UNIFORM_SHADOWMAP_BINDING: UNIFORM_SHADOWMAP_BINDING,
        UNIFORM_ENVIRONMENT_BINDING: UNIFORM_ENVIRONMENT_BINDING,
        UNIFORM_DIFFUSEMAP_BINDING: UNIFORM_DIFFUSEMAP_BINDING,
        UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING: UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING,
        UBOLocal: UBOLocal,
        UBOWorldBound: UBOWorldBound,
        INST_MAT_WORLD: INST_MAT_WORLD,
        INST_SH: INST_SH,
        UBOLocalBatched: UBOLocalBatched,
        UBOForwardLight: UBOForwardLight,
        UBODeferredLight: UBODeferredLight,
        JOINT_UNIFORM_CAPACITY: JOINT_UNIFORM_CAPACITY,
        UBOSkinningTexture: UBOSkinningTexture,
        UBOSkinningAnimation: UBOSkinningAnimation,
        INST_JOINT_ANIM_INFO: INST_JOINT_ANIM_INFO,
        UBOSkinning: UBOSkinning,
        localDescriptorSetLayout_ResizeMaxJoints: localDescriptorSetLayout_ResizeMaxJoints,
        UBOMorph: UBOMorph,
        UBOUILocal: UBOUILocal,
        UBOSH: UBOSH,
        UNIFORM_JOINT_TEXTURE_BINDING: UNIFORM_JOINT_TEXTURE_BINDING,
        UNIFORM_REALTIME_JOINT_TEXTURE_BINDING: UNIFORM_REALTIME_JOINT_TEXTURE_BINDING,
        UNIFORM_POSITION_MORPH_TEXTURE_BINDING: UNIFORM_POSITION_MORPH_TEXTURE_BINDING,
        UNIFORM_NORMAL_MORPH_TEXTURE_BINDING: UNIFORM_NORMAL_MORPH_TEXTURE_BINDING,
        UNIFORM_TANGENT_MORPH_TEXTURE_BINDING: UNIFORM_TANGENT_MORPH_TEXTURE_BINDING,
        UNIFORM_LIGHTMAP_TEXTURE_BINDING: UNIFORM_LIGHTMAP_TEXTURE_BINDING,
        UNIFORM_SPRITE_TEXTURE_BINDING: UNIFORM_SPRITE_TEXTURE_BINDING,
        UNIFORM_REFLECTION_TEXTURE_BINDING: UNIFORM_REFLECTION_TEXTURE_BINDING,
        UNIFORM_REFLECTION_STORAGE_BINDING: UNIFORM_REFLECTION_STORAGE_BINDING,
        UNIFORM_REFLECTION_PROBE_CUBEMAP_BINDING: UNIFORM_REFLECTION_PROBE_CUBEMAP_BINDING,
        UNIFORM_REFLECTION_PROBE_TEXTURE_BINDING: UNIFORM_REFLECTION_PROBE_TEXTURE_BINDING,
        CAMERA_DEFAULT_MASK: CAMERA_DEFAULT_MASK,
        CAMERA_EDITOR_MASK: CAMERA_EDITOR_MASK,
        MODEL_ALWAYS_MASK: MODEL_ALWAYS_MASK,
        supportsR16HalfFloatTexture: supportsR16HalfFloatTexture,
        supportsR32FloatTexture: supportsR32FloatTexture,
        isEnableEffect: isEnableEffect
      });
      exports('pipeline', define$1);

      var _type2reader, _type2writer, _type2validator;
      var typeMask = 0xfc000000;
      var bindingMask = 0x03f00000;
      var countMask = 0x000ff000;
      var offsetMask = 0x00000fff;
      var genHandle = function genHandle(binding, type, count, offset) {
        if (offset === void 0) {
          offset = 0;
        }

        return type << 26 & typeMask | binding << 20 & bindingMask | count << 12 & countMask | offset & offsetMask;
      };
      var getTypeFromHandle = function getTypeFromHandle(handle) {
        return (handle & typeMask) >>> 26;
      };
      var getBindingFromHandle = function getBindingFromHandle(handle) {
        return (handle & bindingMask) >>> 20;
      };
      var getCountFromHandle = function getCountFromHandle(handle) {
        return (handle & countMask) >>> 12;
      };
      var getOffsetFromHandle = function getOffsetFromHandle(handle) {
        return handle & offsetMask;
      };
      var customizeType = function customizeType(handle, type) {
        return handle & ~typeMask | type << 26 & typeMask;
      };
      var type2reader = (_type2reader = {}, _type2reader[Type.UNKNOWN] = function (a, v, idx) {
        if (idx === void 0) {
          idx = 0;
        }

        return warnID(12010, idx);
      }, _type2reader[Type.INT] = function (a, v, idx) {
        if (idx === void 0) {
          idx = 0;
        }

        return a[idx];
      }, _type2reader[Type.INT2] = function (a, v, idx) {
        if (idx === void 0) {
          idx = 0;
        }

        return Vec2.fromArray(v, a, idx);
      }, _type2reader[Type.INT3] = function (a, v, idx) {
        if (idx === void 0) {
          idx = 0;
        }

        return Vec3.fromArray(v, a, idx);
      }, _type2reader[Type.INT4] = function (a, v, idx) {
        if (idx === void 0) {
          idx = 0;
        }

        return Vec4.fromArray(v, a, idx);
      }, _type2reader[Type.FLOAT] = function (a, v, idx) {
        if (idx === void 0) {
          idx = 0;
        }

        return a[idx];
      }, _type2reader[Type.FLOAT2] = function (a, v, idx) {
        if (idx === void 0) {
          idx = 0;
        }

        return Vec2.fromArray(v, a, idx);
      }, _type2reader[Type.FLOAT3] = function (a, v, idx) {
        if (idx === void 0) {
          idx = 0;
        }

        return Vec3.fromArray(v, a, idx);
      }, _type2reader[Type.FLOAT4] = function (a, v, idx) {
        if (idx === void 0) {
          idx = 0;
        }

        return Vec4.fromArray(v, a, idx);
      }, _type2reader[Type.MAT3] = function (a, v, idx) {
        if (idx === void 0) {
          idx = 0;
        }

        return Mat3.fromArray(v, a, idx);
      }, _type2reader[Type.MAT4] = function (a, v, idx) {
        if (idx === void 0) {
          idx = 0;
        }

        return Mat4.fromArray(v, a, idx);
      }, _type2reader);
      var type2writer = (_type2writer = {}, _type2writer[Type.UNKNOWN] = function (a, v, idx) {
        if (idx === void 0) {
          idx = 0;
        }

        return warnID(12010, idx);
      }, _type2writer[Type.INT] = function (a, v, idx) {
        if (idx === void 0) {
          idx = 0;
        }

        return a[idx] = v;
      }, _type2writer[Type.INT2] = function (a, v, idx) {
        if (idx === void 0) {
          idx = 0;
        }

        return Vec2.toArray(a, v, idx);
      }, _type2writer[Type.INT3] = function (a, v, idx) {
        if (idx === void 0) {
          idx = 0;
        }

        return Vec3.toArray(a, v, idx);
      }, _type2writer[Type.INT4] = function (a, v, idx) {
        if (idx === void 0) {
          idx = 0;
        }

        return Vec4.toArray(a, v, idx);
      }, _type2writer[Type.FLOAT] = function (a, v, idx) {
        if (idx === void 0) {
          idx = 0;
        }

        return a[idx] = v;
      }, _type2writer[Type.FLOAT2] = function (a, v, idx) {
        if (idx === void 0) {
          idx = 0;
        }

        return Vec2.toArray(a, v, idx);
      }, _type2writer[Type.FLOAT3] = function (a, v, idx) {
        if (idx === void 0) {
          idx = 0;
        }

        return Vec3.toArray(a, v, idx);
      }, _type2writer[Type.FLOAT4] = function (a, v, idx) {
        if (idx === void 0) {
          idx = 0;
        }

        return Vec4.toArray(a, v, idx);
      }, _type2writer[Type.MAT3] = function (a, v, idx) {
        if (idx === void 0) {
          idx = 0;
        }

        return Mat3.toArray(a, v, idx);
      }, _type2writer[Type.MAT4] = function (a, v, idx) {
        if (idx === void 0) {
          idx = 0;
        }

        return Mat4.toArray(a, v, idx);
      }, _type2writer);
      var type2validator = (_type2validator = {}, _type2validator[Type.INT] = function (v) {
        return typeof v === 'number';
      }, _type2validator[Type.FLOAT] = function (v) {
        return typeof v === 'number';
      }, _type2validator[Type.INT2] = function (v) {
        return !!(v instanceof Vec2);
      }, _type2validator[Type.FLOAT2] = function (v) {
        return !!(v instanceof Vec2);
      }, _type2validator[Type.INT3] = function (v) {
        return !!(v instanceof Vec3);
      }, _type2validator[Type.FLOAT3] = function (v) {
        return !!(v instanceof Vec3);
      }, _type2validator[Type.INT4] = function (v) {
        return !!(v instanceof Vec4);
      }, _type2validator[Type.FLOAT4] = function (v) {
        return !!(v instanceof Vec4 || v instanceof Color || v instanceof Quat);
      }, _type2validator[Type.MAT3] = function (v) {
        return !!(v instanceof Mat3);
      }, _type2validator[Type.MAT4] = function (v) {
        return !!(v instanceof Mat4);
      }, _type2validator);
      var defaultValues = [Object.freeze([0]), Object.freeze([0, 0]), Object.freeze([0, 0, 0, 0]), Object.freeze([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1])];
      function getDefaultFromType(type) {
        switch (type) {
          case Type.BOOL:
          case Type.INT:
          case Type.UINT:
          case Type.FLOAT:
            return defaultValues[0];

          case Type.BOOL2:
          case Type.INT2:
          case Type.UINT2:
          case Type.FLOAT2:
            return defaultValues[1];

          case Type.BOOL4:
          case Type.INT4:
          case Type.UINT4:
          case Type.FLOAT4:
            return defaultValues[2];

          case Type.MAT4:
            return defaultValues[3];

          case Type.SAMPLER2D:
            return 'default-texture';

          case Type.SAMPLER_CUBE:
            return 'default-cube-texture';

          case Type.SAMPLER2D_ARRAY:
            return 'default-array-texture';

          case Type.SAMPLER3D:
            return 'default-3d-texture';
        }

        return defaultValues[0];
      }
      function getStringFromType(type) {
        switch (type) {
          case Type.SAMPLER2D:
            return '-texture';

          case Type.SAMPLER_CUBE:
            return '-cube-texture';

          case Type.SAMPLER2D_ARRAY:
            return '-array-texture';

          case Type.SAMPLER3D:
            return '-3d-texture';

          default:
            return '-unknown';
        }
      }
      function overrideMacros(target, source) {
        var entries = Object.entries(source);
        var isDifferent = false;

        for (var i = 0; i < entries.length; i++) {
          if (target[entries[i][0]] !== entries[i][1]) {
            target[entries[i][0]] = entries[i][1];
            isDifferent = true;
          }
        }

        return isDifferent;
      }

      function mapDefine(info, def) {
        switch (info.type) {
          case 'boolean':
            return typeof def === 'number' ? def.toString() : def ? '1' : '0';

          case 'string':
            return def !== undefined ? def : info.options[0];

          case 'number':
            return def !== undefined ? def.toString() : info.range[0].toString();

          default:
            console.warn("unknown define type '" + info.type + "'");
            return '-1';
        }
      }

      function prepareDefines(defs, tDefs) {
        var macros = [];

        for (var i = 0; i < tDefs.length; i++) {
          var tmpl = tDefs[i];
          var name = tmpl.name;
          var v = defs[name];
          var value = mapDefine(tmpl, v);
          var isDefault = !v || v === '0';
          macros.push({
            name: name,
            value: value,
            isDefault: isDefault
          });
        }

        return macros;
      }
      function getShaderInstanceName(name, macros) {
        return name + macros.reduce(function (acc, cur) {
          return cur.isDefault ? acc : acc + "|" + cur.name + cur.value;
        }, '');
      }

      function dependencyCheck(dependencies, defines) {
        for (var i = 0; i < dependencies.length; i++) {
          var d = dependencies[i];

          if (d[0] === '!') {
            if (defines[d.slice(1)]) {
              return false;
            }
          } else if (!defines[d]) {
            return false;
          }
        }

        return true;
      }

      function getActiveAttributes(tmpl, gfxAttributes, defines) {
        var out = [];
        var attributes = tmpl.attributes;

        for (var i = 0; i < attributes.length; i++) {
          if (!dependencyCheck(attributes[i].defines, defines)) {
            continue;
          }

          out.push(gfxAttributes[i]);
        }

        return out;
      }
      function getVariantKey(programInfo, defines) {
        var tmplDefs = programInfo.defines;

        if (programInfo.uber) {
          var _key = '';

          for (var i = 0; i < tmplDefs.length; i++) {
            var tmplDef = tmplDefs[i];
            var value = defines[tmplDef.name];

            if (!value || !tmplDef._map) {
              continue;
            }

            var mapped = tmplDef._map(value);

            var offset = tmplDef._offset;
            _key += "" + offset + mapped + "|";
          }

          return "" + _key + programInfo.hash;
        }

        var key = 0;

        for (var _i = 0; _i < tmplDefs.length; _i++) {
          var _tmplDef = tmplDefs[_i];
          var _value = defines[_tmplDef.name];

          if (!_value || !_tmplDef._map) {
            continue;
          }

          var _mapped = _tmplDef._map(_value);

          var _offset = _tmplDef._offset;
          key |= _mapped << _offset;
        }

        return key.toString(16) + "|" + programInfo.hash;
      }
      var defaultUniformCounts = new Map();
      defaultUniformCounts.set('cc_joints', UBOSkinning.LAYOUT.members[0].count);
      defaultUniformCounts.set('cc_lightPos', UBOForwardLight.LIGHTS_PER_PASS);
      defaultUniformCounts.set('cc_lightColor', UBOForwardLight.LIGHTS_PER_PASS);
      defaultUniformCounts.set('cc_lightSizeRangeAngle', UBOForwardLight.LIGHTS_PER_PASS);
      defaultUniformCounts.set('cc_lightDir', UBOForwardLight.LIGHTS_PER_PASS);

      function getUniformSize(prevSize, m) {
        if (m.count) {
          return prevSize + GetTypeSize(m.type) * m.count;
        } else {
          var count = defaultUniformCounts.get(m.name);

          if (count !== undefined) {
            return prevSize + GetTypeSize(m.type) * count;
          }

          console.error("uniform '" + m.name + "' must have a count");
        }

        return prevSize;
      }

      function getSize(blockMembers) {
        return blockMembers.reduce(getUniformSize, 0);
      }
      function genHandles(tmpl) {
        var handleMap = {};

        for (var i = 0; i < tmpl.blocks.length; i++) {
          var block = tmpl.blocks[i];
          var members = block.members;
          var offset = 0;

          for (var j = 0; j < members.length; j++) {
            var uniform = members[j];
            handleMap[uniform.name] = genHandle(block.binding, uniform.type, uniform.count, offset);
            offset += (GetTypeSize(uniform.type) >> 2) * uniform.count;
          }
        }

        for (var _i2 = 0; _i2 < tmpl.samplerTextures.length; _i2++) {
          var samplerTexture = tmpl.samplerTextures[_i2];
          handleMap[samplerTexture.name] = genHandle(samplerTexture.binding, samplerTexture.type, samplerTexture.count);
        }

        return handleMap;
      }

      function getBitCount(cnt) {
        return Math.ceil(Math.log2(Math.max(cnt, 2)));
      }

      function populateMacros(tmpl) {
        var offset = 0;

        var _loop = function _loop(i) {
          var def = tmpl.defines[i];
          var cnt = 1;

          if (def.type === 'number') {
            var range = def.range;
            cnt = getBitCount(range[1] - range[0] + 1);

            def._map = function (value) {
              return value - range[0];
            };
          } else if (def.type === 'string') {
            cnt = getBitCount(def.options.length);

            def._map = function (value) {
              return Math.max(0, def.options.findIndex(function (s) {
                return s === value;
              }));
            };
          } else if (def.type === 'boolean') {
            def._map = function (value) {
              return value ? 1 : 0;
            };
          }

          def._offset = offset;
          offset += cnt;
        };

        for (var i = 0; i < tmpl.defines.length; i++) {
          _loop(i);
        }

        if (offset > 31) {
          tmpl.uber = true;
        }

        tmpl.constantMacros = '';

        for (var key in tmpl.builtins.statistics) {
          tmpl.constantMacros += "#define " + key + " " + tmpl.builtins.statistics[key] + "\n";
        }
      }
      function getCombinationDefines(combination) {
        var defines = Object.keys(combination).reduce(function (out, name) {
          return out.reduce(function (acc, cur) {
            var choices = combination[name];

            for (var i = 0; i < choices.length; ++i) {
              var _defines = _extends({}, cur);

              _defines[name] = choices[i];
              acc.push(_defines);
            }

            return acc;
          }, []);
        }, [{}]);
        return defines;
      }
      function addEffectDefaultProperties(effect) {
        for (var i = 0; i < effect.techniques.length; i++) {
          var tech = effect.techniques[i];

          for (var j = 0; j < tech.passes.length; j++) {
            var pass = tech.passes[j];

            if (pass.propertyIndex !== undefined && pass.properties === undefined) {
              pass.properties = tech.passes[pass.propertyIndex].properties;
            }
          }
        }
      }

      var _dsLayoutInfo = new DescriptorSetLayoutInfo();

      function insertBuiltinBindings(tmpl, tmplInfo, source, type, outBindings) {
        var target = tmpl.builtins[type];
        var tempBlocks = [];

        var _loop = function _loop(i) {
          var b = target.blocks[i];
          var info = source.layouts[b.name];
          var binding = info && source.bindings.find(function (bd) {
            return bd.binding === info.binding;
          });

          if (!info || !binding || !(binding.descriptorType & DESCRIPTOR_BUFFER_TYPE)) {
            console.warn("builtin UBO '" + b.name + "' not available!");
            return "continue";
          }

          tempBlocks.push(info);
          if (outBindings && !outBindings.includes(binding)) outBindings.push(binding);
        };

        for (var i = 0; i < target.blocks.length; i++) {
          var _ret = _loop(i);

          if (_ret === "continue") continue;
        }

        Array.prototype.unshift.apply(tmplInfo.shaderInfo.blocks, tempBlocks);
        var tempSamplerTextures = [];

        var _loop2 = function _loop2(_i) {
          var s = target.samplerTextures[_i];
          var info = source.layouts[s.name];
          var binding = info && source.bindings.find(function (bd) {
            return bd.binding === info.binding;
          });

          if (!info || !binding || !(binding.descriptorType & DESCRIPTOR_SAMPLER_TYPE)) {
            console.warn("builtin samplerTexture '" + s.name + "' not available!");
            return "continue";
          }

          tempSamplerTextures.push(info);
          if (outBindings && !outBindings.includes(binding)) outBindings.push(binding);
        };

        for (var _i = 0; _i < target.samplerTextures.length; _i++) {
          var _ret2 = _loop2(_i);

          if (_ret2 === "continue") continue;
        }

        Array.prototype.unshift.apply(tmplInfo.shaderInfo.samplerTextures, tempSamplerTextures);
        if (outBindings) outBindings.sort(function (a, b) {
          return a.binding - b.binding;
        });
      }

      function findDefineIndependent(source, tmpl, attrMap, locSet) {
        var locExistingRegStr = "layout\\(location = (\\d+)\\)\\s+in.*?\\s(\\w+)[;,\\)]";
        var locExistingReg = new RegExp(locExistingRegStr, 'g');
        var locExistingRes = locExistingReg.exec(source);
        var code = source;

        var _loop3 = function _loop3() {
          var attrName = locExistingRes[2];
          var attrInfo = tmpl.attributes.find(function (ele) {
            return ele.name === attrName;
          });
          var preExisted = (attrInfo === null || attrInfo === void 0 ? void 0 : attrInfo.defines.length) === 0 || (attrInfo === null || attrInfo === void 0 ? void 0 : attrInfo.defines.every(function (ele) {
            return ele === '';
          }));

          if (preExisted) {
            var loc = parseInt(locExistingRes[1]);

            if (loc > 15) {
              var n = 0;

              while (locSet.has(n)) {
                n++;
              }

              loc = n;
              var locDefStr = locExistingRes[0].replace(locExistingRes[1], "" + loc);
              code = source.replace(locExistingRes[0], locDefStr);
            }

            locSet.add(loc);
            attrMap.set(locExistingRes[2], loc);
          }

          locExistingRes = locExistingReg.exec(source);
        };

        while (locExistingRes) {
          _loop3();
        }

        return code;
      }

      function replaceVertexMutableLocation(source, tmpl, macroInfo, inOrOut, attrMap, locSet) {
        if (locSet === void 0) {
          locSet = new Set();
        }

        var locHolderRegStr = "layout\\(location = ([^\\)]+)\\)\\s+" + inOrOut + ".*?\\s(\\w+)[;,\\)]";
        var locHolderReg = new RegExp(locHolderRegStr, 'g');
        var code = source;
        var locHolder = locHolderReg.exec(source);

        var _loop4 = function _loop4() {
          var attrName = locHolder[2];

          if (!attrMap.has(attrName)) {
            var attrInfo = tmpl.attributes.find(function (ele) {
              return ele.name === attrName;
            });
            var active = true;
            var location = 0;

            if (inOrOut === 'in') {
              var targetStr = source.slice(0, locHolder.index);
              active = !!(attrInfo !== null && attrInfo !== void 0 && attrInfo.defines.every(function (defStrIn) {
                var inverseCond = defStrIn.startsWith('!');
                var defStr = inverseCond ? defStrIn.slice(1) : defStrIn;
                var v = macroInfo.find(function (ele) {
                  return ele.name === defStr;
                });
                var res = !!v;

                if (v) {
                  res = !(v.value === '0' || v.value === 'false' || v.value === 'FALSE');
                }

                res = inverseCond ? !res : res;

                if (res) {
                  var lastIfRegStr = "[\\n|\\s]+#(?:if|elif)(.*?" + defStr + ".*?(?:(?!#if|#elif).)*)[\\n|\\s]+$";
                  var lastIfReg = new RegExp(lastIfRegStr, 'g');
                  var lastIfRes = lastIfReg.exec(targetStr);

                  if (lastIfRes) {
                    var evalStr = lastIfRes[1];
                    var evalORElements = evalStr.split('||');
                    var evalRes = evalORElements.some(function (eleOrTestStr) {
                      var evalANDElements = eleOrTestStr.split('&&');
                      return evalANDElements.every(function (eleAndTestStr) {
                        var evalEleRes = true;

                        if (eleAndTestStr.includes('==')) {
                          var opVars = eleAndTestStr.split('==');

                          if (opVars[0].replaceAll(' ', '') === defStr) {
                            evalEleRes = opVars[1].replaceAll(' ', '') === v.value;
                          }
                        } else if (eleAndTestStr.includes('!=')) {
                          var _opVars = eleAndTestStr.split('!=');

                          if (_opVars[0].replaceAll(' ', '') === defStr) {
                            evalEleRes = _opVars[1].replaceAll(' ', '') !== v.value;
                          }
                        } else ;

                        return evalEleRes;
                      });
                    });
                    res = res && evalRes;
                  }
                }

                return res;
              }));
            }

            if (active) {
              while (locSet.has(location)) {
                location++;
              }

              locSet.add(location);

              if (attrInfo) {
                attrInfo.location = location;
              }

              attrMap.set(attrName, location);
            }

            var locInstStr = locHolder[0].replace(locHolder[1], "" + location);
            code = code.replace(locHolder[0], locInstStr);
          }

          locHolder = locHolderReg.exec(source);
        };

        while (locHolder) {
          _loop4();
        }

        return code;
      }

      function replaceFragmentLocation(source, inOrOut, attrMap) {
        var code = source;
        var locHolderRegStr = "layout\\(location = ([^\\)]+)\\)\\s+" + inOrOut + ".*?\\s(\\w+)[;,\\)]";
        var locHolderReg = new RegExp(locHolderRegStr, 'g');
        var locHolder = locHolderReg.exec(source);

        while (locHolder) {
          var attrName = locHolder[2];

          if (!attrMap.has(attrName)) {
            var location = 0;

            if (inOrOut === 'in') {
              location = attrMap.get(attrName) || 0;
              var locInstStr = locHolder[0].replace(locHolder[1], "" + location);
              code = code.replace(locHolder[0], locInstStr);
            }
          }

          locHolder = locHolderReg.exec(source);
        }

        return code;
      }

      function flattenShaderLocation(source, tmpl, macroInfo, shaderStage, attrMap) {
        var code = source;

        if (shaderStage === 'vert') {
          var locSet = new Set();
          code = findDefineIndependent(source, tmpl, attrMap, locSet);
          code = replaceVertexMutableLocation(code, tmpl, macroInfo, 'in', attrMap, locSet);
          code = replaceVertexMutableLocation(code, tmpl, macroInfo, 'out', attrMap);
        } else if (shaderStage === 'frag') {
          code = replaceFragmentLocation(code, 'in', attrMap);
        } else ;

        return code;
      }

      var ProgramLib = function () {
        function ProgramLib() {
          this._templates = {};
          this._cache = {};
          this._templateInfos = {};
        }

        var _proto = ProgramLib.prototype;

        _proto.register = function register(effect) {
          for (var i = 0; i < effect.shaders.length; i++) {
            var tmpl = this.define(effect.shaders[i]);
            tmpl.effectName = effect.name;
          }

          for (var _i2 = 0; _i2 < effect.techniques.length; _i2++) {
            var tech = effect.techniques[_i2];

            for (var j = 0; j < tech.passes.length; j++) {
              var pass = tech.passes[j];

              if (pass.propertyIndex !== undefined && pass.properties === undefined) {
                pass.properties = tech.passes[pass.propertyIndex].properties;
              }
            }
          }
        };

        _proto.define = function define(shader) {
          var curTmpl = this._templates[shader.name];

          if (curTmpl && curTmpl.hash === shader.hash) {
            return curTmpl;
          }

          var tmpl = _extends({}, shader);

          populateMacros(tmpl);
          this._templates[shader.name] = tmpl;

          if (!this._templateInfos[tmpl.hash]) {
            var tmplInfo = {};
            tmplInfo.samplerStartBinding = tmpl.blocks.length;
            tmplInfo.shaderInfo = new ShaderInfo();
            tmplInfo.blockSizes = [];
            tmplInfo.bindings = [];

            for (var i = 0; i < tmpl.blocks.length; i++) {
              var block = tmpl.blocks[i];
              tmplInfo.blockSizes.push(getSize(block.members));
              tmplInfo.bindings.push(new DescriptorSetLayoutBinding(block.binding, DescriptorType.UNIFORM_BUFFER, 1, block.stageFlags));
              tmplInfo.shaderInfo.blocks.push(new UniformBlock(SetIndex.MATERIAL, block.binding, block.name, block.members.map(function (m) {
                return new Uniform(m.name, m.type, m.count);
              }), 1));
            }

            for (var _i3 = 0; _i3 < tmpl.samplerTextures.length; _i3++) {
              var samplerTexture = tmpl.samplerTextures[_i3];
              tmplInfo.bindings.push(new DescriptorSetLayoutBinding(samplerTexture.binding, DescriptorType.SAMPLER_TEXTURE, samplerTexture.count, samplerTexture.stageFlags));
              tmplInfo.shaderInfo.samplerTextures.push(new UniformSamplerTexture(SetIndex.MATERIAL, samplerTexture.binding, samplerTexture.name, samplerTexture.type, samplerTexture.count));
            }

            for (var _i4 = 0; _i4 < tmpl.samplers.length; _i4++) {
              var sampler = tmpl.samplers[_i4];
              tmplInfo.bindings.push(new DescriptorSetLayoutBinding(sampler.binding, DescriptorType.SAMPLER, sampler.count, sampler.stageFlags));
              tmplInfo.shaderInfo.samplers.push(new UniformSampler(SetIndex.MATERIAL, sampler.binding, sampler.name, sampler.count));
            }

            for (var _i5 = 0; _i5 < tmpl.textures.length; _i5++) {
              var texture = tmpl.textures[_i5];
              tmplInfo.bindings.push(new DescriptorSetLayoutBinding(texture.binding, DescriptorType.TEXTURE, texture.count, texture.stageFlags));
              tmplInfo.shaderInfo.textures.push(new UniformTexture(SetIndex.MATERIAL, texture.binding, texture.name, texture.type, texture.count));
            }

            for (var _i6 = 0; _i6 < tmpl.buffers.length; _i6++) {
              var buffer = tmpl.buffers[_i6];
              tmplInfo.bindings.push(new DescriptorSetLayoutBinding(buffer.binding, DescriptorType.STORAGE_BUFFER, 1, buffer.stageFlags));
              tmplInfo.shaderInfo.buffers.push(new UniformStorageBuffer(SetIndex.MATERIAL, buffer.binding, buffer.name, 1, buffer.memoryAccess));
            }

            for (var _i7 = 0; _i7 < tmpl.images.length; _i7++) {
              var image = tmpl.images[_i7];
              tmplInfo.bindings.push(new DescriptorSetLayoutBinding(image.binding, DescriptorType.STORAGE_IMAGE, image.count, image.stageFlags));
              tmplInfo.shaderInfo.images.push(new UniformStorageImage(SetIndex.MATERIAL, image.binding, image.name, image.type, image.count, image.memoryAccess));
            }

            for (var _i8 = 0; _i8 < tmpl.subpassInputs.length; _i8++) {
              var subpassInput = tmpl.subpassInputs[_i8];
              tmplInfo.bindings.push(new DescriptorSetLayoutBinding(subpassInput.binding, DescriptorType.INPUT_ATTACHMENT, subpassInput.count, subpassInput.stageFlags));
              tmplInfo.shaderInfo.subpassInputs.push(new UniformInputAttachment(SetIndex.MATERIAL, subpassInput.binding, subpassInput.name, subpassInput.count));
            }

            tmplInfo.gfxAttributes = [];

            for (var _i9 = 0; _i9 < tmpl.attributes.length; _i9++) {
              var attr = tmpl.attributes[_i9];
              tmplInfo.gfxAttributes.push(new Attribute(attr.name, attr.format, attr.isNormalized, 0, attr.isInstanced, attr.location));
            }

            insertBuiltinBindings(tmpl, tmplInfo, localDescriptorSetLayout, 'locals');
            tmplInfo.shaderInfo.stages.push(new ShaderStage(ShaderStageFlagBit.VERTEX, ''));
            tmplInfo.shaderInfo.stages.push(new ShaderStage(ShaderStageFlagBit.FRAGMENT, ''));
            tmplInfo.handleMap = genHandles(tmpl);
            tmplInfo.setLayouts = [];
            this._templateInfos[tmpl.hash] = tmplInfo;
          }

          return tmpl;
        };

        _proto.getTemplate = function getTemplate(name) {
          return this._templates[name];
        };

        _proto.getTemplateInfo = function getTemplateInfo(name) {
          var hash = this._templates[name].hash;
          return this._templateInfos[hash];
        };

        _proto.getDescriptorSetLayout = function getDescriptorSetLayout(device, name, isLocal) {
          if (isLocal === void 0) {
            isLocal = false;
          }

          var tmpl = this._templates[name];
          var tmplInfo = this._templateInfos[tmpl.hash];

          if (!tmplInfo.setLayouts.length) {
            _dsLayoutInfo.bindings = tmplInfo.bindings;
            tmplInfo.setLayouts[SetIndex.MATERIAL] = device.createDescriptorSetLayout(_dsLayoutInfo);
            _dsLayoutInfo.bindings = localDescriptorSetLayout.bindings;
            tmplInfo.setLayouts[SetIndex.LOCAL] = device.createDescriptorSetLayout(_dsLayoutInfo);
          }

          return tmplInfo.setLayouts[isLocal ? SetIndex.LOCAL : SetIndex.MATERIAL];
        };

        _proto.hasProgram = function hasProgram(name) {
          return this._templates[name] !== undefined;
        };

        _proto.getKey = function getKey(name, defines) {
          var tmpl = this._templates[name];
          return getVariantKey(tmpl, defines);
        };

        _proto.destroyShaderByDefines = function destroyShaderByDefines(defines) {
          var _this = this;

          var names = Object.keys(defines);

          if (!names.length) {
            return;
          }

          var regexes = names.map(function (cur) {
            var val = defines[cur];

            if (typeof val === 'boolean') {
              val = val ? '1' : '0';
            }

            return new RegExp("" + cur + val);
          });
          var keys = Object.keys(this._cache).filter(function (k) {
            return regexes.every(function (re) {
              return re.test(_this._cache[k].name);
            });
          });

          for (var i = 0; i < keys.length; i++) {
            var k = keys[i];
            var prog = this._cache[k];
            debug("destroyed shader " + prog.name);
            prog.destroy();
            delete this._cache[k];
          }
        };

        _proto.getGFXShader = function getGFXShader(device, name, defines, pipeline, key) {
          Object.assign(defines, pipeline.macros);
          if (!key) key = this.getKey(name, defines);
          var res = this._cache[key];

          if (res) {
            return res;
          }

          var tmpl = this._templates[name];
          var tmplInfo = this._templateInfos[tmpl.hash];

          if (!tmplInfo.pipelineLayout) {
            this.getDescriptorSetLayout(device, name);
            insertBuiltinBindings(tmpl, tmplInfo, globalDescriptorSetLayout, 'globals');
            tmplInfo.setLayouts[SetIndex.GLOBAL] = pipeline.descriptorSetLayout;
            tmplInfo.pipelineLayout = device.createPipelineLayout(new PipelineLayoutInfo(tmplInfo.setLayouts));
          }

          var macroArray = prepareDefines(defines, tmpl.defines);
          var prefix = pipeline.constantMacros + tmpl.constantMacros + macroArray.reduce(function (acc, cur) {
            return acc + "#define " + cur.name + " " + cur.value + "\n";
          }, '');
          var src = tmpl.glsl3;
          var deviceShaderVersion = getDeviceShaderVersion(device);

          if (deviceShaderVersion) {
            src = tmpl[deviceShaderVersion];
          } else {
            console.error('Invalid GFX API!');
          }

          tmplInfo.shaderInfo.stages[0].source = prefix + src.vert;
          tmplInfo.shaderInfo.stages[1].source = prefix + src.frag;
          tmplInfo.shaderInfo.attributes = getActiveAttributes(tmpl, tmplInfo.gfxAttributes, defines);
          tmplInfo.shaderInfo.name = getShaderInstanceName(name, macroArray);
          var shaderInfo = tmplInfo.shaderInfo;

          return this._cache[key] = device.createShader(shaderInfo);
        };

        return ProgramLib;
      }();

      function getDeviceShaderVersion(device) {
        switch (device.gfxAPI) {
          case API.GLES2:
          case API.WEBGL:
            return 'glsl1';

          case API.GLES3:
          case API.WEBGL2:
            return 'glsl3';

          default:
            return 'glsl4';
        }
      }
      var programLib = new ProgramLib();
      legacyCC.programLib = programLib;

      var _dec$c, _class$c, _class2$a, _initializer$8, _initializer2$5, _initializer3$5, _initializer4$4, _class3$5, _temp$4;
      var legacyBuiltinEffectNames = ['planar-shadow', 'skybox', 'deferred-lighting', 'bloom', 'post-process', 'profiler', 'splash-screen', 'standard', 'unlit', 'sprite', 'particle', 'particle-gpu', 'particle-trail', 'billboard', 'terrain', 'graphics', 'clear-stencil', 'spine', 'occlusion-query', 'geometry-renderer', 'debug-renderer'];
      var EffectAsset = exports('EffectAsset', (_dec$c = ccclass('cc.EffectAsset'), _dec$c(_class$c = (_class2$a = (_temp$4 = _class3$5 = function (_Asset) {
        _inheritsLoose(EffectAsset, _Asset);

        function EffectAsset() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Asset.call.apply(_Asset, [this].concat(args)) || this;
          _this.techniques = _initializer$8 && _initializer$8();
          _this.shaders = _initializer2$5 && _initializer2$5();
          _this.combinations = _initializer3$5 && _initializer3$5();
          _this.hideInEditor = _initializer4$4 && _initializer4$4();
          return _this;
        }

        EffectAsset.register = function register(asset) {
          EffectAsset._effects[asset.name] = asset;
          EffectAsset._layoutValid = false;
        };

        EffectAsset.remove = function remove(asset) {
          if (typeof asset !== 'string') {
            if (EffectAsset._effects[asset.name] && EffectAsset._effects[asset.name] === asset) {
              delete EffectAsset._effects[asset.name];
            }
          } else {
            if (EffectAsset._effects[asset]) {
              delete EffectAsset._effects[asset];
              return;
            }

            for (var n in EffectAsset._effects) {
              if (EffectAsset._effects[n]._uuid === asset) {
                delete EffectAsset._effects[n];
                return;
              }
            }
          }
        };

        EffectAsset.get = function get(name) {
          if (EffectAsset._effects[name]) {
            return EffectAsset._effects[name];
          }

          for (var n in EffectAsset._effects) {
            if (EffectAsset._effects[n]._uuid === name) {
              return EffectAsset._effects[n];
            }
          }

          if (legacyBuiltinEffectNames.includes(name)) {
            warnID(16101, name);
          }

          return null;
        };

        EffectAsset.getAll = function getAll() {
          return EffectAsset._effects;
        };

        EffectAsset.isLayoutValid = function isLayoutValid() {
          return EffectAsset._layoutValid;
        };

        EffectAsset.setLayoutValid = function setLayoutValid() {
          EffectAsset._layoutValid = true;
        };

        var _proto = EffectAsset.prototype;

        _proto.onLoaded = function onLoaded() {
          if (legacyCC.rendering && legacyCC.rendering.enableEffectImport) {
            addEffectDefaultProperties(this);
            legacyCC.rendering.programLib.addEffect(this);
          } else {
            programLib.register(this);
          }

          EffectAsset.register(this);

          {
            legacyCC.game.once(legacyCC.Game.EVENT_RENDERER_INITED, this._precompile, this);
          }
        };

        _proto._precompile = function _precompile() {
          var _this2 = this;

          if (legacyCC.rendering && legacyCC.rendering.enableEffectImport) {
            legacyCC.rendering.programLib.precompileEffect(deviceManager.gfxDevice, this);
            return;
          }

          var root = legacyCC.director.root;

          var _loop = function _loop(i) {
            var shader = _this2.shaders[i];
            var combination = _this2.combinations[i];

            if (!combination) {
              return "continue";
            }

            var defines = getCombinationDefines(combination);
            defines.forEach(function (defines) {
              return programLib.getGFXShader(deviceManager.gfxDevice, shader.name, defines, root.pipeline);
            });
          };

          for (var i = 0; i < this.shaders.length; i++) {
            var _ret = _loop(i);

            if (_ret === "continue") continue;
          }
        };

        _proto.destroy = function destroy() {
          EffectAsset.remove(this);
          return _Asset.prototype.destroy.call(this);
        };

        _proto.initDefault = function initDefault(uuid) {
          _Asset.prototype.initDefault.call(this, uuid);

          var effect = EffectAsset.get('builtin-unlit');
          this.name = 'builtin-unlit';
          this.shaders = effect.shaders;
          this.combinations = effect.combinations;
          this.techniques = effect.techniques;
        };

        _proto.validate = function validate() {
          return this.techniques.length > 0 && this.shaders.length > 0;
        };

        return EffectAsset;
      }(Asset), _class3$5._effects = {}, _class3$5._layoutValid = true, _temp$4), (_initializer$8 = applyDecoratedInitializer(_class2$a.prototype, "techniques", [serializable], function () {
        return [];
      }), _initializer2$5 = applyDecoratedInitializer(_class2$a.prototype, "shaders", [serializable], function () {
        return [];
      }), _initializer3$5 = applyDecoratedInitializer(_class2$a.prototype, "combinations", [serializable], function () {
        return [];
      }), _initializer4$4 = applyDecoratedInitializer(_class2$a.prototype, "hideInEditor", [serializable, editorOnly], function () {
        return false;
      })), _class2$a)) || _class$c));
      legacyCC.EffectAsset = EffectAsset;

      var _dec$d, _class$d, _class2$b, _initializer$9, _initializer2$6, _initializer3$6, _initializer4$5, _class3$6, _temp$5;
      var FaceIndex;

      (function (FaceIndex) {
        FaceIndex[FaceIndex["right"] = 0] = "right";
        FaceIndex[FaceIndex["left"] = 1] = "left";
        FaceIndex[FaceIndex["top"] = 2] = "top";
        FaceIndex[FaceIndex["bottom"] = 3] = "bottom";
        FaceIndex[FaceIndex["front"] = 4] = "front";
        FaceIndex[FaceIndex["back"] = 5] = "back";
      })(FaceIndex || (FaceIndex = {}));

      var MipmapMode;

      (function (MipmapMode) {
        MipmapMode[MipmapMode["NONE"] = 0] = "NONE";
        MipmapMode[MipmapMode["AUTO"] = 1] = "AUTO";
        MipmapMode[MipmapMode["BAKED_CONVOLUTION_MAP"] = 2] = "BAKED_CONVOLUTION_MAP";
      })(MipmapMode || (MipmapMode = {}));

      var TextureCube = exports('TextureCube', (_dec$d = ccclass('cc.TextureCube'), _dec$d(_class$d = (_class2$b = (_temp$5 = _class3$6 = function (_SimpleTexture) {
        _inheritsLoose(TextureCube, _SimpleTexture);

        function TextureCube() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _SimpleTexture.call.apply(_SimpleTexture, [this].concat(args)) || this;
          _this.isRGBE = _initializer$9 && _initializer$9();
          _this._mipmapAtlas = _initializer2$6 && _initializer2$6();
          _this._mipmapMode = _initializer3$6 && _initializer3$6();
          _this._mipmaps = _initializer4$5 && _initializer4$5();
          return _this;
        }

        var _proto = TextureCube.prototype;

        _proto.isUsingOfflineMipmaps = function isUsingOfflineMipmaps() {
          return this._mipmapMode === MipmapMode.BAKED_CONVOLUTION_MAP;
        };

        TextureCube.fromTexture2DArray = function fromTexture2DArray(textures, out) {
          var mipmaps = [];
          var nMipmaps = textures.length / 6;

          for (var i = 0; i < nMipmaps; i++) {
            var x = i * 6;
            mipmaps.push({
              front: textures[x + FaceIndex.front].image,
              back: textures[x + FaceIndex.back].image,
              left: textures[x + FaceIndex.left].image,
              right: textures[x + FaceIndex.right].image,
              top: textures[x + FaceIndex.top].image,
              bottom: textures[x + FaceIndex.bottom].image
            });
          }

          out = out || new TextureCube();
          out.mipmaps = mipmaps;
          return out;
        };

        _proto.onLoaded = function onLoaded() {
          if (this._mipmapMode === MipmapMode.BAKED_CONVOLUTION_MAP) {
            this.mipmapAtlas = this._mipmapAtlas;
          } else {
            this.mipmaps = this._mipmaps;
          }
        };

        _proto.reset = function reset(info) {
          this._width = info.width;
          this._height = info.height;

          this._setGFXFormat(info.format);

          var mipLevels = info.mipmapLevel === undefined ? 1 : info.mipmapLevel;

          this._setMipmapLevel(mipLevels);

          var minLod = info.baseLevel === undefined ? 0 : info.baseLevel;
          var maxLod = info.maxLevel === undefined ? 1000 : info.maxLevel;

          this._setMipRange(minLod, maxLod);

          this._tryReset();
        };

        _proto.updateMipmaps = function updateMipmaps(firstLevel, count) {
          var _this2 = this;

          if (firstLevel === void 0) {
            firstLevel = 0;
          }

          if (firstLevel >= this._mipmaps.length) {
            return;
          }

          var nUpdate = Math.min(count === undefined ? this._mipmaps.length : count, this._mipmaps.length - firstLevel);

          var _loop = function _loop(i) {
            var level = firstLevel + i;

            _forEachFace(_this2._mipmaps[level], function (face, faceIndex) {
              _this2._assignImage(face, level, faceIndex);
            });
          };

          for (var i = 0; i < nUpdate; ++i) {
            _loop(i);
          }
        };

        _proto.destroy = function destroy() {
          this._mipmaps = [];
          this._mipmapAtlas = null;
          return _SimpleTexture.prototype.destroy.call(this);
        };

        _proto.releaseTexture = function releaseTexture() {
          this.mipmaps = [];
          this._mipmapAtlas = null;
        };

        _proto._serialize = function _serialize(ctxForExporting) {

          return null;
        };

        _proto._deserialize = function _deserialize(serializedData, handle) {
          var data = serializedData;

          _SimpleTexture.prototype._deserialize.call(this, data.base, handle);

          this.isRGBE = data.rgbe;
          this._mipmapMode = data.mipmapMode;

          if (this._mipmapMode === MipmapMode.BAKED_CONVOLUTION_MAP) {
            var mipmapAtlas = data.mipmapAtlas;
            var mipmapLayout = data.mipmapLayout;
            this._mipmapAtlas = {
              atlas: {},
              layout: mipmapLayout
            };
            this._mipmapAtlas.atlas = {
              front: new ImageAsset(),
              back: new ImageAsset(),
              left: new ImageAsset(),
              right: new ImageAsset(),
              top: new ImageAsset(),
              bottom: new ImageAsset()
            };
            var imageAssetClassId = getClassId(ImageAsset);
            handle.result.push(this._mipmapAtlas.atlas, "front", mipmapAtlas.front, imageAssetClassId);
            handle.result.push(this._mipmapAtlas.atlas, "back", mipmapAtlas.back, imageAssetClassId);
            handle.result.push(this._mipmapAtlas.atlas, "left", mipmapAtlas.left, imageAssetClassId);
            handle.result.push(this._mipmapAtlas.atlas, "right", mipmapAtlas.right, imageAssetClassId);
            handle.result.push(this._mipmapAtlas.atlas, "top", mipmapAtlas.top, imageAssetClassId);
            handle.result.push(this._mipmapAtlas.atlas, "bottom", mipmapAtlas.bottom, imageAssetClassId);
          } else {
            this._mipmaps = new Array(data.mipmaps.length);

            for (var i = 0; i < data.mipmaps.length; ++i) {
              this._mipmaps[i] = {
                front: new ImageAsset(),
                back: new ImageAsset(),
                left: new ImageAsset(),
                right: new ImageAsset(),
                top: new ImageAsset(),
                bottom: new ImageAsset()
              };
              var mipmap = data.mipmaps[i];

              var _imageAssetClassId = getClassId(ImageAsset);

              handle.result.push(this._mipmaps[i], "front", mipmap.front, _imageAssetClassId);
              handle.result.push(this._mipmaps[i], "back", mipmap.back, _imageAssetClassId);
              handle.result.push(this._mipmaps[i], "left", mipmap.left, _imageAssetClassId);
              handle.result.push(this._mipmaps[i], "right", mipmap.right, _imageAssetClassId);
              handle.result.push(this._mipmaps[i], "top", mipmap.top, _imageAssetClassId);
              handle.result.push(this._mipmaps[i], "bottom", mipmap.bottom, _imageAssetClassId);
            }
          }
        };

        _proto._getGfxTextureCreateInfo = function _getGfxTextureCreateInfo(presumed) {
          var texInfo = new TextureInfo(TextureType.CUBE);
          texInfo.width = this._width;
          texInfo.height = this._height;
          texInfo.layerCount = 6;
          Object.assign(texInfo, presumed);
          return texInfo;
        };

        _proto._getGfxTextureViewCreateInfo = function _getGfxTextureViewCreateInfo(presumed) {
          var texViewInfo = new TextureViewInfo();
          texViewInfo.type = TextureType.CUBE;
          texViewInfo.baseLayer = 0;
          texViewInfo.layerCount = 6;
          Object.assign(texViewInfo, presumed);
          return texViewInfo;
        };

        _proto._uploadAtlas = function _uploadAtlas() {
          var _this3 = this;

          var layout = this._mipmapAtlas.layout;
          var mip0Layout = layout[0];
          this.reset({
            width: mip0Layout.width,
            height: mip0Layout.height,
            format: this._mipmapAtlas.atlas.front.format,
            mipmapLevel: layout.length
          });

          _forEachFace(this._mipmapAtlas.atlas, function (face, faceIndex) {
            var tex = new Texture2D();
            tex.image = face;
            tex.reset({
              width: face.width,
              height: face.height,
              format: face.format
            });
            tex.uploadData(face.data);

            for (var i = 0; i < layout.length; i++) {
              var layoutInfo = layout[i];
              var buffer = new Uint8Array(4 * layoutInfo.width * layoutInfo.height);
              var region = new BufferTextureCopy();
              region.texOffset.x = layoutInfo.left;
              region.texOffset.y = layoutInfo.top;
              region.texExtent.width = layoutInfo.width;
              region.texExtent.height = layoutInfo.height;

              _this3._getGFXDevice().copyTextureToBuffers(tex.getGFXTexture(), [buffer], [region]);

              var bufferAsset = new ImageAsset({
                _data: buffer,
                _compressed: face.isCompressed,
                width: layoutInfo.width,
                height: layoutInfo.height,
                format: face.format
              });

              _this3._assignImage(bufferAsset, layoutInfo.level, faceIndex);
            }
          });
        };

        _proto.initDefault = function initDefault(uuid) {
          _SimpleTexture.prototype.initDefault.call(this, uuid);

          var imageAsset = new ImageAsset();
          imageAsset.initDefault();
          this.mipmaps = [{
            front: imageAsset,
            back: imageAsset,
            top: imageAsset,
            bottom: imageAsset,
            left: imageAsset,
            right: imageAsset
          }];
        };

        _proto.validate = function validate() {
          if (this._mipmapMode === MipmapMode.BAKED_CONVOLUTION_MAP) {
            if (this.mipmapAtlas === null || this.mipmapAtlas.layout.length === 0) {
              return false;
            }

            var atlas = this.mipmapAtlas.atlas;
            return !!(atlas.top && atlas.bottom && atlas.front && atlas.back && atlas.left && atlas.right);
          } else {
            return this._mipmaps.length !== 0 && !this._mipmaps.find(function (x) {
              return !(x.top && x.bottom && x.front && x.back && x.left && x.right);
            });
          }
        };

        _createClass(TextureCube, [{
          key: "mipmaps",
          get: function get() {
            return this._mipmaps;
          },
          set: function set(value) {
            var _this4 = this;

            this._mipmaps = value;

            this._setMipmapLevel(this._mipmaps.length);

            if (this._mipmaps.length > 0) {
              var imageAsset = this._mipmaps[0].front;
              this.reset({
                width: imageAsset.width,
                height: imageAsset.height,
                format: imageAsset.format,
                mipmapLevel: this._mipmaps.length,
                baseLevel: this._baseLevel,
                maxLevel: this._maxLevel
              });

              this._mipmaps.forEach(function (mipmap, level) {
                _forEachFace(mipmap, function (face, faceIndex) {
                  _this4._assignImage(face, level, faceIndex);
                });
              });
            } else {
              this.reset({
                width: 0,
                height: 0,
                mipmapLevel: this._mipmaps.length,
                baseLevel: this._baseLevel,
                maxLevel: this._maxLevel
              });
            }
          }
        }, {
          key: "mipmapAtlas",
          get: function get() {
            return this._mipmapAtlas;
          },
          set: function set(value) {
            var _this5 = this;

            this._mipmapAtlas = value;

            if (!this._mipmapAtlas) {
              this.reset({
                width: 0,
                height: 0,
                mipmapLevel: 0
              });
              return;
            }

            var imageAtlasAsset = this._mipmapAtlas.atlas.front;

            if (!imageAtlasAsset.data) {
              return;
            }

            var faceAtlas = this._mipmapAtlas.atlas;
            var layout = this._mipmapAtlas.layout;
            var mip0Layout = layout[0];
            var ctx = Object.assign(ccwindow.document.createElement('canvas'), {
              width: imageAtlasAsset.width,
              height: imageAtlasAsset.height
            }).getContext('2d');
            this.reset({
              width: mip0Layout.width,
              height: mip0Layout.height,
              format: imageAtlasAsset.format,
              mipmapLevel: layout.length
            });

            var _loop2 = function _loop2(j) {
              var layoutInfo = layout[j];

              _forEachFace(faceAtlas, function (face, faceIndex) {
                ctx.clearRect(0, 0, imageAtlasAsset.width, imageAtlasAsset.height);
                var drawImg = face.data;
                ctx.drawImage(drawImg, 0, 0);
                var rawData = ctx.getImageData(layoutInfo.left, layoutInfo.top, layoutInfo.width, layoutInfo.height);
                var bufferAsset = new ImageAsset({
                  _data: rawData.data,
                  _compressed: face.isCompressed,
                  width: rawData.width,
                  height: rawData.height,
                  format: face.format
                });

                _this5._assignImage(bufferAsset, layoutInfo.level, faceIndex);
              });
            };

            for (var j = 0; j < layout.length; j++) {
              _loop2(j);
            }
          }
        }, {
          key: "image",
          get: function get() {
            return this._mipmaps.length === 0 ? null : this._mipmaps[0];
          },
          set: function set(value) {
            this.mipmaps = value ? [value] : [];
          }
        }]);

        return TextureCube;
      }(SimpleTexture), _class3$6.FaceIndex = FaceIndex, _temp$5), (_initializer$9 = applyDecoratedInitializer(_class2$b.prototype, "isRGBE", [serializable], function () {
        return false;
      }), _initializer2$6 = applyDecoratedInitializer(_class2$b.prototype, "_mipmapAtlas", [serializable], function () {
        return null;
      }), _initializer3$6 = applyDecoratedInitializer(_class2$b.prototype, "_mipmapMode", [serializable], function () {
        return MipmapMode.NONE;
      }), _initializer4$5 = applyDecoratedInitializer(_class2$b.prototype, "_mipmaps", [serializable], function () {
        return [];
      })), _class2$b)) || _class$d));
      legacyCC.TextureCube = TextureCube;

      function _forEachFace(mipmap, callback) {
        callback(mipmap.front, FaceIndex.front);
        callback(mipmap.back, FaceIndex.back);
        callback(mipmap.left, FaceIndex.left);
        callback(mipmap.right, FaceIndex.right);
        callback(mipmap.top, FaceIndex.top);
        callback(mipmap.bottom, FaceIndex.bottom);
      }

      var isMatchByWord = function isMatchByWord(path, test) {
        if (path.length > test.length) {
          var nextAscii = path.charCodeAt(test.length);
          return nextAscii === 47;
        }

        return true;
      };

      var processOptions = function processOptions(options) {

        var uuids = options.uuids;
        var paths = options.paths;
        var types = options.types;
        var bundles = options.deps;
        var realEntries = options.paths = Object.create(null);

        if (options.debug === false) {
          for (var i = 0, l = uuids.length; i < l; i++) {
            uuids[i] = decodeUuid(uuids[i]);
          }

          for (var id in paths) {
            var entry = paths[id];
            var type = entry[1];
            entry[1] = types[type];
          }
        } else {
          var out = Object.create(null);

          for (var _i = 0, _l = uuids.length; _i < _l; _i++) {
            var uuid = uuids[_i];
            uuids[_i] = out[uuid] = decodeUuid(uuid);
          }

          uuids = out;
        }

        for (var _id in paths) {
          var _entry = paths[_id];
          realEntries[uuids[_id]] = _entry;
        }

        var scenes = options.scenes;

        for (var name in scenes) {
          var _uuid = scenes[name];
          scenes[name] = uuids[_uuid];
        }

        var packs = options.packs;

        for (var packId in packs) {
          var packedIds = packs[packId];

          for (var j = 0; j < packedIds.length; ++j) {
            packedIds[j] = uuids[packedIds[j]];
          }
        }

        var versions = options.versions;

        if (versions) {
          for (var folder in versions) {
            var entries = versions[folder];

            for (var _i2 = 0; _i2 < entries.length; _i2 += 2) {
              var _uuid2 = entries[_i2];
              entries[_i2] = uuids[_uuid2] || _uuid2;
            }
          }
        }

        var redirect = options.redirect;

        if (redirect) {
          for (var _i3 = 0; _i3 < redirect.length; _i3 += 2) {
            redirect[_i3] = uuids[redirect[_i3]];
            redirect[_i3 + 1] = bundles[redirect[_i3 + 1]];
          }
        }

        var extensionMap = options.extensionMap;

        if (extensionMap) {
          var _loop = function _loop(ext) {
            if (!Object.prototype.hasOwnProperty.call(options.extensionMap, ext)) {
              return "continue";
            }

            options.extensionMap[ext].forEach(function (uuid, index) {
              options.extensionMap[ext][index] = uuids[uuid] || uuid;
            });
          };

          for (var ext in options.extensionMap) {
            var _ret = _loop(ext);

            if (_ret === "continue") continue;
          }
        }
      };

      var Config = function () {
        function Config() {
          this.name = '';
          this.base = '';
          this.importBase = '';
          this.nativeBase = '';
          this.deps = null;
          this.assetInfos = new Cache();
          this.scenes = new Cache();
          this.paths = new Cache();
        }

        var _proto = Config.prototype;

        _proto.init = function init(options) {
          var _this = this;

          processOptions(options);
          this.importBase = options.importBase || '';
          this.nativeBase = options.nativeBase || '';
          this.base = options.base || '';
          this.name = options.name || '';
          this.deps = options.deps || [];

          this._initUuid(options.uuids);

          this._initPath(options.paths);

          this._initScene(options.scenes);

          this._initPackage(options.packs);

          this._initVersion(options.versions);

          this._initRedirect(options.redirect);

          var _loop2 = function _loop2(ext) {
            if (!Object.prototype.hasOwnProperty.call(options.extensionMap, ext)) {
              return "continue";
            }

            options.extensionMap[ext].forEach(function (uuid) {
              var assetInfo = _this.assetInfos.get(uuid);

              if (assetInfo) {
                assetInfo.extension = ext;
              }
            });
          };

          for (var ext in options.extensionMap) {
            var _ret2 = _loop2(ext);

            if (_ret2 === "continue") continue;
          }
        };

        _proto.getInfoWithPath = function getInfoWithPath(path, type) {
          if (!path) {
            return null;
          }

          path = normalize(path);
          var items = this.paths.get(path);

          if (items) {
            if (type) {
              for (var i = 0, l = items.length; i < l; i++) {
                var assetInfo = items[i];

                if (isChildClassOf(assetInfo.ctor, type)) {
                  return assetInfo;
                }
              }
            } else {
              return items[0];
            }
          }

          return null;
        };

        _proto.getDirWithPath = function getDirWithPath(path, type, out) {
          path = normalize(path);

          if (path[path.length - 1] === '/') {
            path = path.slice(0, -1);
          }

          var infos = out || [];
          this.paths.forEach(function (items, p) {
            if (p.startsWith(path) && isMatchByWord(p, path) || !path) {
              for (var i = 0, l = items.length; i < l; i++) {
                var entry = items[i];

                if (!type || isChildClassOf(entry.ctor, type)) {
                  infos.push(entry);
                }
              }
            }
          });
          return infos;
        };

        _proto.getAssetInfo = function getAssetInfo(uuid) {
          return this.assetInfos.get(uuid) || null;
        };

        _proto.getSceneInfo = function getSceneInfo(name) {
          if (!name.endsWith('.scene')) {
            name += '.scene';
          }

          if (name[0] !== '/' && !name.startsWith('db://')) {
            name = "/" + name;
          }

          var info = this.scenes.find(function (val, key) {
            return key.endsWith(name);
          });
          return info;
        };

        _proto.destroy = function destroy() {
          this.paths.destroy();
          this.scenes.destroy();
          this.assetInfos.destroy();
        };

        _proto._initUuid = function _initUuid(uuidList) {
          if (!uuidList) {
            return;
          }

          this.assetInfos.clear();

          for (var i = 0, l = uuidList.length; i < l; i++) {
            var uuid = uuidList[i];
            this.assetInfos.add(uuid, {
              uuid: uuid
            });
          }
        };

        _proto._initPath = function _initPath(pathList) {
          if (!pathList) {
            return;
          }

          var paths = this.paths;
          paths.clear();

          for (var uuid in pathList) {
            var info = pathList[uuid];
            var path = info[0];
            var type = info[1];
            var isSubAsset = info.length === 3;
            var assetInfo = this.assetInfos.get(uuid);
            assetInfo.path = path;
            assetInfo.ctor = getClassById(type);

            if (paths.has(path)) {
              if (isSubAsset) {
                paths.get(path).push(assetInfo);
              } else {
                paths.get(path).unshift(assetInfo);
              }
            } else {
              paths.add(path, [assetInfo]);
            }
          }
        };

        _proto._initScene = function _initScene(sceneList) {
          if (!sceneList) {
            return;
          }

          var scenes = this.scenes;
          scenes.clear();
          var assetInfos = this.assetInfos;

          for (var sceneName in sceneList) {
            var uuid = sceneList[sceneName];
            var assetInfo = assetInfos.get(uuid);
            assetInfo.url = sceneName;
            scenes.add(sceneName, assetInfo);
          }
        };

        _proto._initPackage = function _initPackage(packageList) {
          if (!packageList) {
            return;
          }

          var assetInfos = this.assetInfos;

          for (var packUuid in packageList) {
            var uuids = packageList[packUuid];
            var pack = {
              uuid: packUuid,
              packedUuids: uuids,
              ext: '.json'
            };
            assetInfos.add(packUuid, pack);

            for (var i = 0, l = uuids.length; i < l; i++) {
              var uuid = uuids[i];
              var assetInfo = assetInfos.get(uuid);
              var assetPacks = assetInfo.packs;

              if (assetPacks) {
                if (l === 1) {
                  assetPacks.unshift(pack);
                } else {
                  assetPacks.push(pack);
                }
              } else {
                assetInfo.packs = [pack];
              }
            }
          }
        };

        _proto._initVersion = function _initVersion(versions) {
          if (!versions) {
            return;
          }

          var assetInfos = this.assetInfos;
          var entries = versions["import"];

          if (entries) {
            for (var i = 0, l = entries.length; i < l; i += 2) {
              var uuid = entries[i];
              var assetInfo = assetInfos.get(uuid);
              assetInfo.ver = entries[i + 1];
            }
          }

          entries = versions["native"];

          if (entries) {
            for (var _i4 = 0, _l2 = entries.length; _i4 < _l2; _i4 += 2) {
              var _uuid3 = entries[_i4];

              var _assetInfo = assetInfos.get(_uuid3);

              _assetInfo.nativeVer = entries[_i4 + 1];
            }
          }
        };

        _proto._initRedirect = function _initRedirect(redirect) {
          if (!redirect) {
            return;
          }

          var assetInfos = this.assetInfos;

          for (var i = 0, l = redirect.length; i < l; i += 2) {
            var uuid = redirect[i];
            var assetInfo = assetInfos.get(uuid);
            assetInfo.redirect = redirect[i + 1];
          }
        };

        return Config;
      }();

      function visitAsset(asset, deps) {
        if (!asset._uuid) {
          return;
        }

        deps.push(asset._uuid);
      }

      function visitComponent(comp, deps) {
        var props = Object.getOwnPropertyNames(comp);

        for (var i = 0; i < props.length; i++) {
          var propName = props[i];

          if (propName === 'node' || propName === '__eventTargets') {
            continue;
          }

          var value = comp[propName];

          if (typeof value === 'object' && value) {
            if (Array.isArray(value)) {
              for (var j = 0; j < value.length; j++) {
                var val = value[j];

                if (val instanceof Asset) {
                  visitAsset(val, deps);
                }
              }
            } else if (!value.constructor || value.constructor === Object) {
              var keys = Object.getOwnPropertyNames(value);

              for (var _j = 0; _j < keys.length; _j++) {
                var _val = value[keys[_j]];

                if (_val instanceof Asset) {
                  visitAsset(_val, deps);
                }
              }
            } else if (value instanceof Asset) {
              visitAsset(value, deps);
            }
          }
        }
      }

      function visitNode(node, deps) {
        for (var i = 0; i < node._components.length; i++) {
          visitComponent(node._components[i], deps);
        }

        for (var _i = 0; _i < node._children.length; _i++) {
          visitNode(node._children[_i], deps);
        }
      }

      function descendOpRef(asset, refs, exclude, op) {
        exclude.push(asset._uuid);
        var depends = dependUtil.getDeps(asset._uuid);

        for (var i = 0, l = depends.length; i < l; i++) {
          var dependAsset = assets.get(depends[i]);

          if (!dependAsset) {
            continue;
          }

          var uuid = dependAsset._uuid;

          if (!(uuid in refs)) {
            refs[uuid] = dependAsset.refCount + op;
          } else {
            refs[uuid] += op;
          }

          if (exclude.includes(uuid)) {
            continue;
          }

          descendOpRef(dependAsset, refs, exclude, op);
        }
      }

      var _temp$6 = [];

      function checkCircularReference(asset) {
        var refs = Object.create(null);
        refs[asset._uuid] = asset.refCount;
        descendOpRef(asset, refs, _temp$6, -1);
        _temp$6.length = 0;

        if (refs[asset._uuid] !== 0) {
          return refs[asset._uuid];
        }

        for (var uuid in refs) {
          if (refs[uuid] !== 0) {
            descendOpRef(assets.get(uuid), refs, _temp$6, 1);
          }
        }

        _temp$6.length = 0;
        return refs[asset._uuid];
      }

      var ReleaseManager = function () {
        function ReleaseManager() {
          this._persistNodeDeps = new Cache();
          this._toDelete = new Cache();
          this._eventListener = false;
          this._dontDestroyAssets = [];
        }

        var _proto = ReleaseManager.prototype;

        _proto.addIgnoredAsset = function addIgnoredAsset(asset) {
          this._dontDestroyAssets.push(asset._uuid);
        };

        _proto.init = function init() {
          this._persistNodeDeps.clear();

          this._toDelete.clear();
        };

        _proto._addPersistNodeRef = function _addPersistNodeRef(node) {
          var deps = [];
          visitNode(node, deps);

          for (var i = 0, l = deps.length; i < l; i++) {
            var dependAsset = assets.get(deps[i]);

            if (dependAsset) {
              dependAsset.addRef();
            }
          }

          this._persistNodeDeps.add(node.uuid, deps);
        };

        _proto._removePersistNodeRef = function _removePersistNodeRef(node) {
          if (!this._persistNodeDeps.has(node.uuid)) {
            return;
          }

          var deps = this._persistNodeDeps.get(node.uuid);

          for (var i = 0, l = deps.length; i < l; i++) {
            var dependAsset = assets.get(deps[i]);

            if (dependAsset) {
              dependAsset.decRef();
            }
          }

          this._persistNodeDeps.remove(node.uuid);
        };

        _proto._autoRelease = function _autoRelease(oldScene, newScene, persistNodes) {
          if (oldScene) {
            var childs = dependUtil.getDeps(oldScene.uuid);

            for (var i = 0, l = childs.length; i < l; i++) {
              var asset = assets.get(childs[i]);

              if (asset) {
                asset.decRef( oldScene.autoReleaseAssets);
              }
            }

            var dependencies = dependUtil._depends.get(oldScene.uuid);

            if (dependencies && dependencies.persistDeps) {
              var persistDeps = dependencies.persistDeps;

              for (var _i2 = 0, _l = persistDeps.length; _i2 < _l; _i2++) {
                var _asset = assets.get(persistDeps[_i2]);

                if (_asset) {
                  _asset.decRef( oldScene.autoReleaseAssets);
                }
              }
            }

            if (oldScene.uuid !== newScene.uuid) {
              dependUtil.remove(oldScene.uuid);
            }
          }

          var sceneDeps = dependUtil._depends.get(newScene.uuid);

          if (sceneDeps) {
            sceneDeps.persistDeps = [];
          }

          for (var key in persistNodes) {
            var _ref;

            var node = persistNodes[key];

            var deps = this._persistNodeDeps.get(node.uuid);

            for (var _iterator = _createForOfIteratorHelperLoose(deps), _step; !(_step = _iterator()).done;) {
              var dep = _step.value;
              var dependAsset = assets.get(dep);

              if (dependAsset) {
                dependAsset.addRef();
              }
            }

            if (!sceneDeps) {
              continue;
            }

            (_ref = sceneDeps.persistDeps).push.apply(_ref, deps);
          }
        };

        _proto.tryRelease = function tryRelease(asset, force) {
          if (force === void 0) {
            force = false;
          }

          if (!(asset instanceof Asset)) {
            return;
          }

          if (force) {
            this._free(asset, force);

            return;
          }

          this._toDelete.add(asset._uuid, asset);

          if (!this._eventListener) {
            this._eventListener = true;
            callInNextTick(this._freeAssets.bind(this));
          }
        };

        _proto._freeAssets = function _freeAssets() {
          var _this = this;

          this._eventListener = false;

          this._toDelete.forEach(function (asset) {
            _this._free(asset);
          });

          this._toDelete.clear();
        };

        _proto._free = function _free(asset, force) {
          if (force === void 0) {
            force = false;
          }

          var uuid = asset._uuid;

          this._toDelete.remove(uuid);

          if (!isValid(asset, true) || this._dontDestroyAssets.indexOf(uuid) !== -1) {
            return;
          }

          if (!force) {
            if (asset.refCount > 0) {
              if (checkCircularReference(asset) > 0) {
                return;
              }
            }
          }

          assets.remove(uuid);
          var depends = dependUtil.getDeps(uuid);

          for (var i = 0, l = depends.length; i < l; i++) {
            var dependAsset = assets.get(depends[i]);

            if (dependAsset) {
              dependAsset.decRef(false);

              {
                this._free(dependAsset, false);
              }
            }
          }

          {
            asset.destroy();
          }

          dependUtil.remove(uuid);
        };

        return ReleaseManager;
      }();

      var releaseManager = new ReleaseManager();

      var defaultProgressCallback = null;
      function clear$1(task, clearRef) {
        for (var i = 0, l = task.input.length; i < l; i++) {
          var _item = task.input[i];

          if (clearRef) {
            if (!_item.isNative && _item.content instanceof Asset) {
              _item.content.decRef(false);
            }
          }

          _item.recycle();
        }

        task.input = null;
      }
      function urlAppendTimestamp(url, append) {
        if (append) {
          if (/\?/.test(url)) {
            return url + "&_t=" + Date.now();
          }

          return url + "?_t=" + Date.now();
        }

        return url;
      }
      function retry(process, times, wait, onComplete, index) {
        if (index === void 0) {
          index = 0;
        }

        process(index, function (err, result) {
          index++;

          if (!err || index > times) {
            if (onComplete) {
              onComplete(err, result);
            }
          } else {
            setTimeout(function () {
              retry(process, times, wait, onComplete, index);
            }, wait);
          }
        });
      }
      function getDepends(uuid, data, exclude, depends, config) {
        try {
          var info = dependUtil.parse(uuid, data);

          for (var i = 0, l = info.deps.length; i < l; i++) {
            var dep = info.deps[i];

            if (!(dep in exclude)) {
              exclude[dep] = true;
              depends.push({
                uuid: dep,
                bundle: config && config.name
              });
            }
          }

          if (info.nativeDep) {
            if (config) {
              info.nativeDep.bundle = config.name;
            }

            depends.push(_extends({}, info.nativeDep));
          }
        } catch (e) {
          error(e.message, e.stack);
        }
      }
      function cache(id, asset, cacheAsset) {
        if (!asset) {
          return;
        }

        cacheAsset = cacheAsset !== undefined ? cacheAsset : legacyCC.assetManager.cacheAsset;

        if (!isScene(asset) && cacheAsset && !asset.isDefault) {
          assets.add(id, asset);
        }
      }
      function setProperties(uuid, asset, assetsMap) {
        var missingAsset = false;
        var depends = dependMap.get(asset);

        if (depends) {
          var missingAssetReporter = null;

          for (var i = 0, l = depends.length; i < l; i++) {
            var depend = depends[i];
            var dependAsset = assetsMap[depend.uuid + "@import"];

            if (!dependAsset) {
              {
                error("The asset " + depend.uuid + " is missing!");
              }

              if (depend.type && depend.type !== Asset) {
                var placeHolder = new depend.type();
                placeHolder.initDefault(depend.uuid);
                depend.owner[depend.prop] = placeHolder;
              }

              missingAsset = true;
            } else {
              depend.owner[depend.prop] = dependAsset.addRef();
            }
          }

          if (missingAssetReporter) {
            missingAssetReporter.reportByOwner();
          }

          dependMap["delete"](asset);
        }

        if (nativeDependMap.has(asset)) {
          if (assetsMap[uuid + "@native"]) {
            asset._nativeAsset = assetsMap[uuid + "@native"];
          } else {
            missingAsset = true;
            console.error("the native asset of " + uuid + " is missing!");
          }

          nativeDependMap["delete"](asset);
        }

        return missingAsset;
      }
      function gatherAsset(task) {
        var source = task.source;

        if (!task.options.__outputAsArray__ && source.length === 1) {
          task.output = source[0].content;
        } else {
          var output = task.output = [];

          for (var i = 0, l = source.length; i < l; i++) {
            output.push(source[i].content);
          }
        }
      }
      function forEach(array, process, onComplete) {
        var count = 0;
        var errs = [];
        var length = array.length;

        if (length === 0 && onComplete) {
          onComplete(errs);
        }

        var cb = function cb(err) {
          if (err) {
            errs.push(err);
          }

          count++;

          if (count === length) {
            if (onComplete) {
              onComplete(errs);
            }
          }
        };

        for (var i = 0; i < length; i++) {
          process(array[i], cb);
        }
      }
      function parseParameters(options, onProgress, onComplete) {
        var optionsOut = options;
        var onProgressOut = onProgress;
        var onCompleteOut = onComplete;

        if (onComplete === undefined) {
          var isCallback = typeof options === 'function';

          if (onProgress) {
            onCompleteOut = onProgress;

            if (!isCallback) {
              onProgressOut = null;
            }
          } else if (onProgress === undefined && isCallback) {
            onCompleteOut = options;
            optionsOut = null;
            onProgressOut = null;
          }

          if (onProgress !== undefined && isCallback) {
            onProgressOut = options;
            optionsOut = null;
          }
        }

        return {
          options: optionsOut || Object.create(null),
          onProgress: onProgressOut,
          onComplete: onCompleteOut
        };
      }
      function parseLoadResArgs(type, onProgress, onComplete) {
        var typeOut = type;
        var onProgressOut = onProgress;
        var onCompleteOut = onComplete;

        if (onComplete === undefined) {
          var isValidType = isChildClassOf(type, Asset);

          if (onProgress) {
            onCompleteOut = onProgress;

            if (isValidType) {
              onProgressOut = null;
            }
          } else if (onProgress === undefined && !isValidType) {
            onCompleteOut = type;
            onProgressOut = null;
            typeOut = null;
          }

          if (onProgress !== undefined && !isValidType) {
            onProgressOut = type;
            typeOut = null;
          }
        }

        return {
          type: typeOut,
          onProgress: onProgressOut || defaultProgressCallback,
          onComplete: onCompleteOut
        };
      }
      function checkCircleReference(owner, uuid, map, checked) {
        if (checked === void 0) {
          checked = {};
        }

        var item = map[uuid];

        if (!item || checked[uuid]) {
          return false;
        }

        checked[uuid] = true;
        var result = false;
        var deps = dependUtil.getDeps(uuid);

        if (deps) {
          for (var i = 0, l = deps.length; i < l; i++) {
            var dep = deps[i];

            if (dep === owner || checkCircleReference(owner, dep, map, checked)) {
              result = true;
              break;
            }
          }
        }

        return result;
      }
      function asyncify(cb) {
        return function (p1, p2) {
          if (!cb) {
            return;
          }

          var refs = [];

          if (Array.isArray(p2)) {
            p2.forEach(function (x) {
              return x instanceof Asset && refs.push(x.addRef());
            });
          } else if (p2 instanceof Asset) {
            refs.push(p2.addRef());
          }

          callInNextTick(function () {
            refs.forEach(function (x) {
              return x.decRef(false);
            });
            cb(p1, p2);
          });
        };
      }

      var Bundle = function () {
        function Bundle() {
          this._config = new Config();
        }

        var _proto = Bundle.prototype;

        _proto.getInfoWithPath = function getInfoWithPath(path, type) {
          return this._config.getInfoWithPath(path, type);
        };

        _proto.getDirWithPath = function getDirWithPath(path, type, out) {
          return this._config.getDirWithPath(path, type, out);
        };

        _proto.getAssetInfo = function getAssetInfo(uuid) {
          return this._config.getAssetInfo(uuid);
        };

        _proto.getSceneInfo = function getSceneInfo(name) {
          return this._config.getSceneInfo(name);
        };

        _proto.init = function init(options) {
          this._config.init(options);

          bundles.add(options.name, this);
        };

        _proto.load = function load(paths, type, onProgress, onComplete) {
          var _parseLoadResArgs = parseLoadResArgs(type, onProgress, onComplete),
              _type = _parseLoadResArgs.type,
              onProg = _parseLoadResArgs.onProgress,
              onComp = _parseLoadResArgs.onComplete;

          var options = {
            __requestType__: RequestType.PATH,
            type: _type,
            bundle: this.name,
            __outputAsArray__: Array.isArray(paths)
          };
          legacyCC.assetManager.loadAny(paths, options, onProg, onComp);
        };

        _proto.preload = function preload(paths, type, onProgress, onComplete) {
          var _parseLoadResArgs2 = parseLoadResArgs(type, onProgress, onComplete),
              _type = _parseLoadResArgs2.type,
              onProg = _parseLoadResArgs2.onProgress,
              onComp = _parseLoadResArgs2.onComplete;

          legacyCC.assetManager.preloadAny(paths, {
            __requestType__: RequestType.PATH,
            type: _type,
            bundle: this.name
          }, onProg, onComp);
        };

        _proto.loadDir = function loadDir(dir, type, onProgress, onComplete) {
          var _parseLoadResArgs3 = parseLoadResArgs(type, onProgress, onComplete),
              _type = _parseLoadResArgs3.type,
              onProg = _parseLoadResArgs3.onProgress,
              onComp = _parseLoadResArgs3.onComplete;

          legacyCC.assetManager.loadAny(dir, {
            __requestType__: RequestType.DIR,
            type: _type,
            bundle: this.name,
            __outputAsArray__: true
          }, onProg, onComp);
        };

        _proto.preloadDir = function preloadDir(dir, type, onProgress, onComplete) {
          var _parseLoadResArgs4 = parseLoadResArgs(type, onProgress, onComplete),
              _type = _parseLoadResArgs4.type,
              onProg = _parseLoadResArgs4.onProgress,
              onComp = _parseLoadResArgs4.onComplete;

          legacyCC.assetManager.preloadAny(dir, {
            __requestType__: RequestType.DIR,
            type: _type,
            bundle: this.name
          }, onProg, onComp);
        };

        _proto.loadScene = function loadScene(sceneName, options, onProgress, onComplete) {
          var _parseParameters = parseParameters(options, onProgress, onComplete),
              opts = _parseParameters.options,
              onProg = _parseParameters.onProgress,
              onComp = _parseParameters.onComplete;

          opts.preset = opts.preset || 'scene';
          opts.bundle = this.name;
          legacyCC.assetManager.loadAny({
            scene: sceneName
          }, opts, onProg, function (err, sceneAsset) {
            if (err) {
              error(err.message, err.stack);
            } else if (sceneAsset.scene) {
              var scene = sceneAsset.scene;
              scene._id = sceneAsset._uuid;
              scene.name = sceneAsset.name;
            } else {
              err = new Error("The asset " + sceneAsset._uuid + " is not a scene");
            }

            if (onComp) {
              onComp(err, sceneAsset);
            }
          });
        };

        _proto.preloadScene = function preloadScene(sceneName, options, onProgress, onComplete) {
          var _parseParameters2 = parseParameters(options, onProgress, onComplete),
              opts = _parseParameters2.options,
              onProg = _parseParameters2.onProgress,
              onComp = _parseParameters2.onComplete;

          opts.bundle = this.name;
          legacyCC.assetManager.preloadAny({
            scene: sceneName
          }, opts, onProg, function (err) {
            if (err) {
              errorID(1210, sceneName, err.message);
            }

            if (onComp) {
              onComp(err);
            }
          });
        };

        _proto.get = function get(path, type) {
          var info = this.getInfoWithPath(path, type);

          if (info) {
            return assets.get(info.uuid) || null;
          }

          return null;
        };

        _proto.release = function release(path, type) {
          var asset = this.get(path, type);

          if (asset) {
            releaseManager.tryRelease(asset, true);
          }
        };

        _proto.releaseUnusedAssets = function releaseUnusedAssets() {
          var _this = this;

          assets.forEach(function (asset) {
            var info = _this.getAssetInfo(asset._uuid);

            if (info && !info.redirect) {
              releaseManager.tryRelease(asset);
            }
          });
        };

        _proto.releaseAll = function releaseAll() {
          var _this2 = this;

          assets.forEach(function (asset) {
            var info = _this2.getAssetInfo(asset._uuid);

            if (info && !info.redirect) {
              releaseManager.tryRelease(asset, true);
            }
          });
        };

        _proto._destroy = function _destroy() {
          this._config.destroy();
        };

        _createClass(Bundle, [{
          key: "config",
          get: function get() {
            return this._config;
          }
        }, {
          key: "name",
          get: function get() {
            return this._config.name;
          }
        }, {
          key: "deps",
          get: function get() {
            return this._config.deps;
          }
        }, {
          key: "base",
          get: function get() {
            return this._config.base;
          }
        }]);

        return Bundle;
      }();
      var resources = exports('resources', new Bundle());
      legacyCC.resources = resources;

      var CacheManager = function CacheManager() {
        this.cacheDir = void 0;
        this.cacheEnabled = void 0;
        this.autoClear = void 0;
        this.cacheInterval = void 0;
        this.deleteInterval = void 0;
        this.cachedFiles = void 0;
      };

      function downloadDomImage(url, options, onComplete) {
        var img = new ccwindow.Image();

        if (ccwindow.location.protocol !== 'file:') {
          img.crossOrigin = 'anonymous';
        }

        function loadCallback() {
          img.removeEventListener('load', loadCallback);
          img.removeEventListener('error', errorCallback);

          if (onComplete) {
            onComplete(null, img);
          }
        }

        function errorCallback() {
          img.removeEventListener('load', loadCallback);
          img.removeEventListener('error', errorCallback);

          if (onComplete) {
            onComplete(new Error(getError(4930, url)));
          }
        }

        img.addEventListener('load', loadCallback);
        img.addEventListener('error', errorCallback);
        img.src = url;
        return img;
      }

      function downloadFile(url, options, onProgress, onComplete) {
        var xhr = new XMLHttpRequest();
        var errInfo = "download failed: " + url + ", status: ";
        xhr.open('GET', url, true);

        if (options.xhrResponseType !== undefined) {
          xhr.responseType = options.xhrResponseType;
        }

        if (options.xhrWithCredentials !== undefined) {
          xhr.withCredentials = options.xhrWithCredentials;
        }

        if (options.xhrMimeType !== undefined && xhr.overrideMimeType) {
          xhr.overrideMimeType(options.xhrMimeType);
        }

        if (options.xhrTimeout !== undefined) {
          xhr.timeout = options.xhrTimeout;
        }

        if (options.xhrHeader) {
          for (var header in options.xhrHeader) {
            xhr.setRequestHeader(header, options.xhrHeader[header]);
          }
        }

        xhr.onload = function () {
          if (xhr.status === 200 || xhr.status === 0) {
            if (onComplete) {
              onComplete(null, xhr.response);
            }
          } else if (onComplete) {
            onComplete(new Error("" + errInfo + xhr.status + "(no response)"));
          }
        };

        if (onProgress) {
          xhr.onprogress = function (e) {
            if (e.lengthComputable) {
              onProgress(e.loaded, e.total);
            }
          };
        }

        xhr.onerror = function () {
          if (onComplete) {
            onComplete(new Error("" + errInfo + xhr.status + "(error)"));
          }
        };

        xhr.ontimeout = function () {
          if (onComplete) {
            onComplete(new Error("" + errInfo + xhr.status + "(time out)"));
          }
        };

        xhr.onabort = function () {
          if (onComplete) {
            onComplete(new Error("" + errInfo + xhr.status + "(abort)"));
          }
        };

        xhr.send(null);
        return xhr;
      }

      var ccdocument$1 = ccwindow.document;
      var downloaded = {};
      function downloadScript(url, options, onComplete) {
        if (downloaded[url]) {
          if (onComplete) {
            onComplete(null);
          }

          return null;
        }

        var script = ccdocument$1.createElement('script');

        if (ccwindow.location.protocol !== 'file:') {
          script.crossOrigin = 'anonymous';
        }

        script.async = options.scriptAsyncLoading || false;
        script.src = url;

        function loadHandler() {
          script.parentNode.removeChild(script);
          script.removeEventListener('load', loadHandler, false);
          script.removeEventListener('error', errorHandler, false);
          downloaded[url] = true;

          if (onComplete) {
            onComplete(null);
          }
        }

        function errorHandler() {
          script.parentNode.removeChild(script);
          script.removeEventListener('load', loadHandler, false);
          script.removeEventListener('error', errorHandler, false);

          if (onComplete) {
            onComplete(new Error(getError(4928, url)));
          }
        }

        script.addEventListener('load', loadHandler, false);
        script.addEventListener('error', errorHandler, false);
        ccdocument$1.body.appendChild(script);
        return script;
      }

      var REGEX = /^(?:\w+:\/\/|\.+\/).+/;

      var downloadImage = function downloadImage(url, options, onComplete) {
        var func = sys.hasFeature(sys.Feature.IMAGE_BITMAP) && legacyCC.assetManager.allowImageBitmap ? downloadBlob : downloadDomImage;
        func(url, options, onComplete);
      };

      var downloadBlob = function downloadBlob(url, options, onComplete) {
        options.xhrResponseType = 'blob';
        downloadFile(url, options, options.onFileProgress, onComplete);
      };

      var downloadJson = function downloadJson(url, options, onComplete) {
        options.xhrResponseType = 'json';
        downloadFile(url, options, options.onFileProgress, onComplete);
      };

      var downloadArrayBuffer = function downloadArrayBuffer(url, options, onComplete) {
        options.xhrResponseType = 'arraybuffer';
        downloadFile(url, options, options.onFileProgress, onComplete);
      };

      var downloadCCON = function downloadCCON(url, options, onComplete) {
        downloadJson(url, options, function (err, json) {
          if (err) {
            onComplete(err);
            return;
          }

          var cconPreface = parseCCONJson(json);
          var chunkPromises = Promise.all(cconPreface.chunks.map(function (chunk) {
            return new Promise(function (resolve, reject) {
              downloadArrayBuffer("" + mainFileName(url) + chunk, {}, function (errChunk, chunkBuffer) {
                if (err) {
                  reject(err);
                } else {
                  resolve(new Uint8Array(chunkBuffer));
                }
              });
            });
          }));
          chunkPromises.then(function (chunks) {
            var ccon = new CCON(cconPreface.document, chunks);
            onComplete(null, ccon);
          })["catch"](function (err) {
            onComplete(err);
          });
        });
      };

      var downloadCCONB = function downloadCCONB(url, options, onComplete) {
        downloadArrayBuffer(url, options, function (err, arrayBuffer) {
          if (err) {
            onComplete(err);
            return;
          }

          try {
            var ccon = decodeCCONBinary(new Uint8Array(arrayBuffer));
            onComplete(null, ccon);
          } catch (err) {
            onComplete(err);
          }
        });
      };

      var downloadText = function downloadText(url, options, onComplete) {
        options.xhrResponseType = 'text';
        downloadFile(url, options, options.onFileProgress, onComplete);
      };

      var downloadBundle = function downloadBundle(nameOrUrl, options, onComplete) {
        var bundleName = basename(nameOrUrl);
        var url = nameOrUrl;

        if (!REGEX.test(url)) {
          if (downloader.remoteBundles.indexOf(bundleName) !== -1) {
            url = downloader.remoteServerAddress + "remote/" + bundleName;
          } else {
            url = "assets/" + bundleName;
          }
        }

        var version = options.version || downloader.bundleVers[bundleName];
        var count = 0;
        var config = url + "/config." + (version ? version + "." : '') + "json";
        var out = null;
        var error = null;
        downloadJson(config, options, function (err, response) {
          error = err;
          out = response;

          if (out) {
            out.base = url + "/";
          }

          if (++count === 2) {
            onComplete(error, out);
          }
        });
        var jspath = url + "/index." + (version ? version + "." : '') + "js";
        downloadScript(jspath, options, function (err) {
          error = err;

          if (++count === 2) {
            onComplete(err, out);
          }
        });
      };

      var Downloader = function () {
        var _proto = Downloader.prototype;

        _proto.init = function init(remoteServerAddress, bundleVers, remoteBundles) {
          if (remoteServerAddress === void 0) {
            remoteServerAddress = '';
          }

          if (bundleVers === void 0) {
            bundleVers = {};
          }

          if (remoteBundles === void 0) {
            remoteBundles = [];
          }

          this._downloading.clear();

          this._queue.length = 0;
          this._remoteServerAddress = remoteServerAddress;
          this.bundleVers = bundleVers;
          this.remoteBundles = remoteBundles;
        };

        _proto.register = function register(type, handler) {
          if (typeof type === 'object') {
            mixin(this._downloaders, type);
          } else {
            this._downloaders[type] = handler;
          }
        };

        _proto.download = function download(id, url, type, options, onComplete) {
          var _this = this;

          var file = files.get(id);

          if (file) {
            onComplete(null, file);
            return;
          }

          var downloadCallbacks = this._downloading.get(id);

          if (downloadCallbacks) {
            downloadCallbacks.push(onComplete);

            var request = this._queue.find(function (x) {
              return x.id === id;
            });

            if (!request) {
              return;
            }

            var priority = options.priority || 0;

            if (request.priority < priority) {
              request.priority = priority;
              this._queueDirty = true;
            }

            return;
          }

          var maxRetryCount = typeof options.maxRetryCount !== 'undefined' ? options.maxRetryCount : this.maxRetryCount;
          var maxConcurrency = typeof options.maxConcurrency !== 'undefined' ? options.maxConcurrency : this.maxConcurrency;
          var maxRequestsPerFrame = typeof options.maxRequestsPerFrame !== 'undefined' ? options.maxRequestsPerFrame : this.maxRequestsPerFrame;
          var handler = this._downloaders[type] || this._downloaders["default"];

          var process = function process(index, callback) {
            if (index === 0) {
              _this._downloading.add(id, [onComplete]);
            }

            if (!_this.limited) {
              handler(urlAppendTimestamp(url, _this.appendTimeStamp), options, callback);
              return;
            }

            _this._updateTime();

            var done = function done(err, data) {
              _this._totalNum--;

              _this._handleQueueInNextFrame(maxConcurrency, maxRequestsPerFrame);

              callback(err, data);
            };

            if (_this._totalNum < maxConcurrency && _this._totalNumThisPeriod < maxRequestsPerFrame) {
              handler(urlAppendTimestamp(url, _this.appendTimeStamp), options, done);
              _this._totalNum++;
              _this._totalNumThisPeriod++;
            } else {
              _this._queue.push({
                id: id,
                priority: options.priority || 0,
                url: url,
                options: options,
                done: done,
                handler: handler
              });

              _this._queueDirty = true;

              if (_this._totalNum < maxConcurrency) {
                _this._handleQueueInNextFrame(maxConcurrency, maxRequestsPerFrame);
              }
            }
          };

          var finale = function finale(err, result) {
            if (!err) {
              files.add(id, result);
            }

            var callbacks = _this._downloading.remove(id);

            for (var i = 0, l = callbacks.length; i < l; i++) {
              callbacks[i](err, result);
            }
          };

          retry(process, maxRetryCount, this.retryInterval, finale);
        };

        _proto.loadSubpackage = function loadSubpackage(name, completeCallback) {
          legacyCC.assetManager.loadBundle(name, null, completeCallback);
        };

        function Downloader() {
          this.maxConcurrency = 6;
          this.maxRequestsPerFrame = 6;
          this.maxRetryCount =  3 ;
          this.appendTimeStamp = !!EDITOR;
          this.limited = !EDITOR;
          this.retryInterval = 2000;
          this.bundleVers = null;
          this.remoteBundles = [];
          this.downloadDomImage = downloadDomImage;
          this.downloadDomAudio = null;
          this.downloadFile = downloadFile;
          this.downloadScript = downloadScript;
          this._downloaders = {
            '.png': downloadImage,
            '.jpg': downloadImage,
            '.bmp': downloadImage,
            '.jpeg': downloadImage,
            '.gif': downloadImage,
            '.ico': downloadImage,
            '.tiff': downloadImage,
            '.webp': downloadImage,
            '.image': downloadImage,
            '.pvr': downloadArrayBuffer,
            '.pkm': downloadArrayBuffer,
            '.astc': downloadArrayBuffer,
            '.txt': downloadText,
            '.xml': downloadText,
            '.vsh': downloadText,
            '.fsh': downloadText,
            '.atlas': downloadText,
            '.tmx': downloadText,
            '.tsx': downloadText,
            '.json': downloadJson,
            '.ExportJson': downloadJson,
            '.plist': downloadText,
            '.ccon': downloadCCON,
            '.cconb': downloadCCONB,
            '.fnt': downloadText,
            '.binary': downloadArrayBuffer,
            '.bin': downloadArrayBuffer,
            '.dbbin': downloadArrayBuffer,
            '.skel': downloadArrayBuffer,
            '.js': downloadScript,
            bundle: downloadBundle,
            "default": downloadText
          };
          this._downloading = new Cache();
          this._queue = [];
          this._queueDirty = false;
          this._totalNum = 0;
          this._totalNumThisPeriod = 0;
          this._lastDate = -1;
          this._checkNextPeriod = false;
          this._remoteServerAddress = '';
          this._maxInterval = 1 / 30;
        }

        _proto._updateTime = function _updateTime() {
          var now = performance.now();
          var deltaTime = legacyCC.game.deltaTime;
          var interval = deltaTime > this._maxInterval ? this._maxInterval : deltaTime;

          if (now - this._lastDate > interval * 1000) {
            this._totalNumThisPeriod = 0;
            this._lastDate = now;
          }
        };

        _proto._handleQueue = function _handleQueue(maxConcurrency, maxRequestsPerFrame) {
          this._checkNextPeriod = false;

          this._updateTime();

          while (this._queue.length > 0 && this._totalNum < maxConcurrency && this._totalNumThisPeriod < maxRequestsPerFrame) {
            if (this._queueDirty) {
              this._queue.sort(function (a, b) {
                return a.priority - b.priority;
              });

              this._queueDirty = false;
            }

            var request = this._queue.pop();

            if (!request) {
              break;
            }

            this._totalNum++;
            this._totalNumThisPeriod++;
            request.handler(urlAppendTimestamp(request.url, this.appendTimeStamp), request.options, request.done);
          }

          this._handleQueueInNextFrame(maxConcurrency, maxRequestsPerFrame);
        };

        _proto._handleQueueInNextFrame = function _handleQueueInNextFrame(maxConcurrency, maxRequestsPerFrame) {
          if (!this._checkNextPeriod && this._queue.length > 0) {
            callInNextTick(this._handleQueue.bind(this), maxConcurrency, maxRequestsPerFrame);
            this._checkNextPeriod = true;
          }
        };

        _createClass(Downloader, [{
          key: "remoteServerAddress",
          get: function get() {
            return this._remoteServerAddress;
          }
        }], [{
          key: "instance",
          get: function get() {
            if (!Downloader._instance) {
              Downloader._instance = new Downloader();
            }

            return Downloader._instance;
          }
        }]);

        return Downloader;
      }();
      Downloader._instance = void 0;
      var downloader = Downloader.instance;
      var downloader$1 = Downloader.instance;

      var _dec$e, _class$e, _class2$c, _initializer$a;
      var JsonAsset = exports('JsonAsset', (_dec$e = ccclass('cc.JsonAsset'), _dec$e(_class$e = (_class2$c = function (_Asset) {
        _inheritsLoose(JsonAsset, _Asset);

        function JsonAsset() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Asset.call.apply(_Asset, [this].concat(args)) || this;
          _this.json = _initializer$a && _initializer$a();
          return _this;
        }

        return JsonAsset;
      }(Asset), (_initializer$a = applyDecoratedInitializer(_class2$c.prototype, "json", [serializable], function () {
        return null;
      })), _class2$c)) || _class$e));
      legacyCC.JsonAsset = JsonAsset;

      var _dec$f, _class$f, _class2$d, _initializer$b;
      var TextAsset = exports('TextAsset', (_dec$f = ccclass('cc.TextAsset'), _dec$f(_class$f = (_class2$d = function (_Asset) {
        _inheritsLoose(TextAsset, _Asset);

        function TextAsset() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Asset.call.apply(_Asset, [this].concat(args)) || this;
          _this.text = _initializer$b && _initializer$b();
          return _this;
        }

        var _proto = TextAsset.prototype;

        _proto.toString = function toString() {
          return this.text;
        };

        return TextAsset;
      }(Asset), (_initializer$b = applyDecoratedInitializer(_class2$d.prototype, "text", [serializable], function () {
        return '';
      })), _class2$d)) || _class$f));
      legacyCC.TextAsset = TextAsset;

      var _dec$g, _class$g, _class2$e;
      var BufferAsset = exports('BufferAsset', (_dec$g = ccclass('cc.BufferAsset'), _dec$g(_class$g = (_class2$e = function (_Asset) {
        _inheritsLoose(BufferAsset, _Asset);

        function BufferAsset() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Asset.call.apply(_Asset, [this].concat(args)) || this;
          _this._buffer = null;
          return _this;
        }

        var _proto = BufferAsset.prototype;

        _proto.buffer = function buffer() {
          assertIsNonNullable(this._buffer);
          return this._buffer;
        };

        _proto.validate = function validate() {
          return !!this._buffer;
        };

        _createClass(BufferAsset, [{
          key: "_nativeAsset",
          get: function get() {
            return this._buffer;
          },
          set: function set(bin) {
            if (bin instanceof ArrayBuffer) {
              this._buffer = bin;
            } else {
              this._buffer = bin.buffer;
            }
          }
        }]);

        return BufferAsset;
      }(Asset), (_applyDecoratedDescriptor(_class2$e.prototype, "_nativeAsset", [override], Object.getOwnPropertyDescriptor(_class2$e.prototype, "_nativeAsset"), _class2$e.prototype)), _class2$e)) || _class$g));
      legacyCC.BufferAsset = BufferAsset;

      function createImageAsset(id, data, options, onComplete) {
        var out = null;
        var err = null;

        try {
          out = new ImageAsset();
          out._nativeUrl = id;
          out._nativeAsset = data;
        } catch (e) {
          err = e;
        }

        onComplete(err, out);
      }

      function createJsonAsset(id, data, options, onComplete) {
        var out = new JsonAsset();
        out.json = data;
        onComplete(null, out);
      }

      function createTextAsset(id, data, options, onComplete) {
        var out = new TextAsset();
        out.text = data;
        onComplete(null, out);
      }

      function createBufferAsset(id, data, options, onComplete) {
        var out = new BufferAsset();
        out._nativeUrl = id;
        out._nativeAsset = data;
        onComplete(null, out);
      }

      function createAsset(id, data, options, onComplete) {
        var out = new Asset();
        out._nativeUrl = id;
        out._nativeAsset = data;
        onComplete(null, out);
      }

      function createBundle(id, data, options, onComplete) {
        var bundle = bundles.get(data.name);

        if (!bundle) {
          bundle = data.name === BuiltinBundleName.RESOURCES ? resources : new Bundle();
          data.base = data.base || id + "/";
          bundle.init(data);
        }

        {
          module.import("virtual:///prerequisite-imports/" + bundle.name).then(function () {
            onComplete(null, bundle);
          })["catch"](onComplete);
        }
      }

      var Factory = function () {
        function Factory() {
          this._creating = new Cache();
          this._producers = {
            '.png': createImageAsset,
            '.jpg': createImageAsset,
            '.bmp': createImageAsset,
            '.jpeg': createImageAsset,
            '.gif': createImageAsset,
            '.ico': createImageAsset,
            '.tiff': createImageAsset,
            '.webp': createImageAsset,
            '.image': createImageAsset,
            '.pvr': createImageAsset,
            '.pkm': createImageAsset,
            '.txt': createTextAsset,
            '.xml': createTextAsset,
            '.vsh': createTextAsset,
            '.fsh': createTextAsset,
            '.atlas': createTextAsset,
            '.tmx': createTextAsset,
            '.tsx': createTextAsset,
            '.fnt': createTextAsset,
            '.json': createJsonAsset,
            '.ExportJson': createJsonAsset,
            '.binary': createBufferAsset,
            '.bin': createBufferAsset,
            '.dbbin': createBufferAsset,
            '.skel': createBufferAsset,
            bundle: createBundle,
            "default": createAsset
          };
        }

        var _proto = Factory.prototype;

        _proto.register = function register(type, handler) {
          if (typeof type === 'object') {
            mixin(this._producers, type);
          } else {
            this._producers[type] = handler;
          }
        };

        _proto.create = function create(id, data, type, options, onComplete) {
          var _this = this;

          var handler = this._producers[type] || this._producers["default"];
          var asset = assets.get(id);

          if (!options.reloadAsset && asset) {
            onComplete(null, asset);
            return;
          }

          var creating = this._creating.get(id);

          if (creating) {
            creating.push(onComplete);
            return;
          }

          this._creating.add(id, [onComplete]);

          handler(id, data, options, function (err, result) {
            if (!err && result instanceof Asset) {
              result._uuid = id;
              cache(id, result, options.cacheAsset);
            }

            var callbacks = _this._creating.remove(id);

            for (var i = 0, l = callbacks.length; i < l; i++) {
              callbacks[i](err, result);
            }
          });
        };

        return Factory;
      }();
      var factory = new Factory();

      var PackManager = function () {
        function PackManager() {
          this._loading = new Cache();
          this._unpackers = {
            '.json': this.unpackJson
          };
        }

        var _proto = PackManager.prototype;

        _proto.unpackJson = function unpackJson(pack, json, options, onComplete) {
          var out = createMap(true);
          var err = null;

          if (Array.isArray(json)) {
            json = unpackJSONs(json);

            if (json.length !== pack.length) {
              errorID(4915);
            }

            for (var i = 0; i < pack.length; i++) {
              out[pack[i] + "@import"] = json[i];
            }
          } else {
            var textureType = getClassId(Texture2D);
            var imageAssetType = getClassId(ImageAsset);

            if (json.type === textureType && json.data) {
              var datas = json.data;

              if (datas.length !== pack.length) {
                errorID(4915);
              }

              for (var _i = 0; _i < pack.length; _i++) {
                out[pack[_i] + "@import"] = packCustomObjData(textureType, {
                  base: datas[_i][0],
                  mipmaps: datas[_i][1]
                });
              }
            } else if (json.type === imageAssetType && json.data) {
              var _datas = json.data;

              if (_datas.length !== pack.length) {
                errorID(4915);
              }

              for (var _i2 = 0; _i2 < pack.length; _i2++) {
                out[pack[_i2] + "@import"] = _datas[_i2];
              }
            } else {
              err = new Error('unmatched type pack!');
              out = null;
            }
          }

          onComplete(err, out);
        };

        _proto.init = function init() {
          this._loading.clear();
        };

        _proto.register = function register(type, handler) {
          if (typeof type === 'object') {
            mixin(this._unpackers, type);
          } else {
            this._unpackers[type] = handler;
          }
        };

        _proto.unpack = function unpack(pack, data, type, options, onComplete) {
          if (!data) {
            onComplete(new Error('package data is wrong!'));
            return;
          }

          var unpacker = this._unpackers[type];
          unpacker(pack, data, options, onComplete);
        };

        _proto.load = function load(item, options, onComplete) {
          var _this = this;

          if (item.isNative || !item.info || !item.info.packs) {
            downloader$1.download(item.id, item.url, item.ext, item.options, onComplete);
            return;
          }

          if (files.has(item.id)) {
            onComplete(null, files.get(item.id));
            return;
          }

          var packs = item.info.packs;
          var pack = packs.find(function (val) {
            return _this._loading.has(val.uuid);
          });

          if (pack) {
            this._loading.get(pack.uuid).push({
              onComplete: onComplete,
              id: item.id
            });

            return;
          }

          pack = packs[0];

          this._loading.add(pack.uuid, [{
            onComplete: onComplete,
            id: item.id
          }]);

          var url = transform(pack.uuid, {
            ext: pack.ext,
            bundle: item.config.name
          });
          downloader$1.download(pack.uuid, url, pack.ext, item.options, function (err, data) {
            files.remove(pack.uuid);

            if (err) {
              error(err.message, err.stack);
            }

            _this.unpack(pack.packedUuids, data, pack.ext, item.options, function (err2, result) {
              if (!err2) {
                for (var id in result) {
                  files.add(id, result[id]);
                }
              }

              var callbacks = _this._loading.remove(pack.uuid);

              for (var i = 0, l = callbacks.length; i < l; i++) {
                var cb = callbacks[i];

                if (err || err2) {
                  cb.onComplete(err || err2);
                  continue;
                }

                var unpackedData = result[cb.id];

                if (!unpackedData) {
                  cb.onComplete(new Error('can not retrieve data from package'));
                } else {
                  cb.onComplete(null, unpackedData);
                }
              }
            });
          });
        };

        return PackManager;
      }();
      var packManager = new PackManager();

      function fetch(task, done) {
        var firstTask = false;

        if (!task.progress) {
          task.progress = {
            finish: 0,
            total: task.input.length,
            canInvoke: true
          };
          firstTask = true;
        }

        var options = task.options,
            progress = task.progress;
        var depends = [];
        var total = progress.total;
        var exclude = options.__exclude__ = options.__exclude__ || Object.create(null);
        task.output = [];
        forEach(task.input, function (item, cb) {
          if (!item.isNative && assets.has(item.uuid)) {
            var asset = assets.get(item.uuid);
            item.content = asset.addRef();
            task.output.push(item);

            if (progress.canInvoke) {
              task.dispatch('progress', ++progress.finish, progress.total, item);
            }

            cb();
            return;
          }

          packManager.load(item, task.options, function (err, data) {
            if (err) {
              if (!task.isFinished) {
                if (!legacyCC.assetManager.force || firstTask) {
                  error(err.message, err.stack);
                  progress.canInvoke = false;
                  done(err);
                } else {
                  task.output.push(item);

                  if (progress.canInvoke) {
                    task.dispatch('progress', ++progress.finish, progress.total, item);
                  }
                }
              }
            } else if (!task.isFinished) {
              item.file = data;
              task.output.push(item);

              if (!item.isNative) {
                exclude[item.uuid] = true;
                getDepends(item.uuid, data, exclude, depends, item.config);
                progress.total = total + depends.length;
              }

              if (progress.canInvoke) {
                task.dispatch('progress', ++progress.finish, progress.total, item);
              }
            }

            cb();
          });
        }, function () {
          if (task.isFinished) {
            clear$1(task, true);
            task.dispatch('error');
            return;
          }

          if (depends.length > 0) {
            var subTask = Task.create({
              input: depends,
              progress: progress,
              options: options,
              onProgress: task.onProgress,
              onError: Task.prototype.recycle,
              onComplete: function onComplete(err) {
                if (!err) {
                  var _task$output;

                  (_task$output = task.output).push.apply(_task$output, subTask.output);

                  subTask.recycle();
                }

                if (firstTask) {
                  decreaseRef(task);
                }

                done(err);
              }
            });
            fetchPipeline.async(subTask);
            return;
          }

          if (firstTask) {
            decreaseRef(task);
          }

          done();
        });
      }

      function decreaseRef(task) {
        var output = task.output;

        for (var i = 0, l = output.length; i < l; i++) {
          if (output[i].content) {
            output[i].content.decRef(false);
          }
        }
      }

      var SAXParser = function () {
        function SAXParser() {
          this._parser = null;

          if (globalThis.DOMParser) {
            this._parser = new DOMParser();
          }
        }

        var _proto = SAXParser.prototype;

        _proto.parse = function parse(xmlTxt) {
          return this._parseXML(xmlTxt);
        };

        _proto._parseXML = function _parseXML(textxml) {
          if (this._parser) {
            return this._parser.parseFromString(textxml, 'text/xml');
          }

          throw new Error('Dom parser is not supported in this platform!');
        };

        return SAXParser;
      }();

      var PlistParser = function (_SAXParser) {
        _inheritsLoose(PlistParser, _SAXParser);

        function PlistParser() {
          return _SAXParser.apply(this, arguments) || this;
        }

        var _proto2 = PlistParser.prototype;

        _proto2.parse = function parse(xmlTxt) {
          var xmlDoc = this._parseXML(xmlTxt);

          var plist = xmlDoc.documentElement;

          if (plist.tagName !== 'plist') {
            warnID(5100);
            return {};
          }

          var node = null;

          for (var i = 0, len = plist.childNodes.length; i < len; i++) {
            node = plist.childNodes[i];

            if (node.nodeType === 1) {
              break;
            }
          }

          return this._parseNode(node);
        };

        _proto2._parseNode = function _parseNode(node) {
          var data = null;
          var tagName = node.tagName;

          if (tagName === 'dict') {
            data = this._parseDict(node);
          } else if (tagName === 'array') {
            data = this._parseArray(node);
          } else if (tagName === 'string') {
            if (node.childNodes.length === 1) {
              data = node.firstChild.nodeValue;
            } else {
              data = '';

              for (var i = 0; i < node.childNodes.length; i++) {
                data += node.childNodes[i].nodeValue;
              }
            }
          } else if (tagName === 'false') {
            data = false;
          } else if (tagName === 'true') {
            data = true;
          } else if (tagName === 'real') {
            data = parseFloat(node.firstChild.nodeValue);
          } else if (tagName === 'integer') {
            data = parseInt(node.firstChild.nodeValue, 10);
          }

          return data;
        };

        _proto2._parseArray = function _parseArray(node) {
          var data = [];

          for (var i = 0, len = node.childNodes.length; i < len; i++) {
            var child = node.childNodes[i];

            if (child.nodeType !== 1) {
              continue;
            }

            data.push(this._parseNode(child));
          }

          return data;
        };

        _proto2._parseDict = function _parseDict(node) {
          var data = {};
          var key = '';

          for (var i = 0, len = node.childNodes.length; i < len; i++) {
            var child = node.childNodes[i];

            if (child.nodeType !== 1) {
              continue;
            }

            if (child.tagName === 'key') {
              key = child.firstChild.nodeValue;
            } else {
              data[key] = this._parseNode(child);
            }
          }

          return data;
        };

        return PlistParser;
      }(SAXParser);

      var plistParser = new PlistParser();

      var Parser = function () {
        function Parser() {
          this._parsing = new Cache();
          this._parsers = {
            '.png': this.parseImage,
            '.jpg': this.parseImage,
            '.bmp': this.parseImage,
            '.jpeg': this.parseImage,
            '.gif': this.parseImage,
            '.ico': this.parseImage,
            '.tiff': this.parseImage,
            '.webp': this.parseImage,
            '.image': this.parseImage,
            '.pvr': this.parsePVRTex,
            '.pkm': this.parsePKMTex,
            '.astc': this.parseASTCTex,
            '.plist': this.parsePlist,
            "import": this.parseImport,
            '.ccon': this.parseImport,
            '.cconb': this.parseImport
          };
        }

        var _proto = Parser.prototype;

        _proto.parseImage = function parseImage(file, options, onComplete) {
          if (file instanceof HTMLImageElement) {
            onComplete(null, file);
            return;
          }

          createImageBitmap(file, {
            premultiplyAlpha: 'none'
          }).then(function (result) {
            onComplete(null, result);
          }, function (err) {
            onComplete(err, null);
          });
        };

        _proto.parsePVRTex = function parsePVRTex(file, options, onComplete) {
          var err = null;
          var out = null;

          try {
            out = ImageAsset.parseCompressedTextures(file, 0);
          } catch (e) {
            err = e;
            console.warn(err);
          }

          onComplete(err, out);
        };

        _proto.parsePKMTex = function parsePKMTex(file, options, onComplete) {
          var err = null;
          var out = null;

          try {
            out = ImageAsset.parseCompressedTextures(file, 1);
          } catch (e) {
            err = e;
            console.warn(err);
          }

          onComplete(err, out);
        };

        _proto.parseASTCTex = function parseASTCTex(file, options, onComplete) {
          var err = null;
          var out = null;

          try {
            out = ImageAsset.parseCompressedTextures(file, 2);
          } catch (e) {
            err = e;
            console.warn(err);
          }

          onComplete(err, out);
        };

        _proto.parsePlist = function parsePlist(file, options, onComplete) {
          var err = null;
          var result = plistParser.parse(file);

          if (!result) {
            err = new Error('parse failed');
          }

          onComplete(err, result);
        };

        _proto.parseImport = function parseImport(file, options, onComplete) {
          if (!file) {
            onComplete(new Error("The json file of asset " + options.__uuid__ + " is empty or missing"));
            return;
          }

          var result = null;
          var err = null;

          try {
            result = deserializeAsset(file, options);
          } catch (e) {
            err = e;
          }

          onComplete(err, result);
        };

        _proto.init = function init() {
          this._parsing.clear();
        };

        _proto.register = function register(type, handler) {
          if (typeof type === 'object') {
            mixin(this._parsers, type);
          } else {
            this._parsers[type] = handler;
          }
        };

        _proto.parse = function parse(id, file, type, options, onComplete) {
          var _this = this;

          var parsedAsset = parsed.get(id);

          if (parsedAsset) {
            onComplete(null, parsedAsset);
            return;
          }

          var parsing = this._parsing.get(id);

          if (parsing) {
            parsing.push(onComplete);
            return;
          }

          var parseHandler = this._parsers[type];

          if (!parseHandler) {
            onComplete(null, file);
            return;
          }

          this._parsing.add(id, [onComplete]);

          parseHandler(file, options, function (err, data) {
            if (err) {
              files.remove(id);
            } else if (!isScene(data)) {
              parsed.add(id, data);
            }

            var callbacks = _this._parsing.remove(id);

            for (var i = 0, l = callbacks.length; i < l; i++) {
              callbacks[i](err, data);
            }
          });
        };

        _createClass(Parser, null, [{
          key: "instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new Parser();
            }

            return this._instance;
          }
        }]);

        return Parser;
      }();
      Parser._instance = void 0;
      var parser = Parser.instance;

      function load(task, done) {
        var firstTask = false;

        if (!task.progress) {
          task.progress = {
            finish: 0,
            total: task.input.length,
            canInvoke: true
          };
          firstTask = true;
        }

        var options = task.options,
            progress = task.progress;
        options.__exclude__ = options.__exclude__ || Object.create(null);
        task.output = [];
        forEach(task.input, function (item, cb) {
          var subTask = Task.create({
            input: item,
            onProgress: task.onProgress,
            options: options,
            progress: progress,
            onComplete: function onComplete(err, result) {
              if (err && !task.isFinished) {
                if (!legacyCC.assetManager.force || firstTask) {
                  {
                    error(err.message, err.stack);
                  }

                  progress.canInvoke = false;
                  done(err);
                } else if (progress.canInvoke) {
                  task.dispatch('progress', ++progress.finish, progress.total, item);
                }
              }

              task.output.push(result);
              subTask.recycle();
              cb(null);
            }
          });
          loadOneAssetPipeline.async(subTask);
        }, function () {
          options.__exclude__ = null;

          if (task.isFinished) {
            clear$1(task, true);
            task.dispatch('error');
            return;
          }

          gatherAsset(task);
          clear$1(task, true);
          done();
        });
      }
      var loadOneAssetPipeline = new Pipeline('loadOneAsset', [function fetch(task, done) {
        var item = task.output = task.input;
        var options = item.options,
            isNative = item.isNative,
            uuid = item.uuid,
            file = item.file;
        var reloadAsset = options.reloadAsset;

        if (file || !reloadAsset && !isNative && assets.has(uuid)) {
          done();
          return;
        }

        packManager.load(item, task.options, function (err, data) {
          item.file = data;
          done(err);
        });
      }, function parse(task, done) {
        var item = task.output = task.input;
        var progress = task.progress;
        var exclude = task.options.__exclude__;
        var id = item.id,
            file = item.file,
            options = item.options;

        if (item.isNative) {
          parser.parse(id, file, item.ext, options, function (err, asset) {
            if (err) {
              done(err);
              return;
            }

            item.content = asset;

            if (progress.canInvoke) {
              task.dispatch('progress', ++progress.finish, progress.total, item);
            }

            files.remove(id);
            parsed.remove(id);
            done();
          });
        } else {
          var uuid = item.uuid;

          if (uuid in exclude) {
            var _exclude$uuid = exclude[uuid],
                finish = _exclude$uuid.finish,
                content = _exclude$uuid.content,
                _err = _exclude$uuid.err,
                callbacks = _exclude$uuid.callbacks;

            if (progress.canInvoke) {
              task.dispatch('progress', ++progress.finish, progress.total, item);
            }

            if (finish || checkCircleReference(uuid, uuid, exclude)) {
              if (content) {
                content.addRef();
              }

              item.content = content;
              done(_err);
            } else {
              callbacks.push({
                done: done,
                item: item
              });
            }
          } else if (!options.reloadAsset && assets.has(uuid)) {
            var asset = assets.get(uuid);
            item.content = asset.addRef();

            if (progress.canInvoke) {
              task.dispatch('progress', ++progress.finish, progress.total, item);
            }

            done();
          } else {
            options.__uuid__ = uuid;
            parser.parse(id, file, 'import', options, function (err, asset) {
              if (err) {
                done(err);
                return;
              }

              loadDepends(task, asset, done);
            });
          }
        }
      }]);

      function loadDepends(task, asset, done) {
        var item = task.input,
            progress = task.progress;
        var _ref = item,
            uuid = _ref.uuid,
            id = _ref.id,
            options = _ref.options,
            config = _ref.config;
        var cacheAsset = options.cacheAsset;
        var depends = [];

        if (asset.addRef) {
          asset.addRef();
        }

        getDepends(uuid, asset, Object.create(null), depends, config);

        if (progress.canInvoke) {
          task.dispatch('progress', ++progress.finish, progress.total += depends.length, item);
        }

        var repeatItem = task.options.__exclude__[uuid] = {
          content: asset,
          finish: false,
          callbacks: [{
            done: done,
            item: item
          }]
        };
        var subTask = Task.create({
          input: depends,
          options: task.options,
          onProgress: task.onProgress,
          onError: Task.prototype.recycle,
          progress: progress,
          onComplete: function onComplete(err) {
            if (asset.decRef) {
              asset.decRef(false);
            }

            repeatItem.finish = true;
            repeatItem.err = err;

            if (!err) {
              var output = Array.isArray(subTask.output) ? subTask.output : [subTask.output];
              var map = Object.create(null);

              for (var _iterator = _createForOfIteratorHelperLoose(output), _step; !(_step = _iterator()).done;) {
                var dependAsset = _step.value;

                if (!dependAsset) {
                  continue;
                }

                map[dependAsset instanceof Asset ? dependAsset._uuid + "@import" : uuid + "@native"] = dependAsset;
              }

              setProperties(uuid, asset, map);

              try {
                if (typeof asset.onLoaded === 'function' && !onLoadedInvokedMap.has(asset) && !nativeDependMap.has(asset)) {
                  asset.onLoaded();
                  onLoadedInvokedMap.add(asset);
                }
              } catch (e) {
                error("The asset " + uuid + " is invalid for some reason, detail message: " + e.message + ", stack: " + e.stack);
              }

              files.remove(id);
              parsed.remove(id);

              cache(uuid, asset, cacheAsset);
              subTask.recycle();
            }

            var callbacks = repeatItem.callbacks;

            for (var i = 0, l = callbacks.length; i < l; i++) {
              var cb = callbacks[i];

              if (asset.addRef) {
                asset.addRef();
              }

              cb.item.content = asset;
              cb.done(err);
            }

            callbacks.length = 0;
          }
        });
        pipeline.async(subTask);
      }

      function preprocess(task, done) {
        var options = task.options;
        var subOptions = Object.create(null);
        var leftOptions = Object.create(null);

        for (var op in options) {
          switch (op) {
            case RequestType.PATH:
            case RequestType.UUID:
            case RequestType.DIR:
            case RequestType.SCENE:
            case RequestType.URL:
              break;

            case '__requestType__':
            case '__isNative__':
            case 'ext':
            case 'type':
            case '__nativeName__':
            case 'audioLoadMode':
            case 'bundle':
              subOptions[op] = options[op];
              break;

            case '__exclude__':
            case '__outputAsArray__':
              leftOptions[op] = options[op];
              break;

            default:
              subOptions[op] = options[op];
              leftOptions[op] = options[op];
              break;
          }
        }

        task.options = leftOptions;
        var subTask = Task.create({
          input: task.input,
          options: subOptions
        });
        var err = null;

        try {
          task.output = task.source = transformPipeline.sync(subTask);
        } catch (e) {
          err = e;

          for (var i = 0, l = subTask.output.length; i < l; i++) {
            subTask.output[i].recycle();
          }
        }

        subTask.recycle();
        done(err);
      }

      var RequestItem = function () {
        function RequestItem() {
          this.uuid = '';
          this.overrideUuid = '';
          this.url = '';
          this.ext = '.json';
          this.content = null;
          this.file = null;
          this.info = null;
          this.config = null;
          this.isNative = false;
          this.options = Object.create(null);
          this._id = '';
        }

        RequestItem.create = function create() {
          var out;

          if (RequestItem._deadPool.length !== 0) {
            out = RequestItem._deadPool.pop();
          } else {
            out = new RequestItem();
          }

          return out;
        };

        var _proto = RequestItem.prototype;

        _proto.recycle = function recycle() {
          if (RequestItem._deadPool.length === RequestItem.MAX_DEAD_NUM) {
            return;
          }

          this._id = '';
          this.uuid = '';
          this.overrideUuid = '';
          this.url = '';
          this.ext = '.json';
          this.content = null;
          this.file = null;
          this.info = null;
          this.config = null;
          this.isNative = false;
          this.options = Object.create(null);

          RequestItem._deadPool.push(this);
        };

        _createClass(RequestItem, [{
          key: "id",
          get: function get() {
            if (!this._id) {
              this._id = (this.overrideUuid || this.uuid) + "@" + (this.isNative ? 'native' : 'import');
            }

            return this._id;
          }
        }]);

        return RequestItem;
      }();

      RequestItem.MAX_DEAD_NUM = 500;
      RequestItem._deadPool = [];

      var infos = [];
      function parse(task) {
        var options = task.options;
        var input = Array.isArray(task.input) ? task.input : [task.input];
        task.output = [];

        var _loop = function _loop(i) {
          var _info2;

          var item = input[i];
          var out = RequestItem.create();
          var config = null;
          var info = null;

          if (typeof item === 'string') {
            item = Object.create(null);
            item[options.__requestType__ || RequestType.UUID] = input[i];
          }

          if (typeof item === 'object') {
            addon(item, options);

            if (item.preset) {
              addon(item, presets[item.preset]);
            }

            for (var key in item) {
              switch (key) {
                case RequestType.UUID:
                  {
                    var _ret2 = function () {
                      var _info;

                      var uuid = out.uuid = decodeUuid(item.uuid);

                      if (!item.bundle) {
                        var bundle = bundles.find(function (bundle) {
                          return !!bundle.getAssetInfo(uuid);
                        });
                        item.bundle = bundle && bundle.name;
                      }

                      if (bundles.has(item.bundle)) {
                        config = bundles.get(item.bundle).config;
                        info = config.getAssetInfo(uuid);

                        if (info && info.redirect) {
                          if (!bundles.has(info.redirect)) {
                            throw new Error("Please load bundle " + info.redirect + " first");
                          }

                          config = bundles.get(info.redirect).config;
                          info = config.getAssetInfo(uuid);
                        }

                        out.config = config;
                        out.info = info;
                      }

                      out.ext = item.ext || ((_info = info) === null || _info === void 0 ? void 0 : _info.extension) || '.json';
                      return "break";
                    }();

                    if (_ret2 === "break") break;
                  }

                case '__requestType__':
                case 'ext':
                case 'bundle':
                case 'preset':
                case 'type':
                  break;

                case RequestType.DIR:
                  if (bundles.has(item.bundle)) {
                    bundles.get(item.bundle).config.getDirWithPath(item.dir, item.type, infos);

                    for (var _iterator = _createForOfIteratorHelperLoose(infos), _step; !(_step = _iterator()).done;) {
                      var assetInfo = _step.value;
                      input.push({
                        uuid: assetInfo.uuid,
                        __isNative__: false,
                        ext: assetInfo.extension || '.json',
                        bundle: item.bundle
                      });
                    }

                    infos.length = 0;
                  }

                  out.recycle();
                  out = null;
                  break;

                case RequestType.PATH:
                  if (bundles.has(item.bundle)) {
                    config = bundles.get(item.bundle).config;
                    info = config.getInfoWithPath(item.path, item.type);

                    if (info && info.redirect) {
                      if (!bundles.has(info.redirect)) {
                        throw new Error("you need to load bundle " + info.redirect + " first");
                      }

                      config = bundles.get(info.redirect).config;
                      info = config.getAssetInfo(info.uuid);
                    }

                    if (!info) {
                      out.recycle();
                      throw new Error("Bundle " + item.bundle + " doesn't contain " + item.path);
                    }

                    out.config = config;
                    out.uuid = info.uuid;
                    out.info = info;
                  }

                  out.ext = item.ext || ((_info2 = info) === null || _info2 === void 0 ? void 0 : _info2.extension) || '.json';
                  break;

                case RequestType.SCENE:
                  if (!item.bundle) {
                    var bundle = bundles.find(function (bundle) {
                      return !!bundle.getSceneInfo(item.scene);
                    });
                    item.bundle = bundle && bundle.name;
                  }

                  if (bundles.has(item.bundle)) {
                    config = bundles.get(item.bundle).config;
                    info = config.getSceneInfo(item.scene);

                    if (info && info.redirect) {
                      if (!bundles.has(info.redirect)) {
                        throw new Error("you need to load bundle " + info.redirect + " first");
                      }

                      config = bundles.get(info.redirect).config;
                      info = config.getAssetInfo(info.uuid);
                    }

                    if (!info) {
                      out.recycle();
                      throw new Error("Bundle " + config.name + " doesn't contain scene " + item.scene);
                    }

                    out.config = config;
                    out.uuid = info.uuid;
                    out.info = info;
                  }

                  break;

                case '__isNative__':
                  out.isNative = item.__isNative__;
                  break;

                case RequestType.URL:
                  out.url = item.url;
                  out.uuid = item.uuid || item.url;
                  out.ext = item.ext || extname(item.url);
                  out.isNative = item.__isNative__ !== undefined ? item.__isNative__ : true;
                  break;

                default:
                  out.options[key] = item[key];
              }

              if (!out) {
                break;
              }
            }
          }

          if (!out) {
            return "continue";
          }

          task.output.push(out);

          if (!out.uuid && !out.url) {
            throw new Error("Can not parse this input:" + JSON.stringify(item));
          }
        };

        for (var i = 0; i < input.length; i++) {
          var _ret = _loop(i);

          if (_ret === "continue") continue;
        }

        return null;
      }
      function replaceOverrideAsset(task) {
        var input = task.output = task.input;

        for (var i = 0; i < input.length; i++) {
          var item = input[i];

          if (assetsOverrideMap.has(item.uuid)) {
            var _ret3 = function () {
              var uuid = assetsOverrideMap.get(item.uuid);

              var bundle = bundles.find(function (bundle) {
                return !!bundle.getAssetInfo(uuid);
              });

              if (bundle) {
                var _info3;

                item.overrideUuid = uuid;
                var config = bundle.config;
                var info = config.getAssetInfo(uuid);

                if (info && info.redirect) {
                  if (!bundles.has(info.redirect)) {
                    throw new Error("Please load bundle " + info.redirect + " first");
                  }

                  config = bundles.get(info.redirect).config;
                  info = config.getAssetInfo(uuid);
                }

                item.config = config;
                item.info = info;
                item.ext = item.isNative ? item.ext : ((_info3 = info) === null || _info3 === void 0 ? void 0 : _info3.extension) || '.json';
              } else {
                warnID(16201, uuid, item.uuid);
              }
            }();

            if (_ret3 === "continue") continue;
          }
        }
      }
      function combine(task) {
        var input = task.output = task.input;

        for (var i = 0; i < input.length; i++) {
          var item = input[i];

          if (item.url) {
            continue;
          }

          var url = '';
          var base = '';
          var config = item.config;

          if (item.isNative) {
            base = config && config.nativeBase ? config.base + config.nativeBase : legacyCC.assetManager.generalNativeBase;
          } else {
            base = config && config.importBase ? config.base + config.importBase : legacyCC.assetManager.generalImportBase;
          }

          var uuid = item.overrideUuid || item.uuid;
          var ver = '';

          if (item.info) {
            if (item.isNative) {
              ver = item.info.nativeVer ? "." + item.info.nativeVer : '';
            } else {
              ver = item.info.ver ? "." + item.info.ver : '';
            }
          }

          if (item.ext === '.ttf') {
            url = base + "/" + uuid.slice(0, 2) + "/" + uuid + ver + "/" + item.options.__nativeName__;
          } else {
            url = base + "/" + uuid.slice(0, 2) + "/" + uuid + ver + item.ext;
          }

          item.url = url;
        }

        return null;
      }

      var AssetManager = exports('AssetManager', function () {
        function AssetManager() {
          this.pipeline = pipeline.append(preprocess).append(load);
          this.fetchPipeline = fetchPipeline.append(preprocess).append(fetch);
          this.transformPipeline = transformPipeline.append(parse).append(replaceOverrideAsset).append(combine);
          this.bundles = bundles;
          this.assets = assets;
          this.assetsOverrideMap = assetsOverrideMap;
          this.generalImportBase = '';
          this.generalNativeBase = '';
          this.dependUtil = dependUtil;
          this.force =  PREVIEW;
          this.allowImageBitmap = !sys.isMobile;
          this.utils = helper;
          this.downloader = downloader$1;
          this.parser = parser;
          this.packManager = packManager;
          this.cacheAsset = true;
          this.cacheManager = null;
          this.presets = presets;
          this.factory = factory;
          this.preprocessPipe = preprocess;
          this.fetchPipe = fetch;
          this.loadPipe = load;
          this.references = references;
          this._releaseManager = releaseManager;
          this._files = files;
          this._parsed = parsed;
          this._parsePipeline =  null ;
          this._projectBundles = [];
        }

        var _proto = AssetManager.prototype;

        _proto.init = function init(options) {
          if (options === void 0) {
            options = {};
          }

          var server = options.server || settings.querySettings(Settings.Category.ASSETS, 'server') || '';
          var bundleVers = options.bundleVers || settings.querySettings(Settings.Category.ASSETS, 'bundleVers') || {};
          var remoteBundles = options.remoteBundles || settings.querySettings(Settings.Category.ASSETS, 'remoteBundles') || [];

          this._files.clear();

          this._parsed.clear();

          this._releaseManager.init();

          this.assets.clear();
          this.bundles.clear();
          this.packManager.init();
          this.downloader.init(server, bundleVers, remoteBundles);
          this.parser.init();
          this.dependUtil.init();
          var importBase = options.importBase || settings.querySettings(Settings.Category.ASSETS, 'importBase') || '';

          if (importBase && importBase.endsWith('/')) {
            importBase = importBase.substr(0, importBase.length - 1);
          }

          var nativeBase = options.nativeBase || settings.querySettings(Settings.Category.ASSETS, 'nativeBase') || '';

          if (nativeBase && nativeBase.endsWith('/')) {
            nativeBase = nativeBase.substr(0, nativeBase.length - 1);
          }

          this.generalImportBase = importBase;
          this.generalNativeBase = nativeBase;
          this._projectBundles = settings.querySettings(Settings.Category.ASSETS, 'projectBundles') || [];
          var assetsOverride = settings.querySettings(Settings.Category.ASSETS, 'assetsOverrides') || {};

          for (var _key in assetsOverride) {
            this.assetsOverrideMap.set(_key, assetsOverride[_key]);
          }
        };

        _proto.getBundle = function getBundle(name) {
          return bundles.get(name) || null;
        };

        _proto.removeBundle = function removeBundle(bundle) {
          bundle._destroy();

          bundles.remove(bundle.name);
        };

        _proto.loadAny = function loadAny(requests, options, onProgress, onComplete) {
          var _parseParameters = parseParameters(options, onProgress, onComplete),
              opts = _parseParameters.options,
              onProg = _parseParameters.onProgress,
              onComp = _parseParameters.onComplete;

          opts.preset = opts.preset || 'default';
          requests = Array.isArray(requests) ? requests.slice() : requests;
          var task = Task.create({
            input: requests,
            onProgress: onProg,
            onComplete: asyncify(onComp),
            options: opts
          });
          pipeline.async(task);
        };

        _proto.preloadAny = function preloadAny(requests, options, onProgress, onComplete) {
          var _parseParameters2 = parseParameters(options, onProgress, onComplete),
              opts = _parseParameters2.options,
              onProg = _parseParameters2.onProgress,
              onComp = _parseParameters2.onComplete;

          opts.preset = opts.preset || 'preload';
          requests = Array.isArray(requests) ? requests.slice() : requests;
          var task = Task.create({
            input: requests,
            onProgress: onProg,
            onComplete: asyncify(onComp),
            options: opts
          });
          fetchPipeline.async(task);
        };

        _proto.loadRemote = function loadRemote(url, options, onComplete) {
          var _parseParameters3 = parseParameters(options, undefined, onComplete),
              opts = _parseParameters3.options,
              onComp = _parseParameters3.onComplete;

          if (!opts.reloadAsset && this.assets.has(url)) {
            asyncify(onComp)(null, this.assets.get(url));
            return;
          }

          opts.__isNative__ = true;
          opts.preset = opts.preset || 'remote';
          this.loadAny({
            url: url
          }, opts, null, function (err, data) {
            if (err) {
              error(err.message, err.stack);

              if (onComp) {
                onComp(err, data);
              }
            } else {
              factory.create(url, data, opts.ext || extname(url), opts, function (p1, p2) {
                if (onComp) {
                  onComp(p1, p2);
                }
              });
            }
          });
        };

        _proto.loadBundle = function loadBundle(nameOrUrl, options, onComplete) {
          var _parseParameters4 = parseParameters(options, undefined, onComplete),
              opts = _parseParameters4.options,
              onComp = _parseParameters4.onComplete;

          var bundleName = basename(nameOrUrl);

          if (this.bundles.has(bundleName)) {
            asyncify(onComp)(null, this.getBundle(bundleName));
            return;
          }

          opts.preset = opts.preset || 'bundle';
          opts.ext = 'bundle';
          opts.__isNative__ = true;
          this.loadAny({
            url: nameOrUrl
          }, opts, null, function (err, data) {
            if (err) {
              error(err.message, err.stack);

              if (onComp) {
                onComp(err, data);
              }
            } else {
              factory.create(nameOrUrl, data, 'bundle', opts, function (p1, p2) {
                if (onComp) {
                  onComp(p1, p2);
                }
              });
            }
          });
        };

        _proto.releaseAsset = function releaseAsset(asset) {
          releaseManager.tryRelease(asset, true);
        };

        _proto.releaseUnusedAssets = function releaseUnusedAssets() {
          assets.forEach(function (asset) {
            releaseManager.tryRelease(asset);
          });
        };

        _proto.releaseAll = function releaseAll() {
          assets.forEach(function (asset) {
            releaseManager.tryRelease(asset, true);
          });
        };

        _proto.loadWithJson = function loadWithJson(json, options, onProgress, onComplete) {
          {
            throw new Error('Only valid in Editor');
          }
        };

        _createClass(AssetManager, [{
          key: "main",
          get: function get() {
            return bundles.get(BuiltinBundleName.MAIN) || null;
          }
        }, {
          key: "resources",
          get: function get() {
            return bundles.get(BuiltinBundleName.RESOURCES) || null;
          }
        }], [{
          key: "instance",
          get: function get() {
            if (!this._instance) {
              this._instance = new AssetManager();
            }

            return this._instance;
          }
        }]);

        return AssetManager;
      }());
      AssetManager._instance = void 0;
      AssetManager.Pipeline = Pipeline;
      AssetManager.Task = Task;
      AssetManager.Cache = Cache;
      AssetManager.RequestItem = RequestItem;
      AssetManager.Bundle = Bundle;
      AssetManager.BuiltinBundleName = BuiltinBundleName;
      AssetManager.CacheManager = CacheManager;
      AssetManager.Downloader = Downloader;
      AssetManager.Parser = Parser;
      AssetManager.DependUtil = DependUtil;
      var assetManager = exports('assetManager', legacyCC.assetManager = AssetManager.instance);
      legacyCC.AssetManager = AssetManager;

      var BuiltinResMgr = function () {
        function BuiltinResMgr() {
          this._resources = {};
          this._materialsToBeCompiled = [];
        }

        var _proto = BuiltinResMgr.prototype;

        _proto.init = function init() {
          var resources = this._resources;
          var len = 2;
          var numChannels = 4;
          var blackValueView = new Uint8Array(len * len * numChannels);
          var emptyValueView = new Uint8Array(len * len * numChannels);
          var greyValueView = new Uint8Array(len * len * numChannels);
          var whiteValueView = new Uint8Array(len * len * numChannels);
          var normalValueView = new Uint8Array(len * len * numChannels);
          var offset = 0;

          for (var i = 0; i < len * len; i++) {
            blackValueView[offset] = 0;
            blackValueView[offset + 1] = 0;
            blackValueView[offset + 2] = 0;
            blackValueView[offset + 3] = 255;
            emptyValueView[offset] = 0;
            emptyValueView[offset + 1] = 0;
            emptyValueView[offset + 2] = 0;
            emptyValueView[offset + 3] = 0;
            greyValueView[offset] = 119;
            greyValueView[offset + 1] = 119;
            greyValueView[offset + 2] = 119;
            greyValueView[offset + 3] = 255;
            whiteValueView[offset] = 255;
            whiteValueView[offset + 1] = 255;
            whiteValueView[offset + 2] = 255;
            whiteValueView[offset + 3] = 255;
            normalValueView[offset] = 127;
            normalValueView[offset + 1] = 127;
            normalValueView[offset + 2] = 255;
            normalValueView[offset + 3] = 255;
            offset += numChannels;
          }

          var defaultSize = 16;
          var halfDefaultSize = defaultSize / 2;
          var defaultValueView = new Uint8Array(defaultSize * defaultSize * numChannels);
          offset = 0;

          for (var _i = 0; _i < defaultSize * defaultSize; _i++) {
            defaultValueView[offset] = 221;
            defaultValueView[offset + 1] = 221;
            defaultValueView[offset + 2] = 221;
            defaultValueView[offset + 3] = 255;
            offset += numChannels;
          }

          offset = 0;

          for (var _i2 = 0; _i2 < halfDefaultSize; _i2++) {
            for (var j = 0; j < halfDefaultSize; j++) {
              defaultValueView[offset] = 85;
              defaultValueView[offset + 1] = 85;
              defaultValueView[offset + 2] = 85;
              defaultValueView[offset + 3] = 255;
              offset += numChannels;
            }

            offset += halfDefaultSize * numChannels;
          }

          offset += halfDefaultSize * numChannels;

          for (var _i3 = 0; _i3 < halfDefaultSize; _i3++) {
            for (var _j = 0; _j < halfDefaultSize; _j++) {
              defaultValueView[offset] = 85;
              defaultValueView[offset + 1] = 85;
              defaultValueView[offset + 2] = 85;
              defaultValueView[offset + 3] = 255;
              offset += numChannels;
            }

            offset += halfDefaultSize * numChannels;
          }

          var blackMemImageSource = {
            width: len,
            height: len,
            _data: blackValueView,
            _compressed: false,
            format: Texture2D.PixelFormat.RGBA8888
          };
          var emptyMemImageSource = {
            width: len,
            height: len,
            _data: emptyValueView,
            _compressed: false,
            format: Texture2D.PixelFormat.RGBA8888
          };
          var greyMemImageSource = {
            width: len,
            height: len,
            _data: greyValueView,
            _compressed: false,
            format: Texture2D.PixelFormat.RGBA8888
          };
          var whiteMemImageSource = {
            width: len,
            height: len,
            _data: whiteValueView,
            _compressed: false,
            format: Texture2D.PixelFormat.RGBA8888
          };
          var normalMemImageSource = {
            width: len,
            height: len,
            _data: normalValueView,
            _compressed: false,
            format: Texture2D.PixelFormat.RGBA8888
          };
          var defaultMemImageSource = {
            width: defaultSize,
            height: defaultSize,
            _data: defaultValueView,
            _compressed: false,
            format: Texture2D.PixelFormat.RGBA8888
          };
          var imgAsset = new ImageAsset(blackMemImageSource);
          var blackTexture = new Texture2D();
          blackTexture._uuid = 'black-texture';
          blackTexture.image = imgAsset;
          resources[blackTexture._uuid] = blackTexture;
          var emptyImgAsset = new ImageAsset(emptyMemImageSource);
          var emptyTexture = new Texture2D();
          emptyTexture._uuid = 'empty-texture';
          emptyTexture.image = emptyImgAsset;
          resources[emptyTexture._uuid] = emptyTexture;
          var blackCubeTexture = new TextureCube();
          blackCubeTexture._uuid = 'black-cube-texture';
          blackCubeTexture.setMipFilter(TextureCube.Filter.NEAREST);
          blackCubeTexture.image = {
            front: new ImageAsset(blackMemImageSource),
            back: new ImageAsset(blackMemImageSource),
            left: new ImageAsset(blackMemImageSource),
            right: new ImageAsset(blackMemImageSource),
            top: new ImageAsset(blackMemImageSource),
            bottom: new ImageAsset(blackMemImageSource)
          };
          resources[blackCubeTexture._uuid] = blackCubeTexture;
          var greyImgAsset = new ImageAsset(greyMemImageSource);
          var greyTexture = new Texture2D();
          greyTexture._uuid = 'grey-texture';
          greyTexture.image = greyImgAsset;
          resources[greyTexture._uuid] = greyTexture;
          var greyCubeTexture = new TextureCube();
          greyCubeTexture._uuid = 'grey-cube-texture';
          greyCubeTexture.setMipFilter(TextureCube.Filter.NEAREST);
          greyCubeTexture.image = {
            front: new ImageAsset(greyMemImageSource),
            back: new ImageAsset(greyMemImageSource),
            left: new ImageAsset(greyMemImageSource),
            right: new ImageAsset(greyMemImageSource),
            top: new ImageAsset(greyMemImageSource),
            bottom: new ImageAsset(greyMemImageSource)
          };
          resources[greyCubeTexture._uuid] = greyCubeTexture;
          var whiteImgAsset = new ImageAsset(whiteMemImageSource);
          var whiteTexture = new Texture2D();
          whiteTexture._uuid = 'white-texture';
          whiteTexture.image = whiteImgAsset;
          resources[whiteTexture._uuid] = whiteTexture;
          var whiteCubeTexture = new TextureCube();
          whiteCubeTexture._uuid = 'white-cube-texture';
          whiteCubeTexture.setMipFilter(TextureCube.Filter.NEAREST);
          whiteCubeTexture.image = {
            front: new ImageAsset(whiteMemImageSource),
            back: new ImageAsset(whiteMemImageSource),
            left: new ImageAsset(whiteMemImageSource),
            right: new ImageAsset(whiteMemImageSource),
            top: new ImageAsset(whiteMemImageSource),
            bottom: new ImageAsset(whiteMemImageSource)
          };
          resources[whiteCubeTexture._uuid] = whiteCubeTexture;
          var normalImgAsset = new ImageAsset(normalMemImageSource);
          var normalTexture = new Texture2D();
          normalTexture._uuid = 'normal-texture';
          normalTexture.image = normalImgAsset;
          resources[normalTexture._uuid] = normalTexture;
          var defaultImgAsset = new ImageAsset(defaultMemImageSource);
          var defaultTexture = new Texture2D();
          defaultTexture._uuid = 'default-texture';
          defaultTexture.image = defaultImgAsset;
          resources[defaultTexture._uuid] = defaultTexture;
          var defaultCubeTexture = new TextureCube();
          defaultCubeTexture.setMipFilter(TextureCube.Filter.NEAREST);
          defaultCubeTexture._uuid = 'default-cube-texture';
          defaultCubeTexture.image = {
            front: new ImageAsset(defaultMemImageSource),
            back: new ImageAsset(defaultMemImageSource),
            left: new ImageAsset(defaultMemImageSource),
            right: new ImageAsset(defaultMemImageSource),
            top: new ImageAsset(defaultMemImageSource),
            bottom: new ImageAsset(defaultMemImageSource)
          };
          resources[defaultCubeTexture._uuid] = defaultCubeTexture;

          if (legacyCC.SpriteFrame) {
            var spriteFrame = new legacyCC.SpriteFrame();
            var image = imgAsset;
            var texture = new Texture2D();
            texture.image = image;
            spriteFrame.texture = texture;
            spriteFrame._uuid = 'default-spriteframe';
            resources[spriteFrame._uuid] = spriteFrame;
          }
        };

        _proto.addAsset = function addAsset(key, asset) {
          this._resources[key] = asset;
        };

        _proto.get = function get(uuid) {
          return this._resources[uuid];
        };

        _proto.loadBuiltinAssets = function loadBuiltinAssets() {
          var _this = this;

          var builtinAssets = settings.querySettings(Settings.Category.ENGINE, 'builtinAssets');
          if ( !builtinAssets) return Promise.resolve();
          var resources = this._resources;
          return new Promise(function (resolve, reject) {
            assetManager.loadBundle(BuiltinBundleName.INTERNAL, function (err, bundle) {
              if (err) {
                reject(err);
                return;
              }

              assetManager.loadAny(builtinAssets, function (err, assets) {
                if (err) {
                  reject(err);
                } else {
                  assets.forEach(function (asset) {
                    resources[asset.name] = asset;

                    {
                      releaseManager.addIgnoredAsset(asset);
                    }

                    if (asset instanceof legacyCC.Material) {
                      _this._materialsToBeCompiled.push(asset);
                    }
                  });
                  resolve();
                }
              });
            });
          });
        };

        _proto.compileBuiltinMaterial = function compileBuiltinMaterial() {
          for (var i = 0; i < this._materialsToBeCompiled.length; ++i) {
            var mat = this._materialsToBeCompiled[i];

            for (var j = 0; j < mat.passes.length; ++j) {
              mat.passes[j].tryCompile();
            }
          }

          this._materialsToBeCompiled.length = 0;
        };

        return BuiltinResMgr;
      }();

      var builtinResMgr = exports('builtinResMgr', legacyCC.builtinResMgr = new BuiltinResMgr());

      var getPhaseID = exports('getPhaseID', function () {
        var phases = new Map();
        var phaseNum = 0;
        return function (phaseName) {
          if (typeof phaseName === 'number') {
            return phaseName;
          }

          if (!phases.has(phaseName)) {
            phases.set(phaseName, 1 << phaseNum);
            phaseNum++;
          }

          return phases.get(phaseName);
        };
      }());

      var INITIAL_CAPACITY = 32;
      var MAX_CAPACITY = 1024;
      var InstancedBuffer = exports('InstancedBuffer', function () {
        function InstancedBuffer(pass) {
          this.instances = [];
          this.pass = void 0;
          this.hasPendingModels = false;
          this.dynamicOffsets = [];
          this._device = void 0;
          this._device = pass.device;
          this.pass = pass;
        }

        var _proto = InstancedBuffer.prototype;

        _proto.destroy = function destroy() {
          for (var i = 0; i < this.instances.length; ++i) {
            var instance = this.instances[i];
            instance.vb.destroy();
            instance.ia.destroy();
          }

          this.instances.length = 0;
        };

        _proto.merge = function merge(subModel, passIdx, shaderImplant) {
          if (shaderImplant === void 0) {
            shaderImplant = null;
          }

          var attrs = subModel.instancedAttributeBlock;
          var stride = attrs.buffer.length;

          if (!stride) {
            return;
          }

          var sourceIA = subModel.inputAssembler;
          var lightingMap = subModel.descriptorSet.getTexture(UNIFORM_LIGHTMAP_TEXTURE_BINDING);
          var reflectionProbeCubemap = subModel.descriptorSet.getTexture(UNIFORM_REFLECTION_PROBE_CUBEMAP_BINDING);
          var reflectionProbePlanarMap = subModel.descriptorSet.getTexture(UNIFORM_REFLECTION_PROBE_TEXTURE_BINDING);
          var useReflectionProbeType = subModel.useReflectionProbeType;
          var shader = shaderImplant;

          if (!shader) {
            shader = subModel.shaders[passIdx];
          }

          var descriptorSet = subModel.descriptorSet;

          for (var i = 0; i < this.instances.length; ++i) {
            var _instance$ia$indexBuf, _sourceIA$indexBuffer;

            var instance = this.instances[i];

            if (((_instance$ia$indexBuf = instance.ia.indexBuffer) === null || _instance$ia$indexBuf === void 0 ? void 0 : _instance$ia$indexBuf.objectID) !== ((_sourceIA$indexBuffer = sourceIA.indexBuffer) === null || _sourceIA$indexBuffer === void 0 ? void 0 : _sourceIA$indexBuffer.objectID) || instance.count >= MAX_CAPACITY) {
              continue;
            }

            if (instance.lightingMap.objectID !== lightingMap.objectID) {
              continue;
            }

            if (instance.useReflectionProbeType !== useReflectionProbeType) {
              continue;
            } else {
              if (instance.reflectionProbeCubemap.objectID !== reflectionProbeCubemap.objectID) {
                continue;
              }

              if (instance.reflectionProbePlanarMap.objectID !== reflectionProbePlanarMap.objectID) {
                continue;
              }
            }

            if (instance.stride !== stride) {
              continue;
            }

            if (instance.count >= instance.capacity) {
              instance.capacity <<= 1;
              var newSize = instance.stride * instance.capacity;
              var oldData = instance.data;
              instance.data = new Uint8Array(newSize);
              instance.data.set(oldData);
              instance.vb.resize(newSize);
            }

            instance.shader = shader;
            instance.descriptorSet = descriptorSet;
            instance.data.set(attrs.buffer, instance.stride * instance.count++);
            this.hasPendingModels = true;
            return;
          }

          var vb = this._device.createBuffer(new BufferInfo(BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.HOST | MemoryUsageBit.DEVICE, stride * INITIAL_CAPACITY, stride));

          var data = new Uint8Array(stride * INITIAL_CAPACITY);
          var vertexBuffers = sourceIA.vertexBuffers.slice();
          var attributes = sourceIA.attributes.slice();
          var indexBuffer = sourceIA.indexBuffer;

          for (var _i = 0; _i < attrs.attributes.length; _i++) {
            var attr = attrs.attributes[_i];
            var newAttr = new Attribute(attr.name, attr.format, attr.isNormalized, vertexBuffers.length, true);
            attributes.push(newAttr);
          }

          data.set(attrs.buffer);
          vertexBuffers.push(vb);
          var iaInfo = new InputAssemblerInfo(attributes, vertexBuffers, indexBuffer);

          var ia = this._device.createInputAssembler(iaInfo);

          this.instances.push({
            count: 1,
            capacity: INITIAL_CAPACITY,
            vb: vb,
            data: data,
            ia: ia,
            stride: stride,
            shader: shader,
            descriptorSet: descriptorSet,
            lightingMap: lightingMap,
            reflectionProbeCubemap: reflectionProbeCubemap,
            reflectionProbePlanarMap: reflectionProbePlanarMap,
            useReflectionProbeType: useReflectionProbeType
          });
          this.hasPendingModels = true;
        };

        _proto.uploadBuffers = function uploadBuffers(cmdBuff) {
          for (var i = 0; i < this.instances.length; ++i) {
            var instance = this.instances[i];

            if (!instance.count) {
              continue;
            }

            instance.ia.instanceCount = instance.count;
            cmdBuff.updateBuffer(instance.vb, instance.data);
          }
        };

        _proto.clear = function clear() {
          for (var i = 0; i < this.instances.length; ++i) {
            var instance = this.instances[i];
            instance.count = 0;
          }

          this.hasPendingModels = false;
        };

        return InstancedBuffer;
      }());

      var BatchedBuffer = function () {
        function BatchedBuffer(pass) {
          this.batches = [];
          this.dynamicOffsets = [];
          this._device = void 0;
          this._device = pass.device;
        }

        var _proto = BatchedBuffer.prototype;

        _proto.destroy = function destroy() {
          for (var i = 0; i < this.batches.length; ++i) {
            var batch = this.batches[i];

            for (var j = 0; j < batch.vbs.length; ++j) {
              batch.vbs[j].destroy();
            }

            batch.vbIdx.destroy();
            batch.ia.destroy();
            batch.ubo.destroy();
          }

          this.batches.length = 0;
        };

        _proto.merge = function merge(subModel, passIdx, model) {
          var flatBuffers = subModel.subMesh.flatBuffers;

          if (flatBuffers.length === 0) {
            return;
          }

          var vbSize = 0;
          var vbIdxSize = 0;
          var vbCount = flatBuffers[0].count;
          var pass = subModel.passes[passIdx];
          var shader = subModel.shaders[passIdx];
          var descriptorSet = subModel.descriptorSet;
          var isBatchExist = false;

          for (var i = 0; i < this.batches.length; ++i) {
            var batch = this.batches[i];

            if (batch.vbs.length === flatBuffers.length && batch.mergeCount < UBOLocalBatched.BATCHING_COUNT) {
              isBatchExist = true;

              for (var j = 0; j < batch.vbs.length; ++j) {
                var vb = batch.vbs[j];

                if (vb.stride !== flatBuffers[j].stride) {
                  isBatchExist = false;
                  break;
                }
              }

              if (isBatchExist) {
                for (var _j = 0; _j < batch.vbs.length; ++_j) {
                  var flatBuff = flatBuffers[_j];
                  var batchVB = batch.vbs[_j];
                  var vbBuf = batch.vbDatas[_j];
                  vbSize = (vbCount + batch.vbCount) * flatBuff.stride;

                  if (vbSize > batchVB.size) {
                    batchVB.resize(vbSize);
                    batch.vbDatas[_j] = new Uint8Array(vbSize);

                    batch.vbDatas[_j].set(vbBuf);
                  }

                  batch.vbDatas[_j].set(flatBuff.buffer, batch.vbCount * flatBuff.stride);
                }

                var vbIdxBuf = batch.vbIdxData;
                vbIdxSize = (vbCount + batch.vbCount) * 4;

                if (vbIdxSize > batch.vbIdx.size) {
                  batch.vbIdx.resize(vbIdxSize);
                  batch.vbIdxData = new Float32Array(vbIdxSize / Float32Array.BYTES_PER_ELEMENT);
                  batch.vbIdxData.set(vbIdxBuf);
                  vbIdxBuf = batch.vbIdxData;
                }

                var start = batch.vbCount;
                var end = start + vbCount;
                var mergeCount = batch.mergeCount;

                if (vbIdxBuf[start] !== mergeCount || vbIdxBuf[end - 1] !== mergeCount) {
                  for (var _j2 = start; _j2 < end; _j2++) {
                    vbIdxBuf[_j2] = mergeCount + 0.1;
                  }
                }

                Mat4.toArray(batch.uboData, model.transform.worldMatrix, UBOLocalBatched.MAT_WORLDS_OFFSET + batch.mergeCount * 16);

                if (!batch.mergeCount) {
                  descriptorSet.bindBuffer(UBOLocalBatched.BINDING, batch.ubo);
                  descriptorSet.update();
                  batch.pass = pass;
                  batch.shader = shader;
                  batch.descriptorSet = descriptorSet;
                }

                ++batch.mergeCount;
                batch.vbCount += vbCount;
                batch.ia.vertexCount += vbCount;
                return;
              }
            }
          }

          var vbs = [];
          var vbDatas = [];
          var totalVBs = [];

          for (var _i = 0; _i < flatBuffers.length; ++_i) {
            var _flatBuff = flatBuffers[_i];

            var newVB = this._device.createBuffer(new BufferInfo(BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.HOST | MemoryUsageBit.DEVICE, _flatBuff.count * _flatBuff.stride, _flatBuff.stride));

            newVB.update(_flatBuff.buffer.buffer);
            vbs.push(newVB);
            vbDatas.push(new Uint8Array(newVB.size));
            totalVBs.push(newVB);
          }

          var vbIdx = this._device.createBuffer(new BufferInfo(BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.HOST | MemoryUsageBit.DEVICE, vbCount * 4, 4));

          var vbIdxData = new Float32Array(vbCount);
          vbIdxData.fill(0);
          vbIdx.update(vbIdxData);
          totalVBs.push(vbIdx);
          var attributes = subModel.inputAssembler.attributes;
          var attrs = new Array(attributes.length + 1);

          for (var a = 0; a < attributes.length; ++a) {
            attrs[a] = attributes[a];
          }

          attrs[attributes.length] = new Attribute('a_dyn_batch_id', Format.R32F, false, flatBuffers.length);
          var iaInfo = new InputAssemblerInfo(attrs, totalVBs);

          var ia = this._device.createInputAssembler(iaInfo);

          var ubo = this._device.createBuffer(new BufferInfo(BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.HOST | MemoryUsageBit.DEVICE, UBOLocalBatched.SIZE, UBOLocalBatched.SIZE));

          descriptorSet.bindBuffer(UBOLocalBatched.BINDING, ubo);
          descriptorSet.update();
          var uboData = new Float32Array(UBOLocalBatched.COUNT);
          Mat4.toArray(uboData, model.transform.worldMatrix, UBOLocalBatched.MAT_WORLDS_OFFSET);
          this.batches.push({
            mergeCount: 1,
            vbs: vbs,
            vbDatas: vbDatas,
            vbIdx: vbIdx,
            vbIdxData: vbIdxData,
            vbCount: vbCount,
            ia: ia,
            ubo: ubo,
            uboData: uboData,
            pass: pass,
            shader: shader,
            descriptorSet: descriptorSet
          });
        };

        _proto.clear = function clear() {
          for (var i = 0; i < this.batches.length; ++i) {
            var batch = this.batches[i];
            batch.vbCount = 0;
            batch.mergeCount = 0;
            batch.ia.vertexCount = 0;
          }
        };

        return BatchedBuffer;
      }();

      var _bufferInfo = new BufferInfo(BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE);

      var _bufferViewInfo = new BufferViewInfo(null);

      var _dsInfo = new DescriptorSetInfo(null);

      var _materialSet = 1;
      var BatchingSchemes;

      (function (BatchingSchemes) {
        BatchingSchemes[BatchingSchemes["NONE"] = 0] = "NONE";
        BatchingSchemes[BatchingSchemes["INSTANCING"] = 1] = "INSTANCING";
        BatchingSchemes[BatchingSchemes["VB_MERGING"] = 2] = "VB_MERGING";
      })(BatchingSchemes || (BatchingSchemes = {}));

      var Pass = function () {
        Pass.fillPipelineInfo = function fillPipelineInfo(pass, info) {
          if (info.priority !== undefined) {
            pass._priority = info.priority;
          }

          if (info.primitive !== undefined) {
            pass._primitive = info.primitive;
          }

          if (info.stage !== undefined) {
            pass._stage = info.stage;
          }

          if (info.dynamicStates !== undefined) {
            pass._dynamicStates = info.dynamicStates;
          }

          if (info.phase !== undefined) {
            pass._phase = getPhaseID(info.phase);
          }

          var bs = pass._bs;

          if (info.blendState) {
            var bsInfo = info.blendState;
            var targets = bsInfo.targets;

            if (targets) {
              targets.forEach(function (t, i) {
                bs.setTarget(i, t);
              });
            }

            if (bsInfo.isA2C !== undefined) {
              bs.isA2C = bsInfo.isA2C;
            }

            if (bsInfo.isIndepend !== undefined) {
              bs.isIndepend = bsInfo.isIndepend;
            }

            if (bsInfo.blendColor !== undefined) {
              bs.blendColor = bsInfo.blendColor;
            }
          }

          pass._rs.assign(info.rasterizerState);

          pass._dss.assign(info.depthStencilState);
        };

        Pass.getPassHash = function getPassHash(pass) {
          var shaderKey = '';

          if (legacyCC.rendering && legacyCC.rendering.enableEffectImport) {
            var key = legacyCC.rendering.programLib.getKey(pass._phaseID, pass.program, pass.defines);
            shaderKey = pass._phaseID.toString() + "," + key;
          } else {
            shaderKey = programLib.getKey(pass.program, pass.defines);
          }

          var res = shaderKey + "," + pass._primitive + "," + pass._dynamicStates;
          res += serializeBlendState(pass._bs);
          res += serializeDepthStencilState(pass._dss);
          res += serializeRasterizerState(pass._rs);
          return murmurhash2_32_gc(res, 666);
        };

        function Pass(root) {
          this._rootBuffer = null;
          this._buffers = [];
          this._descriptorSet = null;
          this._pipelineLayout = null;
          this._passIndex = 0;
          this._propertyIndex = 0;
          this._programName = '';
          this._dynamics = {};
          this._propertyHandleMap = {};
          this._rootBlock = null;
          this._blocksInt = [];
          this._blocks = [];
          this._shaderInfo = null;
          this._defines = {};
          this._properties = {};
          this._shader = null;
          this._bs = new BlendState();
          this._dss = new DepthStencilState();
          this._rs = new RasterizerState();
          this._priority = RenderPriority.DEFAULT;
          this._stage = RenderPassStage.DEFAULT;
          this._phase = getPhaseID('default');
          this._passID = 0xFFFFFFFF;
          this._phaseID = 0xFFFFFFFF;
          this._primitive = PrimitiveMode.TRIANGLE_LIST;
          this._batchingScheme = BatchingSchemes.NONE;
          this._dynamicStates = DynamicStateFlagBit.NONE;
          this._instancedBuffers = {};
          this._batchedBuffers = {};
          this._hash = 0;
          this._root = void 0;
          this._device = void 0;
          this._rootBufferDirty = false;
          this._root = root;
          this._device = deviceManager.gfxDevice;
        }

        var _proto = Pass.prototype;

        _proto.initialize = function initialize(info) {
          this._doInit(info);

          this.resetUBOs();
          this.resetTextures();
          this.tryCompile();
        };

        _proto.getHandle = function getHandle(name, offset, targetType) {
          if (offset === void 0) {
            offset = 0;
          }

          if (targetType === void 0) {
            targetType = Type.UNKNOWN;
          }

          var handle = this._propertyHandleMap[name];

          if (!handle) {
            return 0;
          }

          if (targetType) {
            handle = customizeType(handle, targetType);
          } else if (offset) {
            handle = customizeType(handle, getTypeFromHandle(handle) - offset);
          }

          return handle + offset;
        };

        _proto.getBinding = function getBinding(name) {
          var handle = this.getHandle(name);

          if (!handle) {
            return -1;
          }

          return Pass.getBindingFromHandle(handle);
        };

        _proto.setUniform = function setUniform(handle, value) {
          var binding = Pass.getBindingFromHandle(handle);
          var type = Pass.getTypeFromHandle(handle);
          var ofs = Pass.getOffsetFromHandle(handle);

          var block = this._getBlockView(type, binding);

          {
            var validator = type2validator[type];
            assertID(validator && validator(value), 12011, binding, Type[type]);
          }

          type2writer[type](block, value, ofs);
          this._rootBufferDirty = true;
        };

        _proto.getUniform = function getUniform(handle, out) {
          var binding = Pass.getBindingFromHandle(handle);
          var type = Pass.getTypeFromHandle(handle);
          var ofs = Pass.getOffsetFromHandle(handle);

          var block = this._getBlockView(type, binding);

          return type2reader[type](block, out, ofs);
        };

        _proto.setUniformArray = function setUniformArray(handle, value) {
          var binding = Pass.getBindingFromHandle(handle);
          var type = Pass.getTypeFromHandle(handle);
          var stride = GetTypeSize(type) >> 2;

          var block = this._getBlockView(type, binding);

          var ofs = Pass.getOffsetFromHandle(handle);

          for (var i = 0; i < value.length; i++, ofs += stride) {
            if (value[i] === null) {
              continue;
            }

            type2writer[type](block, value[i], ofs);
          }

          this._rootBufferDirty = true;
        };

        _proto.bindTexture = function bindTexture(binding, value, index) {
          this._descriptorSet.bindTexture(binding, value, index || 0);
        };

        _proto.bindSampler = function bindSampler(binding, value, index) {
          this._descriptorSet.bindSampler(binding, value, index || 0);
        };

        _proto.setDynamicState = function setDynamicState(state, value) {
          var ds = this._dynamics[state];

          if (ds && ds.value === value) {
            return;
          }

          ds.value = value;
          ds.dirty = true;
        };

        _proto.overridePipelineStates = function overridePipelineStates(original, overrides) {
          console.warn('base pass cannot override states, please use pass instance instead.');
        };

        _proto._setRootBufferDirty = function _setRootBufferDirty(val) {
          this._rootBufferDirty = val;
        };

        _proto.update = function update() {
          if (!this._descriptorSet) {
            errorID(12006);
            return;
          }

          if (this._rootBuffer && this._rootBufferDirty) {
            this._rootBuffer.update(this._rootBlock);

            this._rootBufferDirty = false;
          }

          this._descriptorSet.update();
        };

        _proto.getInstancedBuffer = function getInstancedBuffer(extraKey) {
          if (extraKey === void 0) {
            extraKey = 0;
          }

          return this._instancedBuffers[extraKey] || (this._instancedBuffers[extraKey] = new InstancedBuffer(this));
        };

        _proto.getBatchedBuffer = function getBatchedBuffer(extraKey) {
          if (extraKey === void 0) {
            extraKey = 0;
          }

          return this._batchedBuffers[extraKey] || (this._batchedBuffers[extraKey] = new BatchedBuffer(this));
        };

        _proto.destroy = function destroy() {
          for (var i = 0; i < this._shaderInfo.blocks.length; i++) {
            var u = this._shaderInfo.blocks[i];

            this._buffers[u.binding].destroy();
          }

          this._buffers = [];

          if (this._rootBuffer) {
            this._rootBuffer.destroy();

            this._rootBuffer = null;
          }

          for (var ib in this._instancedBuffers) {
            this._instancedBuffers[ib].destroy();
          }

          for (var bb in this._batchedBuffers) {
            this._batchedBuffers[bb].destroy();
          }

          this._descriptorSet.destroy();

          this._rs.destroy();

          this._dss.destroy();

          this._bs.destroy();
        };

        _proto.resetUniform = function resetUniform(name) {
          var handle = this.getHandle(name);

          if (!handle) {
            return;
          }

          var type = Pass.getTypeFromHandle(handle);
          var binding = Pass.getBindingFromHandle(handle);
          var ofs = Pass.getOffsetFromHandle(handle);
          var count = Pass.getCountFromHandle(handle);

          var block = this._getBlockView(type, binding);

          var info = this._properties[name];
          var givenDefault = info && info.value;
          var value = givenDefault || getDefaultFromType(type);
          var size = (GetTypeSize(type) >> 2) * count;

          for (var k = 0; k + value.length <= size; k += value.length) {
            block.set(value, ofs + k);
          }

          this._rootBufferDirty = true;
        };

        _proto.resetTexture = function resetTexture(name, index) {
          var handle = this.getHandle(name);

          if (!handle) {
            return;
          }

          var type = Pass.getTypeFromHandle(handle);
          var binding = Pass.getBindingFromHandle(handle);
          var info = this._properties[name];
          var value = info && info.value;
          var texName = value ? "" + value + getStringFromType(type) : getDefaultFromType(type);
          var textureBase = builtinResMgr.get(texName);
          var texture = textureBase && textureBase.getGFXTexture();
          var samplerInfo = info && info.samplerHash !== undefined ? Sampler.unpackFromHash(info.samplerHash) : textureBase && textureBase.getSamplerInfo();

          var sampler = this._device.getSampler(samplerInfo);

          this._descriptorSet.bindSampler(binding, sampler, index || 0);

          this._descriptorSet.bindTexture(binding, texture, index || 0);
        };

        _proto.resetUBOs = function resetUBOs() {
          for (var i = 0; i < this._shaderInfo.blocks.length; i++) {
            var u = this._shaderInfo.blocks[i];
            var ofs = 0;

            for (var j = 0; j < u.members.length; j++) {
              var cur = u.members[j];

              var block = this._getBlockView(cur.type, u.binding);

              var info = this._properties[cur.name];
              var givenDefault = info && info.value;
              var value = givenDefault || getDefaultFromType(cur.type);
              var size = (GetTypeSize(cur.type) >> 2) * cur.count;

              for (var k = 0; k + value.length <= size; k += value.length) {
                block.set(value, ofs + k);
              }

              ofs += size;
            }
          }

          this._rootBufferDirty = true;
        };

        _proto.resetTextures = function resetTextures() {
          for (var i = 0; i < this._shaderInfo.samplerTextures.length; i++) {
            var u = this._shaderInfo.samplerTextures[i];

            for (var j = 0; j < u.count; j++) {
              this.resetTexture(u.name, j);
            }
          }
        };

        _proto.tryCompile = function tryCompile() {
          var pipeline = this._root.pipeline;

          if (!pipeline) {
            return false;
          }

          this._syncBatchingScheme();

          if (legacyCC.rendering && legacyCC.rendering.enableEffectImport) {
            var _programLib = legacyCC.rendering.programLib;

            var program = _programLib.getProgramVariant(this._device, this._phaseID, this._programName, this._defines);

            if (!program) {
              console.warn("create shader " + this._programName + " failed");
              return false;
            }

            this._shader = program.shader;
            this._pipelineLayout = _programLib.getPipelineLayout(this.device, this._phaseID, this._programName);
          } else {
            var shader = programLib.getGFXShader(this._device, this._programName, this._defines, pipeline);

            if (!shader) {
              console.warn("create shader " + this._programName + " failed");
              return false;
            }

            this._shader = shader;
            this._pipelineLayout = programLib.getTemplateInfo(this._programName).pipelineLayout;
          }

          this._hash = Pass.getPassHash(this);
          return true;
        };

        _proto.getShaderVariant = function getShaderVariant(patches) {
          if (patches === void 0) {
            patches = null;
          }

          if (!this._shader && !this.tryCompile()) {
            console.warn('pass resources incomplete');
            return null;
          }

          if (!patches) {
            return this._shader;
          }

          var pipeline = this._root.pipeline;

          for (var _i = 0; _i < patches.length; _i++) {
            var patch = patches[_i];
            this._defines[patch.name] = patch.value;
          }

          var shader = null;

          if (legacyCC.rendering && legacyCC.rendering.enableEffectImport) {
            var program = legacyCC.rendering.programLib.getProgramVariant(this._device, this._phaseID, this._programName, this._defines);

            if (program) {
              shader = program.shader;
            }
          } else {
            shader = programLib.getGFXShader(this._device, this._programName, this._defines, pipeline);
          }

          for (var _i2 = 0; _i2 < patches.length; _i2++) {
            var _patch = patches[_i2];
            delete this._defines[_patch.name];
          }

          return shader;
        };

        _proto.beginChangeStatesSilently = function beginChangeStatesSilently() {};

        _proto.endChangeStatesSilently = function endChangeStatesSilently() {};

        _proto._doInit = function _doInit(info, copyDefines) {
          if (copyDefines === void 0) {
            copyDefines = false;
          }

          this._priority = RenderPriority.DEFAULT;
          this._stage = RenderPassStage.DEFAULT;

          if (legacyCC.rendering && legacyCC.rendering.enableEffectImport) {
            var r = legacyCC.rendering;

            if (typeof info.phase === 'number') {
              this._passID = info._passID;
              this._phaseID = info._phaseID;
            } else {
              this._passID = r.getPassID(info.pass);

              if (this._passID !== r.INVALID_ID) {
                this._phaseID = r.getPhaseID(this._passID, info.phase);
              }
            }

            if (this._passID === r.INVALID_ID) {
              console.error("Invalid render pass, program: " + info.program);
              return;
            }

            if (this._phaseID === r.INVALID_ID) {
              console.error("Invalid render phase, program: " + info.program);
              return;
            }
          }

          this._phase = getPhaseID('default');
          this._primitive = PrimitiveMode.TRIANGLE_LIST;
          this._passIndex = info.passIndex;
          this._propertyIndex = info.propertyIndex !== undefined ? info.propertyIndex : info.passIndex;
          this._programName = info.program;
          this._defines = copyDefines ? _extends({}, info.defines) : info.defines;

          if (legacyCC.rendering && legacyCC.rendering.enableEffectImport) {
            this._shaderInfo = legacyCC.rendering.programLib.getProgramInfo(this._phaseID, this._programName);
          } else {
            this._shaderInfo = programLib.getTemplate(info.program);
          }

          this._properties = info.properties || this._properties;
          var device = this._device;
          Pass.fillPipelineInfo(this, info);

          if (info.stateOverrides) {
            Pass.fillPipelineInfo(this, info.stateOverrides);
          }

          if (legacyCC.rendering && legacyCC.rendering.enableEffectImport) {
            _dsInfo.layout = legacyCC.rendering.programLib.getMaterialDescriptorSetLayout(this._device, this._phaseID, info.program);
          } else {
            _dsInfo.layout = programLib.getDescriptorSetLayout(this._device, info.program);
          }

          this._descriptorSet = this._device.createDescriptorSet(_dsInfo);
          var blocks = this._shaderInfo.blocks;
          var blockSizes;
          var handleMap;

          if (legacyCC.rendering && legacyCC.rendering.enableEffectImport) {
            var _programLib2 = legacyCC.rendering.programLib;
            blockSizes = _programLib2.getBlockSizes(this._phaseID, this._programName);
            handleMap = _programLib2.getHandleMap(this._phaseID, this._programName);
          } else {
            var tmplInfo = programLib.getTemplateInfo(info.program);
            blockSizes = tmplInfo.blockSizes;
            handleMap = tmplInfo.handleMap;
          }

          if (legacyCC.rendering && legacyCC.rendering.enableEffectImport) {
            var _programLib3 = legacyCC.rendering.programLib;

            var shaderInfo = _programLib3.getShaderInfo(this._phaseID, this.program);

            this._buildMaterialUniformBlocks(device, shaderInfo.blocks, blockSizes);
          } else {
            this._buildUniformBlocks(device, blocks, blockSizes);
          }

          var directHandleMap = this._propertyHandleMap = handleMap;
          var indirectHandleMap = {};

          for (var name in this._properties) {
            var prop = this._properties[name];

            if (!prop.handleInfo) {
              continue;
            }

            indirectHandleMap[name] = this.getHandle.apply(this, prop.handleInfo);
          }

          Object.assign(directHandleMap, indirectHandleMap);
        };

        _proto._buildUniformBlocks = function _buildUniformBlocks(device, blocks, blockSizes) {
          var alignment = device.capabilities.uboOffsetAlignment;
          var startOffsets = [];
          var lastSize = 0;
          var lastOffset = 0;

          for (var i = 0; i < blocks.length; i++) {
            var size = blockSizes[i];
            startOffsets.push(lastOffset);
            lastOffset += Math.ceil(size / alignment) * alignment;
            lastSize = size;
          }

          var totalSize = startOffsets[startOffsets.length - 1] + lastSize;

          if (totalSize) {
            _bufferInfo.size = Math.ceil(totalSize / 16) * 16;
            this._rootBuffer = device.createBuffer(_bufferInfo);
            this._rootBlock = new ArrayBuffer(totalSize);
          }

          for (var _i3 = 0, count = 0; _i3 < blocks.length; _i3++) {
            var binding = blocks[_i3].binding;
            var _size = blockSizes[_i3];
            _bufferViewInfo.buffer = this._rootBuffer;
            _bufferViewInfo.offset = startOffsets[count++];
            _bufferViewInfo.range = Math.ceil(_size / 16) * 16;
            var bufferView = this._buffers[binding] = device.createBuffer(_bufferViewInfo);
            this._blocks[binding] = new Float32Array(this._rootBlock, _bufferViewInfo.offset, _size / Float32Array.BYTES_PER_ELEMENT);
            this._blocksInt[binding] = new Int32Array(this._blocks[binding].buffer, this._blocks[binding].byteOffset, this._blocks[binding].length);

            this._descriptorSet.bindBuffer(binding, bufferView);
          }
        };

        _proto._buildMaterialUniformBlocks = function _buildMaterialUniformBlocks(device, blocks, blockSizes) {
          var alignment = device.capabilities.uboOffsetAlignment;
          var startOffsets = [];
          var lastSize = 0;
          var lastOffset = 0;

          for (var i = 0; i < blocks.length; i++) {
            var block = blocks[i];

            if (block.set !== _materialSet) {
              continue;
            }

            var size = blockSizes[i];
            startOffsets.push(lastOffset);
            lastOffset += Math.ceil(size / alignment) * alignment;
            lastSize = size;
          }

          if (lastSize !== 0) {
            var totalSize = startOffsets[startOffsets.length - 1] + lastSize;

            if (totalSize) {
              _bufferInfo.size = Math.ceil(totalSize / 16) * 16;
              this._rootBuffer = device.createBuffer(_bufferInfo);
              this._rootBlock = new ArrayBuffer(totalSize);
            }
          }

          for (var _i4 = 0, count = 0; _i4 < blocks.length; _i4++) {
            var _block = blocks[_i4];

            if (_block.set !== _materialSet) {
              continue;
            }

            var binding = blocks[_i4].binding;
            var _size2 = blockSizes[_i4];
            _bufferViewInfo.buffer = this._rootBuffer;
            _bufferViewInfo.offset = startOffsets[count++];
            _bufferViewInfo.range = Math.ceil(_size2 / 16) * 16;
            var bufferView = this._buffers[binding] = device.createBuffer(_bufferViewInfo);
            this._blocks[binding] = new Float32Array(this._rootBlock, _bufferViewInfo.offset, _size2 / Float32Array.BYTES_PER_ELEMENT);
            this._blocksInt[binding] = new Int32Array(this._blocks[binding].buffer, this._blocks[binding].byteOffset, this._blocks[binding].length);

            this._descriptorSet.bindBuffer(binding, bufferView);
          }
        };

        _proto._syncBatchingScheme = function _syncBatchingScheme() {
          if (this._defines.USE_INSTANCING) {
            if (this._device.hasFeature(Feature$1.INSTANCED_ARRAYS)) {
              this._batchingScheme = BatchingSchemes.INSTANCING;
            } else {
              this._defines.USE_INSTANCING = false;
              this._batchingScheme = BatchingSchemes.NONE;
            }
          } else if (this._defines.USE_BATCHING) {
            this._batchingScheme = BatchingSchemes.VB_MERGING;
          } else {
            this._batchingScheme = BatchingSchemes.NONE;
          }
        };

        _proto._getBlockView = function _getBlockView(type, binding) {
          return type < Type.FLOAT ? this._blocksInt[binding] : this._blocks[binding];
        };

        _proto._initPassFromTarget = function _initPassFromTarget(target, dss, hashFactor) {
          this._priority = target.priority;
          this._stage = target.stage;
          this._phase = target.phase;
          this._phaseID = target._phaseID;
          this._passID = target._passID;
          this._batchingScheme = target.batchingScheme;
          this._primitive = target.primitive;
          this._dynamicStates = target.dynamicStates;
          this._bs = target.blendState;
          this._dss = dss;
          this._descriptorSet = target.descriptorSet;
          this._rs = target.rasterizerState;
          this._passIndex = target.passIndex;
          this._propertyIndex = target.propertyIndex;
          this._programName = target.program;
          this._defines = target.defines;
          this._shaderInfo = target._shaderInfo;
          this._properties = target._properties;
          this._blocks = target._blocks;
          this._blocksInt = target._blocksInt;
          this._dynamics = target._dynamics;
          this._shader = target._shader;

          if (legacyCC.rendering && legacyCC.rendering.enableEffectImport) {
            this._pipelineLayout = legacyCC.rendering.programLib.getPipelineLayout(this.device, this._phaseID, this._programName);
          } else {
            this._pipelineLayout = programLib.getTemplateInfo(this._programName).pipelineLayout;
          }

          this._hash = target._hash ^ hashFactor;
        };

        _proto._updatePassHash = function _updatePassHash() {
          this._hash = Pass.getPassHash(this);
        };

        _createClass(Pass, [{
          key: "root",
          get: function get() {
            return this._root;
          }
        }, {
          key: "device",
          get: function get() {
            return this._device;
          }
        }, {
          key: "shaderInfo",
          get: function get() {
            return this._shaderInfo;
          }
        }, {
          key: "localSetLayout",
          get: function get() {
            if (legacyCC.rendering && legacyCC.rendering.enableEffectImport) {
              return legacyCC.rendering.programLib.getLocalDescriptorSetLayout(this._device, this._phaseID, this._programName);
            } else {
              return programLib.getDescriptorSetLayout(this._device, this._programName, true);
            }
          }
        }, {
          key: "program",
          get: function get() {
            return this._programName;
          }
        }, {
          key: "properties",
          get: function get() {
            return this._properties;
          }
        }, {
          key: "defines",
          get: function get() {
            return this._defines;
          }
        }, {
          key: "passIndex",
          get: function get() {
            return this._passIndex;
          }
        }, {
          key: "propertyIndex",
          get: function get() {
            return this._propertyIndex;
          }
        }, {
          key: "dynamics",
          get: function get() {
            return this._dynamics;
          }
        }, {
          key: "blocks",
          get: function get() {
            return this._blocks;
          }
        }, {
          key: "blocksInt",
          get: function get() {
            return this._blocksInt;
          }
        }, {
          key: "rootBufferDirty",
          get: function get() {
            return this._rootBufferDirty;
          }
        }, {
          key: "priority",
          get: function get() {
            return this._priority;
          }
        }, {
          key: "primitive",
          get: function get() {
            return this._primitive;
          }
        }, {
          key: "stage",
          get: function get() {
            return this._stage;
          }
        }, {
          key: "phase",
          get: function get() {
            return this._phase;
          }
        }, {
          key: "passID",
          get: function get() {
            return this._passID;
          }
        }, {
          key: "phaseID",
          get: function get() {
            return this._phaseID;
          }
        }, {
          key: "rasterizerState",
          get: function get() {
            return this._rs;
          }
        }, {
          key: "depthStencilState",
          get: function get() {
            return this._dss;
          }
        }, {
          key: "blendState",
          get: function get() {
            return this._bs;
          }
        }, {
          key: "dynamicStates",
          get: function get() {
            return this._dynamicStates;
          }
        }, {
          key: "batchingScheme",
          get: function get() {
            return this._batchingScheme;
          }
        }, {
          key: "descriptorSet",
          get: function get() {
            return this._descriptorSet;
          }
        }, {
          key: "hash",
          get: function get() {
            return this._hash;
          }
        }, {
          key: "pipelineLayout",
          get: function get() {
            return this._pipelineLayout;
          }
        }]);

        return Pass;
      }();
      Pass.getTypeFromHandle = getTypeFromHandle;
      Pass.getBindingFromHandle = getBindingFromHandle;
      Pass.getCountFromHandle = getCountFromHandle;
      Pass.getOffsetFromHandle = getOffsetFromHandle;

      function serializeBlendState(bs) {
        var res = ",bs," + bs.isA2C;

        for (var _iterator = _createForOfIteratorHelperLoose(bs.targets), _step; !(_step = _iterator()).done;) {
          var t = _step.value;
          res += ",bt," + t.blend + "," + t.blendEq + "," + t.blendAlphaEq + "," + t.blendColorMask;
          res += "," + t.blendSrc + "," + t.blendDst + "," + t.blendSrcAlpha + "," + t.blendDstAlpha;
        }

        return res;
      }

      function serializeRasterizerState(rs) {
        return ",rs," + rs.cullMode + "," + rs.depthBias + "," + rs.isFrontFaceCCW;
      }

      function serializeDepthStencilState(dss) {
        var res = ",dss," + dss.depthTest + "," + dss.depthWrite + "," + dss.depthFunc;
        res += "," + dss.stencilTestFront + "," + dss.stencilFuncFront + "," + dss.stencilRefFront + "," + dss.stencilReadMaskFront;
        res += "," + dss.stencilFailOpFront + "," + dss.stencilZFailOpFront + "," + dss.stencilPassOpFront + "," + dss.stencilWriteMaskFront;
        res += "," + dss.stencilTestBack + "," + dss.stencilFuncBack + "," + dss.stencilRefBack + "," + dss.stencilReadMaskBack;
        res += "," + dss.stencilFailOpBack + "," + dss.stencilZFailOpBack + "," + dss.stencilPassOpBack + "," + dss.stencilWriteMaskBack;
        return res;
      }

      var PipelineStateManager = exports('PipelineStateManager', function () {
        function PipelineStateManager() {}

        PipelineStateManager.getOrCreatePipelineState = function getOrCreatePipelineState(device, pass, shader, renderPass, ia) {
          var hash1 = pass.hash;
          var hash2 = renderPass.hash;
          var hash3 = ia.attributesHash;
          var hash4 = shader.typedID;
          var newHash = hash1 ^ hash2 ^ hash3 ^ hash4;

          var pso = this._PSOHashMap.get(newHash);

          if (!pso) {
            var pipelineLayout = pass.pipelineLayout;
            var inputState = new InputState(ia.attributes);
            var psoInfo = new PipelineStateInfo(shader, pipelineLayout, renderPass, inputState, pass.rasterizerState, pass.depthStencilState, pass.blendState, pass.primitive, pass.dynamicStates);
            pso = device.createPipelineState(psoInfo);

            this._PSOHashMap.set(newHash, pso);
          }

          return pso;
        };

        return PipelineStateManager;
      }());
      PipelineStateManager._PSOHashMap = new Map();

      var profilerViewport = new Viewport();
      var profilerScissor = new Rect$1();
      function SRGBToLinear(out, gamma) {
        out.x = gamma.x * gamma.x;
        out.y = gamma.y * gamma.y;
        out.z = gamma.z * gamma.z;
      }
      var profilerCamera = null;
      function getProfilerCamera() {
        return profilerCamera;
      }
      function decideProfilerCamera(cameras) {
        for (var i = cameras.length - 1; i >= 0; --i) {
          var camera = cameras[i];

          if (camera.window.swapchain) {
            profilerCamera = camera;
            return;
          }
        }

        profilerCamera = null;
      }
      function renderProfiler(device, renderPass, cmdBuff, profiler, camera) {
        if (!profiler || !profiler.enabled) {
          return;
        }

        if (camera !== profilerCamera) {
          return;
        }

        var _profiler$subModels$ = profiler.subModels[0],
            inputAssembler = _profiler$subModels$.inputAssembler,
            passes = _profiler$subModels$.passes,
            shaders = _profiler$subModels$.shaders,
            descriptorSet = _profiler$subModels$.descriptorSet;
        profilerViewport.width = profilerScissor.width = camera.window.width;
        profilerViewport.height = profilerScissor.height = camera.window.height;
        var pso = PipelineStateManager.getOrCreatePipelineState(device, passes[0], shaders[0], renderPass, inputAssembler);
        cmdBuff.setViewport(profilerViewport);
        cmdBuff.setScissor(profilerScissor);
        cmdBuff.bindPipelineState(pso);
        cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, passes[0].descriptorSet);
        cmdBuff.bindDescriptorSet(SetIndex.LOCAL, descriptorSet);
        cmdBuff.bindInputAssembler(inputAssembler);
        cmdBuff.draw(inputAssembler);
      }

      var _dec$h, _dec2$4, _class$h, _class2$f, _initializer$c, _initializer2$7, _initializer3$7, _initializer4$6, _initializer5$3;
      var v4_1 = new Vec4();
      var Material = exports('Material', (_dec$h = ccclass('cc.Material'), _dec2$4 = type(EffectAsset), _dec$h(_class$h = (_class2$f = function (_Asset) {
        _inheritsLoose(Material, _Asset);

        Material.getHash = function getHash(material) {
          var hash = 0;

          for (var _iterator = _createForOfIteratorHelperLoose(material.passes), _step; !(_step = _iterator()).done;) {
            var pass = _step.value;
            hash ^= pass.hash;
          }

          return hash;
        };

        function Material() {
          var _this;

          _this = _Asset.call(this) || this;
          _this._effectAsset = _initializer$c && _initializer$c();
          _this._techIdx = _initializer2$7 && _initializer2$7();
          _this._defines = _initializer3$7 && _initializer3$7();
          _this._states = _initializer4$6 && _initializer4$6();
          _this._props = _initializer5$3 && _initializer5$3();
          _this._passes = [];
          _this._hash = 0;
          return _this;
        }

        var _proto = Material.prototype;

        _proto.initialize = function initialize(info) {
          if (this._passes.length) {
            warnID(12005);
            return;
          }

          if (!this._defines) {
            this._defines = [];
          }

          if (!this._states) {
            this._states = [];
          }

          if (!this._props) {
            this._props = [];
          }

          this._fillInfo(info);

          this._update();
        };

        _proto.reset = function reset(info) {
          this.initialize(info);
        };

        _proto.destroy = function destroy() {
          this._doDestroy();

          return _Asset.prototype.destroy.call(this);
        };

        _proto.recompileShaders = function recompileShaders(overrides, passIdx) {
          console.warn("Shaders in material asset '" + this.name + "' cannot be modified at runtime, please instantiate the material first.");
        };

        _proto.overridePipelineStates = function overridePipelineStates(overrides, passIdx) {
          console.warn("Pipeline states in material asset '" + this.name + "' cannot be modified at runtime, please instantiate the material first.");
        };

        _proto.onLoaded = function onLoaded() {
          this._update();
        };

        _proto.resetUniforms = function resetUniforms(clearPasses) {
          if (clearPasses === void 0) {
            clearPasses = true;
          }

          this._props.length = this._passes.length;

          for (var i = 0; i < this._props.length; i++) {
            this._props[i] = {};
          }

          if (!clearPasses) {
            return;
          }

          for (var _iterator2 = _createForOfIteratorHelperLoose(this._passes), _step2; !(_step2 = _iterator2()).done;) {
            var pass = _step2.value;
            pass.resetUBOs();
            pass.resetTextures();
          }
        };

        _proto.setProperty = function setProperty(name, val, passIdx) {
          var success = false;

          if (passIdx === undefined) {
            var passes = this._passes;
            var len = passes.length;

            for (var i = 0; i < len; i++) {
              var pass = passes[i];

              if (this._uploadProperty(pass, name, val)) {
                this._props[pass.propertyIndex][name] = val;
                success = true;
              }
            }
          } else {
            if (passIdx >= this._passes.length) {
              console.warn("illegal pass index: " + passIdx + ".");
              return;
            }

            var _pass = this._passes[passIdx];

            if (this._uploadProperty(_pass, name, val)) {
              this._props[_pass.propertyIndex][name] = val;
              success = true;
            }
          }

          if (!success) {
            console.warn("illegal property name: " + name + ".");
          }
        };

        _proto.getProperty = function getProperty(name, passIdx) {
          if (passIdx === undefined) {
            var propsArray = this._props;
            var len = propsArray.length;

            for (var i = 0; i < len; i++) {
              var props = propsArray[i];

              if (name in props) {
                return props[name];
              }
            }
          } else {
            if (passIdx >= this._props.length) {
              console.warn("illegal pass index: " + passIdx + ".");
              return null;
            }

            var _props = this._props[this._passes[passIdx].propertyIndex];

            if (name in _props) {
              return _props[name];
            }
          }

          return null;
        };

        _proto.copy = function copy(mat, overrides) {
          this._techIdx = mat._techIdx;
          this._props.length = mat._props.length;

          for (var i = 0; i < mat._props.length; i++) {
            this._props[i] = _extends({}, mat._props[i]);
          }

          this._defines.length = mat._defines.length;

          for (var _i = 0; _i < mat._defines.length; _i++) {
            this._defines[_i] = _extends({}, mat._defines[_i]);
          }

          this._states.length = mat._states.length;

          for (var _i2 = 0; _i2 < mat._states.length; _i2++) {
            this._states[_i2] = _extends({}, mat._states[_i2]);
          }

          this._effectAsset = mat._effectAsset;
          if (overrides) this._fillInfo(overrides);

          this._update();
        };

        _proto._fillInfo = function _fillInfo(info) {
          if (info.technique !== undefined) {
            this._techIdx = info.technique;
          }

          if (info.effectAsset) {
            this._effectAsset = info.effectAsset;
          } else if (info.effectName) {
            this._effectAsset = EffectAsset.get(info.effectName);
          }

          if (info.defines) {
            this._prepareInfo(info.defines, this._defines);
          }

          if (info.states) {
            this._prepareInfo(info.states, this._states);
          }
        };

        _proto._prepareInfo = function _prepareInfo(patch, cur) {
          var patchArray = patch;

          if (!Array.isArray(patchArray)) {
            var len = this._effectAsset ? this._effectAsset.techniques[this._techIdx].passes.length : 1;
            patchArray = Array(len).fill(patchArray);
          }

          for (var i = 0; i < patchArray.length; ++i) {
            Object.assign(cur[i] || (cur[i] = {}), patchArray[i]);
          }
        };

        _proto._createPasses = function _createPasses() {
          var tech = this._effectAsset.techniques[this._techIdx || 0];

          if (!tech) {
            return [];
          }

          var passNum = tech.passes.length;
          var passes = [];

          for (var k = 0; k < passNum; ++k) {
            var passInfo = tech.passes[k];
            var propIdx = passInfo.passIndex = k;
            var defines = passInfo.defines = this._defines[propIdx] || (this._defines[propIdx] = {});
            passInfo.stateOverrides = this._states[propIdx] || (this._states[propIdx] = {});

            if (passInfo.propertyIndex !== undefined) {
              Object.assign(defines, this._defines[passInfo.propertyIndex]);
            }

            if (passInfo.embeddedMacros !== undefined) {
              Object.assign(defines, passInfo.embeddedMacros);
            }

            if (passInfo["switch"] && !defines[passInfo["switch"]]) {
              continue;
            }

            var pass = new Pass(legacyCC.director.root);
            pass.initialize(passInfo);
            passes.push(pass);
          }

          return passes;
        };

        _proto._update = function _update(keepProps) {
          var _this2 = this;

          if (keepProps === void 0) {
            keepProps = true;
          }

          if (this._effectAsset) {
            this._passes = this._createPasses();
            var totalPasses = this._effectAsset.techniques[this._techIdx].passes.length;
            this._props.length = totalPasses;

            if (keepProps) {
              this._passes.forEach(function (pass, i) {
                var props = _this2._props[i];

                if (!props) {
                  props = _this2._props[i] = {};
                }

                if (pass.propertyIndex !== undefined) {
                  Object.assign(props, _this2._props[pass.propertyIndex]);
                }

                for (var p in props) {
                  _this2._uploadProperty(pass, p, props[p]);
                }
              });
            } else {
              for (var i = 0; i < this._props.length; i++) {
                this._props[i] = {};
              }
            }
          }

          this._hash = Material.getHash(this);
        };

        _proto._uploadProperty = function _uploadProperty(pass, name, val) {
          var handle = pass.getHandle(name);

          if (!handle) {
            return false;
          }

          var type = Pass.getTypeFromHandle(handle);

          if (type < Type.SAMPLER1D) {
            if (Array.isArray(val)) {
              pass.setUniformArray(handle, val);
            } else if (val !== null) {
              var _pass$properties$name;

              if ((_pass$properties$name = pass.properties[name]) !== null && _pass$properties$name !== void 0 && _pass$properties$name.linear) {
                var v4 = val;
                SRGBToLinear(v4_1, v4);
                v4_1.w = v4.w;
                val = v4_1;
              }

              pass.setUniform(handle, val);
            } else {
              pass.resetUniform(name);
            }
          } else if (Array.isArray(val)) {
            for (var i = 0; i < val.length; i++) {
              this._bindTexture(pass, handle, val[i], i);
            }
          } else if (val) {
            this._bindTexture(pass, handle, val);
          } else {
            pass.resetTexture(name);
          }

          return true;
        };

        _proto._bindTexture = function _bindTexture(pass, handle, val, index) {
          var binding = Pass.getBindingFromHandle(handle);

          if (val instanceof Texture) {
            pass.bindTexture(binding, val, index);
          } else if (val instanceof TextureBase) {
            var texture = val.getGFXTexture();

            if (!texture || !texture.width || !texture.height) {
              return;
            }

            pass.bindTexture(binding, texture, index);
            pass.bindSampler(binding, val.getGFXSampler(), index);
          }
        };

        _proto._doDestroy = function _doDestroy() {
          if (this._passes && this._passes.length) {
            for (var _iterator3 = _createForOfIteratorHelperLoose(this._passes), _step3; !(_step3 = _iterator3()).done;) {
              var pass = _step3.value;
              pass.destroy();
            }
          }

          this._passes.length = 0;
        };

        _proto.initDefault = function initDefault(uuid) {
          _Asset.prototype.initDefault.call(this, uuid);

          this.initialize({
            effectName: 'builtin-unlit',
            defines: {
              USE_COLOR: true
            },
            technique: 0
          });
          this.setProperty('mainColor', new Color('#ff00ff'));
        };

        _proto.validate = function validate() {
          return !!this._effectAsset && !this._effectAsset.isDefault && this.passes.length > 0;
        };

        _createClass(Material, [{
          key: "effectAsset",
          get: function get() {
            return this._effectAsset;
          }
        }, {
          key: "effectName",
          get: function get() {
            return this._effectAsset ? this._effectAsset.name : '';
          }
        }, {
          key: "technique",
          get: function get() {
            return this._techIdx;
          }
        }, {
          key: "passes",
          get: function get() {
            return this._passes;
          }
        }, {
          key: "hash",
          get: function get() {
            return this._hash;
          }
        }, {
          key: "parent",
          get: function get() {
            return null;
          }
        }, {
          key: "owner",
          get: function get() {
            return null;
          }
        }]);

        return Material;
      }(Asset), (_initializer$c = applyDecoratedInitializer(_class2$f.prototype, "_effectAsset", [_dec2$4], function () {
        return null;
      }), _initializer2$7 = applyDecoratedInitializer(_class2$f.prototype, "_techIdx", [serializable], function () {
        return 0;
      }), _initializer3$7 = applyDecoratedInitializer(_class2$f.prototype, "_defines", [serializable], function () {
        return [];
      }), _initializer4$6 = applyDecoratedInitializer(_class2$f.prototype, "_states", [serializable], function () {
        return [];
      }), _initializer5$3 = applyDecoratedInitializer(_class2$f.prototype, "_props", [serializable], function () {
        return [];
      })), _class2$f)) || _class$h));
      legacyCC.Material = Material;

      var CameraFOVAxis;

      (function (CameraFOVAxis) {
        CameraFOVAxis[CameraFOVAxis["VERTICAL"] = 0] = "VERTICAL";
        CameraFOVAxis[CameraFOVAxis["HORIZONTAL"] = 1] = "HORIZONTAL";
      })(CameraFOVAxis || (CameraFOVAxis = {}));

      var CameraProjection;

      (function (CameraProjection) {
        CameraProjection[CameraProjection["ORTHO"] = 0] = "ORTHO";
        CameraProjection[CameraProjection["PERSPECTIVE"] = 1] = "PERSPECTIVE";
      })(CameraProjection || (CameraProjection = {}));

      var CameraAperture;

      (function (CameraAperture) {
        CameraAperture[CameraAperture["F1_8"] = 0] = "F1_8";
        CameraAperture[CameraAperture["F2_0"] = 1] = "F2_0";
        CameraAperture[CameraAperture["F2_2"] = 2] = "F2_2";
        CameraAperture[CameraAperture["F2_5"] = 3] = "F2_5";
        CameraAperture[CameraAperture["F2_8"] = 4] = "F2_8";
        CameraAperture[CameraAperture["F3_2"] = 5] = "F3_2";
        CameraAperture[CameraAperture["F3_5"] = 6] = "F3_5";
        CameraAperture[CameraAperture["F4_0"] = 7] = "F4_0";
        CameraAperture[CameraAperture["F4_5"] = 8] = "F4_5";
        CameraAperture[CameraAperture["F5_0"] = 9] = "F5_0";
        CameraAperture[CameraAperture["F5_6"] = 10] = "F5_6";
        CameraAperture[CameraAperture["F6_3"] = 11] = "F6_3";
        CameraAperture[CameraAperture["F7_1"] = 12] = "F7_1";
        CameraAperture[CameraAperture["F8_0"] = 13] = "F8_0";
        CameraAperture[CameraAperture["F9_0"] = 14] = "F9_0";
        CameraAperture[CameraAperture["F10_0"] = 15] = "F10_0";
        CameraAperture[CameraAperture["F11_0"] = 16] = "F11_0";
        CameraAperture[CameraAperture["F13_0"] = 17] = "F13_0";
        CameraAperture[CameraAperture["F14_0"] = 18] = "F14_0";
        CameraAperture[CameraAperture["F16_0"] = 19] = "F16_0";
        CameraAperture[CameraAperture["F18_0"] = 20] = "F18_0";
        CameraAperture[CameraAperture["F20_0"] = 21] = "F20_0";
        CameraAperture[CameraAperture["F22_0"] = 22] = "F22_0";
      })(CameraAperture || (CameraAperture = {}));

      var CameraISO;

      (function (CameraISO) {
        CameraISO[CameraISO["ISO100"] = 0] = "ISO100";
        CameraISO[CameraISO["ISO200"] = 1] = "ISO200";
        CameraISO[CameraISO["ISO400"] = 2] = "ISO400";
        CameraISO[CameraISO["ISO800"] = 3] = "ISO800";
      })(CameraISO || (CameraISO = {}));

      var CameraShutter;

      (function (CameraShutter) {
        CameraShutter[CameraShutter["D1"] = 0] = "D1";
        CameraShutter[CameraShutter["D2"] = 1] = "D2";
        CameraShutter[CameraShutter["D4"] = 2] = "D4";
        CameraShutter[CameraShutter["D8"] = 3] = "D8";
        CameraShutter[CameraShutter["D15"] = 4] = "D15";
        CameraShutter[CameraShutter["D30"] = 5] = "D30";
        CameraShutter[CameraShutter["D60"] = 6] = "D60";
        CameraShutter[CameraShutter["D125"] = 7] = "D125";
        CameraShutter[CameraShutter["D250"] = 8] = "D250";
        CameraShutter[CameraShutter["D500"] = 9] = "D500";
        CameraShutter[CameraShutter["D1000"] = 10] = "D1000";
        CameraShutter[CameraShutter["D2000"] = 11] = "D2000";
        CameraShutter[CameraShutter["D4000"] = 12] = "D4000";
      })(CameraShutter || (CameraShutter = {}));

      var CameraType;

      (function (CameraType) {
        CameraType[CameraType["DEFAULT"] = -1] = "DEFAULT";
        CameraType[CameraType["LEFT_EYE"] = 0] = "LEFT_EYE";
        CameraType[CameraType["RIGHT_EYE"] = 1] = "RIGHT_EYE";
        CameraType[CameraType["MAIN"] = 2] = "MAIN";
      })(CameraType || (CameraType = {}));

      var TrackingType;

      (function (TrackingType) {
        TrackingType[TrackingType["NO_TRACKING"] = 0] = "NO_TRACKING";
        TrackingType[TrackingType["POSITION_AND_ROTATION"] = 1] = "POSITION_AND_ROTATION";
        TrackingType[TrackingType["POSITION"] = 2] = "POSITION";
        TrackingType[TrackingType["ROTATION"] = 3] = "ROTATION";
      })(TrackingType || (TrackingType = {}));

      var CameraUsage;

      (function (CameraUsage) {
        CameraUsage[CameraUsage["EDITOR"] = 0] = "EDITOR";
        CameraUsage[CameraUsage["GAME_VIEW"] = 1] = "GAME_VIEW";
        CameraUsage[CameraUsage["SCENE_VIEW"] = 2] = "SCENE_VIEW";
        CameraUsage[CameraUsage["PREVIEW"] = 3] = "PREVIEW";
        CameraUsage[CameraUsage["GAME"] = 100] = "GAME";
      })(CameraUsage || (CameraUsage = {}));

      var FSTOPS = [1.8, 2.0, 2.2, 2.5, 2.8, 3.2, 3.5, 4.0, 4.5, 5.0, 5.6, 6.3, 7.1, 8.0, 9.0, 10.0, 11.0, 13.0, 14.0, 16.0, 18.0, 20.0, 22.0];
      var SHUTTERS = [1.0, 1.0 / 2.0, 1.0 / 4.0, 1.0 / 8.0, 1.0 / 15.0, 1.0 / 30.0, 1.0 / 60.0, 1.0 / 125.0, 1.0 / 250.0, 1.0 / 500.0, 1.0 / 1000.0, 1.0 / 2000.0, 1.0 / 4000.0];
      var ISOS = [100.0, 200.0, 400.0, 800.0];
      var v_a = new Vec3();
      var v_b = new Vec3();

      var _tempMat1 = new Mat4();

      var SKYBOX_FLAG = ClearFlagBit.STENCIL << 1;
      var correctionMatrices = [];
      var Camera = function () {
        function Camera(device) {
          this.isWindowSize = true;
          this.screenScale = void 0;
          this._device = void 0;
          this._scene = null;
          this._node = null;
          this._name = null;
          this._enabled = false;
          this._proj = -1;
          this._aspect = void 0;
          this._orthoHeight = 10.0;
          this._fovAxis = CameraFOVAxis.VERTICAL;
          this._fov = toRadian(45);
          this._nearClip = 1.0;
          this._farClip = 1000.0;
          this._clearColor = new Color$1(0.2, 0.2, 0.2, 1);
          this._viewport = new Rect(0, 0, 1, 1);
          this._orientedViewport = new Rect(0, 0, 1, 1);
          this._curTransform = SurfaceTransform.IDENTITY;
          this._isProjDirty = true;
          this._matView = new Mat4();
          this._matProj = new Mat4();
          this._matProjInv = new Mat4();
          this._matViewProj = new Mat4();
          this._matViewProjInv = new Mat4();
          this._frustum = new Frustum();
          this._forward = new Vec3();
          this._position = new Vec3();
          this._priority = 0;
          this._aperture = CameraAperture.F16_0;
          this._apertureValue = void 0;
          this._shutter = CameraShutter.D125;
          this._shutterValue = 0.0;
          this._iso = CameraISO.ISO100;
          this._isoValue = 0.0;
          this._window = null;
          this._width = 1;
          this._height = 1;
          this._clearFlag = ClearFlagBit.NONE;
          this._clearDepth = 1.0;
          this._visibility = CAMERA_DEFAULT_MASK;
          this._exposure = 0;
          this._clearStencil = 0;
          this._geometryRenderer = null;
          this._windowId = 0;
          this._cameraType = CameraType.DEFAULT;
          this._trackingType = TrackingType.NO_TRACKING;
          this._usage = CameraUsage.GAME;
          this._device = device;
          this._apertureValue = FSTOPS[this._aperture];
          this._shutterValue = SHUTTERS[this._shutter];
          this._isoValue = ISOS[this._iso];
          this._aspect = this.screenScale = 1;
          this._frustum.accurate = true;

          if (!correctionMatrices.length) {
            var ySign = device.capabilities.clipSpaceSignY;
            correctionMatrices[SurfaceTransform.IDENTITY] = new Mat4(1, 0, 0, 0, 0, ySign);
            correctionMatrices[SurfaceTransform.ROTATE_90] = new Mat4(0, 1, 0, 0, -ySign, 0);
            correctionMatrices[SurfaceTransform.ROTATE_180] = new Mat4(-1, 0, 0, 0, 0, -ySign);
            correctionMatrices[SurfaceTransform.ROTATE_270] = new Mat4(0, -1, 0, 0, ySign, 0);
          }
        }

        var _proto = Camera.prototype;

        _proto._updateAspect = function _updateAspect(oriented) {
          if (oriented === void 0) {
            oriented = true;
          }

          this._aspect = this.window.width * this._viewport.width / (this.window.height * this._viewport.height);

          if (oriented) {
            var swapchain = this.window.swapchain;
            var orientation = swapchain && swapchain.surfaceTransform || SurfaceTransform.IDENTITY;
            if (orientation % 2) this._aspect = 1 / this._aspect;
          }

          this._isProjDirty = true;
        };

        _proto.initialize = function initialize(info) {
          if (info.usage !== undefined) {
            this._usage = info.usage;
          } else {
            this.setDefaultUsage();
          }

          if (info.trackingType !== undefined) {
            this._trackingType = info.trackingType;
          }

          if (info.cameraType !== undefined) {
            this._cameraType = info.cameraType;
          }

          this.node = info.node;
          this._width = 1;
          this._height = 1;
          this.clearFlag = ClearFlagBit.NONE;
          this.clearDepth = 1.0;
          this.visibility = CAMERA_DEFAULT_MASK;
          this._name = info.name;
          this._proj = info.projection;
          this._priority = info.priority || 0;
          this._aspect = this.screenScale = 1;
          this.updateExposure();
          this.changeTargetWindow(info.window);
        };

        _proto.destroy = function destroy() {
          var _this$_geometryRender;

          this._node = null;
          this.detachFromScene();

          if (this._window) {
            this._window.detachCamera(this);

            this.window = null;
          }

          this._name = null;
          (_this$_geometryRender = this._geometryRenderer) === null || _this$_geometryRender === void 0 ? void 0 : _this$_geometryRender.destroy();
        };

        _proto.attachToScene = function attachToScene(scene) {
          this._enabled = true;
          this._scene = scene;
        };

        _proto.detachFromScene = function detachFromScene() {
          this._enabled = false;
          this._scene = null;
        };

        _proto.resize = function resize(width, height) {
          if (!this._window) return;
          this._width = width;
          this._height = height;
          this._aspect = width * this._viewport.width / (height * this._viewport.height);
          this._isProjDirty = true;
        };

        _proto.setFixedSize = function setFixedSize(width, height) {
          this._width = width;
          this._height = height;

          this._updateAspect();

          this.isWindowSize = false;
        };

        _proto.syncCameraEditor = function syncCameraEditor(camera) {
        };

        _proto.update = function update(forceUpdate) {
          var _this$window;

          if (forceUpdate === void 0) {
            forceUpdate = false;
          }

          if (!this._node) return;
          var viewProjDirty = false;

          if (this._node.hasChangedFlags || forceUpdate) {
            Mat4.invert(this._matView, this._node.worldMatrix);
            this._forward.x = -this._matView.m02;
            this._forward.y = -this._matView.m06;
            this._forward.z = -this._matView.m10;
            Mat4.multiply(this._matView, new Mat4().scale(this._node.worldScale), this._matView);

            this._node.getWorldPosition(this._position);

            viewProjDirty = true;
          }

          var swapchain = (_this$window = this.window) === null || _this$window === void 0 ? void 0 : _this$window.swapchain;
          var orientation = swapchain && swapchain.surfaceTransform || SurfaceTransform.IDENTITY;

          if (this._isProjDirty || this._curTransform !== orientation) {
            this._curTransform = orientation;
            var projectionSignY = this._device.capabilities.clipSpaceSignY;

            if (this._proj === CameraProjection.PERSPECTIVE) {
              Mat4.perspective(this._matProj, this._fov, this._aspect, this._nearClip, this._farClip, this._fovAxis === CameraFOVAxis.VERTICAL, this._device.capabilities.clipSpaceMinZ, projectionSignY, orientation);
            } else {
              var x = this._orthoHeight * this._aspect;
              var y = this._orthoHeight;
              Mat4.ortho(this._matProj, -x, x, -y, y, this._nearClip, this._farClip, this._device.capabilities.clipSpaceMinZ, projectionSignY, orientation);
            }

            Mat4.invert(this._matProjInv, this._matProj);
            viewProjDirty = true;
            this._isProjDirty = false;
          }

          if (viewProjDirty) {
            Mat4.multiply(this._matViewProj, this._matProj, this._matView);
            Mat4.invert(this._matViewProjInv, this._matViewProj);

            this._frustum.update(this._matViewProj, this._matViewProjInv);
          }
        };

        _proto.setViewportInOrientedSpace = function setViewportInOrientedSpace(val) {
          var _this$window2;

          var x = val.x,
              width = val.width,
              height = val.height;
          var y = this._device.capabilities.screenSpaceSignY < 0 ? 1 - val.y - height : val.y;
          var swapchain = (_this$window2 = this.window) === null || _this$window2 === void 0 ? void 0 : _this$window2.swapchain;
          var orientation = swapchain && swapchain.surfaceTransform || SurfaceTransform.IDENTITY;

          switch (orientation) {
            case SurfaceTransform.ROTATE_90:
              this._viewport.x = 1 - y - height;
              this._viewport.y = x;
              this._viewport.width = height;
              this._viewport.height = width;
              break;

            case SurfaceTransform.ROTATE_180:
              this._viewport.x = 1 - x - width;
              this._viewport.y = 1 - y - height;
              this._viewport.width = width;
              this._viewport.height = height;
              break;

            case SurfaceTransform.ROTATE_270:
              this._viewport.x = y;
              this._viewport.y = 1 - x - width;
              this._viewport.width = height;
              this._viewport.height = width;
              break;

            case SurfaceTransform.IDENTITY:
              this._viewport.x = x;
              this._viewport.y = y;
              this._viewport.width = width;
              this._viewport.height = height;
              break;
          }

          this._orientedViewport.x = x;
          this._orientedViewport.y = y;
          this._orientedViewport.width = width;
          this._orientedViewport.height = height;
          this.resize(this.width, this.height);
        };

        _proto.initGeometryRenderer = function initGeometryRenderer() {
          if (!this._geometryRenderer) {
            var _this$_geometryRender2;

            this._geometryRenderer = legacyCC.internal.GeometryRenderer ? new legacyCC.internal.GeometryRenderer() : null;
            (_this$_geometryRender2 = this._geometryRenderer) === null || _this$_geometryRender2 === void 0 ? void 0 : _this$_geometryRender2.activate(this._device);
          }
        };

        _proto.changeTargetWindow = function changeTargetWindow(window) {
          if (window === void 0) {
            window = null;
          }

          if (this._window) {
            this._window.detachCamera(this);
          }

          var win = window || legacyCC.director.root.mainWindow;

          if (win) {
            win.attachCamera(this);
            this.window = win;
            var swapchain = win.swapchain;
            var orientation = swapchain && swapchain.surfaceTransform || SurfaceTransform.IDENTITY;
            if (orientation % 2) this.resize(win.height, win.width);else this.resize(win.width, win.height);
          }
        };

        _proto.detachCamera = function detachCamera() {
          if (this._window) {
            this._window.detachCamera(this);
          }
        };

        _proto.screenPointToRay = function screenPointToRay(out, x, y) {
          if (!this._node) return null;
          var width = this.width;
          var height = this.height;
          var cx = this._orientedViewport.x * width;
          var cy = this._orientedViewport.y * height;
          var cw = this._orientedViewport.width * width;
          var ch = this._orientedViewport.height * height;
          var isProj = this._proj === CameraProjection.PERSPECTIVE;
          var ySign = this._device.capabilities.clipSpaceSignY;
          var preTransform = preTransforms[this._curTransform];
          Vec3.set(v_a, (x - cx) / cw * 2 - 1, (y - cy) / ch * 2 - 1, isProj ? 1 : -1);
          var ox = v_a.x,
              oy = v_a.y;
          v_a.x = ox * preTransform[0] + oy * preTransform[2] * ySign;
          v_a.y = ox * preTransform[1] + oy * preTransform[3] * ySign;
          Vec3.transformMat4(isProj ? v_a : out.o, v_a, this._matViewProjInv);

          if (isProj) {
            this._node.getWorldPosition(v_b);

            Ray.fromPoints(out, v_b, v_a);
          } else {
            Vec3.transformQuat(out.d, Vec3.FORWARD, this._node.worldRotation);
          }

          return out;
        };

        _proto.screenToWorld = function screenToWorld(out, screenPos) {
          var width = this.width;
          var height = this.height;
          var cx = this._orientedViewport.x * width;
          var cy = this._orientedViewport.y * height;
          var cw = this._orientedViewport.width * width;
          var ch = this._orientedViewport.height * height;
          var ySign = this._device.capabilities.clipSpaceSignY;
          var preTransform = preTransforms[this._curTransform];

          if (this._proj === CameraProjection.PERSPECTIVE) {
            Vec3.set(out, (screenPos.x - cx) / cw * 2 - 1, (screenPos.y - cy) / ch * 2 - 1, 1.0);
            var x = out.x,
                y = out.y;
            out.x = x * preTransform[0] + y * preTransform[2] * ySign;
            out.y = x * preTransform[1] + y * preTransform[3] * ySign;
            Vec3.transformMat4(out, out, this._matViewProjInv);

            if (this._node) {
              this._node.getWorldPosition(v_a);
            }

            Vec3.lerp(out, v_a, out, lerp(this._nearClip / this._farClip, 1, screenPos.z));
          } else {
            Vec3.set(out, (screenPos.x - cx) / cw * 2 - 1, (screenPos.y - cy) / ch * 2 - 1, screenPos.z * 2 - 1);
            var _x = out.x,
                _y = out.y;
            out.x = _x * preTransform[0] + _y * preTransform[2] * ySign;
            out.y = _x * preTransform[1] + _y * preTransform[3] * ySign;
            Vec3.transformMat4(out, out, this._matViewProjInv);
          }

          return out;
        };

        _proto.worldToScreen = function worldToScreen(out, worldPos) {
          var ySign = this._device.capabilities.clipSpaceSignY;
          var preTransform = preTransforms[this._curTransform];
          Vec3.transformMat4(out, worldPos, this._matViewProj);
          var x = out.x,
              y = out.y;
          out.x = x * preTransform[0] + y * preTransform[2] * ySign;
          out.y = x * preTransform[1] + y * preTransform[3] * ySign;
          var width = this.width;
          var height = this.height;
          var cx = this._orientedViewport.x * width;
          var cy = this._orientedViewport.y * height;
          var cw = this._orientedViewport.width * width;
          var ch = this._orientedViewport.height * height;
          out.x = cx + (out.x + 1) * 0.5 * cw;
          out.y = cy + (out.y + 1) * 0.5 * ch;
          out.z = out.z * 0.5 + 0.5;
          return out;
        };

        _proto.worldMatrixToScreen = function worldMatrixToScreen(out, worldMatrix, width, height) {
          Mat4.multiply(out, this._matViewProj, worldMatrix);
          Mat4.multiply(out, correctionMatrices[this._curTransform], out);
          var halfWidth = width / 2;
          var halfHeight = height / 2;
          Mat4.identity(_tempMat1);
          Mat4.transform(_tempMat1, _tempMat1, Vec3.set(v_a, halfWidth, halfHeight, 0));
          Mat4.scale(_tempMat1, _tempMat1, Vec3.set(v_a, halfWidth, halfHeight, 1));
          Mat4.multiply(out, _tempMat1, out);
          return out;
        };

        _proto.calculateObliqueMat = function calculateObliqueMat(viewSpacePlane) {
          var clipFar = new Vec4(Math.sign(viewSpacePlane.x), Math.sign(viewSpacePlane.y), 1.0, 1.0);
          var viewFar = clipFar.transformMat4(this._matProjInv);
          var m4 = new Vec4(this._matProj.m03, this._matProj.m07, this._matProj.m11, this._matProj.m15);
          var scale = 2.0 / Vec4.dot(viewSpacePlane, viewFar);
          var newViewSpaceNearPlane = viewSpacePlane.multiplyScalar(scale);
          var m3 = newViewSpaceNearPlane.subtract(m4);
          this._matProj.m02 = m3.x;
          this._matProj.m06 = m3.y;
          this._matProj.m10 = m3.z;
          this._matProj.m14 = m3.w;
        };

        _proto.setExposure = function setExposure(ev100) {
          this._exposure = 0.833333 / Math.pow(2.0, ev100);
        };

        _proto.updateExposure = function updateExposure() {
          var ev100 = Math.log2(this._apertureValue * this._apertureValue / this._shutterValue * 100.0 / this._isoValue);
          this.setExposure(ev100);
        };

        _proto.setDefaultUsage = function setDefaultUsage() {
          {
            this._usage = CameraUsage.GAME;
          }
        };

        _createClass(Camera, [{
          key: "name",
          get: function get() {
            return this._name;
          }
        }, {
          key: "scene",
          get: function get() {
            return this._scene;
          }
        }, {
          key: "node",
          get: function get() {
            return this._node;
          },
          set: function set(val) {
            this._node = val;
          }
        }, {
          key: "systemWindowId",
          get: function get() {
            return this._windowId;
          }
        }, {
          key: "window",
          get: function get() {
            return this._window;
          },
          set: function set(val) {
            this._window = val;
          }
        }, {
          key: "enabled",
          get: function get() {
            return this._enabled;
          },
          set: function set(val) {
            this._enabled = val;
          }
        }, {
          key: "visibility",
          get: function get() {
            return this._visibility;
          },
          set: function set(vis) {
            this._visibility = vis;
          }
        }, {
          key: "priority",
          get: function get() {
            return this._priority;
          },
          set: function set(val) {
            this._priority = val;
          }
        }, {
          key: "width",
          get: function get() {
            return this._width;
          }
        }, {
          key: "height",
          get: function get() {
            return this._height;
          }
        }, {
          key: "position",
          get: function get() {
            return this._position;
          },
          set: function set(val) {
            this._position = val;
          }
        }, {
          key: "forward",
          get: function get() {
            return this._forward;
          },
          set: function set(val) {
            this._forward = val;
          }
        }, {
          key: "aperture",
          get: function get() {
            return this._aperture;
          },
          set: function set(val) {
            this._aperture = val;
            this._apertureValue = FSTOPS[this._aperture];
            this.updateExposure();
          }
        }, {
          key: "apertureValue",
          get: function get() {
            return this._apertureValue;
          }
        }, {
          key: "shutter",
          get: function get() {
            return this._shutter;
          },
          set: function set(val) {
            this._shutter = val;
            this._shutterValue = SHUTTERS[this._shutter];
            this.updateExposure();
          }
        }, {
          key: "shutterValue",
          get: function get() {
            return this._shutterValue;
          }
        }, {
          key: "iso",
          get: function get() {
            return this._iso;
          },
          set: function set(val) {
            this._iso = val;
            this._isoValue = ISOS[this._iso];
            this.updateExposure();
          }
        }, {
          key: "isoValue",
          get: function get() {
            return this._isoValue;
          }
        }, {
          key: "exposure",
          get: function get() {
            return this._exposure;
          }
        }, {
          key: "clearFlag",
          get: function get() {
            return this._clearFlag;
          },
          set: function set(flag) {
            this._clearFlag = flag;
          }
        }, {
          key: "clearColor",
          get: function get() {
            return this._clearColor;
          },
          set: function set(val) {
            this._clearColor.x = val.x;
            this._clearColor.y = val.y;
            this._clearColor.z = val.z;
            this._clearColor.w = val.w;
          }
        }, {
          key: "clearDepth",
          get: function get() {
            return this._clearDepth;
          },
          set: function set(depth) {
            this._clearDepth = depth;
          }
        }, {
          key: "clearStencil",
          get: function get() {
            return this._clearStencil;
          },
          set: function set(stencil) {
            this._clearStencil = stencil;
          }
        }, {
          key: "projectionType",
          get: function get() {
            return this._proj;
          },
          set: function set(val) {
            this._proj = val;
            this._isProjDirty = true;
          }
        }, {
          key: "aspect",
          get: function get() {
            return this._aspect;
          }
        }, {
          key: "orthoHeight",
          get: function get() {
            return this._orthoHeight;
          },
          set: function set(val) {
            this._orthoHeight = val;
            this._isProjDirty = true;
          }
        }, {
          key: "fovAxis",
          get: function get() {
            return this._fovAxis;
          },
          set: function set(axis) {
            this._fovAxis = axis;
            this._isProjDirty = true;
          }
        }, {
          key: "fov",
          get: function get() {
            return this._fov;
          },
          set: function set(fov) {
            this._fov = fov;
            this._isProjDirty = true;
          }
        }, {
          key: "nearClip",
          get: function get() {
            return this._nearClip;
          },
          set: function set(nearClip) {
            this._nearClip = nearClip;
            this._isProjDirty = true;
          }
        }, {
          key: "farClip",
          get: function get() {
            return this._farClip;
          },
          set: function set(farClip) {
            this._farClip = farClip;
            this._isProjDirty = true;
          }
        }, {
          key: "viewport",
          get: function get() {
            return this._viewport;
          },
          set: function set(val) {
            warnID(8302);
            this.setViewportInOrientedSpace(val);
          }
        }, {
          key: "frustum",
          get: function get() {
            return this._frustum;
          },
          set: function set(val) {
            this._frustum = val;
          }
        }, {
          key: "matView",
          get: function get() {
            return this._matView;
          }
        }, {
          key: "matProj",
          get: function get() {
            return this._matProj;
          }
        }, {
          key: "matProjInv",
          get: function get() {
            return this._matProjInv;
          }
        }, {
          key: "matViewProj",
          get: function get() {
            return this._matViewProj;
          }
        }, {
          key: "matViewProjInv",
          get: function get() {
            return this._matViewProjInv;
          }
        }, {
          key: "surfaceTransform",
          get: function get() {
            return this._curTransform;
          }
        }, {
          key: "geometryRenderer",
          get: function get() {
            return this._geometryRenderer;
          }
        }, {
          key: "cameraType",
          get: function get() {
            return this._cameraType;
          },
          set: function set(type) {
            this._cameraType = type;
          }
        }, {
          key: "trackingType",
          get: function get() {
            return this._trackingType;
          },
          set: function set(type) {
            this._trackingType = type;
          }
        }, {
          key: "cameraUsage",
          get: function get() {
            return this._usage;
          },
          set: function set(usage) {
            this._usage = usage;
          }
        }], [{
          key: "standardExposureValue",
          get: function get() {
            return 1.0 / 38400.0;
          }
        }, {
          key: "standardLightMeterScale",
          get: function get() {
            return 10000.0;
          }
        }]);

        return Camera;
      }();

      var ShadowSize = Enum({
        Low_256x256: 256,
        Medium_512x512: 512,
        High_1024x1024: 1024,
        Ultra_2048x2048: 2048
      });
      var ShadowType = Enum({
        Planar: 0,
        ShadowMap: 1
      });
      var PCFType = Enum({
        HARD: 0,
        SOFT: 1,
        SOFT_2X: 2,
        SOFT_4X: 3
      });
      var CSMLevel = Enum({
        LEVEL_1: 1,
        LEVEL_2: 2,
        LEVEL_3: 3,
        LEVEL_4: 4
      });
      var CSMOptimizationMode = Enum({
        NONE: 1,
        RemoveDuplicates: 2,
        DisableRotationFix: 3
      });
      var SHADOW_TYPE_NONE = ShadowType.ShadowMap + 1;
      var Shadows = function () {
        function Shadows() {
          this.fixedSphere = new Sphere(0.0, 0.0, 0.0, 0.01);
          this.maxReceived = 4;
          this._matLight = new Mat4();
          this._material = null;
          this._instancingMaterial = null;
          this._enabled = false;
          this._type = SHADOW_TYPE_NONE;
          this._distance = 0;
          this._normal = new Vec3(0, 1, 0);
          this._shadowColor = new Color(0, 0, 0, 76);
          this._size = new Vec2(1024, 1024);
          this._shadowMapDirty = false;
        }

        var _proto = Shadows.prototype;

        _proto.getPlanarShader = function getPlanarShader(patches) {
          if (!this._material) {
            this._material = new Material();

            this._material.initialize({
              effectName: 'pipeline/planar-shadow'
            });
          }

          var passes = this._material.passes;

          {
            assert(passes.length > 0, 'passes should not be empty!');
          }

          return passes.length > 0 ? passes[0].getShaderVariant(patches) : null;
        };

        _proto.getPlanarInstanceShader = function getPlanarInstanceShader(patches) {
          if (!this._instancingMaterial) {
            this._instancingMaterial = new Material();

            this._instancingMaterial.initialize({
              effectName: 'pipeline/planar-shadow',
              defines: {
                USE_INSTANCING: true
              }
            });
          }

          var passes = this._instancingMaterial.passes;

          {
            assert(passes.length > 0, 'passes should not be empty!');
          }

          return passes.length > 0 ? passes[0].getShaderVariant(patches) : null;
        };

        _proto.initialize = function initialize(shadowsInfo) {
          this._enabled = shadowsInfo.enabled;
          this._type = this.enabled ? shadowsInfo.type : SHADOW_TYPE_NONE;
          this.normal = shadowsInfo.planeDirection;
          this.distance = shadowsInfo.planeHeight;
          this.shadowColor = shadowsInfo.shadowColor;
          this.maxReceived = shadowsInfo.maxReceived;

          if (shadowsInfo.shadowMapSize !== this._size.x) {
            this.size.set(shadowsInfo.shadowMapSize, shadowsInfo.shadowMapSize);
            this._shadowMapDirty = true;
          }
        };

        _proto.activate = function activate() {
          if (this._enabled) {
            if (this.type === ShadowType.Planar) {
              this._updatePlanarInfo();
            } else {
              var root = legacyCC.director.root;
              var pipeline = root.pipeline;
              pipeline.macros.CC_SHADOW_TYPE = 2;
              root.onGlobalPipelineStateChanged();
            }
          } else {
            var _root = legacyCC.director.root;
            var _pipeline = _root.pipeline;
            _pipeline.macros.CC_SHADOW_TYPE = 0;

            _root.onGlobalPipelineStateChanged();
          }
        };

        _proto._updatePlanarInfo = function _updatePlanarInfo() {
          if (!this._material) {
            this._material = new Material();

            this._material.initialize({
              effectName: 'pipeline/planar-shadow'
            });
          }

          if (!this._instancingMaterial) {
            this._instancingMaterial = new Material();

            this._instancingMaterial.initialize({
              effectName: 'pipeline/planar-shadow',
              defines: {
                USE_INSTANCING: true
              }
            });
          }

          var root = legacyCC.director.root;
          var pipeline = root.pipeline;
          pipeline.macros.CC_SHADOW_TYPE = 1;
          root.onGlobalPipelineStateChanged();
        };

        _proto.destroy = function destroy() {
          if (this._material) {
            this._material.destroy();
          }

          if (this._instancingMaterial) {
            this._instancingMaterial.destroy();
          }

          this.fixedSphere.destroy();
        };

        _createClass(Shadows, [{
          key: "enabled",
          get: function get() {
            return this._enabled;
          },
          set: function set(val) {
            this._enabled = val;
            this.activate();
          }
        }, {
          key: "type",
          get: function get() {
            return this._type;
          },
          set: function set(val) {
            this._type = this.enabled ? val : SHADOW_TYPE_NONE;
            this.activate();
          }
        }, {
          key: "normal",
          get: function get() {
            return this._normal;
          },
          set: function set(val) {
            Vec3.copy(this._normal, val);
          }
        }, {
          key: "distance",
          get: function get() {
            return this._distance;
          },
          set: function set(val) {
            this._distance = val;
          }
        }, {
          key: "shadowColor",
          get: function get() {
            return this._shadowColor;
          },
          set: function set(color) {
            this._shadowColor = color;
          }
        }, {
          key: "size",
          get: function get() {
            return this._size;
          },
          set: function set(val) {
            this._size.set(val);
          }
        }, {
          key: "shadowMapDirty",
          get: function get() {
            return this._shadowMapDirty;
          },
          set: function set(val) {
            this._shadowMapDirty = val;
          }
        }, {
          key: "matLight",
          get: function get() {
            return this._matLight;
          }
        }, {
          key: "material",
          get: function get() {
            return this._material;
          }
        }, {
          key: "instancingMaterial",
          get: function get() {
            return this._instancingMaterial;
          }
        }]);

        return Shadows;
      }();
      Shadows.MAX_FAR = 2000.0;
      Shadows.COEFFICIENT_OF_EXPANSION = 2.0 * Math.sqrt(3.0);
      legacyCC.Shadows = Shadows;

      var _tempVec3 = new Vec3();

      var _sphere = Sphere.create(0, 0, 0, 1);

      var roPool = new Pool$1(function () {
        return {
          model: null,
          depth: 0
        };
      }, 128);

      function getRenderObject(model, camera) {
        var depth = 0;

        if (model.node) {
          Vec3.subtract(_tempVec3, model.node.worldPosition, camera.position);
          depth = Vec3.dot(_tempVec3, camera.forward);
        }

        var ro = roPool.alloc();
        ro.model = model;
        ro.depth = depth;
        return ro;
      }

      function validPunctualLightsCulling(pipeline, camera) {
        var sceneData = pipeline.pipelineSceneData;
        var validPunctualLights = sceneData.validPunctualLights;
        validPunctualLights.length = 0;
        var _ref = camera.scene,
            spotLights = _ref.spotLights;

        for (var i = 0; i < spotLights.length; i++) {
          var light = spotLights[i];

          if (light.baked) {
            continue;
          }

          Sphere.set(_sphere, light.position.x, light.position.y, light.position.z, light.range);

          if (intersect.sphereFrustum(_sphere, camera.frustum)) {
            validPunctualLights.push(light);
          }
        }

        var _ref2 = camera.scene,
            sphereLights = _ref2.sphereLights;

        for (var _i = 0; _i < sphereLights.length; _i++) {
          var _light = sphereLights[_i];

          if (_light.baked) {
            continue;
          }

          Sphere.set(_sphere, _light.position.x, _light.position.y, _light.position.z, _light.range);

          if (intersect.sphereFrustum(_sphere, camera.frustum)) {
            validPunctualLights.push(_light);
          }
        }

        sceneData.validPunctualLights = validPunctualLights;
      }
      function shadowCulling(camera, sceneData, layer) {
        var scene = camera.scene;
        var mainLight = scene.mainLight;
        var csmLayers = sceneData.csmLayers;
        var csmLayerObjects = csmLayers.layerObjects;
        var dirLightFrustum = layer.validFrustum;
        var dirShadowObjects = layer.shadowObjects;
        dirShadowObjects.length = 0;
        var visibility = camera.visibility;

        for (var i = csmLayerObjects.length - 1; i >= 0; i--) {
          var obj = csmLayerObjects.array[i];

          if (!obj) {
            csmLayerObjects.fastRemove(i);
            continue;
          }

          var model = obj.model;

          if (!model || !model.enabled || !model.node) {
            csmLayerObjects.fastRemove(i);
            continue;
          }

          if ((visibility & model.node.layer) !== model.node.layer && !(visibility & model.visFlags)) {
            csmLayerObjects.fastRemove(i);
            continue;
          }

          if (!model.worldBounds || !model.castShadow) {
            csmLayerObjects.fastRemove(i);
            continue;
          }

          var accurate = intersect.aabbFrustum(model.worldBounds, dirLightFrustum);

          if (!accurate) {
            continue;
          }

          dirShadowObjects.push(obj);

          if (layer.level < mainLight.csmLevel) {
            if (mainLight.csmOptimizationMode === CSMOptimizationMode.RemoveDuplicates && intersect.aabbFrustumCompletelyInside(model.worldBounds, dirLightFrustum)) {
              csmLayerObjects.fastRemove(i);
            }
          }
        }
      }
      function sceneCulling(pipeline, camera) {
        var scene = camera.scene;
        var mainLight = scene.mainLight;
        var sceneData = pipeline.pipelineSceneData;
        var shadows = sceneData.shadows;
        var skybox = sceneData.skybox;
        var csmLayers = sceneData.csmLayers;
        var renderObjects = sceneData.renderObjects;
        roPool.freeArray(renderObjects);
        renderObjects.length = 0;
        var castShadowObjects = csmLayers.castShadowObjects;
        castShadowObjects.length = 0;
        var csmLayerObjects = csmLayers.layerObjects;
        csmLayerObjects.clear();

        if (shadows.enabled) {
          pipeline.pipelineUBO.updateShadowUBORange(UBOShadow.SHADOW_COLOR_OFFSET, shadows.shadowColor);

          if (shadows.type === ShadowType.ShadowMap) {
            if (mainLight && mainLight.node) {
              csmLayers.update(sceneData, camera);
            }
          }
        }

        if (camera.clearFlag & SKYBOX_FLAG) {
          if (skybox.enabled && skybox.model) {
            renderObjects.push(getRenderObject(skybox.model, camera));
          } else if (camera.cameraUsage !== CameraUsage.EDITOR && camera.cameraUsage !== CameraUsage.SCENE_VIEW) {
            legacyCC.warnID(15100, camera.name);
          }
        }

        var models = scene.models;
        var visibility = camera.visibility;

        function enqueueRenderObject(model) {
          if (model.enabled) {
            if (scene.isCulledByLod(camera, model)) {
              return;
            }

            if (model.castShadow) {
              castShadowObjects.push(getRenderObject(model, camera));
              csmLayerObjects.push(getRenderObject(model, camera));
            }

            if (model.node && (visibility & model.node.layer) === model.node.layer || visibility & model.visFlags) {
              if (model.worldBounds && !intersect.aabbFrustum(model.worldBounds, camera.frustum)) {
                return;
              }

              renderObjects.push(getRenderObject(model, camera));
            }
          }
        }

        for (var i = 0; i < models.length; i++) {
          enqueueRenderObject(models[i]);
        }
      }

      var _dsInfo$1 = new DescriptorSetInfo(null);

      var MAX_PASS_COUNT = 8;
      var SubModel = function () {
        function SubModel() {
          this._device = null;
          this._passes = null;
          this._shaders = null;
          this._subMesh = null;
          this._patches = null;
          this._priority = RenderPriority.DEFAULT;
          this._inputAssembler = null;
          this._descriptorSet = null;
          this._worldBoundDescriptorSet = null;
          this._planarInstanceShader = null;
          this._planarShader = null;
          this._reflectionTex = null;
          this._reflectionSampler = null;
          this._instancedAttributeBlock = {
            buffer: null,
            views: [],
            attributes: []
          };
          this._instancedWorldMatrixIndex = -1;
          this._instancedSHIndex = -1;
          this._useReflectionProbeType = 0;
        }

        var _proto = SubModel.prototype;

        _proto.initialize = function initialize(subMesh, passes, patches) {
          if (patches === void 0) {
            patches = null;
          }

          var root = legacyCC.director.root;
          this._device = deviceManager.gfxDevice;
          _dsInfo$1.layout = passes[0].localSetLayout;
          this._inputAssembler = this._device.createInputAssembler(subMesh.iaInfo);
          this._descriptorSet = this._device.createDescriptorSet(_dsInfo$1);
          var pipeline = legacyCC.director.root.pipeline;
          var occlusionPass = pipeline.pipelineSceneData.getOcclusionQueryPass();

          if (occlusionPass) {
            var occlusionDSInfo = new DescriptorSetInfo(null);
            occlusionDSInfo.layout = occlusionPass.localSetLayout;
            this._worldBoundDescriptorSet = this._device.createDescriptorSet(occlusionDSInfo);
          }

          this._subMesh = subMesh;
          this._patches = patches;
          this._passes = passes;

          this._flushPassInfo();

          if (passes[0].batchingScheme === BatchingSchemes.VB_MERGING) {
            this.subMesh.genFlatBuffers();
          }

          this.priority = RenderPriority.DEFAULT;
          var r = legacyCC.rendering;

          if ((!r || !r.enableEffectImport) && passes[0].phase === getPhaseID('reflection') || isEnableEffect() && passes[0].phaseID === r.getPhaseID(r.getPassID('default'), 'reflection')) {
            var texWidth = root.mainWindow.width;
            var texHeight = root.mainWindow.height;
            var minSize = 512;

            if (texHeight < texWidth) {
              texWidth = minSize * texWidth / texHeight;
              texHeight = minSize;
            } else {
              texWidth = minSize;
              texHeight = minSize * texHeight / texWidth;
            }

            this._reflectionTex = this._device.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.STORAGE | TextureUsageBit.TRANSFER_SRC | TextureUsageBit.SAMPLED, Format.RGBA8, texWidth, texHeight));
            this.descriptorSet.bindTexture(UNIFORM_REFLECTION_TEXTURE_BINDING, this._reflectionTex);
            this._reflectionSampler = this._device.getSampler(new SamplerInfo(Filter.LINEAR, Filter.LINEAR, Filter.NONE, Address.CLAMP, Address.CLAMP, Address.CLAMP));
            this.descriptorSet.bindSampler(UNIFORM_REFLECTION_TEXTURE_BINDING, this._reflectionSampler);
            this.descriptorSet.bindTexture(UNIFORM_REFLECTION_STORAGE_BINDING, this._reflectionTex);
          }
        };

        _proto.initPlanarShadowShader = function initPlanarShadowShader() {
          var pipeline = legacyCC.director.root.pipeline;
          var shadowInfo = pipeline.pipelineSceneData.shadows;
          this._planarShader = shadowInfo.getPlanarShader(this._patches);
        };

        _proto.initPlanarShadowInstanceShader = function initPlanarShadowInstanceShader() {
          var pipeline = legacyCC.director.root.pipeline;
          var shadowInfo = pipeline.pipelineSceneData.shadows;
          this._planarInstanceShader = shadowInfo.getPlanarInstanceShader(this._patches);
        };

        _proto.destroy = function destroy() {
          var _this$_worldBoundDesc;

          this._descriptorSet.destroy();

          this._descriptorSet = null;

          this._inputAssembler.destroy();

          this._inputAssembler = null;
          (_this$_worldBoundDesc = this._worldBoundDescriptorSet) === null || _this$_worldBoundDesc === void 0 ? void 0 : _this$_worldBoundDesc.destroy();
          this._worldBoundDescriptorSet = null;
          this.priority = RenderPriority.DEFAULT;
          this._patches = null;
          this._subMesh = null;
          this._passes = null;
          this._shaders = null;
          if (this._reflectionTex) this._reflectionTex.destroy();
          this._reflectionTex = null;
          this._reflectionSampler = null;
        };

        _proto.update = function update() {
          var _this$_worldBoundDesc2;

          for (var i = 0; i < this._passes.length; ++i) {
            var pass = this._passes[i];
            pass.update();
          }

          this._descriptorSet.update();

          (_this$_worldBoundDesc2 = this._worldBoundDescriptorSet) === null || _this$_worldBoundDesc2 === void 0 ? void 0 : _this$_worldBoundDesc2.update();
        };

        _proto.onPipelineStateChanged = function onPipelineStateChanged() {
          var passes = this._passes;

          if (!passes) {
            return;
          }

          for (var i = 0; i < passes.length; i++) {
            var pass = passes[i];
            pass.beginChangeStatesSilently();
            pass.tryCompile();
            pass.endChangeStatesSilently();
          }

          this._flushPassInfo();
        };

        _proto.onMacroPatchesStateChanged = function onMacroPatchesStateChanged(patches) {
          this._patches = patches;
          var passes = this._passes;

          if (!passes) {
            return;
          }

          for (var i = 0; i < passes.length; i++) {
            var pass = passes[i];
            pass.beginChangeStatesSilently();
            pass.tryCompile();
            pass.endChangeStatesSilently();
          }

          this._flushPassInfo();
        };

        _proto.onGeometryChanged = function onGeometryChanged() {
          if (!this._subMesh) {
            return;
          }

          var drawInfo = this._subMesh.drawInfo;

          if (this._inputAssembler && drawInfo) {
            var dirtyDrawInfo = this._inputAssembler.drawInfo;
            Object.keys(drawInfo).forEach(function (key) {
              dirtyDrawInfo[key] = drawInfo[key];
            });
            this._inputAssembler.drawInfo = dirtyDrawInfo;
          }
        };

        _proto.getInstancedAttributeIndex = function getInstancedAttributeIndex(name) {
          var attributes = this.instancedAttributeBlock.attributes;

          for (var i = 0; i < attributes.length; i++) {
            if (attributes[i].name === name) {
              return i;
            }
          }

          return -1;
        };

        _proto.updateInstancedWorldMatrix = function updateInstancedWorldMatrix(mat, idx) {
          var attrs = this.instancedAttributeBlock.views;
          var v1 = attrs[idx];
          var v2 = attrs[idx + 1];
          var v3 = attrs[idx + 2];
          v1[0] = mat.m00;
          v1[1] = mat.m01;
          v1[2] = mat.m02;
          v1[3] = mat.m12;
          v2[0] = mat.m04;
          v2[1] = mat.m05;
          v2[2] = mat.m06;
          v2[3] = mat.m13;
          v3[0] = mat.m08;
          v3[1] = mat.m09;
          v3[2] = mat.m10;
          v3[3] = mat.m14;
        };

        _proto.updateInstancedSH = function updateInstancedSH(data, idx) {
          var attrs = this.instancedAttributeBlock.views;
          var count = (UBOSH.SH_QUADRATIC_R_OFFSET - UBOSH.SH_LINEAR_CONST_R_OFFSET) / 4;
          var offset = 0;

          for (var i = idx; i < idx + count; i++) {
            for (var k = 0; k < 4; k++) {
              attrs[i][k] = data[offset++];
            }
          }
        };

        _proto.UpdateInstancedAttributes = function UpdateInstancedAttributes(attributes) {
          this.instancedWorldMatrixIndex = -1;
          this.instancedSHIndex = -1;
          var pass = this.passes[0];

          if (!pass.device.hasFeature(Feature$1.INSTANCED_ARRAYS)) {
            return;
          }

          var size = 0;

          for (var j = 0; j < attributes.length; j++) {
            var attribute = attributes[j];

            if (!attribute.isInstanced) {
              continue;
            }

            size += FormatInfos[attribute.format].size;
          }

          var attrs = this.instancedAttributeBlock;
          attrs.buffer = new Uint8Array(size);
          attrs.views.length = attrs.attributes.length = 0;
          var offset = 0;

          for (var _j = 0; _j < attributes.length; _j++) {
            var _attribute = attributes[_j];

            if (!_attribute.isInstanced) {
              continue;
            }

            var attr = new Attribute();
            attr.format = _attribute.format;
            attr.name = _attribute.name;
            attr.isNormalized = _attribute.isNormalized;
            attr.location = _attribute.location;
            attrs.attributes.push(attr);
            var info = FormatInfos[_attribute.format];
            var typeViewArray = new (getTypedArrayConstructor(info))(attrs.buffer.buffer, offset, info.count);
            attrs.views.push(typeViewArray);
            offset += info.size;
          }

          if (pass.batchingScheme === BatchingSchemes.INSTANCING) {
            pass.getInstancedBuffer().destroy();
          }

          this.instancedWorldMatrixIndex = this.getInstancedAttributeIndex(INST_MAT_WORLD);
          this.instancedSHIndex = this.getInstancedAttributeIndex(INST_SH);
        };

        _proto._flushPassInfo = function _flushPassInfo() {
          var passes = this._passes;

          if (!passes) {
            return;
          }

          if (!this._shaders) {
            this._shaders = [];
          }

          this._shaders.length = passes.length;

          for (var i = 0, len = passes.length; i < len; i++) {
            this._shaders[i] = passes[i].getShaderVariant(this.patches);
          }
        };

        _createClass(SubModel, [{
          key: "passes",
          get: function get() {
            return this._passes;
          },
          set: function set(passes) {
            var passLengh = passes.length;

            if (passLengh > MAX_PASS_COUNT) {
              errorID(12004, MAX_PASS_COUNT);
              return;
            }

            this._passes = passes;

            this._flushPassInfo();

            if (this._passes[0].batchingScheme === BatchingSchemes.VB_MERGING) {
              this.subMesh.genFlatBuffers();
            }

            if (this._descriptorSet) {
              this._descriptorSet.destroy();

              _dsInfo$1.layout = passes[0].localSetLayout;
              this._descriptorSet = this._device.createDescriptorSet(_dsInfo$1);
            }
          }
        }, {
          key: "shaders",
          get: function get() {
            return this._shaders;
          }
        }, {
          key: "subMesh",
          get: function get() {
            return this._subMesh;
          },
          set: function set(subMesh) {
            this._inputAssembler.destroy();

            this._inputAssembler = this._device.createInputAssembler(subMesh.iaInfo);

            if (this._passes[0].batchingScheme === BatchingSchemes.VB_MERGING) {
              this.subMesh.genFlatBuffers();
            }

            this._subMesh = subMesh;
          }
        }, {
          key: "priority",
          get: function get() {
            return this._priority;
          },
          set: function set(val) {
            this._priority = val;
          }
        }, {
          key: "inputAssembler",
          get: function get() {
            return this._inputAssembler;
          }
        }, {
          key: "descriptorSet",
          get: function get() {
            return this._descriptorSet;
          }
        }, {
          key: "worldBoundDescriptorSet",
          get: function get() {
            return this._worldBoundDescriptorSet;
          }
        }, {
          key: "patches",
          get: function get() {
            return this._patches;
          }
        }, {
          key: "planarInstanceShader",
          get: function get() {
            return this._planarInstanceShader;
          }
        }, {
          key: "planarShader",
          get: function get() {
            return this._planarShader;
          }
        }, {
          key: "instancedAttributeBlock",
          get: function get() {
            return this._instancedAttributeBlock;
          }
        }, {
          key: "instancedWorldMatrixIndex",
          get: function get() {
            return this._instancedWorldMatrixIndex;
          },
          set: function set(val) {
            this._instancedWorldMatrixIndex = val;
          }
        }, {
          key: "instancedSHIndex",
          get: function get() {
            return this._instancedSHIndex;
          },
          set: function set(val) {
            this._instancedSHIndex = val;
          }
        }, {
          key: "useReflectionProbeType",
          get: function get() {
            return this._useReflectionProbeType;
          },
          set: function set(val) {
            this._useReflectionProbeType = val;
          }
        }]);

        return SubModel;
      }();

      var m4_1 = new Mat4();
      var shadowMapPatches = [{
        name: 'CC_RECEIVE_SHADOW',
        value: true
      }];
      var staticLightMapPatches = [{
        name: 'CC_USE_LIGHTMAP',
        value: 1
      }];
      var stationaryLightMapPatches = [{
        name: 'CC_USE_LIGHTMAP',
        value: 2
      }];
      var lightProbePatches = [{
        name: 'CC_USE_LIGHT_PROBE',
        value: true
      }];
      var CC_USE_REFLECTION_PROBE = 'CC_USE_REFLECTION_PROBE';
      var ModelType;

      (function (ModelType) {
        ModelType[ModelType["DEFAULT"] = 0] = "DEFAULT";
        ModelType[ModelType["SKINNING"] = 1] = "SKINNING";
        ModelType[ModelType["BAKED_SKINNING"] = 2] = "BAKED_SKINNING";
        ModelType[ModelType["BATCH_2D"] = 3] = "BATCH_2D";
        ModelType[ModelType["PARTICLE_BATCH"] = 4] = "PARTICLE_BATCH";
        ModelType[ModelType["LINE"] = 5] = "LINE";
      })(ModelType || (ModelType = {}));

      var lightmapSamplerHash = new SamplerInfo(Filter.LINEAR, Filter.LINEAR, Filter.NONE, Address.CLAMP, Address.CLAMP, Address.CLAMP);
      var lightmapSamplerWithMipHash = new SamplerInfo(Filter.LINEAR, Filter.LINEAR, Filter.LINEAR, Address.CLAMP, Address.CLAMP, Address.CLAMP);
      var Model = function () {
        function Model() {
          this.type = ModelType.DEFAULT;
          this.scene = null;
          this.isDynamicBatching = false;
          this._worldBounds = null;
          this._modelBounds = null;
          this._subModels = [];
          this._node = null;
          this._transform = null;
          this._device = void 0;
          this._inited = false;
          this._descriptorSetCount = 1;
          this._updateStamp = -1;
          this._localDataUpdated = true;
          this._localData = new Float32Array(UBOLocal.COUNT);
          this._localBuffer = null;
          this._localSHData = null;
          this._localSHBuffer = null;
          this._lightmap = null;
          this._lightmapUVParam = new Vec4();
          this._tetrahedronIndex = -1;
          this._lastWorldBoundCenter = new Vec3(Infinity, Infinity, Infinity);
          this._useLightProbe = false;
          this._worldBoundBuffer = null;
          this._receiveShadow = false;
          this._castShadow = false;
          this._shadowBias = 0;
          this._shadowNormalBias = 0;
          this._enabled = true;
          this._visFlags = Layers.Enum.NONE;
          this._priority = 0;
          this._bakeToReflectionProbe = true;
          this._reflectionProbeType = 0;
          this._device = deviceManager.gfxDevice;
        }

        var _proto = Model.prototype;

        _proto.initialize = function initialize() {
          if (this._inited) {
            return;
          }

          this._receiveShadow = true;
          this.castShadow = false;
          this.enabled = true;
          this.visFlags = Layers.Enum.NONE;
          this._inited = true;
          this._bakeToReflectionProbe = true;
          this._reflectionProbeType = 0;
        };

        _proto.destroy = function destroy() {
          var subModels = this._subModels;

          for (var i = 0; i < subModels.length; i++) {
            this._subModels[i].destroy();
          }

          if (this._localBuffer) {
            this._localBuffer.destroy();

            this._localBuffer = null;
          }

          if (this._localSHBuffer) {
            this._localSHBuffer.destroy();

            this._localSHBuffer = null;
          }

          if (this._worldBoundBuffer) {
            this._worldBoundBuffer.destroy();

            this._worldBoundBuffer = null;
          }

          this._worldBounds = null;
          this._modelBounds = null;
          this._subModels.length = 0;
          this._inited = false;
          this._localDataUpdated = true;
          this._transform = null;
          this._node = null;
          this.isDynamicBatching = false;
        };

        _proto.attachToScene = function attachToScene(scene) {
          this.scene = scene;
          this._localDataUpdated = true;
        };

        _proto.detachFromScene = function detachFromScene() {
          this.scene = null;
        };

        _proto.updateTransform = function updateTransform(stamp) {
          var node = this.transform;

          if (node.hasChangedFlags || node._dirtyFlags) {
            node.updateWorldTransform();
            this._localDataUpdated = true;
            var worldBounds = this._worldBounds;

            if (this._modelBounds && worldBounds) {
              this._modelBounds.transform(node._mat, node._pos, node._rot, node._scale, worldBounds);
            }
          }
        };

        _proto.updateWorldBound = function updateWorldBound() {
          var node = this.transform;

          if (node !== null) {
            node.updateWorldTransform();
            this._localDataUpdated = true;
            var worldBounds = this._worldBounds;

            if (this._modelBounds && worldBounds) {
              this._modelBounds.transform(node._mat, node._pos, node._rot, node._scale, worldBounds);
            }
          }
        };

        _proto.updateUBOs = function updateUBOs(stamp) {
          var subModels = this._subModels;

          for (var i = 0; i < subModels.length; i++) {
            subModels[i].update();
          }

          this._updateStamp = stamp;
          this.updateSHUBOs();
          var forceUpdateUBO = this.node.scene.globals.shadows.enabled && this.node.scene.globals.shadows.type === ShadowType.Planar;

          if (!this._localDataUpdated) {
            return;
          }

          this._localDataUpdated = false;
          var worldMatrix = this.transform._mat;
          var hasNonInstancingPass = false;

          for (var _i = 0; _i < subModels.length; _i++) {
            var subModel = subModels[_i];
            var idx = subModel.instancedWorldMatrixIndex;

            if (idx >= 0) {
              subModel.updateInstancedWorldMatrix(worldMatrix, idx);
            } else {
              hasNonInstancingPass = true;
            }
          }

          if ((hasNonInstancingPass || forceUpdateUBO) && this._localBuffer) {
            Mat4.toArray(this._localData, worldMatrix, UBOLocal.MAT_WORLD_OFFSET);
            Mat4.inverseTranspose(m4_1, worldMatrix);
            Mat4.toArray(this._localData, m4_1, UBOLocal.MAT_WORLD_IT_OFFSET);

            this._localBuffer.update(this._localData);
          }
        };

        _proto.showTetrahedron = function showTetrahedron() {
          return this.isLightProbeAvailable();
        };

        _proto.isLightProbeAvailable = function isLightProbeAvailable() {
          if (!this._useLightProbe) {
            return false;
          }

          var lightProbes = legacyCC.director.root.pipeline.pipelineSceneData.lightProbes;

          if (!lightProbes || lightProbes.empty()) {
            return false;
          }

          if (!this._worldBounds) {
            return false;
          }

          return true;
        };

        _proto.updateSHBuffer = function updateSHBuffer() {
          if (!this._localSHData) {
            return;
          }

          var subModels = this._subModels;
          var hasNonInstancingPass = false;

          for (var i = 0; i < subModels.length; i++) {
            var subModel = subModels[i];
            var idx = subModel.instancedSHIndex;

            if (idx >= 0) {
              subModel.updateInstancedSH(this._localSHData, idx);
            } else {
              hasNonInstancingPass = true;
            }
          }

          if (hasNonInstancingPass && this._localSHBuffer) {
            this._localSHBuffer.update(this._localSHData);
          }
        };

        _proto.clearSHUBOs = function clearSHUBOs() {
          if (!this._localSHData) {
            return;
          }

          for (var i = 0; i < UBOSH.COUNT; i++) {
            this._localSHData[i] = 0.0;
          }

          this.updateSHBuffer();
        };

        _proto.updateSHUBOs = function updateSHUBOs() {
          if (!this.isLightProbeAvailable()) {
            return;
          }

          var center = this._worldBounds.center;

          if ( center.equals(this._lastWorldBoundCenter, EPSILON)) {
            return;
          }

          var coefficients = [];
          var weights = new Vec4(0.0, 0.0, 0.0, 0.0);
          var lightProbes = legacyCC.director.root.pipeline.pipelineSceneData.lightProbes;

          this._lastWorldBoundCenter.set(center);

          this._tetrahedronIndex = lightProbes.data.getInterpolationWeights(center, this._tetrahedronIndex, weights);
          var result = lightProbes.data.getInterpolationSHCoefficients(this._tetrahedronIndex, weights, coefficients);

          if (!result) {
            return;
          }

          if (!this._localSHData) {
            return;
          }

          legacyCC.internal.SH.reduceRinging(coefficients, lightProbes.reduceRinging);
          legacyCC.internal.SH.updateUBOData(this._localSHData, UBOSH.SH_LINEAR_CONST_R_OFFSET, coefficients);
          this.updateSHBuffer();
        };

        _proto.createBoundingShape = function createBoundingShape(minPos, maxPos) {
          if (!minPos || !maxPos) {
            return;
          }

          this._modelBounds = AABB.fromPoints(AABB.create(), minPos, maxPos);
          this._worldBounds = AABB.clone(this._modelBounds);
        };

        _proto._createSubModel = function _createSubModel() {
          return new SubModel();
        };

        _proto.initSubModel = function initSubModel(idx, subMeshData, mat) {
          this.initialize();

          if (this._subModels[idx] == null) {
            this._subModels[idx] = this._createSubModel();
          } else {
            this._subModels[idx].destroy();
          }

          this._subModels[idx].initialize(subMeshData, mat.passes, this.getMacroPatches(idx));

          this._subModels[idx].initPlanarShadowShader();

          this._subModels[idx].initPlanarShadowInstanceShader();

          this._updateAttributesAndBinding(idx);
        };

        _proto.setSubModelMesh = function setSubModelMesh(idx, subMesh) {
          if (!this._subModels[idx]) {
            return;
          }

          this._subModels[idx].subMesh = subMesh;
        };

        _proto.setSubModelMaterial = function setSubModelMaterial(idx, mat) {
          if (!this._subModels[idx]) {
            return;
          }

          this._subModels[idx].passes = mat.passes;

          this._updateAttributesAndBinding(idx);
        };

        _proto.onGlobalPipelineStateChanged = function onGlobalPipelineStateChanged() {
          var subModels = this._subModels;

          for (var i = 0; i < subModels.length; i++) {
            subModels[i].onPipelineStateChanged();
          }
        };

        _proto.onMacroPatchesStateChanged = function onMacroPatchesStateChanged() {
          var subModels = this._subModels;

          for (var i = 0; i < subModels.length; i++) {
            subModels[i].onMacroPatchesStateChanged(this.getMacroPatches(i));
          }
        };

        _proto.onGeometryChanged = function onGeometryChanged() {
          var subModels = this._subModels;

          for (var i = 0; i < subModels.length; i++) {
            subModels[i].onGeometryChanged();
          }
        };

        _proto.initLightingmap = function initLightingmap(texture, uvParam) {
          this._lightmap = texture;
          this._lightmapUVParam = uvParam;
        };

        _proto.updateLightingmap = function updateLightingmap(texture, uvParam) {
          Vec4.toArray(this._localData, uvParam, UBOLocal.LIGHTINGMAP_UVPARAM);
          this._localDataUpdated = true;
          this._lightmap = texture;
          this._lightmapUVParam = uvParam;
          this.onMacroPatchesStateChanged();

          if (!texture) {
            texture = builtinResMgr.get('empty-texture');
          }

          var gfxTexture = texture.getGFXTexture();

          if (gfxTexture) {
            var sampler = this._device.getSampler(texture.mipmaps.length > 1 ? lightmapSamplerWithMipHash : lightmapSamplerHash);

            var subModels = this._subModels;

            for (var i = 0; i < subModels.length; i++) {
              var descriptorSet = subModels[i].descriptorSet;
              descriptorSet.bindTexture(UNIFORM_LIGHTMAP_TEXTURE_BINDING, gfxTexture);
              descriptorSet.bindSampler(UNIFORM_LIGHTMAP_TEXTURE_BINDING, sampler);
              descriptorSet.update();
            }
          }
        };

        _proto.updateReflectionProbeCubemap = function updateReflectionProbeCubemap(texture) {
          this._localDataUpdated = true;
          this.onMacroPatchesStateChanged();

          if (!texture) {
            texture = builtinResMgr.get('default-cube-texture');
          }

          var gfxTexture = texture.getGFXTexture();

          if (gfxTexture) {
            var reflectionSampler = this._device.getSampler(texture.getSamplerInfo());

            var subModels = this._subModels;

            for (var i = 0; i < subModels.length; i++) {
              var descriptorSet = subModels[i].descriptorSet;
              descriptorSet.bindSampler(UNIFORM_REFLECTION_PROBE_CUBEMAP_BINDING, reflectionSampler);
              descriptorSet.bindTexture(UNIFORM_REFLECTION_PROBE_CUBEMAP_BINDING, gfxTexture);
              descriptorSet.update();
            }
          }
        };

        _proto.updateReflectionProbePlanarMap = function updateReflectionProbePlanarMap(texture) {
          this._localDataUpdated = true;
          this.onMacroPatchesStateChanged();

          var sampler = this._device.getSampler(new SamplerInfo(Filter.LINEAR, Filter.LINEAR, Filter.NONE, Address.CLAMP, Address.CLAMP, Address.CLAMP));

          if (!texture) {
            texture = builtinResMgr.get('empty-texture').getGFXTexture();
          }

          if (texture) {
            var subModels = this._subModels;

            for (var i = 0; i < subModels.length; i++) {
              var descriptorSet = subModels[i].descriptorSet;
              descriptorSet.bindTexture(UNIFORM_REFLECTION_PROBE_TEXTURE_BINDING, texture);
              descriptorSet.bindSampler(UNIFORM_REFLECTION_PROBE_TEXTURE_BINDING, sampler);
              descriptorSet.update();
            }
          }
        };

        _proto.updateLocalShadowBias = function updateLocalShadowBias() {
          var sv = this._localData;
          sv[UBOLocal.LOCAL_SHADOW_BIAS + 0] = this._shadowBias;
          sv[UBOLocal.LOCAL_SHADOW_BIAS + 1] = this._shadowNormalBias;
          sv[UBOLocal.LOCAL_SHADOW_BIAS + 2] = 0;
          sv[UBOLocal.LOCAL_SHADOW_BIAS + 3] = 0;
          this._localDataUpdated = true;
        };

        _proto.getMacroPatches = function getMacroPatches(subModelIndex) {
          var patches = this.receiveShadow ? shadowMapPatches : null;

          if (this._lightmap != null) {
            var stationary = false;

            if (this.node && this.node.scene) {
              stationary = this.node.scene.globals.bakedWithStationaryMainLight;
            }

            var lightmapPathes = stationary ? stationaryLightMapPatches : staticLightMapPatches;
            patches = patches ? patches.concat(lightmapPathes) : lightmapPathes;
          }

          if (this._useLightProbe) {
            patches = patches ? patches.concat(lightProbePatches) : lightProbePatches;
          }

          var reflectionProbePatches = [{
            name: CC_USE_REFLECTION_PROBE,
            value: this._reflectionProbeType
          }];
          patches = patches ? patches.concat(reflectionProbePatches) : reflectionProbePatches;
          return patches;
        };

        _proto._updateAttributesAndBinding = function _updateAttributesAndBinding(subModelIndex) {
          var subModel = this._subModels[subModelIndex];

          if (!subModel) {
            return;
          }

          this._initLocalDescriptors(subModelIndex);

          this._updateLocalDescriptors(subModelIndex, subModel.descriptorSet);

          this._initLocalSHDescriptors(subModelIndex);

          this._updateLocalSHDescriptors(subModelIndex, subModel.descriptorSet);

          this._initWorldBoundDescriptors(subModelIndex);

          if (subModel.worldBoundDescriptorSet) {
            this._updateWorldBoundDescriptors(subModelIndex, subModel.worldBoundDescriptorSet);
          }

          var shader = subModel.passes[0].getShaderVariant(subModel.patches);

          this._updateInstancedAttributes(shader.attributes, subModel);
        };

        _proto._updateInstancedAttributes = function _updateInstancedAttributes(attributes, subModel) {
          subModel.UpdateInstancedAttributes(attributes);
          this._localDataUpdated = true;
        };

        _proto._initLocalDescriptors = function _initLocalDescriptors(subModelIndex) {
          if (!this._localBuffer) {
            this._localBuffer = this._device.createBuffer(new BufferInfo(BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, UBOLocal.SIZE, UBOLocal.SIZE));
          }
        };

        _proto._initLocalSHDescriptors = function _initLocalSHDescriptors(subModelIndex) {
          if ( !this._useLightProbe) {
            return;
          }

          if (!this._localSHData) {
            this._localSHData = new Float32Array(UBOSH.COUNT);
          }

          if (!this._localSHBuffer) {
            this._localSHBuffer = this._device.createBuffer(new BufferInfo(BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, UBOSH.SIZE, UBOSH.SIZE));
          }
        };

        _proto._initWorldBoundDescriptors = function _initWorldBoundDescriptors(subModelIndex) {
          if (!this._worldBoundBuffer) {
            this._worldBoundBuffer = this._device.createBuffer(new BufferInfo(BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, UBOWorldBound.SIZE, UBOWorldBound.SIZE));
          }
        };

        _proto._updateLocalDescriptors = function _updateLocalDescriptors(subModelIndex, descriptorSet) {
          if (this._localBuffer) descriptorSet.bindBuffer(UBOLocal.BINDING, this._localBuffer);
        };

        _proto._updateLocalSHDescriptors = function _updateLocalSHDescriptors(subModelIndex, descriptorSet) {
          if (this._localSHBuffer) descriptorSet.bindBuffer(UBOSH.BINDING, this._localSHBuffer);
        };

        _proto._updateWorldBoundDescriptors = function _updateWorldBoundDescriptors(subModelIndex, descriptorSet) {
          if (this._worldBoundBuffer) descriptorSet.bindBuffer(UBOWorldBound.BINDING, this._worldBoundBuffer);
        };

        _createClass(Model, [{
          key: "subModels",
          get: function get() {
            return this._subModels;
          }
        }, {
          key: "inited",
          get: function get() {
            return this._inited;
          }
        }, {
          key: "worldBounds",
          get: function get() {
            return this._worldBounds;
          }
        }, {
          key: "modelBounds",
          get: function get() {
            return this._modelBounds;
          }
        }, {
          key: "localBuffer",
          get: function get() {
            return this._localBuffer;
          }
        }, {
          key: "localSHBuffer",
          get: function get() {
            return this._localSHBuffer;
          }
        }, {
          key: "worldBoundBuffer",
          get: function get() {
            return this._worldBoundBuffer;
          }
        }, {
          key: "updateStamp",
          get: function get() {
            return this._updateStamp;
          }
        }, {
          key: "useLightProbe",
          get: function get() {
            return this._useLightProbe;
          },
          set: function set(val) {
            this._useLightProbe = val;
            this.onMacroPatchesStateChanged();
          }
        }, {
          key: "tetrahedronIndex",
          get: function get() {
            return this._tetrahedronIndex;
          },
          set: function set(index) {
            this._tetrahedronIndex = index;
          }
        }, {
          key: "shadowBias",
          get: function get() {
            return this._shadowBias;
          },
          set: function set(val) {
            this._shadowBias = val;
          }
        }, {
          key: "shadowNormalBias",
          get: function get() {
            return this._shadowNormalBias;
          },
          set: function set(val) {
            this._shadowNormalBias = val;
          }
        }, {
          key: "receiveShadow",
          get: function get() {
            return this._receiveShadow;
          },
          set: function set(val) {
            this._receiveShadow = val;
            this.onMacroPatchesStateChanged();
          }
        }, {
          key: "castShadow",
          get: function get() {
            return this._castShadow;
          },
          set: function set(val) {
            this._castShadow = val;
          }
        }, {
          key: "node",
          get: function get() {
            return this._node;
          },
          set: function set(n) {
            this._node = n;
          }
        }, {
          key: "transform",
          get: function get() {
            return this._transform;
          },
          set: function set(n) {
            this._transform = n;
          }
        }, {
          key: "visFlags",
          get: function get() {
            return this._visFlags;
          },
          set: function set(val) {
            this._visFlags = val;
          }
        }, {
          key: "enabled",
          get: function get() {
            return this._enabled;
          },
          set: function set(val) {
            this._enabled = val;
          }
        }, {
          key: "priority",
          get: function get() {
            return this._priority;
          },
          set: function set(val) {
            this._priority = val;
          }
        }, {
          key: "bakeToReflectionProbe",
          get: function get() {
            return this._bakeToReflectionProbe;
          },
          set: function set(val) {
            this._bakeToReflectionProbe = val;
          }
        }, {
          key: "reflectionProbeType",
          get: function get() {
            return this._reflectionProbeType;
          },
          set: function set(val) {
            this._reflectionProbeType = val;
            var subModels = this._subModels;

            for (var i = 0; i < subModels.length; i++) {
              subModels[i].useReflectionProbeType = val;
            }

            this.onMacroPatchesStateChanged();
          }
        }]);

        return Model;
      }();

      var Ambient = function () {
        function Ambient() {
          this._groundAlbedoHDR = new Vec4(0.2, 0.2, 0.2, 1.0);
          this._skyColorHDR = new Vec4(0.2, 0.5, 0.8, 1.0);
          this._skyIllumHDR = 0;
          this._groundAlbedoLDR = new Vec4(0.2, 0.2, 0.2, 1.0);
          this._skyColorLDR = new Vec4(0.2, 0.5, 0.8, 1.0);
          this._skyIllumLDR = 0;
          this._mipmapCount = 1;
          this._enabled = false;
        }

        var _proto = Ambient.prototype;

        _proto.initialize = function initialize(ambientInfo) {
          this._skyColorHDR = ambientInfo.skyColorHDR;

          this._groundAlbedoHDR.set(ambientInfo.groundAlbedoHDR);

          this._skyIllumHDR = ambientInfo.skyIllumHDR;
          this._skyColorLDR = ambientInfo.skyColorLDR;

          this._groundAlbedoLDR.set(ambientInfo.groundAlbedoLDR);

          this._skyIllumLDR = ambientInfo.skyIllumLDR;
        };

        _createClass(Ambient, [{
          key: "enabled",
          get: function get() {
            return this._enabled;
          },
          set: function set(val) {
            this._enabled = val;
          }
        }, {
          key: "skyColor",
          get: function get() {
            var isHDR = legacyCC.director.root.pipeline.pipelineSceneData.isHDR;

            if (isHDR) {
              return this._skyColorHDR;
            } else {
              return this._skyColorLDR;
            }
          },
          set: function set(color) {
            var isHDR = legacyCC.director.root.pipeline.pipelineSceneData.isHDR;

            if (isHDR) {
              this._skyColorHDR.set(color);
            } else {
              this._skyColorLDR.set(color);
            }
          }
        }, {
          key: "skyIllum",
          get: function get() {
            var isHDR = legacyCC.director.root.pipeline.pipelineSceneData.isHDR;

            if (isHDR) {
              return this._skyIllumHDR;
            } else {
              return this._skyIllumLDR;
            }
          },
          set: function set(illum) {
            var isHDR = legacyCC.director.root.pipeline.pipelineSceneData.isHDR;

            if (isHDR) {
              this._skyIllumHDR = illum;
            } else {
              this._skyIllumLDR = illum;
            }
          }
        }, {
          key: "groundAlbedo",
          get: function get() {
            var isHDR = legacyCC.director.root.pipeline.pipelineSceneData.isHDR;

            if (isHDR) {
              return this._groundAlbedoHDR;
            } else {
              return this._groundAlbedoLDR;
            }
          },
          set: function set(color) {
            var isHDR = legacyCC.director.root.pipeline.pipelineSceneData.isHDR;

            if (isHDR) {
              this._groundAlbedoHDR.set(color);
            } else {
              this._groundAlbedoLDR.set(color);
            }
          }
        }]);

        return Ambient;
      }();
      Ambient.SUN_ILLUM = 65000.0;
      Ambient.SKY_ILLUM = 20000.0;
      legacyCC.Ambient = Ambient;

      var PassInstance = function (_Pass) {
        _inheritsLoose(PassInstance, _Pass);

        function PassInstance(parent, owner) {
          var _this;

          _this = _Pass.call(this, parent.root) || this;
          _this._parent = void 0;
          _this._owner = void 0;
          _this._dontNotify = false;
          _this._parent = parent;
          _this._owner = owner;

          _this._doInit(_this._parent, true);

          for (var i = 0; i < _this._shaderInfo.blocks.length; i++) {
            var u = _this._shaderInfo.blocks[i];
            var block = _this._blocks[u.binding];
            var parentBlock = _this._parent.blocks[u.binding];
            block.set(parentBlock);
          }

          _this._rootBufferDirty = true;
          var paren = _this._parent;

          for (var _i = 0; _i < _this._shaderInfo.samplerTextures.length; _i++) {
            var _u = _this._shaderInfo.samplerTextures[_i];

            for (var j = 0; j < _u.count; j++) {
              var sampler = paren._descriptorSet.getSampler(_u.binding, j);

              var texture = paren._descriptorSet.getTexture(_u.binding, j);

              _this._descriptorSet.bindSampler(_u.binding, sampler, j);

              _this._descriptorSet.bindTexture(_u.binding, texture, j);
            }
          }

          _Pass.prototype.tryCompile.call(_assertThisInitialized(_this));

          return _this;
        }

        var _proto = PassInstance.prototype;

        _proto.overridePipelineStates = function overridePipelineStates(original, overrides) {
          this._bs.reset();

          this._rs.reset();

          this._dss.reset();

          Pass.fillPipelineInfo(this, original);
          Pass.fillPipelineInfo(this, overrides);

          this._onStateChange();
        };

        _proto.tryCompile = function tryCompile(defineOverrides) {
          if (defineOverrides) {
            if (!overrideMacros(this._defines, defineOverrides)) {
              return false;
            }
          }

          var res = _Pass.prototype.tryCompile.call(this);

          this._onStateChange();

          return res;
        };

        _proto.beginChangeStatesSilently = function beginChangeStatesSilently() {
          this._dontNotify = true;
        };

        _proto.endChangeStatesSilently = function endChangeStatesSilently() {
          this._dontNotify = false;
        };

        _proto._syncBatchingScheme = function _syncBatchingScheme() {
          this._defines.USE_BATCHING = this._defines.USE_INSTANCING = false;
          this._batchingScheme = BatchingSchemes.NONE;
        };

        _proto._onStateChange = function _onStateChange() {
          this._hash = Pass.getPassHash(this);

          this._owner.onPassStateChange(this._dontNotify);
        };

        _createClass(PassInstance, [{
          key: "parent",
          get: function get() {
            return this._parent;
          }
        }]);

        return PassInstance;
      }(Pass);

      var MaterialInstance = function (_Material) {
        _inheritsLoose(MaterialInstance, _Material);

        function MaterialInstance(info) {
          var _this;

          _this = _Material.call(this) || this;
          _this._passes = [];
          _this._parent = void 0;
          _this._owner = void 0;
          _this._subModelIdx = 0;
          _this._parent = info.parent;
          _this._owner = info.owner || null;
          _this._subModelIdx = info.subModelIdx || 0;

          _this.copy(_this._parent);

          return _this;
        }

        var _proto = MaterialInstance.prototype;

        _proto.recompileShaders = function recompileShaders(overrides, passIdx) {
          if (!this._passes || !this.effectAsset) {
            return;
          }

          if (passIdx === undefined) {
            for (var _iterator = _createForOfIteratorHelperLoose(this._passes), _step; !(_step = _iterator()).done;) {
              var pass = _step.value;
              pass.tryCompile(overrides);
            }
          } else {
            this._passes[passIdx].tryCompile(overrides);
          }
        };

        _proto.overridePipelineStates = function overridePipelineStates(overrides, passIdx) {
          if (!this._passes || !this.effectAsset) {
            return;
          }

          var passInfos = this.effectAsset.techniques[this.technique].passes;

          if (passIdx === undefined) {
            for (var i = 0; i < this._passes.length; i++) {
              var pass = this._passes[i];
              var state = this._states[i] || (this._states[i] = {});

              for (var key in overrides) {
                state[key] = overrides[key];
              }

              pass.overridePipelineStates(passInfos[pass.passIndex], state);
            }
          } else {
            var _state = this._states[passIdx] || (this._states[passIdx] = {});

            for (var _key in overrides) {
              _state[_key] = overrides[_key];
            }

            this._passes[passIdx].overridePipelineStates(passInfos[passIdx], _state);
          }
        };

        _proto.destroy = function destroy() {
          this._doDestroy();

          return true;
        };

        _proto.onPassStateChange = function onPassStateChange(dontNotify) {
          this._hash = Material.getHash(this);

          if (!dontNotify && this._owner) {
            this._owner._onRebuildPSO(this._subModelIdx, this);
          }
        };

        _proto._createPasses = function _createPasses() {
          var passes = [];
          var parentPasses = this._parent.passes;

          if (!parentPasses) {
            return passes;
          }

          for (var k = 0; k < parentPasses.length; ++k) {
            passes.push(new PassInstance(parentPasses[k], this));
          }

          return passes;
        };

        _createClass(MaterialInstance, [{
          key: "parent",
          get: function get() {
            return this._parent;
          }
        }, {
          key: "owner",
          get: function get() {
            return this._owner;
          }
        }]);

        return MaterialInstance;
      }(Material);

      var skybox_mesh = null;
      var skybox_material = null;
      var EnvironmentLightingType = Enum({
        HEMISPHERE_DIFFUSE: 0,
        AUTOGEN_HEMISPHERE_DIFFUSE_WITH_REFLECTION: 1,
        DIFFUSEMAP_WITH_REFLECTION: 2
      });
      var Skybox = function () {
        function Skybox() {
          this._envmapLDR = null;
          this._envmapHDR = null;
          this._diffuseMapLDR = null;
          this._diffuseMapHDR = null;
          this._globalDSManager = null;
          this._model = null;
          this._default = null;
          this._enabled = false;
          this._useIBL = false;
          this._useHDR = true;
          this._useDiffuseMap = false;
          this._editableMaterial = null;
          this._activated = false;
          this._reflectionHDR = null;
          this._reflectionLDR = null;
          this._rotationAngle = 0;
        }

        var _proto = Skybox.prototype;

        _proto.initialize = function initialize(skyboxInfo) {
          this._activated = false;
          this._enabled = skyboxInfo.enabled;
          this._useIBL = skyboxInfo.useIBL;
          this._useDiffuseMap = skyboxInfo.applyDiffuseMap;
          this._useHDR = skyboxInfo.useHDR;
        };

        _proto.setEnvMaps = function setEnvMaps(envmapHDR, envmapLDR) {
          this._envmapHDR = envmapHDR;
          this._envmapLDR = envmapLDR;

          this._updateGlobalBinding();

          this._updatePipeline();
        };

        _proto.setDiffuseMaps = function setDiffuseMaps(diffuseMapHDR, diffuseMapLDR) {
          this._diffuseMapHDR = diffuseMapHDR;
          this._diffuseMapLDR = diffuseMapLDR;

          this._updateGlobalBinding();

          this._updatePipeline();
        };

        _proto.setSkyboxMaterial = function setSkyboxMaterial(skyboxMat) {
          if (skyboxMat) {
            this._editableMaterial = new MaterialInstance({
              parent: skyboxMat
            });

            this._editableMaterial.recompileShaders({
              USE_RGBE_CUBEMAP: this.isRGBE
            });
          } else {
            this._editableMaterial = null;
          }

          this._updatePipeline();
        };

        _proto.setReflectionMaps = function setReflectionMaps(reflectionHDR, reflectionLDR) {
          this._reflectionHDR = reflectionHDR;
          this._reflectionLDR = reflectionLDR;

          this._updateGlobalBinding();

          this._updatePipeline();
        };

        _proto.setRotationAngle = function setRotationAngle(angle) {
          this._rotationAngle = angle;
        };

        _proto.getRotationAngle = function getRotationAngle() {
          return this._rotationAngle;
        };

        _proto.updateMaterialRenderInfo = function updateMaterialRenderInfo() {
          this._updateGlobalBinding();

          this._updatePipeline();
        };

        _proto.activate = function activate() {
          var pipeline = legacyCC.director.root.pipeline;
          this._globalDSManager = pipeline.globalDSManager;
          this._default = builtinResMgr.get('default-cube-texture');

          if (!this._model) {
            this._model = legacyCC.director.root.createModel(legacyCC.renderer.scene.Model);
          }

          var isRGBE = this._default.isRGBE;

          var isUseConvolutionMap = this._default.isUsingOfflineMipmaps();

          if (this.envmap) {
            isRGBE = this.envmap.isRGBE;
            isUseConvolutionMap = this.envmap.isUsingOfflineMipmaps();
          }

          if (!skybox_material) {
            var mat = new Material();
            mat.initialize({
              effectName: 'pipeline/skybox',
              defines: {
                USE_RGBE_CUBEMAP: isRGBE
              }
            });
            skybox_material = new MaterialInstance({
              parent: mat
            });
          }

          if (this.enabled) {
            if (!skybox_mesh) {
              skybox_mesh = legacyCC.utils.createMesh(legacyCC.primitives.box({
                width: 2,
                height: 2,
                length: 2
              }));
            }

            if (this._editableMaterial) {
              this._model.initSubModel(0, skybox_mesh.renderingSubMeshes[0], this._editableMaterial);
            } else {
              this._model.initSubModel(0, skybox_mesh.renderingSubMeshes[0], skybox_material);
            }
          }

          if (!this.envmap) {
            this.envmap = this._default;
          }

          if (!this.diffuseMap) {
            this.diffuseMap = this._default;
          }

          this._updateGlobalBinding();

          this._updatePipeline();

          this._activated = true;
        };

        _proto._updatePipeline = function _updatePipeline() {
          var root = legacyCC.director.root;
          var pipeline = root.pipeline;
          var useIBLValue = this.useIBL ? this.isRGBE ? 2 : 1 : 0;
          var useDiffuseMapValue = this.useIBL && this.useDiffuseMap && this.diffuseMap ? this.isRGBE ? 2 : 1 : 0;
          var useHDRValue = this.useHDR;
          var useConvMapValue = this.useConvolutionMap;

          if (pipeline.macros.CC_USE_IBL !== useIBLValue || pipeline.macros.CC_USE_DIFFUSEMAP !== useDiffuseMapValue || pipeline.macros.CC_USE_HDR !== useHDRValue || pipeline.macros.CC_IBL_CONVOLUTED !== useConvMapValue) {
            pipeline.macros.CC_USE_IBL = useIBLValue;
            pipeline.macros.CC_USE_DIFFUSEMAP = useDiffuseMapValue;
            pipeline.macros.CC_USE_HDR = useHDRValue;
            pipeline.macros.CC_IBL_CONVOLUTED = useConvMapValue;

            if (this._activated) {
              root.onGlobalPipelineStateChanged();
            }
          }

          if (this.enabled) {
            var envmap = this.envmap ? this.envmap : this._default;
            var skyboxMat = this._editableMaterial ? this._editableMaterial : skybox_material;

            if (skyboxMat) {
              skyboxMat.setProperty('environmentMap', envmap);
              skyboxMat.recompileShaders({
                USE_RGBE_CUBEMAP: this.isRGBE
              });
            }

            if (this._model) {
              this._model.setSubModelMaterial(0, skyboxMat);

              this._updateSubModes();
            }
          }
        };

        _proto._updateGlobalBinding = function _updateGlobalBinding() {
          if (this._globalDSManager) {
            var device = deviceManager.gfxDevice;

            if (this.reflectionMap) {
              var texture = this.reflectionMap.getGFXTexture();
              var sampler = device.getSampler(this.reflectionMap.getSamplerInfo());

              this._globalDSManager.bindSampler(UNIFORM_ENVIRONMENT_BINDING, sampler);

              this._globalDSManager.bindTexture(UNIFORM_ENVIRONMENT_BINDING, texture);
            } else {
              var envmap = this.envmap ? this.envmap : this._default;

              if (envmap) {
                var _texture = envmap.getGFXTexture();

                var _sampler = device.getSampler(envmap.getSamplerInfo());

                this._globalDSManager.bindSampler(UNIFORM_ENVIRONMENT_BINDING, _sampler);

                this._globalDSManager.bindTexture(UNIFORM_ENVIRONMENT_BINDING, _texture);
              }
            }

            var diffuseMap = this.diffuseMap ? this.diffuseMap : this._default;

            if (diffuseMap) {
              var _texture2 = diffuseMap.getGFXTexture();

              var _sampler2 = device.getSampler(diffuseMap.getSamplerInfo());

              this._globalDSManager.bindSampler(UNIFORM_DIFFUSEMAP_BINDING, _sampler2);

              this._globalDSManager.bindTexture(UNIFORM_DIFFUSEMAP_BINDING, _texture2);
            }

            this._globalDSManager.update();
          }
        };

        _proto._updateSubModes = function _updateSubModes() {
          if (this._model) {
            var subModels = this._model.subModels;

            for (var i = 0; i < subModels.length; i++) {
              subModels[i].update();
            }
          }
        };

        _createClass(Skybox, [{
          key: "model",
          get: function get() {
            return this._model;
          }
        }, {
          key: "enabled",
          get: function get() {
            return this._enabled;
          },
          set: function set(val) {
            this._enabled = val;
            if (val) this.activate();else this._updatePipeline();
          }
        }, {
          key: "useHDR",
          get: function get() {
            return this._useHDR;
          },
          set: function set(val) {
            this._useHDR = val;
            this.setEnvMaps(this._envmapHDR, this._envmapLDR);
          }
        }, {
          key: "useIBL",
          get: function get() {
            return this._useIBL;
          },
          set: function set(val) {
            this._useIBL = val;

            this._updatePipeline();
          }
        }, {
          key: "useDiffuseMap",
          get: function get() {
            return this._useDiffuseMap;
          },
          set: function set(val) {
            this._useDiffuseMap = val;

            this._updatePipeline();
          }
        }, {
          key: "isRGBE",
          get: function get() {
            if (this.envmap) {
              return this.envmap.isRGBE;
            } else {
              return false;
            }
          }
        }, {
          key: "useConvolutionMap",
          get: function get() {
            if (this.reflectionMap) {
              return this.reflectionMap.isUsingOfflineMipmaps();
            }

            if (this.envmap) {
              return this.envmap.isUsingOfflineMipmaps();
            }

            return false;
          }
        }, {
          key: "envmap",
          get: function get() {
            var isHDR = legacyCC.director.root.pipeline.pipelineSceneData.isHDR;

            if (isHDR) {
              return this._envmapHDR;
            } else {
              return this._envmapLDR;
            }
          },
          set: function set(val) {
            var root = legacyCC.director.root;
            var isHDR = root.pipeline.pipelineSceneData.isHDR;

            if (isHDR) {
              this.setEnvMaps(val, this._envmapLDR);
            } else {
              this.setEnvMaps(this._envmapHDR, val);
            }
          }
        }, {
          key: "diffuseMap",
          get: function get() {
            var isHDR = legacyCC.director.root.pipeline.pipelineSceneData.isHDR;

            if (isHDR) {
              return this._diffuseMapHDR;
            } else {
              return this._diffuseMapLDR;
            }
          },
          set: function set(val) {
            var isHDR = legacyCC.director.root.pipeline.pipelineSceneData.isHDR;

            if (isHDR) {
              this.setDiffuseMaps(val, this._diffuseMapLDR);
            } else {
              this.setDiffuseMaps(this._diffuseMapHDR, val);
            }
          }
        }, {
          key: "reflectionMap",
          get: function get() {
            var isHDR = legacyCC.director.root.pipeline.pipelineSceneData.isHDR;

            if (isHDR) {
              return this._reflectionHDR;
            } else {
              return this._reflectionLDR;
            }
          }
        }]);

        return Skybox;
      }();
      legacyCC.Skybox = Skybox;

      var _v4 = new Vec4();

      var FogType = Enum({
        LINEAR: 0,
        EXP: 1,
        EXP_SQUARED: 2,
        LAYERED: 3
      });
      var FOG_TYPE_NONE = FogType.LAYERED + 1;
      var Fog = function () {
        function Fog() {
          this._fogColor = new Color('#C8C8C8');
          this._colorArray = new Vec4(0.2, 0.2, 0.2, 1.0);
          this._enabled = false;
          this._accurate = false;
          this._type = 0;
          this._fogDensity = 0.3;
          this._fogStart = 0.5;
          this._fogEnd = 300;
          this._fogAtten = 5;
          this._fogTop = 1.5;
          this._fogRange = 1.2;
          this._activated = false;
        }

        var _proto = Fog.prototype;

        _proto.initialize = function initialize(fogInfo) {
          this._activated = false;
          this.fogColor = fogInfo.fogColor;
          this._enabled = fogInfo.enabled;
          this._type = this.enabled ? fogInfo.type : FOG_TYPE_NONE;
          this._accurate = fogInfo.accurate;
          this.fogDensity = fogInfo.fogDensity;
          this.fogStart = fogInfo.fogStart;
          this.fogEnd = fogInfo.fogEnd;
          this.fogAtten = fogInfo.fogAtten;
          this.fogTop = fogInfo.fogTop;
          this.fogRange = fogInfo.fogRange;
        };

        _proto.activate = function activate() {
          this._updatePipeline();

          this._activated = true;
        };

        _proto._updatePipeline = function _updatePipeline() {
          var root = legacyCC.director.root;
          var value = this.enabled ? this.type : FOG_TYPE_NONE;
          var accurateValue = this.accurate ? 1 : 0;
          var pipeline = root.pipeline;

          if (pipeline.macros.CC_USE_FOG === value && pipeline.macros.CC_USE_ACCURATE_FOG === accurateValue) {
            return;
          }

          pipeline.macros.CC_USE_FOG = value;
          pipeline.macros.CC_USE_ACCURATE_FOG = accurateValue;

          if (this._activated) {
            root.onGlobalPipelineStateChanged();
          }
        };

        _createClass(Fog, [{
          key: "enabled",
          get: function get() {
            return this._enabled;
          },
          set: function set(val) {
            this._enabled = val;

            if (!val) {
              this._type = FOG_TYPE_NONE;

              this._updatePipeline();
            } else {
              this.activate();
            }
          }
        }, {
          key: "accurate",
          get: function get() {
            return this._accurate;
          },
          set: function set(val) {
            this._accurate = val;

            this._updatePipeline();
          }
        }, {
          key: "fogColor",
          get: function get() {
            return this._fogColor;
          },
          set: function set(val) {
            this._fogColor.set(val);

            _v4.set(val.x, val.y, val.z, val.w);

            SRGBToLinear(this._colorArray, _v4);
          }
        }, {
          key: "type",
          get: function get() {
            return this._type;
          },
          set: function set(val) {
            this._type = this.enabled ? val : FOG_TYPE_NONE;
            if (this.enabled) this._updatePipeline();
          }
        }, {
          key: "fogDensity",
          get: function get() {
            return this._fogDensity;
          },
          set: function set(val) {
            this._fogDensity = val;
          }
        }, {
          key: "fogStart",
          get: function get() {
            return this._fogStart;
          },
          set: function set(val) {
            this._fogStart = val;
          }
        }, {
          key: "fogEnd",
          get: function get() {
            return this._fogEnd;
          },
          set: function set(val) {
            this._fogEnd = val;
          }
        }, {
          key: "fogAtten",
          get: function get() {
            return this._fogAtten;
          },
          set: function set(val) {
            this._fogAtten = val;
          }
        }, {
          key: "fogTop",
          get: function get() {
            return this._fogTop;
          },
          set: function set(val) {
            this._fogTop = val;
          }
        }, {
          key: "fogRange",
          get: function get() {
            return this._fogRange;
          },
          set: function set(val) {
            this._fogRange = val;
          }
        }, {
          key: "colorArray",
          get: function get() {
            return this._colorArray;
          }
        }]);

        return Fog;
      }();
      legacyCC.Fog = Fog;

      var Octree = function () {
        function Octree() {
          this._enabled = false;
          this._minPos = new Vec3(0, 0, 0);
          this._maxPos = new Vec3(0, 0, 0);
          this._depth = 0;
        }

        var _proto = Octree.prototype;

        _proto.initialize = function initialize(octreeInfo) {
          this._enabled = octreeInfo.enabled;
          this._minPos = octreeInfo.minPos;
          this._maxPos = octreeInfo.maxPos;
          this._depth = octreeInfo.depth;
        };

        _createClass(Octree, [{
          key: "enabled",
          get: function get() {
            return this._enabled;
          },
          set: function set(val) {
            this._enabled = val;
          }
        }, {
          key: "minPos",
          get: function get() {
            return this._minPos;
          },
          set: function set(val) {
            this._minPos = val;
          }
        }, {
          key: "maxPos",
          get: function get() {
            return this._maxPos;
          },
          set: function set(val) {
            this._maxPos = val;
          }
        }, {
          key: "depth",
          get: function get() {
            return this._depth;
          },
          set: function set(val) {
            this._depth = val;
          }
        }]);

        return Octree;
      }();

      var NodeSpace;

      (function (NodeSpace) {
        NodeSpace[NodeSpace["LOCAL"] = 0] = "LOCAL";
        NodeSpace[NodeSpace["WORLD"] = 1] = "WORLD";
      })(NodeSpace || (NodeSpace = exports('NodeSpace', {})));

      var TransformBit;

      (function (TransformBit) {
        TransformBit[TransformBit["NONE"] = 0] = "NONE";
        TransformBit[TransformBit["POSITION"] = 1] = "POSITION";
        TransformBit[TransformBit["ROTATION"] = 2] = "ROTATION";
        TransformBit[TransformBit["SCALE"] = 4] = "SCALE";
        TransformBit[TransformBit["RS"] = TransformBit.ROTATION | TransformBit.SCALE] = "RS";
        TransformBit[TransformBit["TRS"] = TransformBit.POSITION | TransformBit.ROTATION | TransformBit.SCALE] = "TRS";
        TransformBit[TransformBit["TRS_MASK"] = ~TransformBit.TRS] = "TRS_MASK";
      })(TransformBit || (TransformBit = exports('TransformBit', {})));

      legacyCC.internal.TransformBit = TransformBit;
      var MobilityMode = exports('MobilityMode', Enum({
        Static: 0,
        Stationary: 1,
        Movable: 2
      }));

      function ColorTemperatureToRGB(rgb, kelvin) {
        if (kelvin < 1000.0) {
          kelvin = 1000.0;
        } else if (kelvin > 15000.0) {
          kelvin = 15000.0;
        }

        var kSqr = kelvin * kelvin;
        var u = (0.860117757 + 1.54118254e-4 * kelvin + 1.28641212e-7 * kSqr) / (1.0 + 8.42420235e-4 * kelvin + 7.08145163e-7 * kSqr);
        var v = (0.317398726 + 4.22806245e-5 * kelvin + 4.20481691e-8 * kSqr) / (1.0 - 2.89741816e-5 * kelvin + 1.61456053e-7 * kSqr);
        var d = 2.0 * u - 8.0 * v + 4.0;
        var x = 3.0 * u / d;
        var y = 2.0 * v / d;
        var z = 1.0 - x - y;
        var X = 1.0 / y * x;
        var Z = 1.0 / y * z;
        rgb.x = 3.2404542 * X + -1.5371385 + -0.4985314 * Z;
        rgb.y = -0.9692660 * X + 1.8760108 + 0.0415560 * Z;
        rgb.z = 0.0556434 * X + -0.2040259 + 1.0572252 * Z;
      }
      var LightType;

      (function (LightType) {
        LightType[LightType["DIRECTIONAL"] = 0] = "DIRECTIONAL";
        LightType[LightType["SPHERE"] = 1] = "SPHERE";
        LightType[LightType["SPOT"] = 2] = "SPOT";
        LightType[LightType["UNKNOWN"] = 3] = "UNKNOWN";
      })(LightType || (LightType = {}));

      var nt2lm = function nt2lm(size) {
        return 4 * Math.PI * Math.PI * size * size;
      };
      var Light = function () {
        function Light() {
          this._baked = false;
          this._color = new Vec3(1, 1, 1);
          this._colorTemp = 6550.0;
          this._colorTempRGB = new Vec3(1, 1, 1);
          this._scene = null;
          this._node = null;
          this._name = null;
          this._useColorTemperature = false;
          this._type = LightType.UNKNOWN;
          this._visibility = CAMERA_DEFAULT_MASK;
        }

        var _proto = Light.prototype;

        _proto.initialize = function initialize() {
          this.color = new Vec3(1, 1, 1);
          this.colorTemperature = 6550.0;
        };

        _proto.attachToScene = function attachToScene(scene) {
          this._scene = scene;
        };

        _proto.detachFromScene = function detachFromScene() {
          this._scene = null;
        };

        _proto.destroy = function destroy() {
          this._name = null;
          this._node = null;
        };

        _proto.update = function update() {};

        _createClass(Light, [{
          key: "baked",
          get: function get() {
            return this._baked;
          },
          set: function set(val) {
            this._baked = val;
          }
        }, {
          key: "color",
          get: function get() {
            return this._color;
          },
          set: function set(color) {
            this._color.set(color);
          }
        }, {
          key: "useColorTemperature",
          get: function get() {
            return this._useColorTemperature;
          },
          set: function set(enable) {
            this._useColorTemperature = enable;
          }
        }, {
          key: "colorTemperature",
          get: function get() {
            return this._colorTemp;
          },
          set: function set(val) {
            this._colorTemp = val;
            ColorTemperatureToRGB(this._colorTempRGB, this._colorTemp);
          }
        }, {
          key: "colorTemperatureRGB",
          get: function get() {
            return this._colorTempRGB;
          }
        }, {
          key: "visibility",
          get: function get() {
            return this._visibility;
          },
          set: function set(vis) {
            this._visibility = vis;
          }
        }, {
          key: "node",
          get: function get() {
            return this._node;
          },
          set: function set(n) {
            this._node = n;

            if (this._node) {
              this._node.hasChangedFlags |= TransformBit.ROTATION;
            }
          }
        }, {
          key: "type",
          get: function get() {
            return this._type;
          }
        }, {
          key: "name",
          get: function get() {
            return this._name;
          },
          set: function set(n) {
            this._name = n;
          }
        }, {
          key: "scene",
          get: function get() {
            return this._scene;
          }
        }]);

        return Light;
      }();

      var _forward = new Vec3(0, 0, -1);

      var _v3$1 = new Vec3();

      var DirectionalLight = function (_Light) {
        _inheritsLoose(DirectionalLight, _Light);

        function DirectionalLight() {
          var _this;

          _this = _Light.call(this) || this;
          _this._dir = new Vec3(1.0, -1.0, -1.0);
          _this._illuminanceHDR = Ambient.SUN_ILLUM;
          _this._illuminanceLDR = 1.0;
          _this._shadowEnabled = false;
          _this._shadowPcf = PCFType.HARD;
          _this._shadowBias = 0.00001;
          _this._shadowNormalBias = 0.0;
          _this._shadowSaturation = 1.0;
          _this._shadowDistance = 50;
          _this._shadowInvisibleOcclusionRange = 200;
          _this._csmLevel = CSMLevel.LEVEL_4;
          _this._csmNeedUpdate = false;
          _this._csmLayerLambda = 0.75;
          _this._csmOptimizationMode = CSMOptimizationMode.DisableRotationFix;
          _this._csmLayersTransition = false;
          _this._csmTransitionRange = 0.05;
          _this._shadowFixedArea = false;
          _this._shadowNear = 0.1;
          _this._shadowFar = 10.0;
          _this._shadowOrthoSize = 5;
          _this._type = LightType.DIRECTIONAL;
          return _this;
        }

        var _proto = DirectionalLight.prototype;

        _proto.initialize = function initialize() {
          _Light.prototype.initialize.call(this);

          this.illuminance = Ambient.SUN_ILLUM;
          this.direction = new Vec3(1.0, -1.0, -1.0);
        };

        _proto.update = function update() {
          if (this._node && this._node.hasChangedFlags) {
            this.direction = Vec3.transformQuat(_v3$1, _forward, this._node.worldRotation);
          }
        };

        _proto._activate = function _activate() {
          var root = legacyCC.director.root;
          var pipeline = root.pipeline;

          if (this._shadowEnabled) {
            if (this._shadowFixedArea || !pipeline.pipelineSceneData.csmSupported) {
              pipeline.macros.CC_DIR_LIGHT_SHADOW_TYPE = 1;
            } else if (this.csmLevel > 1 && pipeline.pipelineSceneData.csmSupported) {
              pipeline.macros.CC_DIR_LIGHT_SHADOW_TYPE = 2;
              pipeline.macros.CC_CASCADED_LAYERS_TRANSITION = this._csmLayersTransition;
            } else {
              pipeline.macros.CC_DIR_LIGHT_SHADOW_TYPE = 1;
            }

            pipeline.macros.CC_DIR_SHADOW_PCF_TYPE = this._shadowPcf;
          } else {
            pipeline.macros.CC_DIR_LIGHT_SHADOW_TYPE = 0;
          }

          root.onGlobalPipelineStateChanged();
        };

        _createClass(DirectionalLight, [{
          key: "direction",
          get: function get() {
            return this._dir;
          },
          set: function set(dir) {
            Vec3.normalize(this._dir, dir);
          }
        }, {
          key: "illuminance",
          get: function get() {
            var isHDR = legacyCC.director.root.pipeline.pipelineSceneData.isHDR;

            if (isHDR) {
              return this._illuminanceHDR;
            } else {
              return this._illuminanceLDR;
            }
          },
          set: function set(value) {
            var isHDR = legacyCC.director.root.pipeline.pipelineSceneData.isHDR;

            if (isHDR) {
              this.illuminanceHDR = value;
            } else {
              this.illuminanceLDR = value;
            }
          }
        }, {
          key: "illuminanceHDR",
          get: function get() {
            return this._illuminanceHDR;
          },
          set: function set(value) {
            this._illuminanceHDR = value;
          }
        }, {
          key: "illuminanceLDR",
          get: function get() {
            return this._illuminanceLDR;
          },
          set: function set(value) {
            this._illuminanceLDR = value;
          }
        }, {
          key: "shadowEnabled",
          get: function get() {
            return this._shadowEnabled;
          },
          set: function set(val) {
            this._shadowEnabled = val;

            this._activate();
          }
        }, {
          key: "shadowPcf",
          get: function get() {
            return this._shadowPcf;
          },
          set: function set(val) {
            this._shadowPcf = val;

            this._activate();
          }
        }, {
          key: "shadowBias",
          get: function get() {
            return this._shadowBias;
          },
          set: function set(val) {
            this._shadowBias = val;
          }
        }, {
          key: "shadowNormalBias",
          get: function get() {
            return this._shadowNormalBias;
          },
          set: function set(val) {
            this._shadowNormalBias = val;
          }
        }, {
          key: "shadowSaturation",
          get: function get() {
            return this._shadowSaturation;
          },
          set: function set(val) {
            this._shadowSaturation = val;
          }
        }, {
          key: "shadowDistance",
          get: function get() {
            return this._shadowDistance;
          },
          set: function set(val) {
            this._shadowDistance = Math.min(val, Shadows.MAX_FAR);
          }
        }, {
          key: "shadowInvisibleOcclusionRange",
          get: function get() {
            return this._shadowInvisibleOcclusionRange;
          },
          set: function set(val) {
            this._shadowInvisibleOcclusionRange = Math.min(val, Shadows.MAX_FAR);
          }
        }, {
          key: "csmLevel",
          get: function get() {
            return this._csmLevel;
          },
          set: function set(val) {
            this._csmLevel = val;

            this._activate();
          }
        }, {
          key: "csmNeedUpdate",
          get: function get() {
            return this._csmNeedUpdate;
          },
          set: function set(val) {
            this._csmNeedUpdate = val;
          }
        }, {
          key: "csmLayerLambda",
          get: function get() {
            return this._csmLayerLambda;
          },
          set: function set(val) {
            this._csmLayerLambda = val;
          }
        }, {
          key: "csmOptimizationMode",
          get: function get() {
            return this._csmOptimizationMode;
          },
          set: function set(val) {
            this._csmOptimizationMode = val;
          }
        }, {
          key: "shadowFixedArea",
          get: function get() {
            return this._shadowFixedArea;
          },
          set: function set(val) {
            this._shadowFixedArea = val;

            this._activate();
          }
        }, {
          key: "shadowNear",
          get: function get() {
            return this._shadowNear;
          },
          set: function set(val) {
            this._shadowNear = val;
          }
        }, {
          key: "shadowFar",
          get: function get() {
            return this._shadowFar;
          },
          set: function set(val) {
            this._shadowFar = Math.min(val, Shadows.MAX_FAR);
          }
        }, {
          key: "shadowOrthoSize",
          get: function get() {
            return this._shadowOrthoSize;
          },
          set: function set(val) {
            this._shadowOrthoSize = val;
          }
        }, {
          key: "csmLayersTransition",
          get: function get() {
            return this._csmLayersTransition;
          },
          set: function set(val) {
            this._csmLayersTransition = val;

            this._activate();
          }
        }, {
          key: "csmTransitionRange",
          get: function get() {
            return this._csmTransitionRange;
          },
          set: function set(val) {
            this._csmTransitionRange = val;
          }
        }]);

        return DirectionalLight;
      }(Light);

      var SphereLight = function (_Light) {
        _inheritsLoose(SphereLight, _Light);

        function SphereLight() {
          var _this;

          _this = _Light.call(this) || this;
          _this._needUpdate = false;
          _this._size = 0.15;
          _this._range = 1.0;
          _this._luminanceHDR = 0;
          _this._luminanceLDR = 0;
          _this._pos = void 0;
          _this._aabb = void 0;
          _this._aabb = AABB.create();
          _this._pos = new Vec3();
          _this._type = LightType.SPHERE;
          return _this;
        }

        var _proto = SphereLight.prototype;

        _proto.initialize = function initialize() {
          _Light.prototype.initialize.call(this);

          var size = 0.15;
          this.size = size;
          this.range = 1.0;
          this.luminanceHDR = 1700 / nt2lm(size);
          this.luminanceLDR = 1.0;
        };

        _proto.update = function update() {
          if (this._node && (this._node.hasChangedFlags || this._needUpdate)) {
            this._node.getWorldPosition(this._pos);

            var range = this._range;
            AABB.set(this._aabb, this._pos.x, this._pos.y, this._pos.z, range, range, range);
            this._needUpdate = false;
          }
        };

        _createClass(SphereLight, [{
          key: "position",
          get: function get() {
            return this._pos;
          }
        }, {
          key: "size",
          get: function get() {
            return this._size;
          },
          set: function set(size) {
            this._size = size;
          }
        }, {
          key: "range",
          get: function get() {
            return this._range;
          },
          set: function set(range) {
            this._range = range;
            this._needUpdate = true;
          }
        }, {
          key: "luminance",
          get: function get() {
            var isHDR = legacyCC.director.root.pipeline.pipelineSceneData.isHDR;

            if (isHDR) {
              return this._luminanceHDR;
            } else {
              return this._luminanceLDR;
            }
          },
          set: function set(value) {
            var isHDR = legacyCC.director.root.pipeline.pipelineSceneData.isHDR;

            if (isHDR) {
              this.luminanceHDR = value;
            } else {
              this.luminanceLDR = value;
            }
          }
        }, {
          key: "luminanceHDR",
          get: function get() {
            return this._luminanceHDR;
          },
          set: function set(value) {
            this._luminanceHDR = value;
          }
        }, {
          key: "luminanceLDR",
          set: function set(value) {
            this._luminanceLDR = value;
          }
        }, {
          key: "aabb",
          get: function get() {
            return this._aabb;
          }
        }]);

        return SphereLight;
      }(Light);

      var _forward$1 = new Vec3(0, 0, -1);

      var _qt = new Quat();

      var _matView = new Mat4();

      var _matProj = new Mat4();

      var _matViewProj = new Mat4();

      var _matViewProjInv = new Mat4();

      var SpotLight = function (_Light) {
        _inheritsLoose(SpotLight, _Light);

        function SpotLight() {
          var _this;

          _this = _Light.call(this) || this;
          _this._dir = new Vec3(1.0, -1.0, -1.0);
          _this._range = 5.0;
          _this._spotAngle = Math.cos(Math.PI / 6);
          _this._pos = void 0;
          _this._aabb = void 0;
          _this._frustum = void 0;
          _this._angle = 0;
          _this._needUpdate = false;
          _this._size = 0.15;
          _this._luminanceHDR = 0;
          _this._luminanceLDR = 0;
          _this._shadowEnabled = false;
          _this._shadowPcf = PCFType.HARD;
          _this._shadowBias = 0.00001;
          _this._shadowNormalBias = 0.0;
          _this._aabb = AABB.create();
          _this._frustum = Frustum.create();
          _this._pos = new Vec3();
          _this._type = LightType.SPOT;
          return _this;
        }

        var _proto = SpotLight.prototype;

        _proto.initialize = function initialize() {
          _Light.prototype.initialize.call(this);

          var size = 0.15;
          this.size = size;
          this.luminanceHDR = 1700 / nt2lm(size);
          this.luminanceLDR = 1.0;
          this.range = Math.cos(Math.PI / 6);

          this._dir.set(new Vec3(1.0, -1.0, -1.0));
        };

        _proto.update = function update() {
          if (this._node && (this._node.hasChangedFlags || this._needUpdate)) {
            this._node.getWorldPosition(this._pos);

            Vec3.transformQuat(this._dir, _forward$1, this._node.getWorldRotation(_qt));
            Vec3.normalize(this._dir, this._dir);
            AABB.set(this._aabb, this._pos.x, this._pos.y, this._pos.z, this._range, this._range, this._range);

            this._node.getWorldRT(_matView);

            Mat4.invert(_matView, _matView);
            Mat4.perspective(_matProj, this._angle, 1.0, 0.001, this._range);
            Mat4.multiply(_matViewProj, _matProj, _matView);

            this._frustum.update(_matViewProj, _matViewProjInv);

            this._needUpdate = false;
          }
        };

        _createClass(SpotLight, [{
          key: "position",
          get: function get() {
            return this._pos;
          }
        }, {
          key: "size",
          get: function get() {
            return this._size;
          },
          set: function set(size) {
            this._size = size;
          }
        }, {
          key: "range",
          get: function get() {
            return this._range;
          },
          set: function set(range) {
            this._range = range;
            this._needUpdate = true;
          }
        }, {
          key: "luminance",
          get: function get() {
            var isHDR = legacyCC.director.root.pipeline.pipelineSceneData.isHDR;

            if (isHDR) {
              return this._luminanceHDR;
            } else {
              return this._luminanceLDR;
            }
          },
          set: function set(value) {
            var isHDR = legacyCC.director.root.pipeline.pipelineSceneData.isHDR;

            if (isHDR) {
              this.luminanceHDR = value;
            } else {
              this.luminanceLDR = value;
            }
          }
        }, {
          key: "luminanceHDR",
          get: function get() {
            return this._luminanceHDR;
          },
          set: function set(value) {
            this._luminanceHDR = value;
          }
        }, {
          key: "luminanceLDR",
          get: function get() {
            return this._luminanceLDR;
          },
          set: function set(value) {
            this._luminanceLDR = value;
          }
        }, {
          key: "direction",
          get: function get() {
            return this._dir;
          }
        }, {
          key: "spotAngle",
          get: function get() {
            return this._spotAngle;
          },
          set: function set(val) {
            this._angle = val;
            this._spotAngle = Math.cos(val * 0.5);
            this._needUpdate = true;
          }
        }, {
          key: "angle",
          get: function get() {
            return this._angle;
          }
        }, {
          key: "aabb",
          get: function get() {
            return this._aabb;
          }
        }, {
          key: "frustum",
          get: function get() {
            return this._frustum;
          }
        }, {
          key: "shadowEnabled",
          get: function get() {
            return this._shadowEnabled;
          },
          set: function set(val) {
            this._shadowEnabled = val;
          }
        }, {
          key: "shadowPcf",
          get: function get() {
            return this._shadowPcf;
          },
          set: function set(val) {
            this._shadowPcf = val;
          }
        }, {
          key: "shadowBias",
          get: function get() {
            return this._shadowBias;
          },
          set: function set(val) {
            this._shadowBias = val;
          }
        }, {
          key: "shadowNormalBias",
          get: function get() {
            return this._shadowNormalBias;
          },
          set: function set(val) {
            this._shadowNormalBias = val;
          }
        }]);

        return SpotLight;
      }(Light);

      var _dec$i, _class$i;

      var _colorAttachment = new ColorAttachment();

      _colorAttachment.format = Format.RGBA8;

      var _depthStencilAttachment = new DepthStencilAttachment();

      _depthStencilAttachment.format = Format.DEPTH_STENCIL;
      var passInfo = new RenderPassInfo([_colorAttachment], _depthStencilAttachment);
      var _windowInfo = {
        width: 1,
        height: 1,
        renderPassInfo: passInfo
      };
      var RenderTexture = exports('RenderTexture', (_dec$i = ccclass('cc.RenderTexture'), _dec$i(_class$i = function (_TextureBase) {
        _inheritsLoose(RenderTexture, _TextureBase);

        function RenderTexture() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _TextureBase.call.apply(_TextureBase, [this].concat(args)) || this;
          _this._window = null;
          return _this;
        }

        var _proto = RenderTexture.prototype;

        _proto.initialize = function initialize(info) {
          this._name = info.name || '';
          this._width = info.width;
          this._height = info.height;

          this._initWindow(info);
        };

        _proto.reset = function reset(info) {
          this.initialize(info);
        };

        _proto.destroy = function destroy() {
          if (this._window) {
            var root = legacyCC.director.root;
            root === null || root === void 0 ? void 0 : root.destroyWindow(this._window);
            this._window = null;
          }

          return _TextureBase.prototype.destroy.call(this);
        };

        _proto.resize = function resize(width, height) {
          this._width = Math.floor(clamp(width, 1, 2048));
          this._height = Math.floor(clamp(height, 1, 2048));

          if (this._window) {
            this._window.resize(this._width, this._height);
          }

          this.emit('resize', this._window);
        };

        _proto._serialize = function _serialize(ctxForExporting) {

          return {};
        };

        _proto._deserialize = function _deserialize(serializedData, handle) {
          var data = serializedData;
          this._width = data.w;
          this._height = data.h;
          this._name = data.n;

          _TextureBase.prototype._deserialize.call(this, data.base, handle);
        };

        _proto.getGFXTexture = function getGFXTexture() {
          return this._window && this._window.framebuffer.colorTextures[0];
        };

        _proto.onLoaded = function onLoaded() {
          this._initWindow();
        };

        _proto._initWindow = function _initWindow(info) {
          var root = legacyCC.director.root;
          _windowInfo.title = this._name;
          _windowInfo.width = this._width;
          _windowInfo.height = this._height;
          _windowInfo.renderPassInfo = info && info.passInfo ? info.passInfo : passInfo;
          _colorAttachment.barrier = deviceManager.gfxDevice.getGeneralBarrier(new GeneralBarrierInfo(AccessFlagBit.FRAGMENT_SHADER_READ_TEXTURE, AccessFlagBit.FRAGMENT_SHADER_READ_TEXTURE));

          if (this._window) {
            this._window.destroy();

            this._window.initialize(deviceManager.gfxDevice, _windowInfo);
          } else {
            this._window = root.createWindow(_windowInfo);
          }
        };

        _proto.initDefault = function initDefault(uuid) {
          _TextureBase.prototype.initDefault.call(this, uuid);

          this._width = this._height = 1;

          this._initWindow();
        };

        _proto.validate = function validate() {
          return this.width >= 1 && this.width <= 2048 && this.height >= 1 && this.height <= 2048;
        };

        _proto.readPixels = function readPixels(x, y, width, height, buffer) {
          if (x === void 0) {
            x = 0;
          }

          if (y === void 0) {
            y = 0;
          }

          width = width || this.width;
          height = height || this.height;
          var gfxTexture = this.getGFXTexture();

          if (!gfxTexture) {
            errorID(7606);
            return null;
          }

          var needSize = 4 * width * height;

          if (buffer === undefined) {
            buffer = new Uint8Array(needSize);
          } else if (buffer.length < needSize) {
            errorID(7607, needSize);
            return null;
          }

          var gfxDevice = this._getGFXDevice();

          var bufferViews = [];
          var regions = [];
          var region0 = new BufferTextureCopy();
          region0.texOffset.x = x;
          region0.texOffset.y = y;
          region0.texExtent.width = width;
          region0.texExtent.height = height;
          regions.push(region0);
          bufferViews.push(buffer);
          gfxDevice === null || gfxDevice === void 0 ? void 0 : gfxDevice.copyTextureToBuffers(gfxTexture, bufferViews, regions);
          return buffer;
        };

        _createClass(RenderTexture, [{
          key: "window",
          get: function get() {
            return this._window;
          }
        }]);

        return RenderTexture;
      }(TextureBase)) || _class$i));
      legacyCC.RenderTexture = RenderTexture;

      var ProbeClearFlag;

      (function (ProbeClearFlag) {
        ProbeClearFlag[ProbeClearFlag["SKYBOX"] = SKYBOX_FLAG | ClearFlagBit.DEPTH_STENCIL] = "SKYBOX";
        ProbeClearFlag[ProbeClearFlag["SOLID_COLOR"] = ClearFlagBit.ALL] = "SOLID_COLOR";
      })(ProbeClearFlag || (ProbeClearFlag = {}));

      var ProbeType;

      (function (ProbeType) {
        ProbeType[ProbeType["CUBE"] = 0] = "CUBE";
        ProbeType[ProbeType["PLANAR"] = 1] = "PLANAR";
      })(ProbeType || (ProbeType = {}));

      var cameraDir = [new Vec3(0, -90, 0), new Vec3(0, 90, 0), new Vec3(90, 0, 0), new Vec3(-90, 0, 0), new Vec3(0, 0, 0), new Vec3(0, 180, 0)];
      var ReflectionProbe = function () {
        function ReflectionProbe(id) {
          this.bakedCubeTextures = [];
          this.realtimePlanarTexture = null;
          this._resolution = 512;
          this._clearFlag = ProbeClearFlag.SKYBOX;
          this._backgroundColor = new Color(0, 0, 0, 255);
          this._visibility = CAMERA_DEFAULT_MASK;
          this._probeType = ProbeType.CUBE;
          this._cubemap = null;
          this._size = new Vec3(1, 1, 1);
          this._camera = null;
          this._probeId = 0;
          this._needRefresh = false;
          this._needRender = false;
          this._node = null;
          this._cameraNode = null;
          this._boundingBox = null;
          this._cameraWorldPos = new Vec3();
          this._cameraWorldRotation = new Quat();
          this._forward = new Vec3();
          this._up = new Vec3();
          this._previewSphere = null;
          this._previewPlane = null;
          this._probeId = id;
        }

        var _proto = ReflectionProbe.prototype;

        _proto.initialize = function initialize(node, cameraNode) {
          this._node = node;
          this._cameraNode = cameraNode;
          var pos = this.node.getWorldPosition();
          this._boundingBox = AABB.create(pos.x, pos.y, pos.z, this._size.x, this._size.y, this._size.z);

          this._createCamera(cameraNode);
        };

        _proto.initBakedTextures = function initBakedTextures() {
          if (this.bakedCubeTextures.length === 0) {
            for (var i = 0; i < 6; i++) {
              var renderTexture = this._createTargetTexture(this._resolution, this._resolution);

              this.bakedCubeTextures.push(renderTexture);
            }
          }
        };

        _proto.captureCubemap = function captureCubemap() {
          this.initBakedTextures();

          this._resetCameraParams();

          this._needRender = true;
        };

        _proto.renderPlanarReflection = function renderPlanarReflection(sourceCamera) {
          if (!sourceCamera) return;

          if (!this.realtimePlanarTexture) {
            var canvasSize = legacyCC.view.getDesignResolutionSize();
            this.realtimePlanarTexture = this._createTargetTexture(canvasSize.width, canvasSize.height);
            legacyCC.internal.reflectionProbeManager.updatePlanarMap(this, this.realtimePlanarTexture.getGFXTexture());
          }

          this._syncCameraParams(sourceCamera);

          this._transformReflectionCamera(sourceCamera);

          this._needRender = true;
        };

        _proto.switchProbeType = function switchProbeType(type, sourceCamera) {
          if (type === ProbeType.CUBE) {
            this._needRender = false;
          } else if (sourceCamera !== null) {
            this.renderPlanarReflection(sourceCamera);
          }
        };

        _proto.getProbeId = function getProbeId() {
          return this._probeId;
        };

        _proto.renderArea = function renderArea() {
          if (this._probeType === ProbeType.PLANAR) {
            return new Vec2(this.realtimePlanarTexture.width, this.realtimePlanarTexture.height);
          } else {
            return new Vec2(this.resolution, this.resolution);
          }
        };

        _proto.isFinishedRendering = function isFinishedRendering() {
          return true;
        };

        _proto.validate = function validate() {
          return this.cubemap !== null;
        };

        _proto.destroy = function destroy() {
          if (this._camera) {
            this._camera.destroy();

            this._camera = null;
          }

          for (var i = 0; i < this.bakedCubeTextures.length; i++) {
            this.bakedCubeTextures[i].destroy();
          }

          this.bakedCubeTextures = [];

          if (this.realtimePlanarTexture) {
            this.realtimePlanarTexture.destroy();
            this.realtimePlanarTexture = null;
          }
        };

        _proto.enable = function enable() {};

        _proto.disable = function disable() {};

        _proto.updateCameraDir = function updateCameraDir(faceIdx) {
          this.cameraNode.setRotationFromEuler(cameraDir[faceIdx]);
          this.camera.update(true);
        };

        _proto.updateBoundingBox = function updateBoundingBox() {
          if (this.node) {
            this.node.updateWorldTransform();
            var pos = this.node.getWorldPosition();
            AABB.set(this._boundingBox, pos.x, pos.y, pos.z, this._size.x, this._size.y, this._size.z);
          }
        };

        _proto.hasFrameBuffer = function hasFrameBuffer(framebuffer) {
          if (this.bakedCubeTextures.length === 0) return false;

          for (var i = 0; i < this.bakedCubeTextures.length; i++) {
            var _rt$window;

            var rt = this.bakedCubeTextures[i];

            if (((_rt$window = rt.window) === null || _rt$window === void 0 ? void 0 : _rt$window.framebuffer) === framebuffer) {
              return true;
            }
          }

          return false;
        };

        _proto._syncCameraParams = function _syncCameraParams(camera) {
          this.camera.projectionType = camera.projectionType;
          this.camera.orthoHeight = camera.orthoHeight;
          this.camera.nearClip = camera.nearClip;
          this.camera.farClip = camera.farClip;
          this.camera.fov = camera.fov;
          this.camera.visibility = camera.visibility;
          this.camera.clearFlag = camera.clearFlag;
          this.camera.clearColor = camera.clearColor;
          this.camera.priority = camera.priority - 1;
          this.camera.resize(camera.width, camera.height);
        };

        _proto._createCamera = function _createCamera(cameraNode) {
          var root = legacyCC.director.root;

          if (!this._camera) {
            this._camera = legacyCC.director.root.createCamera();
            if (!this._camera) return null;

            this._camera.initialize({
              name: cameraNode.name,
              node: cameraNode,
              projection: CameraProjection.PERSPECTIVE,
              window:  legacyCC.director.root && legacyCC.director.root.tempWindow,
              priority: 0,
              cameraType: CameraType.DEFAULT,
              trackingType: TrackingType.NO_TRACKING
            });
          }

          this._camera.setViewportInOrientedSpace(new Rect(0, 0, 1, 1));

          this._camera.fovAxis = CameraFOVAxis.VERTICAL;
          this._camera.fov = toRadian(90);
          this._camera.orthoHeight = 10;
          this._camera.nearClip = 1;
          this._camera.farClip = 1000;
          this._camera.clearColor = this._backgroundColor;
          this._camera.clearDepth = 1.0;
          this._camera.clearStencil = 0.0;
          this._camera.clearFlag = this._clearFlag;
          this._camera.visibility = this._visibility;
          this._camera.aperture = CameraAperture.F16_0;
          this._camera.shutter = CameraShutter.D125;
          this._camera.iso = CameraISO.ISO100;
          return this._camera;
        };

        _proto._resetCameraParams = function _resetCameraParams() {
          this.camera.projectionType = CameraProjection.PERSPECTIVE;
          this.camera.orthoHeight = 10;
          this.camera.nearClip = 1;
          this.camera.farClip = 1000;
          this.camera.fov = toRadian(90);
          this.camera.priority = 0;
          this.camera.resize(this.resolution, this.resolution);
          this.camera.visibility = this._visibility;
          this.camera.clearFlag = this._clearFlag;
          this.camera.clearColor = this._backgroundColor;
          this.cameraNode.worldPosition = this.node.worldPosition;
          this.cameraNode.worldRotation = this.node.worldRotation;
          this.camera.update(true);
        };

        _proto._createTargetTexture = function _createTargetTexture(width, height) {
          var rt = new RenderTexture();
          rt.reset({
            width: width,
            height: height
          });
          return rt;
        };

        _proto._transformReflectionCamera = function _transformReflectionCamera(sourceCamera) {
          var offset = Vec3.dot(this.node.worldPosition, Vec3.UP);

          this._reflect(this._cameraWorldPos, sourceCamera.node.worldPosition, Vec3.UP, offset);

          this.cameraNode.worldPosition = this._cameraWorldPos;
          Vec3.transformQuat(this._forward, Vec3.FORWARD, sourceCamera.node.worldRotation);

          this._reflect(this._forward, this._forward, Vec3.UP, 0);

          this._forward.normalize();

          this._forward.negative();

          Vec3.transformQuat(this._up, Vec3.UP, sourceCamera.node.worldRotation);

          this._reflect(this._up, this._up, Vec3.UP, 0);

          this._up.normalize();

          Quat.fromViewUp(this._cameraWorldRotation, this._forward, this._up);
          this.cameraNode.worldRotation = this._cameraWorldRotation;
          this.camera.update(true);
          var viewSpaceProbe = new Vec4(Vec3.UP.x, Vec3.UP.y, Vec3.UP.z, -Vec3.dot(Vec3.UP, this.node.worldPosition));
          viewSpaceProbe.transformMat4(this.camera.matView.clone().invert().transpose());
          this.camera.calculateObliqueMat(viewSpaceProbe);
        };

        _proto._reflect = function _reflect(out, point, normal, offset) {
          var n = Vec3.clone(normal);
          n.normalize();
          var dist = Vec3.dot(n, point) - offset;
          n.multiplyScalar(2.0 * dist);
          Vec3.subtract(out, point, n);
          return out;
        };

        _createClass(ReflectionProbe, [{
          key: "probeType",
          get: function get() {
            return this._probeType;
          },
          set: function set(value) {
            this._probeType = value;
          }
        }, {
          key: "resolution",
          get: function get() {
            return this._resolution;
          },
          set: function set(value) {
            if (value !== this._resolution) {
              this.bakedCubeTextures.forEach(function (rt, idx) {
                rt.resize(value, value);
              });
            }

            this._resolution = value;
          }
        }, {
          key: "clearFlag",
          get: function get() {
            return this._clearFlag;
          },
          set: function set(value) {
            this._clearFlag = value;
            this.camera.clearFlag = this._clearFlag;
          }
        }, {
          key: "backgroundColor",
          get: function get() {
            return this._backgroundColor;
          },
          set: function set(val) {
            this._backgroundColor = val;
            this.camera.clearColor = this._backgroundColor;
          }
        }, {
          key: "visibility",
          get: function get() {
            return this._visibility;
          },
          set: function set(val) {
            this._visibility = val;
            this._camera.visibility = this._visibility;
          }
        }, {
          key: "size",
          get: function get() {
            return this._size;
          },
          set: function set(value) {
            this._size.set(value);

            var pos = this.node.getWorldPosition();
            AABB.set(this._boundingBox, pos.x, pos.y, pos.z, this._size.x, this._size.y, this._size.z);
          }
        }, {
          key: "cubemap",
          get: function get() {
            return this._cubemap;
          },
          set: function set(val) {
            this._cubemap = val;
          }
        }, {
          key: "node",
          get: function get() {
            return this._node;
          }
        }, {
          key: "camera",
          get: function get() {
            return this._camera;
          }
        }, {
          key: "needRefresh",
          get: function get() {
            return this._needRefresh;
          },
          set: function set(value) {
            this._needRefresh = value;
          }
        }, {
          key: "needRender",
          get: function get() {
            return this._needRender;
          },
          set: function set(value) {
            this._needRender = value;
          }
        }, {
          key: "boundingBox",
          get: function get() {
            return this._boundingBox;
          }
        }, {
          key: "cameraNode",
          get: function get() {
            return this._cameraNode;
          },
          set: function set(node) {
            this._cameraNode = node;
          }
        }, {
          key: "previewSphere",
          get: function get() {
            return this._previewSphere;
          },
          set: function set(val) {
            this._previewSphere = val;
          }
        }, {
          key: "previewPlane",
          get: function get() {
            return this._previewPlane;
          },
          set: function set(val) {
            this._previewPlane = val;
          }
        }]);

        return ReflectionProbe;
      }();

      var LODData = function () {
        function LODData() {
          this.screenUsagePercentage = 1.0;
          this._models = [];
        }

        var _proto = LODData.prototype;

        _proto.addModel = function addModel(model) {
          this._models.splice(0, 0, model);
        };

        _proto.eraseModel = function eraseModel(model) {
          var removeIndex = this._models.indexOf(model);

          if (removeIndex >= 0) {
            this._models.splice(removeIndex, 1);
          }
        };

        _proto.clearModels = function clearModels() {
          this._models.length = 0;
        };

        _createClass(LODData, [{
          key: "models",
          get: function get() {
            return this._models;
          }
        }]);

        return LODData;
      }();
      var LODGroup = function () {
        function LODGroup() {
          this.scene = void 0;
          this.node = null;
          this._device = void 0;
          this.enabled = true;
          this._localBoundaryCenter = new Vec3(0, 0, 0);
          this._objectSize = 1;
          this._lodDataArray = [];
          this._lockedLODLevelVec = [];
          this._isLockLevelChanged = false;
          this._device = deviceManager.gfxDevice;
        }

        var _proto2 = LODGroup.prototype;

        _proto2.attachToScene = function attachToScene(scene) {
          this.scene = scene;
        };

        _proto2.detachFromScene = function detachFromScene() {
          this.scene = null;
        };

        _proto2.lockLODLevels = function lockLODLevels(lockLev) {
          if (lockLev.length !== this._lockedLODLevelVec.length) {
            this._isLockLevelChanged = true;
          } else {
            var size = lockLev.length;
            var index = 0;

            for (; index < size; index++) {
              if (lockLev[index] !== this._lockedLODLevelVec[index]) {
                this._isLockLevelChanged = true;
                break;
              }
            }
          }

          this._lockedLODLevelVec = lockLev;
        };

        _proto2.isLockLevelChanged = function isLockLevelChanged() {
          return this._isLockLevelChanged;
        };

        _proto2.resetLockChangeFlag = function resetLockChangeFlag() {
          this._isLockLevelChanged = false;
        };

        _proto2.getLockedLODLevels = function getLockedLODLevels() {
          return this._lockedLODLevelVec;
        };

        _proto2.clearLODs = function clearLODs() {
          this._lodDataArray.length = 0;
        };

        _proto2.insertLOD = function insertLOD(index, lod) {
          this._lodDataArray.splice(index, 0, lod);
        };

        _proto2.updateLOD = function updateLOD(index, lod) {
          this._lodDataArray[index] = lod;
        };

        _proto2.eraseLOD = function eraseLOD(index) {
          this._lodDataArray.splice(index, 1);
        };

        _proto2.getVisibleLODLevel = function getVisibleLODLevel(camera) {
          var screenUsagePercentage = this.getScreenUsagePercentage(camera);
          var lodIndex = -1;

          for (var i = 0; i < this.lodCount; ++i) {
            var lod = this.lodDataArray[i];

            if (screenUsagePercentage >= lod.screenUsagePercentage) {
              lodIndex = i;
              break;
            }
          }

          return lodIndex;
        };

        _proto2.getScreenUsagePercentage = function getScreenUsagePercentage(camera) {
          if (!this.node) return 0;
          var distance;

          if (camera.projectionType === CameraProjection.PERSPECTIVE) {
            distance = Vec3.len(this.localBoundaryCenter.transformMat4(this.node.worldMatrix).subtract(camera.node.worldPosition));
          }

          return this.distanceToScreenUsagePercentage(camera, distance, this.getWorldSpaceSize());
        };

        _proto2.distanceToScreenUsagePercentage = function distanceToScreenUsagePercentage(camera, distance, size) {
          if (camera.projectionType === CameraProjection.PERSPECTIVE) {
            assertIsTrue(typeof distance === 'number', 'distance must be present for perspective projection');
            return size * camera.matProj.m05 / (distance * 2.0);
          } else {
            return size * camera.matProj.m05 * 0.5;
          }
        };

        _proto2.getWorldSpaceSize = function getWorldSpaceSize() {
          var scale = this.node.scale;
          var maxScale = Math.max(Math.abs(scale.x), Math.abs(scale.y), Math.abs(scale.z));
          return maxScale * this.objectSize;
        };

        _createClass(LODGroup, [{
          key: "localBoundaryCenter",
          get: function get() {
            return this._localBoundaryCenter.clone();
          },
          set: function set(val) {
            this._localBoundaryCenter.set(val);
          }
        }, {
          key: "lodCount",
          get: function get() {
            return this._lodDataArray.length;
          }
        }, {
          key: "objectSize",
          get: function get() {
            return this._objectSize;
          },
          set: function set(val) {
            this._objectSize = val;
          }
        }, {
          key: "lodDataArray",
          get: function get() {
            return this._lodDataArray;
          }
        }]);

        return LODGroup;
      }();

      var index$2 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        get CameraFOVAxis () { return CameraFOVAxis; },
        get CameraProjection () { return CameraProjection; },
        get CameraAperture () { return CameraAperture; },
        get CameraISO () { return CameraISO; },
        get CameraShutter () { return CameraShutter; },
        get CameraType () { return CameraType; },
        get TrackingType () { return TrackingType; },
        get CameraUsage () { return CameraUsage; },
        SKYBOX_FLAG: SKYBOX_FLAG,
        Camera: Camera,
        get ModelType () { return ModelType; },
        Model: Model,
        SubModel: SubModel,
        Ambient: Ambient,
        EnvironmentLightingType: EnvironmentLightingType,
        Skybox: Skybox,
        ShadowSize: ShadowSize,
        ShadowType: ShadowType,
        PCFType: PCFType,
        CSMLevel: CSMLevel,
        CSMOptimizationMode: CSMOptimizationMode,
        Shadows: Shadows,
        FogType: FogType,
        Fog: Fog,
        Octree: Octree,
        ColorTemperatureToRGB: ColorTemperatureToRGB,
        get LightType () { return LightType; },
        nt2lm: nt2lm,
        Light: Light,
        DirectionalLight: DirectionalLight,
        SphereLight: SphereLight,
        SpotLight: SpotLight,
        get ProbeClearFlag () { return ProbeClearFlag; },
        get ProbeType () { return ProbeType; },
        ReflectionProbe: ReflectionProbe,
        LODData: LODData,
        LODGroup: LODGroup
      });

      var UpdateFrequency;

      (function (UpdateFrequency) {
        UpdateFrequency[UpdateFrequency["PER_INSTANCE"] = 0] = "PER_INSTANCE";
        UpdateFrequency[UpdateFrequency["PER_BATCH"] = 1] = "PER_BATCH";
        UpdateFrequency[UpdateFrequency["PER_PHASE"] = 2] = "PER_PHASE";
        UpdateFrequency[UpdateFrequency["PER_PASS"] = 3] = "PER_PASS";
        UpdateFrequency[UpdateFrequency["COUNT"] = 4] = "COUNT";
      })(UpdateFrequency || (UpdateFrequency = {}));
      var ParameterType;

      (function (ParameterType) {
        ParameterType[ParameterType["CONSTANTS"] = 0] = "CONSTANTS";
        ParameterType[ParameterType["CBV"] = 1] = "CBV";
        ParameterType[ParameterType["UAV"] = 2] = "UAV";
        ParameterType[ParameterType["SRV"] = 3] = "SRV";
        ParameterType[ParameterType["TABLE"] = 4] = "TABLE";
        ParameterType[ParameterType["SSV"] = 5] = "SSV";
      })(ParameterType || (ParameterType = {}));
      var ResourceResidency;

      (function (ResourceResidency) {
        ResourceResidency[ResourceResidency["MANAGED"] = 0] = "MANAGED";
        ResourceResidency[ResourceResidency["MEMORYLESS"] = 1] = "MEMORYLESS";
        ResourceResidency[ResourceResidency["PERSISTENT"] = 2] = "PERSISTENT";
        ResourceResidency[ResourceResidency["EXTERNAL"] = 3] = "EXTERNAL";
        ResourceResidency[ResourceResidency["BACKBUFFER"] = 4] = "BACKBUFFER";
      })(ResourceResidency || (ResourceResidency = {}));
      var QueueHint;

      (function (QueueHint) {
        QueueHint[QueueHint["NONE"] = 0] = "NONE";
        QueueHint[QueueHint["RENDER_OPAQUE"] = 1] = "RENDER_OPAQUE";
        QueueHint[QueueHint["RENDER_CUTOUT"] = 2] = "RENDER_CUTOUT";
        QueueHint[QueueHint["RENDER_TRANSPARENT"] = 3] = "RENDER_TRANSPARENT";
      })(QueueHint || (QueueHint = {}));
      var ResourceDimension;

      (function (ResourceDimension) {
        ResourceDimension[ResourceDimension["BUFFER"] = 0] = "BUFFER";
        ResourceDimension[ResourceDimension["TEXTURE1D"] = 1] = "TEXTURE1D";
        ResourceDimension[ResourceDimension["TEXTURE2D"] = 2] = "TEXTURE2D";
        ResourceDimension[ResourceDimension["TEXTURE3D"] = 3] = "TEXTURE3D";
      })(ResourceDimension || (ResourceDimension = {}));
      var ResourceFlags;

      (function (ResourceFlags) {
        ResourceFlags[ResourceFlags["NONE"] = 0] = "NONE";
        ResourceFlags[ResourceFlags["UNIFORM"] = 1] = "UNIFORM";
        ResourceFlags[ResourceFlags["INDIRECT"] = 2] = "INDIRECT";
        ResourceFlags[ResourceFlags["STORAGE"] = 4] = "STORAGE";
        ResourceFlags[ResourceFlags["SAMPLED"] = 8] = "SAMPLED";
        ResourceFlags[ResourceFlags["COLOR_ATTACHMENT"] = 16] = "COLOR_ATTACHMENT";
        ResourceFlags[ResourceFlags["DEPTH_STENCIL_ATTACHMENT"] = 32] = "DEPTH_STENCIL_ATTACHMENT";
        ResourceFlags[ResourceFlags["INPUT_ATTACHMENT"] = 64] = "INPUT_ATTACHMENT";
      })(ResourceFlags || (ResourceFlags = {}));

      var TaskType;

      (function (TaskType) {
        TaskType[TaskType["SYNC"] = 0] = "SYNC";
        TaskType[TaskType["ASYNC"] = 1] = "ASYNC";
      })(TaskType || (TaskType = {}));
      var SceneFlags;

      (function (SceneFlags) {
        SceneFlags[SceneFlags["NONE"] = 0] = "NONE";
        SceneFlags[SceneFlags["OPAQUE_OBJECT"] = 1] = "OPAQUE_OBJECT";
        SceneFlags[SceneFlags["CUTOUT_OBJECT"] = 2] = "CUTOUT_OBJECT";
        SceneFlags[SceneFlags["TRANSPARENT_OBJECT"] = 4] = "TRANSPARENT_OBJECT";
        SceneFlags[SceneFlags["SHADOW_CASTER"] = 8] = "SHADOW_CASTER";
        SceneFlags[SceneFlags["UI"] = 16] = "UI";
        SceneFlags[SceneFlags["DEFAULT_LIGHTING"] = 32] = "DEFAULT_LIGHTING";
        SceneFlags[SceneFlags["VOLUMETRIC_LIGHTING"] = 64] = "VOLUMETRIC_LIGHTING";
        SceneFlags[SceneFlags["CLUSTERED_LIGHTING"] = 128] = "CLUSTERED_LIGHTING";
        SceneFlags[SceneFlags["PLANAR_SHADOW"] = 256] = "PLANAR_SHADOW";
        SceneFlags[SceneFlags["GEOMETRY"] = 512] = "GEOMETRY";
        SceneFlags[SceneFlags["PROFILER"] = 1024] = "PROFILER";
        SceneFlags[SceneFlags["DRAW_INSTANCING"] = 2048] = "DRAW_INSTANCING";
        SceneFlags[SceneFlags["DRAW_NON_INSTANCING"] = 4096] = "DRAW_NON_INSTANCING";
        SceneFlags[SceneFlags["REFLECTION_PROBE"] = 8192] = "REFLECTION_PROBE";
        SceneFlags[SceneFlags["ALL"] = 4294967295] = "ALL";
      })(SceneFlags || (SceneFlags = {}));

      var LightingMode;

      (function (LightingMode) {
        LightingMode[LightingMode["NONE"] = 0] = "NONE";
        LightingMode[LightingMode["DEFAULT"] = 1] = "DEFAULT";
        LightingMode[LightingMode["CLUSTERED"] = 2] = "CLUSTERED";
      })(LightingMode || (LightingMode = {}));
      var AttachmentType;

      (function (AttachmentType) {
        AttachmentType[AttachmentType["RENDER_TARGET"] = 0] = "RENDER_TARGET";
        AttachmentType[AttachmentType["DEPTH_STENCIL"] = 1] = "DEPTH_STENCIL";
      })(AttachmentType || (AttachmentType = {}));
      var AccessType;

      (function (AccessType) {
        AccessType[AccessType["READ"] = 0] = "READ";
        AccessType[AccessType["READ_WRITE"] = 1] = "READ_WRITE";
        AccessType[AccessType["WRITE"] = 2] = "WRITE";
      })(AccessType || (AccessType = {}));
      var RasterView = function RasterView(slotName, accessType, attachmentType, loadOp, storeOp, clearFlags, clearColor) {
        if (slotName === void 0) {
          slotName = '';
        }

        if (accessType === void 0) {
          accessType = AccessType.WRITE;
        }

        if (attachmentType === void 0) {
          attachmentType = AttachmentType.RENDER_TARGET;
        }

        if (loadOp === void 0) {
          loadOp = LoadOp.LOAD;
        }

        if (storeOp === void 0) {
          storeOp = StoreOp.STORE;
        }

        if (clearFlags === void 0) {
          clearFlags = ClearFlagBit.ALL;
        }

        if (clearColor === void 0) {
          clearColor = new Color$1();
        }

        this.slotName = void 0;
        this.accessType = void 0;
        this.attachmentType = void 0;
        this.loadOp = void 0;
        this.storeOp = void 0;
        this.clearFlags = void 0;
        this.clearColor = void 0;
        this.slotID = 0;
        this.slotName = slotName;
        this.accessType = accessType;
        this.attachmentType = attachmentType;
        this.loadOp = loadOp;
        this.storeOp = storeOp;
        this.clearFlags = clearFlags;
        this.clearColor = clearColor;
      };
      var ClearValueType;

      (function (ClearValueType) {
        ClearValueType[ClearValueType["FLOAT_TYPE"] = 0] = "FLOAT_TYPE";
        ClearValueType[ClearValueType["INT_TYPE"] = 1] = "INT_TYPE";
      })(ClearValueType || (ClearValueType = {}));
      var ComputeView = function ComputeView(name, accessType, clearFlags, clearColor, clearValueType) {
        if (name === void 0) {
          name = '';
        }

        if (accessType === void 0) {
          accessType = AccessType.READ;
        }

        if (clearFlags === void 0) {
          clearFlags = ClearFlagBit.NONE;
        }

        if (clearColor === void 0) {
          clearColor = new Color$1();
        }

        if (clearValueType === void 0) {
          clearValueType = ClearValueType.FLOAT_TYPE;
        }

        this.name = void 0;
        this.accessType = void 0;
        this.clearFlags = void 0;
        this.clearColor = void 0;
        this.clearValueType = void 0;
        this.name = name;
        this.accessType = accessType;
        this.clearFlags = clearFlags;
        this.clearColor = clearColor;
        this.clearValueType = clearValueType;
      };
      var LightInfo = function LightInfo(light, level) {
        if (light === void 0) {
          light = null;
        }

        if (level === void 0) {
          level = 0;
        }

        this.light = void 0;
        this.level = void 0;
        this.light = light;
        this.level = level;
      };
      var DescriptorTypeOrder;

      (function (DescriptorTypeOrder) {
        DescriptorTypeOrder[DescriptorTypeOrder["UNIFORM_BUFFER"] = 0] = "UNIFORM_BUFFER";
        DescriptorTypeOrder[DescriptorTypeOrder["DYNAMIC_UNIFORM_BUFFER"] = 1] = "DYNAMIC_UNIFORM_BUFFER";
        DescriptorTypeOrder[DescriptorTypeOrder["SAMPLER_TEXTURE"] = 2] = "SAMPLER_TEXTURE";
        DescriptorTypeOrder[DescriptorTypeOrder["SAMPLER"] = 3] = "SAMPLER";
        DescriptorTypeOrder[DescriptorTypeOrder["TEXTURE"] = 4] = "TEXTURE";
        DescriptorTypeOrder[DescriptorTypeOrder["STORAGE_BUFFER"] = 5] = "STORAGE_BUFFER";
        DescriptorTypeOrder[DescriptorTypeOrder["DYNAMIC_STORAGE_BUFFER"] = 6] = "DYNAMIC_STORAGE_BUFFER";
        DescriptorTypeOrder[DescriptorTypeOrder["STORAGE_IMAGE"] = 7] = "STORAGE_IMAGE";
        DescriptorTypeOrder[DescriptorTypeOrder["INPUT_ATTACHMENT"] = 8] = "INPUT_ATTACHMENT";
      })(DescriptorTypeOrder || (DescriptorTypeOrder = {}));

      removeProperty(TextureBase.prototype, 'TextureBase.prototype', [{
        name: 'hasPremultipliedAlpha'
      }, {
        name: 'setPremultiplyAlpha'
      }, {
        name: 'setFlipY'
      }]);
      replaceProperty(RenderTexture.prototype, 'RenderTexture.prototype', [{
        name: 'getGFXWindow',
        customFunction: function customFunction() {
          return this._window;
        }
      }]);

      var _typeMap2;

      var _typeMap = (_typeMap2 = {}, _typeMap2[FormatType.UNORM] = 'Uint', _typeMap2[FormatType.SNORM] = 'Int', _typeMap2[FormatType.UINT] = 'Uint', _typeMap2[FormatType.INT] = 'Int', _typeMap2[FormatType.UFLOAT] = 'Float', _typeMap2[FormatType.FLOAT] = 'Float', _typeMap2["default"] = 'Uint', _typeMap2);

      function _getDataViewType(info) {
        var type = _typeMap[info.type] || _typeMap["default"];
        var bytes = info.size / info.count * 8;
        return "" + type + bytes;
      }

      function writeBuffer(target, data, format, offset, stride) {
        if (format === void 0) {
          format = Format.R32F;
        }

        if (offset === void 0) {
          offset = 0;
        }

        if (stride === void 0) {
          stride = 0;
        }

        var info = FormatInfos[format];

        if (!stride) {
          stride = info.size;
        }

        var writer = "set" + _getDataViewType(info);

        var componentBytesLength = info.size / info.count;
        var nSeg = Math.floor(data.length / info.count);
        var isLittleEndian = sys.isLittleEndian;

        for (var iSeg = 0; iSeg < nSeg; ++iSeg) {
          var x = offset + stride * iSeg;

          for (var iComponent = 0; iComponent < info.count; ++iComponent) {
            var y = x + componentBytesLength * iComponent;
            target[writer](y, data[info.count * iSeg + iComponent], isLittleEndian);
          }
        }
      }
      function mapBuffer(target, callback, format, offset, length, stride, out) {
        if (format === void 0) {
          format = Format.R32F;
        }

        if (offset === void 0) {
          offset = 0;
        }

        if (length === void 0) {
          length = target.byteLength - offset;
        }

        if (stride === void 0) {
          stride = 0;
        }

        if (!out) {
          out = new DataView(target.buffer.slice(target.byteOffset, target.byteOffset + target.byteLength));
        }

        var info = FormatInfos[format];

        if (!stride) {
          stride = info.size;
        }

        var writer = "set" + _getDataViewType(info);

        var reader = "get" + _getDataViewType(info);

        var componentBytesLength = info.size / info.count;
        var nSeg = Math.floor(length / stride);
        var isLittleEndian = sys.isLittleEndian;

        for (var iSeg = 0; iSeg < nSeg; ++iSeg) {
          var x = offset + stride * iSeg;

          for (var iComponent = 0; iComponent < info.count; ++iComponent) {
            var y = x + componentBytesLength * iComponent;

            var _cur = target[reader](y, isLittleEndian);

            out[writer](y, callback(_cur, iComponent, target), isLittleEndian);
          }
        }

        return out;
      }

      var RenderingSubMesh = exports('RenderingSubMesh', function () {
        function RenderingSubMesh(vertexBuffers, attributes, primitiveMode, indexBuffer, indirectBuffer, isOwnerOfIndexBuffer) {
          if (indexBuffer === void 0) {
            indexBuffer = null;
          }

          if (indirectBuffer === void 0) {
            indirectBuffer = null;
          }

          if (isOwnerOfIndexBuffer === void 0) {
            isOwnerOfIndexBuffer = true;
          }

          this.mesh = void 0;
          this.subMeshIdx = void 0;
          this._flatBuffers = [];
          this._jointMappedBuffers = void 0;
          this._jointMappedBufferIndices = void 0;
          this._vertexIdChannel = void 0;
          this._geometricInfo = void 0;
          this._vertexBuffers = void 0;
          this._attributes = void 0;
          this._indexBuffer = null;
          this._indirectBuffer = null;
          this._primitiveMode = void 0;
          this._iaInfo = void 0;
          this._isOwnerOfIndexBuffer = true;
          this._drawInfo = null;
          this._attributes = attributes;
          this._vertexBuffers = vertexBuffers;
          this._indexBuffer = indexBuffer;
          this._indirectBuffer = indirectBuffer;
          this._primitiveMode = primitiveMode;
          this._iaInfo = new InputAssemblerInfo(attributes, vertexBuffers, indexBuffer, indirectBuffer);
          this._isOwnerOfIndexBuffer = isOwnerOfIndexBuffer;
        }

        var _proto = RenderingSubMesh.prototype;

        _proto.invalidateGeometricInfo = function invalidateGeometricInfo() {
          this._geometricInfo = undefined;
        };

        _proto.genFlatBuffers = function genFlatBuffers() {
          if (this._flatBuffers.length || !this.mesh || this.subMeshIdx === undefined) {
            return;
          }

          var mesh = this.mesh;
          var idxCount = 0;
          var prim = mesh.struct.primitives[this.subMeshIdx];

          if (prim.indexView) {
            idxCount = prim.indexView.count;
          }

          for (var i = 0; i < prim.vertexBundelIndices.length; i++) {
            var bundleIdx = prim.vertexBundelIndices[i];
            var vertexBundle = mesh.struct.vertexBundles[bundleIdx];
            var vbCount = prim.indexView ? prim.indexView.count : vertexBundle.view.count;
            var vbStride = vertexBundle.view.stride;
            var vbSize = vbStride * vbCount;
            var view = new Uint8Array(mesh.data.buffer, vertexBundle.view.offset, vertexBundle.view.length);
            var sharedView = new Uint8Array(prim.indexView ? vbSize : vertexBundle.view.length);

            if (!prim.indexView) {
              sharedView.set(mesh.data.subarray(vertexBundle.view.offset, vertexBundle.view.offset + vertexBundle.view.length));

              this._flatBuffers.push({
                stride: vbStride,
                count: vbCount,
                buffer: sharedView
              });

              continue;
            }

            var ibView = mesh.readIndices(this.subMeshIdx);

            for (var n = 0; n < idxCount; ++n) {
              var idx = ibView[n];
              var offset = n * vbStride;
              var srcOffset = idx * vbStride;

              for (var m = 0; m < vbStride; ++m) {
                sharedView[offset + m] = view[srcOffset + m];
              }
            }

            this._flatBuffers.push({
              stride: vbStride,
              count: vbCount,
              buffer: sharedView
            });
          }
        };

        _proto.destroy = function destroy() {
          for (var i = 0; i < this.vertexBuffers.length; i++) {
            this.vertexBuffers[i].destroy();
          }

          this.vertexBuffers.length = 0;

          if (this._indexBuffer) {
            if (this._isOwnerOfIndexBuffer) {
              this._indexBuffer.destroy();
            }

            this._indexBuffer = null;
          }

          if (this._jointMappedBuffers && this._jointMappedBufferIndices) {
            for (var _i = 0; _i < this._jointMappedBufferIndices.length; _i++) {
              this._jointMappedBuffers[this._jointMappedBufferIndices[_i]].destroy();
            }

            this._jointMappedBuffers = undefined;
            this._jointMappedBufferIndices = undefined;
          }

          if (this._indirectBuffer) {
            this._indirectBuffer.destroy();

            this._indirectBuffer = null;
          }
        };

        _proto.enableVertexIdChannel = function enableVertexIdChannel(device) {
          if (this._vertexIdChannel) {
            return;
          }

          var streamIndex = this.vertexBuffers.length;
          var attributeIndex = this.attributes.length;

          var vertexIdBuffer = this._allocVertexIdBuffer(device);

          this._vertexBuffers.push(vertexIdBuffer);

          this._attributes.push(new Attribute('a_vertexId', Format.R32F, false, streamIndex));

          this._iaInfo.attributes = this._attributes;
          this._iaInfo.vertexBuffers = this._vertexBuffers;
          this._vertexIdChannel = {
            stream: streamIndex,
            index: attributeIndex
          };
        };

        _proto._allocVertexIdBuffer = function _allocVertexIdBuffer(device) {
          var vertexCount = this.vertexBuffers.length === 0 || this.vertexBuffers[0].stride === 0 ? 0 : this.vertexBuffers[0].size / this.vertexBuffers[0].stride;
          var vertexIds = new Float32Array(vertexCount);

          for (var iVertex = 0; iVertex < vertexCount; ++iVertex) {
            vertexIds[iVertex] = iVertex + 0.5;
          }

          var vertexIdBuffer = device.createBuffer(new BufferInfo(BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, vertexIds.byteLength, vertexIds.BYTES_PER_ELEMENT));
          vertexIdBuffer.update(vertexIds);
          return vertexIdBuffer;
        };

        _createClass(RenderingSubMesh, [{
          key: "attributes",
          get: function get() {
            return this._attributes;
          }
        }, {
          key: "vertexBuffers",
          get: function get() {
            return this._vertexBuffers;
          }
        }, {
          key: "indexBuffer",
          get: function get() {
            return this._indexBuffer;
          }
        }, {
          key: "indirectBuffer",
          get: function get() {
            return this._indirectBuffer;
          }
        }, {
          key: "primitiveMode",
          get: function get() {
            return this._primitiveMode;
          }
        }, {
          key: "geometricInfo",
          get: function get() {
            if (this._geometricInfo) {
              return this._geometricInfo;
            }

            if (this.mesh === undefined) {
              return {
                positions: new Float32Array(),
                indices: new Uint8Array(),
                boundingBox: {
                  min: Vec3.ZERO,
                  max: Vec3.ZERO
                }
              };
            }

            if (this.subMeshIdx === undefined) {
              return {
                positions: new Float32Array(),
                indices: new Uint8Array(),
                boundingBox: {
                  min: Vec3.ZERO,
                  max: Vec3.ZERO
                }
              };
            }

            var mesh = this.mesh;
            var index = this.subMeshIdx;
            var positions = mesh.readAttribute(index, AttributeName.ATTR_POSITION);
            var indices = mesh.readIndices(index);
            var max = new Vec3();
            var min = new Vec3();
            var pAttri = this.attributes.find(function (element) {
              return element.name === AttributeName.ATTR_POSITION;
            });

            if (pAttri) {
              var conut = FormatInfos[pAttri.format].count;

              if (conut === 2) {
                max.set(positions[0], positions[1], 0);
                min.set(positions[0], positions[1], 0);
              } else {
                max.set(positions[0], positions[1], positions[2]);
                min.set(positions[0], positions[1], positions[2]);
              }

              for (var i = 0; i < positions.length; i += conut) {
                if (conut === 2) {
                  max.x = positions[i] > max.x ? positions[i] : max.x;
                  max.y = positions[i + 1] > max.y ? positions[i + 1] : max.y;
                  min.x = positions[i] < min.x ? positions[i] : min.x;
                  min.y = positions[i + 1] < min.y ? positions[i + 1] : min.y;
                } else {
                  max.x = positions[i] > max.x ? positions[i] : max.x;
                  max.y = positions[i + 1] > max.y ? positions[i + 1] : max.y;
                  max.z = positions[i + 2] > max.z ? positions[i + 2] : max.z;
                  min.x = positions[i] < min.x ? positions[i] : min.x;
                  min.y = positions[i + 1] < min.y ? positions[i + 1] : min.y;
                  min.z = positions[i + 2] < min.z ? positions[i + 2] : min.z;
                }
              }
            }

            this._geometricInfo = {
              positions: positions,
              indices: indices,
              boundingBox: {
                max: max,
                min: min
              }
            };
            return this._geometricInfo;
          }
        }, {
          key: "drawInfo",
          get: function get() {
            return this._drawInfo;
          },
          set: function set(info) {
            this._drawInfo = info;
          }
        }, {
          key: "flatBuffers",
          get: function get() {
            return this._flatBuffers;
          }
        }, {
          key: "jointMappedBuffers",
          get: function get() {
            var _this = this;

            if (this._jointMappedBuffers) {
              return this._jointMappedBuffers;
            }

            var buffers = this._jointMappedBuffers = [];
            var indices = this._jointMappedBufferIndices = [];

            if (!this.mesh || this.subMeshIdx === undefined) {
              return this._jointMappedBuffers = this.vertexBuffers;
            }

            var struct = this.mesh.struct;
            var prim = struct.primitives[this.subMeshIdx];

            if (!struct.jointMaps || prim.jointMapIndex === undefined || !struct.jointMaps[prim.jointMapIndex]) {
              return this._jointMappedBuffers = this.vertexBuffers;
            }

            var jointFormat;
            var jointOffset;
            var device = legacyCC.director.root.device;

            for (var i = 0; i < prim.vertexBundelIndices.length; i++) {
              var bundle = struct.vertexBundles[prim.vertexBundelIndices[i]];
              jointOffset = 0;
              jointFormat = Format.UNKNOWN;

              for (var j = 0; j < bundle.attributes.length; j++) {
                var attr = bundle.attributes[j];

                if (attr.name === AttributeName.ATTR_JOINTS) {
                  jointFormat = attr.format;
                  break;
                }

                jointOffset += FormatInfos[attr.format].size;
              }

              if (jointFormat) {
                (function () {
                  var data = new Uint8Array(_this.mesh.data.buffer, bundle.view.offset, bundle.view.length);
                  var dataView = new DataView(data.slice().buffer);
                  var idxMap = struct.jointMaps[prim.jointMapIndex];
                  mapBuffer(dataView, function (cur) {
                    return idxMap.indexOf(cur);
                  }, jointFormat, jointOffset, bundle.view.length, bundle.view.stride, dataView);
                  var buffer = device.createBuffer(new BufferInfo(BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, bundle.view.length, bundle.view.stride));
                  buffer.update(dataView.buffer);
                  buffers.push(buffer);
                  indices.push(i);
                })();
              } else {
                buffers.push(this.vertexBuffers[prim.vertexBundelIndices[i]]);
              }
            }

            if (this._vertexIdChannel) {
              buffers.push(this._allocVertexIdBuffer(device));
            }

            return buffers;
          }
        }, {
          key: "iaInfo",
          get: function get() {
            return this._iaInfo;
          }
        }]);

        return RenderingSubMesh;
      }());

      var NodeUIProperties = function () {
        function NodeUIProperties(node) {
          this._uiComp = null;
          this._opacity = 1;
          this._localOpacity = 1;
          this.colorDirty = true;
          this._uiTransformComp = null;
          this._node = void 0;
          this._node = node;
        }

        var _proto = NodeUIProperties.prototype;

        _proto.applyOpacity = function applyOpacity(effectOpacity) {
          this._opacity = this._localOpacity * effectOpacity;
        };

        NodeUIProperties.markOpacityTree = function markOpacityTree(node, isDirty) {
        };

        _createClass(NodeUIProperties, [{
          key: "uiTransformComp",
          get: function get() {
            if (!this._uiTransformComp) {
              this._uiTransformComp = this._node.getComponent('cc.UITransform');
            }

            return this._uiTransformComp;
          },
          set: function set(value) {
            this._uiTransformComp = value;
          }
        }, {
          key: "uiComp",
          get: function get() {
            return this._uiComp;
          },
          set: function set(comp) {
            if (this._uiComp && comp) {
              warnID(12002);
              return;
            }

            this._uiComp = comp;
          }
        }, {
          key: "opacity",
          get: function get() {
            return this._opacity;
          }
        }, {
          key: "localOpacity",
          get: function get() {
            return this._localOpacity;
          },
          set: function set(val) {
            this._localOpacity = val;
            this.colorDirty = true;
          }
        }]);

        return NodeUIProperties;
      }();

      var Destroying$1 = CCObject.Flags.Destroying;

      var NodeEventType;

      (function (NodeEventType) {
        NodeEventType["TOUCH_START"] = "touch-start";
        NodeEventType["TOUCH_MOVE"] = "touch-move";
        NodeEventType["TOUCH_END"] = "touch-end";
        NodeEventType["TOUCH_CANCEL"] = "touch-cancel";
        NodeEventType["MOUSE_DOWN"] = "mouse-down";
        NodeEventType["MOUSE_MOVE"] = "mouse-move";
        NodeEventType["MOUSE_UP"] = "mouse-up";
        NodeEventType["MOUSE_WHEEL"] = "mouse-wheel";
        NodeEventType["MOUSE_ENTER"] = "mouse-enter";
        NodeEventType["MOUSE_LEAVE"] = "mouse-leave";
        NodeEventType["KEY_DOWN"] = "keydown";
        NodeEventType["KEY_UP"] = "keyup";
        NodeEventType["DEVICEMOTION"] = "devicemotion";
        NodeEventType["TRANSFORM_CHANGED"] = "transform-changed";
        NodeEventType["MOBILITY_CHANGED"] = "mobility-changed";
        NodeEventType["SCENE_CHANGED_FOR_PERSISTS"] = "scene-changed-for-persists";
        NodeEventType["SIZE_CHANGED"] = "size-changed";
        NodeEventType["ANCHOR_CHANGED"] = "anchor-changed";
        NodeEventType["COLOR_CHANGED"] = "color-changed";
        NodeEventType["CHILD_ADDED"] = "child-added";
        NodeEventType["CHILD_REMOVED"] = "child-removed";
        NodeEventType["PARENT_CHANGED"] = "parent-changed";
        NodeEventType["NODE_DESTROYED"] = "node-destroyed";
        NodeEventType["LAYER_CHANGED"] = "layer-changed";
        NodeEventType["SIBLING_ORDER_CHANGED"] = "sibling-order-changed";
        NodeEventType["ACTIVE_IN_HIERARCHY_CHANGED"] = "active-in-hierarchy-changed";
        NodeEventType["COMPONENT_ADDED"] = "component-added";
        NodeEventType["COMPONENT_REMOVED"] = "component-removed";
        NodeEventType["LIGHT_PROBE_CHANGED"] = "light-probe-changed";
      })(NodeEventType || (NodeEventType = exports('NodeEventType', {})));

      var _dec$j, _dec2$5, _dec3$1, _class$j, _class2$g, _initializer$d, _initializer2$8, _initializer3$8, _initializer4$7, _initializer5$4, _initializer6$1, _initializer7$1, _initializer8$1, _initializer9, _initializer10, _initializer11, _class3$7, _temp$7;
      var Destroying$2 = CCObject.Flags.Destroying;
      var DontDestroy$1 = CCObject.Flags.DontDestroy;
      var Deactivating$1 = CCObject.Flags.Deactivating;
      var TRANSFORM_ON = 1 << 0;
      var idGenerator$3 = new IDGenerator('Node');

      function getConstructor(typeOrClassName) {
        if (!typeOrClassName) {
          errorID(3804);
          return null;
        }

        if (typeof typeOrClassName === 'string') {
          return getClassByName(typeOrClassName);
        }

        return typeOrClassName;
      }

      var v3_a = new Vec3();
      var v3_b = new Vec3();
      var q_a = new Quat();
      var q_b = new Quat();
      var qt_1$1 = new Quat();
      var m3_1$2 = new Mat3();
      var m3_scaling = new Mat3();
      var m4_1$1 = new Mat4();
      var m4_2 = new Mat4();
      var dirtyNodes = [];
      var reserveContentsForAllSyncablePrefabTag = Symbol('ReserveContentsForAllSyncablePrefab');
      var globalFlagChangeVersion = 0;
      var Node$1 = function (v) { return exports({ Node: v, BaseNode: v }), v; }((_dec$j = ccclass('cc.Node'), _dec2$5 = type(Vec3), _dec3$1 = type(MobilityMode), _dec$j(_class$j = (_class2$g = (_temp$7 = _class3$7 = function (_CCObject) {
        _inheritsLoose(Node, _CCObject);

        Node._setScene = function _setScene(node) {
          node._updateScene();
        };

        Node._findComponent = function _findComponent(node, constructor) {
          var cls = constructor;
          var comps = node._components;

          if (cls._sealed) {
            for (var i = 0; i < comps.length; ++i) {
              var comp = comps[i];

              if (comp.constructor === constructor) {
                return comp;
              }
            }
          } else {
            for (var _i = 0; _i < comps.length; ++_i) {
              var _comp = comps[_i];

              if (_comp instanceof constructor) {
                return _comp;
              }
            }
          }

          return null;
        };

        Node._findComponents = function _findComponents(node, constructor, components) {
          var cls = constructor;
          var comps = node._components;

          if (cls._sealed) {
            for (var i = 0; i < comps.length; ++i) {
              var comp = comps[i];

              if (comp.constructor === constructor) {
                components.push(comp);
              }
            }
          } else {
            for (var _i2 = 0; _i2 < comps.length; ++_i2) {
              var _comp2 = comps[_i2];

              if (_comp2 instanceof constructor) {
                components.push(_comp2);
              }
            }
          }
        };

        Node._findChildComponent = function _findChildComponent(children, constructor) {
          for (var i = 0; i < children.length; ++i) {
            var node = children[i];

            var comp = Node._findComponent(node, constructor);

            if (comp) {
              return comp;
            }

            if (node._children.length > 0) {
              comp = Node._findChildComponent(node._children, constructor);

              if (comp) {
                return comp;
              }
            }
          }

          return null;
        };

        Node._findChildComponents = function _findChildComponents(children, constructor, components) {
          for (var i = 0; i < children.length; ++i) {
            var node = children[i];

            Node._findComponents(node, constructor, components);

            if (node._children.length > 0) {
              Node._findChildComponents(node._children, constructor, components);
            }
          }
        };

        var _proto = Node.prototype;

        _proto._updateScene = function _updateScene() {
          if (this._parent == null) {
            error('Node %s(%s) has not attached to a scene.', this.name, this.uuid);
          } else {
            this._scene = this._parent._scene;
          }
        };

        _proto.attr = function attr(attrs) {
          mixin(this, attrs);
        };

        _proto.getParent = function getParent() {
          return this._parent;
        };

        _proto.setParent = function setParent(value, keepWorldTransform) {
          if (keepWorldTransform === void 0) {
            keepWorldTransform = false;
          }

          if (keepWorldTransform) {
            this.updateWorldTransform();
          }

          if (this._parent === value) {
            return;
          }

          var oldParent = this._parent;
          var newParent = value;

          if ( oldParent && oldParent._objFlags & Deactivating$1) {
            errorID(3821);
          }

          this._parent = newParent;
          this._siblingIndex = 0;

          this._onSetParent(oldParent, keepWorldTransform);

          if (this.emit) {
            this.emit(NodeEventType.PARENT_CHANGED, oldParent);
          }

          if (oldParent) {
            if (!(oldParent._objFlags & Destroying$2)) {
              var removeAt = oldParent._children.indexOf(this);

              oldParent._children.splice(removeAt, 1);

              oldParent._updateSiblingIndex();

              if (oldParent.emit) {
                oldParent.emit(NodeEventType.CHILD_REMOVED, this);
              }
            }
          }

          if (newParent) {
            if ( newParent._objFlags & Deactivating$1) {
              errorID(3821);
            }

            newParent._children.push(this);

            this._siblingIndex = newParent._children.length - 1;

            if (newParent.emit) {
              newParent.emit(NodeEventType.CHILD_ADDED, this);
            }
          }

          this._onHierarchyChanged(oldParent);
        };

        _proto.getChildByUuid = function getChildByUuid(uuid) {
          if (!uuid) {
            log('Invalid uuid');
            return null;
          }

          var locChildren = this._children;

          for (var i = 0, len = locChildren.length; i < len; i++) {
            if (locChildren[i]._id === uuid) {
              return locChildren[i];
            }
          }

          return null;
        };

        _proto.getChildByName = function getChildByName(name) {
          if (!name) {
            log('Invalid name');
            return null;
          }

          var locChildren = this._children;

          for (var i = 0, len = locChildren.length; i < len; i++) {
            if (locChildren[i]._name === name) {
              return locChildren[i];
            }
          }

          return null;
        };

        _proto.getChildByPath = function getChildByPath(path) {
          var segments = path.split('/');
          var lastNode = this;

          var _loop = function _loop(i) {
            var segment = segments[i];

            if (segment.length === 0) {
              return "continue";
            }

            var next = lastNode.children.find(function (childNode) {
              return childNode.name === segment;
            });

            if (!next) {
              return {
                v: null
              };
            }

            lastNode = next;
          };

          for (var i = 0; i < segments.length; ++i) {
            var _ret = _loop(i);

            if (_ret === "continue") continue;
            if (typeof _ret === "object") return _ret.v;
          }

          return lastNode;
        };

        _proto.addChild = function addChild(child) {
          child.setParent(this);
        };

        _proto.insertChild = function insertChild(child, siblingIndex) {
          child.setParent(this);
          child.setSiblingIndex(siblingIndex);
        };

        _proto.getSiblingIndex = function getSiblingIndex() {
          return this._siblingIndex;
        };

        _proto.setSiblingIndex = function setSiblingIndex(index) {
          if (!this._parent) {
            return;
          }

          if (this._parent._objFlags & Deactivating$1) {
            errorID(3821);
            return;
          }

          var siblings = this._parent._children;
          index = index !== -1 ? index : siblings.length - 1;
          var oldIndex = siblings.indexOf(this);

          if (index !== oldIndex) {
            siblings.splice(oldIndex, 1);

            if (index < siblings.length) {
              siblings.splice(index, 0, this);
            } else {
              siblings.push(this);
            }

            this._parent._updateSiblingIndex();

            if (this._onSiblingIndexChanged) {
              this._onSiblingIndexChanged(index);
            }
          }
        };

        _proto.walk = function walk(preFunc, postFunc) {
          var index = 1;
          var children = null;
          var curr = null;
          var i = 0;
          var stack = Node._stacks[Node._stackId];

          if (!stack) {
            stack = [];

            Node._stacks.push(stack);
          }

          Node._stackId++;
          stack.length = 0;
          stack[0] = this;
          var parent = null;
          var afterChildren = false;

          while (index) {
            index--;
            curr = stack[index];

            if (!curr) {
              continue;
            }

            if (!afterChildren && preFunc) {
              preFunc(curr);
            } else if (afterChildren && postFunc) {
              postFunc(curr);
            }

            stack[index] = null;

            if (afterChildren) {
              if (parent === this._parent) break;
              afterChildren = false;
            } else {
              if (curr._children.length > 0) {
                parent = curr;
                children = curr._children;
                i = 0;
                stack[index] = children[i];
                index++;
              } else {
                stack[index] = curr;
                index++;
                afterChildren = true;
              }

              continue;
            }

            if (children) {
              i++;

              if (children[i]) {
                stack[index] = children[i];
                index++;
              } else if (parent) {
                stack[index] = parent;
                index++;
                afterChildren = true;

                if (parent._parent) {
                  children = parent._parent._children;
                  i = children.indexOf(parent);
                  parent = parent._parent;
                } else {
                  parent = null;
                  children = null;
                }

                if (i < 0) {
                  break;
                }
              }
            }
          }

          stack.length = 0;
          Node._stackId--;
        };

        _proto.removeFromParent = function removeFromParent() {
          if (this._parent) {
            this._parent.removeChild(this);
          }
        };

        _proto.removeChild = function removeChild(child) {
          if (this._children.indexOf(child) > -1) {
            child.parent = null;
          }
        };

        _proto.removeAllChildren = function removeAllChildren() {
          var children = this._children;

          for (var i = children.length - 1; i >= 0; i--) {
            var node = children[i];

            if (node) {
              node.parent = null;
            }
          }

          this._children.length = 0;
        };

        _proto.isChildOf = function isChildOf(parent) {
          var child = this;

          do {
            if (child === parent) {
              return true;
            }

            child = child._parent;
          } while (child);

          return false;
        };

        _proto.getComponent = function getComponent(typeOrClassName) {
          var constructor = getConstructor(typeOrClassName);

          if (constructor) {
            return Node._findComponent(this, constructor);
          }

          return null;
        };

        _proto.getComponents = function getComponents(typeOrClassName) {
          var constructor = getConstructor(typeOrClassName);
          var components = [];

          if (constructor) {
            Node._findComponents(this, constructor, components);
          }

          return components;
        };

        _proto.getComponentInChildren = function getComponentInChildren(typeOrClassName) {
          var constructor = getConstructor(typeOrClassName);

          if (constructor) {
            return Node._findChildComponent(this._children, constructor);
          }

          return null;
        };

        _proto.getComponentsInChildren = function getComponentsInChildren(typeOrClassName) {
          var constructor = getConstructor(typeOrClassName);
          var components = [];

          if (constructor) {
            Node._findComponents(this, constructor, components);

            Node._findChildComponents(this._children, constructor, components);
          }

          return components;
        };

        _proto.addComponent = function addComponent(typeOrClassName) {

          var constructor;

          if (typeof typeOrClassName === 'string') {
            constructor = getClassByName(typeOrClassName);

            if (!constructor) {
              if (legacyCC._RF.peek()) {
                errorID(3808, typeOrClassName);
              }

              throw TypeError(getError(3807, typeOrClassName));
            }
          } else {
            if (!typeOrClassName) {
              throw TypeError(getError(3804));
            }

            constructor = typeOrClassName;
          }

          if (typeof constructor !== 'function') {
            throw TypeError(getError(3809));
          }

          if (!isChildClassOf(constructor, legacyCC.Component)) {
            throw TypeError(getError(3810));
          }

          var reqComps = constructor._requireComponent;

          if (reqComps) {
            if (Array.isArray(reqComps)) {
              for (var i = 0; i < reqComps.length; i++) {
                var reqComp = reqComps[i];

                if (!this.getComponent(reqComp)) {
                  this.addComponent(reqComp);
                }
              }
            } else {
              var _reqComp = reqComps;

              if (!this.getComponent(_reqComp)) {
                this.addComponent(_reqComp);
              }
            }
          }

          var component = new constructor();
          component.node = this;

          this._components.push(component);

          this.emit(NodeEventType.COMPONENT_ADDED, component);

          if (this._activeInHierarchy) {
            legacyCC.director._nodeActivator.activateComp(component);
          }

          return component;
        };

        _proto.removeComponent = function removeComponent(component) {
          if (!component) {
            errorID(3813);
            return;
          }

          var componentInstance = null;

          if (component instanceof Component) {
            componentInstance = component;
          } else {
            componentInstance = this.getComponent(component);
          }

          if (componentInstance) {
            componentInstance.destroy();
          }
        };

        _proto.on = function on(type, callback, target, useCapture) {
          if (useCapture === void 0) {
            useCapture = false;
          }

          switch (type) {
            case NodeEventType.TRANSFORM_CHANGED:
              this._eventMask |= TRANSFORM_ON;
              break;
          }

          this._eventProcessor.on(type, callback, target, useCapture);
        };

        _proto.off = function off(type, callback, target, useCapture) {
          if (useCapture === void 0) {
            useCapture = false;
          }

          this._eventProcessor.off(type, callback, target, useCapture);

          var hasListeners = this._eventProcessor.hasEventListener(type);

          if (!hasListeners) {
            switch (type) {
              case NodeEventType.TRANSFORM_CHANGED:
                this._eventMask &= ~TRANSFORM_ON;
                break;
            }
          }
        };

        _proto.once = function once(type, callback, target, useCapture) {
          this._eventProcessor.once(type, callback, target, useCapture);
        };

        _proto.emit = function emit(type, arg0, arg1, arg2, arg3, arg4) {
          this._eventProcessor.emit(type, arg0, arg1, arg2, arg3, arg4);
        };

        _proto.dispatchEvent = function dispatchEvent(event) {
          this._eventProcessor.dispatchEvent(event);
        };

        _proto.hasEventListener = function hasEventListener(type, callback, target) {
          return this._eventProcessor.hasEventListener(type, callback, target);
        };

        _proto.targetOff = function targetOff(target) {
          this._eventProcessor.targetOff(target);

          if (this._eventMask & TRANSFORM_ON && !this._eventProcessor.hasEventListener(NodeEventType.TRANSFORM_CHANGED)) {
            this._eventMask &= ~TRANSFORM_ON;
          }
        };

        _proto.destroy = function destroy() {
          if (_CCObject.prototype.destroy.call(this)) {
            this.active = false;
            return true;
          }

          return false;
        };

        _proto.destroyAllChildren = function destroyAllChildren() {
          var children = this._children;

          for (var i = 0; i < children.length; ++i) {
            children[i].destroy();
          }
        };

        _proto._removeComponent = function _removeComponent(component) {
          if (!component) {
            errorID(3814);
            return;
          }

          if (!(this._objFlags & Destroying$2)) {
            var i = this._components.indexOf(component);

            if (i !== -1) {
              this._components.splice(i, 1);

              this.emit(NodeEventType.COMPONENT_REMOVED, component);
            } else if (component.node !== this) {
              errorID(3815);
            }
          }
        };

        _proto._updateSiblingIndex = function _updateSiblingIndex() {
          for (var i = 0; i < this._children.length; ++i) {
            this._children[i]._siblingIndex = i;
          }

          this.emit(NodeEventType.SIBLING_ORDER_CHANGED);
        };

        _proto._instantiate = function _instantiate(cloned, isSyncedNode) {
          if (!cloned) {
            cloned = legacyCC.instantiate._clone(this, this);
          }

          var newPrefabInfo = cloned._prefab;

          cloned._parent = null;

          cloned._onBatchCreated(isSyncedNode);

          return cloned;
        };

        _proto._onHierarchyChangedBase = function _onHierarchyChangedBase(oldParent) {
          var newParent = this._parent;

          if (this._persistNode && !(newParent instanceof legacyCC.Scene)) {
            legacyCC.game.removePersistRootNode(this);
          }

          var shouldActiveNow = this._active && !!(newParent && newParent._activeInHierarchy);

          if (this._activeInHierarchy !== shouldActiveNow) {
            legacyCC.director._nodeActivator.activateNode(this, shouldActiveNow);
          }
        };

        _proto._onPreDestroyBase = function _onPreDestroyBase() {
          this._objFlags |= Destroying$2;
          var parent = this._parent;
          var destroyByParent = !!parent && (parent._objFlags & Destroying$2) !== 0;

          if (!destroyByParent && EDITOR) {
            this._registerIfAttached(false);
          }

          if (this._persistNode) {
            legacyCC.game.removePersistRootNode(this);
          }

          if (!destroyByParent) {
            if (parent) {
              this.emit(NodeEventType.PARENT_CHANGED, this);

              var childIndex = parent._children.indexOf(this);

              parent._children.splice(childIndex, 1);

              this._siblingIndex = 0;

              parent._updateSiblingIndex();

              if (parent.emit) {
                parent.emit(NodeEventType.CHILD_REMOVED, this);
              }
            }
          }

          this.emit(NodeEventType.NODE_DESTROYED, this);

          this._eventProcessor.destroy();

          var children = this._children;

          for (var i = 0; i < children.length; ++i) {
            children[i]._destroyImmediate();
          }

          var comps = this._components;

          for (var _i3 = 0; _i3 < comps.length; ++_i3) {
            comps[_i3]._destroyImmediate();
          }

          return destroyByParent;
        };

        function Node(name) {
          var _this;

          _this = _CCObject.call(this, name) || this;
          _this._parent = _initializer$d && _initializer$d();
          _this._children = _initializer2$8 && _initializer2$8();
          _this._active = _initializer3$8 && _initializer3$8();
          _this._components = _initializer4$7 && _initializer4$7();
          _this._prefab = _initializer5$4 && _initializer5$4();
          _this._scene = null;
          _this._activeInHierarchy = false;
          _this._id = idGenerator$3.getNewId();
          _this._name = void 0;
          _this._eventProcessor = new legacyCC.NodeEventProcessor(_assertThisInitialized(_this));
          _this._eventMask = 0;
          _this._siblingIndex = 0;
          _this._originalSceneId = '';
          _this._uiProps = new NodeUIProperties(_assertThisInitialized(_this));
          _this._static = false;
          _this._lpos = _initializer6$1 && _initializer6$1();
          _this._lrot = _initializer7$1 && _initializer7$1();
          _this._lscale = _initializer8$1 && _initializer8$1();
          _this._mobility = _initializer9 && _initializer9();
          _this._layer = _initializer10 && _initializer10();
          _this._euler = _initializer11 && _initializer11();
          _this._dirtyFlags = TransformBit.NONE;
          _this._eulerDirty = false;
          _this._flagChangeVersion = 0;
          _this._hasChangedFlags = 0;
          _this._name = name !== undefined ? name : 'New Node';
          _this._pos = new Vec3();
          _this._rot = new Quat();
          _this._scale = new Vec3(1, 1, 1);
          _this._mat = new Mat4();
          return _this;
        }

        Node.isNode = function isNode(obj) {
          return obj instanceof Node && (obj.constructor === Node || !(obj instanceof legacyCC.Scene));
        };

        _proto._onPreDestroy = function _onPreDestroy() {
          return this._onPreDestroyBase();
        };

        _proto[serializeTag] = function (serializationOutput, context) {

          {
            serializationOutput.writeThis();
            return;
          }
        };

        _proto._onSetParent = function _onSetParent(oldParent, keepWorldTransform) {
          if (keepWorldTransform === void 0) {
            keepWorldTransform = false;
          }

          if (this._parent) {
            if ((oldParent == null || oldParent._scene !== this._parent._scene) && this._parent._scene != null) {
              this.walk(Node._setScene);
            }
          }

          if (keepWorldTransform) {
            var parent = this._parent;

            if (parent) {
              parent.updateWorldTransform();

              if (approx(Mat4.determinant(parent._mat), 0, EPSILON)) {
                warnID(14300);
                this._dirtyFlags |= TransformBit.TRS;
                this.updateWorldTransform();
              } else {
                Mat4.multiply(m4_1$1, Mat4.invert(m4_1$1, parent._mat), this._mat);
                Mat4.toRTS(m4_1$1, this._lrot, this._lpos, this._lscale);
              }
            } else {
              Vec3.copy(this._lpos, this._pos);
              Quat.copy(this._lrot, this._rot);
              Vec3.copy(this._lscale, this._scale);
            }

            this._eulerDirty = true;
          }

          this.invalidateChildren(TransformBit.TRS);
        };

        _proto._onHierarchyChanged = function _onHierarchyChanged(oldParent) {
          this.eventProcessor.reattach();

          this._onHierarchyChangedBase(oldParent);
        };

        _proto._onBatchCreated = function _onBatchCreated(dontSyncChildPrefab) {
          this.hasChangedFlags = TransformBit.TRS;
          this._dirtyFlags |= TransformBit.TRS;
          var len = this._children.length;

          for (var i = 0; i < len; ++i) {
            this._children[i]._siblingIndex = i;

            this._children[i]._onBatchCreated(dontSyncChildPrefab);
          }
        };

        _proto._onBeforeSerialize = function _onBeforeSerialize() {
          this.eulerAngles;
        };

        _proto._onPostActivated = function _onPostActivated(active) {
          if (active) {
            this._eventProcessor.setEnabled(true);

            this.invalidateChildren(TransformBit.TRS);

            if (this._uiProps && this._uiProps.uiComp) {
              this._uiProps.uiComp.setNodeDirty();

              this._uiProps.uiComp.setTextureDirty();

              this._uiProps.uiComp.markForUpdateRenderData();
            }
          } else {
            this._eventProcessor.setEnabled(false);
          }
        };

        _proto.translate = function translate(trans, ns) {
          var space = ns || NodeSpace.LOCAL;

          if (space === NodeSpace.LOCAL) {
            Vec3.transformQuat(v3_a, trans, this._lrot);
            this._lpos.x += v3_a.x;
            this._lpos.y += v3_a.y;
            this._lpos.z += v3_a.z;
          } else if (space === NodeSpace.WORLD) {
            if (this._parent) {
              Quat.invert(q_a, this._parent.worldRotation);
              Vec3.transformQuat(v3_a, trans, q_a);
              var _scale = this.worldScale;
              this._lpos.x += v3_a.x / _scale.x;
              this._lpos.y += v3_a.y / _scale.y;
              this._lpos.z += v3_a.z / _scale.z;
            } else {
              this._lpos.x += trans.x;
              this._lpos.y += trans.y;
              this._lpos.z += trans.z;
            }
          }

          this.invalidateChildren(TransformBit.POSITION);

          if (this._eventMask & TRANSFORM_ON) {
            this.emit(NodeEventType.TRANSFORM_CHANGED, TransformBit.POSITION);
          }
        };

        _proto.rotate = function rotate(rot, ns) {
          var space = ns || NodeSpace.LOCAL;
          Quat.normalize(q_a, rot);

          if (space === NodeSpace.LOCAL) {
            Quat.multiply(this._lrot, this._lrot, q_a);
          } else if (space === NodeSpace.WORLD) {
            var worldRot = this.worldRotation;
            Quat.multiply(q_b, q_a, worldRot);
            Quat.invert(q_a, worldRot);
            Quat.multiply(q_b, q_a, q_b);
            Quat.multiply(this._lrot, this._lrot, q_b);
          }

          this._eulerDirty = true;
          this.invalidateChildren(TransformBit.ROTATION);

          if (this._eventMask & TRANSFORM_ON) {
            this.emit(NodeEventType.TRANSFORM_CHANGED, TransformBit.ROTATION);
          }
        };

        _proto.lookAt = function lookAt(pos, up) {
          this.getWorldPosition(v3_a);
          Vec3.subtract(v3_a, v3_a, pos);
          Vec3.normalize(v3_a, v3_a);
          Quat.fromViewUp(q_a, v3_a, up);
          this.setWorldRotation(q_a);
        };

        _proto.invalidateChildren = function invalidateChildren(dirtyBit) {
          var i = 0;
          var j = 0;
          var l = 0;
          var cur;
          var children;
          var hasChangedFlags = 0;
          var childDirtyBit = dirtyBit | TransformBit.POSITION;
          dirtyNodes[0] = this;

          while (i >= 0) {
            cur = dirtyNodes[i--];
            hasChangedFlags = cur.hasChangedFlags;

            if (cur.isValid && (cur._dirtyFlags & hasChangedFlags & dirtyBit) !== dirtyBit) {
              cur._dirtyFlags |= dirtyBit;
              cur.hasChangedFlags = hasChangedFlags | dirtyBit;
              children = cur._children;
              l = children.length;

              for (j = 0; j < l; j++) {
                dirtyNodes[++i] = children[j];
              }
            }

            dirtyBit = childDirtyBit;
          }
        };

        _proto.updateWorldTransform = function updateWorldTransform() {
          if (!this._dirtyFlags) {
            return;
          }

          var cur = this;
          var i = 0;

          while (cur && cur._dirtyFlags) {
            dirtyNodes[i++] = cur;
            cur = cur._parent;
          }

          var child;
          var dirtyBits = 0;

          while (i) {
            child = dirtyNodes[--i];
            dirtyBits |= child._dirtyFlags;

            if (cur) {
              if (dirtyBits & TransformBit.POSITION) {
                Vec3.transformMat4(child._pos, child._lpos, cur._mat);
                child._mat.m12 = child._pos.x;
                child._mat.m13 = child._pos.y;
                child._mat.m14 = child._pos.z;
              }

              if (dirtyBits & TransformBit.RS) {
                Mat4.fromRTS(child._mat, child._lrot, child._lpos, child._lscale);
                Mat4.multiply(child._mat, cur._mat, child._mat);
                var rotTmp = dirtyBits & TransformBit.ROTATION ? child._rot : null;
                Mat4.toRTS(child._mat, rotTmp, null, child._scale);
              }
            } else {
              if (dirtyBits & TransformBit.POSITION) {
                Vec3.copy(child._pos, child._lpos);
                child._mat.m12 = child._pos.x;
                child._mat.m13 = child._pos.y;
                child._mat.m14 = child._pos.z;
              }

              if (dirtyBits & TransformBit.RS) {
                if (dirtyBits & TransformBit.ROTATION) {
                  Quat.copy(child._rot, child._lrot);
                }

                if (dirtyBits & TransformBit.SCALE) {
                  Vec3.copy(child._scale, child._lscale);
                  Mat4.fromRTS(child._mat, child._rot, child._pos, child._scale);
                }
              }
            }

            child._dirtyFlags = TransformBit.NONE;
            cur = child;
          }
        };

        _proto.setPosition = function setPosition(val, y, z) {
          if (y === undefined && z === undefined) {
            Vec3.copy(this._lpos, val);
          } else if (z === undefined) {
            Vec3.set(this._lpos, val, y, this._lpos.z);
          } else {
            Vec3.set(this._lpos, val, y, z);
          }

          this.invalidateChildren(TransformBit.POSITION);

          if (this._eventMask & TRANSFORM_ON) {
            this.emit(NodeEventType.TRANSFORM_CHANGED, TransformBit.POSITION);
          }
        };

        _proto.getPosition = function getPosition(out) {
          if (out) {
            return Vec3.set(out, this._lpos.x, this._lpos.y, this._lpos.z);
          }

          return Vec3.copy(new Vec3(), this._lpos);
        };

        _proto.setRotation = function setRotation(val, y, z, w) {
          if (y === undefined || z === undefined || w === undefined) {
            Quat.copy(this._lrot, val);
          } else {
            Quat.set(this._lrot, val, y, z, w);
          }

          this._eulerDirty = true;
          this.invalidateChildren(TransformBit.ROTATION);

          if (this._eventMask & TRANSFORM_ON) {
            this.emit(NodeEventType.TRANSFORM_CHANGED, TransformBit.ROTATION);
          }
        };

        _proto.setRotationFromEuler = function setRotationFromEuler(val, y, zOpt) {
          var z = zOpt === undefined ? this._euler.z : zOpt;

          if (y === undefined) {
            Vec3.copy(this._euler, val);
            Quat.fromEuler(this._lrot, val.x, val.y, val.z);
          } else {
            Vec3.set(this._euler, val, y, z);
            Quat.fromEuler(this._lrot, val, y, z);
          }

          this._eulerDirty = false;
          this.invalidateChildren(TransformBit.ROTATION);

          if (this._eventMask & TRANSFORM_ON) {
            this.emit(NodeEventType.TRANSFORM_CHANGED, TransformBit.ROTATION);
          }
        };

        _proto.getRotation = function getRotation(out) {
          if (out) {
            return Quat.set(out, this._lrot.x, this._lrot.y, this._lrot.z, this._lrot.w);
          }

          return Quat.copy(new Quat(), this._lrot);
        };

        _proto.setScale = function setScale(val, y, z) {
          if (y === undefined && z === undefined) {
            Vec3.copy(this._lscale, val);
          } else if (z === undefined) {
            Vec3.set(this._lscale, val, y, this._lscale.z);
          } else {
            Vec3.set(this._lscale, val, y, z);
          }

          this.invalidateChildren(TransformBit.SCALE);

          if (this._eventMask & TRANSFORM_ON) {
            this.emit(NodeEventType.TRANSFORM_CHANGED, TransformBit.SCALE);
          }
        };

        _proto.getScale = function getScale(out) {
          if (out) {
            return Vec3.set(out, this._lscale.x, this._lscale.y, this._lscale.z);
          }

          return Vec3.copy(new Vec3(), this._lscale);
        };

        _proto.inverseTransformPoint = function inverseTransformPoint(out, p) {
          Vec3.copy(out, p);
          var cur = this;
          var i = 0;

          while (cur._parent) {
            dirtyNodes[i++] = cur;
            cur = cur._parent;
          }

          while (i >= 0) {
            Vec3.transformInverseRTS(out, out, cur._lrot, cur._lpos, cur._lscale);
            cur = dirtyNodes[--i];
          }

          return out;
        };

        _proto.setWorldPosition = function setWorldPosition(val, y, z) {
          if (y === undefined || z === undefined) {
            Vec3.copy(this._pos, val);
          } else {
            Vec3.set(this._pos, val, y, z);
          }

          var parent = this._parent;
          var local = this._lpos;

          if (parent) {
            parent.updateWorldTransform();
            Vec3.transformMat4(local, this._pos, Mat4.invert(m4_1$1, parent._mat));
          } else {
            Vec3.copy(local, this._pos);
          }

          this.invalidateChildren(TransformBit.POSITION);

          if (this._eventMask & TRANSFORM_ON) {
            this.emit(NodeEventType.TRANSFORM_CHANGED, TransformBit.POSITION);
          }
        };

        _proto.getWorldPosition = function getWorldPosition(out) {
          this.updateWorldTransform();

          if (out) {
            return Vec3.copy(out, this._pos);
          }

          return Vec3.copy(new Vec3(), this._pos);
        };

        _proto.setWorldRotation = function setWorldRotation(val, y, z, w) {
          if (y === undefined || z === undefined || w === undefined) {
            Quat.copy(this._rot, val);
          } else {
            Quat.set(this._rot, val, y, z, w);
          }

          if (this._parent) {
            this._parent.updateWorldTransform();

            Quat.multiply(this._lrot, Quat.conjugate(this._lrot, this._parent._rot), this._rot);
          } else {
            Quat.copy(this._lrot, this._rot);
          }

          this._eulerDirty = true;
          this.invalidateChildren(TransformBit.ROTATION);

          if (this._eventMask & TRANSFORM_ON) {
            this.emit(NodeEventType.TRANSFORM_CHANGED, TransformBit.ROTATION);
          }
        };

        _proto.setWorldRotationFromEuler = function setWorldRotationFromEuler(x, y, z) {
          Quat.fromEuler(this._rot, x, y, z);

          if (this._parent) {
            this._parent.updateWorldTransform();

            Quat.multiply(this._lrot, Quat.conjugate(this._lrot, this._parent._rot), this._rot);
          } else {
            Quat.copy(this._lrot, this._rot);
          }

          this._eulerDirty = true;
          this.invalidateChildren(TransformBit.ROTATION);

          if (this._eventMask & TRANSFORM_ON) {
            this.emit(NodeEventType.TRANSFORM_CHANGED, TransformBit.ROTATION);
          }
        };

        _proto.getWorldRotation = function getWorldRotation(out) {
          this.updateWorldTransform();

          if (out) {
            return Quat.copy(out, this._rot);
          }

          return Quat.copy(new Quat(), this._rot);
        };

        _proto.setWorldScale = function setWorldScale(val, y, z) {
          var parent = this._parent;

          if (parent) {
            this.updateWorldTransform();
          }

          if (y === undefined || z === undefined) {
            Vec3.copy(this._scale, val);
          } else {
            Vec3.set(this._scale, val, y, z);
          }

          if (parent) {
            v3_a.x = this._scale.x / Vec3.set(v3_b, this._mat.m00, this._mat.m01, this._mat.m02).length();
            v3_a.y = this._scale.y / Vec3.set(v3_b, this._mat.m04, this._mat.m05, this._mat.m06).length();
            v3_a.z = this._scale.z / Vec3.set(v3_b, this._mat.m08, this._mat.m09, this._mat.m10).length();
            Mat4.scale(m4_1$1, this._mat, v3_a);
            Mat4.multiply(m4_2, Mat4.invert(m4_2, parent._mat), m4_1$1);
            Mat3.fromQuat(m3_1$2, Quat.conjugate(qt_1$1, this._lrot));
            Mat3.multiplyMat4(m3_1$2, m3_1$2, m4_2);
            this._lscale.x = Vec3.set(v3_a, m3_1$2.m00, m3_1$2.m01, m3_1$2.m02).length();
            this._lscale.y = Vec3.set(v3_a, m3_1$2.m03, m3_1$2.m04, m3_1$2.m05).length();
            this._lscale.z = Vec3.set(v3_a, m3_1$2.m06, m3_1$2.m07, m3_1$2.m08).length();
          } else {
            Vec3.copy(this._lscale, this._scale);
          }

          this.invalidateChildren(TransformBit.SCALE);

          if (this._eventMask & TRANSFORM_ON) {
            this.emit(NodeEventType.TRANSFORM_CHANGED, TransformBit.SCALE);
          }
        };

        _proto.getWorldScale = function getWorldScale(out) {
          this.updateWorldTransform();

          if (out) {
            return Vec3.copy(out, this._scale);
          }

          return Vec3.copy(new Vec3(), this._scale);
        };

        _proto.getWorldMatrix = function getWorldMatrix(out) {
          this.updateWorldTransform();
          var target = out || new Mat4();
          return Mat4.copy(target, this._mat);
        };

        _proto.getWorldRS = function getWorldRS(out) {
          this.updateWorldTransform();
          var target = out || new Mat4();
          Mat4.copy(target, this._mat);
          target.m12 = 0;
          target.m13 = 0;
          target.m14 = 0;
          return target;
        };

        _proto.getWorldRT = function getWorldRT(out) {
          this.updateWorldTransform();
          var target = out || new Mat4();
          return Mat4.fromRT(target, this._rot, this._pos);
        };

        _proto.setRTS = function setRTS(rot, pos, scale) {
          var dirtyBit = 0;

          if (rot) {
            dirtyBit |= TransformBit.ROTATION;

            if (rot.w !== undefined) {
              Quat.copy(this._lrot, rot);
              this._eulerDirty = true;
            } else {
              Vec3.copy(this._euler, rot);
              Quat.fromEuler(this._lrot, rot.x, rot.y, rot.z);
              this._eulerDirty = false;
            }
          }

          if (pos) {
            Vec3.copy(this._lpos, pos);
            dirtyBit |= TransformBit.POSITION;
          }

          if (scale) {
            Vec3.copy(this._lscale, scale);
            dirtyBit |= TransformBit.SCALE;
          }

          if (dirtyBit) {
            this.invalidateChildren(dirtyBit);

            if (this._eventMask & TRANSFORM_ON) {
              this.emit(NodeEventType.TRANSFORM_CHANGED, dirtyBit);
            }
          }
        };

        _proto.pauseSystemEvents = function pauseSystemEvents(recursive) {
          this._eventProcessor.setEnabled(false, recursive);
        };

        _proto.resumeSystemEvents = function resumeSystemEvents(recursive) {
          this._eventProcessor.setEnabled(true, recursive);
        };

        Node.resetHasChangedFlags = function resetHasChangedFlags() {
          globalFlagChangeVersion += 1;
        };

        Node.clearNodeArray = function clearNodeArray() {
          if (Node.ClearFrame < Node.ClearRound && !EDITOR) {
            Node.ClearFrame++;
          } else {
            Node.ClearFrame = 0;
            dirtyNodes.length = 0;
          }
        };

        _proto.getPathInHierarchy = function getPathInHierarchy() {
          var result = this.name;
          var curNode = this.parent;

          while (curNode && !(curNode instanceof legacyCC.Scene)) {
            result = curNode.name + "/" + result;
            curNode = curNode.parent;
          }

          return result;
        };

        _createClass(Node, [{
          key: "components",
          get: function get() {
            return this._components;
          }
        }, {
          key: "_persistNode",
          get: function get() {
            return (this._objFlags & DontDestroy$1) > 0;
          },
          set: function set(value) {
            if (value) {
              this._objFlags |= DontDestroy$1;
            } else {
              this._objFlags &= ~DontDestroy$1;
            }
          }
        }, {
          key: "name",
          get: function get() {
            return this._name;
          },
          set: function set(value) {

            this._name = value;
          }
        }, {
          key: "uuid",
          get: function get() {
            return this._id;
          }
        }, {
          key: "children",
          get: function get() {
            return this._children;
          }
        }, {
          key: "active",
          get: function get() {
            return this._active;
          },
          set: function set(isActive) {
            isActive = !!isActive;

            if (this._active !== isActive) {
              this._active = isActive;
              var parent = this._parent;

              if (parent) {
                var couldActiveInScene = parent._activeInHierarchy;

                if (couldActiveInScene) {
                  legacyCC.director._nodeActivator.activateNode(this, isActive);
                }
              }
            }
          }
        }, {
          key: "activeInHierarchy",
          get: function get() {
            return this._activeInHierarchy;
          }
        }, {
          key: "parent",
          get: function get() {
            return this._parent;
          },
          set: function set(value) {
            this.setParent(value);
          }
        }, {
          key: "scene",
          get: function get() {
            return this._scene;
          }
        }, {
          key: "eventProcessor",
          get: function get() {
            return this._eventProcessor;
          }
        }, {
          key: "position",
          get: function get() {
            return this._lpos;
          },
          set: function set(val) {
            this.setPosition(val);
          }
        }, {
          key: "worldPosition",
          get: function get() {
            this.updateWorldTransform();
            return this._pos;
          },
          set: function set(val) {
            this.setWorldPosition(val);
          }
        }, {
          key: "rotation",
          get: function get() {
            return this._lrot;
          },
          set: function set(val) {
            this.setRotation(val);
          }
        }, {
          key: "eulerAngles",
          get: function get() {
            if (this._eulerDirty) {
              Quat.toEuler(this._euler, this._lrot);
              this._eulerDirty = false;
            }

            return this._euler;
          },
          set: function set(val) {
            this.setRotationFromEuler(val.x, val.y, val.z);
          }
        }, {
          key: "angle",
          get: function get() {
            return this._euler.z;
          },
          set: function set(val) {
            Vec3.set(this._euler, 0, 0, val);
            Quat.fromAngleZ(this._lrot, val);
            this._eulerDirty = false;
            this.invalidateChildren(TransformBit.ROTATION);

            if (this._eventMask & TRANSFORM_ON) {
              this.emit(NodeEventType.TRANSFORM_CHANGED, TransformBit.ROTATION);
            }
          }
        }, {
          key: "worldRotation",
          get: function get() {
            this.updateWorldTransform();
            return this._rot;
          },
          set: function set(val) {
            this.setWorldRotation(val);
          }
        }, {
          key: "scale",
          get: function get() {
            return this._lscale;
          },
          set: function set(val) {
            this.setScale(val);
          }
        }, {
          key: "worldScale",
          get: function get() {
            this.updateWorldTransform();
            return this._scale;
          },
          set: function set(val) {
            this.setWorldScale(val);
          }
        }, {
          key: "matrix",
          set: function set(val) {
            Mat4.toRTS(val, this._lrot, this._lpos, this._lscale);
            this.invalidateChildren(TransformBit.TRS);
            this._eulerDirty = true;

            if (this._eventMask & TRANSFORM_ON) {
              this.emit(NodeEventType.TRANSFORM_CHANGED, TransformBit.TRS);
            }
          }
        }, {
          key: "worldMatrix",
          get: function get() {
            this.updateWorldTransform();
            return this._mat;
          }
        }, {
          key: "forward",
          get: function get() {
            return Vec3.transformQuat(new Vec3(), Vec3.FORWARD, this.worldRotation);
          },
          set: function set(dir) {
            var len = dir.length();
            Vec3.multiplyScalar(v3_a, dir, -1 / len);
            Quat.fromViewUp(q_a, v3_a);
            this.setWorldRotation(q_a);
          }
        }, {
          key: "up",
          get: function get() {
            return Vec3.transformQuat(new Vec3(), Vec3.UP, this.worldRotation);
          }
        }, {
          key: "right",
          get: function get() {
            return Vec3.transformQuat(new Vec3(), Vec3.RIGHT, this.worldRotation);
          }
        }, {
          key: "mobility",
          get: function get() {
            return this._mobility;
          },
          set: function set(m) {
            this._mobility = m;
            this.emit(NodeEventType.MOBILITY_CHANGED);
          }
        }, {
          key: "layer",
          get: function get() {
            return this._layer;
          },
          set: function set(l) {
            this._layer = l;

            if (this._uiProps && this._uiProps.uiComp) {
              this._uiProps.uiComp.setNodeDirty();

              this._uiProps.uiComp.markForUpdateRenderData();
            }

            this.emit(NodeEventType.LAYER_CHANGED, this._layer);
          }
        }, {
          key: "hasChangedFlags",
          get: function get() {
            return this._flagChangeVersion === globalFlagChangeVersion ? this._hasChangedFlags : 0;
          },
          set: function set(val) {
            this._flagChangeVersion = globalFlagChangeVersion;
            this._hasChangedFlags = val;
          }
        }]);

        return Node;
      }(CCObject), _class3$7.idGenerator = idGenerator$3, _class3$7._stacks = [[]], _class3$7._stackId = 0, _class3$7.EventType = NodeEventType, _class3$7.NodeSpace = NodeSpace, _class3$7.TransformDirtyBit = TransformBit, _class3$7.TransformBit = TransformBit, _class3$7.reserveContentsForAllSyncablePrefabTag = reserveContentsForAllSyncablePrefabTag, _class3$7.ClearFrame = 0, _class3$7.ClearRound = 1000, _temp$7), (_applyDecoratedDescriptor(_class2$g.prototype, "_persistNode", [property], Object.getOwnPropertyDescriptor(_class2$g.prototype, "_persistNode"), _class2$g.prototype), _initializer$d = applyDecoratedInitializer(_class2$g.prototype, "_parent", [serializable], function () {
        return null;
      }), _initializer2$8 = applyDecoratedInitializer(_class2$g.prototype, "_children", [serializable], function () {
        return [];
      }), _initializer3$8 = applyDecoratedInitializer(_class2$g.prototype, "_active", [serializable], function () {
        return true;
      }), _initializer4$7 = applyDecoratedInitializer(_class2$g.prototype, "_components", [serializable], function () {
        return [];
      }), _initializer5$4 = applyDecoratedInitializer(_class2$g.prototype, "_prefab", [serializable], function () {
        return null;
      }), _initializer6$1 = applyDecoratedInitializer(_class2$g.prototype, "_lpos", [serializable], function () {
        return new Vec3();
      }), _initializer7$1 = applyDecoratedInitializer(_class2$g.prototype, "_lrot", [serializable], function () {
        return new Quat();
      }), _initializer8$1 = applyDecoratedInitializer(_class2$g.prototype, "_lscale", [serializable], function () {
        return new Vec3(1, 1, 1);
      }), _initializer9 = applyDecoratedInitializer(_class2$g.prototype, "_mobility", [serializable], function () {
        return MobilityMode.Static;
      }), _initializer10 = applyDecoratedInitializer(_class2$g.prototype, "_layer", [serializable], function () {
        return Layers.Enum.DEFAULT;
      }), _initializer11 = applyDecoratedInitializer(_class2$g.prototype, "_euler", [serializable], function () {
        return new Vec3();
      }), _applyDecoratedDescriptor(_class2$g.prototype, "eulerAngles", [_dec2$5], Object.getOwnPropertyDescriptor(_class2$g.prototype, "eulerAngles"), _class2$g.prototype), _applyDecoratedDescriptor(_class2$g.prototype, "mobility", [_dec3$1], Object.getOwnPropertyDescriptor(_class2$g.prototype, "mobility"), _class2$g.prototype)), _class2$g)) || _class$j));
      legacyCC.Node = Node$1;

      var _dec$k, _dec2$6, _dec3$2, _dec4, _dec5, _class$k, _class2$h, _initializer$e, _initializer2$9, _initializer3$9, _initializer4$8, _initializer5$5, _initializer6$2, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _class4$1, _class5$1, _initializer7$2, _initializer8$2, _initializer9$1, _initializer10$1, _initializer11$1, _initializer12, _initializer13, _initializer14, _initializer15, _initializer16, _initializer17, _dec21, _dec22, _dec23, _dec24, _dec25, _dec26, _dec27, _dec28, _class7, _class8, _initializer18, _initializer19, _initializer20, _initializer21, _initializer22, _initializer23, _initializer24, _initializer25, _initializer26, _initializer27, _class9, _temp$8, _dec29, _dec30, _dec31, _dec32, _dec33, _class10, _class11, _initializer28, _initializer29, _initializer30, _initializer31, _initializer32, _initializer33, _initializer34, _dec34, _dec35, _class13, _class14, _initializer35, _initializer36, _initializer37, _initializer38, _dec36, _dec37, _dec38, _dec39, _dec40, _class16, _class17, _initializer39, _initializer40, _initializer41, _initializer42, _initializer43, _initializer44, _initializer45, _initializer46, _dec41, _dec42, _class19, _class20, _initializer47, _initializer48, _initializer49, _initializer50, _initializer51, _initializer52, _initializer53;

      var _up = new Vec3(0, 1, 0);

      var _v3$2 = new Vec3();

      var _v4$1 = new Vec4();

      var _col = new Color();

      var _qt$1 = new Quat();

      var normalizeHDRColor = function normalizeHDRColor(color) {
        var intensity = 1.0 / Math.max(Math.max(Math.max(color.x, color.y), color.z), 0.0001);

        if (intensity < 1.0) {
          color.x *= intensity;
          color.y *= intensity;
          color.z *= intensity;
        }
      };

      var AmbientInfo = exports('AmbientInfo', (_dec$k = ccclass('cc.AmbientInfo'), _dec2$6 = type(CCFloat), _dec3$2 = formerlySerializedAs('_skyColor'), _dec4 = formerlySerializedAs('_skyIllum'), _dec5 = formerlySerializedAs('_groundAlbedo'), _dec$k(_class$k = (_class2$h = function () {
        function AmbientInfo() {
          this._skyColorHDR = _initializer$e && _initializer$e();
          this._skyIllumHDR = _initializer2$9 && _initializer2$9();
          this._groundAlbedoHDR = _initializer3$9 && _initializer3$9();
          this._skyColorLDR = _initializer4$8 && _initializer4$8();
          this._skyIllumLDR = _initializer5$5 && _initializer5$5();
          this._groundAlbedoLDR = _initializer6$2 && _initializer6$2();
          this._resource = null;
        }

        var _proto = AmbientInfo.prototype;

        _proto.activate = function activate(resource) {
          this._resource = resource;

          this._resource.initialize(this);
        };

        _createClass(AmbientInfo, [{
          key: "skyColorHDR",
          get: function get() {
            return this._skyColorHDR;
          }
        }, {
          key: "groundAlbedoHDR",
          get: function get() {
            return this._groundAlbedoHDR;
          }
        }, {
          key: "skyIllumHDR",
          get: function get() {
            return this._skyIllumHDR;
          }
        }, {
          key: "skyColorLDR",
          get: function get() {
            return this._skyColorLDR;
          }
        }, {
          key: "groundAlbedoLDR",
          get: function get() {
            return this._groundAlbedoLDR;
          }
        }, {
          key: "skyIllumLDR",
          get: function get() {
            return this._skyIllumLDR;
          }
        }, {
          key: "skyLightingColor",
          get: function get() {
            var isHDR = legacyCC.director.root.pipeline.pipelineSceneData.isHDR;

            _v4$1.set(isHDR ? this._skyColorHDR : this._skyColorLDR);

            normalizeHDRColor(_v4$1);
            return _col.set(_v4$1.x * 255, _v4$1.y * 255, _v4$1.z * 255, 255);
          },
          set: function set(val) {
            _v4$1.set(val.x, val.y, val.z, val.w);

            if (legacyCC.director.root.pipeline.pipelineSceneData.isHDR) {
              this._skyColorHDR.set(_v4$1);
            } else {
              this._skyColorLDR.set(_v4$1);
            }

            if (this._resource) {
              this._resource.skyColor.set(_v4$1);
            }
          }
        }, {
          key: "skyColor",
          set: function set(val) {
            if (legacyCC.director.root.pipeline.pipelineSceneData.isHDR) {
              this._skyColorHDR.set(val);
            } else {
              this._skyColorLDR.set(val);
            }

            if (this._resource) {
              this._resource.skyColor.set(val);
            }
          }
        }, {
          key: "skyIllum",
          get: function get() {
            if (legacyCC.director.root.pipeline.pipelineSceneData.isHDR) {
              return this._skyIllumHDR;
            } else {
              return this._skyIllumLDR;
            }
          },
          set: function set(val) {
            if (legacyCC.director.root.pipeline.pipelineSceneData.isHDR) {
              this._skyIllumHDR = val;
            } else {
              this._skyIllumLDR = val;
            }

            if (this._resource) {
              this._resource.skyIllum = val;
            }
          }
        }, {
          key: "groundLightingColor",
          get: function get() {
            var isHDR = legacyCC.director.root.pipeline.pipelineSceneData.isHDR;

            _v4$1.set(isHDR ? this._groundAlbedoHDR : this._groundAlbedoLDR);

            normalizeHDRColor(_v4$1);
            return _col.set(_v4$1.x * 255, _v4$1.y * 255, _v4$1.z * 255, 255);
          },
          set: function set(val) {
            _v4$1.set(val.x, val.y, val.z, val.w);

            if (legacyCC.director.root.pipeline.pipelineSceneData.isHDR) {
              this._groundAlbedoHDR.set(_v4$1);
            } else {
              this._groundAlbedoLDR.set(_v4$1);
            }

            if (this._resource) {
              this._resource.groundAlbedo.set(_v4$1);
            }
          }
        }, {
          key: "groundAlbedo",
          set: function set(val) {
            if (legacyCC.director.root.pipeline.pipelineSceneData.isHDR) {
              this._groundAlbedoHDR.set(val);
            } else {
              this._groundAlbedoLDR.set(val);
            }

            if (this._resource) {
              this._resource.groundAlbedo.set(val);
            }
          }
        }]);

        return AmbientInfo;
      }(), (_applyDecoratedDescriptor(_class2$h.prototype, "skyIllum", [_dec2$6], Object.getOwnPropertyDescriptor(_class2$h.prototype, "skyIllum"), _class2$h.prototype), _initializer$e = applyDecoratedInitializer(_class2$h.prototype, "_skyColorHDR", [serializable, _dec3$2], function () {
        return new Vec4(0.2, 0.5, 0.8, 1.0);
      }), _initializer2$9 = applyDecoratedInitializer(_class2$h.prototype, "_skyIllumHDR", [serializable, _dec4], function () {
        return Ambient.SKY_ILLUM;
      }), _initializer3$9 = applyDecoratedInitializer(_class2$h.prototype, "_groundAlbedoHDR", [serializable, _dec5], function () {
        return new Vec4(0.2, 0.2, 0.2, 1.0);
      }), _initializer4$8 = applyDecoratedInitializer(_class2$h.prototype, "_skyColorLDR", [serializable], function () {
        return new Vec4(0.2, 0.5, 0.8, 1.0);
      }), _initializer5$5 = applyDecoratedInitializer(_class2$h.prototype, "_skyIllumLDR", [serializable], function () {
        return Ambient.SKY_ILLUM;
      }), _initializer6$2 = applyDecoratedInitializer(_class2$h.prototype, "_groundAlbedoLDR", [serializable], function () {
        return new Vec4(0.2, 0.2, 0.2, 1.0);
      })), _class2$h)) || _class$k));
      legacyCC.AmbientInfo = AmbientInfo;
      var SkyboxInfo = exports('SkyboxInfo', (_dec6 = ccclass('cc.SkyboxInfo'), _dec7 = type(EnvironmentLightingType), _dec8 = type(TextureCube), _dec9 = type(CCFloat), _dec10 = type(TextureCube), _dec11 = type(TextureCube), _dec12 = type(Material), _dec13 = type(TextureCube), _dec14 = formerlySerializedAs('_envmap'), _dec15 = type(TextureCube), _dec16 = type(TextureCube), _dec17 = type(TextureCube), _dec18 = type(Material), _dec19 = type(TextureCube), _dec20 = type(TextureCube), _dec6(_class4$1 = (_class5$1 = function () {
        function SkyboxInfo() {
          this._envLightingType = _initializer7$2 && _initializer7$2();
          this._envmapHDR = _initializer8$2 && _initializer8$2();
          this._envmapLDR = _initializer9$1 && _initializer9$1();
          this._diffuseMapHDR = _initializer10$1 && _initializer10$1();
          this._diffuseMapLDR = _initializer11$1 && _initializer11$1();
          this._enabled = _initializer12 && _initializer12();
          this._useHDR = _initializer13 && _initializer13();
          this._editableMaterial = _initializer14 && _initializer14();
          this._reflectionHDR = _initializer15 && _initializer15();
          this._reflectionLDR = _initializer16 && _initializer16();
          this._rotationAngle = _initializer17 && _initializer17();
          this._resource = null;
        }

        var _proto2 = SkyboxInfo.prototype;

        _proto2.activate = function activate(resource) {
          this.envLightingType = this._envLightingType;
          this._resource = resource;

          this._resource.initialize(this);

          this._resource.setEnvMaps(this._envmapHDR, this._envmapLDR);

          this._resource.setDiffuseMaps(this._diffuseMapHDR, this._diffuseMapLDR);

          this._resource.setSkyboxMaterial(this._editableMaterial);

          this._resource.setReflectionMaps(this._reflectionHDR, this._reflectionLDR);

          this._resource.setRotationAngle(this._rotationAngle);

          this._resource.activate();
        };

        _createClass(SkyboxInfo, [{
          key: "applyDiffuseMap",
          get: function get() {
            if (EnvironmentLightingType.DIFFUSEMAP_WITH_REFLECTION === this._envLightingType) {
              return true;
            }

            return false;
          },
          set: function set(val) {
            if (this._resource) {
              this._resource.useDiffuseMap = val;
            }
          }
        }, {
          key: "enabled",
          get: function get() {
            return this._enabled;
          },
          set: function set(val) {
            if (this._enabled === val) return;
            this._enabled = val;

            if (this._resource) {
              this._resource.enabled = this._enabled;
            }
          }
        }, {
          key: "envLightingType",
          get: function get() {
            return this._envLightingType;
          },
          set: function set(val) {
            if (!this.envmap && EnvironmentLightingType.HEMISPHERE_DIFFUSE !== val) {
              this.useIBL = false;
              this.applyDiffuseMap = false;
              this._envLightingType = EnvironmentLightingType.HEMISPHERE_DIFFUSE;
              warnID(15001);
            } else {
              if (EnvironmentLightingType.HEMISPHERE_DIFFUSE === val) {
                this.useIBL = false;
                this.applyDiffuseMap = false;
              } else if (EnvironmentLightingType.AUTOGEN_HEMISPHERE_DIFFUSE_WITH_REFLECTION === val) {
                this.useIBL = true;
                this.applyDiffuseMap = false;
              } else if (EnvironmentLightingType.DIFFUSEMAP_WITH_REFLECTION === val) {
                this.useIBL = true;
                this.applyDiffuseMap = true;
              }

              this._envLightingType = val;
            }
          }
        }, {
          key: "useIBL",
          get: function get() {
            if (EnvironmentLightingType.HEMISPHERE_DIFFUSE !== this._envLightingType) {
              return true;
            }

            return false;
          },
          set: function set(val) {
            if (this._resource) {
              this._resource.useIBL = val;
            }
          }
        }, {
          key: "useHDR",
          get: function get() {
            legacyCC.director.root.pipeline.pipelineSceneData.isHDR = this._useHDR;
            return this._useHDR;
          },
          set: function set(val) {
            legacyCC.director.root.pipeline.pipelineSceneData.isHDR = val;
            this._useHDR = val;

            if (this._resource) {
              if (this.envLightingType === EnvironmentLightingType.DIFFUSEMAP_WITH_REFLECTION) {
                if (this.diffuseMap === null) {
                  this.envLightingType = EnvironmentLightingType.AUTOGEN_HEMISPHERE_DIFFUSE_WITH_REFLECTION;
                  warnID(15000);
                } else if (this.diffuseMap.isDefault) {
                  warnID(15002);
                }
              }
            }

            if (this._resource) {
              this._resource.useHDR = this._useHDR;

              this._resource.updateMaterialRenderInfo();
            }
          }
        }, {
          key: "envmap",
          get: function get() {
            var isHDR = legacyCC.director.root.pipeline.pipelineSceneData.isHDR;

            if (isHDR) {
              return this._envmapHDR;
            } else {
              return this._envmapLDR;
            }
          },
          set: function set(val) {
            var isHDR = legacyCC.director.root.pipeline.pipelineSceneData.isHDR;

            if (isHDR) {
              this._envmapHDR = val;
              this._reflectionHDR = null;
            } else {
              this._envmapLDR = val;
              this._reflectionLDR = null;
            }

            if (!val) {
              if (isHDR) {
                this._diffuseMapHDR = null;
              } else {
                this._diffuseMapLDR = null;
              }

              this.applyDiffuseMap = false;
              this.useIBL = false;
              this.envLightingType = EnvironmentLightingType.HEMISPHERE_DIFFUSE;
              warnID(15001);
            }

            if (this._resource) {
              this._resource.setEnvMaps(this._envmapHDR, this._envmapLDR);

              this._resource.setDiffuseMaps(this._diffuseMapHDR, this._diffuseMapLDR);

              this._resource.setReflectionMaps(this._reflectionHDR, this._reflectionLDR);

              this._resource.useDiffuseMap = this.applyDiffuseMap;
              this._resource.envmap = val;
            }
          }
        }, {
          key: "rotationAngle",
          get: function get() {
            return this._rotationAngle;
          },
          set: function set(val) {
            this._rotationAngle = val;

            if (this._resource) {
              this._resource.setRotationAngle(this._rotationAngle);
            }
          }
        }, {
          key: "diffuseMap",
          get: function get() {
            var isHDR = legacyCC.director.root.pipeline.pipelineSceneData.isHDR;

            if (isHDR) {
              return this._diffuseMapHDR;
            } else {
              return this._diffuseMapLDR;
            }
          },
          set: function set(val) {
            var isHDR = legacyCC.director.root.pipeline.pipelineSceneData.isHDR;

            if (isHDR) {
              this._diffuseMapHDR = val;
            } else {
              this._diffuseMapLDR = val;
            }

            if (this._resource) {
              this._resource.setDiffuseMaps(this._diffuseMapHDR, this._diffuseMapLDR);
            }
          }
        }, {
          key: "reflectionMap",
          get: function get() {
            var isHDR = legacyCC.director.root.pipeline.pipelineSceneData.isHDR;

            if (isHDR) {
              return this._reflectionHDR;
            } else {
              return this._reflectionLDR;
            }
          },
          set: function set(val) {
            var isHDR = legacyCC.director.root.pipeline.pipelineSceneData.isHDR;

            if (isHDR) {
              this._reflectionHDR = val;
            } else {
              this._reflectionLDR = val;
            }

            if (this._resource) {
              this._resource.setReflectionMaps(this._reflectionHDR, this._reflectionLDR);
            }
          }
        }, {
          key: "skyboxMaterial",
          get: function get() {
            return this._editableMaterial;
          },
          set: function set(val) {
            this._editableMaterial = val;

            if (this._resource) {
              this._resource.setSkyboxMaterial(this._editableMaterial);
            }
          }
        }]);

        return SkyboxInfo;
      }(), (_applyDecoratedDescriptor(_class5$1.prototype, "envLightingType", [_dec7], Object.getOwnPropertyDescriptor(_class5$1.prototype, "envLightingType"), _class5$1.prototype), _applyDecoratedDescriptor(_class5$1.prototype, "envmap", [_dec8], Object.getOwnPropertyDescriptor(_class5$1.prototype, "envmap"), _class5$1.prototype), _applyDecoratedDescriptor(_class5$1.prototype, "rotationAngle", [_dec9], Object.getOwnPropertyDescriptor(_class5$1.prototype, "rotationAngle"), _class5$1.prototype), _applyDecoratedDescriptor(_class5$1.prototype, "diffuseMap", [_dec10], Object.getOwnPropertyDescriptor(_class5$1.prototype, "diffuseMap"), _class5$1.prototype), _applyDecoratedDescriptor(_class5$1.prototype, "reflectionMap", [_dec11], Object.getOwnPropertyDescriptor(_class5$1.prototype, "reflectionMap"), _class5$1.prototype), _applyDecoratedDescriptor(_class5$1.prototype, "skyboxMaterial", [_dec12], Object.getOwnPropertyDescriptor(_class5$1.prototype, "skyboxMaterial"), _class5$1.prototype), _initializer7$2 = applyDecoratedInitializer(_class5$1.prototype, "_envLightingType", [serializable], function () {
        return EnvironmentLightingType.HEMISPHERE_DIFFUSE;
      }), _initializer8$2 = applyDecoratedInitializer(_class5$1.prototype, "_envmapHDR", [serializable, _dec13, _dec14], function () {
        return null;
      }), _initializer9$1 = applyDecoratedInitializer(_class5$1.prototype, "_envmapLDR", [serializable, _dec15], function () {
        return null;
      }), _initializer10$1 = applyDecoratedInitializer(_class5$1.prototype, "_diffuseMapHDR", [serializable, _dec16], function () {
        return null;
      }), _initializer11$1 = applyDecoratedInitializer(_class5$1.prototype, "_diffuseMapLDR", [serializable, _dec17], function () {
        return null;
      }), _initializer12 = applyDecoratedInitializer(_class5$1.prototype, "_enabled", [serializable], function () {
        return false;
      }), _initializer13 = applyDecoratedInitializer(_class5$1.prototype, "_useHDR", [serializable], function () {
        return true;
      }), _initializer14 = applyDecoratedInitializer(_class5$1.prototype, "_editableMaterial", [serializable, _dec18], function () {
        return null;
      }), _initializer15 = applyDecoratedInitializer(_class5$1.prototype, "_reflectionHDR", [serializable, _dec19], function () {
        return null;
      }), _initializer16 = applyDecoratedInitializer(_class5$1.prototype, "_reflectionLDR", [serializable, _dec20], function () {
        return null;
      }), _initializer17 = applyDecoratedInitializer(_class5$1.prototype, "_rotationAngle", [serializable], function () {
        return 0;
      })), _class5$1)) || _class4$1));
      legacyCC.SkyboxInfo = SkyboxInfo;
      var FogInfo = exports('FogInfo', (_dec21 = ccclass('cc.FogInfo'), _dec22 = type(FogType), _dec23 = type(CCFloat), _dec24 = type(CCFloat), _dec25 = type(CCFloat), _dec26 = type(CCFloat), _dec27 = type(CCFloat), _dec28 = type(CCFloat), _dec21(_class7 = (_class8 = (_temp$8 = _class9 = function () {
        function FogInfo() {
          this._type = _initializer18 && _initializer18();
          this._fogColor = _initializer19 && _initializer19();
          this._enabled = _initializer20 && _initializer20();
          this._fogDensity = _initializer21 && _initializer21();
          this._fogStart = _initializer22 && _initializer22();
          this._fogEnd = _initializer23 && _initializer23();
          this._fogAtten = _initializer24 && _initializer24();
          this._fogTop = _initializer25 && _initializer25();
          this._fogRange = _initializer26 && _initializer26();
          this._accurate = _initializer27 && _initializer27();
          this._resource = null;
        }

        var _proto3 = FogInfo.prototype;

        _proto3.activate = function activate(resource) {
          this._resource = resource;

          this._resource.initialize(this);

          this._resource.activate();
        };

        _createClass(FogInfo, [{
          key: "enabled",
          get: function get() {
            return this._enabled;
          },
          set: function set(val) {
            if (this._enabled === val) return;
            this._enabled = val;

            if (this._resource) {
              this._resource.enabled = val;

              if (val) {
                this._resource.type = this._type;
              }
            }
          }
        }, {
          key: "accurate",
          get: function get() {
            return this._accurate;
          },
          set: function set(val) {
            if (this._accurate === val) return;
            this._accurate = val;

            if (this._resource) {
              this._resource.accurate = val;

              if (val) {
                this._resource.type = this._type;
              }
            }
          }
        }, {
          key: "fogColor",
          get: function get() {
            return this._fogColor;
          },
          set: function set(val) {
            this._fogColor.set(val);

            if (this._resource) {
              this._resource.fogColor = this._fogColor;
            }
          }
        }, {
          key: "type",
          get: function get() {
            return this._type;
          },
          set: function set(val) {
            this._type = val;

            if (this._resource) {
              this._resource.type = val;
            }
          }
        }, {
          key: "fogDensity",
          get: function get() {
            return this._fogDensity;
          },
          set: function set(val) {
            this._fogDensity = val;

            if (this._resource) {
              this._resource.fogDensity = val;
            }
          }
        }, {
          key: "fogStart",
          get: function get() {
            return this._fogStart;
          },
          set: function set(val) {
            this._fogStart = val;

            if (this._resource) {
              this._resource.fogStart = val;
            }
          }
        }, {
          key: "fogEnd",
          get: function get() {
            return this._fogEnd;
          },
          set: function set(val) {
            this._fogEnd = val;

            if (this._resource) {
              this._resource.fogEnd = val;
            }
          }
        }, {
          key: "fogAtten",
          get: function get() {
            return this._fogAtten;
          },
          set: function set(val) {
            this._fogAtten = val;

            if (this._resource) {
              this._resource.fogAtten = val;
            }
          }
        }, {
          key: "fogTop",
          get: function get() {
            return this._fogTop;
          },
          set: function set(val) {
            this._fogTop = val;

            if (this._resource) {
              this._resource.fogTop = val;
            }
          }
        }, {
          key: "fogRange",
          get: function get() {
            return this._fogRange;
          },
          set: function set(val) {
            this._fogRange = val;

            if (this._resource) {
              this._resource.fogRange = val;
            }
          }
        }]);

        return FogInfo;
      }(), _class9.FogType = FogType, _temp$8), (_applyDecoratedDescriptor(_class8.prototype, "type", [_dec22], Object.getOwnPropertyDescriptor(_class8.prototype, "type"), _class8.prototype), _applyDecoratedDescriptor(_class8.prototype, "fogDensity", [_dec23], Object.getOwnPropertyDescriptor(_class8.prototype, "fogDensity"), _class8.prototype), _applyDecoratedDescriptor(_class8.prototype, "fogStart", [_dec24], Object.getOwnPropertyDescriptor(_class8.prototype, "fogStart"), _class8.prototype), _applyDecoratedDescriptor(_class8.prototype, "fogEnd", [_dec25], Object.getOwnPropertyDescriptor(_class8.prototype, "fogEnd"), _class8.prototype), _applyDecoratedDescriptor(_class8.prototype, "fogAtten", [_dec26], Object.getOwnPropertyDescriptor(_class8.prototype, "fogAtten"), _class8.prototype), _applyDecoratedDescriptor(_class8.prototype, "fogTop", [_dec27], Object.getOwnPropertyDescriptor(_class8.prototype, "fogTop"), _class8.prototype), _applyDecoratedDescriptor(_class8.prototype, "fogRange", [_dec28], Object.getOwnPropertyDescriptor(_class8.prototype, "fogRange"), _class8.prototype), _initializer18 = applyDecoratedInitializer(_class8.prototype, "_type", [serializable], function () {
        return FogType.LINEAR;
      }), _initializer19 = applyDecoratedInitializer(_class8.prototype, "_fogColor", [serializable], function () {
        return new Color('#C8C8C8');
      }), _initializer20 = applyDecoratedInitializer(_class8.prototype, "_enabled", [serializable], function () {
        return false;
      }), _initializer21 = applyDecoratedInitializer(_class8.prototype, "_fogDensity", [serializable], function () {
        return 0.3;
      }), _initializer22 = applyDecoratedInitializer(_class8.prototype, "_fogStart", [serializable], function () {
        return 0.5;
      }), _initializer23 = applyDecoratedInitializer(_class8.prototype, "_fogEnd", [serializable], function () {
        return 300;
      }), _initializer24 = applyDecoratedInitializer(_class8.prototype, "_fogAtten", [serializable], function () {
        return 5;
      }), _initializer25 = applyDecoratedInitializer(_class8.prototype, "_fogTop", [serializable], function () {
        return 1.5;
      }), _initializer26 = applyDecoratedInitializer(_class8.prototype, "_fogRange", [serializable], function () {
        return 1.2;
      }), _initializer27 = applyDecoratedInitializer(_class8.prototype, "_accurate", [serializable], function () {
        return false;
      })), _class8)) || _class7));
      var ShadowsInfo = exports('ShadowsInfo', (_dec29 = ccclass('cc.ShadowsInfo'), _dec30 = type(ShadowType), _dec31 = type(CCFloat), _dec32 = type(CCInteger), _dec33 = type(ShadowSize), _dec29(_class10 = (_class11 = function () {
        function ShadowsInfo() {
          this._enabled = _initializer28 && _initializer28();
          this._type = _initializer29 && _initializer29();
          this._normal = _initializer30 && _initializer30();
          this._distance = _initializer31 && _initializer31();
          this._shadowColor = _initializer32 && _initializer32();
          this._maxReceived = _initializer33 && _initializer33();
          this._size = _initializer34 && _initializer34();
          this._resource = null;
        }

        var _proto4 = ShadowsInfo.prototype;

        _proto4.setPlaneFromNode = function setPlaneFromNode(node) {
          node.getWorldRotation(_qt$1);
          this.planeDirection = Vec3.transformQuat(_v3$2, _up, _qt$1);
          node.getWorldPosition(_v3$2);
          this.planeHeight = Vec3.dot(this._normal, _v3$2);
        };

        _proto4.activate = function activate(resource) {
          this._resource = resource;

          this._resource.initialize(this);

          this._resource.activate();
        };

        _createClass(ShadowsInfo, [{
          key: "enabled",
          get: function get() {

            return this._enabled;
          },
          set: function set(val) {
            if (this._enabled === val) return;
            this._enabled = val;

            if (this._resource) {
              this._resource.enabled = val;

              if (val) {
                this._resource.type = this._type;
              }
            }
          }
        }, {
          key: "type",
          get: function get() {
            return this._type;
          },
          set: function set(val) {
            this._type = val;

            if (this._resource) {
              this._resource.type = val;
            }
          }
        }, {
          key: "shadowColor",
          get: function get() {
            return this._shadowColor;
          },
          set: function set(val) {
            this._shadowColor.set(val);

            if (this._resource) {
              this._resource.shadowColor = val;
            }
          }
        }, {
          key: "planeDirection",
          get: function get() {
            return this._normal;
          },
          set: function set(val) {
            Vec3.copy(this._normal, val);

            if (this._resource) {
              this._resource.normal = val;
            }
          }
        }, {
          key: "planeHeight",
          get: function get() {
            return this._distance;
          },
          set: function set(val) {
            this._distance = val;

            if (this._resource) {
              this._resource.distance = val;
            }
          }
        }, {
          key: "maxReceived",
          get: function get() {
            return this._maxReceived;
          },
          set: function set(val) {
            this._maxReceived = val;

            if (this._resource) {
              this._resource.maxReceived = val;
            }
          }
        }, {
          key: "shadowMapSize",
          get: function get() {
            return this._size.x;
          },
          set: function set(value) {
            this._size.set(value, value);

            if (this._resource) {
              this._resource.size.set(value, value);

              this._resource.shadowMapDirty = true;
            }
          }
        }]);

        return ShadowsInfo;
      }(), (_applyDecoratedDescriptor(_class11.prototype, "type", [_dec30], Object.getOwnPropertyDescriptor(_class11.prototype, "type"), _class11.prototype), _applyDecoratedDescriptor(_class11.prototype, "planeHeight", [_dec31], Object.getOwnPropertyDescriptor(_class11.prototype, "planeHeight"), _class11.prototype), _applyDecoratedDescriptor(_class11.prototype, "maxReceived", [_dec32], Object.getOwnPropertyDescriptor(_class11.prototype, "maxReceived"), _class11.prototype), _applyDecoratedDescriptor(_class11.prototype, "shadowMapSize", [_dec33], Object.getOwnPropertyDescriptor(_class11.prototype, "shadowMapSize"), _class11.prototype), _initializer28 = applyDecoratedInitializer(_class11.prototype, "_enabled", [serializable], function () {
        return false;
      }), _initializer29 = applyDecoratedInitializer(_class11.prototype, "_type", [serializable], function () {
        return ShadowType.Planar;
      }), _initializer30 = applyDecoratedInitializer(_class11.prototype, "_normal", [serializable], function () {
        return new Vec3(0, 1, 0);
      }), _initializer31 = applyDecoratedInitializer(_class11.prototype, "_distance", [serializable], function () {
        return 0;
      }), _initializer32 = applyDecoratedInitializer(_class11.prototype, "_shadowColor", [serializable], function () {
        return new Color(0, 0, 0, 76);
      }), _initializer33 = applyDecoratedInitializer(_class11.prototype, "_maxReceived", [serializable], function () {
        return 4;
      }), _initializer34 = applyDecoratedInitializer(_class11.prototype, "_size", [serializable], function () {
        return new Vec2(1024, 1024);
      })), _class11)) || _class10));
      legacyCC.ShadowsInfo = ShadowsInfo;
      var DEFAULT_WORLD_MIN_POS = exports('DEFAULT_WORLD_MIN_POS', new Vec3(-1024.0, -1024.0, -1024.0));
      var DEFAULT_WORLD_MAX_POS = exports('DEFAULT_WORLD_MAX_POS', new Vec3(1024.0, 1024.0, 1024.0));
      var DEFAULT_OCTREE_DEPTH = exports('DEFAULT_OCTREE_DEPTH', 8);
      var OctreeInfo = exports('OctreeInfo', (_dec34 = ccclass('cc.OctreeInfo'), _dec35 = type(CCInteger), _dec34(_class13 = (_class14 = function () {
        function OctreeInfo() {
          this._enabled = _initializer35 && _initializer35();
          this._minPos = _initializer36 && _initializer36();
          this._maxPos = _initializer37 && _initializer37();
          this._depth = _initializer38 && _initializer38();
          this._resource = null;
        }

        var _proto5 = OctreeInfo.prototype;

        _proto5.activate = function activate(resource) {
          this._resource = resource;

          this._resource.initialize(this);
        };

        _createClass(OctreeInfo, [{
          key: "enabled",
          get: function get() {
            return this._enabled;
          },
          set: function set(val) {
            if (this._enabled === val) return;
            this._enabled = val;

            if (this._resource) {
              this._resource.enabled = val;
            }
          }
        }, {
          key: "minPos",
          get: function get() {
            return this._minPos;
          },
          set: function set(val) {
            this._minPos = val;

            if (this._resource) {
              this._resource.minPos = val;
            }
          }
        }, {
          key: "maxPos",
          get: function get() {
            return this._maxPos;
          },
          set: function set(val) {
            this._maxPos = val;

            if (this._resource) {
              this._resource.maxPos = val;
            }
          }
        }, {
          key: "depth",
          get: function get() {
            return this._depth;
          },
          set: function set(val) {
            this._depth = val;

            if (this._resource) {
              this._resource.depth = val;
            }
          }
        }]);

        return OctreeInfo;
      }(), (_applyDecoratedDescriptor(_class14.prototype, "depth", [_dec35], Object.getOwnPropertyDescriptor(_class14.prototype, "depth"), _class14.prototype), _initializer35 = applyDecoratedInitializer(_class14.prototype, "_enabled", [serializable], function () {
        return false;
      }), _initializer36 = applyDecoratedInitializer(_class14.prototype, "_minPos", [serializable], function () {
        return new Vec3(DEFAULT_WORLD_MIN_POS);
      }), _initializer37 = applyDecoratedInitializer(_class14.prototype, "_maxPos", [serializable], function () {
        return new Vec3(DEFAULT_WORLD_MAX_POS);
      }), _initializer38 = applyDecoratedInitializer(_class14.prototype, "_depth", [serializable], function () {
        return DEFAULT_OCTREE_DEPTH;
      })), _class14)) || _class13));
      legacyCC.OctreeInfo = OctreeInfo;
      var LightProbeInfo = exports('LightProbeInfo', (_dec36 = ccclass('cc.LightProbeInfo'), _dec37 = type(CCFloat), _dec38 = type(CCInteger), _dec39 = type(CCInteger), _dec40 = type(CCFloat), _dec36(_class16 = (_class17 = function () {
        function LightProbeInfo() {
          this._giScale = _initializer39 && _initializer39();
          this._giSamples = _initializer40 && _initializer40();
          this._bounces = _initializer41 && _initializer41();
          this._reduceRinging = _initializer42 && _initializer42();
          this._showProbe = _initializer43 && _initializer43();
          this._showWireframe = _initializer44 && _initializer44();
          this._showConvex = _initializer45 && _initializer45();
          this._data = _initializer46 && _initializer46();
          this._nodes = [];
          this._scene = null;
          this._resource = null;
        }

        var _proto6 = LightProbeInfo.prototype;

        _proto6.activate = function activate(scene, resource) {
          this._scene = scene;
          this._resource = resource;

          this._resource.initialize(this);
        };

        _proto6.clearSHCoefficients = function clearSHCoefficients() {
          if (!this._data) {
            return;
          }

          var probes = this._data.probes;

          for (var i = 0; i < probes.length; i++) {
            probes[i].coefficients.length = 0;
          }

          this.clearAllSHUBOs();
        };

        _proto6.isUniqueNode = function isUniqueNode() {
          return this._nodes.length === 1;
        };

        _proto6.addNode = function addNode(node) {
          if (!node) {
            return false;
          }

          for (var i = 0; i < this._nodes.length; i++) {
            if (this._nodes[i].node === node) {
              return false;
            }
          }

          this._nodes.push({
            node: node,
            probes: null
          });

          return true;
        };

        _proto6.removeNode = function removeNode(node) {
          if (!node) {
            return false;
          }

          var index = this._nodes.findIndex(function (element) {
            return element.node === node;
          });

          if (index === -1) {
            return false;
          }

          this._nodes.splice(index, 1);

          return true;
        };

        _proto6.syncData = function syncData(node, probes) {
          for (var i = 0; i < this._nodes.length; i++) {
            if (this._nodes[i].node === node) {
              this._nodes[i].probes = probes;
              return;
            }
          }
        };

        _proto6.update = function update(updateTet) {
          if (updateTet === void 0) {
            updateTet = true;
          }

          if (!legacyCC.internal.LightProbesData) {
            return;
          }

          if (!this._data) {
            this._data = new legacyCC.internal.LightProbesData();

            if (this._resource) {
              this._resource.data = this._data;
            }
          }

          var points = [];

          for (var i = 0; i < this._nodes.length; i++) {
            var node = this._nodes[i].node;
            var probes = this._nodes[i].probes;
            var worldPosition = node.worldPosition;

            if (!probes) {
              continue;
            }

            for (var j = 0; j < probes.length; j++) {
              var position = new Vec3(0, 0, 0);
              Vec3.add(position, probes[j], worldPosition);
              points.push(position);
            }
          }

          var pointCount = points.length;

          if (pointCount < 4) {
            this.resetAllTetraIndices();

            this._data.reset();

            return;
          }

          this._data.updateProbes(points);

          if (updateTet) {
            this.resetAllTetraIndices();

            this._data.updateTetrahedrons();
          }
        };

        _proto6.clearAllSHUBOs = function clearAllSHUBOs() {
          if (!this._scene) {
            return;
          }

          var renderScene = this._scene.renderScene;

          if (!renderScene) {
            return;
          }

          var models = renderScene.models;

          for (var i = 0; i < models.length; i++) {
            models[i].clearSHUBOs();
          }
        };

        _proto6.resetAllTetraIndices = function resetAllTetraIndices() {
          if (!this._scene) {
            return;
          }

          var renderScene = this._scene.renderScene;

          if (!renderScene) {
            return;
          }

          var models = renderScene.models;

          for (var i = 0; i < models.length; i++) {
            models[i].tetrahedronIndex = -1;
          }
        };

        _createClass(LightProbeInfo, [{
          key: "giScale",
          get: function get() {
            return this._giScale;
          },
          set: function set(val) {
            if (this._giScale === val) return;
            this._giScale = val;

            if (this._resource) {
              this._resource.giScale = val;
            }
          }
        }, {
          key: "giSamples",
          get: function get() {
            return this._giSamples;
          },
          set: function set(val) {
            if (this._giSamples === val) return;
            this._giSamples = val;

            if (this._resource) {
              this._resource.giSamples = val;
            }
          }
        }, {
          key: "bounces",
          get: function get() {
            return this._bounces;
          },
          set: function set(val) {
            if (this._bounces === val) return;
            this._bounces = val;

            if (this._resource) {
              this._resource.bounces = val;
            }
          }
        }, {
          key: "reduceRinging",
          get: function get() {
            return this._reduceRinging;
          },
          set: function set(val) {
            if (this._reduceRinging === val) return;
            this._reduceRinging = val;

            if (this._resource) {
              this._resource.reduceRinging = val;
            }
          }
        }, {
          key: "showProbe",
          get: function get() {
            return this._showProbe;
          },
          set: function set(val) {
            if (this._showProbe === val) return;
            this._showProbe = val;

            if (this._resource) {
              this._resource.showProbe = val;
            }
          }
        }, {
          key: "showWireframe",
          get: function get() {
            return this._showWireframe;
          },
          set: function set(val) {
            if (this._showWireframe === val) return;
            this._showWireframe = val;

            if (this._resource) {
              this._resource.showWireframe = val;
            }
          }
        }, {
          key: "showConvex",
          get: function get() {
            return this._showConvex;
          },
          set: function set(val) {
            if (this._showConvex === val) return;
            this._showConvex = val;

            if (this._resource) {
              this._resource.showConvex = val;
            }
          }
        }, {
          key: "data",
          get: function get() {
            return this._data;
          },
          set: function set(val) {
            if (this._data === val) return;
            this._data = val;

            if (this._resource) {
              this._resource.data = val;
            }
          }
        }]);

        return LightProbeInfo;
      }(), (_applyDecoratedDescriptor(_class17.prototype, "giScale", [_dec37], Object.getOwnPropertyDescriptor(_class17.prototype, "giScale"), _class17.prototype), _applyDecoratedDescriptor(_class17.prototype, "giSamples", [_dec38], Object.getOwnPropertyDescriptor(_class17.prototype, "giSamples"), _class17.prototype), _applyDecoratedDescriptor(_class17.prototype, "bounces", [_dec39], Object.getOwnPropertyDescriptor(_class17.prototype, "bounces"), _class17.prototype), _applyDecoratedDescriptor(_class17.prototype, "reduceRinging", [_dec40], Object.getOwnPropertyDescriptor(_class17.prototype, "reduceRinging"), _class17.prototype), _initializer39 = applyDecoratedInitializer(_class17.prototype, "_giScale", [serializable], function () {
        return 1.0;
      }), _initializer40 = applyDecoratedInitializer(_class17.prototype, "_giSamples", [serializable], function () {
        return 1024;
      }), _initializer41 = applyDecoratedInitializer(_class17.prototype, "_bounces", [serializable], function () {
        return 2;
      }), _initializer42 = applyDecoratedInitializer(_class17.prototype, "_reduceRinging", [serializable], function () {
        return 0.0;
      }), _initializer43 = applyDecoratedInitializer(_class17.prototype, "_showProbe", [serializable], function () {
        return true;
      }), _initializer44 = applyDecoratedInitializer(_class17.prototype, "_showWireframe", [serializable], function () {
        return true;
      }), _initializer45 = applyDecoratedInitializer(_class17.prototype, "_showConvex", [serializable], function () {
        return false;
      }), _initializer46 = applyDecoratedInitializer(_class17.prototype, "_data", [serializable], function () {
        return null;
      })), _class17)) || _class16));
      var SceneGlobals = exports('SceneGlobals', (_dec41 = ccclass('cc.SceneGlobals'), _dec42 = type(SkyboxInfo), _dec41(_class19 = (_class20 = function () {
        function SceneGlobals() {
          this.ambient = _initializer47 && _initializer47();
          this.shadows = _initializer48 && _initializer48();
          this._skybox = _initializer49 && _initializer49();
          this.fog = _initializer50 && _initializer50();
          this.octree = _initializer51 && _initializer51();
          this.lightProbeInfo = _initializer52 && _initializer52();
          this.bakedWithStationaryMainLight = _initializer53 && _initializer53();
        }

        var _proto7 = SceneGlobals.prototype;

        _proto7.activate = function activate(scene) {
          var sceneData = legacyCC.director.root.pipeline.pipelineSceneData;
          this.skybox.activate(sceneData.skybox);
          this.ambient.activate(sceneData.ambient);
          this.shadows.activate(sceneData.shadows);
          this.fog.activate(sceneData.fog);
          this.octree.activate(sceneData.octree);

          if (this.lightProbeInfo && sceneData.lightProbes) {
            this.lightProbeInfo.activate(scene, sceneData.lightProbes);
          }

          var root = legacyCC.director.root;
          root.onGlobalPipelineStateChanged();
        };

        _createClass(SceneGlobals, [{
          key: "skybox",
          get: function get() {
            return this._skybox;
          },
          set: function set(value) {
            this._skybox = value;
          }
        }]);

        return SceneGlobals;
      }(), (_initializer47 = applyDecoratedInitializer(_class20.prototype, "ambient", [serializable], function () {
        return new AmbientInfo();
      }), _initializer48 = applyDecoratedInitializer(_class20.prototype, "shadows", [serializable], function () {
        return new ShadowsInfo();
      }), _initializer49 = applyDecoratedInitializer(_class20.prototype, "_skybox", [serializable], function () {
        return new SkyboxInfo();
      }), _initializer50 = applyDecoratedInitializer(_class20.prototype, "fog", [serializable], function () {
        return new FogInfo();
      }), _applyDecoratedDescriptor(_class20.prototype, "skybox", [_dec42], Object.getOwnPropertyDescriptor(_class20.prototype, "skybox"), _class20.prototype), _initializer51 = applyDecoratedInitializer(_class20.prototype, "octree", [serializable], function () {
        return new OctreeInfo();
      }), _initializer52 = applyDecoratedInitializer(_class20.prototype, "lightProbeInfo", [serializable], function () {
        return new LightProbeInfo();
      }), _initializer53 = applyDecoratedInitializer(_class20.prototype, "bakedWithStationaryMainLight", [serializable], function () {
        return false;
      })), _class20)) || _class19));
      legacyCC.SceneGlobals = SceneGlobals;

      var _dec$l, _class$l, _class2$i, _initializer$f, _dec2$7, _dec3$3, _dec4$1, _dec5$1, _dec6$1, _class4$2, _class5$2, _initializer2$a, _initializer3$a, _initializer4$9, _initializer5$6, _initializer6$3, _dec7$1, _class7$1, _class8$1, _initializer7$3, _dec8$1, _dec9$1, _class10$1, _class11$1, _initializer8$3, _initializer9$2, _initializer10$2, _dec10$1, _dec11$1, _dec12$1, _class13$1, _class14$1, _initializer11$2, _initializer12$1, _dec13$1, _dec14$1, _dec15$1, _class16$1, _class17$1, _initializer13$1, _initializer14$1, _dec16$1, _dec17$1, _dec18$1, _dec19$1, _dec20$1, _dec21$1, _class19$1, _class20$1, _initializer15$1, _initializer16$1, _initializer17$1, _initializer18$1, _initializer19$1, _initializer20$1, _dec22$1, _dec23$1, _dec24$1, _dec25$1, _class22, _class23, _initializer21$1, _initializer22$1, _initializer23$1, _initializer24$1, _initializer25$1, _initializer26$1;

      var TargetInfo = (_dec$l = ccclass('cc.TargetInfo'), _dec$l(_class$l = (_class2$i = function TargetInfo() {
        this.localID = _initializer$f && _initializer$f();
      }, (_initializer$f = applyDecoratedInitializer(_class2$i.prototype, "localID", [serializable], function () {
        return [];
      })), _class2$i)) || _class$l);
      var TargetOverrideInfo = (_dec2$7 = ccclass('cc.TargetOverrideInfo'), _dec3$3 = type(CCObject), _dec4$1 = type(TargetInfo), _dec5$1 = type(Node$1), _dec6$1 = type(TargetInfo), _dec2$7(_class4$2 = (_class5$2 = function TargetOverrideInfo() {
        this.source = _initializer2$a && _initializer2$a();
        this.sourceInfo = _initializer3$a && _initializer3$a();
        this.propertyPath = _initializer4$9 && _initializer4$9();
        this.target = _initializer5$6 && _initializer5$6();
        this.targetInfo = _initializer6$3 && _initializer6$3();
      }, (_initializer2$a = applyDecoratedInitializer(_class5$2.prototype, "source", [serializable, _dec3$3], function () {
        return null;
      }), _initializer3$a = applyDecoratedInitializer(_class5$2.prototype, "sourceInfo", [serializable, _dec4$1], function () {
        return null;
      }), _initializer4$9 = applyDecoratedInitializer(_class5$2.prototype, "propertyPath", [serializable], function () {
        return [];
      }), _initializer5$6 = applyDecoratedInitializer(_class5$2.prototype, "target", [serializable, _dec5$1], function () {
        return null;
      }), _initializer6$3 = applyDecoratedInitializer(_class5$2.prototype, "targetInfo", [serializable, _dec6$1], function () {
        return null;
      })), _class5$2)) || _class4$2);
      var CompPrefabInfo = (_dec7$1 = ccclass('cc.CompPrefabInfo'), _dec7$1(_class7$1 = (_class8$1 = function CompPrefabInfo() {
        this.fileId = _initializer7$3 && _initializer7$3();
      }, (_initializer7$3 = applyDecoratedInitializer(_class8$1.prototype, "fileId", [serializable], function () {
        return '';
      })), _class8$1)) || _class7$1);
      var PropertyOverrideInfo = (_dec8$1 = ccclass('CCPropertyOverrideInfo'), _dec9$1 = type(TargetInfo), _dec8$1(_class10$1 = (_class11$1 = function () {
        function PropertyOverrideInfo() {
          this.targetInfo = _initializer8$3 && _initializer8$3();
          this.propertyPath = _initializer9$2 && _initializer9$2();
          this.value = _initializer10$2 && _initializer10$2();
        }

        var _proto = PropertyOverrideInfo.prototype;

        _proto.isTarget = function isTarget(localID, propPath) {
        };

        return PropertyOverrideInfo;
      }(), (_initializer8$3 = applyDecoratedInitializer(_class11$1.prototype, "targetInfo", [serializable, _dec9$1], function () {
        return null;
      }), _initializer9$2 = applyDecoratedInitializer(_class11$1.prototype, "propertyPath", [serializable], function () {
        return [];
      }), _initializer10$2 = applyDecoratedInitializer(_class11$1.prototype, "value", [serializable], null)), _class11$1)) || _class10$1);
      var MountedChildrenInfo = (_dec10$1 = ccclass('cc.MountedChildrenInfo'), _dec11$1 = type(TargetInfo), _dec12$1 = type([Node$1]), _dec10$1(_class13$1 = (_class14$1 = function () {
        function MountedChildrenInfo() {
          this.targetInfo = _initializer11$2 && _initializer11$2();
          this.nodes = _initializer12$1 && _initializer12$1();
        }

        var _proto2 = MountedChildrenInfo.prototype;

        _proto2.isTarget = function isTarget(localID) {
        };

        return MountedChildrenInfo;
      }(), (_initializer11$2 = applyDecoratedInitializer(_class14$1.prototype, "targetInfo", [serializable, _dec11$1], function () {
        return null;
      }), _initializer12$1 = applyDecoratedInitializer(_class14$1.prototype, "nodes", [serializable, _dec12$1], function () {
        return [];
      })), _class14$1)) || _class13$1);
      var MountedComponentsInfo = (_dec13$1 = ccclass('cc.MountedComponentsInfo'), _dec14$1 = type(TargetInfo), _dec15$1 = type([Component]), _dec13$1(_class16$1 = (_class17$1 = function () {
        function MountedComponentsInfo() {
          this.targetInfo = _initializer13$1 && _initializer13$1();
          this.components = _initializer14$1 && _initializer14$1();
        }

        var _proto3 = MountedComponentsInfo.prototype;

        _proto3.isTarget = function isTarget(localID) {
        };

        return MountedComponentsInfo;
      }(), (_initializer13$1 = applyDecoratedInitializer(_class17$1.prototype, "targetInfo", [serializable, _dec14$1], function () {
        return null;
      }), _initializer14$1 = applyDecoratedInitializer(_class17$1.prototype, "components", [serializable, _dec15$1], function () {
        return [];
      })), _class17$1)) || _class16$1);
      var PrefabInstance = (_dec16$1 = ccclass('cc.PrefabInstance'), _dec17$1 = type(Node$1), _dec18$1 = type([MountedChildrenInfo]), _dec19$1 = type([MountedComponentsInfo]), _dec20$1 = type([PropertyOverrideInfo]), _dec21$1 = type([TargetInfo]), _dec16$1(_class19$1 = (_class20$1 = function () {
        function PrefabInstance() {
          this.fileId = _initializer15$1 && _initializer15$1();
          this.prefabRootNode = _initializer16$1 && _initializer16$1();
          this.mountedChildren = _initializer17$1 && _initializer17$1();
          this.mountedComponents = _initializer18$1 && _initializer18$1();
          this.propertyOverrides = _initializer19$1 && _initializer19$1();
          this.removedComponents = _initializer20$1 && _initializer20$1();
          this.targetMap = {};
          this.expanded = false;
        }

        var _proto4 = PrefabInstance.prototype;

        _proto4.findPropertyOverride = function findPropertyOverride(localID, propPath) {
        };

        _proto4.removePropertyOverride = function removePropertyOverride(localID, propPath) {
        };

        return PrefabInstance;
      }(), (_initializer15$1 = applyDecoratedInitializer(_class20$1.prototype, "fileId", [serializable], function () {
        return '';
      }), _initializer16$1 = applyDecoratedInitializer(_class20$1.prototype, "prefabRootNode", [serializable, _dec17$1], null), _initializer17$1 = applyDecoratedInitializer(_class20$1.prototype, "mountedChildren", [serializable, _dec18$1], function () {
        return [];
      }), _initializer18$1 = applyDecoratedInitializer(_class20$1.prototype, "mountedComponents", [serializable, _dec19$1], function () {
        return [];
      }), _initializer19$1 = applyDecoratedInitializer(_class20$1.prototype, "propertyOverrides", [serializable, _dec20$1], function () {
        return [];
      }), _initializer20$1 = applyDecoratedInitializer(_class20$1.prototype, "removedComponents", [serializable, _dec21$1], function () {
        return [];
      })), _class20$1)) || _class19$1);
      var PrefabInfo = (_dec22$1 = ccclass('cc.PrefabInfo'), _dec23$1 = type(Node$1), _dec24$1 = type(PrefabInstance), _dec25$1 = type([TargetOverrideInfo]), _dec22$1(_class22 = (_class23 = function PrefabInfo() {
        this.root = _initializer21$1 && _initializer21$1();
        this.asset = _initializer22$1 && _initializer22$1();
        this.fileId = _initializer23$1 && _initializer23$1();
        this.instance = _initializer24$1 && _initializer24$1();
        this.targetOverrides = _initializer25$1 && _initializer25$1();
        this.nestedPrefabInstanceRoots = _initializer26$1 && _initializer26$1();
      }, (_initializer21$1 = applyDecoratedInitializer(_class23.prototype, "root", [serializable, _dec23$1], null), _initializer22$1 = applyDecoratedInitializer(_class23.prototype, "asset", [serializable], null), _initializer23$1 = applyDecoratedInitializer(_class23.prototype, "fileId", [serializable], function () {
        return '';
      }), _initializer24$1 = applyDecoratedInitializer(_class23.prototype, "instance", [serializable, _dec24$1], null), _initializer25$1 = applyDecoratedInitializer(_class23.prototype, "targetOverrides", [serializable, _dec25$1], null), _initializer26$1 = applyDecoratedInitializer(_class23.prototype, "nestedPrefabInstanceRoots", [serializable], null)), _class23)) || _class22);
      legacyCC._PrefabInfo = PrefabInfo;

      function createNodeWithPrefab(node) {
        var prefabInfo = node._prefab;

        if (!prefabInfo) {
          return;
        }

        var prefabInstance = prefabInfo.instance;

        if (!prefabInstance) {
          return;
        }

        if (!prefabInfo.asset) {
          {
            errorID(3701, node.name);
          }

          prefabInfo.instance = undefined;
          return;
        }

        var _objFlags = node._objFlags;
        var _parent = node._parent;
        var _id = node._id;
        var _prefab = node._prefab;
        var editorExtras = node[editorExtrasTag];
        legacyCC.game._isCloning = true;

        {
          prefabInfo.asset._doInstantiate(node);
        }

        legacyCC.game._isCloning = false;
        node._objFlags = _objFlags;
        node._parent = _parent;
        node._id = _id;

        if (node._prefab) {
          node._prefab.instance = _prefab === null || _prefab === void 0 ? void 0 : _prefab.instance;
        }
      }
      function generateTargetMap(node, targetMap, isRoot) {
        var _node$_prefab;

        if (!targetMap) {
          return;
        }

        if (!node) {
          return;
        }

        var curTargetMap = targetMap;
        var prefabInstance = (_node$_prefab = node._prefab) === null || _node$_prefab === void 0 ? void 0 : _node$_prefab.instance;

        if (!isRoot && prefabInstance) {
          targetMap[prefabInstance.fileId] = {};
          curTargetMap = targetMap[prefabInstance.fileId];
        }

        var prefabInfo = node._prefab;

        if (prefabInfo) {
          curTargetMap[prefabInfo.fileId] = node;
        }

        var components = node.components;

        for (var i = 0; i < components.length; i++) {
          var comp = components[i];

          if (comp.__prefab) {
            curTargetMap[comp.__prefab.fileId] = comp;
          }
        }

        for (var _i = 0; _i < node.children.length; _i++) {
          var childNode = node.children[_i];
          generateTargetMap(childNode, curTargetMap, false);
        }
      }
      function getTarget(localID, targetMap) {
        if (!localID) {
          return null;
        }

        var target = null;
        var targetIter = targetMap;

        for (var i = 0; i < localID.length; i++) {
          if (!targetIter) {
            return null;
          }

          targetIter = targetIter[localID[i]];
        }

        target = targetIter;
        return target;
      }
      function applyMountedChildren(node, mountedChildren, targetMap) {
        if (!mountedChildren) {
          return;
        }

        for (var i = 0; i < mountedChildren.length; i++) {
          var childInfo = mountedChildren[i];

          if (childInfo && childInfo.targetInfo) {
            var target = getTarget(childInfo.targetInfo.localID, targetMap);

            if (!target) {
              continue;
            }

            var curTargetMap = targetMap;
            var localID = childInfo.targetInfo.localID;

            if (localID.length > 0) {
              for (var _i2 = 0; _i2 < localID.length - 1; _i2++) {
                curTargetMap = curTargetMap[localID[_i2]];
              }
            }

            if (childInfo.nodes) {
              for (var _i3 = 0; _i3 < childInfo.nodes.length; _i3++) {
                var childNode = childInfo.nodes[_i3];

                if (!childNode || target._children.includes(childNode)) {
                  continue;
                }

                target._children.push(childNode);

                childNode._parent = target;

                generateTargetMap(childNode, curTargetMap, false);
                childNode._siblingIndex = target._children.length - 1;
                expandPrefabInstanceNode(childNode, true);
              }
            }
          }
        }
      }
      function applyMountedComponents(node, mountedComponents, targetMap) {
        if (!mountedComponents) {
          return;
        }

        for (var i = 0; i < mountedComponents.length; i++) {
          var componentsInfo = mountedComponents[i];

          if (componentsInfo && componentsInfo.targetInfo) {
            var target = getTarget(componentsInfo.targetInfo.localID, targetMap);

            if (!target) {
              continue;
            }

            if (componentsInfo.components) {
              for (var _i4 = 0; _i4 < componentsInfo.components.length; _i4++) {
                var comp = componentsInfo.components[_i4];

                if (!comp) {
                  continue;
                }

                comp.node = target;

                target._components.push(comp);
              }
            }
          }
        }
      }
      function applyRemovedComponents(node, removedComponents, targetMap) {
        if (!removedComponents) {
          return;
        }

        for (var i = 0; i < removedComponents.length; i++) {
          var targetInfo = removedComponents[i];

          if (targetInfo) {
            var target = getTarget(targetInfo.localID, targetMap);

            if (!target || !target.node) {
              continue;
            }

            var index = target.node.components.indexOf(target);

            if (index >= 0) {
              target.node._components.splice(index, 1);
            }
          }
        }
      }
      function applyPropertyOverrides(node, propertyOverrides, targetMap) {
        if (propertyOverrides.length <= 0) {
          return;
        }

        var target = null;

        for (var i = 0; i < propertyOverrides.length; i++) {
          var propOverride = propertyOverrides[i];

          if (propOverride && propOverride.targetInfo) {
            var targetInfo = propOverride.targetInfo;
            target = getTarget(targetInfo.localID, targetMap);

            if (!target) {
              continue;
            }

            var targetPropOwner = target;
            var propertyPath = propOverride.propertyPath.slice();

            if (propertyPath.length > 0) {
              var targetPropName = propertyPath.pop();

              if (!targetPropName) {
                continue;
              }

              for (var _i5 = 0; _i5 < propertyPath.length; _i5++) {
                var propName = propertyPath[_i5];
                targetPropOwner = targetPropOwner[propName];

                if (!targetPropOwner) {
                  break;
                }
              }

              if (!targetPropOwner) {
                continue;
              }

              if (Array.isArray(targetPropOwner)) {
                if (targetPropName === 'length') {
                  targetPropOwner[targetPropName] = propOverride.value;
                } else {
                  var index = Number.parseInt(targetPropName);

                  if (Number.isInteger(index) && index < targetPropOwner.length) {
                    targetPropOwner[targetPropName] = propOverride.value;
                  }
                }
              } else if (targetPropOwner[targetPropName] instanceof ValueType) {
                targetPropOwner[targetPropName].set(propOverride.value);
              } else {
                targetPropOwner[targetPropName] = propOverride.value;
              }
            }
          }
        }
      }
      function applyTargetOverrides(node) {
        var _node$_prefab2;

        var targetOverrides = (_node$_prefab2 = node._prefab) === null || _node$_prefab2 === void 0 ? void 0 : _node$_prefab2.targetOverrides;

        if (targetOverrides) {
          for (var i = 0; i < targetOverrides.length; i++) {
            var _targetOverride$targe, _targetOverride$targe2;

            var targetOverride = targetOverrides[i];
            var source = targetOverride.source;
            var sourceInfo = targetOverride.sourceInfo;

            if (sourceInfo) {
              var _targetOverride$sourc, _targetOverride$sourc2;

              var sourceInstance = (_targetOverride$sourc = targetOverride.source) === null || _targetOverride$sourc === void 0 ? void 0 : (_targetOverride$sourc2 = _targetOverride$sourc._prefab) === null || _targetOverride$sourc2 === void 0 ? void 0 : _targetOverride$sourc2.instance;

              if (sourceInstance && sourceInstance.targetMap) {
                source = getTarget(sourceInfo.localID, sourceInstance.targetMap);
              }
            }

            if (!source) {
              continue;
            }

            var target = null;
            var targetInfo = targetOverride.targetInfo;

            if (!targetInfo) {
              continue;
            }

            var targetInstance = (_targetOverride$targe = targetOverride.target) === null || _targetOverride$targe === void 0 ? void 0 : (_targetOverride$targe2 = _targetOverride$targe._prefab) === null || _targetOverride$targe2 === void 0 ? void 0 : _targetOverride$targe2.instance;

            if (!targetInstance || !targetInstance.targetMap) {
              continue;
            }

            target = getTarget(targetInfo.localID, targetInstance.targetMap);

            if (!target) {
              continue;
            }

            var propertyPath = targetOverride.propertyPath.slice();
            var targetPropOwner = source;

            if (propertyPath.length > 0) {
              var targetPropName = propertyPath.pop();

              if (!targetPropName) {
                return;
              }

              for (var _i6 = 0; _i6 < propertyPath.length; _i6++) {
                var propName = propertyPath[_i6];
                targetPropOwner = targetPropOwner[propName];

                if (!targetPropOwner) {
                  break;
                }
              }

              if (!targetPropOwner) {
                continue;
              }

              targetPropOwner[targetPropName] = target;
            }
          }
        }
      }
      function expandPrefabInstanceNode(node, recursively) {
        if (recursively === void 0) {
          recursively = false;
        }

        var prefabInfo = node._prefab;
        var prefabInstance = prefabInfo === null || prefabInfo === void 0 ? void 0 : prefabInfo.instance;

        if (prefabInstance && !prefabInstance.expanded) {
          createNodeWithPrefab(node);

          if (recursively) {
            if (node && node.children) {
              node.children.forEach(function (child) {
                expandPrefabInstanceNode(child, true);
              });
            }
          }

          var targetMap = {};
          prefabInstance.targetMap = targetMap;
          generateTargetMap(node, targetMap, true);
          applyMountedChildren(node, prefabInstance.mountedChildren, targetMap);
          applyRemovedComponents(node, prefabInstance.removedComponents, targetMap);
          applyMountedComponents(node, prefabInstance.mountedComponents, targetMap);
          applyPropertyOverrides(node, prefabInstance.propertyOverrides, targetMap);
          prefabInstance.expanded = true;
        } else if (recursively) {
          if (node && node.children) {
            node.children.forEach(function (child) {
              expandPrefabInstanceNode(child, true);
            });
          }
        }
      }
      function expandNestedPrefabInstanceNode(node) {
        var prefabInfo = node._prefab;

        if (prefabInfo && prefabInfo.nestedPrefabInstanceRoots) {
          prefabInfo.nestedPrefabInstanceRoots.forEach(function (instanceNode) {
            expandPrefabInstanceNode(instanceNode);

            {
              var _instanceNode$_prefab, _instanceNode$_prefab2;

              applyNodeAndComponentId(instanceNode, (_instanceNode$_prefab = instanceNode._prefab) === null || _instanceNode$_prefab === void 0 ? void 0 : (_instanceNode$_prefab2 = _instanceNode$_prefab.instance) === null || _instanceNode$_prefab2 === void 0 ? void 0 : _instanceNode$_prefab2.fileId);
            }
          });
        }
      }
      function applyNodeAndComponentId(prefabInstanceNode, rootId) {
        var components = prefabInstanceNode.components,
            children = prefabInstanceNode.children;

        for (var i = 0; i < components.length; i++) {
          var _comp$__prefab$fileId, _comp$__prefab;

          var comp = components[i];
          var fileID = (_comp$__prefab$fileId = (_comp$__prefab = comp.__prefab) === null || _comp$__prefab === void 0 ? void 0 : _comp$__prefab.fileId) !== null && _comp$__prefab$fileId !== void 0 ? _comp$__prefab$fileId : '';
          comp._id = "" + rootId + fileID;
        }

        for (var _i7 = 0; _i7 < children.length; _i7++) {
          var child = children[_i7];
          var prefabInfo = child._prefab;
          var fileId = prefabInfo !== null && prefabInfo !== void 0 && prefabInfo.instance ? prefabInfo.instance.fileId : prefabInfo === null || prefabInfo === void 0 ? void 0 : prefabInfo.fileId;
          if (!fileId) continue;
          child._id = "" + rootId + fileId;

          if (!(prefabInfo !== null && prefabInfo !== void 0 && prefabInfo.instance)) {
            applyNodeAndComponentId(child, rootId);
          }
        }
      }

      var utils = /*#__PURE__*/Object.freeze({
        __proto__: null,
        createNodeWithPrefab: createNodeWithPrefab,
        generateTargetMap: generateTargetMap,
        getTarget: getTarget,
        applyMountedChildren: applyMountedChildren,
        applyMountedComponents: applyMountedComponents,
        applyRemovedComponents: applyRemovedComponents,
        applyPropertyOverrides: applyPropertyOverrides,
        applyTargetOverrides: applyTargetOverrides,
        expandPrefabInstanceNode: expandPrefabInstanceNode,
        expandNestedPrefabInstanceNode: expandNestedPrefabInstanceNode,
        applyNodeAndComponentId: applyNodeAndComponentId,
        TargetInfo: TargetInfo,
        TargetOverrideInfo: TargetOverrideInfo,
        CompPrefabInfo: CompPrefabInfo,
        PropertyOverrideInfo: PropertyOverrideInfo,
        MountedChildrenInfo: MountedChildrenInfo,
        MountedComponentsInfo: MountedComponentsInfo,
        PrefabInstance: PrefabInstance,
        PrefabInfo: PrefabInfo
      });

      var _dec$m, _class$m, _class2$j, _initializer$g, _initializer2$b;
      var Scene = exports('Scene', (_dec$m = ccclass('cc.Scene'), _dec$m(_class$m = (_class2$j = function (_Node) {
        _inheritsLoose(Scene, _Node);

        var _proto = Scene.prototype;

        _proto._updateScene = function _updateScene() {
          this._scene = this;
        };

        function Scene(name) {
          var _this;

          _this = _Node.call(this, name) || this;
          _this.autoReleaseAssets = _initializer$g && _initializer$g();
          _this._globals = _initializer2$b && _initializer2$b();
          _this.dependAssets = null;
          _this._renderScene = null;
          _this._inited = void 0;
          _this._prefabSyncedInLiveReload = false;
          _this._activeInHierarchy = false;

          if (legacyCC.director && legacyCC.director.root) {
            _this._renderScene = legacyCC.director.root.createScene({});
          }

          _this._inited = legacyCC.game ? !legacyCC.game._isCloning : true;
          return _this;
        }

        _proto.destroy = function destroy() {
          var success = CCObject.prototype.destroy.call(this);

          if (success) {
            var children = this._children;

            for (var i = 0; i < children.length; ++i) {
              children[i].active = false;
            }
          }

          if (this._renderScene) legacyCC.director.root.destroyScene(this._renderScene);
          this._active = false;
          this._activeInHierarchy = false;
          return success;
        };

        _proto.addComponent = function addComponent() {
          throw new Error(getError(3822));
        };

        _proto._onHierarchyChanged = function _onHierarchyChanged() {};

        _proto._onPostActivated = function _onPostActivated(active) {};

        _proto._onBatchCreated = function _onBatchCreated(dontSyncChildPrefab) {
          var len = this._children.length;

          for (var i = 0; i < len; ++i) {
            this._children[i]._siblingIndex = i;

            this._children[i]._onBatchCreated(dontSyncChildPrefab);
          }
        };

        _proto.updateWorldTransform = function updateWorldTransform() {};

        _proto._instantiate = function _instantiate() {};

        _proto._load = function _load() {
          if (!this._inited) {

            expandNestedPrefabInstanceNode(this);
            applyTargetOverrides(this);

            this._onBatchCreated(EDITOR );

            this._inited = true;
          }

          this.walk(Node$1._setScene);
        };

        _proto._activate = function _activate(active) {
          active = active !== false;

          legacyCC.director._nodeActivator.activateNode(this, active);

          {
            this._globals.activate(this);
          }
        };

        _createClass(Scene, [{
          key: "renderScene",
          get: function get() {
            return this._renderScene;
          }
        }, {
          key: "globals",
          get: function get() {
            return this._globals;
          }
        }]);

        return Scene;
      }(Node$1), (_initializer$g = applyDecoratedInitializer(_class2$j.prototype, "autoReleaseAssets", [serializable], function () {
        return false;
      }), _initializer2$b = applyDecoratedInitializer(_class2$j.prototype, "_globals", [serializable], function () {
        return new SceneGlobals();
      })), _class2$j)) || _class$m));
      legacyCC.Scene = Scene;

      var _dec$n, _class$n, _class2$k, _initializer$h;
      var SceneAsset = exports('SceneAsset', (_dec$n = ccclass('cc.SceneAsset'), _dec$n(_class$n = (_class2$k = function (_Asset) {
        _inheritsLoose(SceneAsset, _Asset);

        function SceneAsset() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Asset.call.apply(_Asset, [this].concat(args)) || this;
          _this.scene = _initializer$h && _initializer$h();
          return _this;
        }

        var _proto = SceneAsset.prototype;

        _proto.initDefault = function initDefault(uuid) {
          _Asset.prototype.initDefault.call(this, uuid);

          this.scene = new Scene('New Scene');
        };

        _proto.validate = function validate() {
          return !!this.scene;
        };

        return SceneAsset;
      }(Asset), (_initializer$h = applyDecoratedInitializer(_class2$k.prototype, "scene", [serializable], function () {
        return null;
      })), _class2$k)) || _class$n));
      legacyCC.SceneAsset = SceneAsset;

      var AntiAliasing;

      (function (AntiAliasing) {
        AntiAliasing[AntiAliasing["NONE"] = 0] = "NONE";
        AntiAliasing[AntiAliasing["FXAA"] = 1] = "FXAA";
        AntiAliasing[AntiAliasing["FXAAHQ"] = 2] = "FXAAHQ";
      })(AntiAliasing || (AntiAliasing = {}));

      function validPunctualLightsCulling$1(pipeline, camera) {
        var sceneData = pipeline.pipelineSceneData;
        var validPunctualLights = sceneData.validPunctualLights;
        validPunctualLights.length = 0;

        var _sphere = Sphere.create(0, 0, 0, 1);

        var _ref = camera.scene,
            spotLights = _ref.spotLights;

        for (var i = 0; i < spotLights.length; i++) {
          var light = spotLights[i];

          if (light.baked) {
            continue;
          }

          Sphere.set(_sphere, light.position.x, light.position.y, light.position.z, light.range);

          if (intersect.sphereFrustum(_sphere, camera.frustum)) {
            validPunctualLights.push(light);
          }
        }

        var _ref2 = camera.scene,
            sphereLights = _ref2.sphereLights;

        for (var _i = 0; _i < sphereLights.length; _i++) {
          var _light = sphereLights[_i];

          if (_light.baked) {
            continue;
          }

          Sphere.set(_sphere, _light.position.x, _light.position.y, _light.position.z, _light.range);

          if (intersect.sphereFrustum(_sphere, camera.frustum)) {
            validPunctualLights.push(_light);
          }
        }
      }
      var _cameras = [];
      function getCameraUniqueID(camera) {
        if (!_cameras.includes(camera)) {
          _cameras.push(camera);
        }

        return _cameras.indexOf(camera);
      }
      function getLoadOpOfClearFlag(clearFlag, attachment) {
        var loadOp = LoadOp.CLEAR;

        if (!(clearFlag & ClearFlagBit.COLOR) && attachment === AttachmentType.RENDER_TARGET) {
          if (clearFlag & SKYBOX_FLAG) {
            loadOp = LoadOp.CLEAR;
          } else {
            loadOp = LoadOp.LOAD;
          }
        }

        if ((clearFlag & ClearFlagBit.DEPTH_STENCIL) !== ClearFlagBit.DEPTH_STENCIL && attachment === AttachmentType.DEPTH_STENCIL) {
          if (!(clearFlag & ClearFlagBit.DEPTH)) loadOp = LoadOp.LOAD;
          if (!(clearFlag & ClearFlagBit.STENCIL)) loadOp = LoadOp.LOAD;
        }

        return loadOp;
      }
      function getRenderArea(camera, width, height, light, level) {
        if (light === void 0) {
          light = null;
        }

        if (level === void 0) {
          level = 0;
        }

        var out = new Rect$1();
        var vp = camera ? camera.viewport : new Rect$1(0, 0, 1, 1);
        var w = width;
        var h = height;
        out.x = vp.x * w;
        out.y = vp.y * h;
        out.width = vp.width * w;
        out.height = vp.height * h;

        if (light) {
          switch (light.type) {
            case LightType.DIRECTIONAL:
              {
                var mainLight = light;

                if (mainLight.shadowFixedArea || mainLight.csmLevel === CSMLevel.LEVEL_1) {
                  out.x = 0;
                  out.y = 0;
                  out.width = w;
                  out.height = h;
                } else {
                  var screenSpaceSignY = legacyCC.director.root.device.capabilities.screenSpaceSignY;
                  out.x = level % 2 * 0.5 * w;

                  if (screenSpaceSignY) {
                    out.y = (1 - Math.floor(level / 2)) * 0.5 * h;
                  } else {
                    out.y = Math.floor(level / 2) * 0.5 * h;
                  }

                  out.width = 0.5 * w;
                  out.height = 0.5 * h;
                }

                break;
              }

            case LightType.SPOT:
              {
                out.x = 0;
                out.y = 0;
                out.width = w;
                out.height = h;
                break;
              }
          }
        }

        return out;
      }

      var PostInfo = function () {
        var _proto3 = PostInfo.prototype;

        _proto3._init = function _init() {
          this.postMaterial = new Material();
          this.postMaterial.name = 'builtin-post-process-material';

          if (macro.ENABLE_ANTIALIAS_FXAA) {
            this.antiAliasing = AntiAliasing.FXAA;
          }

          this.postMaterial.initialize({
            effectName: 'pipeline/post-process',
            defines: {
              ANTIALIAS_TYPE: this.antiAliasing
            }
          });

          for (var i = 0; i < this.postMaterial.passes.length; ++i) {
            this.postMaterial.passes[i].tryCompile();
          }
        };

        function PostInfo(antiAliasing) {
          if (antiAliasing === void 0) {
            antiAliasing = AntiAliasing.NONE;
          }

          this.antiAliasing = AntiAliasing.NONE;
          this.antiAliasing = antiAliasing;

          this._init();
        }

        return PostInfo;
      }();

      var postInfo = null;
      function buildPostprocessPass(camera, ppl, inputTex, antiAliasing) {
        if (antiAliasing === void 0) {
          antiAliasing = AntiAliasing.NONE;
        }

        if (!postInfo || postInfo && postInfo.antiAliasing !== antiAliasing) {
          postInfo = new PostInfo(antiAliasing);
        }

        var cameraID = getCameraUniqueID(camera);
        var area = getRenderArea(camera, camera.window.width, camera.window.height);
        var width = area.width;
        var height = area.height;
        var postprocessPassRTName = "postprocessPassRTName" + cameraID;
        var postprocessPassDS = "postprocessPassDS" + cameraID;

        if (!ppl.containsResource(postprocessPassRTName)) {
          ppl.addRenderTexture(postprocessPassRTName, Format.BGRA8, width, height, camera.window);
          ppl.addDepthStencil(postprocessPassDS, Format.DEPTH_STENCIL, width, height, ResourceResidency.MANAGED);
        }

        ppl.updateRenderWindow(postprocessPassRTName, camera.window);
        ppl.updateDepthStencil(postprocessPassDS, width, height);
        var postprocessPass = ppl.addRasterPass(width, height, 'post-process');
        postprocessPass.name = "CameraPostprocessPass" + cameraID;
        postprocessPass.setViewport(new Viewport(area.x, area.y, area.width, area.height));

        if (ppl.containsResource(inputTex)) {
          var computeView = new ComputeView();
          computeView.name = 'outputResultMap';
          postprocessPass.addComputeView(inputTex, computeView);
        }

        var postClearColor = new Color$1(0, 0, 0, camera.clearColor.w);

        if (camera.clearFlag & ClearFlagBit.COLOR) {
          postClearColor.x = camera.clearColor.x;
          postClearColor.y = camera.clearColor.y;
          postClearColor.z = camera.clearColor.z;
        }

        var postprocessPassView = new RasterView('_', AccessType.WRITE, AttachmentType.RENDER_TARGET, getLoadOpOfClearFlag(camera.clearFlag, AttachmentType.RENDER_TARGET), StoreOp.STORE, camera.clearFlag, postClearColor);
        var postprocessPassDSView = new RasterView('_', AccessType.WRITE, AttachmentType.DEPTH_STENCIL, getLoadOpOfClearFlag(camera.clearFlag, AttachmentType.DEPTH_STENCIL), StoreOp.STORE, camera.clearFlag, new Color$1(camera.clearDepth, camera.clearStencil, 0, 0));
        postprocessPass.addRasterView(postprocessPassRTName, postprocessPassView);
        postprocessPass.addRasterView(postprocessPassDS, postprocessPassDSView);
        postprocessPass.addQueue(QueueHint.NONE).addFullscreenQuad(postInfo.postMaterial, 0, SceneFlags.NONE);
        postprocessPass.addQueue(QueueHint.RENDER_TRANSPARENT).addSceneOfCamera(camera, new LightInfo(), SceneFlags.UI);

        if (getProfilerCamera() === camera) {
          postprocessPass.showStatistics = true;
        }

        return {
          rtName: postprocessPassRTName,
          dsName: postprocessPassDS
        };
      }
      function buildForwardPass(camera, ppl, isOffScreen) {
        var cameraID = getCameraUniqueID(camera);
        var cameraName = "Camera" + cameraID;
        var cameraInfo = buildShadowPasses(cameraName, camera, ppl);
        var area = getRenderArea(camera, camera.window.width, camera.window.height);
        var width = area.width;
        var height = area.height;
        var forwardPassRTName = "dsForwardPassColor" + cameraName;
        var forwardPassDSName = "dsForwardPassDS" + cameraName;

        if (!ppl.containsResource(forwardPassRTName)) {
          if (!isOffScreen) {
            ppl.addRenderTexture(forwardPassRTName, Format.BGRA8, width, height, camera.window);
          } else {
            ppl.addRenderTarget(forwardPassRTName, Format.RGBA16F, width, height, ResourceResidency.MANAGED);
          }

          ppl.addDepthStencil(forwardPassDSName, Format.DEPTH_STENCIL, width, height, ResourceResidency.MANAGED);
        }

        if (!isOffScreen) {
          ppl.updateRenderWindow(forwardPassRTName, camera.window);
          ppl.updateDepthStencil(forwardPassDSName, width, height);
        } else {
          ppl.updateRenderTarget(forwardPassRTName, width, height);
          ppl.updateDepthStencil(forwardPassDSName, width, height);
        }

        var forwardPass = ppl.addRasterPass(width, height, 'default');
        forwardPass.name = "CameraForwardPass" + cameraID;
        forwardPass.setViewport(new Viewport(area.x, area.y, width, height));

        for (var _iterator = _createForOfIteratorHelperLoose(cameraInfo.mainLightShadowNames), _step; !(_step = _iterator()).done;) {
          var dirShadowName = _step.value;

          if (ppl.containsResource(dirShadowName)) {
            var computeView = new ComputeView('cc_shadowMap');
            forwardPass.addComputeView(dirShadowName, computeView);
          }
        }

        for (var _iterator2 = _createForOfIteratorHelperLoose(cameraInfo.spotLightShadowNames), _step2; !(_step2 = _iterator2()).done;) {
          var spotShadowName = _step2.value;

          if (ppl.containsResource(spotShadowName)) {
            var _computeView3 = new ComputeView('cc_spotShadowMap');

            forwardPass.addComputeView(spotShadowName, _computeView3);
          }
        }

        var passView = new RasterView('_', AccessType.WRITE, AttachmentType.RENDER_TARGET, isOffScreen ? LoadOp.CLEAR : getLoadOpOfClearFlag(camera.clearFlag, AttachmentType.RENDER_TARGET), StoreOp.STORE, camera.clearFlag, new Color$1(camera.clearColor.x, camera.clearColor.y, camera.clearColor.z, camera.clearColor.w));
        var passDSView = new RasterView('_', AccessType.WRITE, AttachmentType.DEPTH_STENCIL, isOffScreen ? LoadOp.CLEAR : getLoadOpOfClearFlag(camera.clearFlag, AttachmentType.DEPTH_STENCIL), StoreOp.STORE, camera.clearFlag, new Color$1(camera.clearDepth, camera.clearStencil, 0, 0));
        forwardPass.addRasterView(forwardPassRTName, passView);
        forwardPass.addRasterView(forwardPassDSName, passDSView);
        forwardPass.addQueue(QueueHint.RENDER_OPAQUE).addSceneOfCamera(camera, new LightInfo(), SceneFlags.OPAQUE_OBJECT | SceneFlags.PLANAR_SHADOW | SceneFlags.CUTOUT_OBJECT | SceneFlags.DEFAULT_LIGHTING | SceneFlags.DRAW_INSTANCING);
        var sceneFlags = SceneFlags.TRANSPARENT_OBJECT | SceneFlags.GEOMETRY;

        if (!isOffScreen) {
          sceneFlags |= SceneFlags.UI;
          forwardPass.showStatistics = true;
        }

        forwardPass.addQueue(QueueHint.RENDER_TRANSPARENT).addSceneOfCamera(camera, new LightInfo(), sceneFlags);
        return {
          rtName: forwardPassRTName,
          dsName: forwardPassDSName
        };
      }
      function buildShadowPass(passName, ppl, camera, light, level, width, height) {
        var fboW = width;
        var fboH = height;
        var area = getRenderArea(camera, width, height, light, level);
        width = area.width;
        height = area.height;
        var device = ppl.device;
        var shadowMapName = passName;

        if (!ppl.containsResource(shadowMapName)) {
          var format = supportsR32FloatTexture(device) ? Format.R32F : Format.RGBA8;
          ppl.addRenderTarget(shadowMapName, format, fboW, fboH, ResourceResidency.MANAGED);
          ppl.addDepthStencil(shadowMapName + "Depth", Format.DEPTH_STENCIL, fboW, fboH, ResourceResidency.MANAGED);
        }

        ppl.updateRenderTarget(shadowMapName, fboW, fboH);
        ppl.updateDepthStencil(shadowMapName + "Depth", fboW, fboH);
        var pass = ppl.addRasterPass(width, height, 'default');
        pass.name = passName;
        pass.setViewport(new Viewport(area.x, area.y, area.width, area.height));
        pass.addRasterView(shadowMapName, new RasterView('_', AccessType.WRITE, AttachmentType.RENDER_TARGET, LoadOp.CLEAR, StoreOp.STORE, ClearFlagBit.COLOR, new Color$1(1, 1, 1, camera.clearColor.w)));
        pass.addRasterView(shadowMapName + "Depth", new RasterView('_', AccessType.WRITE, AttachmentType.DEPTH_STENCIL, LoadOp.CLEAR, StoreOp.DISCARD, ClearFlagBit.DEPTH_STENCIL, new Color$1(camera.clearDepth, camera.clearStencil, 0, 0)));
        var queue = pass.addQueue(QueueHint.RENDER_OPAQUE);
        queue.addSceneOfCamera(camera, new LightInfo(light, level), SceneFlags.SHADOW_CASTER);
      }

      var CameraInfo = function CameraInfo() {
        this.shadowEnabled = false;
        this.mainLightShadowNames = new Array();
        this.spotLightShadowNames = new Array();
      };

      function buildShadowPasses(cameraName, camera, ppl) {
        validPunctualLightsCulling$1(ppl, camera);
        var pipeline = ppl;
        var shadowInfo = pipeline.pipelineSceneData.shadows;
        var validPunctualLights = ppl.pipelineSceneData.validPunctualLights;
        var cameraInfo = new CameraInfo();
        var shadows = ppl.pipelineSceneData.shadows;

        if (!shadowInfo.enabled || shadowInfo.type !== ShadowType.ShadowMap) {
          return cameraInfo;
        }

        cameraInfo.shadowEnabled = true;
        var _validLights = [];
        var n = 0;
        var m = 0;

        for (; n < shadowInfo.maxReceived && m < validPunctualLights.length;) {
          var light = validPunctualLights[m];

          if (light.type === LightType.SPOT) {
            var spotLight = light;

            if (spotLight.shadowEnabled) {
              _validLights.push(light);

              n++;
            }
          }

          m++;
        }

        var _ref3 = camera.scene,
            mainLight = _ref3.mainLight;
        var mapWidth = shadows.size.x;
        var mapHeight = shadows.size.y;

        if (mainLight && mainLight.shadowEnabled) {
          cameraInfo.mainLightShadowNames[0] = "MainLightShadow" + cameraName;

          if (mainLight.shadowFixedArea) {
            buildShadowPass(cameraInfo.mainLightShadowNames[0], ppl, camera, mainLight, 0, mapWidth, mapHeight);
          } else {
            var csmLevel = pipeline.pipelineSceneData.csmSupported ? mainLight.csmLevel : 1;

            for (var i = 0; i < csmLevel; i++) {
              cameraInfo.mainLightShadowNames[i] = "MainLightShadow" + cameraName;
              buildShadowPass(cameraInfo.mainLightShadowNames[i], ppl, camera, mainLight, i, mapWidth, mapHeight);
            }
          }
        }

        for (var l = 0; l < _validLights.length; l++) {
          var _light2 = _validLights[l];
          var passName = "SpotLightShadow" + l.toString() + cameraName;
          cameraInfo.spotLightShadowNames[l] = passName;
          buildShadowPass(passName, ppl, camera, _light2, 0, mapWidth, mapHeight);
        }

        return cameraInfo;
      }
      var GBufferInfo = function GBufferInfo() {};
      function buildGBufferPass(camera, ppl) {
        var cameraID = getCameraUniqueID(camera);
        var area = getRenderArea(camera, camera.window.width, camera.window.height);
        var width = area.width;
        var height = area.height;
        var gBufferPassRTName = "gBufferPassColorCamera";
        var gBufferPassNormal = "gBufferPassNormal";
        var gBufferPassEmissive = "gBufferPassEmissive";
        var gBufferPassDSName = "gBufferPassDSCamera";

        if (!ppl.containsResource(gBufferPassRTName)) {
          var colFormat = Format.RGBA16F;
          ppl.addRenderTarget(gBufferPassRTName, colFormat, width, height, ResourceResidency.MANAGED);
          ppl.addRenderTarget(gBufferPassNormal, colFormat, width, height, ResourceResidency.MANAGED);
          ppl.addRenderTarget(gBufferPassEmissive, colFormat, width, height, ResourceResidency.MANAGED);
          ppl.addDepthStencil(gBufferPassDSName, Format.DEPTH_STENCIL, width, height, ResourceResidency.MANAGED);
        }

        ppl.updateRenderTarget(gBufferPassRTName, width, height);
        ppl.updateRenderTarget(gBufferPassNormal, width, height);
        ppl.updateRenderTarget(gBufferPassEmissive, width, height);
        ppl.updateDepthStencil(gBufferPassDSName, width, height);
        var gBufferPass = ppl.addRasterPass(width, height, 'default');
        gBufferPass.name = "CameraGBufferPass" + cameraID;
        gBufferPass.setViewport(new Viewport(area.x, area.y, area.width, area.height));
        var rtColor = new Color$1(0, 0, 0, 0);

        if (camera.clearFlag & ClearFlagBit.COLOR) {
          if (ppl.pipelineSceneData.isHDR) {
            SRGBToLinear(rtColor, camera.clearColor);
          } else {
            rtColor.x = camera.clearColor.x;
            rtColor.y = camera.clearColor.y;
            rtColor.z = camera.clearColor.z;
          }
        }

        var passColorView = new RasterView('_', AccessType.WRITE, AttachmentType.RENDER_TARGET, LoadOp.CLEAR, StoreOp.STORE, camera.clearFlag, rtColor);
        var passNormalView = new RasterView('_', AccessType.WRITE, AttachmentType.RENDER_TARGET, LoadOp.CLEAR, StoreOp.STORE, camera.clearFlag, new Color$1(0, 0, 0, 0));
        var passEmissiveView = new RasterView('_', AccessType.WRITE, AttachmentType.RENDER_TARGET, LoadOp.CLEAR, StoreOp.STORE, camera.clearFlag, new Color$1(0, 0, 0, 0));
        var passDSView = new RasterView('_', AccessType.WRITE, AttachmentType.DEPTH_STENCIL, LoadOp.CLEAR, StoreOp.STORE, camera.clearFlag, new Color$1(camera.clearDepth, camera.clearStencil, 0, 0));
        gBufferPass.addRasterView(gBufferPassRTName, passColorView);
        gBufferPass.addRasterView(gBufferPassNormal, passNormalView);
        gBufferPass.addRasterView(gBufferPassEmissive, passEmissiveView);
        gBufferPass.addRasterView(gBufferPassDSName, passDSView);
        gBufferPass.addQueue(QueueHint.RENDER_OPAQUE).addSceneOfCamera(camera, new LightInfo(), SceneFlags.OPAQUE_OBJECT | SceneFlags.CUTOUT_OBJECT);
        var gBufferInfo = new GBufferInfo();
        gBufferInfo.color = gBufferPassRTName;
        gBufferInfo.normal = gBufferPassNormal;
        gBufferInfo.emissive = gBufferPassEmissive;
        gBufferInfo.ds = gBufferPassDSName;
        return gBufferInfo;
      }

      var LightingInfo = function () {
        var _proto4 = LightingInfo.prototype;

        _proto4._init = function _init() {
          this.deferredLightingMaterial = new Material();
          this.deferredLightingMaterial.name = 'builtin-deferred-material';
          this.deferredLightingMaterial.initialize({
            effectName: 'pipeline/deferred-lighting',
            defines: {
              CC_RECEIVE_SHADOW: 1
            }
          });

          for (var i = 0; i < this.deferredLightingMaterial.passes.length; ++i) {
            this.deferredLightingMaterial.passes[i].tryCompile();
          }
        };

        function LightingInfo() {
          this._init();
        }

        return LightingInfo;
      }();

      var lightingInfo = null;
      function buildLightingPass(camera, ppl, gBuffer) {
        if (!lightingInfo) {
          lightingInfo = new LightingInfo();
        }

        var cameraID = getCameraUniqueID(camera);
        var cameraName = "Camera" + cameraID;
        var cameraInfo = buildShadowPasses(cameraName, camera, ppl);
        var area = getRenderArea(camera, camera.window.width, camera.window.height);
        var width = area.width;
        var height = area.height;
        var deferredLightingPassRTName = "deferredLightingPassRTName";
        var deferredLightingPassDS = "deferredLightingPassDS";

        if (!ppl.containsResource(deferredLightingPassRTName)) {
          ppl.addRenderTarget(deferredLightingPassRTName, Format.RGBA8, width, height, ResourceResidency.MANAGED);
          ppl.addDepthStencil(deferredLightingPassDS, Format.DEPTH_STENCIL, width, height, ResourceResidency.MANAGED);
        }

        ppl.updateRenderTarget(deferredLightingPassRTName, width, height);
        ppl.updateDepthStencil(deferredLightingPassDS, width, height);
        var lightingPass = ppl.addRasterPass(width, height, 'deferred-lighting');
        lightingPass.name = "CameraLightingPass" + cameraID;
        lightingPass.setViewport(new Viewport(area.x, area.y, width, height));

        for (var _iterator3 = _createForOfIteratorHelperLoose(cameraInfo.mainLightShadowNames), _step3; !(_step3 = _iterator3()).done;) {
          var dirShadowName = _step3.value;

          if (ppl.containsResource(dirShadowName)) {
            var _computeView4 = new ComputeView('cc_shadowMap');

            lightingPass.addComputeView(dirShadowName, _computeView4);
          }
        }

        for (var _iterator4 = _createForOfIteratorHelperLoose(cameraInfo.spotLightShadowNames), _step4; !(_step4 = _iterator4()).done;) {
          var spotShadowName = _step4.value;

          if (ppl.containsResource(spotShadowName)) {
            var _computeView5 = new ComputeView('cc_spotShadowMap');

            lightingPass.addComputeView(spotShadowName, _computeView5);
          }
        }

        if (ppl.containsResource(gBuffer.color)) {
          var computeView = new ComputeView();
          computeView.name = 'gbuffer_albedoMap';
          lightingPass.addComputeView(gBuffer.color, computeView);
          var computeNormalView = new ComputeView();
          computeNormalView.name = 'gbuffer_normalMap';
          lightingPass.addComputeView(gBuffer.normal, computeNormalView);
          var computeEmissiveView = new ComputeView();
          computeEmissiveView.name = 'gbuffer_emissiveMap';
          lightingPass.addComputeView(gBuffer.emissive, computeEmissiveView);
          var computeDepthView = new ComputeView();
          computeDepthView.name = 'depth_stencil';
          lightingPass.addComputeView(gBuffer.ds, computeDepthView);
        }

        var lightingClearColor = new Color$1(0, 0, 0, 0);

        if (camera.clearFlag & ClearFlagBit.COLOR) {
          lightingClearColor.x = camera.clearColor.x;
          lightingClearColor.y = camera.clearColor.y;
          lightingClearColor.z = camera.clearColor.z;
        }

        lightingClearColor.w = 0;
        var lightingPassView = new RasterView('_', AccessType.WRITE, AttachmentType.RENDER_TARGET, LoadOp.CLEAR, StoreOp.STORE, camera.clearFlag, lightingClearColor);
        lightingPass.addRasterView(deferredLightingPassRTName, lightingPassView);
        lightingPass.addQueue(QueueHint.RENDER_TRANSPARENT).addCameraQuad(camera, lightingInfo.deferredLightingMaterial, 0, SceneFlags.VOLUMETRIC_LIGHTING);
        lightingPass.addQueue(QueueHint.RENDER_TRANSPARENT).addSceneOfCamera(camera, new LightInfo(), SceneFlags.TRANSPARENT_OBJECT | SceneFlags.PLANAR_SHADOW | SceneFlags.GEOMETRY);
        return {
          rtName: deferredLightingPassRTName,
          dsName: deferredLightingPassDS
        };
      }

      function buildUIPass(camera, ppl) {
        var cameraID = getCameraUniqueID(camera);
        var cameraName = "Camera" + cameraID;
        var area = getRenderArea(camera, camera.window.width, camera.window.height);
        var width = area.width;
        var height = area.height;
        var dsUIAndProfilerPassRTName = "dsUIAndProfilerPassColor" + cameraName;
        var dsUIAndProfilerPassDSName = "dsUIAndProfilerPassDS" + cameraName;

        if (!ppl.containsResource(dsUIAndProfilerPassRTName)) {
          ppl.addRenderTexture(dsUIAndProfilerPassRTName, Format.BGRA8, width, height, camera.window);
          ppl.addDepthStencil(dsUIAndProfilerPassDSName, Format.DEPTH_STENCIL, width, height, ResourceResidency.MANAGED);
        }

        ppl.updateRenderWindow(dsUIAndProfilerPassRTName, camera.window);
        ppl.updateDepthStencil(dsUIAndProfilerPassDSName, width, height);
        var uIAndProfilerPass = ppl.addRasterPass(width, height, 'default');
        uIAndProfilerPass.name = "CameraUIAndProfilerPass" + cameraID;
        uIAndProfilerPass.setViewport(new Viewport(area.x, area.y, width, height));
        var passView = new RasterView('_', AccessType.WRITE, AttachmentType.RENDER_TARGET, getLoadOpOfClearFlag(camera.clearFlag, AttachmentType.RENDER_TARGET), StoreOp.STORE, camera.clearFlag, new Color$1(camera.clearColor.x, camera.clearColor.y, camera.clearColor.z, camera.clearColor.w));
        var passDSView = new RasterView('_', AccessType.WRITE, AttachmentType.DEPTH_STENCIL, getLoadOpOfClearFlag(camera.clearFlag, AttachmentType.DEPTH_STENCIL), StoreOp.STORE, camera.clearFlag, new Color$1(camera.clearDepth, camera.clearStencil, 0, 0));
        uIAndProfilerPass.addRasterView(dsUIAndProfilerPassRTName, passView);
        uIAndProfilerPass.addRasterView(dsUIAndProfilerPassDSName, passDSView);
        var sceneFlags = SceneFlags.UI;
        uIAndProfilerPass.addQueue(QueueHint.RENDER_TRANSPARENT).addSceneOfCamera(camera, new LightInfo(), sceneFlags);

        if (getProfilerCamera() === camera) {
          uIAndProfilerPass.showStatistics = true;
        }
      }

      function getDescBinding(descId, descData) {
        var layoutData = descData;

        for (var _iterator5 = _createForOfIteratorHelperLoose(layoutData.descriptorSetLayoutData.descriptorBlocks), _step5; !(_step5 = _iterator5()).done;) {
          var block = _step5.value;

          for (var i = 0; i !== block.descriptors.length; ++i) {
            if (descId === block.descriptors[i].descriptorID) {
              return block.offset + i;
            }
          }
        }

        return -1;
      }
      function getDescBindingFromName(bindingName) {
        var pipeline = legacyCC.director.root.pipeline;
        var layoutGraph = pipeline.layoutGraph;
        var vertIds = layoutGraph.vertices();
        var descId = layoutGraph.attributeIndex.get(bindingName);
        var currDesData;

        for (var _iterator6 = _createForOfIteratorHelperLoose(vertIds), _step6; !(_step6 = _iterator6()).done;) {
          var i = _step6.value;
          var layout = layoutGraph.getLayout(i);

          for (var _iterator7 = _createForOfIteratorHelperLoose(layout.descriptorSets), _step7; !(_step7 = _iterator7()).done;) {
            var _step7$value = _step7.value,
                k = _step7$value[0],
                descData = _step7$value[1];
            var layoutData = descData.descriptorSetLayoutData;
            var blocks = layoutData.descriptorBlocks;

            for (var _iterator8 = _createForOfIteratorHelperLoose(blocks), _step8; !(_step8 = _iterator8()).done;) {
              var b = _step8.value;

              for (var _iterator9 = _createForOfIteratorHelperLoose(b.descriptors), _step9; !(_step9 = _iterator9()).done;) {
                var ds = _step9.value;

                if (ds.descriptorID === descId) {
                  currDesData = descData;
                  return getDescBinding(descId, currDesData);
                }
              }
            }
          }
        }

        return -1;
      }

      var layouts = new Map();
      function getDescriptorSetDataFromLayout(layoutName) {
        var descLayout = layouts.get(layoutName);

        if (descLayout) {
          return descLayout;
        }

        var webPip = legacyCC.director.root.pipeline;
        var stageId = webPip.layoutGraph.locateChild(webPip.layoutGraph.nullVertex(), layoutName);
        assert(stageId !== 0xFFFFFFFF);
        var layout = webPip.layoutGraph.getLayout(stageId);
        var layoutData = layout.descriptorSets.get(UpdateFrequency.PER_PASS);
        layouts.set(layoutName, layoutData);
        return layoutData;
      }

      var _samplerLinearInfo = new SamplerInfo(Filter.LINEAR, Filter.LINEAR, Filter.NONE, Address.CLAMP, Address.CLAMP, Address.CLAMP);

      var _samplerPointInfo = new SamplerInfo(Filter.POINT, Filter.POINT, Filter.NONE, Address.CLAMP, Address.CLAMP, Address.CLAMP);

      var GlobalDSManager = function () {
        function GlobalDSManager(device) {
          this._device = void 0;
          this._descriptorSetMap = new Map();
          this._globalDescriptorSet = void 0;
          this._descriptorSetLayout = void 0;
          this._linearSampler = void 0;
          this._pointSampler = void 0;
          this._device = device;
          this._linearSampler = this._device.getSampler(_samplerLinearInfo);
          this._pointSampler = this._device.getSampler(_samplerPointInfo);
          var layoutInfo = new DescriptorSetLayoutInfo(globalDescriptorSetLayout.bindings);
          this._descriptorSetLayout = this._device.createDescriptorSetLayout(layoutInfo);
          this._globalDescriptorSet = this._device.createDescriptorSet(new DescriptorSetInfo(this._descriptorSetLayout));
        }

        var _proto = GlobalDSManager.prototype;

        _proto.regenLayout = function regenLayout() {
          var layoutInfo = new DescriptorSetLayoutInfo(globalDescriptorSetLayout.bindings);
          this._descriptorSetLayout = this._device.createDescriptorSetLayout(layoutInfo);
          this._globalDescriptorSet = this._device.createDescriptorSet(new DescriptorSetInfo(this._descriptorSetLayout));
        };

        _proto.bindBuffer = function bindBuffer(binding, buffer) {
          this._globalDescriptorSet.bindBuffer(binding, buffer);

          var it = this._descriptorSetMap.values();

          var res = it.next();

          while (!res.done) {
            var descriptorSet = res.value;
            descriptorSet.bindBuffer(binding, buffer);
            res = it.next();
          }
        };

        _proto.bindSampler = function bindSampler(binding, sampler) {
          this._globalDescriptorSet.bindSampler(binding, sampler);

          var it = this._descriptorSetMap.values();

          var res = it.next();

          while (!res.done) {
            var descriptorSet = res.value;
            descriptorSet.bindSampler(binding, sampler);
            res = it.next();
          }
        };

        _proto.bindTexture = function bindTexture(binding, texture) {
          this._globalDescriptorSet.bindTexture(binding, texture);

          var it = this._descriptorSetMap.values();

          var res = it.next();

          while (!res.done) {
            var descriptorSet = res.value;
            descriptorSet.bindTexture(binding, texture);
            res = it.next();
          }
        };

        _proto.update = function update() {
          this._globalDescriptorSet.update();

          var it = this._descriptorSetMap.values();

          var res = it.next();

          while (!res.done) {
            var descriptorSet = res.value;
            descriptorSet.update();
            res = it.next();
          }
        };

        _proto.getOrCreateDescriptorSet = function getOrCreateDescriptorSet(light) {
          var device = this._device;

          if (!this._descriptorSetMap.has(light)) {
            var globalDescriptorSet = isEnableEffect() ? getDescriptorSetDataFromLayout('default').descriptorSet : this._globalDescriptorSet;
            var descriptorSet = device.createDescriptorSet(new DescriptorSetInfo(isEnableEffect() ? getDescriptorSetDataFromLayout('default').descriptorSetLayout : this._descriptorSetLayout));

            this._descriptorSetMap.set(light, descriptorSet);

            for (var i = PipelineGlobalBindings.UBO_GLOBAL; i < PipelineGlobalBindings.COUNT; i++) {
              descriptorSet.bindBuffer(i, globalDescriptorSet.getBuffer(i));
              descriptorSet.bindSampler(i, globalDescriptorSet.getSampler(i));
              descriptorSet.bindTexture(i, globalDescriptorSet.getTexture(i));
            }

            var shadowUBO = device.createBuffer(new BufferInfo(BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.HOST | MemoryUsageBit.DEVICE, UBOShadow.SIZE, UBOShadow.SIZE));
            var binding = isEnableEffect() ? getDescBindingFromName('CCShadow') : UBOShadow.BINDING;
            descriptorSet.bindBuffer(binding, shadowUBO);
            descriptorSet.update();
          }

          return this._descriptorSetMap.get(light);
        };

        _proto.destroy = function destroy() {
          this._descriptorSetLayout.destroy();
        };

        _createClass(GlobalDSManager, [{
          key: "descriptorSetMap",
          get: function get() {
            return this._descriptorSetMap;
          }
        }, {
          key: "linearSampler",
          get: function get() {
            return this._linearSampler;
          }
        }, {
          key: "pointSampler",
          get: function get() {
            return this._pointSampler;
          }
        }, {
          key: "descriptorSetLayout",
          get: function get() {
            return this._descriptorSetLayout;
          }
        }, {
          key: "globalDescriptorSet",
          get: function get() {
            return this._globalDescriptorSet;
          },
          set: function set(val) {
            this._globalDescriptorSet = val;
          }
        }]);

        return GlobalDSManager;
      }();

      var RenderingDebugViewType = {
        NONE: 0,
        SINGLE: 1,
        COMPOSITE_AND_MISC: 2
      };
      var DebugViewSingleType = {
        NONE: 0,
        VERTEX_COLOR: 1,
        VERTEX_NORMAL: 2,
        VERTEX_TANGENT: 3,
        WORLD_POS: 4,
        VERTEX_MIRROR: 5,
        FACE_SIDE: 6,
        UV0: 7,
        UV1: 8,
        UV_LIGHTMAP: 9,
        PROJ_DEPTH: 10,
        LINEAR_DEPTH: 11,
        FRAGMENT_NORMAL: 12,
        FRAGMENT_TANGENT: 13,
        FRAGMENT_BINORMAL: 14,
        BASE_COLOR: 15,
        DIFFUSE_COLOR: 16,
        SPECULAR_COLOR: 17,
        TRANSPARENCY: 18,
        METALLIC: 19,
        ROUGHNESS: 20,
        SPECULAR_INTENSITY: 21,
        DIRECT_DIFFUSE: 22,
        DIRECT_SPECULAR: 23,
        DIRECT_ALL: 24,
        ENV_DIFFUSE: 25,
        ENV_SPECULAR: 26,
        ENV_ALL: 27,
        EMISSIVE: 28,
        LIGHT_MAP: 29,
        SHADOW: 30,
        AO: 31,
        FOG: 32
      };
      var DebugViewCompositeType = {
        DIRECT_DIFFUSE: 0,
        DIRECT_SPECULAR: 1,
        ENV_DIFFUSE: 2,
        ENV_SPECULAR: 3,
        EMISSIVE: 4,
        LIGHT_MAP: 5,
        SHADOW: 6,
        AO: 7,
        NORMAL_MAP: 8,
        FOG: 9,
        TONE_MAPPING: 10,
        GAMMA_CORRECTION: 11,
        MAX_BIT_COUNT: 12
      };
      var DebugView = exports('DebugView', function () {
        function DebugView() {
          this._singleMode = DebugViewSingleType.NONE;
          this._compositeModeValue = 0;
          this._lightingWithAlbedo = true;
          this._csmLayerColoration = false;
          this._nativeConfig = null;

          this._activate();
        }

        var _proto = DebugView.prototype;

        _proto.isCompositeModeEnabled = function isCompositeModeEnabled(val) {
          var mode = this._compositeModeValue & 1 << val;
          return mode !== 0;
        };

        _proto.enableCompositeMode = function enableCompositeMode(val, enable) {
          this._enableCompositeMode(val, enable);

          this._updatePipeline();
        };

        _proto.enableAllCompositeMode = function enableAllCompositeMode(enable) {
          this._enableAllCompositeMode(enable);

          this._updatePipeline();
        };

        _proto.isEnabled = function isEnabled() {
          return this._getType() !== RenderingDebugViewType.NONE;
        };

        _proto.reset = function reset() {
          this._activate();

          this._updatePipeline();
        };

        _proto._activate = function _activate() {
          this._singleMode = DebugViewSingleType.NONE;

          this._enableAllCompositeMode(true);

          this._lightingWithAlbedo = true;
          this._csmLayerColoration = false;
        };

        _proto._updatePipeline = function _updatePipeline() {
          var root = legacyCC.director.root;
          var pipeline = root.pipeline;

          var useDebugView = this._getType();

          if (pipeline.macros.CC_USE_DEBUG_VIEW !== useDebugView) {
            pipeline.macros.CC_USE_DEBUG_VIEW = useDebugView;
            root.onGlobalPipelineStateChanged();
          }
        };

        _proto._enableCompositeMode = function _enableCompositeMode(val, enable) {
          if (enable) {
            this._compositeModeValue |= 1 << val;
          } else {
            this._compositeModeValue &= ~(1 << val);
          }
        };

        _proto._enableAllCompositeMode = function _enableAllCompositeMode(enable) {
          for (var i = 0; i < DebugViewCompositeType.MAX_BIT_COUNT; i++) {
            if (enable) {
              this._compositeModeValue |= 1 << i;
            } else {
              this._compositeModeValue &= ~(1 << i);
            }
          }
        };

        _proto._getType = function _getType() {
          if (this._singleMode !== DebugViewSingleType.NONE) {
            return RenderingDebugViewType.SINGLE;
          } else if (this._lightingWithAlbedo !== true || this._csmLayerColoration !== false) {
            return RenderingDebugViewType.COMPOSITE_AND_MISC;
          } else {
            for (var i = 0; i < DebugViewCompositeType.MAX_BIT_COUNT; i++) {
              if (!this.isCompositeModeEnabled(i)) {
                return RenderingDebugViewType.COMPOSITE_AND_MISC;
              }
            }
          }

          return RenderingDebugViewType.NONE;
        };

        _createClass(DebugView, [{
          key: "singleMode",
          get: function get() {
            return this._singleMode;
          },
          set: function set(val) {
            this._singleMode = val;

            this._updatePipeline();
          }
        }, {
          key: "lightingWithAlbedo",
          get: function get() {
            return this._lightingWithAlbedo;
          },
          set: function set(val) {
            this._lightingWithAlbedo = val;

            this._updatePipeline();
          }
        }, {
          key: "csmLayerColoration",
          get: function get() {
            return this._csmLayerColoration;
          },
          set: function set(val) {
            this._csmLayerColoration = val;

            this._updatePipeline();
          }
        }]);

        return DebugView;
      }());

      var _matShadowView = new Mat4();

      var _matShadowProj = new Mat4();

      var _matShadowViewProj = new Mat4();

      var _vec4ShadowInfo = new Vec4();

      var _lightDir = new Vec4(0.0, 0.0, 1.0, 0.0);

      var _tempVec3$1 = new Vec3();

      var PipelineUBO = function () {
        function PipelineUBO() {
          this._globalUBO = new Float32Array(UBOGlobal.COUNT);
          this._cameraUBO = new Float32Array(UBOCamera.COUNT);
          this._shadowUBO = new Float32Array(UBOShadow.COUNT);
          this._csmUBO = new Float32Array(UBOCSM.COUNT);
        }

        PipelineUBO.updateGlobalUBOView = function updateGlobalUBOView(window, bufferView) {
          var director = legacyCC.director;
          var root = director.root;
          var fv = bufferView;
          var shadingWidth = Math.floor(window.width);
          var shadingHeight = Math.floor(window.height);
          fv[UBOGlobal.TIME_OFFSET] = root.cumulativeTime;
          fv[UBOGlobal.TIME_OFFSET + 1] = root.frameTime;
          fv[UBOGlobal.TIME_OFFSET + 2] = director.getTotalFrames();
          fv[UBOGlobal.TIME_OFFSET + 3] = root.cumulativeTime - Math.floor(root.frameTime);
          fv[UBOGlobal.SCREEN_SIZE_OFFSET] = shadingWidth;
          fv[UBOGlobal.SCREEN_SIZE_OFFSET + 1] = shadingHeight;
          fv[UBOGlobal.SCREEN_SIZE_OFFSET + 2] = 1.0 / shadingWidth;
          fv[UBOGlobal.SCREEN_SIZE_OFFSET + 3] = 1.0 / shadingHeight;
          fv[UBOGlobal.NATIVE_SIZE_OFFSET] = shadingWidth;
          fv[UBOGlobal.NATIVE_SIZE_OFFSET + 1] = shadingHeight;
          fv[UBOGlobal.NATIVE_SIZE_OFFSET + 2] = 1.0 / fv[UBOGlobal.NATIVE_SIZE_OFFSET];
          fv[UBOGlobal.NATIVE_SIZE_OFFSET + 3] = 1.0 / fv[UBOGlobal.NATIVE_SIZE_OFFSET + 1];
          var debugView = root.debugView;

          if (debugView) {
            fv[UBOGlobal.DEBUG_VIEW_MODE_OFFSET] = debugView.singleMode;
            fv[UBOGlobal.DEBUG_VIEW_MODE_OFFSET + 1] = debugView.lightingWithAlbedo ? 1.0 : 0.0;
            fv[UBOGlobal.DEBUG_VIEW_MODE_OFFSET + 2] = debugView.csmLayerColoration ? 1.0 : 0.0;

            for (var i = DebugViewCompositeType.DIRECT_DIFFUSE; i < DebugViewCompositeType.MAX_BIT_COUNT; i++) {
              fv[UBOGlobal.DEBUG_VIEW_COMPOSITE_PACK_1_OFFSET + i] = debugView.isCompositeModeEnabled(i) ? 1.0 : 0.0;
            }
          } else {
            fv[UBOGlobal.DEBUG_VIEW_MODE_OFFSET] = 0.0;
            fv[UBOGlobal.DEBUG_VIEW_MODE_OFFSET + 1] = 1.0;
            fv[UBOGlobal.DEBUG_VIEW_MODE_OFFSET + 2] = 0.0;

            for (var _i = DebugViewCompositeType.DIRECT_DIFFUSE; _i < DebugViewCompositeType.MAX_BIT_COUNT; _i++) {
              fv[UBOGlobal.DEBUG_VIEW_COMPOSITE_PACK_1_OFFSET + _i] = 1.0;
            }
          }
        };

        PipelineUBO.updateCameraUBOView = function updateCameraUBOView(pipeline, bufferView, camera) {
          var _skybox$envmap;

          var scene = camera.scene ? camera.scene : legacyCC.director.getScene().renderScene;
          var mainLight = scene.mainLight;
          var sceneData = pipeline.pipelineSceneData;
          var ambient = sceneData.ambient;
          var skybox = sceneData.skybox;
          var fog = sceneData.fog;
          var shadowInfo = sceneData.shadows;
          var cv = bufferView;
          var exposure = camera.exposure;
          var isHDR = sceneData.isHDR;
          cv[UBOCamera.SCREEN_SCALE_OFFSET] = sceneData.shadingScale;
          cv[UBOCamera.SCREEN_SCALE_OFFSET + 1] = sceneData.shadingScale;
          cv[UBOCamera.SCREEN_SCALE_OFFSET + 2] = 1.0 / cv[UBOCamera.SCREEN_SCALE_OFFSET];
          cv[UBOCamera.SCREEN_SCALE_OFFSET + 3] = 1.0 / cv[UBOCamera.SCREEN_SCALE_OFFSET + 1];
          cv[UBOCamera.EXPOSURE_OFFSET] = exposure;
          cv[UBOCamera.EXPOSURE_OFFSET + 1] = 1.0 / exposure;
          cv[UBOCamera.EXPOSURE_OFFSET + 2] = isHDR ? 1.0 : 0.0;
          cv[UBOCamera.EXPOSURE_OFFSET + 3] = 1.0 / Camera.standardExposureValue;

          if (mainLight) {
            var shadowEnable = mainLight.shadowEnabled && shadowInfo.type === ShadowType.ShadowMap ? 1.0 : 0.0;
            var mainLightDir = mainLight.direction;

            _lightDir.set(mainLightDir.x, mainLightDir.y, mainLightDir.z, shadowEnable);

            Vec4.toArray(cv, _lightDir, UBOCamera.MAIN_LIT_DIR_OFFSET);
            Vec3.toArray(cv, mainLight.color, UBOCamera.MAIN_LIT_COLOR_OFFSET);

            if (mainLight.useColorTemperature) {
              var _colorTempRGB = mainLight.colorTemperatureRGB;
              cv[UBOCamera.MAIN_LIT_COLOR_OFFSET] *= _colorTempRGB.x;
              cv[UBOCamera.MAIN_LIT_COLOR_OFFSET + 1] *= _colorTempRGB.y;
              cv[UBOCamera.MAIN_LIT_COLOR_OFFSET + 2] *= _colorTempRGB.z;
            }

            if (isHDR) {
              cv[UBOCamera.MAIN_LIT_COLOR_OFFSET + 3] = mainLight.illuminance * exposure;
            } else {
              cv[UBOCamera.MAIN_LIT_COLOR_OFFSET + 3] = mainLight.illuminance;
            }
          } else {
            _lightDir.set(0, 0, 1, 0);

            Vec4.toArray(cv, _lightDir, UBOCamera.MAIN_LIT_DIR_OFFSET);
            Vec4.toArray(cv, Vec4.ZERO, UBOCamera.MAIN_LIT_COLOR_OFFSET);
          }

          var skyColor = ambient.skyColor;

          if (isHDR) {
            skyColor.w = ambient.skyIllum * exposure;
          } else {
            skyColor.w = ambient.skyIllum;
          }

          cv[UBOCamera.AMBIENT_SKY_OFFSET + 0] = skyColor.x;
          cv[UBOCamera.AMBIENT_SKY_OFFSET + 1] = skyColor.y;
          cv[UBOCamera.AMBIENT_SKY_OFFSET + 2] = skyColor.z;
          cv[UBOCamera.AMBIENT_SKY_OFFSET + 3] = skyColor.w;
          cv[UBOCamera.AMBIENT_GROUND_OFFSET + 0] = ambient.groundAlbedo.x;
          cv[UBOCamera.AMBIENT_GROUND_OFFSET + 1] = ambient.groundAlbedo.y;
          cv[UBOCamera.AMBIENT_GROUND_OFFSET + 2] = ambient.groundAlbedo.z;
          cv[UBOCamera.AMBIENT_GROUND_OFFSET + 3] = skybox.envmap ? (_skybox$envmap = skybox.envmap) === null || _skybox$envmap === void 0 ? void 0 : _skybox$envmap.mipmapLevel : 1.0;
          Mat4.toArray(cv, camera.matView, UBOCamera.MAT_VIEW_OFFSET);
          Mat4.toArray(cv, camera.node.worldMatrix, UBOCamera.MAT_VIEW_INV_OFFSET);
          Vec3.toArray(cv, camera.position, UBOCamera.CAMERA_POS_OFFSET);
          Mat4.toArray(cv, camera.matProj, UBOCamera.MAT_PROJ_OFFSET);
          Mat4.toArray(cv, camera.matProjInv, UBOCamera.MAT_PROJ_INV_OFFSET);
          Mat4.toArray(cv, camera.matViewProj, UBOCamera.MAT_VIEW_PROJ_OFFSET);
          Mat4.toArray(cv, camera.matViewProjInv, UBOCamera.MAT_VIEW_PROJ_INV_OFFSET);
          cv[UBOCamera.CAMERA_POS_OFFSET + 3] = this.getCombineSignY();
          cv[UBOCamera.SURFACE_TRANSFORM_OFFSET] = camera.surfaceTransform;
          cv[UBOCamera.SURFACE_TRANSFORM_OFFSET + 1] = camera.cameraUsage;
          cv[UBOCamera.SURFACE_TRANSFORM_OFFSET + 2] = Math.cos(toRadian(sceneData.skybox.getRotationAngle()));
          cv[UBOCamera.SURFACE_TRANSFORM_OFFSET + 3] = Math.sin(toRadian(sceneData.skybox.getRotationAngle()));
          var colorTempRGB = fog.colorArray;
          cv[UBOCamera.GLOBAL_FOG_COLOR_OFFSET] = colorTempRGB.x;
          cv[UBOCamera.GLOBAL_FOG_COLOR_OFFSET + 1] = colorTempRGB.y;
          cv[UBOCamera.GLOBAL_FOG_COLOR_OFFSET + 2] = colorTempRGB.z;
          cv[UBOCamera.GLOBAL_FOG_COLOR_OFFSET + 3] = colorTempRGB.z;
          cv[UBOCamera.GLOBAL_FOG_BASE_OFFSET] = fog.fogStart;
          cv[UBOCamera.GLOBAL_FOG_BASE_OFFSET + 1] = fog.fogEnd;
          cv[UBOCamera.GLOBAL_FOG_BASE_OFFSET + 2] = fog.fogDensity;
          cv[UBOCamera.GLOBAL_FOG_ADD_OFFSET] = fog.fogTop;
          cv[UBOCamera.GLOBAL_FOG_ADD_OFFSET + 1] = fog.fogRange;
          cv[UBOCamera.GLOBAL_FOG_ADD_OFFSET + 2] = fog.fogAtten;
          cv[UBOCamera.NEAR_FAR_OFFSET] = camera.nearClip;
          cv[UBOCamera.NEAR_FAR_OFFSET + 1] = camera.farClip;
          cv[UBOCamera.VIEW_PORT_OFFSET] = sceneData.shadingScale * camera.window.width * camera.viewport.x;
          cv[UBOCamera.VIEW_PORT_OFFSET + 1] = sceneData.shadingScale * camera.window.height * camera.viewport.y;
          cv[UBOCamera.VIEW_PORT_OFFSET + 2] = sceneData.shadingScale * camera.window.width * camera.viewport.z;
          cv[UBOCamera.VIEW_PORT_OFFSET + 3] = sceneData.shadingScale * camera.window.height * camera.viewport.w;
        };

        PipelineUBO.getPCFRadius = function getPCFRadius(shadowInfo, mainLight) {
          var shadowMapSize = shadowInfo.size.x;

          switch (mainLight.shadowPcf) {
            case PCFType.HARD:
              return 0.0;

            case PCFType.SOFT:
              return 1.0 / (shadowMapSize * 0.5);

            case PCFType.SOFT_2X:
              return 2.0 / (shadowMapSize * 0.5);

            case PCFType.SOFT_4X:
              return 3.0 / (shadowMapSize * 0.5);
          }

          return 0.0;
        };

        PipelineUBO.updatePlanarNormalAndDistance = function updatePlanarNormalAndDistance(shadowInfo, shadowUBO) {
          Vec3.normalize(_tempVec3$1, shadowInfo.normal);
          shadowUBO[UBOShadow.PLANAR_NORMAL_DISTANCE_INFO_OFFSET + 0] = _tempVec3$1.x;
          shadowUBO[UBOShadow.PLANAR_NORMAL_DISTANCE_INFO_OFFSET + 1] = _tempVec3$1.y;
          shadowUBO[UBOShadow.PLANAR_NORMAL_DISTANCE_INFO_OFFSET + 2] = _tempVec3$1.z;
          shadowUBO[UBOShadow.PLANAR_NORMAL_DISTANCE_INFO_OFFSET + 3] = -shadowInfo.distance;
        };

        PipelineUBO.updateShadowUBOView = function updateShadowUBOView(pipeline, shadowBufferView, csmBufferView, camera) {
          var device = pipeline.device;
          var mainLight = camera.scene.mainLight;
          var sceneData = pipeline.pipelineSceneData;
          var shadowInfo = sceneData.shadows;
          var csmLayers = sceneData.csmLayers;
          var sv = shadowBufferView;
          var cv = csmBufferView;
          var csmSupported = sceneData.csmSupported;
          var packing = supportsR32FloatTexture(device) ? 0.0 : 1.0;

          if (mainLight && shadowInfo.enabled) {
            if (shadowInfo.type === ShadowType.ShadowMap) {
              if (mainLight.shadowEnabled) {
                if (mainLight.shadowFixedArea || mainLight.csmLevel === CSMLevel.LEVEL_1 || !csmSupported) {
                  var matShadowView = csmLayers.specialLayer.matShadowView;
                  var matShadowProj = csmLayers.specialLayer.matShadowProj;
                  var matShadowViewProj = csmLayers.specialLayer.matShadowViewProj;
                  var near = mainLight.shadowNear;
                  var far = mainLight.shadowFar;
                  Mat4.toArray(sv, matShadowView, UBOShadow.MAT_LIGHT_VIEW_OFFSET);
                  sv[UBOShadow.SHADOW_PROJ_DEPTH_INFO_OFFSET + 0] = matShadowProj.m10;
                  sv[UBOShadow.SHADOW_PROJ_DEPTH_INFO_OFFSET + 1] = matShadowProj.m14;
                  sv[UBOShadow.SHADOW_PROJ_DEPTH_INFO_OFFSET + 2] = matShadowProj.m11;
                  sv[UBOShadow.SHADOW_PROJ_DEPTH_INFO_OFFSET + 3] = matShadowProj.m15;
                  sv[UBOShadow.SHADOW_PROJ_INFO_OFFSET + 0] = matShadowProj.m00;
                  sv[UBOShadow.SHADOW_PROJ_INFO_OFFSET + 1] = matShadowProj.m05;
                  sv[UBOShadow.SHADOW_PROJ_INFO_OFFSET + 2] = 1.0 / matShadowProj.m00;
                  sv[UBOShadow.SHADOW_PROJ_INFO_OFFSET + 3] = 1.0 / matShadowProj.m05;
                  Mat4.toArray(sv, matShadowViewProj, UBOShadow.MAT_LIGHT_VIEW_PROJ_OFFSET);

                  _vec4ShadowInfo.set(near, far, 0, 1.0 - mainLight.shadowSaturation);

                  Vec4.toArray(sv, _vec4ShadowInfo, UBOShadow.SHADOW_NEAR_FAR_LINEAR_SATURATION_INFO_OFFSET);

                  _vec4ShadowInfo.set(0, packing, mainLight.shadowNormalBias, 0);

                  Vec4.toArray(sv, _vec4ShadowInfo, UBOShadow.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET);
                } else {
                  var layerThreshold = this.getPCFRadius(shadowInfo, mainLight);

                  for (var i = 0; i < mainLight.csmLevel; i++) {
                    var layer = csmLayers.layers[i];
                    var _matShadowView2 = layer.matShadowView;

                    _vec4ShadowInfo.set(_matShadowView2.m00, _matShadowView2.m04, _matShadowView2.m08, layerThreshold);

                    Vec4.toArray(cv, _vec4ShadowInfo, UBOCSM.CSM_VIEW_DIR_0_OFFSET + 4 * i);

                    _vec4ShadowInfo.set(_matShadowView2.m01, _matShadowView2.m05, _matShadowView2.m09, layer.splitCameraNear);

                    Vec4.toArray(cv, _vec4ShadowInfo, UBOCSM.CSM_VIEW_DIR_1_OFFSET + 4 * i);

                    _vec4ShadowInfo.set(_matShadowView2.m02, _matShadowView2.m06, _matShadowView2.m10, layer.splitCameraFar);

                    Vec4.toArray(cv, _vec4ShadowInfo, UBOCSM.CSM_VIEW_DIR_2_OFFSET + 4 * i);
                    var csmAtlas = layer.csmAtlas;
                    Vec4.toArray(cv, csmAtlas, UBOCSM.CSM_ATLAS_OFFSET + 4 * i);
                    var _matShadowViewProj2 = layer.matShadowViewProj;
                    Mat4.toArray(cv, _matShadowViewProj2, UBOCSM.MAT_CSM_VIEW_PROJ_OFFSET + 16 * i);
                    var _matShadowProj2 = layer.matShadowProj;
                    cv[UBOCSM.CSM_PROJ_DEPTH_INFO_OFFSET + 0 + 4 * i] = _matShadowProj2.m10;
                    cv[UBOCSM.CSM_PROJ_DEPTH_INFO_OFFSET + 1 + 4 * i] = _matShadowProj2.m14;
                    cv[UBOCSM.CSM_PROJ_DEPTH_INFO_OFFSET + 2 + 4 * i] = _matShadowProj2.m11;
                    cv[UBOCSM.CSM_PROJ_DEPTH_INFO_OFFSET + 3 + 4 * i] = _matShadowProj2.m15;
                    cv[UBOCSM.CSM_PROJ_INFO_OFFSET + 0 + 4 * i] = _matShadowProj2.m00;
                    cv[UBOCSM.CSM_PROJ_INFO_OFFSET + 1 + 4 * i] = _matShadowProj2.m05;
                    cv[UBOCSM.CSM_PROJ_INFO_OFFSET + 2 + 4 * i] = 1.0 / _matShadowProj2.m00;
                    cv[UBOCSM.CSM_PROJ_INFO_OFFSET + 3 + 4 * i] = 1.0 / _matShadowProj2.m05;
                  }

                  _vec4ShadowInfo.set(mainLight.csmTransitionRange, 0, 0, 0);

                  Vec4.toArray(cv, _vec4ShadowInfo, UBOCSM.CSM_SPLITS_INFO_OFFSET);

                  _vec4ShadowInfo.set(0.1, mainLight.shadowDistance, 0, 1.0 - mainLight.shadowSaturation);

                  Vec4.toArray(sv, _vec4ShadowInfo, UBOShadow.SHADOW_NEAR_FAR_LINEAR_SATURATION_INFO_OFFSET);

                  _vec4ShadowInfo.set(0.0, packing, mainLight.shadowNormalBias, mainLight.csmLevel);

                  Vec4.toArray(sv, _vec4ShadowInfo, UBOShadow.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET);
                }

                _vec4ShadowInfo.set(shadowInfo.size.x, shadowInfo.size.y, mainLight.shadowPcf, mainLight.shadowBias);

                Vec4.toArray(sv, _vec4ShadowInfo, UBOShadow.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET);
              }
            } else {
              PipelineUBO.updatePlanarNormalAndDistance(shadowInfo, sv);
            }

            Color.toArray(sv, shadowInfo.shadowColor, UBOShadow.SHADOW_COLOR_OFFSET);
          }
        };

        PipelineUBO.updateShadowUBOLightView = function updateShadowUBOLightView(pipeline, shadowBufferView, light, level) {
          var device = pipeline.device;
          var sceneData = pipeline.pipelineSceneData;
          var shadowInfo = sceneData.shadows;
          var csmLayers = sceneData.csmLayers;
          var sv = shadowBufferView;
          var packing = supportsR32FloatTexture(device) ? 0.0 : 1.0;
          var cap = pipeline.device.capabilities;
          var csmSupported = sceneData.csmSupported;

          switch (light.type) {
            case LightType.DIRECTIONAL:
              {
                var mainLight = light;

                if (shadowInfo.enabled && mainLight && mainLight.shadowEnabled) {
                  if (shadowInfo.type === ShadowType.ShadowMap) {
                    var near = 0.1;
                    var far = 0;
                    var matShadowView;
                    var matShadowProj;
                    var matShadowViewProj;
                    var levelCount = 0;

                    if (mainLight.shadowFixedArea || mainLight.csmLevel === CSMLevel.LEVEL_1 || !csmSupported) {
                      matShadowView = csmLayers.specialLayer.matShadowView;
                      matShadowProj = csmLayers.specialLayer.matShadowProj;
                      matShadowViewProj = csmLayers.specialLayer.matShadowViewProj;

                      if (mainLight.shadowFixedArea) {
                        near = mainLight.shadowNear;
                        far = mainLight.shadowFar;
                        levelCount = 0;
                      } else {
                        near = 0.1;
                        far = csmLayers.specialLayer.shadowCameraFar;
                        levelCount = 1;
                      }

                      _vec4ShadowInfo.set(0.0, packing, mainLight.shadowNormalBias, 0);

                      Vec4.toArray(sv, _vec4ShadowInfo, UBOShadow.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET);
                    } else {
                      var layer = csmLayers.layers[level];
                      matShadowView = layer.matShadowView;
                      matShadowProj = layer.matShadowProj;
                      matShadowViewProj = layer.matShadowViewProj;
                      near = layer.splitCameraNear;
                      far = layer.splitCameraFar;
                      levelCount = mainLight.csmLevel;
                    }

                    Mat4.toArray(sv, matShadowView, UBOShadow.MAT_LIGHT_VIEW_OFFSET);
                    sv[UBOShadow.SHADOW_PROJ_DEPTH_INFO_OFFSET + 0] = matShadowProj.m10;
                    sv[UBOShadow.SHADOW_PROJ_DEPTH_INFO_OFFSET + 1] = matShadowProj.m14;
                    sv[UBOShadow.SHADOW_PROJ_DEPTH_INFO_OFFSET + 2] = matShadowProj.m11;
                    sv[UBOShadow.SHADOW_PROJ_DEPTH_INFO_OFFSET + 3] = matShadowProj.m15;
                    sv[UBOShadow.SHADOW_PROJ_INFO_OFFSET + 0] = matShadowProj.m00;
                    sv[UBOShadow.SHADOW_PROJ_INFO_OFFSET + 1] = matShadowProj.m05;
                    sv[UBOShadow.SHADOW_PROJ_INFO_OFFSET + 2] = 1.0 / matShadowProj.m00;
                    sv[UBOShadow.SHADOW_PROJ_INFO_OFFSET + 3] = 1.0 / matShadowProj.m05;
                    Mat4.toArray(sv, matShadowViewProj, UBOShadow.MAT_LIGHT_VIEW_PROJ_OFFSET);

                    _vec4ShadowInfo.set(near, far, 0, 1.0 - mainLight.shadowSaturation);

                    Vec4.toArray(sv, _vec4ShadowInfo, UBOShadow.SHADOW_NEAR_FAR_LINEAR_SATURATION_INFO_OFFSET);

                    _vec4ShadowInfo.set(0.0, packing, mainLight.shadowNormalBias, levelCount);

                    Vec4.toArray(sv, _vec4ShadowInfo, UBOShadow.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET);

                    _vec4ShadowInfo.set(shadowInfo.size.x, shadowInfo.size.y, mainLight.shadowPcf, mainLight.shadowBias);

                    Vec4.toArray(sv, _vec4ShadowInfo, UBOShadow.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET);
                  }
                }

                break;
              }

            case LightType.SPOT:
              {
                var spotLight = light;

                if (shadowInfo.enabled && spotLight && spotLight.shadowEnabled) {
                  Mat4.invert(_matShadowView, light.node.getWorldMatrix());
                  Mat4.toArray(sv, _matShadowView, UBOShadow.MAT_LIGHT_VIEW_OFFSET);
                  Mat4.perspective(_matShadowProj, light.angle, 1.0, 0.001, light.range, true, cap.clipSpaceMinZ, cap.clipSpaceSignY, 0);
                  Mat4.multiply(_matShadowViewProj, _matShadowProj, _matShadowView);
                  Mat4.toArray(sv, _matShadowViewProj, UBOShadow.MAT_LIGHT_VIEW_PROJ_OFFSET);

                  _vec4ShadowInfo.set(0.01, light.range, 0.0, 0.0);

                  Vec4.toArray(sv, _vec4ShadowInfo, UBOShadow.SHADOW_NEAR_FAR_LINEAR_SATURATION_INFO_OFFSET);

                  _vec4ShadowInfo.set(shadowInfo.size.x, shadowInfo.size.y, spotLight.shadowPcf, spotLight.shadowBias);

                  Vec4.toArray(sv, _vec4ShadowInfo, UBOShadow.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET);

                  _vec4ShadowInfo.set(1.0, packing, spotLight.shadowNormalBias, 0.0);

                  Vec4.toArray(sv, _vec4ShadowInfo, UBOShadow.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET);
                }

                break;
              }
          }

          Color.toArray(sv, shadowInfo.shadowColor, UBOShadow.SHADOW_COLOR_OFFSET);
        };

        PipelineUBO.getCombineSignY = function getCombineSignY() {
          return PipelineUBO._combineSignY;
        };

        var _proto = PipelineUBO.prototype;

        _proto._initCombineSignY = function _initCombineSignY() {
          var device = this._device;
          PipelineUBO._combineSignY = device.capabilities.screenSpaceSignY * 0.5 + 0.5 << 1 | device.capabilities.clipSpaceSignY * 0.5 + 0.5;
        };

        _proto.activate = function activate(device, pipeline) {
          this._device = device;
          this._pipeline = pipeline;
          var ds = this._pipeline.descriptorSet;

          if (isEnableEffect()) {
            return;
          }

          this._initCombineSignY();

          var globalUBO = device.createBuffer(new BufferInfo(BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.HOST | MemoryUsageBit.DEVICE, UBOGlobal.SIZE, UBOGlobal.SIZE));
          ds.bindBuffer(UBOGlobal.BINDING, globalUBO);
          var cameraUBO = device.createBuffer(new BufferInfo(BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.HOST | MemoryUsageBit.DEVICE, UBOCamera.SIZE, UBOCamera.SIZE));
          ds.bindBuffer(UBOCamera.BINDING, cameraUBO);
          var shadowUBO = device.createBuffer(new BufferInfo(BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.HOST | MemoryUsageBit.DEVICE, UBOShadow.SIZE, UBOShadow.SIZE));
          var binding = isEnableEffect() ? getDescBindingFromName('CCShadow') : UBOShadow.BINDING;
          ds.bindBuffer(binding, shadowUBO);
          var csmUBO = device.createBuffer(new BufferInfo(BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.HOST | MemoryUsageBit.DEVICE, UBOCSM.SIZE, UBOCSM.SIZE));
          var csmBinding = isEnableEffect() ? getDescBindingFromName('CCCSM') : UBOCSM.BINDING;
          ds.bindBuffer(csmBinding, csmUBO);
        };

        _proto.updateGlobalUBO = function updateGlobalUBO(window) {
          var globalDSManager = this._pipeline.globalDSManager;
          var ds = this._pipeline.descriptorSet;
          var cmdBuffer = this._pipeline.commandBuffers;
          ds.update();
          PipelineUBO.updateGlobalUBOView(window, this._globalUBO);
          cmdBuffer[0].updateBuffer(ds.getBuffer(UBOGlobal.BINDING), this._globalUBO);
          globalDSManager.bindBuffer(UBOGlobal.BINDING, ds.getBuffer(UBOGlobal.BINDING));
          globalDSManager.update();
        };

        _proto.updateCameraUBO = function updateCameraUBO(camera) {
          var globalDSManager = this._pipeline.globalDSManager;
          var ds = this._pipeline.descriptorSet;
          var cmdBuffer = this._pipeline.commandBuffers;
          PipelineUBO.updateCameraUBOView(this._pipeline, this._cameraUBO, camera);
          cmdBuffer[0].updateBuffer(ds.getBuffer(UBOCamera.BINDING), this._cameraUBO);
          globalDSManager.bindBuffer(UBOCamera.BINDING, ds.getBuffer(UBOCamera.BINDING));
          globalDSManager.update();
        };

        _proto.updateShadowUBO = function updateShadowUBO(camera) {
          var sceneData = this._pipeline.pipelineSceneData;
          var shadowInfo = sceneData.shadows;
          if (!shadowInfo.enabled) return;
          var ds = this._pipeline.descriptorSet;
          var cmdBuffer = this._pipeline.commandBuffers;
          var shadowFrameBufferMap = sceneData.shadowFrameBufferMap;
          var mainLight = camera.scene.mainLight;

          if (mainLight && shadowFrameBufferMap.has(mainLight)) {
            ds.bindTexture(UNIFORM_SHADOWMAP_BINDING, shadowFrameBufferMap.get(mainLight).colorTextures[0]);
          }

          PipelineUBO.updateShadowUBOView(this._pipeline, this._shadowUBO, this._csmUBO, camera);
          ds.update();
          var binding = isEnableEffect() ? getDescBindingFromName('CCShadow') : UBOShadow.BINDING;
          cmdBuffer[0].updateBuffer(ds.getBuffer(binding), this._shadowUBO);
          var csmBinding = isEnableEffect() ? getDescBindingFromName('CCCSM') : UBOCSM.BINDING;
          cmdBuffer[0].updateBuffer(ds.getBuffer(csmBinding), this._csmUBO);
        };

        _proto.updateShadowUBOLight = function updateShadowUBOLight(globalDS, light, level) {
          if (level === void 0) {
            level = 0;
          }

          PipelineUBO.updateShadowUBOLightView(this._pipeline, this._shadowUBO, light, level);
          globalDS.bindTexture(UNIFORM_SHADOWMAP_BINDING, builtinResMgr.get('default-texture').getGFXTexture());
          globalDS.bindTexture(UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING, builtinResMgr.get('default-texture').getGFXTexture());
          globalDS.update();
          var binding = isEnableEffect() ? getDescBindingFromName('CCShadow') : UBOShadow.BINDING;

          this._pipeline.commandBuffers[0].updateBuffer(globalDS.getBuffer(binding), this._shadowUBO);
        };

        _proto.updateShadowUBORange = function updateShadowUBORange(offset, data) {
          if (data instanceof Mat4) {
            Mat4.toArray(this._shadowUBO, data, offset);
          } else if (data instanceof Color) {
            Color.toArray(this._shadowUBO, data, offset);
          }
        };

        _proto.destroy = function destroy() {};

        return PipelineUBO;
      }();
      PipelineUBO._combineSignY = 0;

      var _dec$o, _class$o, _class2$l, _initializer$i, _initializer2$c, _initializer3$b;
      var RenderStage = exports('RenderStage', (_dec$o = ccclass('RenderStage'), _dec$o(_class$o = (_class2$l = function () {
        function RenderStage() {
          this._name = _initializer$i && _initializer$i();
          this._priority = _initializer2$c && _initializer2$c();
          this._enabled = true;
          this._tag = _initializer3$b && _initializer3$b();
        }

        var _proto = RenderStage.prototype;

        _proto.initialize = function initialize(info) {
          this._name = info.name;
          this._priority = info.priority;

          if (info.tag) {
            this._tag = info.tag;
          }

          return true;
        };

        _proto.activate = function activate(pipeline, flow) {
          this._pipeline = pipeline;
          this._flow = flow;
        };

        _createClass(RenderStage, [{
          key: "name",
          get: function get() {
            return this._name;
          }
        }, {
          key: "priority",
          get: function get() {
            return this._priority;
          }
        }, {
          key: "tag",
          get: function get() {
            return this._tag;
          }
        }, {
          key: "enabled",
          get: function get() {
            return this._enabled;
          },
          set: function set(val) {
            this._enabled = val;
          }
        }]);

        return RenderStage;
      }(), (_initializer$i = applyDecoratedInitializer(_class2$l.prototype, "_name", [serializable], function () {
        return '';
      }), _initializer2$c = applyDecoratedInitializer(_class2$l.prototype, "_priority", [serializable], function () {
        return 0;
      }), _initializer3$b = applyDecoratedInitializer(_class2$l.prototype, "_tag", [serializable], function () {
        return 0;
      })), _class2$l)) || _class$o));
      legacyCC.RenderStage = RenderStage;

      var _dec$p, _dec2$8, _class$p, _class2$m, _initializer$j, _initializer2$d, _initializer3$c, _initializer4$a;
      var RenderFlow = exports('RenderFlow', (_dec$p = ccclass('RenderFlow'), _dec2$8 = type([RenderStage]), _dec$p(_class$p = (_class2$m = function () {
        function RenderFlow() {
          this._name = _initializer$j && _initializer$j();
          this._priority = _initializer2$d && _initializer2$d();
          this._tag = _initializer3$c && _initializer3$c();
          this._stages = _initializer4$a && _initializer4$a();
        }

        var _proto = RenderFlow.prototype;

        _proto.initialize = function initialize(info) {
          this._name = info.name;
          this._priority = info.priority;
          this._stages = info.stages;

          if (info.tag) {
            this._tag = info.tag;
          }

          return true;
        };

        _proto.activate = function activate(pipeline) {
          this._pipeline = pipeline;

          this._stages.sort(function (a, b) {
            return a.priority - b.priority;
          });

          for (var i = 0, len = this._stages.length; i < len; i++) {
            this._stages[i].activate(pipeline, this);
          }
        };

        _proto.render = function render(camera) {
          for (var i = 0, len = this._stages.length; i < len; i++) {
            if (this._stages[i].enabled) this._stages[i].render(camera);
          }
        };

        _proto.destroy = function destroy() {
          for (var i = 0, len = this._stages.length; i < len; i++) {
            this._stages[i].destroy();
          }

          this._stages.length = 0;
        };

        _createClass(RenderFlow, [{
          key: "name",
          get: function get() {
            return this._name;
          }
        }, {
          key: "priority",
          get: function get() {
            return this._priority;
          }
        }, {
          key: "tag",
          get: function get() {
            return this._tag;
          }
        }, {
          key: "stages",
          get: function get() {
            return this._stages;
          }
        }, {
          key: "pipeline",
          get: function get() {
            return this._pipeline;
          }
        }]);

        return RenderFlow;
      }(), (_initializer$j = applyDecoratedInitializer(_class2$m.prototype, "_name", [serializable], function () {
        return '';
      }), _initializer2$d = applyDecoratedInitializer(_class2$m.prototype, "_priority", [serializable], function () {
        return 0;
      }), _initializer3$c = applyDecoratedInitializer(_class2$m.prototype, "_tag", [serializable], function () {
        return 0;
      }), _initializer4$a = applyDecoratedInitializer(_class2$m.prototype, "_stages", [_dec2$8, serializable], function () {
        return [];
      })), _class2$m)) || _class$p));
      legacyCC.RenderFlow = RenderFlow;

      var PipelineEventType;

      (function (PipelineEventType) {
        PipelineEventType["RENDER_FRAME_BEGIN"] = "render-frame-begin";
        PipelineEventType["RENDER_FRAME_END"] = "render-frame-end";
        PipelineEventType["RENDER_CAMERA_BEGIN"] = "render-camera-begin";
        PipelineEventType["RENDER_CAMERA_END"] = "render-camera-end";
        PipelineEventType["ATTACHMENT_SCALE_CAHNGED"] = "attachment-scale-changed";
      })(PipelineEventType || (PipelineEventType = exports('PipelineEventType', {})));

      var PipelineEventProcessor = exports('PipelineEventProcessor', function (_EventTarget) {
        _inheritsLoose(PipelineEventProcessor, _EventTarget);

        function PipelineEventProcessor() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _EventTarget.call.apply(_EventTarget, [this].concat(args)) || this;
          _this.eventTargetOn = _EventTarget.prototype.on;
          _this.eventTargetOnce = _EventTarget.prototype.once;
          return _this;
        }

        var _proto = PipelineEventProcessor.prototype;

        _proto.on = function on(type, callback, target, once) {
          return this.eventTargetOn(type, callback, target, once);
        };

        _proto.once = function once(type, callback, target) {
          return this.eventTargetOnce(type, callback, target);
        };

        return PipelineEventProcessor;
      }(EventTarget));

      var _dec$q, _dec2$9, _class$q, _class2$n, _initializer$k, _initializer2$e;
      var MAX_BLOOM_FILTER_PASS_NUM = 6;
      var tmpRect = new Rect$1();
      var tmpViewport = new Viewport();
      var BloomRenderData = function BloomRenderData() {
        this.renderPass = null;
        this.sampler = null;
        this.prefiterTex = null;
        this.downsampleTexs = [];
        this.upsampleTexs = [];
        this.combineTex = null;
        this.prefilterFramebuffer = null;
        this.downsampleFramebuffers = [];
        this.upsampleFramebuffers = [];
        this.combineFramebuffer = null;
      };
      var PipelineRenderData = function PipelineRenderData() {
        this.outputFrameBuffer = null;
        this.outputRenderTargets = [];
        this.outputDepth = null;
        this.sampler = null;
        this.bloom = null;
      };
      var PipelineInputAssemblerData = function PipelineInputAssemblerData() {
        this.quadIB = null;
        this.quadVB = null;
        this.quadIA = null;
      };

      function hashFrameBuffer(fbo) {
        var hash = 666;

        for (var _iterator = _createForOfIteratorHelperLoose(fbo.colorTextures), _step; !(_step = _iterator()).done;) {
          var color = _step.value;

          var _info = color === null || color === void 0 ? void 0 : color.info;

          var _hashStr = _info.type + "_" + _info.usage + "_" + _info.format + "_" + _info.width + "_" + _info.height + "_" + _info.flags + "_\n            " + _info.layerCount + "_" + _info.levelCount + "_" + _info.samples + "_" + _info.depth + "_" + _info.externalRes;

          hash = murmurhash2_32_gc(_hashStr, hash);
        }

        if (fbo.depthStencilTexture) {
          var info = fbo.depthStencilTexture.info;
          var hashStr = info.type + "_" + info.usage + "_" + info.format + "_" + info.width + "_" + info.height + "_" + info.flags + "_\n            " + info.layerCount + "_" + info.levelCount + "_" + info.samples + "_" + info.depth + "_" + info.externalRes;
          hash = murmurhash2_32_gc(hashStr, hash);
        }

        return hash;
      }

      var RenderPipeline = exports('RenderPipeline', (_dec$q = ccclass('cc.RenderPipeline'), _dec2$9 = type([RenderFlow]), _dec$q(_class$q = (_class2$n = function (_Asset) {
        _inheritsLoose(RenderPipeline, _Asset);

        function RenderPipeline() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Asset.call.apply(_Asset, [this].concat(args)) || this;
          _this._tag = _initializer$k && _initializer$k();
          _this._flows = _initializer2$e && _initializer2$e();
          _this._quadIB = null;
          _this._quadVBOnscreen = null;
          _this._quadVBOffscreen = null;
          _this._quadIAOnscreen = null;
          _this._quadIAOffscreen = null;
          _this._eventProcessor = new PipelineEventProcessor();
          _this._commandBuffers = [];
          _this._pipelineUBO = new PipelineUBO();
          _this._macros = {};
          _this._constantMacros = '';
          _this._profiler = null;
          _this._geometryRenderer = null;
          _this._pipelineRenderData = null;
          _this._renderPasses = new Map();
          _this._width = 0;
          _this._height = 0;
          _this._lastUsedRenderArea = new Rect$1();
          _this._clusterEnabled = false;
          _this._bloomEnabled = false;
          return _this;
        }

        var _proto = RenderPipeline.prototype;

        _proto.getPipelineRenderData = function getPipelineRenderData() {
          return this._pipelineRenderData;
        };

        _proto.initialize = function initialize(info) {
          this._flows = info.flows;

          if (info.tag) {
            this._tag = info.tag;
          }

          return true;
        };

        _proto.createRenderPass = function createRenderPass(clearFlags, colorFmt, depthFmt) {
          var device = this._device;
          var colorAttachment = new ColorAttachment();
          var depthStencilAttachment = new DepthStencilAttachment();
          colorAttachment.format = colorFmt;
          depthStencilAttachment.format = depthFmt;
          depthStencilAttachment.stencilStoreOp = StoreOp.DISCARD;
          depthStencilAttachment.depthStoreOp = StoreOp.DISCARD;

          if (!(clearFlags & ClearFlagBit.COLOR)) {
            if (clearFlags & SKYBOX_FLAG) {
              colorAttachment.loadOp = LoadOp.CLEAR;
            } else {
              colorAttachment.loadOp = LoadOp.LOAD;
              colorAttachment.barrier = device.getGeneralBarrier(new GeneralBarrierInfo(AccessFlagBit.COLOR_ATTACHMENT_WRITE, AccessFlagBit.COLOR_ATTACHMENT_WRITE));
            }
          }

          if ((clearFlags & ClearFlagBit.DEPTH_STENCIL) !== ClearFlagBit.DEPTH_STENCIL) {
            if (!(clearFlags & ClearFlagBit.DEPTH)) depthStencilAttachment.depthLoadOp = LoadOp.LOAD;
            if (!(clearFlags & ClearFlagBit.STENCIL)) depthStencilAttachment.stencilLoadOp = LoadOp.LOAD;
          }

          depthStencilAttachment.barrier = device.getGeneralBarrier(new GeneralBarrierInfo(AccessFlagBit.DEPTH_STENCIL_ATTACHMENT_WRITE, AccessFlagBit.DEPTH_STENCIL_ATTACHMENT_WRITE));
          var renderPassInfo = new RenderPassInfo([colorAttachment], depthStencilAttachment);
          return device.createRenderPass(renderPassInfo);
        };

        _proto.getRenderPass = function getRenderPass(clearFlags, fbo) {
          var fbHash = hashFrameBuffer(fbo);
          var hash = murmurhash2_32_gc(fbHash + "_" + clearFlags, 666);

          var renderPass = this._renderPasses.get(hash);

          if (renderPass) {
            return renderPass;
          }

          renderPass = this.createRenderPass(clearFlags, fbo.colorTextures[0].format, fbo.depthStencilTexture.format);

          this._renderPasses.set(hash, renderPass);

          return renderPass;
        };

        _proto.newFramebufferByRatio = function newFramebufferByRatio(dyingFramebuffer) {
          var sceneData = this.pipelineSceneData;
          var width = this._width * sceneData.shadingScale;
          var height = this._height * sceneData.shadingScale;
          var colorTexArr = dyingFramebuffer.colorTextures;

          for (var i = 0; i < colorTexArr.length; i++) {
            colorTexArr[i].resize(width, height);
          }

          if (dyingFramebuffer.depthStencilTexture) {
            dyingFramebuffer.depthStencilTexture.resize(width, height);
          }

          var newFramebuffer = this._device.createFramebuffer(new FramebufferInfo(dyingFramebuffer.renderPass, colorTexArr, dyingFramebuffer.depthStencilTexture));

          dyingFramebuffer.destroy();
          return newFramebuffer;
        };

        _proto.generateRenderArea = function generateRenderArea(camera, out) {
          var vp = camera.viewport;
          var w = camera.window.width;
          var h = camera.window.height;
          out.x = vp.x * w;
          out.y = vp.y * h;
          out.width = vp.width * w;
          out.height = vp.height * h;
        };

        _proto.generateViewport = function generateViewport(camera, out) {
          this.generateRenderArea(camera, tmpRect);
          if (!out) out = tmpViewport;
          var shadingScale = this.pipelineSceneData.shadingScale;
          out.left = tmpRect.x * shadingScale;
          out.top = tmpRect.y * shadingScale;
          out.width = tmpRect.width * shadingScale;
          out.height = tmpRect.height * shadingScale;
          return out;
        };

        _proto.generateScissor = function generateScissor(camera, out) {
          if (!out) out = tmpRect;
          this.generateRenderArea(camera, out);
          var shadingScale = this.pipelineSceneData.shadingScale;
          out.x *= shadingScale;
          out.y *= shadingScale;
          out.width *= shadingScale;
          out.height *= shadingScale;
          return out;
        };

        _proto.getMacroString = function getMacroString(name) {
          var str = this._macros[name];

          if (str === undefined) {
            return '';
          }

          return str;
        };

        _proto.getMacroInt = function getMacroInt(name) {
          var value = this._macros[name];

          if (value === undefined) {
            return 0;
          }

          return value;
        };

        _proto.getMacroBool = function getMacroBool(name) {
          var value = this._macros[name];

          if (value === undefined) {
            return false;
          }

          return value;
        };

        _proto.setMacroString = function setMacroString(name, value) {
          this._macros[name] = value;
        };

        _proto.setMacroInt = function setMacroInt(name, value) {
          this._macros[name] = value;
        };

        _proto.setMacroBool = function setMacroBool(name, value) {
          this._macros[name] = value;
        };

        _proto.activate = function activate(swapchain) {
          this._device = deviceManager.gfxDevice;

          this._generateConstantMacros();

          this._globalDSManager = new GlobalDSManager(this._device);
          this._descriptorSet = this._globalDSManager.globalDescriptorSet;

          this._pipelineUBO.activate(this._device, this);

          this._macros.CC_USE_HDR = this._pipelineSceneData.isHDR;
          this._macros.CC_USE_DEBUG_VIEW = 0;

          this._generateConstantMacros();

          this._pipelineSceneData.activate(this._device);

          for (var i = 0; i < this._flows.length; i++) {
            this._flows[i].activate(this);
          }

          return true;
        };

        _proto._ensureEnoughSize = function _ensureEnoughSize(cameras) {};

        _proto.render = function render(cameras) {
          if (cameras.length === 0) {
            return;
          }

          this.updateGeometryRenderer(cameras);

          this._commandBuffers[0].begin();

          this.emit(PipelineEventType.RENDER_FRAME_BEGIN, cameras);

          this._ensureEnoughSize(cameras);

          decideProfilerCamera(cameras);

          for (var i = 0; i < cameras.length; i++) {
            var camera = cameras[i];

            if (camera.scene) {
              this.emit(PipelineEventType.RENDER_CAMERA_BEGIN, camera);
              validPunctualLightsCulling(this, camera);
              sceneCulling(this, camera);

              this._pipelineUBO.updateGlobalUBO(camera.window);

              this._pipelineUBO.updateCameraUBO(camera);

              for (var j = 0; j < this._flows.length; j++) {
                this._flows[j].render(camera);
              }

              this.emit(PipelineEventType.RENDER_CAMERA_END, camera);
            }
          }

          this.emit(PipelineEventType.RENDER_FRAME_END, cameras);

          this._commandBuffers[0].end();

          this._device.queue.submit(this._commandBuffers);
        };

        _proto._destroyQuadInputAssembler = function _destroyQuadInputAssembler() {
          if (this._quadIB) {
            this._quadIB.destroy();

            this._quadIB = null;
          }

          if (this._quadVBOnscreen) {
            this._quadVBOnscreen.destroy();

            this._quadVBOnscreen = null;
          }

          if (this._quadVBOffscreen) {
            this._quadVBOffscreen.destroy();

            this._quadVBOffscreen = null;
          }

          if (this._quadIAOnscreen) {
            this._quadIAOnscreen.destroy();

            this._quadIAOnscreen = null;
          }

          if (this._quadIAOffscreen) {
            this._quadIAOffscreen.destroy();

            this._quadIAOffscreen = null;
          }
        };

        _proto._destroyBloomData = function _destroyBloomData() {
          var _bloom$renderPass;

          var bloom = this._pipelineRenderData.bloom;
          if (bloom === null) return;
          if (bloom.prefiterTex) bloom.prefiterTex.destroy();
          if (bloom.prefilterFramebuffer) bloom.prefilterFramebuffer.destroy();

          for (var i = 0; i < bloom.downsampleTexs.length; ++i) {
            bloom.downsampleTexs[i].destroy();
            bloom.downsampleFramebuffers[i].destroy();
          }

          bloom.downsampleTexs.length = 0;
          bloom.downsampleFramebuffers.length = 0;

          for (var _i = 0; _i < bloom.upsampleTexs.length; ++_i) {
            bloom.upsampleTexs[_i].destroy();

            bloom.upsampleFramebuffers[_i].destroy();
          }

          bloom.upsampleTexs.length = 0;
          bloom.upsampleFramebuffers.length = 0;
          if (bloom.combineTex) bloom.combineTex.destroy();
          if (bloom.combineFramebuffer) bloom.combineFramebuffer.destroy();
          (_bloom$renderPass = bloom.renderPass) === null || _bloom$renderPass === void 0 ? void 0 : _bloom$renderPass.destroy();
          this._pipelineRenderData.bloom = null;
        };

        _proto._genQuadVertexData = function _genQuadVertexData(surfaceTransform, renderArea) {
          var vbData = new Float32Array(4 * 4);
          var minX = renderArea.x / this._width;
          var maxX = (renderArea.x + renderArea.width) / this._width;
          var minY = renderArea.y / this._height;
          var maxY = (renderArea.y + renderArea.height) / this._height;

          if (this.device.capabilities.screenSpaceSignY > 0) {
            var temp = maxY;
            maxY = minY;
            minY = temp;
          }

          var n = 0;

          switch (surfaceTransform) {
            case SurfaceTransform.IDENTITY:
              n = 0;
              vbData[n++] = -1.0;
              vbData[n++] = -1.0;
              vbData[n++] = minX;
              vbData[n++] = maxY;
              vbData[n++] = 1.0;
              vbData[n++] = -1.0;
              vbData[n++] = maxX;
              vbData[n++] = maxY;
              vbData[n++] = -1.0;
              vbData[n++] = 1.0;
              vbData[n++] = minX;
              vbData[n++] = minY;
              vbData[n++] = 1.0;
              vbData[n++] = 1.0;
              vbData[n++] = maxX;
              vbData[n++] = minY;
              break;

            case SurfaceTransform.ROTATE_90:
              n = 0;
              vbData[n++] = -1.0;
              vbData[n++] = -1.0;
              vbData[n++] = maxX;
              vbData[n++] = maxY;
              vbData[n++] = 1.0;
              vbData[n++] = -1.0;
              vbData[n++] = maxX;
              vbData[n++] = minY;
              vbData[n++] = -1.0;
              vbData[n++] = 1.0;
              vbData[n++] = minX;
              vbData[n++] = maxY;
              vbData[n++] = 1.0;
              vbData[n++] = 1.0;
              vbData[n++] = minX;
              vbData[n++] = minY;
              break;

            case SurfaceTransform.ROTATE_180:
              n = 0;
              vbData[n++] = -1.0;
              vbData[n++] = -1.0;
              vbData[n++] = minX;
              vbData[n++] = minY;
              vbData[n++] = 1.0;
              vbData[n++] = -1.0;
              vbData[n++] = maxX;
              vbData[n++] = minY;
              vbData[n++] = -1.0;
              vbData[n++] = 1.0;
              vbData[n++] = minX;
              vbData[n++] = maxY;
              vbData[n++] = 1.0;
              vbData[n++] = 1.0;
              vbData[n++] = maxX;
              vbData[n++] = maxY;
              break;

            case SurfaceTransform.ROTATE_270:
              n = 0;
              vbData[n++] = -1.0;
              vbData[n++] = -1.0;
              vbData[n++] = minX;
              vbData[n++] = minY;
              vbData[n++] = 1.0;
              vbData[n++] = -1.0;
              vbData[n++] = minX;
              vbData[n++] = maxY;
              vbData[n++] = -1.0;
              vbData[n++] = 1.0;
              vbData[n++] = maxX;
              vbData[n++] = minY;
              vbData[n++] = 1.0;
              vbData[n++] = 1.0;
              vbData[n++] = maxX;
              vbData[n++] = maxY;
              break;
          }

          return vbData;
        };

        _proto._createQuadInputAssembler = function _createQuadInputAssembler() {
          var inputAssemblerData = new PipelineInputAssemblerData();
          var vbStride = Float32Array.BYTES_PER_ELEMENT * 4;
          var vbSize = vbStride * 4;

          var quadVB = this._device.createBuffer(new BufferInfo(BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE | MemoryUsageBit.HOST, vbSize, vbStride));

          if (!quadVB) {
            return inputAssemblerData;
          }

          var ibStride = Uint8Array.BYTES_PER_ELEMENT;
          var ibSize = ibStride * 6;

          var quadIB = this._device.createBuffer(new BufferInfo(BufferUsageBit.INDEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, ibSize, ibStride));

          if (!quadIB) {
            return inputAssemblerData;
          }

          var indices = new Uint8Array(6);
          indices[0] = 0;
          indices[1] = 1;
          indices[2] = 2;
          indices[3] = 1;
          indices[4] = 3;
          indices[5] = 2;
          quadIB.update(indices);
          var attributes = new Array(2);
          attributes[0] = new Attribute('a_position', Format.RG32F);
          attributes[1] = new Attribute('a_texCoord', Format.RG32F);

          var quadIA = this._device.createInputAssembler(new InputAssemblerInfo(attributes, [quadVB], quadIB));

          inputAssemblerData.quadIB = quadIB;
          inputAssemblerData.quadVB = quadVB;
          inputAssemblerData.quadIA = quadIA;
          return inputAssemblerData;
        };

        _proto.updateQuadVertexData = function updateQuadVertexData(renderArea, window) {
          var cachedArea = this._lastUsedRenderArea;

          if (cachedArea.x === renderArea.x && cachedArea.y === renderArea.y && cachedArea.width === renderArea.width && cachedArea.height === renderArea.height) {
            return;
          }

          var offData = this._genQuadVertexData(SurfaceTransform.IDENTITY, renderArea);

          this._quadVBOffscreen.update(offData);

          var onData = this._genQuadVertexData(window.swapchain && window.swapchain.surfaceTransform || SurfaceTransform.IDENTITY, renderArea);

          this._quadVBOnscreen.update(onData);

          cachedArea.copy(renderArea);
        };

        _proto.destroy = function destroy() {
          var _this$_globalDSManage, _this$_pipelineSceneD;

          for (var i = 0; i < this._flows.length; i++) {
            this._flows[i].destroy();
          }

          this._flows.length = 0;

          if (this._descriptorSet) {
            this._descriptorSet.destroy();
          }

          (_this$_globalDSManage = this._globalDSManager) === null || _this$_globalDSManage === void 0 ? void 0 : _this$_globalDSManage.destroy();

          for (var _i2 = 0; _i2 < this._commandBuffers.length; _i2++) {
            this._commandBuffers[_i2].destroy();
          }

          this._commandBuffers.length = 0;

          this._pipelineUBO.destroy();

          (_this$_pipelineSceneD = this._pipelineSceneData) === null || _this$_pipelineSceneD === void 0 ? void 0 : _this$_pipelineSceneD.destroy();
          return _Asset.prototype.destroy.call(this);
        };

        _proto.onGlobalPipelineStateChanged = function onGlobalPipelineStateChanged() {};

        _proto._generateConstantMacros = function _generateConstantMacros() {
          var str = '';
          str += "#define CC_DEVICE_SUPPORT_FLOAT_TEXTURE " + (this.device.getFormatFeatures(Format.RGBA32F) & (FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE) ? 1 : 0) + "\n";
          str += "#define CC_ENABLE_CLUSTERED_LIGHT_CULLING " + (this._clusterEnabled ? 1 : 0) + "\n";
          str += "#define CC_DEVICE_MAX_VERTEX_UNIFORM_VECTORS " + this.device.capabilities.maxVertexUniformVectors + "\n";
          str += "#define CC_DEVICE_MAX_FRAGMENT_UNIFORM_VECTORS " + this.device.capabilities.maxFragmentUniformVectors + "\n";
          str += "#define CC_DEVICE_CAN_BENEFIT_FROM_INPUT_ATTACHMENT " + (this.device.hasFeature(Feature$1.INPUT_ATTACHMENT_BENEFIT) ? 1 : 0) + "\n";
          str += "#define CC_PLATFORM_ANDROID_AND_WEBGL " + (systemInfo.os === OS.ANDROID && systemInfo.isBrowser ? 1 : 0) + "\n";
          str += "#define CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES " + (macro.ENABLE_WEBGL_HIGHP_STRUCT_VALUES ? 1 : 0) + "\n";
          var jointUniformCapacity = UBOSkinning.JOINT_UNIFORM_CAPACITY;
          str += "#define CC_JOINT_UNIFORM_CAPACITY " + jointUniformCapacity + "\n";
          this._constantMacros = str;
        };

        _proto.updateGeometryRenderer = function updateGeometryRenderer(cameras) {
          if (this._geometryRenderer) {
            return;
          }

          for (var i = 0; i < cameras.length; i++) {
            var camera = cameras[i];

            if (camera && camera.window && camera.window.swapchain) {
              camera.initGeometryRenderer();
              this._geometryRenderer = camera.geometryRenderer;
              return;
            }
          }
        };

        _proto.generateBloomRenderData = function generateBloomRenderData() {
          if (this._pipelineRenderData.bloom != null) return;
          var bloom = this._pipelineRenderData.bloom = new BloomRenderData();
          var device = this.device;
          var colorAttachment = new ColorAttachment();
          colorAttachment.format = Format.RGBA8;
          colorAttachment.loadOp = LoadOp.CLEAR;
          colorAttachment.storeOp = StoreOp.STORE;
          colorAttachment.barrier = device.getGeneralBarrier(new GeneralBarrierInfo(AccessFlagBit.NONE, AccessFlagBit.COLOR_ATTACHMENT_WRITE));
          bloom.renderPass = device.createRenderPass(new RenderPassInfo([colorAttachment]));
          var curWidth = this._width;
          var curHeight = this._height;
          bloom.prefiterTex = device.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.COLOR_ATTACHMENT | TextureUsageBit.SAMPLED, Format.RGBA8, curWidth >> 1, curHeight >> 1));
          bloom.prefilterFramebuffer = device.createFramebuffer(new FramebufferInfo(bloom.renderPass, [bloom.prefiterTex]));
          curWidth >>= 1;
          curHeight >>= 1;

          for (var i = 0; i < MAX_BLOOM_FILTER_PASS_NUM; ++i) {
            bloom.downsampleTexs.push(device.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.COLOR_ATTACHMENT | TextureUsageBit.SAMPLED, Format.RGBA8, curWidth >> 1, curHeight >> 1)));
            bloom.downsampleFramebuffers[i] = device.createFramebuffer(new FramebufferInfo(bloom.renderPass, [bloom.downsampleTexs[i]]));
            bloom.upsampleTexs.push(device.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.COLOR_ATTACHMENT | TextureUsageBit.SAMPLED, Format.RGBA8, curWidth, curHeight)));
            bloom.upsampleFramebuffers[i] = device.createFramebuffer(new FramebufferInfo(bloom.renderPass, [bloom.upsampleTexs[i]]));
            curWidth >>= 1;
            curHeight >>= 1;
          }

          bloom.combineTex = device.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.COLOR_ATTACHMENT | TextureUsageBit.SAMPLED, Format.RGBA8, this._width, this._height));
          bloom.combineFramebuffer = device.createFramebuffer(new FramebufferInfo(bloom.renderPass, [bloom.combineTex]));
          bloom.sampler = this.globalDSManager.linearSampler;
        };

        _proto.on = function on(type, callback, target, once) {
          return this._eventProcessor.on(type, callback, target, once);
        };

        _proto.once = function once(type, callback, target) {
          return this._eventProcessor.once(type, callback, target);
        };

        _proto.off = function off(type, callback, target) {
          this._eventProcessor.off(type, callback, target);
        };

        _proto.emit = function emit(type, arg0, arg1, arg2, arg3, arg4) {
          this._eventProcessor.emit(type, arg0, arg1, arg2, arg3, arg4);
        };

        _proto.targetOff = function targetOff(typeOrTarget) {
          this._eventProcessor.targetOff(typeOrTarget);
        };

        _proto.removeAll = function removeAll(typeOrTarget) {
          this._eventProcessor.removeAll(typeOrTarget);
        };

        _proto.hasEventListener = function hasEventListener(type, callback, target) {
          return this._eventProcessor.hasEventListener(type, callback, target);
        };

        _createClass(RenderPipeline, [{
          key: "tag",
          get: function get() {
            return this._tag;
          }
        }, {
          key: "flows",
          get: function get() {
            return this._flows;
          }
        }, {
          key: "quadIAOnscreen",
          get: function get() {
            return this._quadIAOnscreen;
          }
        }, {
          key: "quadIAOffscreen",
          get: function get() {
            return this._quadIAOffscreen;
          }
        }, {
          key: "constantMacros",
          get: function get() {
            return this._constantMacros;
          }
        }, {
          key: "macros",
          get: function get() {
            return this._macros;
          }
        }, {
          key: "device",
          get: function get() {
            return this._device;
          }
        }, {
          key: "globalDSManager",
          get: function get() {
            return this._globalDSManager;
          }
        }, {
          key: "descriptorSetLayout",
          get: function get() {
            return this._globalDSManager.descriptorSetLayout;
          }
        }, {
          key: "descriptorSet",
          get: function get() {
            return this._descriptorSet;
          }
        }, {
          key: "commandBuffers",
          get: function get() {
            return this._commandBuffers;
          }
        }, {
          key: "pipelineUBO",
          get: function get() {
            return this._pipelineUBO;
          }
        }, {
          key: "pipelineSceneData",
          get: function get() {
            return this._pipelineSceneData;
          }
        }, {
          key: "profiler",
          get: function get() {
            return this._profiler;
          },
          set: function set(value) {
            this._profiler = value;
          }
        }, {
          key: "geometryRenderer",
          get: function get() {
            return this._geometryRenderer;
          }
        }, {
          key: "clusterEnabled",
          get: function get() {
            return this._clusterEnabled;
          },
          set: function set(value) {
            this._clusterEnabled = value;
          }
        }, {
          key: "bloomEnabled",
          get: function get() {
            return this._bloomEnabled;
          },
          set: function set(value) {
            this._bloomEnabled = value;
          }
        }, {
          key: "shadingScale",
          get: function get() {
            return this._pipelineSceneData.shadingScale;
          },
          set: function set(val) {
            if (this._pipelineSceneData.shadingScale !== val) {
              this._pipelineSceneData.shadingScale = val;
              this.emit(PipelineEventType.ATTACHMENT_SCALE_CAHNGED, val);
            }
          }
        }]);

        return RenderPipeline;
      }(Asset), (_initializer$k = applyDecoratedInitializer(_class2$n.prototype, "_tag", [serializable], function () {
        return 0;
      }), _initializer2$e = applyDecoratedInitializer(_class2$n.prototype, "_flows", [_dec2$9, serializable], function () {
        return [];
      })), _class2$n)) || _class$q));
      legacyCC.RenderPipeline = RenderPipeline;

      var CommonStagePriority;

      (function (CommonStagePriority) {
        CommonStagePriority[CommonStagePriority["BLOOM"] = 18] = "BLOOM";
        CommonStagePriority[CommonStagePriority["POST_PROCESS"] = 19] = "POST_PROCESS";
        CommonStagePriority[CommonStagePriority["UI"] = 20] = "UI";
      })(CommonStagePriority || (CommonStagePriority = {}));

      var ForwardStagePriority;

      (function (ForwardStagePriority) {
        ForwardStagePriority[ForwardStagePriority["AR"] = 5] = "AR";
        ForwardStagePriority[ForwardStagePriority["FORWARD"] = 10] = "FORWARD";
      })(ForwardStagePriority || (ForwardStagePriority = {}));

      var ForwardFlowPriority;

      (function (ForwardFlowPriority) {
        ForwardFlowPriority[ForwardFlowPriority["SHADOW"] = 0] = "SHADOW";
        ForwardFlowPriority[ForwardFlowPriority["FORWARD"] = 1] = "FORWARD";
        ForwardFlowPriority[ForwardFlowPriority["UI"] = 10] = "UI";
      })(ForwardFlowPriority || (ForwardFlowPriority = {}));

      var DeferredStagePriority;

      (function (DeferredStagePriority) {
        DeferredStagePriority[DeferredStagePriority["GBUFFER"] = 10] = "GBUFFER";
        DeferredStagePriority[DeferredStagePriority["LIGHTING"] = 15] = "LIGHTING";
        DeferredStagePriority[DeferredStagePriority["TRANSPARENT"] = 18] = "TRANSPARENT";
      })(DeferredStagePriority || (DeferredStagePriority = {}));

      var DeferredFlowPriority;

      (function (DeferredFlowPriority) {
        DeferredFlowPriority[DeferredFlowPriority["SHADOW"] = 0] = "SHADOW";
        DeferredFlowPriority[DeferredFlowPriority["MAIN"] = 1] = "MAIN";
        DeferredFlowPriority[DeferredFlowPriority["UI"] = 10] = "UI";
      })(DeferredFlowPriority || (DeferredFlowPriority = {}));

      var _dec$r, _dec2$a, _dec3$4, _dec4$2, _class$r, _class2$o, _initializer$l, _initializer2$f, _initializer3$d, _initializer4$b, _initializer5$7, _initializer6$4, _dec5$2, _dec6$2, _class4$3, _class5$3, _initializer7$4, _initializer8$4, _dec7$2, _dec8$2, _class7$2, _class8$2, _initializer9$3, _initializer10$3, _dec9$2, _dec10$2, _dec11$2, _class10$2, _class11$2, _initializer11$3, _initializer12$2, _initializer13$2, _initializer14$2, _initializer15$2, _dec12$2, _dec13$2, _dec14$2, _dec15$2, _dec16$2, _dec17$2, _class13$2, _class14$2, _initializer16$2, _initializer17$2, _initializer18$2, _initializer19$2, _initializer20$2, _initializer21$2, _dec18$2, _dec19$2, _dec20$2, _dec21$2, _dec22$2, _dec23$2, _dec24$2, _dec25$2, _class16$2, _class17$2, _initializer22$2, _initializer23$2, _initializer24$2, _initializer25$2, _initializer26$2, _initializer27$1, _initializer28$1, _initializer29$1, _dec26$1, _dec27$1, _dec28$1, _class19$2, _class20$2, _initializer30$1, _initializer31$1, _initializer32$1, _dec29$1, _dec30$1, _dec31$1, _class22$1, _class23$1, _initializer33$1, _initializer34$1, _initializer35$1;
      ccenum(TextureType);
      ccenum(TextureUsageBit);
      ccenum(StoreOp);
      ccenum(LoadOp);
      ccenum(AccessFlagBit);
      ccenum(Format);
      var RenderFlowTag;

      (function (RenderFlowTag) {
        RenderFlowTag[RenderFlowTag["SCENE"] = 0] = "SCENE";
        RenderFlowTag[RenderFlowTag["POSTPROCESS"] = 1] = "POSTPROCESS";
        RenderFlowTag[RenderFlowTag["UI"] = 2] = "UI";
      })(RenderFlowTag || (RenderFlowTag = {}));

      ccenum(RenderFlowTag);
      var RenderTextureDesc = (_dec$r = ccclass('RenderTextureDesc'), _dec2$a = type(TextureType), _dec3$4 = type(TextureUsageBit), _dec4$2 = type(Format), _dec$r(_class$r = (_class2$o = function RenderTextureDesc() {
        this.name = _initializer$l && _initializer$l();
        this.type = _initializer2$f && _initializer2$f();
        this.usage = _initializer3$d && _initializer3$d();
        this.format = _initializer4$b && _initializer4$b();
        this.width = _initializer5$7 && _initializer5$7();
        this.height = _initializer6$4 && _initializer6$4();
      }, (_initializer$l = applyDecoratedInitializer(_class2$o.prototype, "name", [serializable], function () {
        return '';
      }), _initializer2$f = applyDecoratedInitializer(_class2$o.prototype, "type", [_dec2$a], function () {
        return TextureType.TEX2D;
      }), _initializer3$d = applyDecoratedInitializer(_class2$o.prototype, "usage", [_dec3$4], function () {
        return TextureUsageBit.COLOR_ATTACHMENT;
      }), _initializer4$b = applyDecoratedInitializer(_class2$o.prototype, "format", [_dec4$2], function () {
        return Format.UNKNOWN;
      }), _initializer5$7 = applyDecoratedInitializer(_class2$o.prototype, "width", [serializable], function () {
        return -1;
      }), _initializer6$4 = applyDecoratedInitializer(_class2$o.prototype, "height", [serializable], function () {
        return -1;
      })), _class2$o)) || _class$r);
      var RenderTextureConfig = (_dec5$2 = ccclass('RenderTextureConfig'), _dec6$2 = type(RenderTexture), _dec5$2(_class4$3 = (_class5$3 = function RenderTextureConfig() {
        this.name = _initializer7$4 && _initializer7$4();
        this.texture = _initializer8$4 && _initializer8$4();
      }, (_initializer7$4 = applyDecoratedInitializer(_class5$3.prototype, "name", [serializable], function () {
        return '';
      }), _initializer8$4 = applyDecoratedInitializer(_class5$3.prototype, "texture", [_dec6$2], function () {
        return null;
      })), _class5$3)) || _class4$3);
      var MaterialConfig = (_dec7$2 = ccclass('MaterialConfig'), _dec8$2 = type(Material), _dec7$2(_class7$2 = (_class8$2 = function MaterialConfig() {
        this.name = _initializer9$3 && _initializer9$3();
        this.material = _initializer10$3 && _initializer10$3();
      }, (_initializer9$3 = applyDecoratedInitializer(_class8$2.prototype, "name", [serializable], function () {
        return '';
      }), _initializer10$3 = applyDecoratedInitializer(_class8$2.prototype, "material", [_dec8$2], function () {
        return null;
      })), _class8$2)) || _class7$2);
      var FrameBufferDesc = (_dec9$2 = ccclass('FrameBufferDesc'), _dec10$2 = type([CCString]), _dec11$2 = type(RenderTexture), _dec9$2(_class10$2 = (_class11$2 = function FrameBufferDesc() {
        this.name = _initializer11$3 && _initializer11$3();
        this.renderPass = _initializer12$2 && _initializer12$2();
        this.colorTextures = _initializer13$2 && _initializer13$2();
        this.depthStencilTexture = _initializer14$2 && _initializer14$2();
        this.texture = _initializer15$2 && _initializer15$2();
      }, (_initializer11$3 = applyDecoratedInitializer(_class11$2.prototype, "name", [serializable], function () {
        return '';
      }), _initializer12$2 = applyDecoratedInitializer(_class11$2.prototype, "renderPass", [serializable], function () {
        return 0;
      }), _initializer13$2 = applyDecoratedInitializer(_class11$2.prototype, "colorTextures", [_dec10$2], function () {
        return [];
      }), _initializer14$2 = applyDecoratedInitializer(_class11$2.prototype, "depthStencilTexture", [serializable], function () {
        return '';
      }), _initializer15$2 = applyDecoratedInitializer(_class11$2.prototype, "texture", [_dec11$2], function () {
        return null;
      })), _class11$2)) || _class10$2);
      var ColorDesc = (_dec12$2 = ccclass('ColorDesc'), _dec13$2 = type(Format), _dec14$2 = type(LoadOp), _dec15$2 = type(StoreOp), _dec16$2 = type(AccessFlagBit), _dec17$2 = type(AccessFlagBit), _dec12$2(_class13$2 = (_class14$2 = function ColorDesc() {
        this.format = _initializer16$2 && _initializer16$2();
        this.loadOp = _initializer17$2 && _initializer17$2();
        this.storeOp = _initializer18$2 && _initializer18$2();
        this.sampleCount = _initializer19$2 && _initializer19$2();
        this.beginAccesses = _initializer20$2 && _initializer20$2();
        this.endAccesses = _initializer21$2 && _initializer21$2();
      }, (_initializer16$2 = applyDecoratedInitializer(_class14$2.prototype, "format", [_dec13$2], function () {
        return Format.UNKNOWN;
      }), _initializer17$2 = applyDecoratedInitializer(_class14$2.prototype, "loadOp", [_dec14$2], function () {
        return LoadOp.CLEAR;
      }), _initializer18$2 = applyDecoratedInitializer(_class14$2.prototype, "storeOp", [_dec15$2], function () {
        return StoreOp.STORE;
      }), _initializer19$2 = applyDecoratedInitializer(_class14$2.prototype, "sampleCount", [serializable], function () {
        return 1;
      }), _initializer20$2 = applyDecoratedInitializer(_class14$2.prototype, "beginAccesses", [_dec16$2], function () {
        return AccessFlagBit.NONE;
      }), _initializer21$2 = applyDecoratedInitializer(_class14$2.prototype, "endAccesses", [_dec17$2], function () {
        return AccessFlagBit.COLOR_ATTACHMENT_WRITE;
      })), _class14$2)) || _class13$2);
      var DepthStencilDesc = (_dec18$2 = ccclass('DepthStencilDesc'), _dec19$2 = type(Format), _dec20$2 = type(LoadOp), _dec21$2 = type(StoreOp), _dec22$2 = type(LoadOp), _dec23$2 = type(StoreOp), _dec24$2 = type(AccessFlagBit), _dec25$2 = type(AccessFlagBit), _dec18$2(_class16$2 = (_class17$2 = function DepthStencilDesc() {
        this.format = _initializer22$2 && _initializer22$2();
        this.depthLoadOp = _initializer23$2 && _initializer23$2();
        this.depthStoreOp = _initializer24$2 && _initializer24$2();
        this.stencilLoadOp = _initializer25$2 && _initializer25$2();
        this.stencilStoreOp = _initializer26$2 && _initializer26$2();
        this.sampleCount = _initializer27$1 && _initializer27$1();
        this.beginAccesses = _initializer28$1 && _initializer28$1();
        this.endAccesses = _initializer29$1 && _initializer29$1();
      }, (_initializer22$2 = applyDecoratedInitializer(_class17$2.prototype, "format", [_dec19$2], function () {
        return Format.UNKNOWN;
      }), _initializer23$2 = applyDecoratedInitializer(_class17$2.prototype, "depthLoadOp", [_dec20$2], function () {
        return LoadOp.CLEAR;
      }), _initializer24$2 = applyDecoratedInitializer(_class17$2.prototype, "depthStoreOp", [_dec21$2], function () {
        return StoreOp.STORE;
      }), _initializer25$2 = applyDecoratedInitializer(_class17$2.prototype, "stencilLoadOp", [_dec22$2], function () {
        return LoadOp.CLEAR;
      }), _initializer26$2 = applyDecoratedInitializer(_class17$2.prototype, "stencilStoreOp", [_dec23$2], function () {
        return StoreOp.STORE;
      }), _initializer27$1 = applyDecoratedInitializer(_class17$2.prototype, "sampleCount", [serializable], function () {
        return 1;
      }), _initializer28$1 = applyDecoratedInitializer(_class17$2.prototype, "beginAccesses", [_dec24$2], function () {
        return AccessFlagBit.NONE;
      }), _initializer29$1 = applyDecoratedInitializer(_class17$2.prototype, "endAccesses", [_dec25$2], function () {
        return AccessFlagBit.DEPTH_STENCIL_ATTACHMENT_WRITE;
      })), _class17$2)) || _class16$2);
      var RenderPassDesc = (_dec26$1 = ccclass('RenderPassDesc'), _dec27$1 = type([ColorDesc]), _dec28$1 = type(DepthStencilDesc), _dec26$1(_class19$2 = (_class20$2 = function RenderPassDesc() {
        this.index = _initializer30$1 && _initializer30$1();
        this.colorAttachments = _initializer31$1 && _initializer31$1();
        this.depthStencilAttachment = _initializer32$1 && _initializer32$1();
      }, (_initializer30$1 = applyDecoratedInitializer(_class20$2.prototype, "index", [serializable], function () {
        return -1;
      }), _initializer31$1 = applyDecoratedInitializer(_class20$2.prototype, "colorAttachments", [_dec27$1], function () {
        return [];
      }), _initializer32$1 = applyDecoratedInitializer(_class20$2.prototype, "depthStencilAttachment", [_dec28$1], function () {
        return new DepthStencilDesc();
      })), _class20$2)) || _class19$2);
      var RenderQueueSortMode;

      (function (RenderQueueSortMode) {
        RenderQueueSortMode[RenderQueueSortMode["FRONT_TO_BACK"] = 0] = "FRONT_TO_BACK";
        RenderQueueSortMode[RenderQueueSortMode["BACK_TO_FRONT"] = 1] = "BACK_TO_FRONT";
      })(RenderQueueSortMode || (RenderQueueSortMode = {}));

      ccenum(RenderQueueSortMode);
      var RenderQueueDesc = (_dec29$1 = ccclass('RenderQueueDesc'), _dec30$1 = type(RenderQueueSortMode), _dec31$1 = type([CCString]), _dec29$1(_class22$1 = (_class23$1 = function RenderQueueDesc() {
        this.isTransparent = _initializer33$1 && _initializer33$1();
        this.sortMode = _initializer34$1 && _initializer34$1();
        this.stages = _initializer35$1 && _initializer35$1();
      }, (_initializer33$1 = applyDecoratedInitializer(_class23$1.prototype, "isTransparent", [serializable], function () {
        return false;
      }), _initializer34$1 = applyDecoratedInitializer(_class23$1.prototype, "sortMode", [_dec30$1], function () {
        return RenderQueueSortMode.FRONT_TO_BACK;
      }), _initializer35$1 = applyDecoratedInitializer(_class23$1.prototype, "stages", [_dec31$1], function () {
        return [];
      })), _class23$1)) || _class22$1);

      function opaqueCompareFn(a, b) {
        return a.hash - b.hash || a.depth - b.depth || a.shaderId - b.shaderId;
      }
      function transparentCompareFn(a, b) {
        return a.priority - b.priority || a.hash - b.hash || b.depth - a.depth || a.shaderId - b.shaderId;
      }
      var RenderQueue = function () {
        function RenderQueue(desc) {
          this.queue = void 0;
          this._passDesc = void 0;
          this._passPool = void 0;
          this._passDesc = desc;
          this._passPool = new RecyclePool(function () {
            return {
              priority: 0,
              hash: 0,
              depth: 0,
              shaderId: 0,
              subModel: null,
              passIdx: 0
            };
          }, 64);
          this.queue = new CachedArray(64, this._passDesc.sortFunc);
        }

        var _proto = RenderQueue.prototype;

        _proto.clear = function clear() {
          this.queue.clear();

          this._passPool.reset();
        };

        _proto.insertRenderPass = function insertRenderPass(renderObj, subModelIdx, passIdx) {
          var subModel = renderObj.model.subModels[subModelIdx];
          var pass = subModel.passes[passIdx];
          var shader = subModel.shaders[passIdx];
          var isTransparent = pass.blendState.targets[0].blend;

          if (isTransparent !== this._passDesc.isTransparent || !(pass.phase & this._passDesc.phases)) {
            return false;
          }

          var hash = 0 << 30 | pass.priority << 16 | subModel.priority << 8 | passIdx;

          var rp = this._passPool.add();

          rp.priority = renderObj.model.priority;
          rp.hash = hash;
          rp.depth = renderObj.depth || 0;
          rp.shaderId = shader.typedID;
          rp.subModel = subModel;
          rp.passIdx = passIdx;
          this.queue.push(rp);
          return true;
        };

        _proto.sort = function sort() {
          this.queue.sort();
        };

        _proto.recordCommandBuffer = function recordCommandBuffer(device, renderPass, cmdBuff) {
          for (var i = 0; i < this.queue.length; ++i) {
            var _this$queue$array$i = this.queue.array[i],
                subModel = _this$queue$array$i.subModel,
                passIdx = _this$queue$array$i.passIdx;
            var inputAssembler = subModel.inputAssembler;
            var pass = subModel.passes[passIdx];
            var shader = subModel.shaders[passIdx];
            var pso = PipelineStateManager.getOrCreatePipelineState(device, pass, shader, renderPass, inputAssembler);
            cmdBuff.bindPipelineState(pso);
            cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, pass.descriptorSet);
            cmdBuff.bindDescriptorSet(SetIndex.LOCAL, subModel.descriptorSet);
            cmdBuff.bindInputAssembler(inputAssembler);
            cmdBuff.draw(inputAssembler);
          }
        };

        return RenderQueue;
      }();
      function convertRenderQueue(desc) {
        var phase = 0;

        for (var j = 0; j < desc.stages.length; j++) {
          phase |= getPhaseID(desc.stages[j]);
        }

        var sortFunc = opaqueCompareFn;

        switch (desc.sortMode) {
          case RenderQueueSortMode.BACK_TO_FRONT:
            sortFunc = transparentCompareFn;
            break;

          case RenderQueueSortMode.FRONT_TO_BACK:
            sortFunc = opaqueCompareFn;
            break;
        }

        return new RenderQueue({
          isTransparent: desc.isTransparent,
          phases: phase,
          sortFunc: sortFunc
        });
      }
      function renderQueueClearFunc(rq) {
        rq.clear();
      }
      function renderQueueSortFunc(rq) {
        rq.sort();
      }

      var RenderBatchedQueue = function () {
        function RenderBatchedQueue() {
          this.queue = new Set();
        }

        var _proto = RenderBatchedQueue.prototype;

        _proto.clear = function clear() {
          var it = this.queue.values();
          var res = it.next();

          while (!res.done) {
            res.value.clear();
            res = it.next();
          }

          this.queue.clear();
        };

        _proto.uploadBuffers = function uploadBuffers(cmdBuff) {
          var it = this.queue.values();
          var res = it.next();

          while (!res.done) {
            for (var b = 0; b < res.value.batches.length; ++b) {
              var batch = res.value.batches[b];

              if (!batch.mergeCount) {
                continue;
              }

              for (var v = 0; v < batch.vbs.length; ++v) {
                batch.vbs[v].update(batch.vbDatas[v]);
              }

              cmdBuff.updateBuffer(batch.vbIdx, batch.vbIdxData.buffer);
              cmdBuff.updateBuffer(batch.ubo, batch.uboData);
            }

            res = it.next();
          }
        };

        _proto.recordCommandBuffer = function recordCommandBuffer(device, renderPass, cmdBuff, descriptorSet, dynamicOffsets) {
          if (descriptorSet === void 0) {
            descriptorSet = null;
          }

          var it = this.queue.values();
          var res = it.next();

          while (!res.done) {
            var boundPSO = false;

            for (var b = 0; b < res.value.batches.length; ++b) {
              var batch = res.value.batches[b];

              if (!batch.mergeCount) {
                continue;
              }

              if (!boundPSO) {
                var shader = batch.shader;
                var pso = PipelineStateManager.getOrCreatePipelineState(device, batch.pass, shader, renderPass, batch.ia);
                cmdBuff.bindPipelineState(pso);
                cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, batch.pass.descriptorSet);
                boundPSO = true;
              }

              if (descriptorSet) cmdBuff.bindDescriptorSet(SetIndex.GLOBAL, descriptorSet);

              if (dynamicOffsets) {
                cmdBuff.bindDescriptorSet(SetIndex.LOCAL, batch.descriptorSet, dynamicOffsets);
              } else {
                cmdBuff.bindDescriptorSet(SetIndex.LOCAL, batch.descriptorSet, res.value.dynamicOffsets);
              }

              cmdBuff.bindInputAssembler(batch.ia);
              cmdBuff.draw(batch.ia);
            }

            res = it.next();
          }
        };

        return RenderBatchedQueue;
      }();

      var RenderInstancedQueue = function () {
        function RenderInstancedQueue() {
          this.queue = new Set();
          this._renderQueue = [];
        }

        var _proto = RenderInstancedQueue.prototype;

        _proto.clear = function clear() {
          var it = this.queue.values();
          var res = it.next();

          while (!res.done) {
            res.value.clear();
            res = it.next();
          }

          this._renderQueue.length = 0;
          this.queue.clear();
        };

        _proto.sort = function sort() {
          var it = this.queue.values();
          var res = it.next();

          while (!res.done) {
            if (!res.value.pass.blendState.targets[0].blend) {
              this._renderQueue.push(res.value);
            }

            res = it.next();
          }

          it = this.queue.values();
          res = it.next();

          while (!res.done) {
            if (res.value.pass.blendState.targets[0].blend) {
              this._renderQueue.push(res.value);
            }

            res = it.next();
          }
        };

        _proto.uploadBuffers = function uploadBuffers(cmdBuff) {
          var it = this.queue.values();
          var res = it.next();

          while (!res.done) {
            if (res.value.hasPendingModels) res.value.uploadBuffers(cmdBuff);
            res = it.next();
          }
        };

        _proto.recordCommandBuffer = function recordCommandBuffer(device, renderPass, cmdBuff, descriptorSet, dynamicOffsets) {
          if (descriptorSet === void 0) {
            descriptorSet = null;
          }

          var it = this._renderQueue.length === 0 ? this.queue.values() : this._renderQueue.values();
          var res = it.next();

          while (!res.done) {
            var _res$value = res.value,
                instances = _res$value.instances,
                pass = _res$value.pass,
                hasPendingModels = _res$value.hasPendingModels;

            if (hasPendingModels) {
              cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, pass.descriptorSet);
              var lastPSO = null;

              for (var b = 0; b < instances.length; ++b) {
                var instance = instances[b];

                if (!instance.count) {
                  continue;
                }

                var shader = instance.shader;
                var pso = PipelineStateManager.getOrCreatePipelineState(device, pass, shader, renderPass, instance.ia);

                if (lastPSO !== pso) {
                  cmdBuff.bindPipelineState(pso);
                  lastPSO = pso;
                }

                if (descriptorSet) cmdBuff.bindDescriptorSet(SetIndex.GLOBAL, descriptorSet);

                if (dynamicOffsets) {
                  cmdBuff.bindDescriptorSet(SetIndex.LOCAL, instance.descriptorSet, dynamicOffsets);
                } else {
                  cmdBuff.bindDescriptorSet(SetIndex.LOCAL, instance.descriptorSet, res.value.dynamicOffsets);
                }

                cmdBuff.bindInputAssembler(instance.ia);
                cmdBuff.draw(instance.ia);
              }
            }

            res = it.next();
          }
        };

        return RenderInstancedQueue;
      }();

      var _lightPassPool = new Pool$1(function () {
        return {
          subModel: null,
          passIdx: -1,
          dynamicOffsets: [],
          lights: []
        };
      }, 16);

      var _vec4Array = new Float32Array(4);

      var _dynamicOffsets = [];
      var _lightIndices = [];

      var _matShadowView$1 = new Mat4();

      var _matShadowViewProj$1 = new Mat4();

      function cullSphereLight(light, model) {
        return !!(model.worldBounds && !intersect.aabbWithAABB(model.worldBounds, light.aabb));
      }

      function cullSpotLight(light, model) {
        return !!(model.worldBounds && (!intersect.aabbWithAABB(model.worldBounds, light.aabb) || !intersect.aabbFrustum(model.worldBounds, light.frustum)));
      }

      var phaseName = 'forward-add';

      var _phaseID = getPhaseID(phaseName);

      var _lightPassIndices = [];

      function getLightPassIndices(subModels, lightPassIndices) {
        var r = legacyCC.rendering;

        if (isEnableEffect()) {
          _phaseID = r.getPhaseID(r.getPassID('default'), phaseName);
        }

        lightPassIndices.length = 0;
        var hasValidLightPass = false;

        for (var j = 0; j < subModels.length; j++) {
          var passes = subModels[j].passes;
          var lightPassIndex = -1;

          for (var k = 0; k < passes.length; k++) {
            if ((!r || !r.enableEffectImport) && passes[k].phase === _phaseID || isEnableEffect() && passes[k].phaseID === _phaseID) {
              lightPassIndex = k;
              hasValidLightPass = true;
              break;
            }
          }

          lightPassIndices.push(lightPassIndex);
        }

        return hasValidLightPass;
      }

      var RenderAdditiveLightQueue = function () {
        function RenderAdditiveLightQueue(pipeline) {
          this._pipeline = void 0;
          this._device = void 0;
          this._lightPasses = [];
          this._instancedLightPassPool = _lightPassPool.alloc();
          this._batchedLightPassPool = _lightPassPool.alloc();
          this._shadowUBO = new Float32Array(UBOShadow.COUNT);
          this._lightBufferCount = 16;
          this._lightBufferStride = void 0;
          this._lightBufferElementCount = void 0;
          this._lightBuffer = void 0;
          this._firstLightBufferView = void 0;
          this._lightBufferData = void 0;
          this._instancedQueue = void 0;
          this._batchedQueue = void 0;
          this._lightMeterScale = 10000.0;
          this._pipeline = pipeline;
          this._device = pipeline.device;
          this._instancedQueue = new RenderInstancedQueue();
          this._batchedQueue = new RenderBatchedQueue();
          var alignment = this._device.capabilities.uboOffsetAlignment;
          this._lightBufferStride = Math.ceil(UBOForwardLight.SIZE / alignment) * alignment;
          this._lightBufferElementCount = this._lightBufferStride / Float32Array.BYTES_PER_ELEMENT;
          this._lightBuffer = this._device.createBuffer(new BufferInfo(BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.HOST | MemoryUsageBit.DEVICE, this._lightBufferStride * this._lightBufferCount, this._lightBufferStride));
          this._firstLightBufferView = this._device.createBuffer(new BufferViewInfo(this._lightBuffer, 0, UBOForwardLight.SIZE));
          this._lightBufferData = new Float32Array(this._lightBufferElementCount * this._lightBufferCount);
        }

        var _proto = RenderAdditiveLightQueue.prototype;

        _proto.clear = function clear() {
          this._instancedQueue.clear();

          this._batchedQueue.clear();

          for (var i = 0; i < this._lightPasses.length; i++) {
            var lp = this._lightPasses[i];
            lp.dynamicOffsets.length = 0;
            lp.lights.length = 0;
          }

          _lightPassPool.freeArray(this._lightPasses);

          this._lightPasses.length = 0;
          this._instancedLightPassPool.dynamicOffsets.length = 0;
          this._instancedLightPassPool.lights.length = 0;
          this._batchedLightPassPool.dynamicOffsets.length = 0;
          this._batchedLightPassPool.lights.length = 0;
        };

        _proto.destroy = function destroy() {
          var descriptorSetMap = this._pipeline.globalDSManager.descriptorSetMap;
          var keys = descriptorSetMap.keys;

          for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            var descriptorSet = descriptorSetMap.get(key);

            if (descriptorSet) {
              var binding = isEnableEffect() ? getDescBindingFromName('CCShadow') : UBOShadow.BINDING;
              descriptorSet.getBuffer(binding).destroy();
              descriptorSet.getTexture(UNIFORM_SHADOWMAP_BINDING).destroy();
              descriptorSet.getTexture(UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING).destroy();
              descriptorSet.destroy();
            }

            descriptorSetMap["delete"](key);
          }
        };

        _proto.gatherLightPasses = function gatherLightPasses(camera, cmdBuff) {
          this.clear();
          var validPunctualLights = this._pipeline.pipelineSceneData.validPunctualLights;

          if (!validPunctualLights.length) {
            return;
          }

          this._updateUBOs(camera, cmdBuff);

          this._updateLightDescriptorSet(camera, cmdBuff);

          var renderObjects = this._pipeline.pipelineSceneData.renderObjects;

          for (var i = 0; i < renderObjects.length; i++) {
            var ro = renderObjects[i];
            var model = ro.model;
            var subModels = model.subModels;

            if (!getLightPassIndices(subModels, _lightPassIndices)) {
              continue;
            }

            _lightIndices.length = 0;

            this._lightCulling(model, validPunctualLights);

            if (!_lightIndices.length) {
              continue;
            }

            for (var j = 0; j < subModels.length; j++) {
              var lightPassIdx = _lightPassIndices[j];

              if (lightPassIdx < 0) {
                continue;
              }

              var subModel = subModels[j];
              var pass = subModel.passes[lightPassIdx];
              var isTransparent = subModel.passes[0].blendState.targets[0].blend;

              if (isTransparent) {
                continue;
              }

              var binding = isEnableEffect() ? getDescBindingFromName('CCForwardLight') : UBOForwardLight.BINDING;
              subModel.descriptorSet.bindBuffer(UBOForwardLight.BINDING, this._firstLightBufferView);
              subModel.descriptorSet.update();

              this._addRenderQueue(pass, subModel, model, lightPassIdx);
            }
          }

          for (var l = 0; l < validPunctualLights.length; l++) {
            var light = validPunctualLights[l];

            this._instancedLightPassPool.lights.push(light);

            this._instancedLightPassPool.dynamicOffsets.push(this._lightBufferStride * l);

            this._batchedLightPassPool.lights.push(light);

            this._batchedLightPassPool.dynamicOffsets.push(this._lightBufferStride * l);
          }

          this._instancedQueue.uploadBuffers(cmdBuff);

          this._batchedQueue.uploadBuffers(cmdBuff);
        };

        _proto.recordCommandBuffer = function recordCommandBuffer(device, renderPass, cmdBuff) {
          var globalDSManager = this._pipeline.globalDSManager;

          for (var j = 0; j < this._instancedLightPassPool.lights.length; ++j) {
            var light = this._instancedLightPassPool.lights[j];
            _dynamicOffsets[0] = this._instancedLightPassPool.dynamicOffsets[j];
            var descriptorSet = globalDSManager.getOrCreateDescriptorSet(light);

            this._instancedQueue.recordCommandBuffer(device, renderPass, cmdBuff, descriptorSet, _dynamicOffsets);
          }

          for (var _j = 0; _j < this._batchedLightPassPool.lights.length; ++_j) {
            var _light = this._batchedLightPassPool.lights[_j];
            _dynamicOffsets[0] = this._batchedLightPassPool.dynamicOffsets[_j];

            var _descriptorSet = globalDSManager.getOrCreateDescriptorSet(_light);

            this._batchedQueue.recordCommandBuffer(device, renderPass, cmdBuff, _descriptorSet, _dynamicOffsets);
          }

          for (var i = 0; i < this._lightPasses.length; i++) {
            var _this$_lightPasses$i = this._lightPasses[i],
                subModel = _this$_lightPasses$i.subModel,
                passIdx = _this$_lightPasses$i.passIdx,
                dynamicOffsets = _this$_lightPasses$i.dynamicOffsets,
                lights = _this$_lightPasses$i.lights;
            var pass = subModel.passes[passIdx];
            var shader = subModel.shaders[passIdx];
            var ia = subModel.inputAssembler;
            var pso = PipelineStateManager.getOrCreatePipelineState(device, pass, shader, renderPass, ia);
            var matDS = pass.descriptorSet;
            var localDS = subModel.descriptorSet;
            cmdBuff.bindPipelineState(pso);
            cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, matDS);
            cmdBuff.bindInputAssembler(ia);

            for (var _j2 = 0; _j2 < dynamicOffsets.length; ++_j2) {
              var _light2 = lights[_j2];

              var _descriptorSet2 = globalDSManager.getOrCreateDescriptorSet(_light2);

              _dynamicOffsets[0] = dynamicOffsets[_j2];
              cmdBuff.bindDescriptorSet(SetIndex.GLOBAL, _descriptorSet2);
              cmdBuff.bindDescriptorSet(SetIndex.LOCAL, localDS, _dynamicOffsets);
              cmdBuff.draw(ia);
            }
          }
        };

        _proto._lightCulling = function _lightCulling(model, validPunctualLights) {
          var isCulled = false;

          for (var l = 0; l < validPunctualLights.length; l++) {
            var light = validPunctualLights[l];

            switch (light.type) {
              case LightType.SPHERE:
                isCulled = cullSphereLight(light, model);
                break;

              case LightType.SPOT:
                isCulled = cullSpotLight(light, model);
                break;
            }

            if (!isCulled) {
              _lightIndices.push(l);
            }
          }
        };

        _proto._addRenderQueue = function _addRenderQueue(pass, subModel, model, lightPassIdx) {
          var validPunctualLights = this._pipeline.pipelineSceneData.validPunctualLights;
          var batchingScheme = pass.batchingScheme;
          var lp = null;

          if (batchingScheme === BatchingSchemes.NONE) {
            lp = _lightPassPool.alloc();
            lp.subModel = subModel;
            lp.passIdx = lightPassIdx;
          }

          for (var l = 0; l < _lightIndices.length; l++) {
            var lightIdx = _lightIndices[l];
            var light = validPunctualLights[lightIdx];
            var visibility = light.visibility;

            if ((visibility & model.node.layer) === model.node.layer) {
              switch (batchingScheme) {
                case BatchingSchemes.INSTANCING:
                  {
                    var buffer = pass.getInstancedBuffer(l);
                    buffer.merge(subModel, lightPassIdx);
                    buffer.dynamicOffsets[0] = this._lightBufferStride;

                    this._instancedQueue.queue.add(buffer);
                  }
                  break;

                case BatchingSchemes.VB_MERGING:
                  {
                    var _buffer = pass.getBatchedBuffer(l);

                    _buffer.merge(subModel, lightPassIdx, model);

                    _buffer.dynamicOffsets[0] = this._lightBufferStride;

                    this._batchedQueue.queue.add(_buffer);
                  }
                  break;

                default:
                  lp.lights.push(light);
                  lp.dynamicOffsets.push(this._lightBufferStride * lightIdx);
              }
            }
          }

          if (batchingScheme === BatchingSchemes.NONE) {
            this._lightPasses.push(lp);
          }
        };

        _proto._updateLightDescriptorSet = function _updateLightDescriptorSet(camera, cmdBuff) {
          var device = this._pipeline.device;
          var sceneData = this._pipeline.pipelineSceneData;
          var shadowInfo = sceneData.shadows;
          var shadowFrameBufferMap = sceneData.shadowFrameBufferMap;
          var mainLight = camera.scene.mainLight;
          var packing = supportsR32FloatTexture(device) ? 0.0 : 1.0;
          var globalDSManager = this._pipeline.globalDSManager;
          var validPunctualLights = sceneData.validPunctualLights;
          var cap = this._pipeline.device.capabilities;

          for (var i = 0; i < validPunctualLights.length; i++) {
            var light = validPunctualLights[i];
            var descriptorSet = globalDSManager.getOrCreateDescriptorSet(light);

            if (!descriptorSet) {
              continue;
            }

            var matShadowProj = void 0;
            var matShadowInvProj = void 0;

            switch (light.type) {
              case LightType.SPHERE:
                {
                  if (mainLight) {
                    PipelineUBO.updatePlanarNormalAndDistance(shadowInfo, this._shadowUBO);
                  }

                  this._shadowUBO[UBOShadow.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET + 0] = shadowInfo.size.x;
                  this._shadowUBO[UBOShadow.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET + 1] = shadowInfo.size.y;
                  this._shadowUBO[UBOShadow.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET + 2] = 1.0;
                  this._shadowUBO[UBOShadow.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET + 3] = 0.0;
                  this._shadowUBO[UBOShadow.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET + 0] = 2.0;
                  this._shadowUBO[UBOShadow.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET + 1] = packing;
                  this._shadowUBO[UBOShadow.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET + 2] = 0.0;
                  this._shadowUBO[UBOShadow.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET + 3] = 0.0;
                  Color.toArray(this._shadowUBO, shadowInfo.shadowColor, UBOShadow.SHADOW_COLOR_OFFSET);
                  break;
                }

              case LightType.SPOT:
                {
                  var spotLight = light;

                  if (mainLight) {
                    PipelineUBO.updatePlanarNormalAndDistance(shadowInfo, this._shadowUBO);
                  }

                  Mat4.invert(_matShadowView$1, light.node.getWorldMatrix());
                  Mat4.perspective(_matShadowViewProj$1, light.angle, 1.0, 0.001, light.range, true, cap.clipSpaceMinZ, cap.clipSpaceSignY, 0);
                  matShadowProj = _matShadowViewProj$1.clone();
                  matShadowInvProj = _matShadowViewProj$1.clone().invert();
                  Mat4.multiply(_matShadowViewProj$1, _matShadowViewProj$1, _matShadowView$1);
                  Mat4.toArray(this._shadowUBO, _matShadowView$1, UBOShadow.MAT_LIGHT_VIEW_OFFSET);
                  Mat4.toArray(this._shadowUBO, _matShadowViewProj$1, UBOShadow.MAT_LIGHT_VIEW_PROJ_OFFSET);
                  this._shadowUBO[UBOShadow.SHADOW_NEAR_FAR_LINEAR_SATURATION_INFO_OFFSET + 0] = 0.01;
                  this._shadowUBO[UBOShadow.SHADOW_NEAR_FAR_LINEAR_SATURATION_INFO_OFFSET + 1] = light.range;
                  this._shadowUBO[UBOShadow.SHADOW_NEAR_FAR_LINEAR_SATURATION_INFO_OFFSET + 2] = 0.0;
                  this._shadowUBO[UBOShadow.SHADOW_NEAR_FAR_LINEAR_SATURATION_INFO_OFFSET + 3] = 0.0;
                  this._shadowUBO[UBOShadow.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET + 0] = shadowInfo.size.x;
                  this._shadowUBO[UBOShadow.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET + 1] = shadowInfo.size.y;
                  this._shadowUBO[UBOShadow.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET + 2] = spotLight.shadowPcf;
                  this._shadowUBO[UBOShadow.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET + 3] = spotLight.shadowBias;
                  this._shadowUBO[UBOShadow.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET + 0] = 1.0;
                  this._shadowUBO[UBOShadow.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET + 1] = packing;
                  this._shadowUBO[UBOShadow.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET + 2] = spotLight.shadowNormalBias;
                  this._shadowUBO[UBOShadow.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET + 3] = 0.0;
                  this._shadowUBO[UBOShadow.SHADOW_PROJ_DEPTH_INFO_OFFSET + 0] = matShadowProj.m10;
                  this._shadowUBO[UBOShadow.SHADOW_PROJ_DEPTH_INFO_OFFSET + 1] = matShadowProj.m14;
                  this._shadowUBO[UBOShadow.SHADOW_PROJ_DEPTH_INFO_OFFSET + 2] = matShadowProj.m11;
                  this._shadowUBO[UBOShadow.SHADOW_PROJ_DEPTH_INFO_OFFSET + 3] = matShadowProj.m15;
                  this._shadowUBO[UBOShadow.SHADOW_INV_PROJ_DEPTH_INFO_OFFSET + 0] = matShadowInvProj.m10;
                  this._shadowUBO[UBOShadow.SHADOW_INV_PROJ_DEPTH_INFO_OFFSET + 1] = matShadowInvProj.m14;
                  this._shadowUBO[UBOShadow.SHADOW_INV_PROJ_DEPTH_INFO_OFFSET + 2] = matShadowInvProj.m11;
                  this._shadowUBO[UBOShadow.SHADOW_INV_PROJ_DEPTH_INFO_OFFSET + 3] = matShadowInvProj.m15;
                  this._shadowUBO[UBOShadow.SHADOW_PROJ_INFO_OFFSET + 0] = matShadowProj.m00;
                  this._shadowUBO[UBOShadow.SHADOW_PROJ_INFO_OFFSET + 1] = matShadowProj.m05;
                  this._shadowUBO[UBOShadow.SHADOW_PROJ_INFO_OFFSET + 2] = 1.0 / matShadowProj.m00;
                  this._shadowUBO[UBOShadow.SHADOW_PROJ_INFO_OFFSET + 3] = 1.0 / matShadowProj.m05;
                  Color.toArray(this._shadowUBO, shadowInfo.shadowColor, UBOShadow.SHADOW_COLOR_OFFSET);

                  if (shadowFrameBufferMap.has(light)) {
                    var _shadowFrameBufferMap;

                    var texture = (_shadowFrameBufferMap = shadowFrameBufferMap.get(light)) === null || _shadowFrameBufferMap === void 0 ? void 0 : _shadowFrameBufferMap.colorTextures[0];

                    if (texture) {
                      descriptorSet.bindTexture(UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING, texture);
                    }
                  }

                  break;
                }
            }

            descriptorSet.update();
            var binding = isEnableEffect() ? getDescBindingFromName('CCShadow') : UBOShadow.BINDING;
            cmdBuff.updateBuffer(descriptorSet.getBuffer(binding), this._shadowUBO);
          }
        };

        _proto._updateUBOs = function _updateUBOs(camera, cmdBuff) {
          var exposure = camera.exposure;
          var sceneData = this._pipeline.pipelineSceneData;
          var isHDR = sceneData.isHDR;
          var shadowInfo = sceneData.shadows;
          var validPunctualLights = sceneData.validPunctualLights;

          if (validPunctualLights.length > this._lightBufferCount) {
            this._firstLightBufferView.destroy();

            this._lightBufferCount = nextPow2$1(validPunctualLights.length);

            this._lightBuffer.resize(this._lightBufferStride * this._lightBufferCount);

            this._lightBufferData = new Float32Array(this._lightBufferElementCount * this._lightBufferCount);

            this._firstLightBufferView.initialize(new BufferViewInfo(this._lightBuffer, 0, UBOForwardLight.SIZE));
          }

          for (var l = 0, offset = 0; l < validPunctualLights.length; l++, offset += this._lightBufferElementCount) {
            var light = validPunctualLights[l];

            switch (light.type) {
              case LightType.SPHERE:
                Vec3.toArray(_vec4Array, light.position);
                _vec4Array[3] = 0;

                this._lightBufferData.set(_vec4Array, offset + UBOForwardLight.LIGHT_POS_OFFSET);

                _vec4Array[0] = light.size;
                _vec4Array[1] = light.range;
                _vec4Array[2] = 0.0;
                _vec4Array[3] = 0.0;

                this._lightBufferData.set(_vec4Array, offset + UBOForwardLight.LIGHT_SIZE_RANGE_ANGLE_OFFSET);

                Vec3.toArray(_vec4Array, light.color);

                if (light.useColorTemperature) {
                  var tempRGB = light.colorTemperatureRGB;
                  _vec4Array[0] *= tempRGB.x;
                  _vec4Array[1] *= tempRGB.y;
                  _vec4Array[2] *= tempRGB.z;
                }

                if (isHDR) {
                  _vec4Array[3] = light.luminance * exposure * this._lightMeterScale;
                } else {
                  _vec4Array[3] = light.luminance;
                }

                this._lightBufferData.set(_vec4Array, offset + UBOForwardLight.LIGHT_COLOR_OFFSET);

                break;

              case LightType.SPOT:
                Vec3.toArray(_vec4Array, light.position);
                _vec4Array[3] = 1;

                this._lightBufferData.set(_vec4Array, offset + UBOForwardLight.LIGHT_POS_OFFSET);

                _vec4Array[0] = light.size;
                _vec4Array[1] = light.range;
                _vec4Array[2] = light.spotAngle;
                _vec4Array[3] = shadowInfo.enabled && light.shadowEnabled && shadowInfo.type === ShadowType.ShadowMap ? 1 : 0;

                this._lightBufferData.set(_vec4Array, offset + UBOForwardLight.LIGHT_SIZE_RANGE_ANGLE_OFFSET);

                Vec3.toArray(_vec4Array, light.direction);

                this._lightBufferData.set(_vec4Array, offset + UBOForwardLight.LIGHT_DIR_OFFSET);

                Vec3.toArray(_vec4Array, light.color);

                if (light.useColorTemperature) {
                  var _tempRGB = light.colorTemperatureRGB;
                  _vec4Array[0] *= _tempRGB.x;
                  _vec4Array[1] *= _tempRGB.y;
                  _vec4Array[2] *= _tempRGB.z;
                }

                if (isHDR) {
                  _vec4Array[3] = light.luminance * exposure * this._lightMeterScale;
                } else {
                  _vec4Array[3] = light.luminance;
                }

                this._lightBufferData.set(_vec4Array, offset + UBOForwardLight.LIGHT_COLOR_OFFSET);

                break;
            }
          }

          cmdBuff.updateBuffer(this._lightBuffer, this._lightBufferData);
        };

        return RenderAdditiveLightQueue;
      }();

      var _ab = new AABB();

      var PlanarShadowQueue = function () {
        function PlanarShadowQueue(pipeline) {
          this._pendingSubModels = [];
          this._castModels = [];
          this._instancedQueue = new RenderInstancedQueue();
          this._pipeline = void 0;
          this._pipeline = pipeline;
        }

        var _proto = PlanarShadowQueue.prototype;

        _proto.gatherShadowPasses = function gatherShadowPasses(camera, cmdBuff) {
          var pipelineSceneData = this._pipeline.pipelineSceneData;
          var shadows = pipelineSceneData.shadows;

          this._instancedQueue.clear();

          this._pendingSubModels.length = 0;
          this._castModels.length = 0;

          if (!shadows.enabled || shadows.type !== ShadowType.Planar || shadows.normal.length() < 0.000001) {
            return;
          }

          var scene = camera.scene;
          var frustum = camera.frustum;
          var shadowVisible = (camera.visibility & Layers.BitMask.DEFAULT) !== 0;

          if (!scene.mainLight || !shadowVisible) {
            return;
          }

          var models = scene.models;

          for (var i = 0; i < models.length; i++) {
            var model = models[i];

            if (scene.isCulledByLod(camera, model)) {
              continue;
            }

            if (model.enabled && model.node && model.castShadow) {
              this._castModels.push(model);
            }
          }

          var instancedBuffer = shadows.instancingMaterial.passes[0].getInstancedBuffer();

          this._instancedQueue.queue.add(instancedBuffer);

          for (var _i = 0; _i < this._castModels.length; _i++) {
            var _model = this._castModels[_i];

            if (_model.worldBounds) {
              AABB.transform(_ab, _model.worldBounds, shadows.matLight);

              if (!intersect.aabbFrustum(_ab, frustum)) {
                continue;
              }
            }

            var subModels = _model.subModels;

            for (var j = 0; j < subModels.length; j++) {
              var subModel = subModels[j];
              var passes = subModel.passes;

              for (var k = 0; k < passes.length; k++) {
                var pass = passes[k];
                var batchingScheme = pass.batchingScheme;

                if (batchingScheme === BatchingSchemes.INSTANCING) {
                  instancedBuffer.merge(subModel, k, subModel.planarShader);

                  this._instancedQueue.queue.add(instancedBuffer);
                } else {
                  this._pendingSubModels.push(subModel);
                }
              }
            }
          }

          this._instancedQueue.uploadBuffers(cmdBuff);
        };

        _proto.recordCommandBuffer = function recordCommandBuffer(device, renderPass, cmdBuff) {
          var shadows = this._pipeline.pipelineSceneData.shadows;

          if (!shadows.enabled || shadows.type !== ShadowType.Planar) {
            return;
          }

          this._instancedQueue.recordCommandBuffer(device, renderPass, cmdBuff);

          if (!this._pendingSubModels.length) {
            return;
          }

          var pass = shadows.material.passes[0];
          var descriptorSet = pass.descriptorSet;
          cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, descriptorSet);
          var subModels = this._pendingSubModels;

          for (var j = 0; j < subModels.length; j++) {
            var subModel = subModels[j];
            var shader = subModel.planarShader;
            var ia = subModel.inputAssembler;
            var pso = PipelineStateManager.getOrCreatePipelineState(device, pass, shader, renderPass, ia);
            cmdBuff.bindPipelineState(pso);
            cmdBuff.bindDescriptorSet(SetIndex.LOCAL, subModel.descriptorSet);
            cmdBuff.bindInputAssembler(ia);
            cmdBuff.draw(ia);
          }
        };

        return PlanarShadowQueue;
      }();

      var UIPhase = function () {
        function UIPhase() {
          this._phaseID = getPhaseID('default');
          var r = legacyCC.rendering;
          if (isEnableEffect()) this._phaseID = r.getPhaseID(r.getPassID('default'), 'default');
        }

        var _proto = UIPhase.prototype;

        _proto.activate = function activate(pipeline) {
          this._pipeline = pipeline;
        };

        _proto.render = function render(camera, renderPass) {
          var pipeline = this._pipeline;
          var device = pipeline.device;
          var cmdBuff = pipeline.commandBuffers[0];
          var scene = camera.scene;
          var batches = scene.batches;

          for (var i = 0; i < batches.length; i++) {
            var batch = batches[i];
            var visible = false;

            if (camera.visibility & batch.visFlags) {
              visible = true;
            }

            if (!visible) continue;
            var count = batch.shaders.length;

            for (var j = 0; j < count; j++) {
              var pass = batch.passes[j];
              if (pass.phase !== this._phaseID) continue;
              var shader = batch.shaders[j];
              var inputAssembler = batch.inputAssembler;
              var pso = PipelineStateManager.getOrCreatePipelineState(device, pass, shader, renderPass, inputAssembler);
              cmdBuff.bindPipelineState(pso);
              cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, pass.descriptorSet);
              var ds = batch.descriptorSet;
              cmdBuff.bindDescriptorSet(SetIndex.LOCAL, ds);
              cmdBuff.bindInputAssembler(inputAssembler);
              cmdBuff.draw(inputAssembler);
            }
          }
        };

        return UIPhase;
      }();

      var _dec$s, _dec2$b, _class$s, _class2$p, _initializer$m, _class3$8, _temp$9;
      var colors = [new Color$1(0, 0, 0, 1)];
      var ForwardStage = exports('ForwardStage', (_dec$s = ccclass('ForwardStage'), _dec2$b = type([RenderQueueDesc]), _dec$s(_class$s = (_class2$p = (_temp$9 = _class3$8 = function (_RenderStage) {
        _inheritsLoose(ForwardStage, _RenderStage);

        function ForwardStage() {
          var _this;

          _this = _RenderStage.call(this) || this;
          _this.renderQueues = _initializer$m && _initializer$m();
          _this._renderQueues = [];
          _this._renderArea = new Rect$1();
          _this._batchedQueue = void 0;
          _this._instancedQueue = void 0;
          _this._phaseID = getPhaseID('default');
          _this._clearFlag = 0xffffffff;
          _this.additiveInstanceQueues = [];
          _this._batchedQueue = new RenderBatchedQueue();
          _this._instancedQueue = new RenderInstancedQueue();
          _this._uiPhase = new UIPhase();
          return _this;
        }

        var _proto = ForwardStage.prototype;

        _proto.addRenderInstancedQueue = function addRenderInstancedQueue(queue) {
          if (this.additiveInstanceQueues.includes(queue)) {
            return;
          }

          this.additiveInstanceQueues.push(queue);
        };

        _proto.removeRenderInstancedQueue = function removeRenderInstancedQueue(queue) {
          var index = this.additiveInstanceQueues.indexOf(queue);

          if (index > -1) {
            this.additiveInstanceQueues.splice(index, 1);
          }
        };

        _proto.initialize = function initialize(info) {
          _RenderStage.prototype.initialize.call(this, info);

          if (info.renderQueues) {
            this.renderQueues = info.renderQueues;
          }

          return true;
        };

        _proto.activate = function activate(pipeline, flow) {
          _RenderStage.prototype.activate.call(this, pipeline, flow);

          for (var i = 0; i < this.renderQueues.length; i++) {
            this._renderQueues[i] = convertRenderQueue(this.renderQueues[i]);
          }

          this._additiveLightQueue = new RenderAdditiveLightQueue(this._pipeline);
          this._planarQueue = new PlanarShadowQueue(this._pipeline);

          this._uiPhase.activate(pipeline);
        };

        _proto.destroy = function destroy() {};

        _proto.render = function render(camera) {
          var _camera$geometryRende;

          this._instancedQueue.clear();

          this._batchedQueue.clear();

          var pipeline = this._pipeline;
          var device = pipeline.device;

          this._renderQueues.forEach(renderQueueClearFunc);

          var renderObjects = pipeline.pipelineSceneData.renderObjects;
          var m = 0;
          var p = 0;
          var k = 0;

          for (var i = 0; i < renderObjects.length; ++i) {
            var ro = renderObjects[i];
            var subModels = ro.model.subModels;

            for (m = 0; m < subModels.length; ++m) {
              var subModel = subModels[m];
              var passes = subModel.passes;

              for (p = 0; p < passes.length; ++p) {
                var pass = passes[p];
                if (pass.phase !== this._phaseID) continue;
                var batchingScheme = pass.batchingScheme;

                if (batchingScheme === BatchingSchemes.INSTANCING) {
                  var instancedBuffer = pass.getInstancedBuffer();
                  instancedBuffer.merge(subModel, p);

                  this._instancedQueue.queue.add(instancedBuffer);
                } else if (batchingScheme === BatchingSchemes.VB_MERGING) {
                  var batchedBuffer = pass.getBatchedBuffer();
                  batchedBuffer.merge(subModel, p, ro.model);

                  this._batchedQueue.queue.add(batchedBuffer);
                } else {
                  for (k = 0; k < this._renderQueues.length; k++) {
                    this._renderQueues[k].insertRenderPass(ro, m, p);
                  }
                }
              }
            }
          }

          this._instancedQueue.sort();

          this._renderQueues.forEach(renderQueueSortFunc);

          var cmdBuff = pipeline.commandBuffers[0];
          pipeline.pipelineUBO.updateShadowUBO(camera);

          for (var _i = 0; _i < this.additiveInstanceQueues.length; _i++) {
            this.additiveInstanceQueues[_i].uploadBuffers(cmdBuff);
          }

          this._instancedQueue.uploadBuffers(cmdBuff);

          this._batchedQueue.uploadBuffers(cmdBuff);

          this._additiveLightQueue.gatherLightPasses(camera, cmdBuff);

          this._planarQueue.gatherShadowPasses(camera, cmdBuff);

          if (camera.clearFlag & ClearFlagBit.COLOR) {
            colors[0].x = camera.clearColor.x;
            colors[0].y = camera.clearColor.y;
            colors[0].z = camera.clearColor.z;
            colors[0].w = camera.clearColor.w;
          }

          pipeline.generateRenderArea(camera, this._renderArea);
          var framebuffer = camera.window.framebuffer;
          var renderPass = pipeline.getRenderPass(camera.clearFlag & this._clearFlag, framebuffer);
          cmdBuff.beginRenderPass(renderPass, framebuffer, this._renderArea, colors, camera.clearDepth, camera.clearStencil);
          cmdBuff.bindDescriptorSet(SetIndex.GLOBAL, pipeline.descriptorSet);

          this._renderQueues[0].recordCommandBuffer(device, renderPass, cmdBuff);

          for (var _i2 = 0; _i2 < this.additiveInstanceQueues.length; _i2++) {
            this.additiveInstanceQueues[_i2].recordCommandBuffer(device, renderPass, cmdBuff);
          }

          this._instancedQueue.recordCommandBuffer(device, renderPass, cmdBuff);

          this._batchedQueue.recordCommandBuffer(device, renderPass, cmdBuff);

          this._additiveLightQueue.recordCommandBuffer(device, renderPass, cmdBuff);

          cmdBuff.bindDescriptorSet(SetIndex.GLOBAL, pipeline.descriptorSet);

          this._planarQueue.recordCommandBuffer(device, renderPass, cmdBuff);

          this._renderQueues[1].recordCommandBuffer(device, renderPass, cmdBuff);

          (_camera$geometryRende = camera.geometryRenderer) === null || _camera$geometryRende === void 0 ? void 0 : _camera$geometryRende.render(renderPass, cmdBuff, pipeline.pipelineSceneData);

          this._uiPhase.render(camera, renderPass);

          renderProfiler(device, renderPass, cmdBuff, pipeline.profiler, camera);
          cmdBuff.endRenderPass();
        };

        return ForwardStage;
      }(RenderStage), _class3$8.initInfo = {
        name: 'ForwardStage',
        priority: ForwardStagePriority.FORWARD,
        tag: 0,
        renderQueues: [{
          isTransparent: false,
          sortMode: RenderQueueSortMode.FRONT_TO_BACK,
          stages: ['default']
        }, {
          isTransparent: true,
          sortMode: RenderQueueSortMode.BACK_TO_FRONT,
          stages: ['default', 'planarShadow']
        }]
      }, _temp$9), (_initializer$m = applyDecoratedInitializer(_class2$p.prototype, "renderQueues", [_dec2$b, serializable], function () {
        return [];
      })), _class2$p)) || _class$s));

      var _dec$t, _class$t, _class2$q, _temp$a;
      var ForwardFlow = exports('ForwardFlow', (_dec$t = ccclass('ForwardFlow'), _dec$t(_class$t = (_temp$a = _class2$q = function (_RenderFlow) {
        _inheritsLoose(ForwardFlow, _RenderFlow);

        function ForwardFlow() {
          return _RenderFlow.apply(this, arguments) || this;
        }

        var _proto = ForwardFlow.prototype;

        _proto.initialize = function initialize(info) {
          _RenderFlow.prototype.initialize.call(this, info);

          if (this._stages.length === 0) {
            var forwardStage = new ForwardStage();
            forwardStage.initialize(ForwardStage.initInfo);

            this._stages.push(forwardStage);
          }

          return true;
        };

        _proto.activate = function activate(pipeline) {
          _RenderFlow.prototype.activate.call(this, pipeline);
        };

        _proto.render = function render(camera) {
          _RenderFlow.prototype.render.call(this, camera);
        };

        _proto.destroy = function destroy() {
          _RenderFlow.prototype.destroy.call(this);
        };

        return ForwardFlow;
      }(RenderFlow), _class2$q.initInfo = {
        name: PIPELINE_FLOW_FORWARD,
        priority: ForwardFlowPriority.FORWARD,
        stages: []
      }, _temp$a)) || _class$t));

      var _phaseID$1 = getPhaseID('shadow-caster');

      function getShadowPassIndex(subModel) {
        var passes = subModel.passes;
        var r = legacyCC.rendering;
        if (isEnableEffect()) _phaseID$1 = r.getPhaseID(r.getPassID('default'), 'shadow-caster');

        for (var k = 0; k < passes.length; k++) {
          if ((!r || !r.enableEffectImport) && passes[k].phase === _phaseID$1 || isEnableEffect() && passes[k].phaseID === _phaseID$1) {
            return k;
          }
        }

        return -1;
      }

      var RenderShadowMapBatchedQueue = function () {
        function RenderShadowMapBatchedQueue(pipeline) {
          this._pipeline = void 0;
          this._subModelsArray = [];
          this._passArray = [];
          this._shaderArray = [];
          this._instancedQueue = void 0;
          this._batchedQueue = void 0;
          this._pipeline = pipeline;
          this._instancedQueue = new RenderInstancedQueue();
          this._batchedQueue = new RenderBatchedQueue();
        }

        var _proto = RenderShadowMapBatchedQueue.prototype;

        _proto.gatherLightPasses = function gatherLightPasses(camera, light, cmdBuff, level) {
          if (level === void 0) {
            level = 0;
          }

          this.clear();
          var sceneData = this._pipeline.pipelineSceneData;
          var shadowInfo = sceneData.shadows;

          if (light && shadowInfo.enabled && shadowInfo.type === ShadowType.ShadowMap) {
            switch (light.type) {
              case LightType.DIRECTIONAL:
                var dirLight = light;

                if (dirLight.shadowEnabled) {
                  var csmLayers = sceneData.csmLayers;
                  var layer;

                  if (dirLight.shadowFixedArea) {
                    layer = csmLayers.specialLayer;
                  } else {
                    layer = csmLayers.layers[level];
                  }

                  shadowCulling(camera, sceneData, layer);
                  var dirShadowObjects = layer.shadowObjects;

                  for (var i = 0; i < dirShadowObjects.length; i++) {
                    var ro = dirShadowObjects[i];
                    var model = ro.model;
                    this.add(model);
                  }
                }

                break;

              case LightType.SPOT:
                var spotLight = light;

                if (spotLight.shadowEnabled) {
                  var visibility = spotLight.visibility;
                  var castShadowObjects = sceneData.csmLayers.castShadowObjects;

                  for (var _i = 0; _i < castShadowObjects.length; _i++) {
                    var _ro = castShadowObjects[_i];
                    var _model = _ro.model;

                    if (_model.worldBounds) {
                      if ((visibility & _model.node.layer) !== _model.node.layer || !intersect.aabbFrustum(_model.worldBounds, spotLight.frustum)) {
                        continue;
                      }
                    }

                    this.add(_model);
                  }
                }

                break;
            }

            this._instancedQueue.uploadBuffers(cmdBuff);

            this._batchedQueue.uploadBuffers(cmdBuff);
          }
        };

        _proto.clear = function clear() {
          this._subModelsArray.length = 0;
          this._shaderArray.length = 0;
          this._passArray.length = 0;

          this._instancedQueue.clear();

          this._batchedQueue.clear();
        };

        _proto.add = function add(model) {
          var subModels = model.subModels;

          for (var j = 0; j < subModels.length; j++) {
            var subModel = subModels[j];
            var shadowPassIdx = getShadowPassIndex(subModel);

            if (shadowPassIdx < 0) {
              continue;
            }

            var pass = subModel.passes[shadowPassIdx];
            var batchingScheme = pass.batchingScheme;

            if (batchingScheme === BatchingSchemes.INSTANCING) {
              var buffer = pass.getInstancedBuffer();
              buffer.merge(subModel, shadowPassIdx);

              this._instancedQueue.queue.add(buffer);
            } else if (pass.batchingScheme === BatchingSchemes.VB_MERGING) {
              var _buffer = pass.getBatchedBuffer();

              _buffer.merge(subModel, shadowPassIdx, model);

              this._batchedQueue.queue.add(_buffer);
            } else {
              var shader = subModel.shaders[shadowPassIdx];

              this._subModelsArray.push(subModel);

              if (shader) this._shaderArray.push(shader);

              this._passArray.push(pass);
            }
          }
        };

        _proto.recordCommandBuffer = function recordCommandBuffer(device, renderPass, cmdBuff) {
          this._instancedQueue.recordCommandBuffer(device, renderPass, cmdBuff);

          this._batchedQueue.recordCommandBuffer(device, renderPass, cmdBuff);

          for (var i = 0; i < this._subModelsArray.length; ++i) {
            var subModel = this._subModelsArray[i];
            var shader = this._shaderArray[i];
            var pass = this._passArray[i];
            var ia = subModel.inputAssembler;
            var pso = PipelineStateManager.getOrCreatePipelineState(device, pass, shader, renderPass, ia);
            var descriptorSet = pass.descriptorSet;
            cmdBuff.bindPipelineState(pso);
            cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, descriptorSet);
            cmdBuff.bindDescriptorSet(SetIndex.LOCAL, subModel.descriptorSet);
            cmdBuff.bindInputAssembler(ia);
            cmdBuff.draw(ia);
          }
        };

        return RenderShadowMapBatchedQueue;
      }();

      var _dec$u, _class$u, _class2$r, _temp$b;
      var colors$1 = [new Color$1(1, 1, 1, 1)];
      var ShadowStage = exports('ShadowStage', (_dec$u = ccclass('ShadowStage'), _dec$u(_class$u = (_temp$b = _class2$r = function (_RenderStage) {
        _inheritsLoose(ShadowStage, _RenderStage);

        function ShadowStage() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _RenderStage.call.apply(_RenderStage, [this].concat(args)) || this;
          _this._shadowFrameBuffer = null;
          _this._renderArea = new Rect$1();
          _this._light = null;
          _this._globalDS = null;
          _this._level = 0;
          _this._isShadowMapCleared = false;
          return _this;
        }

        var _proto = ShadowStage.prototype;

        _proto.setUsage = function setUsage(globalDS, light, shadowFrameBuffer, level) {
          if (level === void 0) {
            level = 0;
          }

          this._globalDS = globalDS;
          this._light = light;
          this._shadowFrameBuffer = shadowFrameBuffer;
          this._level = level;
        };

        _proto.destroy = function destroy() {
          var _this$_additiveShadow;

          this._shadowFrameBuffer = null;
          this._globalDS = null;
          this._light = null;
          (_this$_additiveShadow = this._additiveShadowQueue) === null || _this$_additiveShadow === void 0 ? void 0 : _this$_additiveShadow.clear();
        };

        _proto.clearFramebuffer = function clearFramebuffer(camera) {
          if (!this._light || !this._shadowFrameBuffer || this._isShadowMapCleared) {
            return;
          }

          colors$1[0].w = camera.clearColor.w;
          var pipeline = this._pipeline;
          var pipelineSceneData = pipeline.pipelineSceneData;
          var shadingScale = pipelineSceneData.shadingScale;
          var shadowInfo = pipelineSceneData.shadows;
          var vp = camera.viewport;
          var shadowMapSize = shadowInfo.size;
          this._renderArea.x = vp.x * shadowMapSize.x;
          this._renderArea.y = vp.y * shadowMapSize.y;
          this._renderArea.width = vp.width * shadowMapSize.x * shadingScale;
          this._renderArea.height = vp.height * shadowMapSize.y * shadingScale;
          var cmdBuff = pipeline.commandBuffers[0];
          var renderPass = this._shadowFrameBuffer.renderPass;
          cmdBuff.beginRenderPass(renderPass, this._shadowFrameBuffer, this._renderArea, colors$1, camera.clearDepth, camera.clearStencil);
          cmdBuff.endRenderPass();
          this._isShadowMapCleared = true;
        };

        _proto.render = function render(camera) {
          var pipeline = this._pipeline;
          var pipelineSceneData = pipeline.pipelineSceneData;
          var shadowInfo = pipelineSceneData.shadows;
          var descriptorSet = this._globalDS;
          var cmdBuff = pipeline.commandBuffers[0];
          var level = this._level;
          var device = pipeline.device;

          if (!this._light || !this._shadowFrameBuffer) {
            return;
          }

          this._pipeline.pipelineUBO.updateShadowUBOLight(descriptorSet, this._light, level);

          this._additiveShadowQueue.gatherLightPasses(camera, this._light, cmdBuff, level);

          var shadowMapSize = shadowInfo.size;

          switch (this._light.type) {
            case LightType.DIRECTIONAL:
              {
                var mainLight = this._light;

                if (mainLight.shadowFixedArea || mainLight.csmLevel === CSMLevel.LEVEL_1 || !pipelineSceneData.csmSupported) {
                  this._renderArea.x = 0;
                  this._renderArea.y = 0;
                  this._renderArea.width = shadowMapSize.x;
                  this._renderArea.height = shadowMapSize.y;
                } else {
                  var screenSpaceSignY = device.capabilities.screenSpaceSignY;
                  this._renderArea.x = level % 2 * 0.5 * shadowMapSize.x;

                  if (screenSpaceSignY > 0.0) {
                    this._renderArea.y = (1 - Math.floor(level / 2)) * 0.5 * shadowMapSize.y;
                  } else {
                    this._renderArea.y = Math.floor(level / 2) * 0.5 * shadowMapSize.y;
                  }

                  this._renderArea.width = 0.5 * shadowMapSize.x;
                  this._renderArea.height = 0.5 * shadowMapSize.y;
                }

                break;
              }

            case LightType.SPOT:
              {
                this._renderArea.x = 0;
                this._renderArea.y = 0;
                this._renderArea.width = shadowMapSize.x;
                this._renderArea.height = shadowMapSize.y;
                break;
              }
          }

          var renderPass = this._shadowFrameBuffer.renderPass;
          cmdBuff.beginRenderPass(renderPass, this._shadowFrameBuffer, this._renderArea, colors$1, camera.clearDepth, camera.clearStencil);
          cmdBuff.bindDescriptorSet(SetIndex.GLOBAL, descriptorSet);

          this._additiveShadowQueue.recordCommandBuffer(device, renderPass, cmdBuff);

          cmdBuff.endRenderPass();
          this._isShadowMapCleared = false;
        };

        _proto.activate = function activate(pipeline, flow) {
          _RenderStage.prototype.activate.call(this, pipeline, flow);

          this._additiveShadowQueue = new RenderShadowMapBatchedQueue(pipeline);
          this._isShadowMapCleared = false;
        };

        return ShadowStage;
      }(RenderStage), _class2$r.initInfo = {
        name: 'ShadowStage',
        priority: ForwardStagePriority.FORWARD,
        tag: 0
      }, _temp$b)) || _class$u));

      var _dec$v, _class$v, _class2$s, _temp$c;
      var _validLights = [];
      var ShadowFlow = exports('ShadowFlow', (_dec$v = ccclass('ShadowFlow'), _dec$v(_class$v = (_temp$c = _class2$s = function (_RenderFlow) {
        _inheritsLoose(ShadowFlow, _RenderFlow);

        function ShadowFlow() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _RenderFlow.call.apply(_RenderFlow, [this].concat(args)) || this;
          _this._shadowRenderPass = null;
          return _this;
        }

        var _proto = ShadowFlow.prototype;

        _proto.initialize = function initialize(info) {
          _RenderFlow.prototype.initialize.call(this, info);

          if (this._stages.length === 0) {
            var shadowMapStage = new ShadowStage();
            shadowMapStage.initialize(ShadowStage.initInfo);

            this._stages.push(shadowMapStage);
          }

          return true;
        };

        _proto.activate = function activate(pipeline) {
          _RenderFlow.prototype.activate.call(this, pipeline);

          var isRGBE = supportsR32FloatTexture(pipeline.device) ? 0 : 1;
          pipeline.macros.CC_SHADOWMAP_FORMAT = isRGBE;
          var isLinear = pipeline.device.gfxAPI === API.WEBGL ? 1 : 0;
          pipeline.macros.CC_SHADOWMAP_USE_LINEAR_DEPTH = isLinear;
          pipeline.pipelineSceneData.csmSupported = pipeline.device.capabilities.maxFragmentUniformVectors >= (UBOGlobal.COUNT + UBOCamera.COUNT + UBOShadow.COUNT + UBOCSM.COUNT) / 4;
          pipeline.macros.CC_SUPPORT_CASCADED_SHADOW_MAP = pipeline.pipelineSceneData.csmSupported;
          pipeline.macros.CC_SHADOW_TYPE = 0;
          pipeline.macros.CC_DIR_SHADOW_PCF_TYPE = PCFType.HARD;
          pipeline.macros.CC_DIR_LIGHT_SHADOW_TYPE = 0;
          pipeline.macros.CC_CASCADED_LAYERS_TRANSITION = 0;
          pipeline.onGlobalPipelineStateChanged();
        };

        _proto.render = function render(camera) {
          var pipeline = this._pipeline;
          var shadowInfo = pipeline.pipelineSceneData.shadows;
          var csmLayers = pipeline.pipelineSceneData.csmLayers;
          var shadowFrameBufferMap = pipeline.pipelineSceneData.shadowFrameBufferMap;
          var castShadowObjects = csmLayers.castShadowObjects;
          var validPunctualLights = this._pipeline.pipelineSceneData.validPunctualLights;

          if (!shadowInfo.enabled || shadowInfo.type !== ShadowType.ShadowMap) {
            return;
          }

          var n = 0;
          var m = 0;

          for (; n < shadowInfo.maxReceived && m < validPunctualLights.length;) {
            var light = validPunctualLights[m];

            if (light.type === LightType.SPOT) {
              var spotLight = light;

              if (spotLight.shadowEnabled) {
                _validLights.push(light);

                n++;
              }
            }

            m++;
          }

          if (castShadowObjects.length === 0) {
            this.clearShadowMap(_validLights, camera);
            return;
          }

          if (shadowInfo.shadowMapDirty) {
            this.resizeShadowMap();
          }

          var _ref = camera.scene,
              mainLight = _ref.mainLight;

          if (mainLight && mainLight.shadowEnabled) {
            var globalDS = pipeline.descriptorSet;

            if (!shadowFrameBufferMap.has(mainLight)) {
              this._initShadowFrameBuffer(pipeline, mainLight, camera.window.swapchain);
            }

            var shadowFrameBuffer = shadowFrameBufferMap.get(mainLight);

            if (mainLight.shadowFixedArea) {
              this._renderStage(camera, mainLight, shadowFrameBuffer, globalDS);
            } else {
              var csmLevel = pipeline.pipelineSceneData.csmSupported ? mainLight.csmLevel : 1;

              for (var i = 0; i < csmLevel; i++) {
                this._renderStage(camera, mainLight, shadowFrameBuffer, globalDS, i);
              }
            }
          }

          for (var l = 0; l < _validLights.length; l++) {
            var _light = _validLights[l];
            var ds = pipeline.globalDSManager.getOrCreateDescriptorSet(_light);

            if (!shadowFrameBufferMap.has(_light)) {
              this._initShadowFrameBuffer(pipeline, _light, camera.window.swapchain);
            }

            var _shadowFrameBuffer = shadowFrameBufferMap.get(_light);

            this._renderStage(camera, _light, _shadowFrameBuffer, ds);
          }

          _validLights.length = 0;
        };

        _proto.destroy = function destroy() {
          _RenderFlow.prototype.destroy.call(this);

          if (this._pipeline) {
            var shadowFrameBufferMap = this._pipeline.pipelineSceneData.shadowFrameBufferMap;
            var shadowFrameBuffers = Array.from(shadowFrameBufferMap.values());

            for (var i = 0; i < shadowFrameBuffers.length; i++) {
              var frameBuffer = shadowFrameBuffers[i];

              if (!frameBuffer) {
                continue;
              }

              var renderTargets = frameBuffer.colorTextures;

              for (var j = 0; j < renderTargets.length; j++) {
                var renderTarget = renderTargets[j];

                if (renderTarget) {
                  renderTarget.destroy();
                }
              }

              renderTargets.length = 0;
              var depth = frameBuffer.depthStencilTexture;

              if (depth) {
                depth.destroy();
              }

              frameBuffer.destroy();
            }

            shadowFrameBufferMap.clear();
          }

          if (this._shadowRenderPass) {
            this._shadowRenderPass.destroy();
          }
        };

        _proto._initShadowFrameBuffer = function _initShadowFrameBuffer(pipeline, light, swapchain) {
          var device = pipeline.device;
          var shadows = pipeline.pipelineSceneData.shadows;
          var shadowMapSize = shadows.size;
          var shadowFrameBufferMap = pipeline.pipelineSceneData.shadowFrameBufferMap;
          var format = supportsR32FloatTexture(device) ? Format.R32F : Format.RGBA8;

          if (!this._shadowRenderPass) {
            var colorAttachment = new ColorAttachment();
            colorAttachment.format = format;
            colorAttachment.loadOp = LoadOp.CLEAR;
            colorAttachment.storeOp = StoreOp.STORE;
            colorAttachment.sampleCount = 1;
            var depthStencilAttachment = new DepthStencilAttachment();
            depthStencilAttachment.format = Format.DEPTH_STENCIL;
            depthStencilAttachment.depthLoadOp = LoadOp.CLEAR;
            depthStencilAttachment.depthStoreOp = StoreOp.DISCARD;
            depthStencilAttachment.stencilLoadOp = LoadOp.CLEAR;
            depthStencilAttachment.stencilStoreOp = StoreOp.DISCARD;
            depthStencilAttachment.sampleCount = 1;
            var renderPassInfo = new RenderPassInfo([colorAttachment], depthStencilAttachment);
            this._shadowRenderPass = device.createRenderPass(renderPassInfo);
          }

          var shadowRenderTargets = [];
          shadowRenderTargets.push(device.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.COLOR_ATTACHMENT | TextureUsageBit.SAMPLED, format, shadowMapSize.x, shadowMapSize.y)));
          var depth = device.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.DEPTH_STENCIL_ATTACHMENT, Format.DEPTH_STENCIL, shadowMapSize.x, shadowMapSize.y));
          var shadowFrameBuffer = device.createFramebuffer(new FramebufferInfo(this._shadowRenderPass, shadowRenderTargets, depth));
          shadowFrameBufferMap.set(light, shadowFrameBuffer);
        };

        _proto._renderStage = function _renderStage(camera, light, shadowFrameBuffer, globalDS, level) {
          if (level === void 0) {
            level = 0;
          }

          for (var i = 0; i < this._stages.length; i++) {
            var shadowStage = this._stages[i];
            shadowStage.setUsage(globalDS, light, shadowFrameBuffer, level);
            shadowStage.render(camera);
          }
        };

        _proto.clearShadowMap = function clearShadowMap(validLights, camera) {
          var pipeline = this._pipeline;
          var scene = pipeline.pipelineSceneData;
          var _ref2 = camera.scene,
              mainLight = _ref2.mainLight;

          if (mainLight) {
            var globalDS = this._pipeline.descriptorSet;

            if (!scene.shadowFrameBufferMap.has(mainLight)) {
              this._initShadowFrameBuffer(this._pipeline, mainLight, camera.window.swapchain);
            }

            var shadowFrameBuffer = scene.shadowFrameBufferMap.get(mainLight);

            for (var i = 0; i < this._stages.length; i++) {
              var shadowStage = this._stages[i];
              shadowStage.setUsage(globalDS, mainLight, shadowFrameBuffer);
              shadowStage.clearFramebuffer(camera);
            }
          }

          for (var l = 0; l < validLights.length; l++) {
            var light = validLights[l];
            var ds = pipeline.globalDSManager.getOrCreateDescriptorSet(light);

            if (!scene.shadowFrameBufferMap.has(light)) {
              this._initShadowFrameBuffer(this._pipeline, light, camera.window.swapchain);
            }

            var _shadowFrameBuffer2 = scene.shadowFrameBufferMap.get(light);

            for (var _i = 0; _i < this._stages.length; _i++) {
              var _shadowStage = this._stages[_i];

              _shadowStage.setUsage(ds, light, _shadowFrameBuffer2);

              _shadowStage.clearFramebuffer(camera);
            }
          }
        };

        _proto.resizeShadowMap = function resizeShadowMap() {
          var shadows = this._pipeline.pipelineSceneData.shadows;
          var shadowMapSize = shadows.size;
          var pipeline = this._pipeline;
          var device = pipeline.device;
          var shadowFrameBufferMap = pipeline.pipelineSceneData.shadowFrameBufferMap;
          var format = supportsR32FloatTexture(device) ? Format.R32F : Format.RGBA8;

          for (var _iterator = _createForOfIteratorHelperLoose(shadowFrameBufferMap.keys()), _step; !(_step = _iterator()).done;) {
            var key = _step.value;
            var frameBuffer = shadowFrameBufferMap.get(key);

            if (!frameBuffer) {
              continue;
            }

            var renderTargets = [];
            renderTargets.push(pipeline.device.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.COLOR_ATTACHMENT | TextureUsageBit.SAMPLED, format, shadowMapSize.x, shadowMapSize.y)));
            var depth = frameBuffer.depthStencilTexture;

            if (depth) {
              depth.resize(shadowMapSize.x, shadowMapSize.y);
            }

            var shadowRenderPass = frameBuffer.renderPass;
            frameBuffer.destroy();
            var newFrameBuffer = device.createFramebuffer(new FramebufferInfo(shadowRenderPass, renderTargets, depth));
            shadowFrameBufferMap.set(key, newFrameBuffer);
          }

          shadows.shadowMapDirty = false;
        };

        return ShadowFlow;
      }(RenderFlow), _class2$s.initInfo = {
        name: PIPELINE_FLOW_SHADOW,
        priority: ForwardFlowPriority.SHADOW,
        tag: RenderFlowTag.SCENE,
        stages: []
      }, _temp$c)) || _class$v));

      var _mat4Trans = new Mat4();

      var _matShadowTrans = new Mat4();

      var _matShadowView$2 = new Mat4();

      var _matShadowProj$1 = new Mat4();

      var _matShadowViewProj$2 = new Mat4();

      var _matShadowViewProjArbitaryPos = new Mat4();

      var _matShadowViewProjArbitaryPosInv = new Mat4();

      var _focus = new Vec3(0, 0, 0);

      var _projPos = new Vec3();

      var _texelSize = new Vec2();

      var _projSnap = new Vec3();

      var _snap = new Vec3();

      var _maxVec3 = new Vec3(10000000, 10000000, 10000000);

      var _minVec3 = new Vec3(-10000000, -10000000, -10000000);

      var _shadowPos = new Vec3();

      var _maxLayerPosz = 0.0;
      var _maxLayerFarPlane = 0.0;
      var ShadowLayerVolume = function () {
        function ShadowLayerVolume(level) {
          this._shadowObjects = [];
          this._shadowCameraFar = 0;
          this._level = void 0;
          this._matShadowView = new Mat4();
          this._matShadowProj = new Mat4();
          this._matShadowViewProj = new Mat4();
          this._validFrustum = new Frustum();
          this._splitFrustum = new Frustum();
          this._lightViewFrustum = new Frustum();
          this._castLightViewBoundingBox = new AABB();
          this._level = level;
          this._validFrustum.accurate = true;
          this._splitFrustum.accurate = true;
          this._lightViewFrustum.accurate = true;
        }

        var _proto = ShadowLayerVolume.prototype;

        _proto.copyToValidFrustum = function copyToValidFrustum(validFrustum) {
          Frustum.copy(this._validFrustum, validFrustum);
        };

        _proto.calculateValidFrustumOrtho = function calculateValidFrustumOrtho(width, height, near, far, transform) {
          Frustum.createOrtho(this._validFrustum, width, height, near, far, transform);
        };

        _proto.calculateSplitFrustum = function calculateSplitFrustum(camera, m, start, end) {
          this._splitFrustum.split(start, end, camera.aspect, camera.fov, m);
        };

        _proto.destroy = function destroy() {
          this._shadowObjects.length = 0;
        };

        _proto.createMatrix = function createMatrix(dirLight, shadowMapWidth, onlyForCulling) {
          var device = legacyCC.director.root.device;
          var invisibleOcclusionRange = dirLight.shadowInvisibleOcclusionRange;
          Frustum.copy(this._lightViewFrustum, this._splitFrustum);
          Mat4.fromRT(_matShadowTrans, dirLight.node.rotation, _focus);
          Mat4.invert(_matShadowView$2, _matShadowTrans);

          var shadowViewArbitaryPos = _matShadowView$2.clone();

          this._lightViewFrustum.transform(_matShadowView$2);

          AABB.fromPoints(this._castLightViewBoundingBox, _maxVec3, _minVec3);

          this._castLightViewBoundingBox.mergeFrustum(this._lightViewFrustum);

          var orthoSizeWidth;
          var orthoSizeHeight;

          if (dirLight.csmOptimizationMode === CSMOptimizationMode.DisableRotationFix) {
            orthoSizeWidth = this._castLightViewBoundingBox.halfExtents.x * 2.0;
            orthoSizeHeight = this._castLightViewBoundingBox.halfExtents.y * 2.0;
          } else {
            orthoSizeWidth = orthoSizeHeight = Vec3.distance(this._lightViewFrustum.vertices[0], this._lightViewFrustum.vertices[6]);
          }

          var csmLevel = legacyCC.director.root.pipeline.pipelineSceneData.csmSupported ? dirLight.csmLevel : 1;

          if (csmLevel > 1 && dirLight.csmOptimizationMode === CSMOptimizationMode.RemoveDuplicates) {
            if (this._level >= csmLevel - 1) {
              _maxLayerFarPlane = this._castLightViewBoundingBox.halfExtents.z;
              _maxLayerPosz = this._castLightViewBoundingBox.center.z;
            } else {
              var alignFarPlaneDist = Math.abs(this._castLightViewBoundingBox.center.z - _maxLayerPosz) + _maxLayerFarPlane;

              this._castLightViewBoundingBox.halfExtents.z = Math.max(this._castLightViewBoundingBox.center.z, alignFarPlaneDist);
            }
          }

          var r = this._castLightViewBoundingBox.halfExtents.z;
          this._shadowCameraFar = r * 2 + invisibleOcclusionRange;
          var center = this._castLightViewBoundingBox.center;

          _shadowPos.set(center.x, center.y, center.z + r + invisibleOcclusionRange);

          Vec3.transformMat4(_shadowPos, _shadowPos, _matShadowTrans);
          Mat4.fromRT(_matShadowTrans, dirLight.node.rotation, _shadowPos);
          Mat4.invert(_matShadowView$2, _matShadowTrans);

          if (!onlyForCulling) {
            var halfOrthoSizeWidth = orthoSizeWidth * 0.5;
            var halfOrthoSizeHeight = orthoSizeHeight * 0.5;
            Mat4.ortho(_matShadowProj$1, -halfOrthoSizeWidth, halfOrthoSizeWidth, -halfOrthoSizeHeight, halfOrthoSizeHeight, 0.1, this._shadowCameraFar, device.capabilities.clipSpaceMinZ, device.capabilities.clipSpaceSignY);
            Mat4.multiply(_matShadowViewProjArbitaryPos, _matShadowProj$1, shadowViewArbitaryPos);
            Vec3.transformMat4(_projPos, _shadowPos, _matShadowViewProjArbitaryPos);
            var invActualSize = 2.0 / shadowMapWidth;

            _texelSize.set(invActualSize, invActualSize);

            var modX = _projPos.x % _texelSize.x;
            var modY = _projPos.y % _texelSize.y;

            _projSnap.set(_projPos.x - modX, _projPos.y - modY, _projPos.z);

            Mat4.invert(_matShadowViewProjArbitaryPosInv, _matShadowViewProjArbitaryPos);
            Vec3.transformMat4(_snap, _projSnap, _matShadowViewProjArbitaryPosInv);
            Mat4.fromRT(_matShadowTrans, dirLight.node.rotation, _snap);
            Mat4.invert(_matShadowView$2, _matShadowTrans);
            Mat4.multiply(_matShadowViewProj$2, _matShadowProj$1, _matShadowView$2);
            Mat4.copy(this._matShadowView, _matShadowView$2);
            Mat4.copy(this._matShadowProj, _matShadowProj$1);
            Mat4.copy(this._matShadowViewProj, _matShadowViewProj$2);
          }

          Frustum.createOrtho(this._validFrustum, orthoSizeWidth, orthoSizeHeight, 0.1, this._shadowCameraFar, _matShadowTrans);
        };

        _createClass(ShadowLayerVolume, [{
          key: "level",
          get: function get() {
            return this._level;
          }
        }, {
          key: "shadowObjects",
          get: function get() {
            return this._shadowObjects;
          }
        }, {
          key: "shadowCameraFar",
          get: function get() {
            return this._shadowCameraFar;
          },
          set: function set(val) {
            this._shadowCameraFar = val;
          }
        }, {
          key: "matShadowView",
          get: function get() {
            return this._matShadowView;
          },
          set: function set(val) {
            this._matShadowView = val;
          }
        }, {
          key: "matShadowProj",
          get: function get() {
            return this._matShadowProj;
          },
          set: function set(val) {
            this._matShadowProj = val;
          }
        }, {
          key: "matShadowViewProj",
          get: function get() {
            return this._matShadowViewProj;
          },
          set: function set(val) {
            this._matShadowViewProj = val;
          }
        }, {
          key: "validFrustum",
          get: function get() {
            return this._validFrustum;
          }
        }, {
          key: "splitFrustum",
          get: function get() {
            return this._splitFrustum;
          }
        }, {
          key: "lightViewFrustum",
          get: function get() {
            return this._lightViewFrustum;
          }
        }, {
          key: "castLightViewBoundingBox",
          get: function get() {
            return this._castLightViewBoundingBox;
          }
        }]);

        return ShadowLayerVolume;
      }();
      var CSMShadowLayer = function (_ShadowLayerVolume) {
        _inheritsLoose(CSMShadowLayer, _ShadowLayerVolume);

        function CSMShadowLayer(level) {
          var _this;

          _this = _ShadowLayerVolume.call(this, level) || this;
          _this._splitCameraNear = 0;
          _this._splitCameraFar = 0;
          _this._csmAtlas = new Vec4();

          _this._calculateAtlas(level);

          return _this;
        }

        var _proto2 = CSMShadowLayer.prototype;

        _proto2.destroy = function destroy() {
          _ShadowLayerVolume.prototype.destroy.call(this);
        };

        _proto2._calculateAtlas = function _calculateAtlas(level) {
          var clipSpaceSignY = legacyCC.director.root.device.capabilities.clipSpaceSignY;
          var x = level % 2 - 0.5;
          var y = (0.5 - Math.floor(level / 2)) * clipSpaceSignY;

          this._csmAtlas.set(0.5, 0.5, x, y);
        };

        _createClass(CSMShadowLayer, [{
          key: "splitCameraNear",
          get: function get() {
            return this._splitCameraNear;
          },
          set: function set(val) {
            this._splitCameraNear = val;
          }
        }, {
          key: "splitCameraFar",
          get: function get() {
            return this._splitCameraFar;
          },
          set: function set(val) {
            this._splitCameraFar = val;
          }
        }, {
          key: "csmAtlas",
          get: function get() {
            return this._csmAtlas;
          },
          set: function set(val) {
            this._csmAtlas = val;
          }
        }]);

        return CSMShadowLayer;
      }(ShadowLayerVolume);
      var CSMLayers = function () {
        function CSMLayers() {
          this._castShadowObjects = [];
          this._layerObjects = new CachedArray(64);
          this._layers = [];
          this._levelCount = 0;
          this._specialLayer = new ShadowLayerVolume(1);
          this._shadowDistance = 0;

          for (var i = 0; i < CSMLevel.LEVEL_4; i++) {
            this._layers[i] = new CSMShadowLayer(i);
          }
        }

        var _proto3 = CSMLayers.prototype;

        _proto3.update = function update(sceneData, camera) {
          var scene = camera.scene;
          var dirLight = scene.mainLight;

          if (dirLight === null) {
            return;
          }

          var shadowInfo = sceneData.shadows;
          var levelCount = legacyCC.director.root.pipeline.pipelineSceneData.csmSupported ? dirLight.csmLevel : 1;
          var shadowDistance = dirLight.shadowDistance;

          if (!shadowInfo.enabled || !dirLight.shadowEnabled) {
            return;
          }

          if (dirLight.shadowFixedArea) {
            this._updateFixedArea(dirLight);
          } else {
            if (dirLight.csmNeedUpdate || this._levelCount !== levelCount || this._shadowDistance !== shadowDistance) {
              this._splitFrustumLevels(dirLight);

              this._levelCount = levelCount;
              this._shadowDistance = shadowDistance;
            }

            this._calculateCSM(camera, dirLight, shadowInfo);
          }
        };

        _proto3.destroy = function destroy() {
          this._castShadowObjects.length = 0;

          for (var i = 0; i < this._layers.length; i++) {
            this._layers[i].destroy();
          }

          this._layers.length = 0;
        };

        _proto3._updateFixedArea = function _updateFixedArea(dirLight) {
          var device = legacyCC.director.root.device;
          var x = dirLight.shadowOrthoSize;
          var y = dirLight.shadowOrthoSize;
          var near = dirLight.shadowNear;
          var far = dirLight.shadowFar;
          Mat4.fromRT(_matShadowTrans, dirLight.node.getWorldRotation(), dirLight.node.getWorldPosition());
          Mat4.invert(_matShadowView$2, _matShadowTrans);
          Mat4.ortho(_matShadowProj$1, -x, x, -y, y, near, far, device.capabilities.clipSpaceMinZ, device.capabilities.clipSpaceSignY);
          Mat4.multiply(_matShadowViewProj$2, _matShadowProj$1, _matShadowView$2);
          this._specialLayer.matShadowView = _matShadowView$2;
          this._specialLayer.matShadowProj = _matShadowProj$1;
          this._specialLayer.matShadowViewProj = _matShadowViewProj$2;

          this._specialLayer.calculateValidFrustumOrtho(x * 2.0, y * 2.0, near, far, _matShadowTrans);
        };

        _proto3._splitFrustumLevels = function _splitFrustumLevels(dirLight) {
          var nd = 0.1;
          var fd = dirLight.shadowDistance;
          var ratio = fd / nd;
          var level = legacyCC.director.root.pipeline.pipelineSceneData.csmSupported ? dirLight.csmLevel : 1;
          var lambda = dirLight.csmLayerLambda;
          this._layers[0].splitCameraNear = nd;

          for (var i = 1; i < level; i++) {
            var si = i / level;
            var preNear = lambda * (nd * Math.pow(ratio, si)) + (1 - lambda) * (nd + (fd - nd) * si);
            var nextFar = preNear * 1.005;
            this._layers[i].splitCameraNear = preNear;
            this._layers[i - 1].splitCameraFar = nextFar;
          }

          this._layers[level - 1].splitCameraFar = fd;
          dirLight.csmNeedUpdate = false;
        };

        _proto3._calculateCSM = function _calculateCSM(camera, dirLight, shadowInfo) {
          var level = legacyCC.director.root.pipeline.pipelineSceneData.csmSupported ? dirLight.csmLevel : 1;
          var shadowMapWidth = level > 1 ? shadowInfo.size.x * 0.5 : shadowInfo.size.x;

          if (shadowMapWidth < 0.0) {
            return;
          }

          this._getCameraWorldMatrix(_mat4Trans, camera);

          for (var i = level - 1; i >= 0; i--) {
            var csmLayer = this._layers[i];
            var near = csmLayer.splitCameraNear;
            var far = csmLayer.splitCameraFar;
            csmLayer.calculateSplitFrustum(camera, _mat4Trans, near, far);
            csmLayer.createMatrix(dirLight, shadowMapWidth, false);
          }

          if (level === CSMLevel.LEVEL_1) {
            this._specialLayer.shadowCameraFar = this._layers[0].shadowCameraFar;
            Mat4.copy(this._specialLayer.matShadowView, this._layers[0].matShadowView);
            Mat4.copy(this._specialLayer.matShadowProj, this._layers[0].matShadowProj);
            Mat4.copy(this._specialLayer.matShadowViewProj, this._layers[0].matShadowViewProj);

            this._specialLayer.copyToValidFrustum(this._layers[0].validFrustum);
          } else {
            this._specialLayer.calculateSplitFrustum(camera, _mat4Trans, 0.1, dirLight.shadowDistance);

            this._specialLayer.createMatrix(dirLight, shadowMapWidth, true);
          }
        };

        _proto3._getCameraWorldMatrix = function _getCameraWorldMatrix(out, camera) {
          if (!camera.node) {
            return;
          }

          var cameraNode = camera.node;
          var position = cameraNode.getWorldPosition();
          var rotation = cameraNode.getWorldRotation();
          Mat4.fromRT(out, rotation, position);
          out.m08 *= -1.0;
          out.m09 *= -1.0;
          out.m10 *= -1.0;
        };

        _createClass(CSMLayers, [{
          key: "castShadowObjects",
          get: function get() {
            return this._castShadowObjects;
          }
        }, {
          key: "layerObjects",
          get: function get() {
            return this._layerObjects;
          }
        }, {
          key: "layers",
          get: function get() {
            return this._layers;
          }
        }, {
          key: "specialLayer",
          get: function get() {
            return this._specialLayer;
          }
        }]);

        return CSMLayers;
      }();

      var GEOMETRY_RENDERER_TECHNIQUE_COUNT = 6;
      var PipelineSceneData = exports('PipelineSceneData', function () {
        function PipelineSceneData() {
          this.fog = new Fog();
          this.ambient = new Ambient();
          this.skybox = new Skybox();
          this.shadows = new Shadows();
          this.csmLayers = new CSMLayers();
          this.octree = new Octree();
          this.lightProbes = legacyCC.internal.LightProbes ? new legacyCC.internal.LightProbes() : null;
          this.validPunctualLights = [];
          this.renderObjects = [];
          this.shadowFrameBufferMap = new Map();
          this._geometryRendererMaterials = [];
          this._geometryRendererPasses = [];
          this._geometryRendererShaders = [];
          this._occlusionQueryVertexBuffer = null;
          this._occlusionQueryIndicesBuffer = null;
          this._occlusionQueryInputAssembler = null;
          this._occlusionQueryMaterial = null;
          this._occlusionQueryShader = null;
          this._isHDR = true;
          this._shadingScale = 1.0;
          this._csmSupported = true;
          this._shadingScale = 1.0;
        }

        var _proto = PipelineSceneData.prototype;

        _proto.activate = function activate(device) {
          this._device = device;
          this.initGeometryRendererMaterials();
          this.initOcclusionQuery();
          return true;
        };

        _proto.initGeometryRendererMaterials = function initGeometryRendererMaterials() {
          var offset = 0;

          for (var tech = 0; tech < GEOMETRY_RENDERER_TECHNIQUE_COUNT; tech++) {
            this._geometryRendererMaterials[tech] = new Material();
            this._geometryRendererMaterials[tech]._uuid = "geometry-renderer-material-" + tech;

            this._geometryRendererMaterials[tech].initialize({
              effectName: 'builtin-geometry-renderer',
              technique: tech
            });

            for (var pass = 0; pass < this._geometryRendererMaterials[tech].passes.length; ++pass) {
              this._geometryRendererPasses[offset] = this._geometryRendererMaterials[tech].passes[pass];
              this._geometryRendererShaders[offset] = this._geometryRendererMaterials[tech].passes[pass].getShaderVariant();
              offset++;
            }
          }
        };

        _proto.initOcclusionQuery = function initOcclusionQuery() {
          if (!this._occlusionQueryInputAssembler) {
            this._occlusionQueryInputAssembler = this._createOcclusionQueryIA();
          }

          if (!this._occlusionQueryMaterial) {
            var mat = new Material();
            mat._uuid = 'default-occlusion-query-material';
            mat.initialize({
              effectName: 'builtin-occlusion-query'
            });
            this._occlusionQueryMaterial = mat;

            if (mat.passes.length > 0) {
              this._occlusionQueryShader = mat.passes[0].getShaderVariant();
            }
          }
        };

        _proto.getOcclusionQueryPass = function getOcclusionQueryPass() {
          if (this._occlusionQueryMaterial && this._occlusionQueryMaterial.passes.length > 0) {
            return this._occlusionQueryMaterial.passes[0];
          }

          return null;
        };

        _proto.updatePipelineSceneData = function updatePipelineSceneData() {};

        _proto.destroy = function destroy() {
          var _this$_occlusionQuery, _this$_occlusionQuery2, _this$_occlusionQuery3;

          this.shadows.destroy();
          this.csmLayers.destroy();
          this.validPunctualLights.length = 0;
          (_this$_occlusionQuery = this._occlusionQueryInputAssembler) === null || _this$_occlusionQuery === void 0 ? void 0 : _this$_occlusionQuery.destroy();
          this._occlusionQueryInputAssembler = null;
          (_this$_occlusionQuery2 = this._occlusionQueryVertexBuffer) === null || _this$_occlusionQuery2 === void 0 ? void 0 : _this$_occlusionQuery2.destroy();
          this._occlusionQueryVertexBuffer = null;
          (_this$_occlusionQuery3 = this._occlusionQueryIndicesBuffer) === null || _this$_occlusionQuery3 === void 0 ? void 0 : _this$_occlusionQuery3.destroy();
          this._occlusionQueryIndicesBuffer = null;
        };

        _proto._createOcclusionQueryIA = function _createOcclusionQueryIA() {
          var device = this._device;
          var vertices = new Float32Array([-1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, -1, -1, -1, 1, 1, -1, 1, -1, 1, 1, 1, 1, 1]);
          var vbStride = Float32Array.BYTES_PER_ELEMENT * 3;
          var vbSize = vbStride * 8;
          this._occlusionQueryVertexBuffer = device.createBuffer(new BufferInfo(BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, vbSize, vbStride));

          this._occlusionQueryVertexBuffer.update(vertices);

          var indices = new Uint16Array([0, 2, 1, 1, 2, 3, 4, 5, 6, 5, 7, 6, 1, 3, 7, 1, 7, 5, 0, 4, 6, 0, 6, 2, 0, 1, 5, 0, 5, 4, 2, 6, 7, 2, 7, 3]);
          var ibStride = Uint16Array.BYTES_PER_ELEMENT;
          var ibSize = ibStride * 36;
          this._occlusionQueryIndicesBuffer = device.createBuffer(new BufferInfo(BufferUsageBit.INDEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, ibSize, ibStride));

          this._occlusionQueryIndicesBuffer.update(indices);

          var attributes = [new Attribute('a_position', Format.RGB32F)];
          var info = new InputAssemblerInfo(attributes, [this._occlusionQueryVertexBuffer], this._occlusionQueryIndicesBuffer);
          var inputAssembler = device.createInputAssembler(info);
          return inputAssembler;
        };

        _createClass(PipelineSceneData, [{
          key: "isHDR",
          get: function get() {
            return this._isHDR;
          },
          set: function set(val) {
            this._isHDR = val;
          }
        }, {
          key: "shadingScale",
          get: function get() {
            return this._shadingScale;
          },
          set: function set(val) {
            this._shadingScale = val;
          }
        }, {
          key: "csmSupported",
          get: function get() {
            return this._csmSupported;
          },
          set: function set(val) {
            this._csmSupported = val;
          }
        }, {
          key: "geometryRendererPasses",
          get: function get() {
            return this._geometryRendererPasses;
          }
        }, {
          key: "geometryRendererShaders",
          get: function get() {
            return this._geometryRendererShaders;
          }
        }]);

        return PipelineSceneData;
      }());

      var REFLECTION_PROBE_DEFAULT_MASK = Layers.makeMaskExclude([Layers.BitMask.UI_2D, Layers.BitMask.UI_3D, Layers.BitMask.GIZMOS, Layers.BitMask.EDITOR, Layers.BitMask.SCENE_GIZMO, Layers.BitMask.PROFILER]);
      var CC_USE_RGBE_OUTPUT = 'CC_USE_RGBE_OUTPUT';

      var _phaseID$2 = getPhaseID('default');

      var _phaseReflectMapID = getPhaseID('reflect-map');

      function getPassIndex(subModel) {
        var passes = subModel.passes;
        var r = legacyCC.rendering;
        if (isEnableEffect()) _phaseID$2 = r.getPhaseID(r.getPassID('default'), 'default');

        for (var k = 0; k < passes.length; k++) {
          if ((!r || !r.enableEffectImport) && passes[k].phase === _phaseID$2 || isEnableEffect() && passes[k].phaseID === _phaseID$2) {
            return k;
          }
        }

        return -1;
      }

      function getReflectMapPassIndex(subModel) {
        var passes = subModel.passes;
        var r = legacyCC.rendering;
        if (isEnableEffect()) _phaseReflectMapID = r.getPhaseID(r.getPassID('default'), 'reflect-map');

        for (var k = 0; k < passes.length; k++) {
          if ((!r || !r.enableEffectImport) && passes[k].phase === _phaseReflectMapID || isEnableEffect() && passes[k].phaseID === _phaseReflectMapID) {
            return k;
          }
        }

        return -1;
      }

      var RenderReflectionProbeQueue = function () {
        function RenderReflectionProbeQueue(pipeline) {
          this._pipeline = void 0;
          this._subModelsArray = [];
          this._passArray = [];
          this._shaderArray = [];
          this._rgbeSubModelsArray = [];
          this._instancedQueue = void 0;
          this._batchedQueue = void 0;
          this._pipeline = pipeline;
          this._instancedQueue = new RenderInstancedQueue();
          this._batchedQueue = new RenderBatchedQueue();
        }

        var _proto = RenderReflectionProbeQueue.prototype;

        _proto.gatherRenderObjects = function gatherRenderObjects(probe, camera, cmdBuff) {
          this.clear();
          var scene = camera.scene;
          var sceneData = this._pipeline.pipelineSceneData;
          var skybox = sceneData.skybox;

          if (skybox.enabled && skybox.model && probe.camera.clearFlag & SKYBOX_FLAG) {
            this.add(skybox.model);
          }

          var models = scene.models;
          var visibility = probe.camera.visibility;

          for (var i = 0; i < models.length; i++) {
            var model = models[i];

            if (scene.isCulledByLod(camera, model)) {
              continue;
            }

            if (model.enabled && model.node && model.worldBounds && model.bakeToReflectionProbe) {
              if (probe.probeType === ProbeType.CUBE) {
                if (((visibility & model.node.layer) === model.node.layer || visibility & model.visFlags) && intersect.aabbWithAABB(model.worldBounds, probe.boundingBox)) {
                  this.add(model);
                }
              } else if ((model.node.layer & REFLECTION_PROBE_DEFAULT_MASK) === model.node.layer || REFLECTION_PROBE_DEFAULT_MASK & model.visFlags) {
                if (intersect.aabbFrustum(model.worldBounds, probe.camera.frustum)) {
                  this.add(model);
                }
              }
            }
          }

          this._instancedQueue.uploadBuffers(cmdBuff);

          this._batchedQueue.uploadBuffers(cmdBuff);
        };

        _proto.clear = function clear() {
          this._subModelsArray.length = 0;
          this._shaderArray.length = 0;
          this._passArray.length = 0;

          this._instancedQueue.clear();

          this._batchedQueue.clear();

          this._rgbeSubModelsArray.length = 0;
        };

        _proto.add = function add(model) {
          var subModels = model.subModels;

          for (var j = 0; j < subModels.length; j++) {
            var subModel = subModels[j];
            var passIdx = getReflectMapPassIndex(subModel);
            var bUseReflectPass = true;

            if (passIdx < 0) {
              passIdx = getPassIndex(subModel);
              bUseReflectPass = false;
            }

            if (passIdx < 0) {
              continue;
            }

            var pass = subModel.passes[passIdx];
            var batchingScheme = pass.batchingScheme;

            if (!bUseReflectPass) {
              var patches = subModel.patches;
              var useRGBEPatchs = [{
                name: CC_USE_RGBE_OUTPUT,
                value: true
              }];
              patches = patches ? patches.concat(useRGBEPatchs) : useRGBEPatchs;
              subModel.onMacroPatchesStateChanged(patches);

              this._rgbeSubModelsArray.push(subModel);
            }

            if (batchingScheme === BatchingSchemes.INSTANCING) {
              var buffer = pass.getInstancedBuffer();
              buffer.merge(subModel, passIdx);

              this._instancedQueue.queue.add(buffer);
            } else if (pass.batchingScheme === BatchingSchemes.VB_MERGING) {
              var _buffer = pass.getBatchedBuffer();

              _buffer.merge(subModel, passIdx, model);

              this._batchedQueue.queue.add(_buffer);
            } else {
              var shader = subModel.shaders[passIdx];

              this._subModelsArray.push(subModel);

              if (shader) this._shaderArray.push(shader);

              this._passArray.push(pass);
            }
          }
        };

        _proto.recordCommandBuffer = function recordCommandBuffer(device, renderPass, cmdBuff) {
          this._instancedQueue.recordCommandBuffer(device, renderPass, cmdBuff);

          this._batchedQueue.recordCommandBuffer(device, renderPass, cmdBuff);

          for (var i = 0; i < this._subModelsArray.length; ++i) {
            var subModel = this._subModelsArray[i];
            var shader = this._shaderArray[i];
            var pass = this._passArray[i];
            var ia = subModel.inputAssembler;
            var pso = PipelineStateManager.getOrCreatePipelineState(device, pass, shader, renderPass, ia);
            var descriptorSet = pass.descriptorSet;
            cmdBuff.bindPipelineState(pso);
            cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, descriptorSet);
            cmdBuff.bindDescriptorSet(SetIndex.LOCAL, subModel.descriptorSet);
            cmdBuff.bindInputAssembler(ia);
            cmdBuff.draw(ia);
          }

          this.resetRGBEMacro();

          this._instancedQueue.clear();

          this._batchedQueue.clear();
        };

        _proto.resetRGBEMacro = function resetRGBEMacro() {
          for (var i = 0; i < this._rgbeSubModelsArray.length; i++) {
            var subModel = this._rgbeSubModelsArray[i];
            var patches = subModel.patches;
            if (!patches) continue;

            for (var j = 0; j < patches.length; j++) {
              var patch = patches[j];

              if (patch.name === CC_USE_RGBE_OUTPUT) {
                patches.splice(j, 1);
                break;
              }
            }

            subModel.onMacroPatchesStateChanged(patches);
          }
        };

        return RenderReflectionProbeQueue;
      }();

      var _dec$w, _class$w, _class2$t, _temp$d;
      var colors$2 = [new Color$1(1, 1, 1, 1)];
      var ReflectionProbeStage = exports('ReflectionProbeStage', (_dec$w = ccclass('ReflectionProbeStage'), _dec$w(_class$w = (_temp$d = _class2$t = function (_RenderStage) {
        _inheritsLoose(ReflectionProbeStage, _RenderStage);

        function ReflectionProbeStage() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _RenderStage.call.apply(_RenderStage, [this].concat(args)) || this;
          _this._frameBuffer = null;
          _this._renderArea = new Rect$1();
          _this._probe = null;
          _this._rgbeColor = new Vec3();
          return _this;
        }

        var _proto = ReflectionProbeStage.prototype;

        _proto.setUsageInfo = function setUsageInfo(probe, frameBuffer) {
          this._probe = probe;
          this._frameBuffer = frameBuffer;
        };

        _proto.destroy = function destroy() {
          var _this$_probeRenderQue;

          this._frameBuffer = null;
          (_this$_probeRenderQue = this._probeRenderQueue) === null || _this$_probeRenderQue === void 0 ? void 0 : _this$_probeRenderQue.clear();
        };

        _proto.clearFramebuffer = function clearFramebuffer(camera) {
          if (!this._frameBuffer) {
            return;
          }

          colors$2[0].w = camera.clearColor.w;
          var pipeline = this._pipeline;
          var pipelineSceneData = pipeline.pipelineSceneData;
          var shadingScale = pipelineSceneData.shadingScale;
          var vp = camera.viewport;
          var size = this._probe.resolution;
          this._renderArea.x = vp.x * size;
          this._renderArea.y = vp.y * size;
          this._renderArea.width = vp.width * size * shadingScale;
          this._renderArea.height = vp.height * size * shadingScale;
          var cmdBuff = pipeline.commandBuffers[0];
          var renderPass = this._frameBuffer.renderPass;
          cmdBuff.beginRenderPass(renderPass, this._frameBuffer, this._renderArea, colors$2, camera.clearDepth, camera.clearStencil);
          cmdBuff.endRenderPass();
        };

        _proto.render = function render(camera) {
          var pipeline = this._pipeline;
          var cmdBuff = pipeline.commandBuffers[0];

          this._probeRenderQueue.gatherRenderObjects(this._probe, camera, cmdBuff);

          pipeline.pipelineUBO.updateCameraUBO(this._probe.camera);
          this._renderArea.x = 0;
          this._renderArea.y = 0;
          this._renderArea.width = this._probe.renderArea().x;
          this._renderArea.height = this._probe.renderArea().y;
          var renderPass = this._frameBuffer.renderPass;

          if (this._probe.camera.clearFlag & ClearFlagBit.COLOR) {
            this._rgbeColor.x = this._probe.camera.clearColor.x;
            this._rgbeColor.y = this._probe.camera.clearColor.y;
            this._rgbeColor.z = this._probe.camera.clearColor.z;
            var rgbe = packRGBE(this._rgbeColor);
            colors$2[0].x = rgbe.x;
            colors$2[0].y = rgbe.y;
            colors$2[0].z = rgbe.z;
            colors$2[0].w = rgbe.w;
          }

          var device = pipeline.device;
          cmdBuff.beginRenderPass(renderPass, this._frameBuffer, this._renderArea, colors$2, this._probe.camera.clearDepth, this._probe.camera.clearStencil);
          cmdBuff.bindDescriptorSet(SetIndex.GLOBAL, pipeline.descriptorSet);

          this._probeRenderQueue.recordCommandBuffer(device, renderPass, cmdBuff);

          cmdBuff.endRenderPass();
          pipeline.pipelineUBO.updateCameraUBO(camera);
        };

        _proto.activate = function activate(pipeline, flow) {
          _RenderStage.prototype.activate.call(this, pipeline, flow);

          this._probeRenderQueue = new RenderReflectionProbeQueue(pipeline);
        };

        return ReflectionProbeStage;
      }(RenderStage), _class2$t.initInfo = {
        name: 'ReflectionProbeStage',
        priority: ForwardStagePriority.FORWARD,
        tag: 0
      }, _temp$d)) || _class$w));

      var _dec$x, _class$x, _class2$u, _temp$e;
      var ReflectionProbeFlow = exports('ReflectionProbeFlow', (_dec$x = ccclass('ReflectionProbeFlow'), _dec$x(_class$x = (_temp$e = _class2$u = function (_RenderFlow) {
        _inheritsLoose(ReflectionProbeFlow, _RenderFlow);

        function ReflectionProbeFlow() {
          return _RenderFlow.apply(this, arguments) || this;
        }

        var _proto = ReflectionProbeFlow.prototype;

        _proto.initialize = function initialize(info) {
          _RenderFlow.prototype.initialize.call(this, info);

          if (this._stages.length === 0) {
            var probeStage = new ReflectionProbeStage();
            probeStage.initialize(ReflectionProbeStage.initInfo);

            this._stages.push(probeStage);
          }

          return true;
        };

        _proto.activate = function activate(pipeline) {
          _RenderFlow.prototype.activate.call(this, pipeline);
        };

        _proto.render = function render(camera) {
          if (!legacyCC.internal.reflectionProbeManager) {
            return;
          }

          var probes = legacyCC.internal.reflectionProbeManager.getProbes();

          for (var i = 0; i < probes.length; i++) {
            if (probes[i].needRender) {
              if ( probes[i].probeType === ProbeType.PLANAR) {
                this._renderStage(camera, probes[i]);
              }
            }
          }
        };

        _proto.destroy = function destroy() {
          _RenderFlow.prototype.destroy.call(this);
        };

        _proto._renderStage = function _renderStage(camera, probe) {
          for (var i = 0; i < this._stages.length; i++) {
            var probeStage = this._stages[i];

            if (probe.probeType === ProbeType.PLANAR) {
              legacyCC.internal.reflectionProbeManager.updatePlanarMap(probe, null);
              probeStage.setUsageInfo(probe, probe.realtimePlanarTexture.window.framebuffer);
              probeStage.render(camera);
              legacyCC.internal.reflectionProbeManager.updatePlanarMap(probe, probe.realtimePlanarTexture.getGFXTexture());
            } else {
              for (var faceIdx = 0; faceIdx < 6; faceIdx++) {
                probe.updateCameraDir(faceIdx);
                var renderTexture = probe.bakedCubeTextures[faceIdx];
                probeStage.setUsageInfo(probe, renderTexture.window.framebuffer);
                probeStage.render(camera);
              }

              probe.needRender = false;
            }
          }
        };

        return ReflectionProbeFlow;
      }(RenderFlow), _class2$u.initInfo = {
        name: 'PIPELINE_FLOW_RELECTION_PROBE',
        priority: 0,
        tag: RenderFlowTag.SCENE,
        stages: []
      }, _temp$e)) || _class$x));

      var _dec$y, _dec2$c, _class$y, _class2$v, _initializer$n;
      var PIPELINE_TYPE = 0;
      var ForwardPipeline = exports('ForwardPipeline', (_dec$y = ccclass('ForwardPipeline'), _dec2$c = type([RenderTextureConfig]), _dec$y(_class$y = (_class2$v = function (_RenderPipeline) {
        _inheritsLoose(ForwardPipeline, _RenderPipeline);

        function ForwardPipeline() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _RenderPipeline.call.apply(_RenderPipeline, [this].concat(args)) || this;
          _this.renderTextures = _initializer$n && _initializer$n();
          _this._postRenderPass = null;
          return _this;
        }

        var _proto = ForwardPipeline.prototype;

        _proto.initialize = function initialize(info) {
          _RenderPipeline.prototype.initialize.call(this, info);

          if (this._flows.length === 0) {
            var shadowFlow = new ShadowFlow();
            shadowFlow.initialize(ShadowFlow.initInfo);

            this._flows.push(shadowFlow);

            var reflectionFlow = new ReflectionProbeFlow();
            reflectionFlow.initialize(ReflectionProbeFlow.initInfo);

            this._flows.push(reflectionFlow);

            var forwardFlow = new ForwardFlow();
            forwardFlow.initialize(ForwardFlow.initInfo);

            this._flows.push(forwardFlow);
          }

          return true;
        };

        _proto.activate = function activate(swapchain) {

          this._macros = {
            CC_PIPELINE_TYPE: PIPELINE_TYPE
          };
          this._pipelineSceneData = new PipelineSceneData();

          if (!_RenderPipeline.prototype.activate.call(this, swapchain)) {
            return false;
          }

          if (!this._activeRenderer(swapchain)) {
            errorID(2402);
            return false;
          }

          return true;
        };

        _proto._ensureEnoughSize = function _ensureEnoughSize(cameras) {
          var newWidth = this._width;
          var newHeight = this._height;

          for (var i = 0; i < cameras.length; ++i) {
            var window = cameras[i].window;
            newWidth = Math.max(window.width, newWidth);
            newHeight = Math.max(window.height, newHeight);
          }

          if (newWidth !== this._width || newHeight !== this._height) {
            this._width = newWidth;
            this._height = newHeight;
          }
        };

        _proto.destroy = function destroy() {
          this._destroyUBOs();

          this._destroyQuadInputAssembler();

          var rpIter = this._renderPasses.values();

          var rpRes = rpIter.next();

          while (!rpRes.done) {
            rpRes.value.destroy();
            rpRes = rpIter.next();
          }

          this._commandBuffers.length = 0;
          return _RenderPipeline.prototype.destroy.call(this);
        };

        _proto._activeRenderer = function _activeRenderer(swapchain) {
          var device = this.device;

          this._commandBuffers.push(device.commandBuffer);

          var shadowMapSampler = this.globalDSManager.pointSampler;

          this._descriptorSet.bindSampler(UNIFORM_SHADOWMAP_BINDING, shadowMapSampler);

          this._descriptorSet.bindTexture(UNIFORM_SHADOWMAP_BINDING, builtinResMgr.get('default-texture').getGFXTexture());

          this._descriptorSet.bindSampler(UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING, shadowMapSampler);

          this._descriptorSet.bindTexture(UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING, builtinResMgr.get('default-texture').getGFXTexture());

          this._descriptorSet.update();

          return true;
        };

        _proto._destroyUBOs = function _destroyUBOs() {
          if (this._descriptorSet) {
            this._descriptorSet.getBuffer(UBOGlobal.BINDING).destroy();

            this._descriptorSet.getBuffer(UBOShadow.BINDING).destroy();

            this._descriptorSet.getBuffer(UBOCamera.BINDING).destroy();

            this._descriptorSet.getTexture(UNIFORM_SHADOWMAP_BINDING).destroy();

            this._descriptorSet.getTexture(UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING).destroy();
          }
        };

        _createClass(ForwardPipeline, [{
          key: "postRenderPass",
          get: function get() {
            return this._postRenderPass;
          }
        }]);

        return ForwardPipeline;
      }(RenderPipeline), (_initializer$n = applyDecoratedInitializer(_class2$v.prototype, "renderTextures", [_dec2$c, serializable], function () {
        return [];
      })), _class2$v)) || _class$y));

      var _dec$z, _dec2$d, _class$z, _class2$w, _initializer$o, _class3$9, _temp$f;
      var colors$3 = [new Color$1(0, 0, 0, 0), new Color$1(0, 0, 0, 0), new Color$1(0, 0, 0, 0)];
      var GbufferStage = exports('GbufferStage', (_dec$z = ccclass('GbufferStage'), _dec2$d = type([RenderQueueDesc]), _dec$z(_class$z = (_class2$w = (_temp$f = _class3$9 = function (_RenderStage) {
        _inheritsLoose(GbufferStage, _RenderStage);

        function GbufferStage() {
          var _this;

          _this = _RenderStage.call(this) || this;
          _this.renderQueues = _initializer$o && _initializer$o();
          _this._renderQueues = [];
          _this._renderArea = new Rect$1();
          _this._batchedQueue = void 0;
          _this._instancedQueue = void 0;
          _this._phaseID = getPhaseID('default');
          _this._batchedQueue = new RenderBatchedQueue();
          _this._instancedQueue = new RenderInstancedQueue();
          return _this;
        }

        var _proto = GbufferStage.prototype;

        _proto.initialize = function initialize(info) {
          _RenderStage.prototype.initialize.call(this, info);

          if (info.renderQueues) {
            this.renderQueues = info.renderQueues;
          }

          return true;
        };

        _proto.activate = function activate(pipeline, flow) {
          _RenderStage.prototype.activate.call(this, pipeline, flow);

          for (var i = 0; i < this.renderQueues.length; i++) {
            this._renderQueues[i] = convertRenderQueue(this.renderQueues[i]);
          }
        };

        _proto.destroy = function destroy() {};

        _proto.render = function render(camera) {
          this._instancedQueue.clear();

          this._batchedQueue.clear();

          var pipeline = this._pipeline;
          var device = pipeline.device;

          this._renderQueues.forEach(renderQueueClearFunc);

          pipeline.generateRenderArea(camera, this._renderArea);
          pipeline.updateQuadVertexData(this._renderArea, camera.window);
          var renderObjects = pipeline.pipelineSceneData.renderObjects;
          var m = 0;
          var p = 0;
          var k = 0;

          for (var i = 0; i < renderObjects.length; ++i) {
            var ro = renderObjects[i];
            var subModels = ro.model.subModels;

            for (m = 0; m < subModels.length; ++m) {
              var subModel = subModels[m];
              var passes = subModel.passes;

              for (p = 0; p < passes.length; ++p) {
                var pass = passes[p];
                if (pass.phase !== this._phaseID) continue;
                var batchingScheme = pass.batchingScheme;

                if (batchingScheme === BatchingSchemes.INSTANCING) {
                  var instancedBuffer = pass.getInstancedBuffer();
                  instancedBuffer.merge(subModel, p);

                  this._instancedQueue.queue.add(instancedBuffer);
                } else if (batchingScheme === BatchingSchemes.VB_MERGING) {
                  var batchedBuffer = pass.getBatchedBuffer();
                  batchedBuffer.merge(subModel, p, ro.model);

                  this._batchedQueue.queue.add(batchedBuffer);
                } else {
                  for (k = 0; k < this._renderQueues.length; k++) {
                    this._renderQueues[k].insertRenderPass(ro, m, p);
                  }
                }
              }
            }
          }

          this._renderQueues.forEach(renderQueueSortFunc);

          var cmdBuff = pipeline.commandBuffers[0];

          this._instancedQueue.uploadBuffers(cmdBuff);

          this._batchedQueue.uploadBuffers(cmdBuff);

          if (camera.clearFlag & ClearFlagBit.COLOR) {
            if (pipeline.pipelineSceneData.isHDR) {
              SRGBToLinear(colors$3[0], camera.clearColor);
            } else {
              colors$3[0].x = camera.clearColor.x;
              colors$3[0].y = camera.clearColor.y;
              colors$3[0].z = camera.clearColor.z;
            }
          }

          colors$3[0].w = camera.clearColor.w;
          var deferredData = pipeline.getPipelineRenderData();
          var framebuffer = deferredData.gbufferFrameBuffer;
          var renderPass = framebuffer.renderPass;
          cmdBuff.beginRenderPass(renderPass, framebuffer, this._renderArea, colors$3, camera.clearDepth, camera.clearStencil);
          cmdBuff.setScissor(pipeline.generateScissor(camera));
          cmdBuff.setViewport(pipeline.generateViewport(camera));
          cmdBuff.bindDescriptorSet(SetIndex.GLOBAL, pipeline.descriptorSet);

          for (var _i = 0; _i < this.renderQueues.length; _i++) {
            this._renderQueues[_i].recordCommandBuffer(device, renderPass, cmdBuff);
          }

          this._instancedQueue.recordCommandBuffer(device, renderPass, cmdBuff);

          this._batchedQueue.recordCommandBuffer(device, renderPass, cmdBuff);

          cmdBuff.endRenderPass();
        };

        return GbufferStage;
      }(RenderStage), _class3$9.initInfo = {
        name: 'GbufferStage',
        priority: DeferredStagePriority.GBUFFER,
        tag: 0,
        renderQueues: [{
          isTransparent: false,
          sortMode: RenderQueueSortMode.FRONT_TO_BACK,
          stages: ['default']
        }, {
          isTransparent: true,
          sortMode: RenderQueueSortMode.BACK_TO_FRONT,
          stages: ['default']
        }]
      }, _temp$f), (_initializer$o = applyDecoratedInitializer(_class2$w.prototype, "renderQueues", [_dec2$d, serializable], function () {
        return [];
      })), _class2$w)) || _class$z));

      var _dec$A, _dec2$e, _dec3$5, _class$A, _class2$x, _initializer$p, _initializer2$g, _class3$a, _temp$g;
      var colors$4 = [new Color$1(0, 0, 0, 1)];
      var LightingStage = exports('LightingStage', (_dec$A = ccclass('LightingStage'), _dec2$e = type(Material), _dec3$5 = type([RenderQueueDesc]), _dec$A(_class$A = (_class2$x = (_temp$g = _class3$a = function (_RenderStage) {
        _inheritsLoose(LightingStage, _RenderStage);

        function LightingStage() {
          var _this;

          _this = _RenderStage.call(this) || this;
          _this._deferredLitsBufs = null;
          _this._maxDeferredLights = UBODeferredLight.LIGHTS_PER_PASS;
          _this._lightMeterScale = 10000.0;
          _this._descriptorSet = null;
          _this._renderArea = new Rect$1();
          _this._uiPhase = void 0;
          _this._deferredMaterial = _initializer$p && _initializer$p();
          _this.renderQueues = _initializer2$g && _initializer2$g();
          _this._phaseID = getPhaseID('default');
          _this._renderQueues = [];
          _this._uiPhase = new UIPhase();
          return _this;
        }

        var _proto = LightingStage.prototype;

        _proto.initialize = function initialize(info) {
          _RenderStage.prototype.initialize.call(this, info);

          return true;
        };

        _proto.gatherLights = function gatherLights(camera) {
          var pipeline = this._pipeline;
          var cmdBuff = pipeline.commandBuffers[0];
          var sphereLights = camera.scene.sphereLights;
          var spotLights = camera.scene.spotLights;

          var _sphere = Sphere.create(0, 0, 0, 1);

          var _vec4Array = new Float32Array(4);

          var exposure = camera.exposure;
          var idx = 0;
          var elementLen = Vec4.length;
          var fieldLen = elementLen * this._maxDeferredLights;

          for (var i = 0; i < sphereLights.length && idx < this._maxDeferredLights; i++, ++idx) {
            var light = sphereLights[i];
            Sphere.set(_sphere, light.position.x, light.position.y, light.position.z, light.range);

            if (intersect.sphereFrustum(_sphere, camera.frustum)) {
              Vec3.toArray(_vec4Array, light.position);
              _vec4Array[3] = 0;

              this._lightBufferData.set(_vec4Array, idx * elementLen);

              Vec3.toArray(_vec4Array, light.color);

              if (light.useColorTemperature) {
                var tempRGB = light.colorTemperatureRGB;
                _vec4Array[0] *= tempRGB.x;
                _vec4Array[1] *= tempRGB.y;
                _vec4Array[2] *= tempRGB.z;
              }

              if (pipeline.pipelineSceneData.isHDR) {
                _vec4Array[3] = light.luminance * exposure * this._lightMeterScale;
              } else {
                _vec4Array[3] = light.luminance;
              }

              this._lightBufferData.set(_vec4Array, idx * elementLen + fieldLen * 1);

              _vec4Array[0] = light.size;
              _vec4Array[1] = light.range;
              _vec4Array[2] = 0.0;

              this._lightBufferData.set(_vec4Array, idx * elementLen + fieldLen * 2);
            }
          }

          for (var _i = 0; _i < spotLights.length && idx < this._maxDeferredLights; _i++, ++idx) {
            var _light = spotLights[_i];
            Sphere.set(_sphere, _light.position.x, _light.position.y, _light.position.z, _light.range);

            if (intersect.sphereFrustum(_sphere, camera.frustum)) {
              Vec3.toArray(_vec4Array, _light.position);
              _vec4Array[3] = 1;

              this._lightBufferData.set(_vec4Array, idx * elementLen + fieldLen * 0);

              Vec3.toArray(_vec4Array, _light.color);

              if (_light.useColorTemperature) {
                var _tempRGB = _light.colorTemperatureRGB;
                _vec4Array[0] *= _tempRGB.x;
                _vec4Array[1] *= _tempRGB.y;
                _vec4Array[2] *= _tempRGB.z;
              }

              if (pipeline.pipelineSceneData.isHDR) {
                _vec4Array[3] = _light.luminance * exposure * this._lightMeterScale;
              } else {
                _vec4Array[3] = _light.luminance;
              }

              this._lightBufferData.set(_vec4Array, idx * elementLen + fieldLen * 1);

              _vec4Array[0] = _light.size;
              _vec4Array[1] = _light.range;
              _vec4Array[2] = _light.spotAngle;

              this._lightBufferData.set(_vec4Array, idx * elementLen + fieldLen * 2);

              Vec3.toArray(_vec4Array, _light.direction);

              this._lightBufferData.set(_vec4Array, idx * elementLen + fieldLen * 3);
            }
          }

          var offset = fieldLen * 3 + 3;

          this._lightBufferData.set([idx], offset);

          cmdBuff.updateBuffer(this._deferredLitsBufs, this._lightBufferData);
        };

        _proto._createStageDescriptor = function _createStageDescriptor(pass) {
          var device = this._pipeline.device;
          var totalSize = Float32Array.BYTES_PER_ELEMENT * 4 * 4 * this._maxDeferredLights;
          totalSize = Math.ceil(totalSize / device.capabilities.uboOffsetAlignment) * device.capabilities.uboOffsetAlignment;
          this._deferredLitsBufs = device.createBuffer(new BufferInfo(BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.HOST | MemoryUsageBit.DEVICE, totalSize, device.capabilities.uboOffsetAlignment));
          var deferredLitsBufView = device.createBuffer(new BufferViewInfo(this._deferredLitsBufs, 0, totalSize));
          this._lightBufferData = new Float32Array(totalSize / Float32Array.BYTES_PER_ELEMENT);
          this._descriptorSet = device.createDescriptorSet(new DescriptorSetInfo(pass.localSetLayout));

          this._descriptorSet.bindBuffer(UBOForwardLight.BINDING, deferredLitsBufView);

          var _localUBO = device.createBuffer(new BufferInfo(BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, UBOLocal.SIZE, UBOLocal.SIZE));

          this._descriptorSet.bindBuffer(UBOLocal.BINDING, _localUBO);
        };

        _proto.activate = function activate(pipeline, flow) {
          _RenderStage.prototype.activate.call(this, pipeline, flow);

          this._uiPhase.activate(pipeline);

          for (var i = 0; i < this.renderQueues.length; i++) {
            this._renderQueues[i] = convertRenderQueue(this.renderQueues[i]);
          }

          this._planarQueue = new PlanarShadowQueue(this._pipeline);

          if (this._deferredMaterial) {
            pipeline.pipelineSceneData.deferredLightingMaterial = this._deferredMaterial;
          }
        };

        _proto.destroy = function destroy() {
          var _this$_deferredLitsBu;

          (_this$_deferredLitsBu = this._deferredLitsBufs) === null || _this$_deferredLitsBu === void 0 ? void 0 : _this$_deferredLitsBu.destroy();
          this._deferredLitsBufs = null;
          this._descriptorSet = null;
        };

        _proto.render = function render(camera) {
          var _camera$geometryRende;

          var pipeline = this._pipeline;
          var device = pipeline.device;
          var cmdBuff = pipeline.commandBuffers[0];
          var sceneData = pipeline.pipelineSceneData;
          var renderObjects = sceneData.renderObjects;

          this._planarQueue.gatherShadowPasses(camera, cmdBuff);

          pipeline.generateRenderArea(camera, this._renderArea);
          var deferredData = pipeline.getPipelineRenderData();
          var lightingMat = sceneData.deferredLightingMaterial;
          var pass = lightingMat.passes[0];
          var shader = pass.getShaderVariant();

          for (var i = 0; i < 3; ++i) {
            pass.descriptorSet.bindTexture(i, deferredData.gbufferRenderTargets[i]);
            pass.descriptorSet.bindSampler(i, deferredData.sampler);
          }

          pass.descriptorSet.bindTexture(3, deferredData.outputDepth);
          pass.descriptorSet.bindSampler(3, deferredData.sampler);
          pass.descriptorSet.update();

          if (!this._descriptorSet) {
            this._createStageDescriptor(pass);
          }

          this.gatherLights(camera);

          if (camera.clearFlag & ClearFlagBit.COLOR) {
            colors$4[0].x = camera.clearColor.x;
            colors$4[0].y = camera.clearColor.y;
            colors$4[0].z = camera.clearColor.z;
          }

          colors$4[0].w = 0;
          var framebuffer = deferredData.outputFrameBuffer;
          var renderPass = framebuffer.renderPass;
          pipeline.pipelineUBO.updateShadowUBO(camera);
          cmdBuff.beginRenderPass(renderPass, framebuffer, this._renderArea, colors$4, camera.clearDepth, camera.clearStencil);
          cmdBuff.setScissor(pipeline.generateScissor(camera));
          cmdBuff.setViewport(pipeline.generateViewport(camera));
          cmdBuff.bindDescriptorSet(SetIndex.GLOBAL, pipeline.descriptorSet);
          var inputAssembler = pipeline.quadIAOffscreen;
          var pso = null;

          if (pass != null && shader != null && inputAssembler != null) {
            pso = PipelineStateManager.getOrCreatePipelineState(device, pass, shader, renderPass, inputAssembler);
          }

          if (pso != null) {
            this._descriptorSet.update();

            cmdBuff.bindPipelineState(pso);
            cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, pass.descriptorSet);
            cmdBuff.bindDescriptorSet(SetIndex.LOCAL, this._descriptorSet);
            cmdBuff.bindInputAssembler(inputAssembler);
            cmdBuff.draw(inputAssembler);
          }

          this._renderQueues.forEach(renderQueueClearFunc);

          var m = 0;
          var p = 0;
          var k = 0;

          for (var _i2 = 0; _i2 < renderObjects.length; ++_i2) {
            var ro = renderObjects[_i2];
            var subModels = ro.model.subModels;

            for (m = 0; m < subModels.length; ++m) {
              var subModel = subModels[m];
              var passes = subModel.passes;

              for (p = 0; p < passes.length; ++p) {
                var _pass = passes[p];
                if (_pass.phase !== this._phaseID) continue;

                for (k = 0; k < this._renderQueues.length; k++) {
                  this._renderQueues[k].insertRenderPass(ro, m, p);
                }
              }
            }
          }

          if (renderObjects.length > 0) {
            this._renderQueues.forEach(renderQueueSortFunc);

            for (var _i3 = 0; _i3 < this._renderQueues.length; _i3++) {
              this._renderQueues[_i3].recordCommandBuffer(device, renderPass, cmdBuff);
            }

            this._planarQueue.recordCommandBuffer(device, renderPass, cmdBuff);
          }

          (_camera$geometryRende = camera.geometryRenderer) === null || _camera$geometryRende === void 0 ? void 0 : _camera$geometryRende.render(renderPass, cmdBuff, pipeline.pipelineSceneData);

          this._uiPhase.render(camera, renderPass);

          cmdBuff.endRenderPass();
        };

        return LightingStage;
      }(RenderStage), _class3$a.initInfo = {
        name: 'LightingStage',
        priority: DeferredStagePriority.LIGHTING,
        tag: 0
      }, _temp$g), (_initializer$p = applyDecoratedInitializer(_class2$x.prototype, "_deferredMaterial", [_dec2$e, serializable], function () {
        return null;
      }), _initializer2$g = applyDecoratedInitializer(_class2$x.prototype, "renderQueues", [_dec3$5, serializable], function () {
        return [];
      })), _class2$x)) || _class$A));

      var _dec$B, _dec2$f, _dec3$6, _class$B, _class2$y, _initializer$q, _initializer2$h, _class3$b, _temp$h;
      var colors$5 = [new Color$1(0, 0, 0, 1)];
      var PostProcessStage = exports('PostProcessStage', (_dec$B = ccclass('PostProcessStage'), _dec2$f = type(Material), _dec3$6 = type([RenderQueueDesc]), _dec$B(_class$B = (_class2$y = (_temp$h = _class3$b = function (_RenderStage) {
        _inheritsLoose(PostProcessStage, _RenderStage);

        function PostProcessStage() {
          var _this;

          _this = _RenderStage.call(this) || this;
          _this._postProcessMaterial = _initializer$q && _initializer$q();
          _this.renderQueues = _initializer2$h && _initializer2$h();
          _this._renderArea = new Rect$1();
          _this._stageDesc = void 0;
          _this._localUBO = void 0;
          _this._uiPhase = new UIPhase();
          return _this;
        }

        var _proto = PostProcessStage.prototype;

        _proto.initialize = function initialize(info) {
          _RenderStage.prototype.initialize.call(this, info);

          return true;
        };

        _proto.activate = function activate(pipeline, flow) {
          _RenderStage.prototype.activate.call(this, pipeline, flow);

          if (this._postProcessMaterial) {
            pipeline.pipelineSceneData.postprocessMaterial = this._postProcessMaterial;
          }

          this._uiPhase.activate(pipeline);
        };

        _proto.destroy = function destroy() {};

        _proto.render = function render(camera) {
          var pipeline = this._pipeline;
          var device = pipeline.device;
          var sceneData = pipeline.pipelineSceneData;
          var cmdBuff = pipeline.commandBuffers[0];
          pipeline.pipelineUBO.updateCameraUBO(camera);
          var vp = camera.viewport;
          this._renderArea.x = vp.x * camera.window.width;
          this._renderArea.y = vp.y * camera.window.height;
          this._renderArea.width = vp.width * camera.window.width;
          this._renderArea.height = vp.height * camera.window.height;
          var renderData = pipeline.getPipelineRenderData();
          var framebuffer = camera.window.framebuffer;
          var renderPass = pipeline.getRenderPass(camera.clearFlag, framebuffer);

          if (camera.clearFlag & ClearFlagBit.COLOR) {
            colors$5[0].x = camera.clearColor.x;
            colors$5[0].y = camera.clearColor.y;
            colors$5[0].z = camera.clearColor.z;
          }

          colors$5[0].w = camera.clearColor.w;
          cmdBuff.beginRenderPass(renderPass, framebuffer, this._renderArea, colors$5, camera.clearDepth, camera.clearStencil);
          cmdBuff.bindDescriptorSet(SetIndex.GLOBAL, pipeline.descriptorSet);
          var builtinPostProcess = sceneData.postprocessMaterial;
          var pass = builtinPostProcess.passes[0];
          var shader = pass.getShaderVariant();

          if (pipeline.bloomEnabled) {
            pass.descriptorSet.bindTexture(0, renderData.bloom.combineTex);
          } else {
            pass.descriptorSet.bindTexture(0, renderData.outputRenderTargets[0]);
          }

          pass.descriptorSet.bindSampler(0, renderData.sampler);
          pass.descriptorSet.update();
          var inputAssembler = camera.window.swapchain ? pipeline.quadIAOnscreen : pipeline.quadIAOffscreen;
          var pso = null;

          if (pass != null && shader != null && inputAssembler != null) {
            pso = PipelineStateManager.getOrCreatePipelineState(device, pass, shader, renderPass, inputAssembler);
          }

          var renderObjects = pipeline.pipelineSceneData.renderObjects;

          if (pso != null && renderObjects.length > 0) {
            if (!this._stageDesc) {
              this._stageDesc = device.createDescriptorSet(new DescriptorSetInfo(pass.localSetLayout));
              this._localUBO = device.createBuffer(new BufferInfo(BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, UBOLocal.SIZE, UBOLocal.SIZE));

              this._stageDesc.bindBuffer(UBOLocal.BINDING, this._localUBO);
            }

            this._stageDesc.update();

            cmdBuff.bindPipelineState(pso);
            cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, pass.descriptorSet);
            cmdBuff.bindDescriptorSet(SetIndex.LOCAL, this._stageDesc);
            cmdBuff.bindInputAssembler(inputAssembler);
            cmdBuff.draw(inputAssembler);
          }

          this._uiPhase.render(camera, renderPass);

          renderProfiler(device, renderPass, cmdBuff, pipeline.profiler, camera);
          cmdBuff.endRenderPass();
        };

        return PostProcessStage;
      }(RenderStage), _class3$b.initInfo = {
        name: 'PostProcessStage',
        priority: CommonStagePriority.POST_PROCESS,
        tag: 0
      }, _temp$h), (_initializer$q = applyDecoratedInitializer(_class2$y.prototype, "_postProcessMaterial", [_dec2$f, serializable], function () {
        return null;
      }), _initializer2$h = applyDecoratedInitializer(_class2$y.prototype, "renderQueues", [_dec3$6, serializable], function () {
        return [];
      })), _class2$y)) || _class$B));

      var AntiAliasing$1;

      (function (AntiAliasing) {
        AntiAliasing[AntiAliasing["NONE"] = 0] = "NONE";
        AntiAliasing[AntiAliasing["FXAA"] = 1] = "FXAA";
      })(AntiAliasing$1 || (AntiAliasing$1 = {}));

      var BLOOM_PREFILTERPASS_INDEX = 0;
      var BLOOM_DOWNSAMPLEPASS_INDEX = 1;
      var BLOOM_UPSAMPLEPASS_INDEX = BLOOM_DOWNSAMPLEPASS_INDEX + MAX_BLOOM_FILTER_PASS_NUM;
      var BLOOM_COMBINEPASS_INDEX = BLOOM_UPSAMPLEPASS_INDEX + MAX_BLOOM_FILTER_PASS_NUM;
      var DeferredPipelineSceneData = function (_PipelineSceneData) {
        _inheritsLoose(DeferredPipelineSceneData, _PipelineSceneData);

        function DeferredPipelineSceneData() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _PipelineSceneData.call.apply(_PipelineSceneData, [this].concat(args)) || this;
          _this._antiAliasing = AntiAliasing$1.NONE;
          return _this;
        }

        var _proto = DeferredPipelineSceneData.prototype;

        _proto.updatePipelineSceneData = function updatePipelineSceneData() {
          this.updatePipelinePassInfo();
        };

        _proto.updateBloomPass = function updateBloomPass() {
          if (!this._bloomMaterial) return;
          var prefilterPass = this._bloomMaterial.passes[BLOOM_PREFILTERPASS_INDEX];
          prefilterPass.beginChangeStatesSilently();
          prefilterPass.tryCompile();
          prefilterPass.endChangeStatesSilently();

          for (var i = 0; i < MAX_BLOOM_FILTER_PASS_NUM; ++i) {
            var downsamplePass = this._bloomMaterial.passes[BLOOM_DOWNSAMPLEPASS_INDEX + i];
            downsamplePass.beginChangeStatesSilently();
            downsamplePass.tryCompile();
            downsamplePass.endChangeStatesSilently();
            var upsamplePass = this._bloomMaterial.passes[BLOOM_UPSAMPLEPASS_INDEX + i];
            upsamplePass.beginChangeStatesSilently();
            upsamplePass.tryCompile();
            upsamplePass.endChangeStatesSilently();
          }

          var combinePass = this._bloomMaterial.passes[BLOOM_COMBINEPASS_INDEX];
          combinePass.beginChangeStatesSilently();
          combinePass.tryCompile();
          combinePass.endChangeStatesSilently();
        };

        _proto.updatePostProcessPass = function updatePostProcessPass() {
          if (!this.postprocessMaterial) return;
          var passPost = this.postprocessMaterial.passes[0];
          passPost.beginChangeStatesSilently();
          passPost.tryCompile();
          passPost.endChangeStatesSilently();
        };

        _proto.initPipelinePassInfo = function initPipelinePassInfo() {
          var deferredMat = new Material();
          deferredMat._uuid = 'builtin-deferred-material';
          deferredMat.initialize({
            effectName: 'pipeline/deferred-lighting'
          });

          for (var i = 0; i < deferredMat.passes.length; ++i) {
            deferredMat.passes[i].tryCompile();
          }

          this._deferredLightingMaterial = deferredMat;
          var bloomMat = new Material();
          bloomMat._uuid = 'builtin-bloom-material';
          bloomMat.initialize({
            effectName: 'pipeline/bloom'
          });

          for (var _i = 0; _i < bloomMat.passes.length; ++_i) {
            bloomMat.passes[_i].tryCompile();
          }

          this._bloomMaterial = bloomMat;
          var postMat = new Material();
          postMat._uuid = 'builtin-post-process-material';

          if (macro.ENABLE_ANTIALIAS_FXAA) {
            this._antiAliasing = AntiAliasing$1.FXAA;
          }

          postMat.initialize({
            effectName: 'pipeline/post-process',
            defines: {
              ANTIALIAS_TYPE: this._antiAliasing
            }
          });

          for (var _i2 = 0; _i2 < postMat.passes.length; ++_i2) {
            postMat.passes[_i2].tryCompile();
          }

          this._postprocessMaterial = postMat;
          this.updatePipelinePassInfo();
        };

        _proto.updatePipelinePassInfo = function updatePipelinePassInfo() {
          this.updateBloomPass();
          this.updatePostProcessPass();
          this.updateDeferredPassInfo();
        };

        _proto.activate = function activate(device) {
          _PipelineSceneData.prototype.activate.call(this, device);

          this.initPipelinePassInfo();
          return true;
        };

        _proto.updateDeferredPassInfo = function updateDeferredPassInfo() {
          this.updateDeferredLightPass();
        };

        _proto.updateDeferredLightPass = function updateDeferredLightPass() {
          if (!this._deferredLightingMaterial) return;
          legacyCC.director.root.pipeline.macros.CC_RECEIVE_SHADOW = 1;
          var passLit = this._deferredLightingMaterial.passes[0];
          passLit.beginChangeStatesSilently();
          passLit.tryCompile();
          passLit.endChangeStatesSilently();
        };

        _createClass(DeferredPipelineSceneData, [{
          key: "antiAliasing",
          get: function get() {
            return this._antiAliasing;
          },
          set: function set(value) {
            this._antiAliasing = value;

            if (this._postprocessMaterial) {
              var defines = this._postprocessMaterial.passes[0].defines;
              Object.assign(defines, {
                ANTIALIAS_TYPE: value
              });
              var renderMat = new Material();
              renderMat.initialize({
                effectAsset: this._postprocessMaterial.effectAsset,
                defines: defines
              });

              for (var i = 0; i < renderMat.passes.length; ++i) {
                renderMat.passes[i].tryCompile();
              }

              this._postprocessMaterial = renderMat;
            }
          }
        }, {
          key: "bloomMaterial",
          get: function get() {
            return this._bloomMaterial;
          },
          set: function set(mat) {
            if (this._bloomMaterial === mat || !mat) return;
            this._bloomMaterial = mat;
            this.updatePipelinePassInfo();
          }
        }, {
          key: "postprocessMaterial",
          get: function get() {
            return this._postprocessMaterial;
          },
          set: function set(mat) {
            if (this._postprocessMaterial === mat || !mat) return;
            this._postprocessMaterial = mat;
            this.updatePipelinePassInfo();
          }
        }, {
          key: "deferredLightingMaterial",
          get: function get() {
            return this._deferredLightingMaterial;
          },
          set: function set(mat) {
            if (this._deferredLightingMaterial === mat || !mat) return;
            this._deferredLightingMaterial = mat;
            this.updatePipelinePassInfo();
          }
        }]);

        return DeferredPipelineSceneData;
      }(PipelineSceneData);

      var _dec$C, _dec2$g, _class$C, _class2$z, _initializer$r, _class3$c, _temp$i;
      var colors$6 = [new Color$1(0, 0, 0, 1)];

      var UBOBloom = function UBOBloom() {};

      UBOBloom.TEXTURE_SIZE_OFFSET = 0;
      UBOBloom.COUNT = UBOBloom.TEXTURE_SIZE_OFFSET + 4;
      UBOBloom.SIZE = UBOBloom.COUNT * 4;
      var BloomStage = exports('BloomStage', (_dec$C = ccclass('BloomStage'), _dec2$g = type(Material), _dec$C(_class$C = (_class2$z = (_temp$i = _class3$c = function (_RenderStage) {
        _inheritsLoose(BloomStage, _RenderStage);

        function BloomStage() {
          var _this;

          _this = _RenderStage.call(this) || this;
          _this.threshold = 1.0;
          _this.intensity = 0.8;
          _this.iterations = 2;
          _this._bloomMaterial = _initializer$r && _initializer$r();
          _this._renderArea = new Rect$1();
          _this._bloomUBO = [];
          return _this;
        }

        var _proto = BloomStage.prototype;

        _proto.initialize = function initialize(info) {
          _RenderStage.prototype.initialize.call(this, info);

          return true;
        };

        _proto.activate = function activate(pipeline, flow) {
          _RenderStage.prototype.activate.call(this, pipeline, flow);

          if (this._bloomMaterial) {
            pipeline.pipelineSceneData.bloomMaterial = this._bloomMaterial;
          }
        };

        _proto.destroy = function destroy() {};

        _proto.render = function render(camera) {
          var _camera$window;

          var pipeline = this._pipeline;
          pipeline.generateBloomRenderData();

          if (!((_camera$window = camera.window) !== null && _camera$window !== void 0 && _camera$window.swapchain) && !pipeline.macros.CC_PIPELINE_TYPE) {
            return;
          }

          if (!pipeline.bloomEnabled || pipeline.pipelineSceneData.renderObjects.length === 0) return;

          if (this._bloomUBO.length === 0) {
            var passNumber = MAX_BLOOM_FILTER_PASS_NUM * 2 + 2;

            for (var i = 0; i < passNumber; ++i) {
              this._bloomUBO[i] = pipeline.device.createBuffer(new BufferInfo(BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.HOST | MemoryUsageBit.DEVICE, UBOBloom.SIZE, UBOBloom.SIZE));
            }
          }

          if (camera.clearFlag & ClearFlagBit.COLOR) {
            colors$6[0].x = camera.clearColor.x;
            colors$6[0].y = camera.clearColor.y;
            colors$6[0].z = camera.clearColor.z;
          }

          colors$6[0].w = camera.clearColor.w;

          this._prefilterPass(camera, pipeline);

          this._downsamplePass(camera, pipeline);

          this._upsamplePass(camera, pipeline);

          this._combinePass(camera, pipeline);
        };

        _proto._prefilterPass = function _prefilterPass(camera, pipeline) {
          pipeline.generateRenderArea(camera, this._renderArea);
          this._renderArea.width >>= 1;
          this._renderArea.height >>= 1;
          var cmdBuff = pipeline.commandBuffers[0];
          var sceneData = pipeline.pipelineSceneData;
          var builtinBloomProcess = sceneData.bloomMaterial;
          var pass = builtinBloomProcess.passes[BLOOM_PREFILTERPASS_INDEX];
          var renderData = pipeline.getPipelineRenderData();
          var bloomData = renderData.bloom;
          var textureSize = new Float32Array(UBOBloom.COUNT);
          textureSize[UBOBloom.TEXTURE_SIZE_OFFSET + 2] = this.threshold;
          cmdBuff.updateBuffer(this._bloomUBO[0], textureSize);
          cmdBuff.beginRenderPass(bloomData.renderPass, bloomData.prefilterFramebuffer, this._renderArea, colors$6, 0, 0);
          cmdBuff.bindDescriptorSet(SetIndex.GLOBAL, pipeline.descriptorSet);
          pass.descriptorSet.bindBuffer(0, this._bloomUBO[0]);
          pass.descriptorSet.bindTexture(1, renderData.outputRenderTargets[0]);
          pass.descriptorSet.bindSampler(1, bloomData.sampler);
          pass.descriptorSet.update();
          cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, pass.descriptorSet);
          var inputAssembler = camera.window.swapchain ? pipeline.quadIAOffscreen : pipeline.quadIAOnscreen;
          var pso = null;
          var shader = pass.getShaderVariant();

          if (pass != null && shader != null && inputAssembler != null) {
            pso = PipelineStateManager.getOrCreatePipelineState(pipeline.device, pass, shader, bloomData.renderPass, inputAssembler);
          }

          if (pso != null) {
            cmdBuff.bindPipelineState(pso);
            cmdBuff.bindInputAssembler(inputAssembler);
            cmdBuff.draw(inputAssembler);
          }

          cmdBuff.endRenderPass();
        };

        _proto._downsamplePass = function _downsamplePass(camera, pipeline) {
          pipeline.generateRenderArea(camera, this._renderArea);
          this._renderArea.width >>= 1;
          this._renderArea.height >>= 1;
          var cmdBuff = pipeline.commandBuffers[0];
          var sceneData = pipeline.pipelineSceneData;
          var builtinBloomProcess = sceneData.bloomMaterial;
          var bloomData = pipeline.getPipelineRenderData().bloom;
          var textureSize = new Float32Array(UBOBloom.COUNT);

          for (var i = 0; i < this.iterations; ++i) {
            textureSize[UBOBloom.TEXTURE_SIZE_OFFSET + 0] = this._renderArea.width;
            textureSize[UBOBloom.TEXTURE_SIZE_OFFSET + 1] = this._renderArea.height;
            cmdBuff.updateBuffer(this._bloomUBO[i + 1], textureSize);
            this._renderArea.width >>= 1;
            this._renderArea.height >>= 1;
            cmdBuff.beginRenderPass(bloomData.renderPass, bloomData.downsampleFramebuffers[i], this._renderArea, colors$6, 0, 0);
            var pass = builtinBloomProcess.passes[BLOOM_DOWNSAMPLEPASS_INDEX + i];
            var shader = pass.getShaderVariant();
            pass.descriptorSet.bindBuffer(0, this._bloomUBO[i + 1]);

            if (i === 0) {
              pass.descriptorSet.bindTexture(1, bloomData.prefiterTex);
            } else {
              pass.descriptorSet.bindTexture(1, bloomData.downsampleTexs[i - 1]);
            }

            pass.descriptorSet.bindSampler(1, bloomData.sampler);
            pass.descriptorSet.update();
            cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, pass.descriptorSet);
            var inputAssembler = camera.window.swapchain ? pipeline.quadIAOffscreen : pipeline.quadIAOnscreen;
            var pso = null;

            if (pass != null && shader != null && inputAssembler != null) {
              pso = PipelineStateManager.getOrCreatePipelineState(pipeline.device, pass, shader, bloomData.renderPass, inputAssembler);
            }

            if (pso != null) {
              cmdBuff.bindPipelineState(pso);
              cmdBuff.bindInputAssembler(inputAssembler);
              cmdBuff.draw(inputAssembler);
            }

            cmdBuff.endRenderPass();
          }
        };

        _proto._upsamplePass = function _upsamplePass(camera, pipeline) {
          var bloomData = pipeline.getPipelineRenderData().bloom;
          pipeline.generateRenderArea(camera, this._renderArea);
          this._renderArea.width >>= this.iterations + 1;
          this._renderArea.height >>= this.iterations + 1;
          var cmdBuff = pipeline.commandBuffers[0];
          var sceneData = pipeline.pipelineSceneData;
          var builtinBloomProcess = sceneData.bloomMaterial;
          var textureSize = new Float32Array(UBOBloom.COUNT);

          for (var i = 0; i < this.iterations; ++i) {
            var index = i + MAX_BLOOM_FILTER_PASS_NUM + 1;
            textureSize[UBOBloom.TEXTURE_SIZE_OFFSET + 0] = this._renderArea.width;
            textureSize[UBOBloom.TEXTURE_SIZE_OFFSET + 1] = this._renderArea.height;
            cmdBuff.updateBuffer(this._bloomUBO[index], textureSize);
            this._renderArea.width <<= 1;
            this._renderArea.height <<= 1;
            cmdBuff.beginRenderPass(bloomData.renderPass, bloomData.upsampleFramebuffers[this.iterations - 1 - i], this._renderArea, colors$6, 0, 0);
            var pass = builtinBloomProcess.passes[BLOOM_UPSAMPLEPASS_INDEX + i];
            var shader = pass.getShaderVariant();
            pass.descriptorSet.bindBuffer(0, this._bloomUBO[index]);

            if (i === 0) {
              pass.descriptorSet.bindTexture(1, bloomData.downsampleTexs[this.iterations - 1]);
            } else {
              pass.descriptorSet.bindTexture(1, bloomData.upsampleTexs[this.iterations - i]);
            }

            pass.descriptorSet.bindSampler(1, bloomData.sampler);
            pass.descriptorSet.update();
            cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, pass.descriptorSet);
            var inputAssembler = camera.window.swapchain ? pipeline.quadIAOffscreen : pipeline.quadIAOnscreen;
            var pso = null;

            if (pass != null && shader != null && inputAssembler != null) {
              pso = PipelineStateManager.getOrCreatePipelineState(pipeline.device, pass, shader, bloomData.renderPass, inputAssembler);
            }

            if (pso != null) {
              cmdBuff.bindPipelineState(pso);
              cmdBuff.bindInputAssembler(inputAssembler);
              cmdBuff.draw(inputAssembler);
            }

            cmdBuff.endRenderPass();
          }
        };

        _proto._combinePass = function _combinePass(camera, pipeline) {
          pipeline.generateRenderArea(camera, this._renderArea);
          var cmdBuff = pipeline.commandBuffers[0];
          var sceneData = pipeline.pipelineSceneData;
          var builtinBloomProcess = sceneData.bloomMaterial;
          var deferredData = pipeline.getPipelineRenderData();
          var bloomData = deferredData.bloom;
          var uboIndex = MAX_BLOOM_FILTER_PASS_NUM * 2 + 1;
          var textureSize = new Float32Array(UBOBloom.COUNT);
          textureSize[UBOBloom.TEXTURE_SIZE_OFFSET + 3] = this.intensity;
          cmdBuff.updateBuffer(this._bloomUBO[uboIndex], textureSize);
          cmdBuff.beginRenderPass(bloomData.renderPass, bloomData.combineFramebuffer, this._renderArea, colors$6, 0, 0);
          cmdBuff.bindDescriptorSet(SetIndex.GLOBAL, pipeline.descriptorSet);
          var pass = builtinBloomProcess.passes[BLOOM_COMBINEPASS_INDEX];
          pass.descriptorSet.bindBuffer(0, this._bloomUBO[uboIndex]);
          pass.descriptorSet.bindTexture(1, deferredData.outputRenderTargets[0]);
          pass.descriptorSet.bindTexture(2, bloomData.upsampleTexs[0]);
          pass.descriptorSet.bindSampler(1, bloomData.sampler);
          pass.descriptorSet.bindSampler(2, bloomData.sampler);
          pass.descriptorSet.update();
          cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, pass.descriptorSet);
          var inputAssembler = camera.window.swapchain ? pipeline.quadIAOffscreen : pipeline.quadIAOnscreen;
          var pso = null;
          var shader = pass.getShaderVariant();

          if (pass != null && shader != null && inputAssembler != null) {
            pso = PipelineStateManager.getOrCreatePipelineState(pipeline.device, pass, shader, bloomData.renderPass, inputAssembler);
          }

          if (pso != null) {
            cmdBuff.bindPipelineState(pso);
            cmdBuff.bindInputAssembler(inputAssembler);
            cmdBuff.draw(inputAssembler);
          }

          cmdBuff.endRenderPass();
        };

        return BloomStage;
      }(RenderStage), _class3$c.initInfo = {
        name: 'BloomStage',
        priority: CommonStagePriority.BLOOM,
        tag: 0
      }, _temp$i), (_initializer$r = applyDecoratedInitializer(_class2$z.prototype, "_bloomMaterial", [_dec2$g, serializable], function () {
        return null;
      })), _class2$z)) || _class$C));

      var _dec$D, _class$D, _class2$A, _temp$j;
      var MainFlow = exports('MainFlow', (_dec$D = ccclass('MainFlow'), _dec$D(_class$D = (_temp$j = _class2$A = function (_RenderFlow) {
        _inheritsLoose(MainFlow, _RenderFlow);

        function MainFlow() {
          return _RenderFlow.apply(this, arguments) || this;
        }

        var _proto = MainFlow.prototype;

        _proto.initialize = function initialize(info) {
          _RenderFlow.prototype.initialize.call(this, info);

          if (this._stages.length === 0) {
            var gbufferStage = new GbufferStage();
            gbufferStage.initialize(GbufferStage.initInfo);

            this._stages.push(gbufferStage);

            var lightingStage = new LightingStage();
            lightingStage.initialize(LightingStage.initInfo);

            this._stages.push(lightingStage);

            var bloomStage = new BloomStage();
            bloomStage.initialize(BloomStage.initInfo);

            this._stages.push(bloomStage);

            var postProcessStage = new PostProcessStage();
            postProcessStage.initialize(PostProcessStage.initInfo);

            this._stages.push(postProcessStage);
          }

          return true;
        };

        _proto.activate = function activate(pipeline) {
          _RenderFlow.prototype.activate.call(this, pipeline);
        };

        _proto.render = function render(camera) {
          _RenderFlow.prototype.render.call(this, camera);
        };

        _proto.destroy = function destroy() {
          _RenderFlow.prototype.destroy.call(this);
        };

        return MainFlow;
      }(RenderFlow), _class2$A.initInfo = {
        name: PIPELINE_FLOW_MAIN,
        priority: DeferredFlowPriority.MAIN,
        stages: []
      }, _temp$j)) || _class$D));

      var _dec$E, _dec2$h, _class$E, _class2$B, _initializer$s;
      var PIPELINE_TYPE$1 = 1;
      var DeferredRenderData = function (_PipelineRenderData) {
        _inheritsLoose(DeferredRenderData, _PipelineRenderData);

        function DeferredRenderData() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _PipelineRenderData.call.apply(_PipelineRenderData, [this].concat(args)) || this;
          _this.gbufferFrameBuffer = null;
          _this.gbufferRenderTargets = [];
          return _this;
        }

        return DeferredRenderData;
      }(PipelineRenderData);
      var DeferredPipeline = exports('DeferredPipeline', (_dec$E = ccclass('DeferredPipeline'), _dec2$h = type([RenderTextureConfig]), _dec$E(_class$E = (_class2$B = function (_RenderPipeline) {
        _inheritsLoose(DeferredPipeline, _RenderPipeline);

        function DeferredPipeline() {
          var _this2;

          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }

          _this2 = _RenderPipeline.call.apply(_RenderPipeline, [this].concat(args)) || this;
          _this2._gbufferRenderPass = null;
          _this2._lightingRenderPass = null;
          _this2.renderTextures = _initializer$s && _initializer$s();
          return _this2;
        }

        var _proto = DeferredPipeline.prototype;

        _proto.initialize = function initialize(info) {
          _RenderPipeline.prototype.initialize.call(this, info);

          if (this._flows.length === 0) {
            var shadowFlow = new ShadowFlow();
            shadowFlow.initialize(ShadowFlow.initInfo);

            this._flows.push(shadowFlow);

            var mainFlow = new MainFlow();
            mainFlow.initialize(MainFlow.initInfo);

            this._flows.push(mainFlow);
          }

          return true;
        };

        _proto.activate = function activate(swapchain) {

          this._macros = {
            CC_PIPELINE_TYPE: PIPELINE_TYPE$1
          };
          this._pipelineSceneData = new DeferredPipelineSceneData();

          if (!_RenderPipeline.prototype.activate.call(this, swapchain)) {
            return false;
          }

          if (!this._activeRenderer(swapchain)) {
            errorID(2402);
            return false;
          }

          return true;
        };

        _proto.destroy = function destroy() {
          this._destroyUBOs();

          this._destroyQuadInputAssembler();

          this._destroyDeferredData();

          var rpIter = this._renderPasses.values();

          var rpRes = rpIter.next();

          while (!rpRes.done) {
            rpRes.value.destroy();
            rpRes = rpIter.next();
          }

          this._commandBuffers.length = 0;
          return _RenderPipeline.prototype.destroy.call(this);
        };

        _proto.onGlobalPipelineStateChanged = function onGlobalPipelineStateChanged() {
          this.pipelineSceneData.updatePipelineSceneData();
        };

        _proto.getPipelineRenderData = function getPipelineRenderData() {
          if (!this._pipelineRenderData) {
            this._generateDeferredRenderData();
          }

          return this._pipelineRenderData;
        };

        _proto._activeRenderer = function _activeRenderer(swapchain) {
          var device = this.device;

          this._commandBuffers.push(device.commandBuffer);

          var sampler = this.globalDSManager.pointSampler;

          this._descriptorSet.bindSampler(UNIFORM_SHADOWMAP_BINDING, sampler);

          this._descriptorSet.bindTexture(UNIFORM_SHADOWMAP_BINDING, builtinResMgr.get('default-texture').getGFXTexture());

          this._descriptorSet.bindSampler(UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING, sampler);

          this._descriptorSet.bindTexture(UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING, builtinResMgr.get('default-texture').getGFXTexture());

          this._descriptorSet.update();

          var inputAssemblerDataOffscreen = new PipelineInputAssemblerData();
          inputAssemblerDataOffscreen = this._createQuadInputAssembler();

          if (!inputAssemblerDataOffscreen.quadIB || !inputAssemblerDataOffscreen.quadVB || !inputAssemblerDataOffscreen.quadIA) {
            return false;
          }

          this._quadIB = inputAssemblerDataOffscreen.quadIB;
          this._quadVBOffscreen = inputAssemblerDataOffscreen.quadVB;
          this._quadIAOffscreen = inputAssemblerDataOffscreen.quadIA;

          var inputAssemblerDataOnscreen = this._createQuadInputAssembler();

          if (!inputAssemblerDataOnscreen.quadIB || !inputAssemblerDataOnscreen.quadVB || !inputAssemblerDataOnscreen.quadIA) {
            return false;
          }

          this._quadVBOnscreen = inputAssemblerDataOnscreen.quadVB;
          this._quadIAOnscreen = inputAssemblerDataOnscreen.quadIA;

          if (!this._gbufferRenderPass) {
            var colorAttachment0 = new ColorAttachment();
            colorAttachment0.format = Format.RGBA16F;
            colorAttachment0.loadOp = LoadOp.CLEAR;
            colorAttachment0.storeOp = StoreOp.STORE;
            var colorAttachment1 = new ColorAttachment();
            colorAttachment1.format = Format.RGBA16F;
            colorAttachment1.loadOp = LoadOp.CLEAR;
            colorAttachment1.storeOp = StoreOp.STORE;
            var colorAttachment2 = new ColorAttachment();
            colorAttachment2.format = Format.RGBA16F;
            colorAttachment2.loadOp = LoadOp.CLEAR;
            colorAttachment2.storeOp = StoreOp.STORE;
            var depthStencilAttachment = new DepthStencilAttachment();
            depthStencilAttachment.format = Format.DEPTH_STENCIL;
            depthStencilAttachment.depthLoadOp = LoadOp.CLEAR;
            depthStencilAttachment.depthStoreOp = StoreOp.STORE;
            depthStencilAttachment.stencilLoadOp = LoadOp.CLEAR;
            depthStencilAttachment.stencilStoreOp = StoreOp.STORE;
            var renderPassInfo = new RenderPassInfo([colorAttachment0, colorAttachment1, colorAttachment2], depthStencilAttachment);
            this._gbufferRenderPass = device.createRenderPass(renderPassInfo);
          }

          if (!this._lightingRenderPass) {
            var colorAttachment = new ColorAttachment();
            colorAttachment.format = Format.RGBA8;
            colorAttachment.loadOp = LoadOp.CLEAR;
            colorAttachment.storeOp = StoreOp.STORE;
            colorAttachment.barrier = device.getGeneralBarrier(new GeneralBarrierInfo(AccessFlagBit.NONE, AccessFlagBit.COLOR_ATTACHMENT_WRITE));

            var _depthStencilAttachment = new DepthStencilAttachment();

            _depthStencilAttachment.format = Format.DEPTH_STENCIL;
            _depthStencilAttachment.depthLoadOp = LoadOp.LOAD;
            _depthStencilAttachment.depthStoreOp = StoreOp.DISCARD;
            _depthStencilAttachment.stencilLoadOp = LoadOp.LOAD;
            _depthStencilAttachment.stencilStoreOp = StoreOp.DISCARD;
            colorAttachment.barrier = device.getGeneralBarrier(new GeneralBarrierInfo(AccessFlagBit.DEPTH_STENCIL_ATTACHMENT_WRITE, AccessFlagBit.DEPTH_STENCIL_ATTACHMENT_WRITE));

            var _renderPassInfo = new RenderPassInfo([colorAttachment], _depthStencilAttachment);

            this._lightingRenderPass = device.createRenderPass(_renderPassInfo);
          }

          this._width = swapchain.width;
          this._height = swapchain.height;

          this._generateDeferredRenderData();

          return true;
        };

        _proto._destroyUBOs = function _destroyUBOs() {
          if (this._descriptorSet) {
            this._descriptorSet.getBuffer(UBOGlobal.BINDING).destroy();

            this._descriptorSet.getBuffer(UBOShadow.BINDING).destroy();

            this._descriptorSet.getBuffer(UBOCamera.BINDING).destroy();

            this._descriptorSet.getTexture(UNIFORM_SHADOWMAP_BINDING).destroy();

            this._descriptorSet.getTexture(UNIFORM_SPOT_SHADOW_MAP_TEXTURE_BINDING).destroy();
          }
        };

        _proto._destroyDeferredData = function _destroyDeferredData() {
          var deferredData = this._pipelineRenderData;

          if (deferredData) {
            if (deferredData.gbufferFrameBuffer) deferredData.gbufferFrameBuffer.destroy();
            if (deferredData.outputFrameBuffer) deferredData.outputFrameBuffer.destroy();
            if (deferredData.outputDepth) deferredData.outputDepth.destroy();

            for (var i = 0; i < deferredData.gbufferRenderTargets.length; i++) {
              deferredData.gbufferRenderTargets[i].destroy();
            }

            deferredData.gbufferRenderTargets.length = 0;

            for (var _i = 0; _i < deferredData.outputRenderTargets.length; _i++) {
              deferredData.outputRenderTargets[_i].destroy();
            }

            deferredData.outputRenderTargets.length = 0;

            this._destroyBloomData();
          }

          this._pipelineRenderData = null;
        };

        _proto._ensureEnoughSize = function _ensureEnoughSize(cameras) {
          var newWidth = this._width;
          var newHeight = this._height;

          for (var i = 0; i < cameras.length; ++i) {
            var window = cameras[i].window;
            newWidth = Math.max(window.width, newWidth);
            newHeight = Math.max(window.height, newHeight);
          }

          if (newWidth !== this._width || newHeight !== this._height) {
            this._width = newWidth;
            this._height = newHeight;

            this._destroyDeferredData();

            this._generateDeferredRenderData();
          }
        };

        _proto._generateDeferredRenderData = function _generateDeferredRenderData() {
          var _this3 = this;

          var device = this.device;
          var data = this._pipelineRenderData = new DeferredRenderData();
          var sceneData = this.pipelineSceneData;

          for (var i = 0; i < 3; ++i) {
            data.gbufferRenderTargets.push(device.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.COLOR_ATTACHMENT | TextureUsageBit.SAMPLED, Format.RGBA16F, this._width * sceneData.shadingScale, this._height * sceneData.shadingScale)));
          }

          data.outputDepth = device.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.DEPTH_STENCIL_ATTACHMENT | TextureUsageBit.SAMPLED, Format.DEPTH_STENCIL, this._width * sceneData.shadingScale, this._height * sceneData.shadingScale));
          data.gbufferFrameBuffer = device.createFramebuffer(new FramebufferInfo(this._gbufferRenderPass, data.gbufferRenderTargets, data.outputDepth));
          data.outputRenderTargets.push(device.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.COLOR_ATTACHMENT | TextureUsageBit.SAMPLED, Format.RGBA16F, this._width * sceneData.shadingScale, this._height * sceneData.shadingScale)));
          data.outputFrameBuffer = device.createFramebuffer(new FramebufferInfo(this._lightingRenderPass, data.outputRenderTargets, null));
          data.sampler = this.globalDSManager.pointSampler;
          this.on(PipelineEventType.ATTACHMENT_SCALE_CAHNGED, function (val) {
            data.sampler = val < 1 ? _this3.globalDSManager.pointSampler : _this3.globalDSManager.linearSampler;
            data.gbufferFrameBuffer = _this3.newFramebufferByRatio(data.gbufferFrameBuffer);
            data.gbufferFrameBuffer = _this3.newFramebufferByRatio(data.outputFrameBuffer);
          });
        };

        return DeferredPipeline;
      }(RenderPipeline), (_initializer$s = applyDecoratedInitializer(_class2$B.prototype, "renderTextures", [_dec2$h, serializable], function () {
        return [];
      })), _class2$B)) || _class$E));

      function createDefaultPipeline() {
        var rppl = new ForwardPipeline();
        rppl.initialize({
          flows: []
        });
        return rppl;
      }

      var v2_0 = new Vec2();
      var SplashScreen = function () {
        var _proto = SplashScreen.prototype;

        _proto.init = function init() {
          var _settings$querySettin,
              _settings$querySettin2,
              _settings$querySettin3,
              _settings$querySettin4,
              _settings$querySettin5,
              _settings$querySettin6,
              _settings$querySettin7,
              _settings$querySettin8,
              _this = this;

          this.settings = {
            displayRatio: (_settings$querySettin = settings.querySettings(Settings.Category.SPLASH_SCREEN, 'displayRatio')) !== null && _settings$querySettin !== void 0 ? _settings$querySettin : 0.4,
            totalTime: (_settings$querySettin2 = settings.querySettings(Settings.Category.SPLASH_SCREEN, 'totalTime')) !== null && _settings$querySettin2 !== void 0 ? _settings$querySettin2 : 3000,
            watermarkLocation: (_settings$querySettin3 = settings.querySettings(Settings.Category.SPLASH_SCREEN, 'watermarkLocation')) !== null && _settings$querySettin3 !== void 0 ? _settings$querySettin3 : 'default',
            autoFit: (_settings$querySettin4 = settings.querySettings(Settings.Category.SPLASH_SCREEN, 'autoFit')) !== null && _settings$querySettin4 !== void 0 ? _settings$querySettin4 : true,
            url: (_settings$querySettin5 = settings.querySettings(Settings.Category.SPLASH_SCREEN, 'url')) !== null && _settings$querySettin5 !== void 0 ? _settings$querySettin5 : '',
            type: (_settings$querySettin6 = settings.querySettings(Settings.Category.SPLASH_SCREEN, 'type')) !== null && _settings$querySettin6 !== void 0 ? _settings$querySettin6 : 'default',
            bgBase64: (_settings$querySettin7 = settings.querySettings(Settings.Category.SPLASH_SCREEN, 'bgBase64')) !== null && _settings$querySettin7 !== void 0 ? _settings$querySettin7 : '',
            base64src: (_settings$querySettin8 = settings.querySettings(Settings.Category.SPLASH_SCREEN, 'base64src')) !== null && _settings$querySettin8 !== void 0 ? _settings$querySettin8 : ''
          };
          this._curTime = 0;

          if ( this.settings.base64src === '' || this.settings.totalTime <= 0) {
            this.settings.totalTime = 0;
          } else {
            this.device = legacyCC.director.root.device;
            this.swapchain = legacyCC.director.root.mainWindow.swapchain;
            this.preInit();
            this.initLayout();
            this.initWaterMark();
            var bgPromise = new Promise(function (resolve, reject) {
              _this.bgImage = new ccwindow.Image();

              _this.bgImage.onload = function () {
                _this.initBG();

                resolve();
              };

              _this.bgImage.onerror = function () {
                reject();
              };

              _this.bgImage.src = _this.settings.bgBase64;
            });
            var logoPromise = new Promise(function (resolve, reject) {
              _this.logoImage = new ccwindow.Image();

              _this.logoImage.onload = function () {
                _this.initLogo();

                resolve();
              };

              _this.logoImage.onerror = function () {
                reject();
              };

              _this.logoImage.src = _this.settings.base64src;
            });
            return Promise.all([bgPromise, logoPromise]);
          }

          return Promise.resolve([]);
        };

        _proto.preInit = function preInit() {
          this.clearColors = [new Color$1(0, 0, 0, 255)];
          var device = this.device,
              swapchain = this.swapchain;
          this.renderArea = new Rect$1(0, 0, swapchain.width, swapchain.height);
          this.cmdBuff = device.commandBuffer;
          var verts = new Float32Array([0.5, 0.5, 1, 0, -0.5, 0.5, 0, 0, 0.5, -0.5, 1, 1, -0.5, -0.5, 0, 1]);
          var vbStride = Float32Array.BYTES_PER_ELEMENT * 4;
          var vbSize = vbStride * 4;
          this.vertexBuffers = device.createBuffer(new BufferInfo(BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, vbSize, vbStride));
          this.vertexBuffers.update(verts);
          var indices = new Uint16Array([0, 1, 2, 1, 3, 2]);
          var ibStride = Uint16Array.BYTES_PER_ELEMENT;
          var ibSize = ibStride * 6;
          this.indicesBuffers = device.createBuffer(new BufferInfo(BufferUsageBit.INDEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, ibSize, ibStride));
          this.indicesBuffers.update(indices);
          var attributes = [new Attribute('a_position', Format.RG32F), new Attribute('a_texCoord', Format.RG32F)];
          var IAInfo = new InputAssemblerInfo(attributes, [this.vertexBuffers], this.indicesBuffers);
          this.quadAssmebler = device.createInputAssembler(IAInfo);
          this.projection = new Mat4();
          Mat4.ortho(this.projection, -1, 1, -1, 1, -1, 1, device.capabilities.clipSpaceMinZ, device.capabilities.clipSpaceSignY, swapchain.surfaceTransform);
          this.isMobile = sys.isMobile;
        };

        _proto.initLayout = function initLayout() {
          if (this.isMobile) {
            this.bgWidth = 812;
            this.bgHeight = 375;
            this.logoWidthTemp = 70;
            this.logoHeightTemp = 100;
            this.logoXTrans = 1 / 2;
            this.logoYTrans = 2 / 3;
            this.textSize = 12;
            this.textHeight = this.textSize + this.textExpandSize;
            this.textXTrans = 1 / 2;
            this.textYExtraTrans = 16;
          } else {
            this.bgWidth = 1920;
            this.bgHeight = 1080;
            this.logoWidthTemp = 140;
            this.logoHeightTemp = 200;
            this.logoXTrans = 1 / 2;
            this.logoYTrans = 1 / 6 + 2.5 / 6;
            this.textSize = 24;
            this.textHeight = this.textSize + this.textExpandSize;
            this.textXTrans = 1 / 2;
            this.textYExtraTrans = 32;
          }

          this.initScale();
        };

        _proto.initScale = function initScale() {
          var dw = this.swapchain.width;
          var dh = this.swapchain.height;
          var desiredWidth = this.isMobile ? 375 : 1080;
          var desiredHeight = this.isMobile ? 812 : 1920;

          if (dw > dh) {
            var temp = desiredHeight;
            desiredHeight = desiredWidth;
            desiredWidth = temp;
          }

          if (dw / dh > 16 / 9) {
            this.scaleSize = dh / desiredHeight;
          } else {
            this.scaleSize = dw / desiredWidth;
          }
        };

        _proto.update = function update(deltaTime) {
          var settings = this.settings;
          var device = this.device,
              swapchain = this.swapchain;
          Mat4.ortho(this.projection, -1, 1, -1, 1, -1, 1, device.capabilities.clipSpaceMinZ, device.capabilities.clipSpaceSignY, swapchain.surfaceTransform);
          var dw = swapchain.width;
          var dh = swapchain.height;
          this.initScale();
          this._curTime += deltaTime * 1000;
          var percent = clamp01(this._curTime / settings.totalTime);
          var u_p = cubicOut(percent);
          var scaleX = 1;
          var scaleY = 1;

          if (dw < dh) {
            scaleX = dh * this.bgRatio;
            scaleY = dh;
          } else {
            scaleX = dw;
            scaleY = dw * this.bgRatio;
          }

          this.bgMat.setProperty('resolution', v2_0.set(dw, dh), 0);
          this.bgMat.setProperty('scale', v2_0.set(scaleX, scaleY), 0);
          this.bgMat.setProperty('translate', v2_0.set(dw * 0.5, dh * 0.5), 0);
          this.bgMat.setProperty('percent', 1.0);
          this.bgMat.setProperty('u_projection', this.projection);
          this.bgMat.passes[0].update();
          scaleX = 1;
          scaleY = 1;
          scaleX = this.logoWidth * this.scaleSize * settings.displayRatio;
          scaleY = this.logoHeight * this.scaleSize * settings.displayRatio;
          var logoYTrans = dh * this.logoYTrans;
          this.logoMat.setProperty('resolution', v2_0.set(dw, dh), 0);
          this.logoMat.setProperty('scale', v2_0.set(scaleX, scaleY), 0);
          this.logoMat.setProperty('translate', v2_0.set(dw * this.logoXTrans, logoYTrans), 0);
          this.logoMat.setProperty('percent', u_p);
          this.logoMat.setProperty('u_projection', this.projection);
          this.logoMat.passes[0].update();

          if (this.watermarkMat) {
            var watermarkTW = this.watermarkTexture.width;
            var watermarkTH = this.watermarkTexture.height;
            scaleX = watermarkTW;
            scaleY = watermarkTH;
            var textYTrans = logoYTrans - (this.logoHeight * 0.5 * settings.displayRatio + this.textYExtraTrans) * this.scaleSize - watermarkTH * 0.5;
            this.watermarkMat.setProperty('resolution', v2_0.set(dw, dh), 0);
            this.watermarkMat.setProperty('scale', v2_0.set(scaleX, scaleY), 0);
            this.watermarkMat.setProperty('translate', v2_0.set(dw * this.textXTrans, textYTrans), 0);
            this.watermarkMat.setProperty('percent', u_p);
            this.watermarkMat.setProperty('u_projection', this.projection);
            this.watermarkMat.passes[0].update();
          }

          this.frame();
        };

        _proto.initBG = function initBG() {
          var device = this.device;
          this.bgMat = new Material();
          this.bgMat.initialize({
            effectName: 'util/splash-screen'
          });
          var samplerInfo = new SamplerInfo();
          samplerInfo.addressU = Address.CLAMP;
          samplerInfo.addressV = Address.CLAMP;
          samplerInfo.addressW = Address.CLAMP;
          this.sampler = device.getSampler(samplerInfo);
          this.bgTexture = device.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.SAMPLED | TextureUsageBit.TRANSFER_DST, Format.RGBA8, this.bgImage.width, this.bgImage.height));
          var pass = this.bgMat.passes[0];
          var binding = pass.getBinding('mainTexture');
          pass.bindTexture(binding, this.bgTexture);
          this.shader = pass.getShaderVariant();
          var descriptorSet = pass.descriptorSet;
          descriptorSet.bindSampler(binding, this.sampler);
          descriptorSet.update();
          var region = new BufferTextureCopy();
          region.texExtent.width = this.bgImage.width;
          region.texExtent.height = this.bgImage.height;
          region.texExtent.depth = 1;
          device.copyTexImagesToTexture([this.bgImage], this.bgTexture, [region]);
        };

        _proto.initLogo = function initLogo() {
          var device = this.device;
          this.logoMat = new Material();
          this.logoMat.initialize({
            effectName: 'util/splash-screen'
          });
          var samplerInfo = new SamplerInfo();
          samplerInfo.addressU = Address.CLAMP;
          samplerInfo.addressV = Address.CLAMP;
          samplerInfo.addressW = Address.CLAMP;
          this.sampler = device.getSampler(samplerInfo);
          this.logoTexture = device.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.SAMPLED | TextureUsageBit.TRANSFER_DST, Format.RGBA8, this.logoImage.width, this.logoImage.height));
          var pass = this.logoMat.passes[0];
          var binding = pass.getBinding('mainTexture');
          pass.bindTexture(binding, this.logoTexture);
          this.shader = pass.getShaderVariant();
          var descriptorSet = pass.descriptorSet;
          descriptorSet.bindSampler(binding, this.sampler);
          descriptorSet.update();
          var region = new BufferTextureCopy();
          region.texExtent.width = this.logoImage.width;
          region.texExtent.height = this.logoImage.height;
          region.texExtent.depth = 1;
          device.copyTexImagesToTexture([this.logoImage], this.logoTexture, [region]);
          var logoRatio = this.logoImage.width / this.logoImage.height;

          if (logoRatio < 1) {
            this.logoWidth = this.logoWidthTemp;
            this.logoHeight = this.logoWidthTemp / logoRatio;
          } else {
            this.logoWidth = this.logoHeightTemp * logoRatio;
            this.logoHeight = this.logoHeightTemp;
          }
        };

        _proto.initWaterMark = function initWaterMark() {
          var watermarkImg = ccwindow.document.createElement('canvas');
          watermarkImg.height = this.textHeight * this.scaleSize;
          watermarkImg.style.width = "" + watermarkImg.width;
          watermarkImg.style.height = "" + watermarkImg.height;
          var text = 'Created with Cocos';
          var ctx = watermarkImg.getContext('2d');
          ctx.font = this.textSize * this.scaleSize + "px Arial";
          ctx.textBaseline = 'top';
          ctx.textAlign = 'center';
          ctx.fillStyle = '#707070';
          var textLength = ctx.measureText(text).width + 10;
          watermarkImg.width = textLength;
          ctx.font = this.textSize * this.scaleSize + "px Arial";
          ctx.textBaseline = 'top';
          ctx.textAlign = 'center';
          ctx.fillStyle = '#707070';
          ctx.fillText(text, watermarkImg.width / 2, 0);
          var region = new BufferTextureCopy();
          region.texExtent.width = watermarkImg.width;
          region.texExtent.height = watermarkImg.height;
          region.texExtent.depth = 1;
          this.watermarkTexture = this.device.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.SAMPLED | TextureUsageBit.TRANSFER_DST, Format.RGBA8, watermarkImg.width, watermarkImg.height));
          this.device.copyTexImagesToTexture([watermarkImg], this.watermarkTexture, [region]);
          this.watermarkMat = new Material();
          this.watermarkMat.initialize({
            effectName: 'util/splash-screen'
          });
          var pass = this.watermarkMat.passes[0];
          var binding = pass.getBinding('mainTexture');
          pass.bindTexture(binding, this.watermarkTexture);
          pass.descriptorSet.update();
        };

        _proto.frame = function frame() {
          var device = this.device,
              swapchain = this.swapchain;

          if (!sys.isXR || xr.entry.isRenderAllowable()) {
            var renderSize = sys.isXR ? 2 : 1;

            for (var xrEye = 0; xrEye < renderSize; xrEye++) {
              if (sys.isXR) {
                xr.entry.renderLoopStart(xrEye);
                var xrConfigDeviceVendor = 13;
                var compatibleDevice = 4;

                if (xr.entry.getXRIntConfig(xrConfigDeviceVendor) !== compatibleDevice) {
                  var xrFov = xr.entry.getEyeFov(xrEye);
                  var left = Math.tan(xrFov[0]);
                  var right = Math.tan(xrFov[1]);
                  var bottom = Math.tan(xrFov[2]);
                  var top = Math.tan(xrFov[3]);
                  Mat4.ortho(this.projection, left, right, bottom, top, -1, 1, device.capabilities.clipSpaceMinZ, device.capabilities.clipSpaceSignY, swapchain.surfaceTransform);
                  this.bgMat.setProperty('u_projection', this.projection);
                  this.bgMat.passes[0].update();
                  this.logoMat.setProperty('u_projection', this.projection);
                  this.logoMat.passes[0].update();

                  if (this.watermarkMat) {
                    this.watermarkMat.setProperty('u_projection', this.projection);
                    this.watermarkMat.passes[0].update();
                  }
                }
              }

              device.acquire([swapchain]);
              var cmdBuff = this.cmdBuff;
              var framebuffer = legacyCC.director.root.mainWindow.framebuffer;
              var renderArea = this.renderArea;
              renderArea.width = swapchain.width;
              renderArea.height = swapchain.height;
              cmdBuff.begin();
              cmdBuff.beginRenderPass(framebuffer.renderPass, framebuffer, renderArea, this.clearColors, 1.0, 0);
              var bgPass = this.bgMat.passes[0];
              var bgPso = PipelineStateManager.getOrCreatePipelineState(device, bgPass, this.shader, framebuffer.renderPass, this.quadAssmebler);
              cmdBuff.bindPipelineState(bgPso);
              cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, bgPass.descriptorSet);
              cmdBuff.bindInputAssembler(this.quadAssmebler);
              cmdBuff.draw(this.quadAssmebler);
              var logoPass = this.logoMat.passes[0];
              var logoPso = PipelineStateManager.getOrCreatePipelineState(device, logoPass, this.shader, framebuffer.renderPass, this.quadAssmebler);
              cmdBuff.bindPipelineState(logoPso);
              cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, logoPass.descriptorSet);
              cmdBuff.bindInputAssembler(this.quadAssmebler);
              cmdBuff.draw(this.quadAssmebler);

              if (this.watermarkMat) {
                var wartermarkPass = this.watermarkMat.passes[0];
                var watermarkPso = PipelineStateManager.getOrCreatePipelineState(device, wartermarkPass, this.shader, framebuffer.renderPass, this.quadAssmebler);
                cmdBuff.bindPipelineState(watermarkPso);
                cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, wartermarkPass.descriptorSet);
                cmdBuff.bindInputAssembler(this.quadAssmebler);
                cmdBuff.draw(this.quadAssmebler);
              }

              cmdBuff.endRenderPass();
              cmdBuff.end();
              device.flushCommands([cmdBuff]);
              device.queue.submit([cmdBuff]);
              device.present();

              if (sys.isXR) {
                xr.entry.renderLoopEnd(xrEye);
              }
            }
          }
        };

        _proto.destroy = function destroy() {
          this.device = null;
          this.swapchain = null;
          this.clearColors = null;
          if (this.bgImage.destroy) this.bgImage.destroy();
          this.bgImage = null;
          this.bgMat.destroy();
          this.bgMat = null;
          this.bgTexture.destroy();
          this.bgTexture = null;
          if (this.logoImage.destroy) this.logoImage.destroy();
          this.logoImage = null;
          this.renderArea = null;
          this.cmdBuff = null;
          this.shader = null;
          this.logoMat.destroy();
          this.logoMat = null;
          this.logoTexture.destroy();
          this.logoTexture = null;
          this.quadAssmebler.destroy();
          this.quadAssmebler = null;
          this.vertexBuffers.destroy();
          this.vertexBuffers = null;
          this.indicesBuffers.destroy();
          this.indicesBuffers = null;
          this.sampler = null;

          if (this.watermarkTexture) {
            this.watermarkMat.destroy();
            this.watermarkMat = null;
            this.watermarkTexture.destroy();
            this.watermarkTexture = null;
          }

          this.settings = null;
        };

        function SplashScreen() {
          this._curTime = 0;
          this.isMobile = false;
          this.bgWidth = 1920;
          this.bgHeight = 1080;
          this.bgRatio = 16 / 9;
          this.logoWidthTemp = 140;
          this.logoHeightTemp = 200;
          this.logoWidth = 0;
          this.logoHeight = 0;
          this.logoXTrans = 1 / 2;
          this.logoYTrans = 1 / 6 + 2.5 / 6;
          this.textSize = 24;
          this.textHeight = 24;
          this.textXTrans = 1 / 2;
          this.textYExtraTrans = 32;
          this.textExpandSize = 4;
          this.scaleSize = 1;
        }

        _createClass(SplashScreen, [{
          key: "isFinished",
          get: function get() {
            return this._curTime >= this.settings.totalTime;
          }
        }, {
          key: "curTime",
          get: function get() {
            return this._curTime;
          },
          set: function set(val) {
            this._curTime = val;
          }
        }], [{
          key: "instance",
          get: function get() {
            if (!SplashScreen._ins) {
              SplashScreen._ins = new SplashScreen();
            }

            return SplashScreen._ins;
          }
        }]);

        return SplashScreen;
      }();
      SplashScreen._ins = void 0;
      legacyCC.internal.SplashScreen = SplashScreen;

      var Event = exports('Event', function () {
        function Event(type, bubbles) {
          this.type = void 0;
          this.bubbles = void 0;
          this.target = null;
          this.currentTarget = null;
          this.eventPhase = 0;
          this.propagationStopped = false;
          this.propagationImmediateStopped = false;
          this.type = type;
          this.bubbles = !!bubbles;
        }

        var _proto = Event.prototype;

        _proto.unuse = function unuse() {
          this.type = Event.NO_TYPE;
          this.target = null;
          this.currentTarget = null;
          this.eventPhase = Event.NONE;
          this.propagationStopped = false;
          this.propagationImmediateStopped = false;
        };

        _proto.reuse = function reuse(type, bubbles) {
          this.type = type;
          this.bubbles = bubbles || false;
        };

        _proto.isStopped = function isStopped() {
          return this.propagationStopped || this.propagationImmediateStopped;
        };

        _proto.getCurrentTarget = function getCurrentTarget() {
          return this.currentTarget;
        };

        _proto.getType = function getType() {
          return this.type;
        };

        return Event;
      }());
      Event.NO_TYPE = 'no_type';
      Event.TOUCH = 'touch';
      Event.MOUSE = 'mouse';
      Event.KEYBOARD = 'keyboard';
      Event.ACCELERATION = 'acceleration';
      Event.NONE = 0;
      Event.CAPTURING_PHASE = 1;
      Event.AT_TARGET = 2;
      Event.BUBBLING_PHASE = 3;
      legacyCC.Event = Event;

      var SystemEventType;

      (function (SystemEventType) {
        SystemEventType["TOUCH_START"] = "touch-start";
        SystemEventType["TOUCH_MOVE"] = "touch-move";
        SystemEventType["TOUCH_END"] = "touch-end";
        SystemEventType["TOUCH_CANCEL"] = "touch-cancel";
        SystemEventType["MOUSE_DOWN"] = "mouse-down";
        SystemEventType["MOUSE_MOVE"] = "mouse-move";
        SystemEventType["MOUSE_UP"] = "mouse-up";
        SystemEventType["MOUSE_WHEEL"] = "mouse-wheel";
        SystemEventType["MOUSE_ENTER"] = "mouse-enter";
        SystemEventType["MOUSE_LEAVE"] = "mouse-leave";
        SystemEventType["KEY_DOWN"] = "keydown";
        SystemEventType["KEY_UP"] = "keyup";
        SystemEventType["DEVICEMOTION"] = "devicemotion";
        SystemEventType["TRANSFORM_CHANGED"] = "transform-changed";
        SystemEventType["SCENE_CHANGED_FOR_PERSISTS"] = "scene-changed-for-persists";
        SystemEventType["SIZE_CHANGED"] = "size-changed";
        SystemEventType["ANCHOR_CHANGED"] = "anchor-changed";
        SystemEventType["COLOR_CHANGED"] = "color-changed";
        SystemEventType["CHILD_ADDED"] = "child-added";
        SystemEventType["CHILD_REMOVED"] = "child-removed";
        SystemEventType["PARENT_CHANGED"] = "parent-changed";
        SystemEventType["NODE_DESTROYED"] = "node-destroyed";
        SystemEventType["LAYER_CHANGED"] = "layer-changed";
        SystemEventType["SIBLING_ORDER_CHANGED"] = "sibling-order-changed";
      })(SystemEventType || (SystemEventType = exports('SystemEventType', {})));

      var InputEventType;

      (function (InputEventType) {
        InputEventType["TOUCH_START"] = "touch-start";
        InputEventType["TOUCH_MOVE"] = "touch-move";
        InputEventType["TOUCH_END"] = "touch-end";
        InputEventType["TOUCH_CANCEL"] = "touch-cancel";
        InputEventType["MOUSE_DOWN"] = "mouse-down";
        InputEventType["MOUSE_MOVE"] = "mouse-move";
        InputEventType["MOUSE_UP"] = "mouse-up";
        InputEventType["MOUSE_WHEEL"] = "mouse-wheel";
        InputEventType["KEY_DOWN"] = "keydown";
        InputEventType["KEY_PRESSING"] = "key-pressing";
        InputEventType["KEY_UP"] = "keyup";
        InputEventType["DEVICEMOTION"] = "devicemotion";
        InputEventType["GAMEPAD_INPUT"] = "gamepad-input";
        InputEventType["GAMEPAD_CHANGE"] = "gamepad-change";
        InputEventType["HANDLE_INPUT"] = "handle-input";
        InputEventType["HANDLE_POSE_INPUT"] = "handle-pose-input";
        InputEventType["HMD_POSE_INPUT"] = "hmd-pose-input";
        InputEventType["HANDHELD_POSE_INPUT"] = "handheld-pose-input";
      })(InputEventType || (InputEventType = {}));

      legacyCC.SystemEventType = SystemEventType;

      var EventAcceleration = exports('EventAcceleration', function (_Event) {
        _inheritsLoose(EventAcceleration, _Event);

        function EventAcceleration(acc, bubbles) {
          var _this;

          _this = _Event.call(this, SystemEventType.DEVICEMOTION, bubbles) || this;
          _this.acc = void 0;
          _this.acc = acc;
          return _this;
        }

        return EventAcceleration;
      }(Event));
      Event.EventAcceleration = EventAcceleration;

      var EventKeyboard = exports('EventKeyboard', function (_Event) {
        _inheritsLoose(EventKeyboard, _Event);

        function EventKeyboard(keyCode, eventType, bubbles) {
          var _this;

          if (typeof eventType === 'boolean') {
            var _isPressed = eventType;
            eventType = _isPressed ? SystemEventType.KEY_DOWN : SystemEventType.KEY_UP;
          }

          _this = _Event.call(this, eventType, bubbles) || this;
          _this.windowId = void 0;
          _this.keyCode = void 0;
          _this.rawEvent = void 0;
          _this._isPressed = void 0;
          _this._isPressed = eventType !== SystemEventType.KEY_UP;

          if (typeof keyCode === 'number') {
            _this.keyCode = keyCode;
          } else {
            _this.keyCode = keyCode.keyCode;
            _this.rawEvent = keyCode;
          }

          _this.windowId = 0;
          return _this;
        }

        _createClass(EventKeyboard, [{
          key: "isPressed",
          get: function get() {
            return this._isPressed;
          }
        }]);

        return EventKeyboard;
      }(Event));
      Event.EventKeyboard = EventKeyboard;

      var EventMouse = exports('EventMouse', function (_Event) {
        _inheritsLoose(EventMouse, _Event);

        function EventMouse(eventType, bubbles, prevLoc, windowId) {
          var _this;

          _this = _Event.call(this, eventType, bubbles) || this;
          _this.movementX = 0;
          _this.movementY = 0;
          _this.windowId = 0;
          _this.preventSwallow = false;
          _this._eventType = void 0;
          _this._button = EventMouse.BUTTON_MISSING;
          _this._x = 0;
          _this._y = 0;
          _this._prevX = 0;
          _this._prevY = 0;
          _this._scrollX = 0;
          _this._scrollY = 0;
          _this._eventType = eventType;

          if (prevLoc) {
            _this._prevX = prevLoc.x;
            _this._prevY = prevLoc.y;
          }

          _this.windowId = windowId !== null && windowId !== void 0 ? windowId : _this.windowId;
          return _this;
        }

        var _proto = EventMouse.prototype;

        _proto.setScrollData = function setScrollData(scrollX, scrollY) {
          this._scrollX = scrollX;
          this._scrollY = scrollY;
        };

        _proto.getScrollX = function getScrollX() {
          return this._scrollX;
        };

        _proto.getScrollY = function getScrollY() {
          return this._scrollY;
        };

        _proto.setLocation = function setLocation(x, y) {
          this._x = x;
          this._y = y;
        };

        _proto.getLocation = function getLocation(out) {
          if (!out) {
            out = new Vec2();
          }

          Vec2.set(out, this._x, this._y);
          return out;
        };

        _proto.getLocationInView = function getLocationInView(out) {
          if (!out) {
            out = new Vec2();
          }

          Vec2.set(out, this._x, legacyCC.view._designResolutionSize.height - this._y);
          return out;
        };

        _proto.getUILocation = function getUILocation(out) {
          if (!out) {
            out = new Vec2();
          }

          Vec2.set(out, this._x, this._y);

          legacyCC.view._convertToUISpace(out);

          return out;
        };

        _proto.getPreviousLocation = function getPreviousLocation(out) {
          if (!out) {
            out = new Vec2();
          }

          Vec2.set(out, this._prevX, this._prevY);
          return out;
        };

        _proto.getUIPreviousLocation = function getUIPreviousLocation(out) {
          if (!out) {
            out = new Vec2();
          }

          Vec2.set(out, this._prevX, this._prevY);

          legacyCC.view._convertToUISpace(out);

          return out;
        };

        _proto.getDelta = function getDelta(out) {
          if (!out) {
            out = new Vec2();
          }

          Vec2.set(out, this._x - this._prevX, this._y - this._prevY);
          return out;
        };

        _proto.getDeltaX = function getDeltaX() {
          return this._x - this._prevX;
        };

        _proto.getDeltaY = function getDeltaY() {
          return this._y - this._prevY;
        };

        _proto.getUIDelta = function getUIDelta(out) {
          if (!out) {
            out = new Vec2();
          }

          Vec2.set(out, (this._x - this._prevX) / legacyCC.view.getScaleX(), (this._y - this._prevY) / legacyCC.view.getScaleY());
          return out;
        };

        _proto.getUIDeltaX = function getUIDeltaX() {
          return (this._x - this._prevX) / legacyCC.view.getScaleX();
        };

        _proto.getUIDeltaY = function getUIDeltaY() {
          return (this._y - this._prevY) / legacyCC.view.getScaleY();
        };

        _proto.setButton = function setButton(button) {
          this._button = button;
        };

        _proto.getButton = function getButton() {
          return this._button;
        };

        _proto.getLocationX = function getLocationX() {
          return this._x;
        };

        _proto.getLocationY = function getLocationY() {
          return this._y;
        };

        _proto.getUILocationX = function getUILocationX() {
          var viewport = legacyCC.view.getViewportRect();
          return (this._x - viewport.x) / legacyCC.view.getScaleX();
        };

        _proto.getUILocationY = function getUILocationY() {
          var viewport = legacyCC.view.getViewportRect();
          return (this._y - viewport.y) / legacyCC.view.getScaleY();
        };

        _createClass(EventMouse, [{
          key: "eventType",
          get: function get() {
            return this._eventType;
          }
        }]);

        return EventMouse;
      }(Event));
      EventMouse.BUTTON_MISSING = -1;
      EventMouse.BUTTON_LEFT = 0;
      EventMouse.BUTTON_RIGHT = 2;
      EventMouse.BUTTON_MIDDLE = 1;
      EventMouse.BUTTON_4 = 3;
      EventMouse.BUTTON_5 = 4;
      EventMouse.BUTTON_6 = 5;
      EventMouse.BUTTON_7 = 6;
      EventMouse.BUTTON_8 = 7;
      Event.EventMouse = EventMouse;

      var _vec2 = new Vec2();

      var EventTouch = exports('EventTouch', function (_Event) {
        _inheritsLoose(EventTouch, _Event);

        function EventTouch(changedTouches, bubbles, eventType, touches) {
          var _this;

          if (touches === void 0) {
            touches = [];
          }

          _this = _Event.call(this, eventType, bubbles) || this;
          _this.touch = null;
          _this.simulate = false;
          _this.windowId = 0;
          _this.preventSwallow = false;
          _this._eventCode = void 0;
          _this._touches = void 0;
          _this._allTouches = void 0;
          _this._eventCode = eventType;
          _this._touches = changedTouches || [];
          _this._allTouches = touches;
          return _this;
        }

        var _proto = EventTouch.prototype;

        _proto.getEventCode = function getEventCode() {
          return this._eventCode;
        };

        _proto.getTouches = function getTouches() {
          return this._touches;
        };

        _proto.getAllTouches = function getAllTouches() {
          return this._allTouches;
        };

        _proto.setLocation = function setLocation(x, y) {
          if (this.touch) {
            this.touch.setTouchInfo(this.touch.getID(), x, y);
          }
        };

        _proto.getLocation = function getLocation(out) {
          return this.touch ? this.touch.getLocation(out) : new Vec2();
        };

        _proto.getUILocation = function getUILocation(out) {
          return this.touch ? this.touch.getUILocation(out) : new Vec2();
        };

        _proto.getLocationInView = function getLocationInView(out) {
          return this.touch ? this.touch.getLocationInView(out) : new Vec2();
        };

        _proto.getPreviousLocation = function getPreviousLocation(out) {
          return this.touch ? this.touch.getPreviousLocation(out) : new Vec2();
        };

        _proto.getStartLocation = function getStartLocation(out) {
          return this.touch ? this.touch.getStartLocation(out) : new Vec2();
        };

        _proto.getUIStartLocation = function getUIStartLocation(out) {
          return this.touch ? this.touch.getUIStartLocation(out) : new Vec2();
        };

        _proto.getID = function getID() {
          return this.touch ? this.touch.getID() : null;
        };

        _proto.getDelta = function getDelta(out) {
          return this.touch ? this.touch.getDelta(out) : new Vec2();
        };

        _proto.getUIDelta = function getUIDelta(out) {
          return this.touch ? this.touch.getUIDelta(out) : new Vec2();
        };

        _proto.getDeltaX = function getDeltaX() {
          return this.touch ? this.touch.getDelta(_vec2).x : 0;
        };

        _proto.getDeltaY = function getDeltaY() {
          return this.touch ? this.touch.getDelta(_vec2).y : 0;
        };

        _proto.getLocationX = function getLocationX() {
          return this.touch ? this.touch.getLocationX() : 0;
        };

        _proto.getLocationY = function getLocationY() {
          return this.touch ? this.touch.getLocationY() : 0;
        };

        return EventTouch;
      }(Event));
      EventTouch.MAX_TOUCHES = 5;
      Event.EventTouch = EventTouch;

      var EventGamepad = exports('EventGamepad', function (_Event) {
        _inheritsLoose(EventGamepad, _Event);

        function EventGamepad(type, gamepad) {
          var _this;

          _this = _Event.call(this, type, false) || this;
          _this.gamepad = void 0;
          _this.gamepad = gamepad;
          return _this;
        }

        return EventGamepad;
      }(Event));

      var EventHandle = exports('EventHandle', function (_Event) {
        _inheritsLoose(EventHandle, _Event);

        function EventHandle(eventType, handleInputDevice) {
          var _this;

          _this = _Event.call(this, eventType, false) || this;
          _this.handleInputDevice = void 0;
          _this.handleInputDevice = handleInputDevice;
          return _this;
        }

        return EventHandle;
      }(Event));

      var EventHMD = exports('EventHMD', function (_Event) {
        _inheritsLoose(EventHMD, _Event);

        function EventHMD(eventType, hmdInputDevice) {
          var _this;

          _this = _Event.call(this, eventType, false) || this;
          _this.hmdInputDevice = void 0;
          _this.hmdInputDevice = hmdInputDevice;
          return _this;
        }

        return EventHMD;
      }(Event));

      var EventHandheld = exports('EventHandheld', function (_Event) {
        _inheritsLoose(EventHandheld, _Event);

        function EventHandheld(eventType, handheldInputDevice) {
          var _this;

          _this = _Event.call(this, eventType, false) || this;
          _this.handheldInputDevice = void 0;
          _this.handheldInputDevice = handheldInputDevice;
          return _this;
        }

        return EventHandheld;
      }(Event));

      var Acceleration = exports('Acceleration', function Acceleration(x, y, z, timestamp) {
        if (x === void 0) {
          x = 0;
        }

        if (y === void 0) {
          y = 0;
        }

        if (z === void 0) {
          z = 0;
        }

        if (timestamp === void 0) {
          timestamp = 0;
        }

        this.x = void 0;
        this.y = void 0;
        this.z = void 0;
        this.timestamp = void 0;
        this.x = x;
        this.y = y;
        this.z = z;
        this.timestamp = timestamp;
      });

      var KeyCode;

      (function (KeyCode) {
        KeyCode[KeyCode["NONE"] = 0] = "NONE";
        KeyCode[KeyCode["MOBILE_BACK"] = 6] = "MOBILE_BACK";
        KeyCode[KeyCode["BACKSPACE"] = 8] = "BACKSPACE";
        KeyCode[KeyCode["TAB"] = 9] = "TAB";
        KeyCode[KeyCode["ENTER"] = 13] = "ENTER";
        KeyCode[KeyCode["SHIFT_LEFT"] = 16] = "SHIFT_LEFT";
        KeyCode[KeyCode["CTRL_LEFT"] = 17] = "CTRL_LEFT";
        KeyCode[KeyCode["ALT_LEFT"] = 18] = "ALT_LEFT";
        KeyCode[KeyCode["PAUSE"] = 19] = "PAUSE";
        KeyCode[KeyCode["CAPS_LOCK"] = 20] = "CAPS_LOCK";
        KeyCode[KeyCode["ESCAPE"] = 27] = "ESCAPE";
        KeyCode[KeyCode["SPACE"] = 32] = "SPACE";
        KeyCode[KeyCode["PAGE_UP"] = 33] = "PAGE_UP";
        KeyCode[KeyCode["PAGE_DOWN"] = 34] = "PAGE_DOWN";
        KeyCode[KeyCode["END"] = 35] = "END";
        KeyCode[KeyCode["HOME"] = 36] = "HOME";
        KeyCode[KeyCode["ARROW_LEFT"] = 37] = "ARROW_LEFT";
        KeyCode[KeyCode["ARROW_UP"] = 38] = "ARROW_UP";
        KeyCode[KeyCode["ARROW_RIGHT"] = 39] = "ARROW_RIGHT";
        KeyCode[KeyCode["ARROW_DOWN"] = 40] = "ARROW_DOWN";
        KeyCode[KeyCode["INSERT"] = 45] = "INSERT";
        KeyCode[KeyCode["DELETE"] = 46] = "DELETE";
        KeyCode[KeyCode["DIGIT_0"] = 48] = "DIGIT_0";
        KeyCode[KeyCode["DIGIT_1"] = 49] = "DIGIT_1";
        KeyCode[KeyCode["DIGIT_2"] = 50] = "DIGIT_2";
        KeyCode[KeyCode["DIGIT_3"] = 51] = "DIGIT_3";
        KeyCode[KeyCode["DIGIT_4"] = 52] = "DIGIT_4";
        KeyCode[KeyCode["DIGIT_5"] = 53] = "DIGIT_5";
        KeyCode[KeyCode["DIGIT_6"] = 54] = "DIGIT_6";
        KeyCode[KeyCode["DIGIT_7"] = 55] = "DIGIT_7";
        KeyCode[KeyCode["DIGIT_8"] = 56] = "DIGIT_8";
        KeyCode[KeyCode["DIGIT_9"] = 57] = "DIGIT_9";
        KeyCode[KeyCode["KEY_A"] = 65] = "KEY_A";
        KeyCode[KeyCode["KEY_B"] = 66] = "KEY_B";
        KeyCode[KeyCode["KEY_C"] = 67] = "KEY_C";
        KeyCode[KeyCode["KEY_D"] = 68] = "KEY_D";
        KeyCode[KeyCode["KEY_E"] = 69] = "KEY_E";
        KeyCode[KeyCode["KEY_F"] = 70] = "KEY_F";
        KeyCode[KeyCode["KEY_G"] = 71] = "KEY_G";
        KeyCode[KeyCode["KEY_H"] = 72] = "KEY_H";
        KeyCode[KeyCode["KEY_I"] = 73] = "KEY_I";
        KeyCode[KeyCode["KEY_J"] = 74] = "KEY_J";
        KeyCode[KeyCode["KEY_K"] = 75] = "KEY_K";
        KeyCode[KeyCode["KEY_L"] = 76] = "KEY_L";
        KeyCode[KeyCode["KEY_M"] = 77] = "KEY_M";
        KeyCode[KeyCode["KEY_N"] = 78] = "KEY_N";
        KeyCode[KeyCode["KEY_O"] = 79] = "KEY_O";
        KeyCode[KeyCode["KEY_P"] = 80] = "KEY_P";
        KeyCode[KeyCode["KEY_Q"] = 81] = "KEY_Q";
        KeyCode[KeyCode["KEY_R"] = 82] = "KEY_R";
        KeyCode[KeyCode["KEY_S"] = 83] = "KEY_S";
        KeyCode[KeyCode["KEY_T"] = 84] = "KEY_T";
        KeyCode[KeyCode["KEY_U"] = 85] = "KEY_U";
        KeyCode[KeyCode["KEY_V"] = 86] = "KEY_V";
        KeyCode[KeyCode["KEY_W"] = 87] = "KEY_W";
        KeyCode[KeyCode["KEY_X"] = 88] = "KEY_X";
        KeyCode[KeyCode["KEY_Y"] = 89] = "KEY_Y";
        KeyCode[KeyCode["KEY_Z"] = 90] = "KEY_Z";
        KeyCode[KeyCode["NUM_0"] = 96] = "NUM_0";
        KeyCode[KeyCode["NUM_1"] = 97] = "NUM_1";
        KeyCode[KeyCode["NUM_2"] = 98] = "NUM_2";
        KeyCode[KeyCode["NUM_3"] = 99] = "NUM_3";
        KeyCode[KeyCode["NUM_4"] = 100] = "NUM_4";
        KeyCode[KeyCode["NUM_5"] = 101] = "NUM_5";
        KeyCode[KeyCode["NUM_6"] = 102] = "NUM_6";
        KeyCode[KeyCode["NUM_7"] = 103] = "NUM_7";
        KeyCode[KeyCode["NUM_8"] = 104] = "NUM_8";
        KeyCode[KeyCode["NUM_9"] = 105] = "NUM_9";
        KeyCode[KeyCode["NUM_MULTIPLY"] = 106] = "NUM_MULTIPLY";
        KeyCode[KeyCode["NUM_PLUS"] = 107] = "NUM_PLUS";
        KeyCode[KeyCode["NUM_SUBTRACT"] = 109] = "NUM_SUBTRACT";
        KeyCode[KeyCode["NUM_DECIMAL"] = 110] = "NUM_DECIMAL";
        KeyCode[KeyCode["NUM_DIVIDE"] = 111] = "NUM_DIVIDE";
        KeyCode[KeyCode["F1"] = 112] = "F1";
        KeyCode[KeyCode["F2"] = 113] = "F2";
        KeyCode[KeyCode["F3"] = 114] = "F3";
        KeyCode[KeyCode["F4"] = 115] = "F4";
        KeyCode[KeyCode["F5"] = 116] = "F5";
        KeyCode[KeyCode["F6"] = 117] = "F6";
        KeyCode[KeyCode["F7"] = 118] = "F7";
        KeyCode[KeyCode["F8"] = 119] = "F8";
        KeyCode[KeyCode["F9"] = 120] = "F9";
        KeyCode[KeyCode["F10"] = 121] = "F10";
        KeyCode[KeyCode["F11"] = 122] = "F11";
        KeyCode[KeyCode["F12"] = 123] = "F12";
        KeyCode[KeyCode["NUM_LOCK"] = 144] = "NUM_LOCK";
        KeyCode[KeyCode["SCROLL_LOCK"] = 145] = "SCROLL_LOCK";
        KeyCode[KeyCode["SEMICOLON"] = 186] = "SEMICOLON";
        KeyCode[KeyCode["EQUAL"] = 187] = "EQUAL";
        KeyCode[KeyCode["COMMA"] = 188] = "COMMA";
        KeyCode[KeyCode["DASH"] = 189] = "DASH";
        KeyCode[KeyCode["PERIOD"] = 190] = "PERIOD";
        KeyCode[KeyCode["SLASH"] = 191] = "SLASH";
        KeyCode[KeyCode["BACK_QUOTE"] = 192] = "BACK_QUOTE";
        KeyCode[KeyCode["BRACKET_LEFT"] = 219] = "BRACKET_LEFT";
        KeyCode[KeyCode["BACKSLASH"] = 220] = "BACKSLASH";
        KeyCode[KeyCode["BRACKET_RIGHT"] = 221] = "BRACKET_RIGHT";
        KeyCode[KeyCode["QUOTE"] = 222] = "QUOTE";
        KeyCode[KeyCode["SHIFT_RIGHT"] = 2000] = "SHIFT_RIGHT";
        KeyCode[KeyCode["CTRL_RIGHT"] = 2001] = "CTRL_RIGHT";
        KeyCode[KeyCode["ALT_RIGHT"] = 2002] = "ALT_RIGHT";
        KeyCode[KeyCode["NUM_ENTER"] = 2003] = "NUM_ENTER";
      })(KeyCode || (KeyCode = exports('KeyCode', {})));

      var _vec2$1 = new Vec2();

      var Touch = exports('Touch', function () {
        function Touch(x, y, id) {
          if (id === void 0) {
            id = 0;
          }

          this._point = new Vec2();
          this._prevPoint = new Vec2();
          this._lastModified = 0;
          this._id = 0;
          this._startPoint = new Vec2();
          this._startPointCaptured = false;
          this.setTouchInfo(id, x, y);
        }

        var _proto = Touch.prototype;

        _proto.getLocation = function getLocation(out) {
          if (!out) {
            out = new Vec2();
          }

          out.set(this._point.x, this._point.y);
          return out;
        };

        _proto.getLocationX = function getLocationX() {
          return this._point.x;
        };

        _proto.getLocationY = function getLocationY() {
          return this._point.y;
        };

        _proto.getUILocation = function getUILocation(out) {
          if (!out) {
            out = new Vec2();
          }

          out.set(this._point.x, this._point.y);

          legacyCC.view._convertToUISpace(out);

          return out;
        };

        _proto.getUILocationX = function getUILocationX() {
          var viewport = legacyCC.view.getViewportRect();
          return (this._point.x - viewport.x) / legacyCC.view.getScaleX();
        };

        _proto.getUILocationY = function getUILocationY() {
          var viewport = legacyCC.view.getViewportRect();
          return (this._point.y - viewport.y) / legacyCC.view.getScaleY();
        };

        _proto.getPreviousLocation = function getPreviousLocation(out) {
          if (!out) {
            out = new Vec2();
          }

          out.set(this._prevPoint.x, this._prevPoint.y);
          return out;
        };

        _proto.getUIPreviousLocation = function getUIPreviousLocation(out) {
          if (!out) {
            out = new Vec2();
          }

          out.set(this._prevPoint.x, this._prevPoint.y);

          legacyCC.view._convertToUISpace(out);

          return out;
        };

        _proto.getStartLocation = function getStartLocation(out) {
          if (!out) {
            out = new Vec2();
          }

          out.set(this._startPoint.x, this._startPoint.y);
          return out;
        };

        _proto.getUIStartLocation = function getUIStartLocation(out) {
          if (!out) {
            out = new Vec2();
          }

          out.set(this._startPoint.x, this._startPoint.y);

          legacyCC.view._convertToUISpace(out);

          return out;
        };

        _proto.getDelta = function getDelta(out) {
          if (!out) {
            out = new Vec2();
          }

          out.set(this._point);
          out.subtract(this._prevPoint);
          return out;
        };

        _proto.getUIDelta = function getUIDelta(out) {
          if (!out) {
            out = new Vec2();
          }

          _vec2$1.set(this._point);

          _vec2$1.subtract(this._prevPoint);

          out.set(legacyCC.view.getScaleX(), legacyCC.view.getScaleY());
          Vec2.divide(out, _vec2$1, out);
          return out;
        };

        _proto.getLocationInView = function getLocationInView(out) {
          if (!out) {
            out = new Vec2();
          }

          out.set(this._point.x, legacyCC.view._designResolutionSize.height - this._point.y);
          return out;
        };

        _proto.getPreviousLocationInView = function getPreviousLocationInView(out) {
          if (!out) {
            out = new Vec2();
          }

          out.set(this._prevPoint.x, legacyCC.view._designResolutionSize.height - this._prevPoint.y);
          return out;
        };

        _proto.getStartLocationInView = function getStartLocationInView(out) {
          if (!out) {
            out = new Vec2();
          }

          out.set(this._startPoint.x, legacyCC.view._designResolutionSize.height - this._startPoint.y);
          return out;
        };

        _proto.getID = function getID() {
          return this._id;
        };

        _proto.setTouchInfo = function setTouchInfo(id, x, y) {
          if (id === void 0) {
            id = 0;
          }

          this._prevPoint = this._point;
          this._point = new Vec2(x || 0, y || 0);
          this._id = id;

          if (!this._startPointCaptured) {
            this._startPoint = new Vec2(this._point);
            this._startPointCaptured = true;
          }
        };

        _proto.setPoint = function setPoint(x, y) {
          if (typeof x === 'object') {
            this._point.x = x.x;
            this._point.y = x.y;
          } else {
            this._point.x = x || 0;
            this._point.y = y || 0;
          }

          this._lastModified = legacyCC.game.frameStartTime;
        };

        _proto.setPrevPoint = function setPrevPoint(x, y) {
          if (typeof x === 'object') {
            this._prevPoint = new Vec2(x.x, x.y);
          } else {
            this._prevPoint = new Vec2(x || 0, y || 0);
          }

          this._lastModified = legacyCC.game.frameStartTime;
        };

        _createClass(Touch, [{
          key: "lastModified",
          get: function get() {
            return this._lastModified;
          }
        }]);

        return Touch;
      }());
      legacyCC.Touch = Touch;

      var AccelerometerInputSource = function () {
        function AccelerometerInputSource() {
          this._intervalInMileSeconds = 200;
          this._accelTimer = 0;
          this._eventTarget = new EventTarget();
          this._deviceEventName = void 0;
          this._globalEventClass = void 0;
          this._didAccelerateFunc = void 0;
          this._globalEventClass = window.DeviceMotionEvent || window.DeviceOrientationEvent;

          if (systemInfo.browserType === BrowserType.MOBILE_QQ) {
            this._globalEventClass = window.DeviceOrientationEvent;
          }

          this._deviceEventName = this._globalEventClass === window.DeviceMotionEvent ? 'devicemotion' : 'deviceorientation';
          this._didAccelerateFunc = this._didAccelerate.bind(this);
        }

        var _proto = AccelerometerInputSource.prototype;

        _proto._registerEvent = function _registerEvent() {
          this._accelTimer = performance.now();
          window.addEventListener(this._deviceEventName, this._didAccelerateFunc, false);
        };

        _proto._unregisterEvent = function _unregisterEvent() {
          this._accelTimer = 0;
          window.removeEventListener(this._deviceEventName, this._didAccelerateFunc, false);
        };

        _proto._didAccelerate = function _didAccelerate(event) {
          var now = performance.now();

          if (now - this._accelTimer < this._intervalInMileSeconds) {
            return;
          }

          this._accelTimer = now;
          var x = 0;
          var y = 0;
          var z = 0;

          if (this._globalEventClass === window.DeviceMotionEvent) {
            var deviceMotionEvent = event;
            var _eventAcceleration = deviceMotionEvent.accelerationIncludingGravity;
            x = ((_eventAcceleration === null || _eventAcceleration === void 0 ? void 0 : _eventAcceleration.x) || 0) * 0.1;
            y = ((_eventAcceleration === null || _eventAcceleration === void 0 ? void 0 : _eventAcceleration.y) || 0) * 0.1;
            z = ((_eventAcceleration === null || _eventAcceleration === void 0 ? void 0 : _eventAcceleration.z) || 0) * 0.1;
          } else {
            var deviceOrientationEvent = event;
            x = (deviceOrientationEvent.gamma || 0) / 90 * 0.981;
            y = -((deviceOrientationEvent.beta || 0) / 90) * 0.981;
            z = (deviceOrientationEvent.alpha || 0) / 90 * 0.981;
          }

          if (screenAdapter.isFrameRotated) {
            var tmp = x;
            x = -y;
            y = tmp;
          }
          var LANDSCAPE_LEFT = -90;
          var PORTRAIT_UPSIDE_DOWN = 180;
          var LANDSCAPE_RIGHT = 90;
          var tmpX = x;

          if (window.orientation === LANDSCAPE_RIGHT) {
            x = -y;
            y = tmpX;
          } else if (window.orientation === LANDSCAPE_LEFT) {
            x = y;
            y = -tmpX;
          } else if (window.orientation === PORTRAIT_UPSIDE_DOWN) {
            x = -x;
            y = -y;
          }

          if (systemInfo.os === OS.ANDROID && systemInfo.browserType !== BrowserType.MOBILE_QQ) {
            x = -x;
            y = -y;
          }

          var timestamp = performance.now();
          var acceleration = new Acceleration(x, y, z, timestamp);
          var eventAcceleration = new EventAcceleration(acceleration);

          this._eventTarget.emit(InputEventType.DEVICEMOTION, eventAcceleration);
        };

        _proto.start = function start() {
          var _this = this;

          if (window.DeviceMotionEvent && typeof DeviceMotionEvent.requestPermission === 'function') {
            DeviceMotionEvent.requestPermission().then(function (response) {
              if (response === 'granted') {
                _this._registerEvent();
              }
            })["catch"](function (e) {});
          } else {
            this._registerEvent();
          }
        };

        _proto.stop = function stop() {
          this._unregisterEvent();
        };

        _proto.setInterval = function setInterval(intervalInMileSeconds) {
          this._intervalInMileSeconds = intervalInMileSeconds;
        };

        _proto.on = function on(eventType, callback, target) {
          this._eventTarget.on(eventType, callback, target);
        };

        return AccelerometerInputSource;
      }();

      var InputSource = function InputSource() {};
      var InputSourceAxis1D = function (_InputSource) {
        _inheritsLoose(InputSourceAxis1D, _InputSource);

        function InputSourceAxis1D() {
          return _InputSource.apply(this, arguments) || this;
        }

        var _proto = InputSourceAxis1D.prototype;

        _proto.getValue = function getValue() {
          throw new Error('Method not implemented.');
        };

        return InputSourceAxis1D;
      }(InputSource);
      var InputSourceAxis2D = function (_InputSource2) {
        _inheritsLoose(InputSourceAxis2D, _InputSource2);

        function InputSourceAxis2D() {
          return _InputSource2.apply(this, arguments) || this;
        }

        var _proto2 = InputSourceAxis2D.prototype;

        _proto2.getValue = function getValue() {
          throw new Error('Method not implemented.');
        };

        return InputSourceAxis2D;
      }(InputSource);
      var InputSourceAxis3D = function (_InputSource3) {
        _inheritsLoose(InputSourceAxis3D, _InputSource3);

        function InputSourceAxis3D() {
          return _InputSource3.apply(this, arguments) || this;
        }

        var _proto3 = InputSourceAxis3D.prototype;

        _proto3.getValue = function getValue() {
          throw new Error('Method not implemented.');
        };

        return InputSourceAxis3D;
      }(InputSource);
      var InputSourceQuat = function (_InputSource4) {
        _inheritsLoose(InputSourceQuat, _InputSource4);

        function InputSourceQuat() {
          return _InputSource4.apply(this, arguments) || this;
        }

        var _proto4 = InputSourceQuat.prototype;

        _proto4.getValue = function getValue() {
          throw new Error('Method not implemented.');
        };

        return InputSourceQuat;
      }(InputSource);
      var CompositeInputSourceAxis1D = function (_InputSourceAxis1D) {
        _inheritsLoose(CompositeInputSourceAxis1D, _InputSourceAxis1D);

        function CompositeInputSourceAxis1D(options) {
          var _this;

          _this = _InputSourceAxis1D.call(this) || this;
          _this.positive = void 0;
          _this.negative = void 0;
          _this.positive = options.positive;
          _this.negative = options.negative;
          return _this;
        }

        var _proto5 = CompositeInputSourceAxis1D.prototype;

        _proto5.getValue = function getValue() {
          var positiveValue = this.positive.getValue();
          var negativeValue = this.negative.getValue();

          if (Math.abs(positiveValue) > Math.abs(negativeValue)) {
            return positiveValue;
          }

          return -negativeValue;
        };

        return CompositeInputSourceAxis1D;
      }(InputSourceAxis1D);
      var CompositeInputSourceAxis2D = function (_InputSourceAxis2D) {
        _inheritsLoose(CompositeInputSourceAxis2D, _InputSourceAxis2D);

        function CompositeInputSourceAxis2D(options) {
          var _this2;

          _this2 = _InputSourceAxis2D.call(this) || this;
          _this2.up = void 0;
          _this2.down = void 0;
          _this2.left = void 0;
          _this2.right = void 0;
          _this2.xAxis = void 0;
          _this2.yAxis = void 0;
          _this2.up = options.up;
          _this2.down = options.down;
          _this2.left = options.left;
          _this2.right = options.right;
          _this2.xAxis = new CompositeInputSourceAxis1D({
            positive: _this2.right,
            negative: _this2.left
          });
          _this2.yAxis = new CompositeInputSourceAxis1D({
            positive: _this2.up,
            negative: _this2.down
          });
          return _this2;
        }

        var _proto6 = CompositeInputSourceAxis2D.prototype;

        _proto6.getValue = function getValue() {
          return new Vec2(this.xAxis.getValue(), this.yAxis.getValue());
        };

        return CompositeInputSourceAxis2D;
      }(InputSourceAxis2D);
      var CompositeInputSourceAxis3D = function (_InputSourceAxis3D) {
        _inheritsLoose(CompositeInputSourceAxis3D, _InputSourceAxis3D);

        function CompositeInputSourceAxis3D(options) {
          var _this3;

          _this3 = _InputSourceAxis3D.call(this) || this;
          _this3.up = void 0;
          _this3.down = void 0;
          _this3.left = void 0;
          _this3.right = void 0;
          _this3.forward = void 0;
          _this3.backward = void 0;
          _this3.xAxis = void 0;
          _this3.yAxis = void 0;
          _this3.zAxis = void 0;
          _this3.up = options.up;
          _this3.down = options.down;
          _this3.left = options.left;
          _this3.right = options.right;
          _this3.forward = options.forward;
          _this3.backward = options.backward;
          _this3.xAxis = new CompositeInputSourceAxis1D({
            positive: _this3.right,
            negative: _this3.left
          });
          _this3.yAxis = new CompositeInputSourceAxis1D({
            positive: _this3.up,
            negative: _this3.down
          });
          _this3.zAxis = new CompositeInputSourceAxis1D({
            positive: _this3.forward,
            negative: _this3.backward
          });
          return _this3;
        }

        var _proto7 = CompositeInputSourceAxis3D.prototype;

        _proto7.getValue = function getValue() {
          return new Vec3(this.xAxis.getValue(), this.yAxis.getValue(), this.zAxis.getValue());
        };

        return CompositeInputSourceAxis3D;
      }(InputSourceAxis3D);
      var InputSourceButton = function (_InputSourceAxis1D2) {
        _inheritsLoose(InputSourceButton, _InputSourceAxis1D2);

        function InputSourceButton() {
          return _InputSourceAxis1D2.apply(this, arguments) || this;
        }

        var _proto8 = InputSourceButton.prototype;

        _proto8.getValue = function getValue() {
          return _InputSourceAxis1D2.prototype.getValue.call(this);
        };

        return InputSourceButton;
      }(InputSourceAxis1D);
      var InputSourceDpad = function (_CompositeInputSource) {
        _inheritsLoose(InputSourceDpad, _CompositeInputSource);

        function InputSourceDpad() {
          return _CompositeInputSource.apply(this, arguments) || this;
        }

        return InputSourceDpad;
      }(CompositeInputSourceAxis2D);
      var InputSourceStick = function (_CompositeInputSource2) {
        _inheritsLoose(InputSourceStick, _CompositeInputSource2);

        function InputSourceStick() {
          return _CompositeInputSource2.apply(this, arguments) || this;
        }

        return InputSourceStick;
      }(CompositeInputSourceAxis2D);
      var InputSourceOrientation = function (_InputSourceQuat) {
        _inheritsLoose(InputSourceOrientation, _InputSourceQuat);

        function InputSourceOrientation() {
          return _InputSourceQuat.apply(this, arguments) || this;
        }

        var _proto9 = InputSourceOrientation.prototype;

        _proto9.getValue = function getValue() {
          return _InputSourceQuat.prototype.getValue.call(this);
        };

        return InputSourceOrientation;
      }(InputSourceQuat);
      var InputSourcePosition = function (_InputSourceAxis3D2) {
        _inheritsLoose(InputSourcePosition, _InputSourceAxis3D2);

        function InputSourcePosition() {
          return _InputSourceAxis3D2.apply(this, arguments) || this;
        }

        var _proto10 = InputSourcePosition.prototype;

        _proto10.getValue = function getValue() {
          return _InputSourceAxis3D2.prototype.getValue.call(this);
        };

        return InputSourcePosition;
      }(InputSourceAxis3D);

      var BUTTON_SOUTH = 0;
      var BUTTON_EAST = 1;
      var BUTTON_WEST = 2;
      var BUTTON_NORTH = 3;
      var BUTTON_L1 = 4;
      var BUTTON_R1 = 5;
      var BUTTON_L2 = 6;
      var BUTTON_R2 = 7;
      var BUTTON_SHARE = 8;
      var BUTTON_OPTIONS = 9;
      var BUTTON_L3 = 10;
      var BUTTON_R3 = 11;
      var BUTTON_DPAD_UP = 12;
      var BUTTON_DPAD_DOWN = 13;
      var BUTTON_DPAD_LEFT = 14;
      var BUTTON_DPAD_RIGHT = 15;
      var AXIS_LEFT_STICK_X = 0;
      var AXIS_LEFT_STICK_Y = 1;
      var AXIS_RIGHT_STICK_X = 2;
      var AXIS_RIGHT_STICK_Y = 3;
      var EPSILON$1 = 0.01;
      var GamepadInputDevice = function () {
        function GamepadInputDevice(deviceId) {
          this._deviceId = -1;
          this._connected = false;
          this._deviceId = deviceId;

          this._initInputSource();
        }

        GamepadInputDevice._init = function _init() {
          if (!systemInfo.hasFeature(Feature.EVENT_GAMEPAD)) {
            return;
          }

          GamepadInputDevice._registerEvent();
        };

        GamepadInputDevice._on = function _on(eventType, cb, target) {
          GamepadInputDevice._eventTarget.on(eventType, cb, target);
        };

        GamepadInputDevice._removeInputDevice = function _removeInputDevice(id) {
          var removeIndex = GamepadInputDevice.all.findIndex(function (device) {
            return device.deviceId === id;
          });

          if (removeIndex === -1) {
            return;
          }

          fastRemoveAt(GamepadInputDevice.all, removeIndex);
        };

        GamepadInputDevice._getOrCreateInputDevice = function _getOrCreateInputDevice(id, connected) {
          var device = GamepadInputDevice.all.find(function (device) {
            return device.deviceId === id;
          });

          if (!device) {
            device = new GamepadInputDevice(id);
            GamepadInputDevice.all.push(device);
          }

          device._connected = connected;
          return device;
        };

        GamepadInputDevice._ensureDirectorDefined = function _ensureDirectorDefined() {
          return new Promise(function (resolve) {
            GamepadInputDevice._intervalId = setInterval(function () {
              if (legacyCC.director && legacyCC.Director) {
                clearInterval(GamepadInputDevice._intervalId);
                GamepadInputDevice._intervalId = -1;
                resolve();
              }
            }, 50);
          });
        };

        GamepadInputDevice._registerEvent = function _registerEvent() {
          GamepadInputDevice._ensureDirectorDefined().then(function () {
            legacyCC.director.on(legacyCC.Director.EVENT_BEGIN_FRAME, GamepadInputDevice._scanGamepads);
          })["catch"](function (e) {});

          window.addEventListener('gamepadconnected', function (e) {
            GamepadInputDevice._cachedWebGamepads[e.gamepad.index] = e.gamepad;

            var device = GamepadInputDevice._getOrCreateInputDevice(e.gamepad.index, true);

            GamepadInputDevice._eventTarget.emit(InputEventType.GAMEPAD_CHANGE, new EventGamepad(InputEventType.GAMEPAD_CHANGE, device));
          });
          window.addEventListener('gamepaddisconnected', function (e) {
            GamepadInputDevice._cachedWebGamepads[e.gamepad.index] = null;

            var device = GamepadInputDevice._getOrCreateInputDevice(e.gamepad.index, false);

            GamepadInputDevice._removeInputDevice(e.gamepad.index);

            GamepadInputDevice._eventTarget.emit(InputEventType.GAMEPAD_CHANGE, new EventGamepad(InputEventType.GAMEPAD_CHANGE, device));
          });
        };

        GamepadInputDevice._scanGamepads = function _scanGamepads() {
          var webGamepads = GamepadInputDevice._getWebGamePads();

          if (!webGamepads) {
            return;
          }

          var devices = [];

          for (var i = 0; i < webGamepads.length; ++i) {
            var webGamepad = webGamepads === null || webGamepads === void 0 ? void 0 : webGamepads[i];

            if (!webGamepad) {
              continue;
            }

            var cachedWebGamepad = GamepadInputDevice._cachedWebGamepads[webGamepad.index];

            if (cachedWebGamepad) {
              var device = void 0;
              var cachedButtons = cachedWebGamepad.buttons;

              for (var j = 0; j < cachedButtons.length; ++j) {
                var cachedButton = cachedButtons[j];
                var button = webGamepad.buttons[j];

                if (Math.abs(cachedButton.value - button.value) > EPSILON$1) {
                  device = GamepadInputDevice._getOrCreateInputDevice(webGamepad.index, true);
                  break;
                }
              }

              if (device) {
                devices.push(device);
                continue;
              }

              var cachedAxes = cachedWebGamepad.axes;

              for (var _j = 0; _j < cachedAxes.length; ++_j) {
                var cachedAxisValue = cachedAxes[_j];
                var axisValue = webGamepad.axes[_j];

                if (Math.abs(cachedAxisValue - axisValue) > EPSILON$1) {
                  device = GamepadInputDevice._getOrCreateInputDevice(webGamepad.index, true);
                  break;
                }
              }

              if (device) {
                devices.push(device);
                continue;
              }
            }
          }

          GamepadInputDevice._cachedWebGamepads = webGamepads;

          for (var _i = 0; _i < devices.length; ++_i) {
            var _device = devices[_i];

            GamepadInputDevice._eventTarget.emit(InputEventType.GAMEPAD_INPUT, new EventGamepad(InputEventType.GAMEPAD_INPUT, _device));
          }
        };

        GamepadInputDevice._getWebGamePads = function _getWebGamePads() {
          if (typeof navigator.getGamepads === 'function') {
            return navigator.getGamepads();
          } else if (typeof navigator.webkitGetGamepads === 'function') {
            return navigator.webkitGetGamepads();
          }

          return [];
        };

        GamepadInputDevice._getWebGamepad = function _getWebGamepad(deviceId) {
          var webGamepads = GamepadInputDevice._getWebGamePads();

          for (var i = 0; i < webGamepads.length; ++i) {
            var webGamepad = webGamepads[i];

            if (webGamepad && webGamepad.index === deviceId) {
              return webGamepad;
            }
          }

          return undefined;
        };

        var _proto = GamepadInputDevice.prototype;

        _proto._axisToButtons = function _axisToButtons(axisValue) {
          var value = Math.abs(axisValue);

          if (axisValue > 0) {
            return {
              negative: 0,
              positive: value
            };
          } else if (axisValue < 0) {
            return {
              negative: value,
              positive: 0
            };
          } else {
            return {
              negative: 0,
              positive: 0
            };
          }
        };

        _proto._initInputSource = function _initInputSource() {
          var _this = this;

          this._buttonNorth = new InputSourceButton();

          this._buttonNorth.getValue = function () {
            var webGamepad = GamepadInputDevice._getWebGamepad(_this.deviceId);

            if (webGamepad) {
              return webGamepad.buttons[BUTTON_NORTH].value;
            }

            return 0;
          };

          this._buttonEast = new InputSourceButton();

          this._buttonEast.getValue = function () {
            var webGamepad = GamepadInputDevice._getWebGamepad(_this.deviceId);

            if (webGamepad) {
              return webGamepad.buttons[BUTTON_EAST].value;
            }

            return 0;
          };

          this._buttonWest = new InputSourceButton();

          this._buttonWest.getValue = function () {
            var webGamepad = GamepadInputDevice._getWebGamepad(_this.deviceId);

            if (webGamepad) {
              return webGamepad.buttons[BUTTON_WEST].value;
            }

            return 0;
          };

          this._buttonSouth = new InputSourceButton();

          this._buttonSouth.getValue = function () {
            var webGamepad = GamepadInputDevice._getWebGamepad(_this.deviceId);

            if (webGamepad) {
              return webGamepad.buttons[BUTTON_SOUTH].value;
            }

            return 0;
          };

          this._buttonL1 = new InputSourceButton();

          this._buttonL1.getValue = function () {
            var webGamepad = GamepadInputDevice._getWebGamepad(_this.deviceId);

            if (webGamepad) {
              return webGamepad.buttons[BUTTON_L1].value;
            }

            return 0;
          };

          this._buttonL2 = new InputSourceButton();

          this._buttonL2.getValue = function () {
            var webGamepad = GamepadInputDevice._getWebGamepad(_this.deviceId);

            if (webGamepad) {
              return webGamepad.buttons[BUTTON_L2].value;
            }

            return 0;
          };

          this._buttonL3 = new InputSourceButton();

          this._buttonL3.getValue = function () {
            var webGamepad = GamepadInputDevice._getWebGamepad(_this.deviceId);

            if (webGamepad) {
              return webGamepad.buttons[BUTTON_L3].value;
            }

            return 0;
          };

          this._buttonR1 = new InputSourceButton();

          this._buttonR1.getValue = function () {
            var webGamepad = GamepadInputDevice._getWebGamepad(_this.deviceId);

            if (webGamepad) {
              return webGamepad.buttons[BUTTON_R1].value;
            }

            return 0;
          };

          this._buttonR2 = new InputSourceButton();

          this._buttonR2.getValue = function () {
            var webGamepad = GamepadInputDevice._getWebGamepad(_this.deviceId);

            if (webGamepad) {
              return webGamepad.buttons[BUTTON_R2].value;
            }

            return 0;
          };

          this._buttonR3 = new InputSourceButton();

          this._buttonR3.getValue = function () {
            var webGamepad = GamepadInputDevice._getWebGamepad(_this.deviceId);

            if (webGamepad) {
              return webGamepad.buttons[BUTTON_R3].value;
            }

            return 0;
          };

          this._buttonShare = new InputSourceButton();

          this._buttonShare.getValue = function () {
            var webGamepad = GamepadInputDevice._getWebGamepad(_this.deviceId);

            if (webGamepad) {
              return webGamepad.buttons[BUTTON_SHARE].value;
            }

            return 0;
          };

          this._buttonOptions = new InputSourceButton();

          this._buttonOptions.getValue = function () {
            var webGamepad = GamepadInputDevice._getWebGamepad(_this.deviceId);

            if (webGamepad) {
              return webGamepad.buttons[BUTTON_OPTIONS].value;
            }

            return 0;
          };

          var dpadUp = new InputSourceButton();

          dpadUp.getValue = function () {
            var webGamepad = GamepadInputDevice._getWebGamepad(_this.deviceId);

            if (webGamepad) {
              return webGamepad.buttons[BUTTON_DPAD_UP].value;
            }

            return 0;
          };

          var dpadDown = new InputSourceButton();

          dpadDown.getValue = function () {
            var webGamepad = GamepadInputDevice._getWebGamepad(_this.deviceId);

            if (webGamepad) {
              return webGamepad.buttons[BUTTON_DPAD_DOWN].value;
            }

            return 0;
          };

          var dpadLeft = new InputSourceButton();

          dpadLeft.getValue = function () {
            var webGamepad = GamepadInputDevice._getWebGamepad(_this.deviceId);

            if (webGamepad) {
              return webGamepad.buttons[BUTTON_DPAD_LEFT].value;
            }

            return 0;
          };

          var dpadRight = new InputSourceButton();

          dpadRight.getValue = function () {
            var webGamepad = GamepadInputDevice._getWebGamepad(_this.deviceId);

            if (webGamepad) {
              return webGamepad.buttons[BUTTON_DPAD_RIGHT].value;
            }

            return 0;
          };

          this._dpad = new InputSourceDpad({
            up: dpadUp,
            down: dpadDown,
            left: dpadLeft,
            right: dpadRight
          });
          var leftStickUp = new InputSourceButton();

          leftStickUp.getValue = function () {
            var webGamepad = GamepadInputDevice._getWebGamepad(_this.deviceId);

            if (webGamepad) {
              return _this._axisToButtons(webGamepad.axes[AXIS_LEFT_STICK_Y]).negative;
            }

            return 0;
          };

          var leftStickDown = new InputSourceButton();

          leftStickDown.getValue = function () {
            var webGamepad = GamepadInputDevice._getWebGamepad(_this.deviceId);

            if (webGamepad) {
              return _this._axisToButtons(webGamepad.axes[AXIS_LEFT_STICK_Y]).positive;
            }

            return 0;
          };

          var leftStickLeft = new InputSourceButton();

          leftStickLeft.getValue = function () {
            var webGamepad = GamepadInputDevice._getWebGamepad(_this.deviceId);

            if (webGamepad) {
              return _this._axisToButtons(webGamepad.axes[AXIS_LEFT_STICK_X]).negative;
            }

            return 0;
          };

          var leftStickRight = new InputSourceButton();

          leftStickRight.getValue = function () {
            var webGamepad = GamepadInputDevice._getWebGamepad(_this.deviceId);

            if (webGamepad) {
              return _this._axisToButtons(webGamepad.axes[AXIS_LEFT_STICK_X]).positive;
            }

            return 0;
          };

          this._leftStick = new InputSourceStick({
            up: leftStickUp,
            down: leftStickDown,
            left: leftStickLeft,
            right: leftStickRight
          });
          var rightStickUp = new InputSourceButton();

          rightStickUp.getValue = function () {
            var webGamepad = GamepadInputDevice._getWebGamepad(_this.deviceId);

            if (webGamepad) {
              return _this._axisToButtons(webGamepad.axes[AXIS_RIGHT_STICK_Y]).negative;
            }

            return 0;
          };

          var rightStickDown = new InputSourceButton();

          rightStickDown.getValue = function () {
            var webGamepad = GamepadInputDevice._getWebGamepad(_this.deviceId);

            if (webGamepad) {
              return _this._axisToButtons(webGamepad.axes[AXIS_RIGHT_STICK_Y]).positive;
            }

            return 0;
          };

          var rightStickLeft = new InputSourceButton();

          rightStickLeft.getValue = function () {
            var webGamepad = GamepadInputDevice._getWebGamepad(_this.deviceId);

            if (webGamepad) {
              return _this._axisToButtons(webGamepad.axes[AXIS_RIGHT_STICK_X]).negative;
            }

            return 0;
          };

          var rightStickRight = new InputSourceButton();

          rightStickRight.getValue = function () {
            var webGamepad = GamepadInputDevice._getWebGamepad(_this.deviceId);

            if (webGamepad) {
              return _this._axisToButtons(webGamepad.axes[AXIS_RIGHT_STICK_X]).positive;
            }

            return 0;
          };

          this._rightStick = new InputSourceStick({
            up: rightStickUp,
            down: rightStickDown,
            left: rightStickLeft,
            right: rightStickRight
          });
          this._buttonStart = new InputSourceButton();

          this._buttonStart.getValue = function () {
            return 0;
          };
        };

        _createClass(GamepadInputDevice, [{
          key: "buttonNorth",
          get: function get() {
            return this._buttonNorth;
          }
        }, {
          key: "buttonEast",
          get: function get() {
            return this._buttonEast;
          }
        }, {
          key: "buttonWest",
          get: function get() {
            return this._buttonWest;
          }
        }, {
          key: "buttonSouth",
          get: function get() {
            return this._buttonSouth;
          }
        }, {
          key: "buttonL1",
          get: function get() {
            return this._buttonL1;
          }
        }, {
          key: "buttonL2",
          get: function get() {
            return this._buttonL2;
          }
        }, {
          key: "buttonL3",
          get: function get() {
            return this._buttonL3;
          }
        }, {
          key: "buttonR1",
          get: function get() {
            return this._buttonR1;
          }
        }, {
          key: "buttonR2",
          get: function get() {
            return this._buttonR2;
          }
        }, {
          key: "buttonR3",
          get: function get() {
            return this._buttonR3;
          }
        }, {
          key: "buttonShare",
          get: function get() {
            return this._buttonShare;
          }
        }, {
          key: "buttonOptions",
          get: function get() {
            return this._buttonOptions;
          }
        }, {
          key: "dpad",
          get: function get() {
            return this._dpad;
          }
        }, {
          key: "leftStick",
          get: function get() {
            return this._leftStick;
          }
        }, {
          key: "rightStick",
          get: function get() {
            return this._rightStick;
          }
        }, {
          key: "buttonStart",
          get: function get() {
            return this._buttonStart;
          }
        }, {
          key: "deviceId",
          get: function get() {
            return this._deviceId;
          }
        }, {
          key: "connected",
          get: function get() {
            return this._connected;
          }
        }]);

        return GamepadInputDevice;
      }();
      GamepadInputDevice.all = [];
      GamepadInputDevice._eventTarget = new EventTarget();
      GamepadInputDevice._cachedWebGamepads = [];
      GamepadInputDevice._intervalId = -1;

      var Button;

      (function (Button) {
        Button[Button["BUTTON_EAST"] = 0] = "BUTTON_EAST";
        Button[Button["BUTTON_SOUTH"] = 1] = "BUTTON_SOUTH";
        Button[Button["BUTTON_WEST"] = 2] = "BUTTON_WEST";
        Button[Button["BUTTON_NORTH"] = 3] = "BUTTON_NORTH";
        Button[Button["BUTTON_TRIGGER_LEFT"] = 4] = "BUTTON_TRIGGER_LEFT";
        Button[Button["BUTTON_TRIGGER_RIGHT"] = 5] = "BUTTON_TRIGGER_RIGHT";
        Button[Button["TRIGGER_LEFT"] = 6] = "TRIGGER_LEFT";
        Button[Button["TRIGGER_RIGHT"] = 7] = "TRIGGER_RIGHT";
        Button[Button["GRIP_LEFT"] = 8] = "GRIP_LEFT";
        Button[Button["GRIP_RIGHT"] = 9] = "GRIP_RIGHT";
        Button[Button["BUTTON_LEFT_STICK"] = 10] = "BUTTON_LEFT_STICK";
        Button[Button["LEFT_STICK_UP"] = 11] = "LEFT_STICK_UP";
        Button[Button["LEFT_STICK_DOWN"] = 12] = "LEFT_STICK_DOWN";
        Button[Button["LEFT_STICK_LEFT"] = 13] = "LEFT_STICK_LEFT";
        Button[Button["LEFT_STICK_RIGHT"] = 14] = "LEFT_STICK_RIGHT";
        Button[Button["BUTTON_RIGHT_STICK"] = 15] = "BUTTON_RIGHT_STICK";
        Button[Button["RIGHT_STICK_UP"] = 16] = "RIGHT_STICK_UP";
        Button[Button["RIGHT_STICK_DOWN"] = 17] = "RIGHT_STICK_DOWN";
        Button[Button["RIGHT_STICK_LEFT"] = 18] = "RIGHT_STICK_LEFT";
        Button[Button["RIGHT_STICK_RIGHT"] = 19] = "RIGHT_STICK_RIGHT";
        Button[Button["ROKID_MENU"] = 20] = "ROKID_MENU";
        Button[Button["ROKID_START"] = 21] = "ROKID_START";
      })(Button || (Button = {}));

      var KeyEventType;

      (function (KeyEventType) {
        KeyEventType[KeyEventType["KET_CLICK"] = 0] = "KET_CLICK";
        KeyEventType[KeyEventType["KET_STICK"] = 1] = "KET_STICK";
        KeyEventType[KeyEventType["KET_GRAB"] = 2] = "KET_GRAB";
      })(KeyEventType || (KeyEventType = {}));

      var StickAxisCode;

      (function (StickAxisCode) {
        StickAxisCode[StickAxisCode["UNDEFINE"] = 0] = "UNDEFINE";
        StickAxisCode[StickAxisCode["X"] = 1] = "X";
        StickAxisCode[StickAxisCode["Y"] = 2] = "Y";
        StickAxisCode[StickAxisCode["LEFT_STICK_X"] = 3] = "LEFT_STICK_X";
        StickAxisCode[StickAxisCode["LEFT_STICK_Y"] = 4] = "LEFT_STICK_Y";
        StickAxisCode[StickAxisCode["RIGHT_STICK_X"] = 5] = "RIGHT_STICK_X";
        StickAxisCode[StickAxisCode["RIGHT_STICK_Y"] = 6] = "RIGHT_STICK_Y";
        StickAxisCode[StickAxisCode["LEFT_TRIGGER"] = 7] = "LEFT_TRIGGER";
        StickAxisCode[StickAxisCode["RIGHT_TIRGGER"] = 8] = "RIGHT_TIRGGER";
        StickAxisCode[StickAxisCode["LEFT_GRIP"] = 9] = "LEFT_GRIP";
        StickAxisCode[StickAxisCode["RIGHT_GRIP"] = 10] = "RIGHT_GRIP";
      })(StickAxisCode || (StickAxisCode = {}));

      var _nativeButtonMap = {
        1: Button.BUTTON_EAST,
        2: Button.BUTTON_SOUTH,
        3: Button.BUTTON_NORTH,
        4: Button.BUTTON_WEST,
        9: Button.BUTTON_LEFT_STICK,
        10: Button.BUTTON_RIGHT_STICK,
        11: Button.ROKID_MENU,
        12: Button.ROKID_START,
        13: Button.BUTTON_TRIGGER_LEFT,
        14: Button.BUTTON_TRIGGER_RIGHT
      };
      var HandleInputDevice = function () {
        function HandleInputDevice() {
          var _this$_nativeButtonSt,
              _this = this;

          this._eventTarget = new EventTarget();
          this._nativeButtonState = (_this$_nativeButtonSt = {}, _this$_nativeButtonSt[Button.BUTTON_SOUTH] = 0, _this$_nativeButtonSt[Button.BUTTON_EAST] = 0, _this$_nativeButtonSt[Button.BUTTON_WEST] = 0, _this$_nativeButtonSt[Button.BUTTON_NORTH] = 0, _this$_nativeButtonSt[Button.BUTTON_TRIGGER_LEFT] = 0, _this$_nativeButtonSt[Button.BUTTON_TRIGGER_RIGHT] = 0, _this$_nativeButtonSt[Button.TRIGGER_LEFT] = 0, _this$_nativeButtonSt[Button.TRIGGER_RIGHT] = 0, _this$_nativeButtonSt[Button.GRIP_LEFT] = 0, _this$_nativeButtonSt[Button.GRIP_RIGHT] = 0, _this$_nativeButtonSt[Button.LEFT_STICK_UP] = 0, _this$_nativeButtonSt[Button.LEFT_STICK_DOWN] = 0, _this$_nativeButtonSt[Button.LEFT_STICK_LEFT] = 0, _this$_nativeButtonSt[Button.LEFT_STICK_RIGHT] = 0, _this$_nativeButtonSt[Button.RIGHT_STICK_UP] = 0, _this$_nativeButtonSt[Button.RIGHT_STICK_DOWN] = 0, _this$_nativeButtonSt[Button.RIGHT_STICK_LEFT] = 0, _this$_nativeButtonSt[Button.RIGHT_STICK_RIGHT] = 0, _this$_nativeButtonSt[Button.BUTTON_LEFT_STICK] = 0, _this$_nativeButtonSt[Button.BUTTON_RIGHT_STICK] = 0, _this$_nativeButtonSt[Button.ROKID_MENU] = 0, _this$_nativeButtonSt[Button.ROKID_START] = 0, _this$_nativeButtonSt);

          this._initInputSource();

          window.addEventListener('xr-remote-input', function (evt) {
            var remoteInputEvent = evt;
            var keyEventType = remoteInputEvent.detail.keyEventType;
            var stickAxisCode = remoteInputEvent.detail.stickAxisCode;
            var stickAxisValue = remoteInputEvent.detail.stickAxisValue;
            var stickKeyCode = remoteInputEvent.detail.stickKeyCode;
            var isButtonPressed = remoteInputEvent.detail.isButtonPressed;

            if (keyEventType === KeyEventType.KET_CLICK) {
              var button = _nativeButtonMap[stickKeyCode];
              _this._nativeButtonState[button] = isButtonPressed ? 1 : 0;
            } else if (keyEventType === KeyEventType.KET_STICK || keyEventType === KeyEventType.KET_GRAB) {
              var negativeButton;
              var positiveButton;
              var axisValue;

              switch (stickAxisCode) {
                case StickAxisCode.LEFT_STICK_X:
                  negativeButton = Button.LEFT_STICK_LEFT;
                  positiveButton = Button.LEFT_STICK_RIGHT;
                  axisValue = _this._axisToButtons(stickAxisValue);
                  break;

                case StickAxisCode.LEFT_STICK_Y:
                  negativeButton = Button.LEFT_STICK_DOWN;
                  positiveButton = Button.LEFT_STICK_UP;
                  axisValue = _this._axisToButtons(stickAxisValue);
                  break;

                case StickAxisCode.RIGHT_STICK_X:
                  negativeButton = Button.RIGHT_STICK_LEFT;
                  positiveButton = Button.RIGHT_STICK_RIGHT;
                  axisValue = _this._axisToButtons(stickAxisValue);
                  break;

                case StickAxisCode.RIGHT_STICK_Y:
                  negativeButton = Button.RIGHT_STICK_DOWN;
                  positiveButton = Button.RIGHT_STICK_UP;
                  axisValue = _this._axisToButtons(stickAxisValue);
                  break;

                case StickAxisCode.LEFT_TRIGGER:
                  _this._nativeButtonState[Button.TRIGGER_LEFT] = stickAxisValue;
                  break;

                case StickAxisCode.RIGHT_TIRGGER:
                  _this._nativeButtonState[Button.TRIGGER_RIGHT] = stickAxisValue;
                  break;

                case StickAxisCode.LEFT_GRIP:
                  _this._nativeButtonState[Button.GRIP_LEFT] = stickAxisValue;
                  break;

                case StickAxisCode.RIGHT_GRIP:
                  _this._nativeButtonState[Button.GRIP_RIGHT] = stickAxisValue;
                  break;
              }

              if (negativeButton && positiveButton && axisValue) {
                _this._nativeButtonState[negativeButton] = axisValue.negative;
                _this._nativeButtonState[positiveButton] = axisValue.positive;
              }
            }

            _this._eventTarget.emit(InputEventType.HANDLE_INPUT, new EventHandle(InputEventType.HANDLE_INPUT, _this));
          });
        }

        var _proto = HandleInputDevice.prototype;

        _proto._axisToButtons = function _axisToButtons(axisValue) {
          var value = Math.abs(axisValue);

          if (axisValue > 0) {
            return {
              negative: 0,
              positive: value
            };
          } else if (axisValue < 0) {
            return {
              negative: value,
              positive: 0
            };
          } else {
            return {
              negative: 0,
              positive: 0
            };
          }
        };

        _proto._on = function _on(eventType, callback, target) {
          this._eventTarget.on(eventType, callback, target);
        };

        _proto._initInputSource = function _initInputSource() {
          var _this2 = this;

          this._buttonNorth = new InputSourceButton();

          this._buttonNorth.getValue = function () {
            return _this2._nativeButtonState[Button.BUTTON_NORTH];
          };

          this._buttonEast = new InputSourceButton();

          this._buttonEast.getValue = function () {
            return _this2._nativeButtonState[Button.BUTTON_EAST];
          };

          this._buttonWest = new InputSourceButton();

          this._buttonWest.getValue = function () {
            return _this2._nativeButtonState[Button.BUTTON_WEST];
          };

          this._buttonSouth = new InputSourceButton();

          this._buttonSouth.getValue = function () {
            return _this2._nativeButtonState[Button.BUTTON_SOUTH];
          };

          this._buttonTriggerLeft = new InputSourceButton();

          this._buttonTriggerLeft.getValue = function () {
            return _this2._nativeButtonState[Button.BUTTON_TRIGGER_LEFT];
          };

          this._buttonTriggerRight = new InputSourceButton();

          this._buttonTriggerRight.getValue = function () {
            return _this2._nativeButtonState[Button.BUTTON_TRIGGER_RIGHT];
          };

          this._triggerLeft = new InputSourceButton();

          this._triggerLeft.getValue = function () {
            return _this2._nativeButtonState[Button.TRIGGER_LEFT];
          };

          this._triggerRight = new InputSourceButton();

          this._triggerRight.getValue = function () {
            return _this2._nativeButtonState[Button.TRIGGER_RIGHT];
          };

          this._gripLeft = new InputSourceButton();

          this._gripLeft.getValue = function () {
            return _this2._nativeButtonState[Button.GRIP_LEFT];
          };

          this._gripRight = new InputSourceButton();

          this._gripRight.getValue = function () {
            return _this2._nativeButtonState[Button.GRIP_RIGHT];
          };

          this._buttonLeftStick = new InputSourceButton();

          this._buttonLeftStick.getValue = function () {
            return _this2._nativeButtonState[Button.BUTTON_LEFT_STICK];
          };

          var leftStickUp = new InputSourceButton();

          leftStickUp.getValue = function () {
            return _this2._nativeButtonState[Button.LEFT_STICK_UP];
          };

          var leftStickDown = new InputSourceButton();

          leftStickDown.getValue = function () {
            return _this2._nativeButtonState[Button.LEFT_STICK_DOWN];
          };

          var leftStickLeft = new InputSourceButton();

          leftStickLeft.getValue = function () {
            return _this2._nativeButtonState[Button.LEFT_STICK_LEFT];
          };

          var leftStickRight = new InputSourceButton();

          leftStickRight.getValue = function () {
            return _this2._nativeButtonState[Button.LEFT_STICK_RIGHT];
          };

          this._leftStick = new InputSourceStick({
            up: leftStickUp,
            down: leftStickDown,
            left: leftStickLeft,
            right: leftStickRight
          });
          this._buttonRightStick = new InputSourceButton();

          this._buttonRightStick.getValue = function () {
            return _this2._nativeButtonState[Button.BUTTON_RIGHT_STICK];
          };

          var rightStickUp = new InputSourceButton();

          rightStickUp.getValue = function () {
            return _this2._nativeButtonState[Button.RIGHT_STICK_UP];
          };

          var rightStickDown = new InputSourceButton();

          rightStickDown.getValue = function () {
            return _this2._nativeButtonState[Button.RIGHT_STICK_DOWN];
          };

          var rightStickLeft = new InputSourceButton();

          rightStickLeft.getValue = function () {
            return _this2._nativeButtonState[Button.RIGHT_STICK_LEFT];
          };

          var rightStickRight = new InputSourceButton();

          rightStickRight.getValue = function () {
            return _this2._nativeButtonState[Button.RIGHT_STICK_RIGHT];
          };

          this._rightStick = new InputSourceStick({
            up: rightStickUp,
            down: rightStickDown,
            left: rightStickLeft,
            right: rightStickRight
          });
          this._buttonOptions = new InputSourceButton();

          this._buttonOptions.getValue = function () {
            return _this2._nativeButtonState[Button.ROKID_MENU];
          };

          this._buttonStart = new InputSourceButton();

          this._buttonStart.getValue = function () {
            return _this2._nativeButtonState[Button.ROKID_START];
          };

          this._handLeftPosition = new InputSourcePosition();

          this._handLeftPosition.getValue = function () {
            return Vec3.ZERO;
          };

          this._handLeftOrientation = new InputSourceOrientation();

          this._handLeftOrientation.getValue = function () {
            return Quat.IDENTITY;
          };

          this._handRightPosition = new InputSourcePosition();

          this._handRightPosition.getValue = function () {
            return Vec3.ZERO;
          };

          this._handRightOrientation = new InputSourceOrientation();

          this._handRightOrientation.getValue = function () {
            return Quat.IDENTITY;
          };

          this._aimLeftPosition = new InputSourcePosition();

          this._aimLeftPosition.getValue = function () {
            return Vec3.ZERO;
          };

          this._aimLeftOrientation = new InputSourceOrientation();

          this._aimLeftOrientation.getValue = function () {
            return Quat.IDENTITY;
          };

          this._aimRightPosition = new InputSourcePosition();

          this._aimRightPosition.getValue = function () {
            return Vec3.ZERO;
          };

          this._aimRightOrientation = new InputSourceOrientation();

          this._aimRightOrientation.getValue = function () {
            return Quat.IDENTITY;
          };
        };

        _createClass(HandleInputDevice, [{
          key: "buttonNorth",
          get: function get() {
            return this._buttonNorth;
          }
        }, {
          key: "buttonEast",
          get: function get() {
            return this._buttonEast;
          }
        }, {
          key: "buttonWest",
          get: function get() {
            return this._buttonWest;
          }
        }, {
          key: "buttonSouth",
          get: function get() {
            return this._buttonSouth;
          }
        }, {
          key: "buttonTriggerLeft",
          get: function get() {
            return this._buttonTriggerLeft;
          }
        }, {
          key: "buttonTriggerRight",
          get: function get() {
            return this._buttonTriggerRight;
          }
        }, {
          key: "triggerLeft",
          get: function get() {
            return this._triggerLeft;
          }
        }, {
          key: "triggerRight",
          get: function get() {
            return this._triggerRight;
          }
        }, {
          key: "gripLeft",
          get: function get() {
            return this._gripLeft;
          }
        }, {
          key: "gripRight",
          get: function get() {
            return this._gripRight;
          }
        }, {
          key: "leftStick",
          get: function get() {
            return this._leftStick;
          }
        }, {
          key: "rightStick",
          get: function get() {
            return this._rightStick;
          }
        }, {
          key: "buttonLeftStick",
          get: function get() {
            return this._buttonLeftStick;
          }
        }, {
          key: "buttonRightStick",
          get: function get() {
            return this._buttonRightStick;
          }
        }, {
          key: "buttonOptions",
          get: function get() {
            return this._buttonOptions;
          }
        }, {
          key: "buttonStart",
          get: function get() {
            return this._buttonStart;
          }
        }, {
          key: "handLeftPosition",
          get: function get() {
            return this._handLeftPosition;
          }
        }, {
          key: "handLeftOrientation",
          get: function get() {
            return this._handLeftOrientation;
          }
        }, {
          key: "handRightPosition",
          get: function get() {
            return this._handRightPosition;
          }
        }, {
          key: "handRightOrientation",
          get: function get() {
            return this._handRightOrientation;
          }
        }, {
          key: "aimLeftPosition",
          get: function get() {
            return this._aimLeftPosition;
          }
        }, {
          key: "aimLeftOrientation",
          get: function get() {
            return this._aimLeftOrientation;
          }
        }, {
          key: "aimRightPosition",
          get: function get() {
            return this._aimRightPosition;
          }
        }, {
          key: "aimRightOrientation",
          get: function get() {
            return this._aimRightOrientation;
          }
        }]);

        return HandleInputDevice;
      }();

      var HMDInputDevice = function () {
        function HMDInputDevice() {
          this._eventTarget = new EventTarget();

          this._initInputSource();
        }

        var _proto = HMDInputDevice.prototype;

        _proto._on = function _on(eventType, callback, target) {
          this._eventTarget.on(eventType, callback, target);
        };

        _proto._initInputSource = function _initInputSource() {
          this._viewLeftPosition = new InputSourcePosition();

          this._viewLeftPosition.getValue = function () {
            return Vec3.ZERO;
          };

          this._viewLeftOrientation = new InputSourceOrientation();

          this._viewLeftOrientation.getValue = function () {
            return Quat.IDENTITY;
          };

          this._viewRightPosition = new InputSourcePosition();

          this._viewRightPosition.getValue = function () {
            return Vec3.ZERO;
          };

          this._viewRightOrientation = new InputSourceOrientation();

          this._viewRightOrientation.getValue = function () {
            return Quat.IDENTITY;
          };

          this._headMiddlePosition = new InputSourcePosition();

          this._headMiddlePosition.getValue = function () {
            return Vec3.ZERO;
          };

          this._headMiddleOrientation = new InputSourceOrientation();

          this._headMiddleOrientation.getValue = function () {
            return Quat.IDENTITY;
          };
        };

        _createClass(HMDInputDevice, [{
          key: "viewLeftPosition",
          get: function get() {
            return this._viewLeftPosition;
          }
        }, {
          key: "viewLeftOrientation",
          get: function get() {
            return this._viewLeftOrientation;
          }
        }, {
          key: "viewRightPosition",
          get: function get() {
            return this._viewRightPosition;
          }
        }, {
          key: "viewRightOrientation",
          get: function get() {
            return this._viewRightOrientation;
          }
        }, {
          key: "headMiddlePosition",
          get: function get() {
            return this._headMiddlePosition;
          }
        }, {
          key: "headMiddleOrientation",
          get: function get() {
            return this._headMiddleOrientation;
          }
        }]);

        return HMDInputDevice;
      }();

      var HandheldInputDevice = function () {
        function HandheldInputDevice() {
          this._eventTarget = new EventTarget();

          this._initInputSource();
        }

        var _proto = HandheldInputDevice.prototype;

        _proto._on = function _on(eventType, callback, target) {
          this._eventTarget.on(eventType, callback, target);
        };

        _proto._initInputSource = function _initInputSource() {
          this._handheldPosition = new InputSourcePosition();

          this._handheldPosition.getValue = function () {
            return Vec3.ZERO;
          };

          this._handheldOrientation = new InputSourceOrientation();

          this._handheldOrientation.getValue = function () {
            return Quat.IDENTITY;
          };
        };

        _createClass(HandheldInputDevice, [{
          key: "handheldPosition",
          get: function get() {
            return this._handheldPosition;
          }
        }, {
          key: "handheldOrientation",
          get: function get() {
            return this._handheldOrientation;
          }
        }]);

        return HandheldInputDevice;
      }();

      var code2KeyCode = {
        Backspace: KeyCode.BACKSPACE,
        Tab: KeyCode.TAB,
        Enter: KeyCode.ENTER,
        ShiftLeft: KeyCode.SHIFT_LEFT,
        ControlLeft: KeyCode.CTRL_LEFT,
        AltLeft: KeyCode.ALT_LEFT,
        ShiftRight: KeyCode.SHIFT_RIGHT,
        ControlRight: KeyCode.CTRL_RIGHT,
        AltRight: KeyCode.ALT_RIGHT,
        Pause: KeyCode.PAUSE,
        CapsLock: KeyCode.CAPS_LOCK,
        Escape: KeyCode.ESCAPE,
        Space: KeyCode.SPACE,
        PageUp: KeyCode.PAGE_UP,
        PageDown: KeyCode.PAGE_DOWN,
        End: KeyCode.END,
        Home: KeyCode.HOME,
        ArrowLeft: KeyCode.ARROW_LEFT,
        ArrowUp: KeyCode.ARROW_UP,
        ArrowRight: KeyCode.ARROW_RIGHT,
        ArrowDown: KeyCode.ARROW_DOWN,
        Insert: KeyCode.INSERT,
        Delete: KeyCode.DELETE,
        Digit0: KeyCode.DIGIT_0,
        Digit1: KeyCode.DIGIT_1,
        Digit2: KeyCode.DIGIT_2,
        Digit3: KeyCode.DIGIT_3,
        Digit4: KeyCode.DIGIT_4,
        Digit5: KeyCode.DIGIT_5,
        Digit6: KeyCode.DIGIT_6,
        Digit7: KeyCode.DIGIT_7,
        Digit8: KeyCode.DIGIT_8,
        Digit9: KeyCode.DIGIT_9,
        KeyA: KeyCode.KEY_A,
        KeyB: KeyCode.KEY_B,
        KeyC: KeyCode.KEY_C,
        KeyD: KeyCode.KEY_D,
        KeyE: KeyCode.KEY_E,
        KeyF: KeyCode.KEY_F,
        KeyG: KeyCode.KEY_G,
        KeyH: KeyCode.KEY_H,
        KeyI: KeyCode.KEY_I,
        KeyJ: KeyCode.KEY_J,
        KeyK: KeyCode.KEY_K,
        KeyL: KeyCode.KEY_L,
        KeyM: KeyCode.KEY_M,
        KeyN: KeyCode.KEY_N,
        KeyO: KeyCode.KEY_O,
        KeyP: KeyCode.KEY_P,
        KeyQ: KeyCode.KEY_Q,
        KeyR: KeyCode.KEY_R,
        KeyS: KeyCode.KEY_S,
        KeyT: KeyCode.KEY_T,
        KeyU: KeyCode.KEY_U,
        KeyV: KeyCode.KEY_V,
        KeyW: KeyCode.KEY_W,
        KeyX: KeyCode.KEY_X,
        KeyY: KeyCode.KEY_Y,
        KeyZ: KeyCode.KEY_Z,
        Numpad0: KeyCode.NUM_0,
        Numpad1: KeyCode.NUM_1,
        Numpad2: KeyCode.NUM_2,
        Numpad3: KeyCode.NUM_3,
        Numpad4: KeyCode.NUM_4,
        Numpad5: KeyCode.NUM_5,
        Numpad6: KeyCode.NUM_6,
        Numpad7: KeyCode.NUM_7,
        Numpad8: KeyCode.NUM_8,
        Numpad9: KeyCode.NUM_9,
        NumpadMultiply: KeyCode.NUM_MULTIPLY,
        NumpadAdd: KeyCode.NUM_PLUS,
        NumpadSubtract: KeyCode.NUM_SUBTRACT,
        NumpadDecimal: KeyCode.NUM_DECIMAL,
        NumpadDivide: KeyCode.NUM_DIVIDE,
        NumpadEnter: KeyCode.NUM_ENTER,
        F1: KeyCode.F1,
        F2: KeyCode.F2,
        F3: KeyCode.F3,
        F4: KeyCode.F4,
        F5: KeyCode.F5,
        F6: KeyCode.F6,
        F7: KeyCode.F7,
        F8: KeyCode.F8,
        F9: KeyCode.F9,
        F10: KeyCode.F10,
        F11: KeyCode.F11,
        F12: KeyCode.F12,
        NumLock: KeyCode.NUM_LOCK,
        ScrollLock: KeyCode.SCROLL_LOCK,
        Semicolon: KeyCode.SEMICOLON,
        Equal: KeyCode.EQUAL,
        Comma: KeyCode.COMMA,
        Minus: KeyCode.DASH,
        Period: KeyCode.PERIOD,
        Slash: KeyCode.SLASH,
        Backquote: KeyCode.BACK_QUOTE,
        BracketLeft: KeyCode.BRACKET_LEFT,
        Backslash: KeyCode.BACKSLASH,
        BracketRight: KeyCode.BRACKET_RIGHT,
        Quote: KeyCode.QUOTE
      };

      function getKeyCode(code) {
        return code2KeyCode[code] || KeyCode.NONE;
      }

      var KeyboardInputSource = function () {
        function KeyboardInputSource() {
          this._eventTarget = new EventTarget();

          this._registerEvent();
        }

        var _proto = KeyboardInputSource.prototype;

        _proto.dispatchKeyboardDownEvent = function dispatchKeyboardDownEvent(nativeKeyboardEvent) {
          this._handleKeyboardDown(nativeKeyboardEvent);
        };

        _proto.dispatchKeyboardUpEvent = function dispatchKeyboardUpEvent(nativeKeyboardEvent) {
          this._handleKeyboardUp(nativeKeyboardEvent);
        };

        _proto.on = function on(eventType, callback, target) {
          this._eventTarget.on(eventType, callback, target);
        };

        _proto._registerEvent = function _registerEvent() {
          var canvas = document.getElementById('GameCanvas');
          canvas === null || canvas === void 0 ? void 0 : canvas.addEventListener('keydown', this._handleKeyboardDown.bind(this));
          canvas === null || canvas === void 0 ? void 0 : canvas.addEventListener('keyup', this._handleKeyboardUp.bind(this));
        };

        _proto._getInputEvent = function _getInputEvent(event, eventType) {
          var keyCode = getKeyCode(event.code);
          var eventKeyboard = new EventKeyboard(keyCode, eventType);
          return eventKeyboard;
        };

        _proto._handleKeyboardDown = function _handleKeyboardDown(event) {
          event.stopPropagation();
          event.preventDefault();

          if (!event.repeat) {
            var keyDownInputEvent = this._getInputEvent(event, InputEventType.KEY_DOWN);

            this._eventTarget.emit(InputEventType.KEY_DOWN, keyDownInputEvent);
          } else {
            var keyPressingInputEvent = this._getInputEvent(event, InputEventType.KEY_PRESSING);

            this._eventTarget.emit(InputEventType.KEY_PRESSING, keyPressingInputEvent);
          }
        };

        _proto._handleKeyboardUp = function _handleKeyboardUp(event) {
          var inputEvent = this._getInputEvent(event, InputEventType.KEY_UP);

          event.stopPropagation();
          event.preventDefault();

          this._eventTarget.emit(InputEventType.KEY_UP, inputEvent);
        };

        return KeyboardInputSource;
      }();

      var MouseInputSource = function () {
        function MouseInputSource() {
          this._canvas = void 0;
          this._eventTarget = new EventTarget();
          this._pointLocked = false;
          this._isPressed = false;
          this._preMousePos = new Vec2();
          this._handleMouseDown = void 0;
          this._handleMouseMove = void 0;
          this._handleMouseUp = void 0;

          if (systemInfo.hasFeature(Feature.EVENT_MOUSE)) {
            this._canvas = document.getElementById('GameCanvas');

            if (!this._canvas && !TEST && !EDITOR) {
              console.warn('failed to access canvas');
            }

            this._handleMouseDown = this._createCallback(InputEventType.MOUSE_DOWN);
            this._handleMouseMove = this._createCallback(InputEventType.MOUSE_MOVE);
            this._handleMouseUp = this._createCallback(InputEventType.MOUSE_UP);

            {
              this._registerEvent();
            }
          }
        }

        var _proto = MouseInputSource.prototype;

        _proto.dispatchMouseDownEvent = function dispatchMouseDownEvent(nativeMouseEvent) {
          this._handleMouseDown(nativeMouseEvent);
        };

        _proto.dispatchMouseMoveEvent = function dispatchMouseMoveEvent(nativeMouseEvent) {
          this._handleMouseMove(nativeMouseEvent);
        };

        _proto.dispatchMouseUpEvent = function dispatchMouseUpEvent(nativeMouseEvent) {
          this._handleMouseUp(nativeMouseEvent);
        };

        _proto.dispatchScrollEvent = function dispatchScrollEvent(nativeMouseEvent) {
          this._handleMouseWheel(nativeMouseEvent);
        };

        _proto.on = function on(eventType, callback, target) {
          this._eventTarget.on(eventType, callback, target);
        };

        _proto._getCanvasRect = function _getCanvasRect() {
          var canvas = this._canvas;
          var box = canvas === null || canvas === void 0 ? void 0 : canvas.getBoundingClientRect();

          if (box) {
            return new Rect(box.x, box.y, box.width, box.height);
          }

          return new Rect(0, 0, 0, 0);
        };

        _proto._getLocation = function _getLocation(mouseEvent) {
          var canvasRect = this._getCanvasRect();

          var dpr = screenAdapter.devicePixelRatio;
          var x = this._pointLocked ? this._preMousePos.x / dpr + mouseEvent.movementX : mouseEvent.clientX - canvasRect.x;
          var y = this._pointLocked ? this._preMousePos.y / dpr - mouseEvent.movementY : canvasRect.y + canvasRect.height - mouseEvent.clientY;
          x *= dpr;
          y *= dpr;
          return new Vec2(x, y);
        };

        _proto._registerEvent = function _registerEvent() {
          var _this = this,
              _this$_canvas,
              _this$_canvas2,
              _this$_canvas3,
              _this$_canvas4;

          window.addEventListener('mousedown', function () {
            _this._isPressed = true;
          });
          (_this$_canvas = this._canvas) === null || _this$_canvas === void 0 ? void 0 : _this$_canvas.addEventListener('mousedown', this._handleMouseDown);
          (_this$_canvas2 = this._canvas) === null || _this$_canvas2 === void 0 ? void 0 : _this$_canvas2.addEventListener('mousemove', this._handleMouseMove);
          window.addEventListener('mouseup', this._handleMouseUp);
          (_this$_canvas3 = this._canvas) === null || _this$_canvas3 === void 0 ? void 0 : _this$_canvas3.addEventListener('mouseup', this._handleMouseUp);
          (_this$_canvas4 = this._canvas) === null || _this$_canvas4 === void 0 ? void 0 : _this$_canvas4.addEventListener('wheel', this._handleMouseWheel.bind(this));

          this._registerPointerLockEvent();
        };

        _proto._registerPointerLockEvent = function _registerPointerLockEvent() {
          var _this2 = this;

          var lockChangeAlert = function lockChangeAlert() {
            var canvas = _this2._canvas;

            if (document.pointerLockElement === canvas || document.mozPointerLockElement === canvas) {
              _this2._pointLocked = true;
            } else {
              _this2._pointLocked = false;
            }
          };

          if ('onpointerlockchange' in document) {
            document.addEventListener('pointerlockchange', lockChangeAlert, false);
          } else if ('onmozpointerlockchange' in document) {
            document.addEventListener('mozpointerlockchange', lockChangeAlert, false);
          }
        };

        _proto._createCallback = function _createCallback(eventType) {
          var _this3 = this;

          return function (mouseEvent) {
            var _this3$_canvas;

            var location = _this3._getLocation(mouseEvent);

            var button = mouseEvent.button,
                buttons = mouseEvent.buttons;
            var targetButton = button;

            switch (eventType) {
              case InputEventType.MOUSE_DOWN:
                (_this3$_canvas = _this3._canvas) === null || _this3$_canvas === void 0 ? void 0 : _this3$_canvas.focus();
                _this3._isPressed = true;
                break;

              case InputEventType.MOUSE_UP:
                _this3._isPressed = false;
                break;

              case InputEventType.MOUSE_MOVE:
                if (1 & buttons) {
                  targetButton = EventMouse.BUTTON_LEFT;
                } else if (2 & buttons) {
                  targetButton = EventMouse.BUTTON_RIGHT;
                } else if (4 & buttons) {
                  targetButton = EventMouse.BUTTON_MIDDLE;
                } else {
                  targetButton = EventMouse.BUTTON_MISSING;
                }

                break;
            }

            var eventMouse = new EventMouse(eventType, false, _this3._preMousePos);
            eventMouse.setLocation(location.x, location.y);
            eventMouse.setButton(targetButton);
            eventMouse.movementX = mouseEvent.movementX;
            eventMouse.movementY = mouseEvent.movementY;

            _this3._preMousePos.set(location.x, location.y);

            mouseEvent.stopPropagation();

            if (mouseEvent.target === _this3._canvas) {
              mouseEvent.preventDefault();
            }

            _this3._eventTarget.emit(eventType, eventMouse);
          };
        };

        _proto._handleMouseWheel = function _handleMouseWheel(mouseEvent) {
          var eventType = InputEventType.MOUSE_WHEEL;

          var location = this._getLocation(mouseEvent);

          var button = mouseEvent.button;
          var eventMouse = new EventMouse(eventType, false, this._preMousePos);
          eventMouse.setLocation(location.x, location.y);
          eventMouse.setButton(button);
          eventMouse.movementX = mouseEvent.movementX;
          eventMouse.movementY = mouseEvent.movementY;
          var wheelSensitivityFactor = 5;
          eventMouse.setScrollData(mouseEvent.deltaX * wheelSensitivityFactor, -mouseEvent.deltaY * wheelSensitivityFactor);

          this._preMousePos.set(location.x, location.y);

          mouseEvent.stopPropagation();

          if (mouseEvent.target === this._canvas) {
            mouseEvent.preventDefault();
          }

          this._eventTarget.emit(eventType, eventMouse);
        };

        return MouseInputSource;
      }();

      var tempVec2 = new Vec2();

      var TouchManager = function () {
        function TouchManager() {
          this._touchMap = void 0;
          this._maxTouches = 8;
          this._touchMap = new Map();
        }

        var _proto = TouchManager.prototype;

        _proto._cloneTouch = function _cloneTouch(touch) {
          var touchID = touch.getID();
          touch.getStartLocation(tempVec2);
          var clonedTouch = new Touch(tempVec2.x, tempVec2.y, touchID);
          touch.getLocation(tempVec2);
          clonedTouch.setPoint(tempVec2.x, tempVec2.y);
          touch.getPreviousLocation(tempVec2);
          clonedTouch.setPrevPoint(tempVec2);
          return clonedTouch;
        };

        _proto._createTouch = function _createTouch(touchID, x, y) {
          if (this._touchMap.has(touchID)) {
            console.log('Cannot create the same touch object.');
            return undefined;
          }

          var checkResult = this._checkTouchMapSizeMoreThanMax(touchID);

          if (checkResult) {
            console.log('The touches is more than MAX_TOUCHES.');
            return undefined;
          }

          var touch = new Touch(x, y, touchID);

          this._touchMap.set(touchID, touch);

          this._updateTouch(touch, x, y);

          return this._cloneTouch(touch);
        };

        _proto.releaseTouch = function releaseTouch(touchID) {
          if (!this._touchMap.has(touchID)) {
            return;
          }

          this._touchMap["delete"](touchID);
        };

        _proto.getTouch = function getTouch(touchID, x, y) {
          var touch = this._touchMap.get(touchID);

          if (!touch) {
            touch = this._createTouch(touchID, x, y);
          } else {
            this._updateTouch(touch, x, y);
          }

          return touch ? this._cloneTouch(touch) : undefined;
        };

        _proto.getAllTouches = function getAllTouches() {
          var _this = this;

          var touches = [];

          this._touchMap.forEach(function (touch) {
            if (touch) {
              var clonedTouch = _this._cloneTouch(touch);

              touches.push(clonedTouch);
            }
          });

          return touches;
        };

        _proto._updateTouch = function _updateTouch(touch, x, y) {
          touch.getLocation(tempVec2);
          touch.setPrevPoint(tempVec2);
          touch.setPoint(x, y);
        };

        _proto._checkTouchMapSizeMoreThanMax = function _checkTouchMapSizeMoreThanMax(touchID) {
          var _this2 = this;

          if (this._touchMap.has(touchID)) {
            return false;
          }

          var maxSize = macro.ENABLE_MULTI_TOUCH ? this._maxTouches : 1;

          if (this._touchMap.size < maxSize) {
            return false;
          }

          var now = performance.now();

          this._touchMap.forEach(function (touch) {
            if (now - touch.lastModified > macro.TOUCH_TIMEOUT) {
              console.log("The touches is more than MAX_TOUCHES, release touch id " + touch.getID() + ".");

              _this2.releaseTouch(touch.getID());
            }
          });

          return maxSize >= this._touchMap.size;
        };

        return TouchManager;
      }();

      var touchManager = new TouchManager();

      var TouchInputSource = function () {
        function TouchInputSource() {
          this._canvas = void 0;
          this._eventTarget = new EventTarget();

          if (systemInfo.hasFeature(Feature.INPUT_TOUCH)) {
            this._canvas = document.getElementById('GameCanvas');

            if (!this._canvas && !TEST && !EDITOR) {
              console.warn('failed to access canvas');
            }

            {
              this._registerEvent();
            }
          }
        }

        var _proto = TouchInputSource.prototype;

        _proto._registerEvent = function _registerEvent() {
          var _this$_canvas, _this$_canvas2, _this$_canvas3, _this$_canvas4;

          (_this$_canvas = this._canvas) === null || _this$_canvas === void 0 ? void 0 : _this$_canvas.addEventListener('touchstart', this._createCallback(InputEventType.TOUCH_START));
          (_this$_canvas2 = this._canvas) === null || _this$_canvas2 === void 0 ? void 0 : _this$_canvas2.addEventListener('touchmove', this._createCallback(InputEventType.TOUCH_MOVE));
          (_this$_canvas3 = this._canvas) === null || _this$_canvas3 === void 0 ? void 0 : _this$_canvas3.addEventListener('touchend', this._createCallback(InputEventType.TOUCH_END));
          (_this$_canvas4 = this._canvas) === null || _this$_canvas4 === void 0 ? void 0 : _this$_canvas4.addEventListener('touchcancel', this._createCallback(InputEventType.TOUCH_CANCEL));
        };

        _proto._createCallback = function _createCallback(eventType) {
          var _this = this;

          return function (event) {
            var canvasRect = _this._getCanvasRect();

            var handleTouches = [];
            var length = event.changedTouches.length;

            for (var i = 0; i < length; ++i) {
              var changedTouch = event.changedTouches[i];
              var touchID = changedTouch.identifier;

              if (touchID === null) {
                continue;
              }

              var location = _this._getLocation(changedTouch, canvasRect);

              var touch = touchManager.getTouch(touchID, location.x, location.y);

              if (!touch) {
                continue;
              }

              if (eventType === InputEventType.TOUCH_END || eventType === InputEventType.TOUCH_CANCEL) {
                touchManager.releaseTouch(touchID);
              }

              handleTouches.push(touch);
            }

            event.stopPropagation();

            if (event.target === _this._canvas) {
              event.preventDefault();
            }

            if (eventType === InputEventType.TOUCH_START) {
              var _this$_canvas5;

              (_this$_canvas5 = _this._canvas) === null || _this$_canvas5 === void 0 ? void 0 : _this$_canvas5.focus();
            }

            if (handleTouches.length > 0) {
              var eventTouch = new EventTouch(handleTouches, false, eventType, macro.ENABLE_MULTI_TOUCH ? touchManager.getAllTouches() : handleTouches);

              _this._eventTarget.emit(eventType, eventTouch);
            }
          };
        };

        _proto._getCanvasRect = function _getCanvasRect() {
          var canvas = this._canvas;
          var box = canvas === null || canvas === void 0 ? void 0 : canvas.getBoundingClientRect();

          if (box) {
            return new Rect(box.x, box.y, box.width, box.height);
          }

          return new Rect(0, 0, 0, 0);
        };

        _proto._getLocation = function _getLocation(touch, canvasRect) {
          if (globalThis.__globalXR.ar && globalThis.__globalXR.ar.isWebXR()) {
            return new Vec2(touch.clientX, touch.clientY);
          }

          var x = touch.clientX - canvasRect.x;
          var y = canvasRect.y + canvasRect.height - touch.clientY;

          if (screenAdapter.isFrameRotated) {
            var tmp = x;
            x = canvasRect.height - y;
            y = tmp;
          }

          var dpr = screenAdapter.devicePixelRatio;
          x *= dpr;
          y *= dpr;
          return new Vec2(x, y);
        };

        _proto.on = function on(eventType, callback, target) {
          this._eventTarget.on(eventType, callback, target);
        };

        return TouchInputSource;
      }();

      var _pointerEventTypeMap;
      var EventDispatcherPriority;

      (function (EventDispatcherPriority) {
        EventDispatcherPriority[EventDispatcherPriority["GLOBAL"] = 0] = "GLOBAL";
        EventDispatcherPriority[EventDispatcherPriority["UI"] = 1] = "UI";
      })(EventDispatcherPriority || (EventDispatcherPriority = {}));

      var InputEventDispatcher = function () {
        function InputEventDispatcher(inputEventTarget) {
          this.priority = EventDispatcherPriority.GLOBAL;
          this._inputEventTarget = void 0;
          this._inputEventTarget = inputEventTarget;
        }

        var _proto = InputEventDispatcher.prototype;

        _proto.dispatchEvent = function dispatchEvent(event) {
          this._inputEventTarget.emit(event.type, event);

          return true;
        };

        return InputEventDispatcher;
      }();

      var pointerEventTypeMap = (_pointerEventTypeMap = {}, _pointerEventTypeMap[InputEventType.MOUSE_DOWN] = InputEventType.TOUCH_START, _pointerEventTypeMap[InputEventType.MOUSE_MOVE] = InputEventType.TOUCH_MOVE, _pointerEventTypeMap[InputEventType.MOUSE_UP] = InputEventType.TOUCH_END, _pointerEventTypeMap);
      var Input = exports('Input', function () {
        function Input() {
          this._dispatchImmediately = !NATIVE;
          this._eventTarget = new EventTarget();
          this._touchInput = new TouchInputSource();
          this._mouseInput = new MouseInputSource();
          this._keyboardInput = new KeyboardInputSource();
          this._accelerometerInput = new AccelerometerInputSource();
          this._handleInput = new HandleInputDevice();
          this._hmdInput = new HMDInputDevice();
          this._handheldInput = new HandheldInputDevice();
          this._eventTouchList = [];
          this._eventMouseList = [];
          this._eventKeyboardList = [];
          this._eventAccelerationList = [];
          this._eventGamepadList = [];
          this._eventHandleList = [];
          this._eventHMDList = [];
          this._eventHandheldList = [];
          this._needSimulateTouchMoveEvent = false;
          this._inputEventDispatcher = void 0;
          this._eventDispatcherList = [];

          this._registerEvent();

          this._inputEventDispatcher = new InputEventDispatcher(this._eventTarget);

          this._registerEventDispatcher(this._inputEventDispatcher);

          GamepadInputDevice._init();
        }

        var _proto2 = Input.prototype;

        _proto2._dispatchMouseDownEvent = function _dispatchMouseDownEvent(nativeMouseEvent) {
          var _this$_mouseInput$dis, _this$_mouseInput;

          (_this$_mouseInput$dis = (_this$_mouseInput = this._mouseInput).dispatchMouseDownEvent) === null || _this$_mouseInput$dis === void 0 ? void 0 : _this$_mouseInput$dis.call(_this$_mouseInput, nativeMouseEvent);
        };

        _proto2._dispatchMouseMoveEvent = function _dispatchMouseMoveEvent(nativeMouseEvent) {
          var _this$_mouseInput$dis2, _this$_mouseInput2;

          (_this$_mouseInput$dis2 = (_this$_mouseInput2 = this._mouseInput).dispatchMouseMoveEvent) === null || _this$_mouseInput$dis2 === void 0 ? void 0 : _this$_mouseInput$dis2.call(_this$_mouseInput2, nativeMouseEvent);
        };

        _proto2._dispatchMouseUpEvent = function _dispatchMouseUpEvent(nativeMouseEvent) {
          var _this$_mouseInput$dis3, _this$_mouseInput3;

          (_this$_mouseInput$dis3 = (_this$_mouseInput3 = this._mouseInput).dispatchMouseUpEvent) === null || _this$_mouseInput$dis3 === void 0 ? void 0 : _this$_mouseInput$dis3.call(_this$_mouseInput3, nativeMouseEvent);
        };

        _proto2._dispatchMouseScrollEvent = function _dispatchMouseScrollEvent(nativeMouseEvent) {
          var _this$_mouseInput$dis4, _this$_mouseInput4;

          (_this$_mouseInput$dis4 = (_this$_mouseInput4 = this._mouseInput).dispatchScrollEvent) === null || _this$_mouseInput$dis4 === void 0 ? void 0 : _this$_mouseInput$dis4.call(_this$_mouseInput4, nativeMouseEvent);
        };

        _proto2._dispatchKeyboardDownEvent = function _dispatchKeyboardDownEvent(nativeKeyboardEvent) {
          var _this$_keyboardInput$, _this$_keyboardInput;

          (_this$_keyboardInput$ = (_this$_keyboardInput = this._keyboardInput).dispatchKeyboardDownEvent) === null || _this$_keyboardInput$ === void 0 ? void 0 : _this$_keyboardInput$.call(_this$_keyboardInput, nativeKeyboardEvent);
        };

        _proto2._dispatchKeyboardUpEvent = function _dispatchKeyboardUpEvent(nativeKeyboardEvent) {
          var _this$_keyboardInput$2, _this$_keyboardInput2;

          (_this$_keyboardInput$2 = (_this$_keyboardInput2 = this._keyboardInput).dispatchKeyboardUpEvent) === null || _this$_keyboardInput$2 === void 0 ? void 0 : _this$_keyboardInput$2.call(_this$_keyboardInput2, nativeKeyboardEvent);
        };

        _proto2.on = function on(eventType, callback, target) {
          this._eventTarget.on(eventType, callback, target);

          return callback;
        };

        _proto2.once = function once(eventType, callback, target) {
          this._eventTarget.once(eventType, callback, target);

          return callback;
        };

        _proto2.off = function off(eventType, callback, target) {

          this._eventTarget.off(eventType, callback, target);
        };

        _proto2.setAccelerometerEnabled = function setAccelerometerEnabled(isEnable) {

          if (isEnable) {
            this._accelerometerInput.start();
          } else {
            this._accelerometerInput.stop();
          }
        };

        _proto2.setAccelerometerInterval = function setAccelerometerInterval(intervalInMileSeconds) {

          this._accelerometerInput.setInterval(intervalInMileSeconds);
        };

        _proto2._simulateEventTouch = function _simulateEventTouch(eventMouse) {
          var eventType = pointerEventTypeMap[eventMouse.type];
          var touchID = 0;
          var touch = touchManager.getTouch(touchID, eventMouse.getLocationX(), eventMouse.getLocationY());

          if (!touch) {
            return;
          }

          var changedTouches = [touch];
          var eventTouch = new EventTouch(changedTouches, false, eventType, eventType === InputEventType.TOUCH_END ? [] : changedTouches);
          eventTouch.windowId = eventMouse.windowId;

          if (eventType === InputEventType.TOUCH_END) {
            touchManager.releaseTouch(touchID);
          }

          this._dispatchOrPushEventTouch(eventTouch, this._eventTouchList);
        };

        _proto2._registerEventDispatcher = function _registerEventDispatcher(eventDispatcher) {
          this._eventDispatcherList.push(eventDispatcher);

          this._eventDispatcherList.sort(function (a, b) {
            return b.priority - a.priority;
          });
        };

        _proto2._emitEvent = function _emitEvent(event) {
          var length = this._eventDispatcherList.length;

          for (var i = 0; i < length; ++i) {
            var dispatcher = this._eventDispatcherList[i];

            try {
              if (!dispatcher.dispatchEvent(event)) {
                break;
              }
            } catch (e) {
              console.error("Error occurs in an event listener: " + event.type);
              console.error(e);
            }
          }
        };

        _proto2._registerEvent = function _registerEvent() {
          var _this = this;

          if (sys.hasFeature(sys.Feature.INPUT_TOUCH)) {
            var eventTouchList = this._eventTouchList;

            this._touchInput.on(InputEventType.TOUCH_START, function (event) {
              _this._dispatchOrPushEventTouch(event, eventTouchList);
            });

            this._touchInput.on(InputEventType.TOUCH_MOVE, function (event) {
              _this._dispatchOrPushEventTouch(event, eventTouchList);
            });

            this._touchInput.on(InputEventType.TOUCH_END, function (event) {
              _this._dispatchOrPushEventTouch(event, eventTouchList);
            });

            this._touchInput.on(InputEventType.TOUCH_CANCEL, function (event) {
              _this._dispatchOrPushEventTouch(event, eventTouchList);
            });
          }

          if (sys.hasFeature(sys.Feature.EVENT_MOUSE)) {
            var eventMouseList = this._eventMouseList;

            this._mouseInput.on(InputEventType.MOUSE_DOWN, function (event) {
              _this._needSimulateTouchMoveEvent = true;

              _this._simulateEventTouch(event);

              _this._dispatchOrPushEvent(event, eventMouseList);
            });

            this._mouseInput.on(InputEventType.MOUSE_MOVE, function (event) {
              if (_this._needSimulateTouchMoveEvent) {
                _this._simulateEventTouch(event);
              }

              _this._dispatchOrPushEvent(event, eventMouseList);
            });

            this._mouseInput.on(InputEventType.MOUSE_UP, function (event) {
              _this._needSimulateTouchMoveEvent = false;

              _this._simulateEventTouch(event);

              _this._dispatchOrPushEvent(event, eventMouseList);
            });

            this._mouseInput.on(InputEventType.MOUSE_WHEEL, function (event) {
              _this._dispatchOrPushEvent(event, eventMouseList);
            });
          }

          if (sys.hasFeature(sys.Feature.EVENT_KEYBOARD)) {
            var eventKeyboardList = this._eventKeyboardList;

            this._keyboardInput.on(InputEventType.KEY_DOWN, function (event) {
              _this._dispatchOrPushEvent(event, eventKeyboardList);
            });

            this._keyboardInput.on(InputEventType.KEY_PRESSING, function (event) {
              _this._dispatchOrPushEvent(event, eventKeyboardList);
            });

            this._keyboardInput.on(InputEventType.KEY_UP, function (event) {
              _this._dispatchOrPushEvent(event, eventKeyboardList);
            });
          }

          if (sys.hasFeature(sys.Feature.EVENT_ACCELEROMETER)) {
            var eventAccelerationList = this._eventAccelerationList;

            this._accelerometerInput.on(InputEventType.DEVICEMOTION, function (event) {
              _this._dispatchOrPushEvent(event, eventAccelerationList);
            });
          }

          if (sys.hasFeature(sys.Feature.EVENT_GAMEPAD)) {
            var eventGamepadList = this._eventGamepadList;

            GamepadInputDevice._on(InputEventType.GAMEPAD_CHANGE, function (event) {
              _this._dispatchOrPushEvent(event, eventGamepadList);
            });

            GamepadInputDevice._on(InputEventType.GAMEPAD_INPUT, function (event) {
              _this._dispatchOrPushEvent(event, eventGamepadList);
            });
          }

          if (sys.hasFeature(sys.Feature.EVENT_HANDLE)) {
            var eventHandleList = this._eventHandleList;

            this._handleInput._on(InputEventType.HANDLE_INPUT, function (event) {
              _this._dispatchOrPushEvent(event, eventHandleList);
            });

            this._handleInput._on(InputEventType.HANDLE_POSE_INPUT, function (event) {
              _this._dispatchOrPushEvent(event, eventHandleList);
            });
          }

          if (sys.hasFeature(sys.Feature.EVENT_HMD)) {
            var eventHMDList = this._eventHMDList;

            this._hmdInput._on(InputEventType.HMD_POSE_INPUT, function (event) {
              _this._dispatchOrPushEvent(event, eventHMDList);
            });
          }

          if (sys.hasFeature(sys.Feature.EVENT_HANDHELD)) {
            var eventHandheldList = this._eventHandheldList;

            this._handheldInput._on(InputEventType.HANDHELD_POSE_INPUT, function (event) {
              _this._dispatchOrPushEvent(event, eventHandheldList);
            });
          }
        };

        _proto2._clearEvents = function _clearEvents() {
          this._eventMouseList.length = 0;
          this._eventTouchList.length = 0;
          this._eventKeyboardList.length = 0;
          this._eventAccelerationList.length = 0;
          this._eventGamepadList.length = 0;
          this._eventHandleList.length = 0;
          this._eventHMDList.length = 0;
        };

        _proto2._dispatchOrPushEvent = function _dispatchOrPushEvent(event, eventList) {
          if (this._dispatchImmediately) {
            this._emitEvent(event);
          } else {
            eventList.push(event);
          }
        };

        _proto2._dispatchOrPushEventTouch = function _dispatchOrPushEventTouch(eventTouch, touchEventList) {
          if (this._dispatchImmediately) {
            var touches = eventTouch.getTouches();
            var touchesLength = touches.length;

            for (var i = 0; i < touchesLength; ++i) {
              eventTouch.touch = touches[i];
              eventTouch.propagationStopped = eventTouch.propagationImmediateStopped = false;

              this._emitEvent(eventTouch);
            }
          } else {
            touchEventList.push(eventTouch);
          }
        };

        _proto2._frameDispatchEvents = function _frameDispatchEvents() {
          var eventHMDList = this._eventHMDList;

          for (var i = 0, length = eventHMDList.length; i < length; ++i) {
            var eventHMD = eventHMDList[i];

            this._emitEvent(eventHMD);
          }

          var eventHandheldList = this._eventHandheldList;

          for (var _i = 0, _length = eventHandheldList.length; _i < _length; ++_i) {
            var eventHandheld = eventHandheldList[_i];

            this._emitEvent(eventHandheld);
          }

          var eventMouseList = this._eventMouseList;

          for (var _i2 = 0, _length2 = eventMouseList.length; _i2 < _length2; ++_i2) {
            var eventMouse = eventMouseList[_i2];

            this._emitEvent(eventMouse);
          }

          var eventTouchList = this._eventTouchList;

          for (var _i3 = 0, _length3 = eventTouchList.length; _i3 < _length3; ++_i3) {
            var eventTouch = eventTouchList[_i3];
            var touches = eventTouch.getTouches();
            var touchesLength = touches.length;

            for (var j = 0; j < touchesLength; ++j) {
              eventTouch.touch = touches[j];
              eventTouch.propagationStopped = eventTouch.propagationImmediateStopped = false;

              this._emitEvent(eventTouch);
            }
          }

          var eventKeyboardList = this._eventKeyboardList;

          for (var _i4 = 0, _length4 = eventKeyboardList.length; _i4 < _length4; ++_i4) {
            var eventKeyboard = eventKeyboardList[_i4];

            this._emitEvent(eventKeyboard);
          }

          var eventAccelerationList = this._eventAccelerationList;

          for (var _i5 = 0, _length5 = eventAccelerationList.length; _i5 < _length5; ++_i5) {
            var eventAcceleration = eventAccelerationList[_i5];

            this._emitEvent(eventAcceleration);
          }

          var eventGamepadList = this._eventGamepadList;

          for (var _i6 = 0, _length6 = eventGamepadList.length; _i6 < _length6; ++_i6) {
            var eventGamepad = eventGamepadList[_i6];

            this._emitEvent(eventGamepad);
          }

          var eventHandleList = this._eventHandleList;

          for (var _i7 = 0, _length7 = eventHandleList.length; _i7 < _length7; ++_i7) {
            var eventHandle = eventHandleList[_i7];

            this._emitEvent(eventHandle);
          }

          this._clearEvents();
        };

        return Input;
      }());
      Input.EventType = InputEventType;
      var input = exports('input', new Input());

      var SystemEvent = exports('SystemEvent', function (_EventTarget) {
        _inheritsLoose(SystemEvent, _EventTarget);

        function SystemEvent() {
          var _this;

          _this = _EventTarget.call(this) || this;
          input.on(InputEventType.MOUSE_DOWN, function (e) {
            _this.emit(SystemEventType.MOUSE_DOWN, e);
          });
          input.on(InputEventType.MOUSE_MOVE, function (e) {
            _this.emit(SystemEventType.MOUSE_MOVE, e);
          });
          input.on(InputEventType.MOUSE_UP, function (e) {
            _this.emit(SystemEventType.MOUSE_UP, e);
          });
          input.on(InputEventType.MOUSE_WHEEL, function (e) {
            _this.emit(SystemEventType.MOUSE_WHEEL, e);
          });
          input.on(InputEventType.TOUCH_START, function (e) {
            _this.emit(SystemEventType.TOUCH_START, e.touch, e);
          });
          input.on(InputEventType.TOUCH_MOVE, function (e) {
            _this.emit(SystemEventType.TOUCH_MOVE, e.touch, e);
          });
          input.on(InputEventType.TOUCH_END, function (e) {
            _this.emit(SystemEventType.TOUCH_END, e.touch, e);
          });
          input.on(InputEventType.TOUCH_CANCEL, function (e) {
            _this.emit(SystemEventType.TOUCH_CANCEL, e.touch, e);
          });
          input.on(InputEventType.KEY_DOWN, function (e) {
            _this.emit(SystemEventType.KEY_DOWN, e);
          });
          input.on(InputEventType.KEY_PRESSING, function (e) {
            _this.emit(SystemEventType.KEY_DOWN, e);
          });
          input.on(InputEventType.KEY_UP, function (e) {
            _this.emit(SystemEventType.KEY_UP, e);
          });
          input.on(InputEventType.DEVICEMOTION, function (e) {
            _this.emit(SystemEventType.DEVICEMOTION, e);
          });
          return _this;
        }

        var _proto = SystemEvent.prototype;

        _proto.setAccelerometerEnabled = function setAccelerometerEnabled(isEnabled) {
          input.setAccelerometerEnabled(isEnabled);
        };

        _proto.setAccelerometerInterval = function setAccelerometerInterval(interval) {
          input.setAccelerometerInterval(interval);
        };

        _proto.on = function on(type, callback, target, once) {
          _EventTarget.prototype.on.call(this, type, callback, target, once);

          return callback;
        };

        _proto.off = function off(type, callback, target) {
          _EventTarget.prototype.off.call(this, type, callback, target);
        };

        return SystemEvent;
      }(EventTarget));
      SystemEvent.EventType = SystemEventType;
      legacyCC.SystemEvent = SystemEvent;
      var systemEvent = exports('systemEvent', new SystemEvent());
      legacyCC.systemEvent = systemEvent;

      var RenderScene = function () {
        RenderScene.registerCreateFunc = function registerCreateFunc(root) {
          root._createSceneFun = function (_root) {
            return new RenderScene(_root);
          };
        };

        function RenderScene(root) {
          this._root = void 0;
          this._name = '';
          this._cameras = [];
          this._models = [];
          this._lodGroups = [];
          this._batches = [];
          this._directionalLights = [];
          this._sphereLights = [];
          this._spotLights = [];
          this._mainLight = null;
          this._modelId = 0;
          this._lodStateCache = null;
          this._root = root;
        }

        var _proto = RenderScene.prototype;

        _proto.initialize = function initialize(info) {
          this._name = info.name;
          this._lodStateCache = new LodStateCache(this);
          return true;
        };

        _proto.update = function update(stamp) {
          var mainLight = this._mainLight;

          if (mainLight) {
            mainLight.update();
          }

          var sphereLights = this._sphereLights;

          for (var i = 0; i < sphereLights.length; i++) {
            var light = sphereLights[i];
            light.update();
          }

          var spotLights = this._spotLights;

          for (var _i = 0; _i < spotLights.length; _i++) {
            var _light = spotLights[_i];

            _light.update();
          }

          var models = this._models;

          for (var _i2 = 0; _i2 < models.length; _i2++) {
            var model = models[_i2];

            if (model.enabled) {
              model.updateTransform(stamp);
              model.updateUBOs(stamp);
            }
          }

          this._lodStateCache.updateLodState();
        };

        _proto.destroy = function destroy() {
          this.removeCameras();
          this.removeSphereLights();
          this.removeSpotLights();
          this.removeModels();
          this.removeLODGroups();

          this._lodStateCache.clearCache();
        };

        _proto.isCulledByLod = function isCulledByLod(camera, model) {
          return this._lodStateCache.isLodModelCulled(camera, model);
        };

        _proto.addCamera = function addCamera(cam) {
          cam.attachToScene(this);

          this._cameras.push(cam);

          this._lodStateCache.addCamera(cam);
        };

        _proto.removeCamera = function removeCamera(camera) {
          for (var i = 0; i < this._cameras.length; ++i) {
            if (this._cameras[i] === camera) {
              this._cameras.splice(i, 1);

              camera.detachFromScene();

              this._lodStateCache.removeCamera(camera);

              return;
            }
          }
        };

        _proto.removeCameras = function removeCameras() {
          for (var _iterator = _createForOfIteratorHelperLoose(this._cameras), _step; !(_step = _iterator()).done;) {
            var camera = _step.value;
            camera.detachFromScene();

            this._lodStateCache.removeCamera(camera);
          }

          this._cameras.splice(0);
        };

        _proto.setMainLight = function setMainLight(dl) {
          this._mainLight = dl;
        };

        _proto.unsetMainLight = function unsetMainLight(dl) {
          if (this._mainLight === dl) {
            var dlList = this._directionalLights;

            if (dlList.length) {
              this.setMainLight(dlList[dlList.length - 1]);

              if (this._mainLight.node) {
                this._mainLight.node.hasChangedFlags |= TransformBit.ROTATION;
              }

              return;
            }

            this.setMainLight(null);
          }
        };

        _proto.addDirectionalLight = function addDirectionalLight(dl) {
          dl.attachToScene(this);

          this._directionalLights.push(dl);
        };

        _proto.removeDirectionalLight = function removeDirectionalLight(dl) {
          for (var i = 0; i < this._directionalLights.length; ++i) {
            if (this._directionalLights[i] === dl) {
              dl.detachFromScene();

              this._directionalLights.splice(i, 1);

              return;
            }
          }
        };

        _proto.addSphereLight = function addSphereLight(pl) {
          pl.attachToScene(this);

          this._sphereLights.push(pl);
        };

        _proto.removeSphereLight = function removeSphereLight(pl) {
          for (var i = 0; i < this._sphereLights.length; ++i) {
            if (this._sphereLights[i] === pl) {
              pl.detachFromScene();

              this._sphereLights.splice(i, 1);

              return;
            }
          }
        };

        _proto.addSpotLight = function addSpotLight(sl) {
          sl.attachToScene(this);

          this._spotLights.push(sl);
        };

        _proto.removeSpotLight = function removeSpotLight(sl) {
          for (var i = 0; i < this._spotLights.length; ++i) {
            if (this._spotLights[i] === sl) {
              sl.detachFromScene();

              this._spotLights.splice(i, 1);

              return;
            }
          }
        };

        _proto.removeSphereLights = function removeSphereLights() {
          for (var i = 0; i < this._sphereLights.length; ++i) {
            this._sphereLights[i].detachFromScene();
          }

          this._sphereLights.length = 0;
        };

        _proto.removeSpotLights = function removeSpotLights() {
          for (var i = 0; i < this._spotLights.length; ++i) {
            this._spotLights[i].detachFromScene();
          }

          this._spotLights = [];
        };

        _proto.addModel = function addModel(m) {
          m.attachToScene(this);

          this._models.push(m);
        };

        _proto.removeModel = function removeModel(model) {
          for (var i = 0; i < this._models.length; ++i) {
            if (this._models[i] === model) {
              this._lodStateCache.removeModel(model);

              model.detachFromScene();

              this._models.splice(i, 1);

              return;
            }
          }
        };

        _proto.removeModels = function removeModels() {
          for (var _iterator2 = _createForOfIteratorHelperLoose(this._models), _step2; !(_step2 = _iterator2()).done;) {
            var m = _step2.value;

            this._lodStateCache.removeModel(m);

            m.detachFromScene();
            m.destroy();
          }

          this._models.length = 0;
        };

        _proto.addBatch = function addBatch(batch) {
          this._batches.push(batch);
        };

        _proto.removeBatch = function removeBatch(batch) {
          for (var i = 0; i < this._batches.length; ++i) {
            if (this._batches[i] === batch) {
              this._batches.splice(i, 1);

              return;
            }
          }
        };

        _proto.removeBatches = function removeBatches() {
          this._batches.length = 0;
        };

        _proto.addLODGroup = function addLODGroup(lodGroup) {
          this._lodGroups.push(lodGroup);

          lodGroup.attachToScene(this);

          this._lodStateCache.addLodGroup(lodGroup);
        };

        _proto.removeLODGroup = function removeLODGroup(lodGroup) {
          var index = this._lodGroups.indexOf(lodGroup);

          if (index >= 0) {
            this._lodGroups.splice(index, 1);

            lodGroup.detachFromScene();

            this._lodStateCache.removeLodGroup(lodGroup);
          }
        };

        _proto.removeLODGroups = function removeLODGroups() {
          for (var _iterator3 = _createForOfIteratorHelperLoose(this._lodGroups), _step3; !(_step3 = _iterator3()).done;) {
            var group = _step3.value;

            this._lodStateCache.removeLodGroup(group);
          }

          this._lodGroups.length = 0;
        };

        _proto.onGlobalPipelineStateChanged = function onGlobalPipelineStateChanged() {
          for (var _iterator4 = _createForOfIteratorHelperLoose(this._models), _step4; !(_step4 = _iterator4()).done;) {
            var m = _step4.value;
            m.onGlobalPipelineStateChanged();
          }
        };

        _proto.generateModelId = function generateModelId() {
          return this._modelId++;
        };

        _createClass(RenderScene, [{
          key: "root",
          get: function get() {
            return this._root;
          }
        }, {
          key: "name",
          get: function get() {
            return this._name;
          }
        }, {
          key: "cameras",
          get: function get() {
            return this._cameras;
          }
        }, {
          key: "mainLight",
          get: function get() {
            return this._mainLight;
          }
        }, {
          key: "sphereLights",
          get: function get() {
            return this._sphereLights;
          }
        }, {
          key: "spotLights",
          get: function get() {
            return this._spotLights;
          }
        }, {
          key: "models",
          get: function get() {
            return this._models;
          }
        }, {
          key: "batches",
          get: function get() {
            return this._batches;
          }
        }, {
          key: "lodGroups",
          get: function get() {
            return this._lodGroups;
          }
        }]);

        return RenderScene;
      }();

      var ModelInfo = function ModelInfo() {
        this.ownerLodLevel = -1;
        this.lodGroup = null;
        this.visibleCameras = new Map();
      };

      var LODInfo = function LODInfo() {
        this.usedLevel = -1;
        this.transformDirty = true;
      };

      var LodStateCache = function () {
        function LodStateCache(scene) {
          this._renderScene = null;
          this._modelsInLODGroup = new Map();
          this._lodStateInCamera = new Map();
          this._newAddedLodGroupVec = new Array();
          this._renderScene = scene;
        }

        var _proto2 = LodStateCache.prototype;

        _proto2.addCamera = function addCamera(camera) {

          for (var _iterator5 = _createForOfIteratorHelperLoose(this._renderScene.lodGroups), _step5; !(_step5 = _iterator5()).done;) {
            var lodGroup = _step5.value;
            var layer = lodGroup.node.layer;

            if ((camera.visibility & layer) === layer) {
              if (!this._lodStateInCamera.has(camera)) {
                this._lodStateInCamera.set(camera, new Map());
              }

              break;
            }
          }
        };

        _proto2.removeCamera = function removeCamera(camera) {
          if (this._lodStateInCamera.has(camera)) {
            this._lodStateInCamera["delete"](camera);
          }
        };

        _proto2.addLodGroup = function addLodGroup(lodGroup) {
          this._newAddedLodGroupVec.push(lodGroup);

          for (var _iterator6 = _createForOfIteratorHelperLoose(this._renderScene.cameras), _step6; !(_step6 = _iterator6()).done;) {
            var camera = _step6.value;

            if (this._lodStateInCamera.has(camera)) {
              continue;
            }

            var layer = lodGroup.node.layer;

            if ((camera.visibility & layer) === layer) {
              this._lodStateInCamera.set(camera, new Map());
            }
          }
        };

        _proto2.removeLodGroup = function removeLodGroup(lodGroup) {
          for (var index = 0; index < lodGroup.lodCount; index++) {
            var lod = lodGroup.lodDataArray[index];

            for (var _iterator7 = _createForOfIteratorHelperLoose(lod.models), _step7; !(_step7 = _iterator7()).done;) {
              var model = _step7.value;

              this._modelsInLODGroup["delete"](model);
            }
          }

          for (var _iterator8 = _createForOfIteratorHelperLoose(this._lodStateInCamera), _step8; !(_step8 = _iterator8()).done;) {
            var visibleCamera = _step8.value;
            visibleCamera[1]["delete"](lodGroup);
          }
        };

        _proto2.removeModel = function removeModel(model) {
          if (this._modelsInLODGroup.has(model)) {
            this._modelsInLODGroup["delete"](model);
          }
        };

        _proto2.updateLodState = function updateLodState() {
          var _this = this;

          for (var _iterator9 = _createForOfIteratorHelperLoose(this._newAddedLodGroupVec), _step9; !(_step9 = _iterator9()).done;) {
            var addedLodGroup = _step9.value;

            for (var index = 0; index < addedLodGroup.lodCount; index++) {
              var lod = addedLodGroup.lodDataArray[index];

              for (var _iterator11 = _createForOfIteratorHelperLoose(lod.models), _step11; !(_step11 = _iterator11()).done;) {
                var model = _step11.value;

                var modelInfo = this._modelsInLODGroup.get(model);

                if (!modelInfo) {
                  modelInfo = new ModelInfo();
                }

                modelInfo.ownerLodLevel = index;
                modelInfo.lodGroup = addedLodGroup;

                this._modelsInLODGroup.set(model, modelInfo);
              }
            }
          }

          this._newAddedLodGroupVec.length = 0;

          var _loop = function _loop() {
            var lodGroup = _step10.value;

            if (lodGroup.enabled) {
              var lodLevels = lodGroup.getLockedLODLevels();
              var count = lodLevels.length;

              if (count > 0) {
                if (lodGroup.node.hasChangedFlags > 0) {
                  for (var _iterator12 = _createForOfIteratorHelperLoose(_this._lodStateInCamera), _step12; !(_step12 = _iterator12()).done;) {
                    var visibleCamera = _step12.value;
                    var lodInfo = visibleCamera[1].get(lodGroup);

                    if (!lodInfo) {
                      lodInfo = new LODInfo();
                      visibleCamera[1].set(lodGroup, lodInfo);
                    }

                    lodInfo.transformDirty = true;
                  }
                }

                if (lodGroup.isLockLevelChanged()) {
                  lodGroup.resetLockChangeFlag();

                  for (var _index = 0; _index < lodGroup.lodCount; _index++) {
                    var _lod = lodGroup.lodDataArray[_index];

                    for (var _iterator13 = _createForOfIteratorHelperLoose(_lod.models), _step13; !(_step13 = _iterator13()).done;) {
                      var _model = _step13.value;

                      var _modelInfo = _this._modelsInLODGroup.get(_model);

                      if (!_modelInfo) {
                        continue;
                      }

                      _modelInfo.visibleCameras.clear();

                      if (_model.node && _model.node.active) {
                        for (var _iterator14 = _createForOfIteratorHelperLoose(lodLevels), _step14; !(_step14 = _iterator14()).done;) {
                          var visibleIndex = _step14.value;

                          if (_modelInfo.ownerLodLevel === visibleIndex) {
                            for (var _iterator15 = _createForOfIteratorHelperLoose(_this._lodStateInCamera), _step15; !(_step15 = _iterator15()).done;) {
                              var _visibleCamera = _step15.value;

                              _modelInfo.visibleCameras.set(_visibleCamera[0], true);
                            }

                            break;
                          }
                        }
                      }
                    }
                  }
                }

                return "continue";
              }

              var hasUpdated = false;

              for (var _iterator16 = _createForOfIteratorHelperLoose(_this._lodStateInCamera), _step16; !(_step16 = _iterator16()).done;) {
                var _visibleCamera2 = _step16.value;

                var _lodInfo = _visibleCamera2[1].get(lodGroup);

                if (!_lodInfo) {
                  _lodInfo = new LODInfo();

                  _visibleCamera2[1].set(lodGroup, _lodInfo);
                }

                var cameraChangeFlags = _visibleCamera2[0].node.hasChangedFlags;
                var lodChangeFlags = lodGroup.node.hasChangedFlags;

                if (cameraChangeFlags > 0 || lodChangeFlags > 0 || _lodInfo.transformDirty) {
                  if (_lodInfo.transformDirty) {
                    _lodInfo.transformDirty = false;
                  }

                  var _index3 = lodGroup.getVisibleLODLevel(_visibleCamera2[0]);

                  if (_index3 !== _lodInfo.usedLevel) {
                    _lodInfo.usedLevel = _index3;
                    hasUpdated = true;
                  }
                }
              }

              if (lodGroup.isLockLevelChanged()) {
                lodGroup.resetLockChangeFlag();
                hasUpdated = true;
              }

              if (hasUpdated) {
                for (var _index2 = 0; _index2 < lodGroup.lodCount; _index2++) {
                  var _lod2 = lodGroup.lodDataArray[_index2];

                  var _loop2 = function _loop2() {
                    var model = _step17.value;

                    var modelInfo = _this._modelsInLODGroup.get(model);

                    if (modelInfo) {
                      modelInfo.visibleCameras.clear();

                      if (model.node && model.node.active) {
                        _this._lodStateInCamera.forEach(function (lodMap, camera) {
                          var visibleLevel = -1;
                          var lodInfo = lodMap.get(lodGroup);

                          if (lodInfo) {
                            visibleLevel = lodInfo.usedLevel;
                          }

                          if (modelInfo.ownerLodLevel === visibleLevel) {
                            modelInfo.visibleCameras.set(camera, true);
                          }
                        });
                      }
                    }
                  };

                  for (var _iterator17 = _createForOfIteratorHelperLoose(_lod2.models), _step17; !(_step17 = _iterator17()).done;) {
                    _loop2();
                  }
                }
              }
            }
          };

          for (var _iterator10 = _createForOfIteratorHelperLoose(this._renderScene.lodGroups), _step10; !(_step10 = _iterator10()).done;) {
            var _ret = _loop();

            if (_ret === "continue") continue;
          }
        };

        _proto2.isLodModelCulled = function isLodModelCulled(camera, model) {
          var modelInfo = this._modelsInLODGroup.get(model);

          if (!modelInfo) {
            return false;
          }

          return !modelInfo.visibleCameras.has(camera);
        };

        _proto2.clearCache = function clearCache() {
          this._modelsInLODGroup.clear();

          this._lodStateInCamera.clear();

          this._newAddedLodGroupVec.length = 0;
        };

        _proto2.isLodGroupVisibleByCamera = function isLodGroupVisibleByCamera(lodGroup, camera) {
          var layer = lodGroup.node.layer;
          return (camera.visibility & layer) === layer;
        };

        return LodStateCache;
      }();

      var _orientationMap;
      var orientationMap$1 = (_orientationMap = {}, _orientationMap[Orientation.PORTRAIT] = SurfaceTransform.IDENTITY, _orientationMap[Orientation.LANDSCAPE_RIGHT] = SurfaceTransform.ROTATE_90, _orientationMap[Orientation.PORTRAIT_UPSIDE_DOWN] = SurfaceTransform.ROTATE_180, _orientationMap[Orientation.LANDSCAPE_LEFT] = SurfaceTransform.ROTATE_270, _orientationMap);
      var RenderWindow = function () {
        RenderWindow.registerCreateFunc = function registerCreateFunc(root) {
          root._createWindowFun = function (_root) {
            return new RenderWindow(_root);
          };
        };

        function RenderWindow(root) {
          this._title = '';
          this._width = 1;
          this._height = 1;
          this._swapchain = null;
          this._renderPass = null;
          this._colorTextures = [];
          this._depthStencilTexture = null;
          this._cameras = [];
          this._hasOnScreenAttachments = false;
          this._hasOffScreenAttachments = false;
          this._framebuffer = null;
          this._device = null;
        }

        var _proto = RenderWindow.prototype;

        _proto.initialize = function initialize(device, info) {
          if (info.title !== undefined) {
            this._title = info.title;
          }

          if (info.swapchain !== undefined) {
            this._swapchain = info.swapchain;
          }

          this._width = info.width;
          this._height = info.height;
          this._device = device;
          this._renderPass = device.createRenderPass(info.renderPassInfo);

          if (info.swapchain) {
            this._swapchain = info.swapchain;

            this._colorTextures.push(info.swapchain.colorTexture);

            this._depthStencilTexture = info.swapchain.depthStencilTexture;
          } else {
            for (var i = 0; i < info.renderPassInfo.colorAttachments.length; i++) {
              this._colorTextures.push(device.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.COLOR_ATTACHMENT | TextureUsageBit.SAMPLED | TextureUsageBit.TRANSFER_SRC, info.renderPassInfo.colorAttachments[i].format, this._width, this._height)));
            }

            if (info.renderPassInfo.depthStencilAttachment.format !== Format.UNKNOWN) {
              this._depthStencilTexture = device.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.DEPTH_STENCIL_ATTACHMENT | TextureUsageBit.SAMPLED, info.renderPassInfo.depthStencilAttachment.format, this._width, this._height));
              this._hasOffScreenAttachments = true;
            }
          }

          this._framebuffer = device.createFramebuffer(new FramebufferInfo(this._renderPass, this._colorTextures, this._depthStencilTexture));
          return true;
        };

        _proto.destroy = function destroy() {
          this.clearCameras();

          if (this._framebuffer) {
            this._framebuffer.destroy();

            this._framebuffer = null;
          }

          if (this._depthStencilTexture) {
            this._depthStencilTexture.destroy();

            this._depthStencilTexture = null;
          }

          for (var i = 0; i < this._colorTextures.length; i++) {
            var colorTexture = this._colorTextures[i];

            if (colorTexture) {
              colorTexture.destroy();
            }
          }

          this._colorTextures.length = 0;
          this._device = null;
        };

        _proto.resize = function resize(width, height) {
          if (this._swapchain) {
            this._swapchain.resize(width, height, orientationMap$1[screenAdapter.orientation]);

            this._width = this._swapchain.width;
            this._height = this._swapchain.height;
          } else {
            for (var i = 0; i < this._colorTextures.length; i++) {
              this._colorTextures[i].resize(width, height);
            }

            if (this._depthStencilTexture) {
              this._depthStencilTexture.resize(width, height);
            }

            this._width = width;
            this._height = height;
          }

          if (this.framebuffer) {
            this.framebuffer.destroy();
            this._framebuffer = this._device.createFramebuffer(new FramebufferInfo(this._renderPass, this._colorTextures, this._depthStencilTexture));
          }

          for (var _iterator = _createForOfIteratorHelperLoose(this._cameras), _step; !(_step = _iterator()).done;) {
            var camera = _step.value;
            camera.resize(width, height);
          }
        };

        _proto.extractRenderCameras = function extractRenderCameras(cameras) {
          for (var j = 0; j < this._cameras.length; j++) {
            var camera = this._cameras[j];

            if (camera.enabled) {
              camera.update();
              cameras.push(camera);
            }
          }
        };

        _proto.attachCamera = function attachCamera(camera) {
          for (var i = 0; i < this._cameras.length; i++) {
            if (this._cameras[i] === camera) {
              return;
            }
          }

          this._cameras.push(camera);

          this.sortCameras();
        };

        _proto.detachCamera = function detachCamera(camera) {
          for (var i = 0; i < this._cameras.length; ++i) {
            if (this._cameras[i] === camera) {
              this._cameras.splice(i, 1);

              return;
            }
          }
        };

        _proto.clearCameras = function clearCameras() {
          this._cameras.length = 0;
        };

        _proto.sortCameras = function sortCameras() {
          this._cameras.sort(function (a, b) {
            return a.priority - b.priority;
          });
        };

        _createClass(RenderWindow, [{
          key: "width",
          get: function get() {
            return this._width;
          }
        }, {
          key: "height",
          get: function get() {
            return this._height;
          }
        }, {
          key: "swapchain",
          get: function get() {
            return this._swapchain;
          }
        }, {
          key: "framebuffer",
          get: function get() {
            return this._framebuffer;
          }
        }, {
          key: "cameras",
          get: function get() {
            return this._cameras;
          }
        }]);

        return RenderWindow;
      }();

      var Root = exports('Root', function () {
        function Root(device) {
          var _this = this;

          this._createSceneFun = null;
          this._createWindowFun = null;
          this._device = void 0;
          this._windows = [];
          this._mainWindow = null;
          this._curWindow = null;
          this._tempWindow = null;
          this._usesCustomPipeline = true;
          this._pipeline = null;
          this._pipelineEvent = null;
          this._classicPipeline = null;
          this._customPipeline = null;
          this._batcher = null;
          this._dataPoolMgr = void 0;
          this._scenes = [];
          this._modelPools = new Map();
          this._cameraPool = null;
          this._lightPools = new Map();
          this._debugView = new DebugView();
          this._fpsTime = 0;
          this._frameCount = 0;
          this._fps = 0;
          this._fixedFPS = 0;
          this._useDeferredPipeline = false;
          this._fixedFPSFrameTime = 0;
          this._cumulativeTime = 0;
          this._frameTime = 0;
          this._cameraList = [];
          this._device = device;
          this._dataPoolMgr = legacyCC.internal.DataPoolManager && new legacyCC.internal.DataPoolManager(device);
          RenderScene.registerCreateFunc(this);
          RenderWindow.registerCreateFunc(this);
          this._cameraPool = new Pool$1(function () {
            return new Camera(_this._device);
          }, 4, function (cam) {
            return cam.destroy();
          });
        }

        var _proto = Root.prototype;

        _proto.initialize = function initialize(info) {
          var _this$_dataPoolMgr;

          var swapchain = deviceManager.swapchain;
          var colorAttachment = new ColorAttachment();
          colorAttachment.format = swapchain.colorTexture.format;
          var depthStencilAttachment = new DepthStencilAttachment();
          depthStencilAttachment.format = swapchain.depthStencilTexture.format;
          depthStencilAttachment.depthStoreOp = StoreOp.DISCARD;
          depthStencilAttachment.stencilStoreOp = StoreOp.DISCARD;
          var renderPassInfo = new RenderPassInfo([colorAttachment], depthStencilAttachment);
          this._mainWindow = this.createWindow({
            title: 'rootMainWindow',
            width: swapchain.width,
            height: swapchain.height,
            renderPassInfo: renderPassInfo,
            swapchain: swapchain
          });
          this._curWindow = this._mainWindow;
          var customJointTextureLayouts = settings.querySettings(Settings.Category.ANIMATION, 'customJointTextureLayouts') || [];
          (_this$_dataPoolMgr = this._dataPoolMgr) === null || _this$_dataPoolMgr === void 0 ? void 0 : _this$_dataPoolMgr.jointTexturePool.registerCustomTextureLayouts(customJointTextureLayouts);

          this._resizeMaxJointForDS();
        };

        _proto.destroy = function destroy() {
          this.destroyScenes();

          if (this._pipeline) {
            this._pipeline.destroy();

            this._pipeline = null;
            this._pipelineEvent = null;
          }

          if (this._batcher) {
            this._batcher.destroy();

            this._batcher = null;
          }

          this._curWindow = null;
          this._mainWindow = null;
          this.dataPoolManager.clear();

          if (legacyCC.rendering) {
            legacyCC.rendering.destroy();
          }
        };

        _proto.resize = function resize(width, height, windowId) {
          for (var _iterator = _createForOfIteratorHelperLoose(this._windows), _step; !(_step = _iterator()).done;) {
            var window = _step.value;

            if (window.swapchain) {
              window.resize(width, height);
            }
          }
        };

        _proto.setRenderPipeline = function setRenderPipeline(rppl) {
          var internal = legacyCC.internal,
              director = legacyCC.director,
              rendering = legacyCC.rendering;

          if (rppl instanceof DeferredPipeline) {
            this._useDeferredPipeline = true;
          }

          var isCreateDefaultPipeline = false;

          if (!rppl) {
            rppl = createDefaultPipeline();
            isCreateDefaultPipeline = true;
          }

          if (!this._useDeferredPipeline || !this.device.hasFeature(Feature$1.COMPUTE_SHADER)) {
            rppl.clusterEnabled = false;
          }

          rppl.bloomEnabled = false;

          if (macro.CUSTOM_PIPELINE_NAME !== '' && rendering && this.usesCustomPipeline) {
            this._customPipeline = rendering.createCustomPipeline();
            isCreateDefaultPipeline = true;
            this._pipeline = this._customPipeline;
          } else {
            this._classicPipeline = rppl;
            this._pipeline = this._classicPipeline;
            this._pipelineEvent = this._classicPipeline;
            this._usesCustomPipeline = false;
          }

          var renderMode = settings.querySettings(Settings.Category.RENDERING, 'renderMode');

          if (renderMode !== LegacyRenderMode.HEADLESS || this._classicPipeline) {
            if (!this._pipeline.activate(this._mainWindow.swapchain)) {
              if (isCreateDefaultPipeline) {
                this._pipeline.destroy();
              }

              this._classicPipeline = null;
              this._customPipeline = null;
              this._pipeline = null;
              this._pipelineEvent = null;
              return false;
            }
          }

          var scene = director.getScene();

          if (scene) {
            scene.globals.activate();
          }

          this.onGlobalPipelineStateChanged();

          if (!this._batcher && internal.Batcher2D) {
            this._batcher = new internal.Batcher2D(this);

            if (!this._batcher.initialize()) {
              this.destroy();
              return false;
            }
          }

          return true;
        };

        _proto.onGlobalPipelineStateChanged = function onGlobalPipelineStateChanged() {
          for (var i = 0; i < this._scenes.length; i++) {
            this._scenes[i].onGlobalPipelineStateChanged();
          }

          this._pipeline.onGlobalPipelineStateChanged();
        };

        _proto.activeWindow = function activeWindow(window) {
          this._curWindow = window;
        };

        _proto.resetCumulativeTime = function resetCumulativeTime() {
          this._cumulativeTime = 0;
        };

        _proto.frameMove = function frameMove(deltaTime) {
          var director = legacyCC.director,
              Director = legacyCC.Director;
          this._frameTime = deltaTime;
          ++this._frameCount;
          this._cumulativeTime += deltaTime;
          this._fpsTime += deltaTime;

          if (this._fpsTime > 1.0) {
            this._fps = this._frameCount;
            this._frameCount = 0;
            this._fpsTime = 0.0;
          }

          for (var i = 0; i < this._scenes.length; ++i) {
            this._scenes[i].removeBatches();
          }

          var windows = this._windows;
          var cameraList = this._cameraList;
          cameraList.length = 0;

          for (var _i = 0; _i < windows.length; _i++) {
            var window = windows[_i];
            window.extractRenderCameras(cameraList);
          }

          if (this._pipeline && cameraList.length > 0) {
            this._device.acquire([deviceManager.swapchain]);

            var scenes = this._scenes;
            var stamp = director.getTotalFrames();

            if (this._batcher) {
              this._batcher.update();

              this._batcher.uploadBuffers();
            }

            for (var _i2 = 0; _i2 < scenes.length; _i2++) {
              scenes[_i2].update(stamp);
            }

            director.emit(Director.EVENT_BEFORE_COMMIT);
            cameraList.sort(function (a, b) {
              return a.priority - b.priority;
            });

            for (var _i3 = 0; _i3 < cameraList.length; ++_i3) {
              var _cameraList$_i3$geome;

              (_cameraList$_i3$geome = cameraList[_i3].geometryRenderer) === null || _cameraList$_i3$geome === void 0 ? void 0 : _cameraList$_i3$geome.update();
            }

            director.emit(Director.EVENT_BEFORE_RENDER);

            this._pipeline.render(cameraList);

            director.emit(Director.EVENT_AFTER_RENDER);

            this._device.present();
          }

          if (this._batcher) this._batcher.reset();
        };

        _proto.createWindow = function createWindow(info) {
          var window = this._createWindowFun(this);

          window.initialize(this.device, info);

          this._windows.push(window);

          return window;
        };

        _proto.destroyWindow = function destroyWindow(window) {
          for (var i = 0; i < this._windows.length; ++i) {
            if (this._windows[i] === window) {
              window.destroy();

              this._windows.splice(i, 1);

              return;
            }
          }
        };

        _proto.destroyWindows = function destroyWindows() {
          for (var _iterator2 = _createForOfIteratorHelperLoose(this._windows), _step2; !(_step2 = _iterator2()).done;) {
            var window = _step2.value;
            window.destroy();
          }

          this._windows.length = 0;
        };

        _proto.createScene = function createScene(info) {
          var scene = this._createSceneFun(this);

          scene.initialize(info);

          this._scenes.push(scene);

          return scene;
        };

        _proto.destroyScene = function destroyScene(scene) {
          for (var i = 0; i < this._scenes.length; ++i) {
            if (this._scenes[i] === scene) {
              scene.destroy();

              this._scenes.splice(i, 1);

              return;
            }
          }
        };

        _proto.destroyScenes = function destroyScenes() {
          for (var _iterator3 = _createForOfIteratorHelperLoose(this._scenes), _step3; !(_step3 = _iterator3()).done;) {
            var scene = _step3.value;
            scene.destroy();
          }

          this._scenes.length = 0;
        };

        _proto.createModel = function createModel(ModelCtor) {
          var p = this._modelPools.get(ModelCtor);

          if (!p) {
            this._modelPools.set(ModelCtor, new Pool$1(function () {
              return new ModelCtor();
            }, 10, function (obj) {
              return obj.destroy();
            }));

            p = this._modelPools.get(ModelCtor);
          }

          var model = p.alloc();
          model.initialize();
          return model;
        };

        _proto.destroyModel = function destroyModel(m) {
          var p = this._modelPools.get(m.constructor);

          if (p) {
            p.free(m);

            if (m.scene) {
              m.scene.removeModel(m);
            }
          } else {
            warnID(1300, m.constructor.name);
          }

          m.destroy();
        };

        _proto.createCamera = function createCamera() {
          return this._cameraPool.alloc();
        };

        _proto.createLight = function createLight(LightCtor) {
          var l = this._lightPools.get(LightCtor);

          if (!l) {
            this._lightPools.set(LightCtor, new Pool$1(function () {
              return new LightCtor();
            }, 4, function (obj) {
              return obj.destroy();
            }));

            l = this._lightPools.get(LightCtor);
          }

          var light = l.alloc();
          light.initialize();
          return light;
        };

        _proto.destroyLight = function destroyLight(l) {
          if (l.scene) {
            switch (l.type) {
              case LightType.DIRECTIONAL:
                l.scene.removeDirectionalLight(l);
                break;

              case LightType.SPHERE:
                l.scene.removeSphereLight(l);
                break;

              case LightType.SPOT:
                l.scene.removeSpotLight(l);
                break;
            }
          }

          l.destroy();
        };

        _proto.recycleLight = function recycleLight(l) {
          var p = this._lightPools.get(l.constructor);

          if (p) {
            p.free(l);

            if (l.scene) {
              switch (l.type) {
                case LightType.DIRECTIONAL:
                  l.scene.removeDirectionalLight(l);
                  break;

                case LightType.SPHERE:
                  l.scene.removeSphereLight(l);
                  break;

                case LightType.SPOT:
                  l.scene.removeSpotLight(l);
                  break;
              }
            }
          }
        };

        _proto._resizeMaxJointForDS = function _resizeMaxJointForDS() {
          var usedUBOVectorCount = (UBOGlobal.COUNT + UBOCamera.COUNT + UBOShadow.COUNT + UBOLocal.COUNT) / 4;
          var maxJoints = Math.floor((deviceManager.gfxDevice.capabilities.maxVertexUniformVectors - usedUBOVectorCount) / 3);
          maxJoints = maxJoints < 256 ? maxJoints : 256;
          localDescriptorSetLayout_ResizeMaxJoints(maxJoints);
        };

        _createClass(Root, [{
          key: "device",
          get: function get() {
            return this._device;
          }
        }, {
          key: "mainWindow",
          get: function get() {
            return this._mainWindow;
          }
        }, {
          key: "curWindow",
          get: function get() {
            return this._curWindow;
          },
          set: function set(window) {
            this._curWindow = window;
          }
        }, {
          key: "tempWindow",
          get: function get() {
            return this._tempWindow;
          },
          set: function set(window) {
            this._tempWindow = window;
          }
        }, {
          key: "windows",
          get: function get() {
            return this._windows;
          }
        }, {
          key: "usesCustomPipeline",
          get: function get() {
            return this._usesCustomPipeline;
          }
        }, {
          key: "pipeline",
          get: function get() {
            return this._pipeline;
          }
        }, {
          key: "customPipeline",
          get: function get() {
            return this._customPipeline;
          }
        }, {
          key: "pipelineEvent",
          get: function get() {
            return this._pipelineEvent;
          }
        }, {
          key: "batcher2D",
          get: function get() {
            return this._batcher;
          }
        }, {
          key: "scenes",
          get: function get() {
            return this._scenes;
          }
        }, {
          key: "debugView",
          get: function get() {
            return this._debugView;
          }
        }, {
          key: "cumulativeTime",
          get: function get() {
            return this._cumulativeTime;
          }
        }, {
          key: "frameTime",
          get: function get() {
            return this._frameTime;
          }
        }, {
          key: "frameCount",
          get: function get() {
            return this._frameCount;
          }
        }, {
          key: "fps",
          get: function get() {
            return this._fps;
          }
        }, {
          key: "fixedFPS",
          get: function get() {
            return this._fixedFPS;
          },
          set: function set(fps) {
            if (fps > 0) {
              this._fixedFPS = fps;
              this._fixedFPSFrameTime = 1000.0 / fps;
            } else {
              this._fixedFPSFrameTime = 0;
            }
          }
        }, {
          key: "dataPoolManager",
          get: function get() {
            return this._dataPoolMgr;
          }
        }, {
          key: "useDeferredPipeline",
          get: function get() {
            return this._useDeferredPipeline;
          }
        }, {
          key: "cameraList",
          get: function get() {
            return this._cameraList;
          }
        }]);

        return Root;
      }());
      legacyCC.Root = Root;

      CCClass.Attr.setClassAttr(EventHandler, 'target', 'type', 'Object');
      CCClass.Attr.setClassAttr(EventHandler, 'target', 'ctor', Node$1);

      var _cachedArray = new Array(16);

      var _currentHovered = null;
      var pos = new Vec2();
      var _touchEvents = [NodeEventType.TOUCH_START, NodeEventType.TOUCH_MOVE, NodeEventType.TOUCH_END, NodeEventType.TOUCH_CANCEL];
      var _mouseEvents = [NodeEventType.MOUSE_DOWN, NodeEventType.MOUSE_ENTER, NodeEventType.MOUSE_MOVE, NodeEventType.MOUSE_LEAVE, NodeEventType.MOUSE_UP, NodeEventType.MOUSE_WHEEL];
      var DispatcherEventType;

      (function (DispatcherEventType) {
        DispatcherEventType[DispatcherEventType["ADD_POINTER_EVENT_PROCESSOR"] = 0] = "ADD_POINTER_EVENT_PROCESSOR";
        DispatcherEventType[DispatcherEventType["REMOVE_POINTER_EVENT_PROCESSOR"] = 1] = "REMOVE_POINTER_EVENT_PROCESSOR";
        DispatcherEventType[DispatcherEventType["MARK_LIST_DIRTY"] = 2] = "MARK_LIST_DIRTY";
      })(DispatcherEventType || (DispatcherEventType = {}));

      var NodeEventProcessor = function () {
        function NodeEventProcessor(node) {
          this.claimedTouchIdList = [];
          this.maskList = null;
          this.cachedCameraPriority = 0;
          this.previousMouseIn = false;
          this.bubblingTarget = null;
          this.capturingTarget = null;
          this.shouldHandleEventMouse = false;
          this.shouldHandleEventTouch = false;
          this._dispatchingTouch = null;
          this._isEnabled = false;
          this._node = void 0;
          this._node = node;
        }

        var _proto = NodeEventProcessor.prototype;

        _proto.setEnabled = function setEnabled(value, recursive) {
          if (recursive === void 0) {
            recursive = false;
          }

          if (this._isEnabled === value) {
            return;
          }

          this._isEnabled = value;
          var node = this.node;
          var children = node.children;

          if (value) {
            this._attachMask();
          }

          NodeEventProcessor.callbacksInvoker.emit(DispatcherEventType.MARK_LIST_DIRTY);

          if (recursive && children.length > 0) {
            for (var i = 0; i < children.length; ++i) {
              var child = children[i];

              child._eventProcessor.setEnabled(value, true);
            }
          }
        };

        _proto.reattach = function reattach() {
          var _this = this;

          var currentMaskList;
          this.node.walk(function (node) {
            if (!currentMaskList) {
              currentMaskList = _this._searchComponentsInParent(NodeEventProcessor._maskComp);
            }

            node.eventProcessor.maskList = currentMaskList;
          });
        };

        _proto.destroy = function destroy() {
          if (_currentHovered === this._node) {
            _currentHovered = null;
          }

          if (this.capturingTarget) this.capturingTarget.clear();
          if (this.bubblingTarget) this.bubblingTarget.clear();
          NodeEventProcessor.callbacksInvoker.emit(DispatcherEventType.REMOVE_POINTER_EVENT_PROCESSOR, this);

          if (this._dispatchingTouch) {
            var cancelEvent = new EventTouch([this._dispatchingTouch], true, InputEventType.TOUCH_CANCEL);
            cancelEvent.touch = this._dispatchingTouch;
            this.dispatchEvent(cancelEvent);
            this._dispatchingTouch = null;
          }
        };

        _proto.on = function on(type, callback, target, useCapture) {
          this._tryEmittingAddEvent(type);

          useCapture = !!useCapture;
          var invoker;

          if (useCapture) {
            var _this$capturingTarget;

            invoker = (_this$capturingTarget = this.capturingTarget) !== null && _this$capturingTarget !== void 0 ? _this$capturingTarget : this.capturingTarget = this._newCallbacksInvoker();
          } else {
            var _this$bubblingTarget;

            invoker = (_this$bubblingTarget = this.bubblingTarget) !== null && _this$bubblingTarget !== void 0 ? _this$bubblingTarget : this.bubblingTarget = this._newCallbacksInvoker();
          }

          invoker.on(type, callback, target);
          return callback;
        };

        _proto.once = function once(type, callback, target, useCapture) {
          this._tryEmittingAddEvent(type);

          useCapture = !!useCapture;
          var invoker;

          if (useCapture) {
            var _this$capturingTarget2;

            invoker = (_this$capturingTarget2 = this.capturingTarget) !== null && _this$capturingTarget2 !== void 0 ? _this$capturingTarget2 : this.capturingTarget = this._newCallbacksInvoker();
          } else {
            var _this$bubblingTarget2;

            invoker = (_this$bubblingTarget2 = this.bubblingTarget) !== null && _this$bubblingTarget2 !== void 0 ? _this$bubblingTarget2 : this.bubblingTarget = this._newCallbacksInvoker();
          }

          invoker.on(type, callback, target, true);
          return callback;
        };

        _proto.off = function off(type, callback, target, useCapture) {
          var _invoker;

          useCapture = !!useCapture;
          var invoker;

          if (useCapture) {
            invoker = this.capturingTarget;
          } else {
            invoker = this.bubblingTarget;
          }

          (_invoker = invoker) === null || _invoker === void 0 ? void 0 : _invoker.off(type, callback, target);
        };

        _proto.targetOff = function targetOff(target) {
          var _this$capturingTarget3, _this$bubblingTarget3;

          (_this$capturingTarget3 = this.capturingTarget) === null || _this$capturingTarget3 === void 0 ? void 0 : _this$capturingTarget3.removeAll(target);
          (_this$bubblingTarget3 = this.bubblingTarget) === null || _this$bubblingTarget3 === void 0 ? void 0 : _this$bubblingTarget3.removeAll(target);

          if (this.shouldHandleEventTouch && !this._hasTouchListeners()) {
            this.shouldHandleEventTouch = false;
          }

          if (this.shouldHandleEventMouse && !this._hasMouseListeners()) {
            this.shouldHandleEventMouse = false;
          }

          if (!this._hasPointerListeners()) {
            NodeEventProcessor.callbacksInvoker.emit(DispatcherEventType.REMOVE_POINTER_EVENT_PROCESSOR, this);
          }
        };

        _proto.emit = function emit(type, arg0, arg1, arg2, arg3, arg4) {
          var _this$bubblingTarget4;

          (_this$bubblingTarget4 = this.bubblingTarget) === null || _this$bubblingTarget4 === void 0 ? void 0 : _this$bubblingTarget4.emit(type, arg0, arg1, arg2, arg3, arg4);
        };

        _proto.dispatchEvent = function dispatchEvent(event) {
          var owner = this.node;
          var target;
          var i = 0;
          event.target = owner;
          _cachedArray.length = 0;
          this.getCapturingTargets(event.type, _cachedArray);
          event.eventPhase = 1;

          for (i = _cachedArray.length - 1; i >= 0; --i) {
            target = _cachedArray[i];

            if (target.eventProcessor.capturingTarget) {
              event.currentTarget = target;
              target.eventProcessor.capturingTarget.emit(event.type, event, _cachedArray);

              if (event.propagationStopped) {
                _cachedArray.length = 0;
                return;
              }
            }
          }

          _cachedArray.length = 0;
          event.eventPhase = 2;
          event.currentTarget = owner;

          if (this.capturingTarget) {
            this.capturingTarget.emit(event.type, event);
          }

          if (!event.propagationImmediateStopped && this.bubblingTarget) {
            this.bubblingTarget.emit(event.type, event);
          }

          if (!event.propagationStopped && event.bubbles) {
            this.getBubblingTargets(event.type, _cachedArray);
            event.eventPhase = 3;

            for (i = 0; i < _cachedArray.length; ++i) {
              target = _cachedArray[i];

              if (target.eventProcessor.bubblingTarget) {
                event.currentTarget = target;
                target.eventProcessor.bubblingTarget.emit(event.type, event);

                if (event.propagationStopped) {
                  _cachedArray.length = 0;
                  return;
                }
              }
            }
          }

          _cachedArray.length = 0;
        };

        _proto.hasEventListener = function hasEventListener(type, callback, target) {
          var has = false;

          if (this.bubblingTarget) {
            has = this.bubblingTarget.hasEventListener(type, callback, target);
          }

          if (!has && this.capturingTarget) {
            has = this.capturingTarget.hasEventListener(type, callback, target);
          }

          return has;
        };

        _proto.getCapturingTargets = function getCapturingTargets(type, targets) {
          var parent = this._node.parent;

          while (parent) {
            var _parent$eventProcesso;

            if ((_parent$eventProcesso = parent.eventProcessor.capturingTarget) !== null && _parent$eventProcesso !== void 0 && _parent$eventProcesso.hasEventListener(type)) {
              targets.push(parent);
            }

            parent = parent.parent;
          }
        };

        _proto.getBubblingTargets = function getBubblingTargets(type, targets) {
          var parent = this._node.parent;

          while (parent) {
            var _parent$eventProcesso2;

            if ((_parent$eventProcesso2 = parent.eventProcessor.bubblingTarget) !== null && _parent$eventProcesso2 !== void 0 && _parent$eventProcesso2.hasEventListener(type)) {
              targets.push(parent);
            }

            parent = parent.parent;
          }
        };

        _proto._searchComponentsInParent = function _searchComponentsInParent(ctor) {
          var node = this.node;

          if (ctor) {
            var index = 0;
            var list = [];

            for (var curr = node; curr && Node$1.isNode(curr); curr = curr.parent, ++index) {
              var comp = curr.getComponent(ctor);

              if (comp) {
                var next = {
                  index: index,
                  comp: comp
                };

                if (list) {
                  list.push(next);
                } else {
                  list = [next];
                }
              }
            }

            return list.length > 0 ? list : null;
          }

          return null;
        };

        _proto._attachMask = function _attachMask() {
          this.maskList = this._searchComponentsInParent(NodeEventProcessor._maskComp);
        };

        _proto._isTouchEvent = function _isTouchEvent(type) {
          var index = _touchEvents.indexOf(type);

          return index !== -1;
        };

        _proto._isMouseEvent = function _isMouseEvent(type) {
          var index = _mouseEvents.indexOf(type);

          return index !== -1;
        };

        _proto._hasTouchListeners = function _hasTouchListeners() {
          for (var i = 0; i < _touchEvents.length; ++i) {
            var eventType = _touchEvents[i];

            if (this.hasEventListener(eventType)) {
              return true;
            }
          }

          return false;
        };

        _proto._hasMouseListeners = function _hasMouseListeners() {
          for (var i = 0; i < _mouseEvents.length; ++i) {
            var eventType = _mouseEvents[i];

            if (this.hasEventListener(eventType)) {
              return true;
            }
          }

          return false;
        };

        _proto._hasPointerListeners = function _hasPointerListeners() {
          var has = this._hasTouchListeners();

          if (has) {
            return true;
          }

          return this._hasMouseListeners();
        };

        _proto._tryEmittingAddEvent = function _tryEmittingAddEvent(typeToAdd) {
          var isTouchEvent = this._isTouchEvent(typeToAdd);

          var isMouseEvent = this._isMouseEvent(typeToAdd);

          if (isTouchEvent) {
            this.shouldHandleEventTouch = true;
          } else if (isMouseEvent) {
            this.shouldHandleEventMouse = true;
          }

          if ((isTouchEvent || isMouseEvent) && !this._hasPointerListeners()) {
            NodeEventProcessor.callbacksInvoker.emit(DispatcherEventType.ADD_POINTER_EVENT_PROCESSOR, this);
          }
        };

        _proto._newCallbacksInvoker = function _newCallbacksInvoker() {
          var _this2 = this;

          var callbacksInvoker = new CallbacksInvoker();

          callbacksInvoker._registerOffCallback(function () {
            if (_this2.shouldHandleEventTouch && !_this2._hasTouchListeners()) {
              _this2.shouldHandleEventTouch = false;
            }

            if (_this2.shouldHandleEventMouse && !_this2._hasMouseListeners()) {
              _this2.shouldHandleEventMouse = false;
            }

            if (!_this2._hasPointerListeners()) {
              NodeEventProcessor.callbacksInvoker.emit(DispatcherEventType.REMOVE_POINTER_EVENT_PROCESSOR, _this2);
            }
          });

          return callbacksInvoker;
        };

        _proto._handleEventMouse = function _handleEventMouse(eventMouse) {
          switch (eventMouse.type) {
            case InputEventType.MOUSE_DOWN:
              return this._handleMouseDown(eventMouse);

            case InputEventType.MOUSE_MOVE:
              return this._handleMouseMove(eventMouse);

            case InputEventType.MOUSE_UP:
              return this._handleMouseUp(eventMouse);

            case InputEventType.MOUSE_WHEEL:
              return this._handleMouseWheel(eventMouse);

            default:
              return false;
          }
        };

        _proto._handleMouseDown = function _handleMouseDown(event) {
          var node = this._node;

          if (!node || !node._uiProps.uiTransformComp) {
            return false;
          }

          event.getLocation(pos);

          if (node._uiProps.uiTransformComp.hitTest(pos, event.windowId)) {
            event.type = NodeEventType.MOUSE_DOWN;
            event.bubbles = true;
            node.dispatchEvent(event);
            event.propagationStopped = true;
            return true;
          }

          return false;
        };

        _proto._handleMouseMove = function _handleMouseMove(event) {
          var node = this._node;

          if (!node || !node._uiProps.uiTransformComp) {
            return false;
          }

          event.getLocation(pos);

          var hit = node._uiProps.uiTransformComp.hitTest(pos, event.windowId);

          if (hit) {
            if (!this.previousMouseIn) {
              if (_currentHovered && _currentHovered !== node) {
                event.type = NodeEventType.MOUSE_LEAVE;

                _currentHovered.dispatchEvent(event);

                _currentHovered.eventProcessor.previousMouseIn = false;
              }

              _currentHovered = node;
              event.type = NodeEventType.MOUSE_ENTER;
              node.dispatchEvent(event);
              this.previousMouseIn = true;
            }

            event.type = NodeEventType.MOUSE_MOVE;
            event.bubbles = true;
            node.dispatchEvent(event);
            event.propagationStopped = true;
            return true;
          } else if (this.previousMouseIn) {
            event.type = NodeEventType.MOUSE_LEAVE;
            node.dispatchEvent(event);
            this.previousMouseIn = false;
            _currentHovered = null;
          }

          return false;
        };

        _proto._handleMouseUp = function _handleMouseUp(event) {
          var node = this._node;

          if (!node || !node._uiProps.uiTransformComp) {
            return false;
          }

          event.getLocation(pos);

          if (node._uiProps.uiTransformComp.hitTest(pos, event.windowId)) {
            event.type = NodeEventType.MOUSE_UP;
            event.bubbles = true;
            node.dispatchEvent(event);
            event.propagationStopped = true;
            return true;
          }

          return false;
        };

        _proto._handleMouseWheel = function _handleMouseWheel(event) {
          var node = this._node;

          if (!node || !node._uiProps.uiTransformComp) {
            return false;
          }

          event.getLocation(pos);

          if (node._uiProps.uiTransformComp.hitTest(pos, event.windowId)) {
            event.type = NodeEventType.MOUSE_WHEEL;
            event.bubbles = true;
            node.dispatchEvent(event);
            event.propagationStopped = true;
            return true;
          }

          return false;
        };

        _proto._handleEventTouch = function _handleEventTouch(eventTouch) {
          switch (eventTouch.type) {
            case InputEventType.TOUCH_START:
              return this._handleTouchStart(eventTouch);

            case InputEventType.TOUCH_MOVE:
              return this._handleTouchMove(eventTouch);

            case InputEventType.TOUCH_END:
              return this._handleTouchEnd(eventTouch);

            case InputEventType.TOUCH_CANCEL:
              return this._handleTouchCancel(eventTouch);

            default:
              return false;
          }
        };

        _proto._handleTouchStart = function _handleTouchStart(event) {
          var node = this.node;

          if (!node || !node._uiProps.uiTransformComp) {
            return false;
          }

          event.getLocation(pos);

          if (node._uiProps.uiTransformComp.hitTest(pos, event.windowId)) {
            event.type = NodeEventType.TOUCH_START;
            event.bubbles = true;
            this._dispatchingTouch = event.touch;
            node.dispatchEvent(event);
            return true;
          }

          return false;
        };

        _proto._handleTouchMove = function _handleTouchMove(event) {
          var node = this.node;

          if (!node || !node._uiProps.uiTransformComp) {
            return false;
          }

          event.type = NodeEventType.TOUCH_MOVE;
          event.bubbles = true;
          this._dispatchingTouch = event.touch;
          node.dispatchEvent(event);
          return true;
        };

        _proto._handleTouchEnd = function _handleTouchEnd(event) {
          var node = this.node;

          if (!node || !node._uiProps.uiTransformComp) {
            return;
          }

          event.getLocation(pos);

          if (node._uiProps.uiTransformComp.hitTest(pos, event.windowId)) {
            event.type = NodeEventType.TOUCH_END;
          } else {
            event.type = NodeEventType.TOUCH_CANCEL;
          }

          event.bubbles = true;
          node.dispatchEvent(event);
          this._dispatchingTouch = null;
        };

        _proto._handleTouchCancel = function _handleTouchCancel(event) {
          var node = this.node;

          if (!node || !node._uiProps.uiTransformComp) {
            return;
          }

          event.type = NodeEventType.TOUCH_CANCEL;
          event.bubbles = true;
          node.dispatchEvent(event);
        };

        _createClass(NodeEventProcessor, [{
          key: "isEnabled",
          get: function get() {
            return this._isEnabled;
          }
        }, {
          key: "node",
          get: function get() {
            return this._node;
          }
        }]);

        return NodeEventProcessor;
      }();
      NodeEventProcessor._maskComp = null;
      NodeEventProcessor.callbacksInvoker = new CallbacksInvoker();
      legacyCC.NodeEventProcessor = NodeEventProcessor;

      deprecateModuleExportedName({
        BaseNode: {
          newName: 'Node',
          since: '3.7.0',
          removed: false
        }
      });

      function find(path, referenceNode) {
        if (!referenceNode) {
          var scene = legacyCC.director.getScene();

          if (!scene) {

            return null;
          }

          referenceNode = scene;
        }

        return referenceNode.getChildByPath(path);
      }
      legacyCC.find = find;

      var fastRemoveAt$2 = fastRemoveAt;
      var IsStartCalled$1 = CCObject.Flags.IsStartCalled;
      var IsOnEnableCalled$1 = CCObject.Flags.IsOnEnableCalled;
      var IsEditorOnEnableCalled$1 = CCObject.Flags.IsEditorOnEnableCalled;

      function sortedIndex(array, comp) {
        var order = comp.constructor._executionOrder;
        var id = comp._id;
        var l = 0;

        for (var h = array.length - 1, m = h >>> 1; l <= h; m = l + h >>> 1) {
          var test = array[m];
          var testOrder = test.constructor._executionOrder;

          if (testOrder > order) {
            h = m - 1;
          } else if (testOrder < order) {
            l = m + 1;
          } else {
            var testId = test._id;

            if (testId > id) {
              h = m - 1;
            } else if (testId < id) {
              l = m + 1;
            } else {
              return m;
            }
          }
        }

        return ~l;
      }

      function stableRemoveInactive(iterator, flagToClear) {
        var array = iterator.array;
        var next = iterator.i + 1;

        while (next < array.length) {
          var comp = array[next];

          if (comp.node._activeInHierarchy) {
            ++next;
          } else {
            iterator.removeAt(next);

            if (flagToClear) {
              comp._objFlags &= ~flagToClear;
            }
          }
        }
      }

      var LifeCycleInvoker = function LifeCycleInvoker(invokeFunc) {
        this._zero = void 0;
        this._neg = void 0;
        this._pos = void 0;
        this._invoke = void 0;
        var Iterator = MutableForwardIterator;
        this._zero = new Iterator([]);
        this._neg = new Iterator([]);
        this._pos = new Iterator([]);

        this._invoke = invokeFunc;
      };
      LifeCycleInvoker.stableRemoveInactive = stableRemoveInactive;

      function compareOrder(a, b) {
        return a.constructor._executionOrder - b.constructor._executionOrder;
      }

      var OneOffInvoker = function (_LifeCycleInvoker) {
        _inheritsLoose(OneOffInvoker, _LifeCycleInvoker);

        function OneOffInvoker() {
          return _LifeCycleInvoker.apply(this, arguments) || this;
        }

        var _proto = OneOffInvoker.prototype;

        _proto.add = function add(comp) {
          var order = comp.constructor._executionOrder;
          (order === 0 ? this._zero : order < 0 ? this._neg : this._pos).array.push(comp);
        };

        _proto.remove = function remove(comp) {
          var order = comp.constructor._executionOrder;
          (order === 0 ? this._zero : order < 0 ? this._neg : this._pos).fastRemove(comp);
        };

        _proto.cancelInactive = function cancelInactive(flagToClear) {
          stableRemoveInactive(this._zero, flagToClear);
          stableRemoveInactive(this._neg, flagToClear);
          stableRemoveInactive(this._pos, flagToClear);
        };

        _proto.invoke = function invoke() {
          var compsNeg = this._neg;

          if (compsNeg.array.length > 0) {
            compsNeg.array.sort(compareOrder);

            this._invoke(compsNeg);

            compsNeg.array.length = 0;
          }

          this._invoke(this._zero);

          this._zero.array.length = 0;
          var compsPos = this._pos;

          if (compsPos.array.length > 0) {
            compsPos.array.sort(compareOrder);

            this._invoke(compsPos);

            compsPos.array.length = 0;
          }
        };

        return OneOffInvoker;
      }(LifeCycleInvoker);

      var ReusableInvoker = function (_LifeCycleInvoker2) {
        _inheritsLoose(ReusableInvoker, _LifeCycleInvoker2);

        function ReusableInvoker() {
          return _LifeCycleInvoker2.apply(this, arguments) || this;
        }

        var _proto2 = ReusableInvoker.prototype;

        _proto2.add = function add(comp) {
          var order = comp.constructor._executionOrder;

          if (order === 0) {
            this._zero.array.push(comp);
          } else {
            var _array = order < 0 ? this._neg.array : this._pos.array;

            var i = sortedIndex(_array, comp);

            if (i < 0) {
              _array.splice(~i, 0, comp);
            }
          }
        };

        _proto2.remove = function remove(comp) {
          var order = comp.constructor._executionOrder;

          if (order === 0) {
            this._zero.fastRemove(comp);
          } else {
            var iterator = order < 0 ? this._neg : this._pos;
            var i = sortedIndex(iterator.array, comp);

            if (i >= 0) {
              iterator.removeAt(i);
            }
          }
        };

        _proto2.invoke = function invoke(dt) {
          if (this._neg.array.length > 0) {
            this._invoke(this._neg, dt);
          }

          this._invoke(this._zero, dt);

          if (this._pos.array.length > 0) {
            this._invoke(this._pos, dt);
          }
        };

        return ReusableInvoker;
      }(LifeCycleInvoker);

      function createInvokeImplJit(code, useDt, ensureFlag) {
        var body = "" + ('var a=it.array;' + 'for(it.i=0;it.i<a.length;++it.i){' + 'var c=a[it.i];') + code + "}";
        var fastPath = useDt ? Function('it', 'dt', body) : Function('it', body);
        var singleInvoke = Function('c', 'dt', code);
        return createInvokeImpl(singleInvoke, fastPath, ensureFlag);
      }
      function createInvokeImpl(singleInvoke, fastPath, ensureFlag) {
        return function (iterator, dt) {
          try {
            fastPath(iterator, dt);
          } catch (e) {
            legacyCC._throw(e);

            var _array2 = iterator.array;

            if (ensureFlag) {
              _array2[iterator.i]._objFlags |= ensureFlag;
            }

            ++iterator.i;

            for (; iterator.i < _array2.length; ++iterator.i) {
              try {
                singleInvoke(_array2[iterator.i], dt);
              } catch (e) {
                legacyCC._throw(e);

                if (ensureFlag) {
                  _array2[iterator.i]._objFlags |= ensureFlag;
                }
              }
            }
          }
        };
      }
      var invokeStart =  createInvokeImplJit("c.start();c._objFlags|=" + IsStartCalled$1, false, IsStartCalled$1) ;
      var invokeUpdate =  createInvokeImplJit('c.update(dt)', true) ;
      var invokeLateUpdate =  createInvokeImplJit('c.lateUpdate(dt)', true) ;
      var invokeOnEnable =  function (iterator) {
        var compScheduler = legacyCC.director._compScheduler;
        var array = iterator.array;

        for (iterator.i = 0; iterator.i < array.length; ++iterator.i) {
          var comp = array[iterator.i];

          if (comp._enabled) {
            comp.onEnable();
            var deactivatedDuringOnEnable = !comp.node._activeInHierarchy;

            if (!deactivatedDuringOnEnable) {
              compScheduler._onEnabled(comp);
            }
          }
        }
      };
      var ComponentScheduler = function () {
        function ComponentScheduler() {
          this._deferredComps = [];
          this.unscheduleAll();
        }

        var _proto3 = ComponentScheduler.prototype;

        _proto3.unscheduleAll = function unscheduleAll() {
          this.startInvoker = new OneOffInvoker(invokeStart);
          this.updateInvoker = new ReusableInvoker(invokeUpdate);
          this.lateUpdateInvoker = new ReusableInvoker(invokeLateUpdate);
          this._updating = false;
        };

        _proto3._onEnabled = function _onEnabled(comp) {
          legacyCC.director.getScheduler().resumeTarget(comp);
          comp._objFlags |= IsOnEnableCalled$1;

          if (this._updating) {
            this._deferredComps.push(comp);
          } else {
            this._scheduleImmediate(comp);
          }
        };

        _proto3._onDisabled = function _onDisabled(comp) {
          legacyCC.director.getScheduler().pauseTarget(comp);
          comp._objFlags &= ~IsOnEnableCalled$1;

          var index = this._deferredComps.indexOf(comp);

          if (index >= 0) {
            fastRemoveAt$2(this._deferredComps, index);
            return;
          }

          if (comp.start && !(comp._objFlags & IsStartCalled$1)) {
            this.startInvoker.remove(comp);
          }

          if (comp.update) {
            this.updateInvoker.remove(comp);
          }

          if (comp.lateUpdate) {
            this.lateUpdateInvoker.remove(comp);
          }
        };

        _proto3.enableComp = function enableComp(comp, invoker) {
          if (!(comp._objFlags & IsOnEnableCalled$1)) {
            if (comp.onEnable) {
              if (invoker) {
                invoker.add(comp);
                return;
              } else {
                comp.onEnable();
                var deactivatedDuringOnEnable = !comp.node._activeInHierarchy;

                if (deactivatedDuringOnEnable) {
                  return;
                }
              }
            }

            this._onEnabled(comp);
          }
        };

        _proto3.disableComp = function disableComp(comp) {
          if (comp._objFlags & IsOnEnableCalled$1) {
            if (comp.onDisable) {
              comp.onDisable();
            }

            this._onDisabled(comp);
          }
        };

        _proto3.startPhase = function startPhase() {
          this._updating = true;
          this.startInvoker.invoke();

          this._startForNewComps();
        };

        _proto3.updatePhase = function updatePhase(dt) {
          this.updateInvoker.invoke(dt);
        };

        _proto3.lateUpdatePhase = function lateUpdatePhase(dt) {
          this.lateUpdateInvoker.invoke(dt);
          this._updating = false;

          this._startForNewComps();
        };

        _proto3._startForNewComps = function _startForNewComps() {
          if (this._deferredComps.length > 0) {
            this._deferredSchedule();

            this.startInvoker.invoke();
          }
        };

        _proto3._scheduleImmediate = function _scheduleImmediate(comp) {
          if (typeof comp.start === 'function' && !(comp._objFlags & IsStartCalled$1)) {
            this.startInvoker.add(comp);
          }

          if (typeof comp.update === 'function') {
            this.updateInvoker.add(comp);
          }

          if (typeof comp.lateUpdate === 'function') {
            this.lateUpdateInvoker.add(comp);
          }
        };

        _proto3._deferredSchedule = function _deferredSchedule() {
          var comps = this._deferredComps;

          for (var i = 0, len = comps.length; i < len; i++) {
            this._scheduleImmediate(comps[i]);
          }

          comps.length = 0;
        };

        return ComponentScheduler;
      }();

      var MAX_POOL_SIZE$1 = 4;
      var IsPreloadStarted$1 = CCObject.Flags.IsPreloadStarted;
      var IsOnLoadStarted$1 = CCObject.Flags.IsOnLoadStarted;
      var IsOnLoadCalled$2 = CCObject.Flags.IsOnLoadCalled;
      var Deactivating$2 = CCObject.Flags.Deactivating;

      var UnsortedInvoker = function (_LifeCycleInvoker) {
        _inheritsLoose(UnsortedInvoker, _LifeCycleInvoker);

        function UnsortedInvoker() {
          return _LifeCycleInvoker.apply(this, arguments) || this;
        }

        var _proto = UnsortedInvoker.prototype;

        _proto.add = function add(comp) {
          this._zero.array.push(comp);
        };

        _proto.remove = function remove(comp) {
          this._zero.fastRemove(comp);
        };

        _proto.cancelInactive = function cancelInactive(flagToClear) {
          LifeCycleInvoker.stableRemoveInactive(this._zero, flagToClear);
        };

        _proto.invoke = function invoke() {
          this._invoke(this._zero);

          this._zero.array.length = 0;
        };

        return UnsortedInvoker;
      }(LifeCycleInvoker);

      var invokePreload =  createInvokeImplJit('c.__preload();') ;
      var invokeOnLoad =  createInvokeImplJit("c.onLoad();c._objFlags|=" + IsOnLoadCalled$2, false, IsOnLoadCalled$2) ;
      var activateTasksPool = new Pool(MAX_POOL_SIZE$1);

      activateTasksPool.get = function getActivateTask() {
        var task = this._get() || {
          preload: new UnsortedInvoker(invokePreload),
          onLoad: new OneOffInvoker(invokeOnLoad),
          onEnable: new OneOffInvoker(invokeOnEnable)
        };
        task.preload._zero.i = -1;
        var invoker = task.onLoad;
        invoker._zero.i = -1;
        invoker._neg.i = -1;
        invoker._pos.i = -1;
        invoker = task.onEnable;
        invoker._zero.i = -1;
        invoker._neg.i = -1;
        invoker._pos.i = -1;
        return task;
      };

      function _componentCorrupted(node, comp, index) {
        errorID(3817, node.name, index);
        console.log('Corrupted component value:', comp);

        if (comp) {
          node._removeComponent(comp);
        } else {
          removeAt(node._components, index);
        }
      }

      var NodeActivator = exports('NodeActivator', function () {
        function NodeActivator() {
          this.resetComp = void 0;
          this.reset();
        }

        var _proto2 = NodeActivator.prototype;

        _proto2.reset = function reset() {
          this._activatingStack = [];
        };

        _proto2.activateNode = function activateNode(node, active) {
          if (active) {
            var task = activateTasksPool.get();

            this._activatingStack.push(task);

            this._activateNodeRecursively(node, task.preload, task.onLoad, task.onEnable);

            task.preload.invoke();
            task.onLoad.invoke();
            task.onEnable.invoke();

            this._activatingStack.pop();

            activateTasksPool.put(task);
          } else {
            this._deactivateNodeRecursively(node);

            var stack = this._activatingStack;

            for (var _iterator = _createForOfIteratorHelperLoose(stack), _step; !(_step = _iterator()).done;) {
              var lastTask = _step.value;
              lastTask.preload.cancelInactive(IsPreloadStarted$1);
              lastTask.onLoad.cancelInactive(IsOnLoadStarted$1);
              lastTask.onEnable.cancelInactive();
            }
          }

          node.emit(NodeEventType.ACTIVE_IN_HIERARCHY_CHANGED, node);
        };

        _proto2.activateComp = function activateComp(comp, preloadInvoker, onLoadInvoker, onEnableInvoker) {
          if (!isValid(comp, true)) {
            return;
          }

          if (!(comp._objFlags & IsPreloadStarted$1)) {
            comp._objFlags |= IsPreloadStarted$1;

            if (comp.__preload) {
              if (preloadInvoker) {
                preloadInvoker.add(comp);
              } else {
                comp.__preload();
              }
            }
          }

          if (!(comp._objFlags & IsOnLoadStarted$1)) {
            comp._objFlags |= IsOnLoadStarted$1;

            if (comp.onLoad) {
              if (onLoadInvoker) {
                onLoadInvoker.add(comp);
              } else {
                comp.onLoad();
                comp._objFlags |= IsOnLoadCalled$2;
              }
            } else {
              comp._objFlags |= IsOnLoadCalled$2;
            }
          }

          if (comp._enabled) {
            {
              assertIsTrue(comp.node, getError(3823, comp.uuid, comp.name));
            }

            var deactivatedOnLoading = !comp.node._activeInHierarchy;

            if (deactivatedOnLoading) {
              return;
            }

            legacyCC.director._compScheduler.enableComp(comp, onEnableInvoker);
          }
        };

        _proto2.destroyComp = function destroyComp(comp) {
          legacyCC.director._compScheduler.disableComp(comp);

          if (comp.onDestroy && comp._objFlags & IsOnLoadCalled$2) {
            comp.onDestroy();
          }
        };

        _proto2._activateNodeRecursively = function _activateNodeRecursively(node, preloadInvoker, onLoadInvoker, onEnableInvoker) {
          if (node._objFlags & Deactivating$2) {
            errorID(3816, node.name);
            return;
          }

          node._activeInHierarchy = true;
          var originCount = node._components.length;

          for (var i = 0; i < originCount; ++i) {
            var component = node._components[i];

            if (component instanceof legacyCC.Component) {
              this.activateComp(component, preloadInvoker, onLoadInvoker, onEnableInvoker);
            } else {
              _componentCorrupted(node, component, i);

              --i;
              --originCount;
            }
          }

          for (var _i = 0, len = node._children.length; _i < len; ++_i) {
            var child = node._children[_i];

            if (child._active) {
              this._activateNodeRecursively(child, preloadInvoker, onLoadInvoker, onEnableInvoker);
            }
          }

          node._onPostActivated(true);
        };

        _proto2._deactivateNodeRecursively = function _deactivateNodeRecursively(node) {

          node._objFlags |= Deactivating$2;
          node._activeInHierarchy = false;
          var originCount = node._components.length;

          for (var c = 0; c < originCount; ++c) {
            var component = node._components[c];

            if (component._enabled) {
              legacyCC.director._compScheduler.disableComp(component);

              if (node._activeInHierarchy) {
                node._objFlags &= ~Deactivating$2;
                return;
              }
            }
          }

          for (var i = 0, len = node._children.length; i < len; ++i) {
            var child = node._children[i];

            if (child._activeInHierarchy) {
              this._deactivateNodeRecursively(child);

              if (node._activeInHierarchy) {
                node._objFlags &= ~Deactivating$2;
                return;
              }
            }
          }

          node._onPostActivated(false);

          node._objFlags &= ~Deactivating$2;
        };

        return NodeActivator;
      }());

      var Destroyed$1 = CCObject.Flags.Destroyed;
      var PersistentMask$1 = CCObject.Flags.PersistentMask;
      var DEFAULT = CCClass.Attr.DELIMETER + "default";
      var IDENTIFIER_RE$1 = CCClass.IDENTIFIER_RE;
      var VAR = 'var ';
      var LOCAL_OBJ = 'o';
      var LOCAL_TEMP_OBJ = 't';
      var LOCAL_ARRAY = 'a';
      var LINE_INDEX_OF_NEW_OBJ = 0;
      var DEFAULT_MODULE_CACHE = {
        'cc.ClickEvent': false,
        'cc.PrefabInfo': false
      };
      var escapeForJS$1 = CCClass.escapeForJS;

      var Declaration = function () {
        function Declaration(varName, expression) {
          this.varName = void 0;
          this.expression = void 0;
          this.varName = varName;
          this.expression = expression;
        }

        var _proto = Declaration.prototype;

        _proto.toString = function toString() {
          return VAR + this.varName + "=" + this.expression + ";";
        };

        return Declaration;
      }();

      function mergeDeclaration(statement, expression) {
        if (expression instanceof Declaration) {
          return new Declaration(expression.varName, statement + expression.expression);
        } else {
          return statement + expression;
        }
      }

      function writeAssignment(codeArray, statement, expression) {
        if (Array.isArray(expression)) {
          expression[0] = mergeDeclaration(statement, expression[0]);
          codeArray.push(expression);
        } else {
          codeArray.push(mergeDeclaration(statement, expression) + ";");
        }
      }

      var Assignments = function () {
        function Assignments(targetExpression) {
          this._exps = void 0;
          this._targetExp = void 0;
          this._exps = [];
          this._targetExp = targetExpression;
        }

        var _proto2 = Assignments.prototype;

        _proto2.append = function append(key, expression) {
          this._exps.push([key, expression]);
        };

        _proto2.writeCode = function writeCode(codeArray) {
          var targetVar;

          if (this._exps.length > 1) {
            codeArray.push(LOCAL_TEMP_OBJ + "=" + this._targetExp + ";");
            targetVar = LOCAL_TEMP_OBJ;
          } else if (this._exps.length === 1) {
            targetVar = this._targetExp;
          } else {
            return;
          }

          for (var i = 0; i < this._exps.length; i++) {
            var pair = this._exps[i];
            writeAssignment(codeArray, targetVar + getPropAccessor(pair[0]) + "=", pair[1]);
          }
        };

        return Assignments;
      }();

      Assignments.pool = void 0;
      Assignments.pool = new Pool(function (obj) {
        obj._exps.length = 0;
        obj._targetExp = null;
      }, 1);

      Assignments.pool.get = function (targetExpression) {
        var cache = this._get() || new Assignments();
        cache._targetExp = targetExpression;
        return cache;
      };

      function getPropAccessor(key) {
        return IDENTIFIER_RE$1.test(key) ? "." + key : "[" + escapeForJS$1(key) + "]";
      }

      var Parser$1 = function () {
        function Parser(obj, parent) {
          this.parent = void 0;
          this.objsToClear_iN$t = void 0;
          this.codeArray = void 0;
          this.objs = void 0;
          this.funcs = void 0;
          this.funcModuleCache = void 0;
          this.globalVariables = void 0;
          this.globalVariableId = void 0;
          this.localVariableId = void 0;
          this.result = void 0;
          this.parent = parent;
          this.objsToClear_iN$t = [];
          this.codeArray = [];
          this.objs = [];
          this.funcs = [];
          this.funcModuleCache = createMap();
          mixin(this.funcModuleCache, DEFAULT_MODULE_CACHE);
          this.globalVariables = [];
          this.globalVariableId = 0;
          this.localVariableId = 0;
          this.codeArray.push(VAR + LOCAL_OBJ + "," + LOCAL_TEMP_OBJ + ";", 'if(R){', LOCAL_OBJ + "=R;", '}else{', LOCAL_OBJ + "=R=new " + this.getFuncModule(obj.constructor, true) + "();", '}');
          obj._iN$t = {
            globalVar: 'R'
          };
          this.objsToClear_iN$t.push(obj);
          this.enumerateObject(this.codeArray, obj);
          var globalVariablesDeclaration;

          if (this.globalVariables.length > 0) {
            globalVariablesDeclaration = VAR + this.globalVariables.join(',') + ";";
          }

          var code = flattenCodeArray(['return (function(R){', globalVariablesDeclaration || [], this.codeArray, 'return o;', '})']);
          this.result = Function('O', 'F', code)(this.objs, this.funcs);

          for (var i = 0, len = this.objsToClear_iN$t.length; i < len; ++i) {
            this.objsToClear_iN$t[i]._iN$t = null;
          }

          this.objsToClear_iN$t.length = 0;
        }

        var _proto3 = Parser.prototype;

        _proto3.getFuncModule = function getFuncModule(func, usedInNew) {
          var clsName = getClassName(func);

          if (clsName) {
            var cache = this.funcModuleCache[clsName];

            if (cache) {
              return cache;
            } else if (cache === undefined) {
              var clsNameIsModule = clsName.indexOf('.') !== -1;

              if (clsNameIsModule) {
                try {
                  clsNameIsModule = func === Function("return " + clsName)();

                  if (clsNameIsModule) {
                    this.funcModuleCache[clsName] = clsName;
                    return clsName;
                  }
                } catch (e) {}
              }
            }
          }

          var index = this.funcs.indexOf(func);

          if (index < 0) {
            index = this.funcs.length;
            this.funcs.push(func);
          }

          var res = "F[" + index + "]";

          if (usedInNew) {
            res = "(" + res + ")";
          }

          this.funcModuleCache[clsName] = res;
          return res;
        };

        _proto3.getObjRef = function getObjRef(obj) {
          var index = this.objs.indexOf(obj);

          if (index < 0) {
            index = this.objs.length;
            this.objs.push(obj);
          }

          return "O[" + index + "]";
        };

        _proto3.setValueType = function setValueType(codeArray, defaultValue, srcValue, targetExpression) {
          var assignments = Assignments.pool.get(targetExpression);
          var fastDefinedProps = defaultValue.constructor.__props__;

          if (!fastDefinedProps) {
            fastDefinedProps = Object.keys(defaultValue);
          }

          for (var i = 0; i < fastDefinedProps.length; i++) {
            var propName = fastDefinedProps[i];
            var prop = srcValue[propName];

            if (defaultValue[propName] === prop) {
              continue;
            }

            var expression = this.enumerateField(srcValue, propName, prop);
            assignments.append(propName, expression);
          }

          assignments.writeCode(codeArray);
          Assignments.pool.put(assignments);
        };

        _proto3.enumerateCCClass = function enumerateCCClass(codeArray, obj, klass) {
          var props = klass.__values__;
          var attrs = CCClass.Attr.getClassAttrs(klass);

          for (var p = 0; p < props.length; p++) {
            var key = props[p];
            var val = obj[key];
            var defaultValue = attrs[key + DEFAULT];

            if (equalsToDefault(defaultValue, val)) {
              continue;
            }

            if (typeof val === 'object' && val instanceof legacyCC.ValueType) {
              defaultValue = CCClass.getDefault(defaultValue);

              if (defaultValue && defaultValue.constructor === val.constructor) {
                var targetExpression = LOCAL_OBJ + getPropAccessor(key);
                this.setValueType(codeArray, defaultValue, val, targetExpression);
                continue;
              }
            }

            this.setObjProp(codeArray, obj, key, val);
          }
        };

        _proto3.instantiateArray = function instantiateArray(value) {
          if (value.length === 0) {
            return '[]';
          }

          var arrayVar = LOCAL_ARRAY + ++this.localVariableId;
          var declaration = new Declaration(arrayVar, "new Array(" + value.length + ")");
          var codeArray = [declaration];
          value._iN$t = {
            globalVar: '',
            source: codeArray
          };
          this.objsToClear_iN$t.push(value);

          for (var i = 0; i < value.length; ++i) {
            var statement = arrayVar + "[" + i + "]=";
            var expression = this.enumerateField(value, i, value[i]);
            writeAssignment(codeArray, statement, expression);
          }

          return codeArray;
        };

        _proto3.instantiateTypedArray = function instantiateTypedArray(value) {
          var type = value.constructor.name;

          if (value.length === 0) {
            return "new " + type;
          }

          var arrayVar = LOCAL_ARRAY + ++this.localVariableId;
          var declaration = new Declaration(arrayVar, "new " + type + "(" + value.length + ")");
          var codeArray = [declaration];
          value._iN$t = {
            globalVar: '',
            source: codeArray
          };
          this.objsToClear_iN$t.push(value);

          for (var i = 0; i < value.length; ++i) {
            if (value[i] !== 0) {
              var statement = arrayVar + "[" + i + "]=";
              writeAssignment(codeArray, statement, value[i]);
            }
          }

          return codeArray;
        };

        _proto3.enumerateField = function enumerateField(obj, key, value) {
          if (typeof value === 'object' && value) {
            var _iN$t = value._iN$t;

            if (_iN$t) {
              var globalVar = _iN$t.globalVar;

              if (!globalVar) {
                globalVar = _iN$t.globalVar = "v" + ++this.globalVariableId;
                this.globalVariables.push(globalVar);
                var line = _iN$t.source[LINE_INDEX_OF_NEW_OBJ];
                _iN$t.source[LINE_INDEX_OF_NEW_OBJ] = mergeDeclaration(globalVar + "=", line);
              }

              return globalVar;
            } else if (ArrayBuffer.isView(value)) {
              return this.instantiateTypedArray(value);
            } else if (Array.isArray(value)) {
              return this.instantiateArray(value);
            } else {
              return this.instantiateObj(value);
            }
          } else if (typeof value === 'function') {
            return this.getFuncModule(value);
          } else if (typeof value === 'string') {
            return escapeForJS$1(value);
          } else {
            if (key === '_objFlags' && isCCObject(obj)) {
              value &= PersistentMask$1;
            }

            return value;
          }
        };

        _proto3.setObjProp = function setObjProp(codeArray, obj, key, value) {
          var statement = LOCAL_OBJ + getPropAccessor(key) + "=";
          var expression = this.enumerateField(obj, key, value);
          writeAssignment(codeArray, statement, expression);
        };

        _proto3.enumerateObject = function enumerateObject(codeArray, obj) {
          var klass = obj.constructor;

          if (isCCClassOrFastDefined(klass)) {
            this.enumerateCCClass(codeArray, obj, klass);
          } else {
            for (var key in obj) {
              if (!obj.hasOwnProperty(key) || key.charCodeAt(0) === 95 && key.charCodeAt(1) === 95 && key !== '__type__') {
                continue;
              }

              var value = obj[key];

              if (typeof value === 'object' && value && value === obj._iN$t) {
                continue;
              }

              this.setObjProp(codeArray, obj, key, value);
            }
          }
        };

        _proto3.instantiateObj = function instantiateObj(obj) {
          if (obj instanceof legacyCC.ValueType) {
            return CCClass.getNewValueTypeCode(obj);
          }

          if (obj instanceof legacyCC.Asset) {
            return this.getObjRef(obj);
          }

          if (obj._objFlags & Destroyed$1) {
            return null;
          }

          var createCode;
          var ctor = obj.constructor;

          if (isCCClassOrFastDefined(ctor)) {
            if (this.parent) {
              if (this.parent instanceof legacyCC.Component) {
                if (obj instanceof legacyCC.Node || obj instanceof legacyCC.Component) {
                  return this.getObjRef(obj);
                }
              } else if (this.parent instanceof legacyCC.Node) {
                if (obj instanceof legacyCC.Node) {
                  if (!obj.isChildOf(this.parent)) {
                    return this.getObjRef(obj);
                  }
                } else if (obj instanceof legacyCC.Component) {
                  var _obj$node;

                  if (!((_obj$node = obj.node) !== null && _obj$node !== void 0 && _obj$node.isChildOf(this.parent))) {
                    return this.getObjRef(obj);
                  }
                }
              }
            }

            createCode = new Declaration(LOCAL_OBJ, "new " + this.getFuncModule(ctor, true) + "()");
          } else if (ctor === Object) {
            createCode = new Declaration(LOCAL_OBJ, '{}');
          } else if (!ctor) {
            createCode = new Declaration(LOCAL_OBJ, 'Object.create(null)');
          } else {
            return this.getObjRef(obj);
          }

          var codeArray = [createCode];
          obj._iN$t = {
            globalVar: '',
            source: codeArray
          };
          this.objsToClear_iN$t.push(obj);
          this.enumerateObject(codeArray, obj);
          return ['(function(){', codeArray, 'return o;})();'];
        };

        return Parser;
      }();

      function equalsToDefault(def, value) {
        if (typeof def === 'function') {
          try {
            def = def();
          } catch (e) {
            return false;
          }
        }

        if (def === value) {
          return true;
        }

        if (def && value && typeof def === 'object' && typeof value === 'object' && def.constructor === value.constructor) {
          if (def instanceof legacyCC.ValueType) {
            if (def.equals(value)) {
              return true;
            }
          } else if (Array.isArray(def)) {
            return def.length === 0 && value.length === 0;
          } else if (def.constructor === Object) {
            return isEmptyObject(def) && isEmptyObject(value);
          }
        }

        return false;
      }
      function compile(node) {
        var root = node instanceof legacyCC.Node && node;
        var parser = new Parser$1(node, root);
        return parser.result;
      }

      var _dec$F, _class$F, _class2$C, _initializer$t, _initializer2$i, _initializer3$e, _class3$d, _temp$k;
      var OptimizationPolicy = Enum({
        AUTO: 0,
        SINGLE_INSTANCE: 1,
        MULTI_INSTANCE: 2
      });
      var Prefab = exports('Prefab', (_dec$F = ccclass('cc.Prefab'), _dec$F(_class$F = (_class2$C = (_temp$k = _class3$d = function (_Asset) {
        _inheritsLoose(Prefab, _Asset);

        function Prefab() {
          var _this;

          _this = _Asset.call(this) || this;
          _this.data = _initializer$t && _initializer$t();
          _this.optimizationPolicy = _initializer2$i && _initializer2$i();
          _this.persistent = _initializer3$e && _initializer3$e();
          _this._createFunction = void 0;
          _this._instantiatedTimes = void 0;
          _this._createFunction = null;
          _this._instantiatedTimes = 0;
          return _this;
        }

        var _proto = Prefab.prototype;

        _proto.createNode = function createNode(cb) {
          var node = legacyCC.instantiate(this);
          node.name = this.name;
          cb(null, node);
        };

        _proto.compileCreateFunction = function compileCreateFunction() {
          this._createFunction = compile(this.data);
        };

        _proto._doInstantiate = function _doInstantiate(rootToRedirect) {
          if (!this.data._prefab) {
            warnID(3700);
          }

          if (!this._createFunction) {
            this.compileCreateFunction();
          }

          return this._createFunction(rootToRedirect);
        };

        _proto._instantiate = function _instantiate() {
          var node;
          var useJit = false;

          {
            if (this.optimizationPolicy === OptimizationPolicy.SINGLE_INSTANCE) {
              useJit = false;
            } else if (this.optimizationPolicy === OptimizationPolicy.MULTI_INSTANCE) {
              useJit = true;
            } else {
              useJit = this._instantiatedTimes + 1 >= Prefab.OptimizationPolicyThreshold;
            }
          }

          if (useJit) {
            node = this._doInstantiate();

            this.data._instantiate(node);
          } else {
            node = this.data._instantiate();
          }

          ++this._instantiatedTimes;
          return node;
        };

        _proto.initDefault = function initDefault(uuid) {
          _Asset.prototype.initDefault.call(this, uuid);

          this.data = new Node$1();
          this.data.name = '(Missing Node)';
          var prefabInfo = new legacyCC._PrefabInfo();
          prefabInfo.asset = this;
          prefabInfo.root = this.data;
          this.data._prefab = prefabInfo;
        };

        _proto.validate = function validate() {
          return !!this.data;
        };

        _proto.onLoaded = function onLoaded() {
          var rootNode = this.data;
          expandNestedPrefabInstanceNode(rootNode);
          applyTargetOverrides(rootNode);
        };

        return Prefab;
      }(Asset), _class3$d.OptimizationPolicy = OptimizationPolicy, _class3$d.OptimizationPolicyThreshold = 3, _temp$k), (_initializer$t = applyDecoratedInitializer(_class2$C.prototype, "data", [serializable], function () {
        return null;
      }), _initializer2$i = applyDecoratedInitializer(_class2$C.prototype, "optimizationPolicy", [serializable], function () {
        return OptimizationPolicy.AUTO;
      }), _initializer3$e = applyDecoratedInitializer(_class2$C.prototype, "persistent", [serializable], function () {
        return false;
      })), _class2$C)) || _class$F));
      value(Prefab, '_utils', utils);
      legacyCC.Prefab = Prefab;

      {
        obsolete(legacyCC, 'cc._Prefab', 'Prefab');
      }

      var UIRendererManager = function () {
        function UIRendererManager() {
          this._allRenderers = [];
          this._dirtyRenderers = [];
          this._dirtyVersion = 0;
        }

        var _proto = UIRendererManager.prototype;

        _proto.addRenderer = function addRenderer(uiRenderer) {
          if (uiRenderer._internalId === -1) {
            uiRenderer._internalId = this._allRenderers.length;

            this._allRenderers.push(uiRenderer);
          }
        };

        _proto.removeRenderer = function removeRenderer(uiRenderer) {
          if (uiRenderer._internalId !== -1) {
            {
              assert(this._allRenderers[uiRenderer._internalId] === uiRenderer);
            }

            var id = uiRenderer._internalId;
            this._allRenderers[this._allRenderers.length - 1]._internalId = id;
            fastRemoveAt(this._allRenderers, id);
            uiRenderer._internalId = -1;

            if (uiRenderer._dirtyVersion === this._dirtyVersion) {
              fastRemove(this._dirtyRenderers, uiRenderer);
              uiRenderer._dirtyVersion = -1;
            }
          }
        };

        _proto.markDirtyRenderer = function markDirtyRenderer(uiRenderer) {
          if (uiRenderer._dirtyVersion !== this._dirtyVersion && uiRenderer._internalId !== -1) {
            this._dirtyRenderers.push(uiRenderer);

            uiRenderer._dirtyVersion = this._dirtyVersion;
          }
        };

        _proto.updateAllDirtyRenderers = function updateAllDirtyRenderers() {
          var length = this._dirtyRenderers.length;
          var dirtyRenderers = this._dirtyRenderers;

          for (var i = 0; i < length; i++) {
            {
              assert(dirtyRenderers[i]._internalId !== -1);
            }

            dirtyRenderers[i].updateRenderer();
          }

          this._dirtyRenderers.length = 0;
          this._dirtyVersion++;
        };

        return UIRendererManager;
      }();
      var uiRendererManager = new UIRendererManager();

      var Director = exports('Director', function (_EventTarget) {
        _inheritsLoose(Director, _EventTarget);

        function Director() {
          var _this;

          _this = _EventTarget.call(this) || this;
          _this._compScheduler = void 0;
          _this._nodeActivator = void 0;
          _this._invalid = void 0;
          _this._paused = void 0;
          _this._root = void 0;
          _this._loadingScene = void 0;
          _this._scene = void 0;
          _this._totalFrames = void 0;
          _this._scheduler = void 0;
          _this._systems = void 0;
          _this._persistRootNodes = {};
          _this._invalid = false;
          _this._paused = false;
          _this._root = null;
          _this._loadingScene = '';
          _this._scene = null;
          _this._totalFrames = 0;
          _this._scheduler = new Scheduler();
          _this._compScheduler = new ComponentScheduler();
          _this._nodeActivator = new NodeActivator();
          _this._systems = [];
          return _this;
        }

        var _proto = Director.prototype;

        _proto.calculateDeltaTime = function calculateDeltaTime(now) {};

        _proto.end = function end() {
          var _this2 = this;

          this.once(Director.EVENT_END_FRAME, function () {
            _this2.purgeDirector();
          });
        };

        _proto.pause = function pause() {
          if (this._paused) {
            return;
          }

          this._paused = true;
        };

        _proto.purgeDirector = function purgeDirector() {
          this._scheduler.unscheduleAll();

          this._compScheduler.unscheduleAll();

          this._nodeActivator.reset();

          {
            if (isValid(this._scene)) {
              this._scene.destroy();
            }

            this._scene = null;
          }

          this.stopAnimation();
          assetManager.releaseAll();
        };

        _proto.reset = function reset() {
          var _this$getScene;

          this.purgeDirector();

          for (var id in this._persistRootNodes) {
            this.removePersistRootNode(this._persistRootNodes[id]);
          }

          (_this$getScene = this.getScene()) === null || _this$getScene === void 0 ? void 0 : _this$getScene.destroy();
          this.emit(Director.EVENT_RESET);
          this.startAnimation();
        };

        _proto.runSceneImmediate = function runSceneImmediate(scene, onBeforeLoadScene, onLaunched) {
          var _this3 = this;

          if (scene instanceof SceneAsset) scene = scene.scene;
          assertID(scene instanceof Scene, 1216);

          {
            console.time('InitScene');
          }

          scene._load();

          {
            console.timeEnd('InitScene');
          }

          {
            console.time('AttachPersist');
          }

          var persistNodeList = Object.keys(this._persistRootNodes).map(function (x) {
            return _this3._persistRootNodes[x];
          });

          for (var i = 0; i < persistNodeList.length; i++) {
            var node = persistNodeList[i];
            node.emit(Node$1.EventType.SCENE_CHANGED_FOR_PERSISTS, scene.renderScene);
            var existNode = scene.uuid === node._originalSceneId && scene.getChildByUuid(node.uuid);

            if (existNode) {
              var index = existNode.getSiblingIndex();
              node.hideFlags &= ~CCObject.Flags.DontSave;
              node.hideFlags |= CCObject.Flags.DontSave & existNode.hideFlags;

              existNode._destroyImmediate();

              scene.insertChild(node, index);
            } else {
              node.hideFlags |= CCObject.Flags.DontSave;
              node.parent = scene;
            }
          }

          {
            console.timeEnd('AttachPersist');
          }

          var oldScene = this._scene;

          {
            console.time('Destroy');
          }

          if (isValid(oldScene)) {
            oldScene.destroy();
          }

          {
            {
              console.time('AutoRelease');
            }

            assetManager._releaseManager._autoRelease(oldScene, scene, this._persistRootNodes);

            {
              console.timeEnd('AutoRelease');
            }
          }

          this._scene = null;

          CCObject._deferredDestroy();

          {
            console.timeEnd('Destroy');
          }

          if (onBeforeLoadScene) {
            onBeforeLoadScene();
          }

          this.emit(Director.EVENT_BEFORE_SCENE_LAUNCH, scene);
          this._scene = scene;

          {
            console.time('Activate');
          }

          scene._activate();

          {
            console.timeEnd('Activate');
          }

          if (this._root) {
            this._root.resetCumulativeTime();
          }

          this.startAnimation();

          if (onLaunched) {
            onLaunched(null, scene);
          }

          this.emit(Director.EVENT_AFTER_SCENE_LAUNCH, scene);
        };

        _proto.runScene = function runScene(scene, onBeforeLoadScene, onLaunched) {
          var _this4 = this;

          if (scene instanceof SceneAsset) scene = scene.scene;
          assertID(scene, 1205);
          assertID(scene instanceof Scene, 1216);
          this.once(Director.EVENT_END_FRAME, function () {
            _this4.runSceneImmediate(scene, onBeforeLoadScene, onLaunched);
          });
        };

        _proto.loadScene = function loadScene(sceneName, onLaunched, onUnloaded) {
          var _this5 = this;

          if (this._loadingScene) {
            warnID(1208, sceneName, this._loadingScene);
            return false;
          }

          var bundle = assetManager.bundles.find(function (bundle) {
            return !!bundle.getSceneInfo(sceneName);
          });

          if (bundle) {
            this.emit(Director.EVENT_BEFORE_SCENE_LOADING, sceneName);
            this._loadingScene = sceneName;
            console.time("LoadScene " + sceneName);
            bundle.loadScene(sceneName, function (err, scene) {
              console.timeEnd("LoadScene " + sceneName);
              _this5._loadingScene = '';

              if (err) {
                error(err);

                if (onLaunched) {
                  onLaunched(err);
                }
              } else {
                _this5.runSceneImmediate(scene, onUnloaded, onLaunched);
              }
            });
            return true;
          } else {
            errorID(1209, sceneName);
            return false;
          }
        };

        _proto.preloadScene = function preloadScene(sceneName, onProgress, onLoaded) {
          var bundle = assetManager.bundles.find(function (bundle) {
            return !!bundle.getSceneInfo(sceneName);
          });

          if (bundle) {
            bundle.preloadScene(sceneName, null, onProgress, onLoaded);
          } else {
            var err = "Can not preload the scene \"" + sceneName + "\" because it is not in the build settings.";

            if (onLoaded) {
              onLoaded(new Error(err));
            }

            error("preloadScene: " + err);
          }
        };

        _proto.resume = function resume() {
          if (!this._paused) {
            return;
          }

          this._paused = false;
        };

        _proto.getScene = function getScene() {
          return this._scene;
        };

        _proto.getDeltaTime = function getDeltaTime() {
          return legacyCC.game.deltaTime;
        };

        _proto.getTotalTime = function getTotalTime() {
          return legacyCC.game.totalTime;
        };

        _proto.getCurrentTime = function getCurrentTime() {
          return legacyCC.game.frameStartTime;
        };

        _proto.getTotalFrames = function getTotalFrames() {
          return this._totalFrames;
        };

        _proto.isPaused = function isPaused() {
          return this._paused;
        };

        _proto.getScheduler = function getScheduler() {
          return this._scheduler;
        };

        _proto.setScheduler = function setScheduler(scheduler) {
          if (this._scheduler !== scheduler) {
            this.unregisterSystem(this._scheduler);
            this._scheduler = scheduler;
            this.registerSystem(Scheduler.ID, scheduler, 200);
          }
        };

        _proto.registerSystem = function registerSystem(name, sys, priority) {
          sys.id = name;
          sys.priority = priority;

          this._systems.push(sys);

          this._systems.sort(System.sortByPriority);
        };

        _proto.unregisterSystem = function unregisterSystem(sys) {
          fastRemove(this._systems, sys);

          this._systems.sort(System.sortByPriority);
        };

        _proto.getSystem = function getSystem(name) {
          return this._systems.find(function (sys) {
            return sys.id === name;
          });
        };

        _proto.getAnimationManager = function getAnimationManager() {
          return this.getSystem(legacyCC.AnimationManager.ID);
        };

        _proto.startAnimation = function startAnimation() {
          this._invalid = false;
        };

        _proto.stopAnimation = function stopAnimation() {
          this._invalid = true;
        };

        _proto.mainLoop = function mainLoop(now) {
          var dt;

          {
            dt = legacyCC.game._calculateDT(now);
          }

          this.tick(dt);
        };

        _proto.tick = function tick(dt) {
          if (!this._invalid) {
            this.emit(Director.EVENT_BEGIN_FRAME);

            {
              input._frameDispatchEvents();
            }

            if (!this._paused) {
              this.emit(Director.EVENT_BEFORE_UPDATE);

              this._compScheduler.startPhase();

              this._compScheduler.updatePhase(dt);

              for (var i = 0; i < this._systems.length; ++i) {
                this._systems[i].update(dt);
              }

              this._compScheduler.lateUpdatePhase(dt);

              this.emit(Director.EVENT_AFTER_UPDATE);

              CCObject._deferredDestroy();

              for (var _i = 0; _i < this._systems.length; ++_i) {
                this._systems[_i].postUpdate(dt);
              }
            }

            this.emit(Director.EVENT_BEFORE_DRAW);
            uiRendererManager.updateAllDirtyRenderers();

            this._root.frameMove(dt);

            this.emit(Director.EVENT_AFTER_DRAW);
            Node$1.resetHasChangedFlags();
            Node$1.clearNodeArray();
            containerManager.update(dt);
            this.emit(Director.EVENT_END_FRAME);
            this._totalFrames++;
          }
        };

        _proto.buildRenderPipeline = function buildRenderPipeline() {
          if (this._root) {
            this._root.customPipeline.beginSetup();

            var builder = legacyCC.rendering.getCustomPipeline(macro.CUSTOM_PIPELINE_NAME);
            builder.setup(this._root.cameraList, this._root.customPipeline);

            this._root.customPipeline.endSetup();
          }
        };

        _proto.setupRenderPipelineBuilder = function setupRenderPipelineBuilder() {
          if (macro.CUSTOM_PIPELINE_NAME !== '' && legacyCC.rendering && this._root && this._root.usesCustomPipeline) {
            this.on(Director.EVENT_BEFORE_RENDER, this.buildRenderPipeline, this);
          }
        };

        _proto.init = function init() {
          this._totalFrames = 0;
          this._paused = false;
          this.registerSystem(Scheduler.ID, this._scheduler, 200);
          this._root = new Root(deviceManager.gfxDevice);
          var rootInfo = {};

          this._root.initialize(rootInfo);

          this.setupRenderPipelineBuilder();

          for (var i = 0; i < this._systems.length; i++) {
            this._systems[i].init();
          }

          this.emit(Director.EVENT_INIT);
        };

        _proto.addPersistRootNode = function addPersistRootNode(node) {
          if (!Node$1.isNode(node) || !node.uuid) {
            warnID(3800);
            return;
          }

          var id = node.uuid;

          if (!this._persistRootNodes[id]) {
            var _scene = this._scene;

            if (isValid(_scene)) {
              if (!node.parent) {
                node.parent = _scene;
                node._originalSceneId = _scene.uuid;
              } else if (!(node.parent instanceof Scene)) {
                warnID(3801);
                return;
              } else if (node.parent !== _scene) {
                warnID(3802);
                return;
              } else {
                node._originalSceneId = _scene.uuid;
              }
            }

            this._persistRootNodes[id] = node;
            node._persistNode = true;

            assetManager._releaseManager._addPersistNodeRef(node);
          }
        };

        _proto.removePersistRootNode = function removePersistRootNode(node) {
          var id = node.uuid || '';

          if (node === this._persistRootNodes[id]) {
            delete this._persistRootNodes[id];
            node._persistNode = false;
            node._originalSceneId = '';

            assetManager._releaseManager._removePersistNodeRef(node);
          }
        };

        _proto.isPersistRootNode = function isPersistRootNode(node) {
          return !!node._persistNode;
        };

        _createClass(Director, [{
          key: "root",
          get: function get() {
            return this._root;
          }
        }]);

        return Director;
      }(EventTarget));
      Director.EVENT_INIT = 'director_init';
      Director.EVENT_RESET = 'director_reset';
      Director.EVENT_BEFORE_SCENE_LOADING = 'director_before_scene_loading';
      Director.EVENT_BEFORE_SCENE_LAUNCH = 'director_before_scene_launch';
      Director.EVENT_AFTER_SCENE_LAUNCH = 'director_after_scene_launch';
      Director.EVENT_BEFORE_UPDATE = 'director_before_update';
      Director.EVENT_AFTER_UPDATE = 'director_after_update';
      Director.EVENT_BEFORE_DRAW = 'director_before_draw';
      Director.EVENT_AFTER_DRAW = 'director_after_draw';
      Director.EVENT_BEFORE_COMMIT = 'director_before_commit';
      Director.EVENT_BEFORE_RENDER = 'director_before_render';
      Director.EVENT_AFTER_RENDER = 'director_after_render';
      Director.EVENT_BEFORE_PHYSICS = 'director_before_physics';
      Director.EVENT_AFTER_PHYSICS = 'director_after_physics';
      Director.EVENT_BEGIN_FRAME = 'director_begin_frame';
      Director.EVENT_END_FRAME = 'director_end_frame';
      Director.instance = void 0;
      legacyCC.Director = Director;
      var director = exports('director', Director.instance = legacyCC.director = new Director());

      function findCanvas() {
        var frame = document.querySelector('#GameDiv');
        var container = document.querySelector('#Cocos3dGameContainer');
        var canvas = document.querySelector('#GameCanvas');
        return {
          frame: frame,
          container: container,
          canvas: canvas
        };
      }
      function loadJsFile(path) {
        return new Promise(function (resolve, reject) {
          var err;

          function windowErrorListener(evt) {
            if (evt.filename === path) {
              err = evt.error;
            }
          }

          window.addEventListener('error', windowErrorListener);
          var script = document.createElement('script');
          script.charset = 'utf-8';
          script.async = true;
          script.crossOrigin = 'anonymous';
          script.addEventListener('error', function () {
            window.removeEventListener('error', windowErrorListener);
            reject(Error("Error loading " + path));
          });
          script.addEventListener('load', function () {
            window.removeEventListener('error', windowErrorListener);
            document.head.removeChild(script);

            if (err) {
              reject(err);
            } else {
              resolve();
            }
          });
          script.src = path.replace('#', '%23');
          document.head.appendChild(script);
        });
      }

      var Pacer = function () {
        function Pacer() {
          this._rafHandle = 0;
          this._stHandle = 0;
          this._onTick = null;
          this._targetFrameRate = 60;
          this._frameTime = 0;
          this._startTime = 0;
          this._isPlaying = false;
          this._rAF = void 0;
          this._cAF = void 0;
          this._rAF = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || this._stTime.bind(this);
          this._cAF = window.cancelAnimationFrame || window.cancelRequestAnimationFrame || window.msCancelRequestAnimationFrame || window.mozCancelRequestAnimationFrame || window.oCancelRequestAnimationFrame || window.webkitCancelRequestAnimationFrame || window.msCancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.ocancelAnimationFrame || this._ctTime.bind(this);
        }

        var _proto = Pacer.prototype;

        _proto.start = function start() {
          var _this = this;

          if (this._isPlaying) return;

          if (this._targetFrameRate === 60) {
            var updateCallback = function updateCallback() {
              if (_this._isPlaying) {
                _this._rafHandle = _this._rAF.call(window, updateCallback);
              }

              if (_this._onTick) {
                _this._onTick();
              }
            };

            this._rafHandle = this._rAF.call(window, updateCallback);
          } else {
            var _updateCallback = function _updateCallback() {
              _this._startTime = performance.now();

              if (_this._isPlaying) {
                _this._stHandle = _this._stTime(_updateCallback);
              }

              if (_this._onTick) {
                _this._onTick();
              }
            };

            this._startTime = performance.now();
            this._stHandle = this._stTime(_updateCallback);
          }

          this._isPlaying = true;
        };

        _proto.stop = function stop() {
          if (!this._isPlaying) return;

          this._cAF.call(window, this._rafHandle);

          this._ctTime(this._stHandle);

          this._rafHandle = this._stHandle = 0;
          this._isPlaying = false;
        };

        _proto._stTime = function _stTime(callback) {
          var currTime = performance.now();
          var elapseTime = Math.max(0, currTime - this._startTime);
          var timeToCall = Math.max(0, this._frameTime - elapseTime);
          var id = setTimeout(callback, timeToCall);
          return id;
        };

        _proto._ctTime = function _ctTime(id) {
          clearTimeout(id);
        };

        _createClass(Pacer, [{
          key: "targetFrameRate",
          get: function get() {
            return this._targetFrameRate;
          },
          set: function set(val) {
            if (this._targetFrameRate !== val) {
              assertIsTrue(val > 0);
              this._targetFrameRate = val;
              this._frameTime = 1000 / this._targetFrameRate;

              if (this._isPlaying) {
                this.stop();
                this.start();
              }
            }
          }
        }, {
          key: "onTick",
          get: function get() {
            return this._onTick;
          },
          set: function set(val) {
            this._onTick = val;
          }
        }]);

        return Pacer;
      }();

      var EffectSettings = function () {
        function EffectSettings() {
          this._data = null;
        }

        var _proto = EffectSettings.prototype;

        _proto.init = function init(path) {
          var _this = this;

          if (path === void 0) {
            path = '';
          }

          if (!legacyCC.rendering || !legacyCC.rendering.enableEffectImport || !path) {
            return Promise.resolve();
          }

          return new Promise(function (resolve, reject) {
            {
              var xhr = new XMLHttpRequest();
              xhr.open('GET', path);
              xhr.responseType = 'arraybuffer';

              xhr.onload = function () {
                _this._data = xhr.response;
                resolve();
              };

              xhr.onerror = function () {
                reject(new Error('request effect settings failed!'));
              };

              xhr.send(null);
            }
          });
        };

        _createClass(EffectSettings, [{
          key: "data",
          get: function get() {
            return this._data;
          }
        }]);

        return EffectSettings;
      }();
      var effectSettings = new EffectSettings();
      legacyCC.effectSettings = effectSettings;

      var Game = exports('Game', function (_EventTarget) {
        _inheritsLoose(Game, _EventTarget);

        function Game() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _EventTarget.call.apply(_EventTarget, [this].concat(args)) || this;
          _this.frame = null;
          _this.container = null;
          _this.canvas = null;
          _this.renderType = -1;
          _this.eventTargetOn = _EventTarget.prototype.on;
          _this.eventTargetOnce = _EventTarget.prototype.once;
          _this.config = {};
          _this.onStart = null;
          _this.frameTime = 1000 / 60;
          _this._isCloning = false;
          _this._inited = false;
          _this._engineInited = false;
          _this._rendererInitialized = false;
          _this._paused = true;
          _this._pausedByEngine = false;
          _this._frameRate = 60;
          _this._pacer = null;
          _this._initTime = 0;
          _this._startTime = 0;
          _this._deltaTime = 0.0;
          _this._shouldLoadLaunchScene = true;
          _this.onPreBaseInitDelegate = new AsyncDelegate();
          _this.onPostBaseInitDelegate = new AsyncDelegate();
          _this.onPreInfrastructureInitDelegate = new AsyncDelegate();
          _this.onPostInfrastructureInitDelegate = new AsyncDelegate();
          _this.onPreSubsystemInitDelegate = new AsyncDelegate();
          _this.onPostSubsystemInitDelegate = new AsyncDelegate();
          _this.onPreProjectInitDelegate = new AsyncDelegate();
          _this.onPostProjectInitDelegate = new AsyncDelegate();
          return _this;
        }

        var _proto = Game.prototype;

        _proto.setFrameRate = function setFrameRate(frameRate) {
          this.frameRate = frameRate;
        };

        _proto.getFrameRate = function getFrameRate() {
          return this.frameRate;
        };

        _proto.step = function step() {
          director.tick(this.frameTime / 1000);
        };

        _proto.pauseByEngine = function pauseByEngine() {
          if (this._paused) {
            return;
          }

          this._pausedByEngine = true;
          this.pause();
        };

        _proto.resumeByEngine = function resumeByEngine() {
          if (this._pausedByEngine) {
            this.resume();
            this._pausedByEngine = false;
          }
        };

        _proto.pause = function pause() {
          var _this$_pacer;

          if (this._paused) {
            return;
          }

          this._paused = true;
          (_this$_pacer = this._pacer) === null || _this$_pacer === void 0 ? void 0 : _this$_pacer.stop();
          this.emit(Game.EVENT_PAUSE);
        };

        _proto.resume = function resume() {
          var _this$_pacer2;

          if (!this._paused) {
            return;
          }

          input._clearEvents();

          this._paused = false;
          (_this$_pacer2 = this._pacer) === null || _this$_pacer2 === void 0 ? void 0 : _this$_pacer2.start();
          this.emit(Game.EVENT_RESUME);
        };

        _proto.isPaused = function isPaused() {
          return this._paused;
        };

        _proto.restart = function restart() {
          var _this2 = this;

          var endFramePromise = new Promise(function (resolve) {
            director.once(Director.EVENT_END_FRAME, function () {
              return resolve();
            });
          });
          return endFramePromise.then(function () {
            director.reset();

            legacyCC.Object._deferredDestroy();

            _this2.pause();

            _this2.resume();

            _this2._shouldLoadLaunchScene = true;
            SplashScreen.instance.curTime = 0;

            _this2._safeEmit(Game.EVENT_RESTART);
          });
        };

        _proto.end = function end() {
          systemInfo.close();
        };

        _proto.on = function on(type, callback, target, once) {
          if (this._engineInited && type === Game.EVENT_ENGINE_INITED || this._inited && type === Game.EVENT_GAME_INITED || this._rendererInitialized && type === Game.EVENT_RENDERER_INITED) {
            callback.call(target);
          }

          return this.eventTargetOn(type, callback, target, once);
        };

        _proto.once = function once(type, callback, target) {
          if (this._engineInited && type === Game.EVENT_ENGINE_INITED) {
            return callback.call(target);
          }

          return this.eventTargetOnce(type, callback, target);
        };

        _proto.init = function init(config) {
          var _this3 = this;

          this._compatibleWithOldParams(config);

          return Promise.resolve().then(function () {
            _this3.emit(Game.EVENT_PRE_BASE_INIT);

            return _this3.onPreBaseInitDelegate.dispatch();
          }).then(function () {
            {
              console.time('Init Base');
            }

            var debugMode = config.debugMode || DebugMode.NONE;

            _resetDebugSetting(debugMode);
          }).then(function () {
            return sys.init();
          }).then(function () {
            _this3._initEvents();
          }).then(function () {
            return settings.init(config.settingsPath, config.overrideSettings);
          }).then(function () {
            {
              console.timeEnd('Init Base');
            }

            _this3.emit(Game.EVENT_POST_BASE_INIT);

            return _this3.onPostBaseInitDelegate.dispatch();
          }).then(function () {
            _this3.emit(Game.EVENT_PRE_INFRASTRUCTURE_INIT);

            return _this3.onPreInfrastructureInitDelegate.dispatch();
          }).then(function () {
            {
              console.time('Init Infrastructure');
            }

            macro.init();

            _this3._initXR();

            var adapter = findCanvas();

            if (adapter) {
              _this3.canvas = adapter.canvas;
              _this3.frame = adapter.frame;
              _this3.container = adapter.container;
            }

            screen.init();
            garbageCollectionManager.init();
            deviceManager.init(_this3.canvas, bindingMappingInfo);

            if (macro.CUSTOM_PIPELINE_NAME === '') {
              legacyCC.rendering = undefined;
            }

            assetManager.init();
            builtinResMgr.init();
            Layers.init();

            _this3.initPacer();

            {
              console.timeEnd('Init Infrastructure');
            }
          }).then(function () {
            _this3.emit(Game.EVENT_POST_INFRASTRUCTURE_INIT);

            return _this3.onPostInfrastructureInitDelegate.dispatch();
          }).then(function () {
            _this3.emit(Game.EVENT_PRE_SUBSYSTEM_INIT);

            return _this3.onPreSubsystemInitDelegate.dispatch();
          }).then(function () {
            return effectSettings.init(settings.querySettings(Settings.Category.RENDERING, 'effectSettingsPath'));
          }).then(function () {
            if (!legacyCC.rendering || !legacyCC.rendering.enableEffectImport) {
              return;
            }

            var renderMode = settings.querySettings(Settings.Category.RENDERING, 'renderMode');

            if (renderMode === LegacyRenderMode.HEADLESS) {
              legacyCC.rendering.init(deviceManager.gfxDevice, null);
              return;
            }

            var data = effectSettings.data;

            if (data === null) {
              console.error('Effect settings not found, effects will not be imported.');
              return;
            }

            legacyCC.rendering.init(deviceManager.gfxDevice, data);
          }).then(function () {
            {
              console.time('Init SubSystem');
            }

            director.init();
            return builtinResMgr.loadBuiltinAssets();
          }).then(function () {
            {
              console.timeEnd('Init SubSystem');
            }

            _this3.emit(Game.EVENT_POST_SUBSYSTEM_INIT);

            return _this3.onPostSubsystemInitDelegate.dispatch();
          }).then(function () {
            console.log("Cocos Creator v" + engineVersion);

            _this3.emit(Game.EVENT_ENGINE_INITED);

            _this3._engineInited = true;
          }).then(function () {
            _this3.emit(Game.EVENT_PRE_PROJECT_INIT);

            return _this3.onPreProjectInitDelegate.dispatch();
          }).then(function () {
            {
              console.time('Init Project');
            }

            var jsList = settings.querySettings(Settings.Category.PLUGINS, 'jsList');
            var promise = Promise.resolve();

            if (jsList) {
              var projectPath = settings.querySettings(Settings.Category.PATH, 'projectPath') || '';
              jsList.forEach(function (jsListFile) {
                promise = promise.then(function () {
                  return loadJsFile(( 'src') + "/" + jsListFile);
                });
              });
            }

            return promise;
          }).then(function () {
            var scriptPackages = settings.querySettings(Settings.Category.SCRIPTING, 'scriptPackages');

            if (scriptPackages) {
              return Promise.all(scriptPackages.map(function (pack) {
                return module.import(pack);
              }));
            }

            return Promise.resolve([]);
          }).then(function () {
            return _this3._loadProjectBundles();
          }).then(function () {
            return _this3._loadCCEScripts();
          }).then(function () {
            return _this3._setupRenderPipeline();
          }).then(function () {
            return _this3._loadPreloadAssets();
          }).then(function () {
            builtinResMgr.compileBuiltinMaterial();
            return SplashScreen.instance.init();
          }).then(function () {
            {
              console.timeEnd('Init Project');
            }

            _this3.emit(Game.EVENT_POST_PROJECT_INIT);

            return _this3.onPostProjectInitDelegate.dispatch();
          }).then(function () {
            _this3._inited = true;

            _this3._safeEmit(Game.EVENT_GAME_INITED);
          });
        };

        _proto._initXR = function _initXR() {
          var _settings$querySettin;

          if (typeof globalThis.__globalXR === 'undefined') {
            globalThis.__globalXR = {};
          }

          var globalXR = globalThis.__globalXR;
          globalXR.webxrCompatible = (_settings$querySettin = settings.querySettings(Settings.Category.XR, 'webxrCompatible')) !== null && _settings$querySettin !== void 0 ? _settings$querySettin : false;

          if (sys.isXR) {
            var _settings$querySettin2, _settings$querySettin3;

            xr.entry = xr.XrEntry.getInstance();
            var xrMSAA = (_settings$querySettin2 = settings.querySettings(Settings.Category.RENDERING, 'msaa')) !== null && _settings$querySettin2 !== void 0 ? _settings$querySettin2 : 1;
            var xrRenderingScale = (_settings$querySettin3 = settings.querySettings(Settings.Category.RENDERING, 'renderingScale')) !== null && _settings$querySettin3 !== void 0 ? _settings$querySettin3 : 1.0;
            xr.entry.setMultisamplesRTT(xrMSAA);
            xr.entry.setRenderingScale(xrRenderingScale);
          }
        };

        _proto._compatibleWithOldParams = function _compatibleWithOldParams(config) {
          var overrideSettings = config.overrideSettings = config.overrideSettings || {};

          if ('showFPS' in config) {
            overrideSettings.profiling = overrideSettings.profiling || {};
            overrideSettings.profiling.showFPS = config.showFPS;
          }

          if ('frameRate' in config) {
            overrideSettings.screen = overrideSettings.screen || {};
            overrideSettings.screen.frameRate = config.frameRate;
          }

          if ('renderMode' in config) {
            overrideSettings.rendering = overrideSettings.rendering || {};
            overrideSettings.rendering.renderMode = config.renderMode;
          }

          if ('renderPipeline' in config) {
            overrideSettings.rendering = overrideSettings.rendering || {};
            overrideSettings.rendering.renderPipeline = config.renderPipeline;
          }

          if ('assetOptions' in config) {
            overrideSettings.assets = overrideSettings.assets || {};
            Object.assign(overrideSettings.assets, config.assetOptions);
          }

          if ('customJointTextureLayouts' in config) {
            overrideSettings.animation = overrideSettings.animation || {};
            overrideSettings.animation.customJointTextureLayouts = config.customJointTextureLayouts;
          }

          if ('physics' in config) {
            overrideSettings.physics = overrideSettings.physics || {};
            Object.assign(overrideSettings.physics, config.physics);
          }

          if ('orientation' in config) {
            overrideSettings.screen = overrideSettings.screen || {};
            overrideSettings.screen.orientation = config.orientation;
          }

          if ('exactFitScreen' in config) {
            overrideSettings.screen = overrideSettings.screen || {};
            overrideSettings.screen.exactFitScreen = config.exactFitScreen;
          }
        };

        _proto._loadPreloadAssets = function _loadPreloadAssets() {
          var preloadAssets = settings.querySettings(Settings.Category.ASSETS, 'preloadAssets');
          if (!preloadAssets) return Promise.resolve([]);
          return Promise.all(preloadAssets.map(function (uuid) {
            return new Promise(function (resolve, reject) {
              assetManager.loadAny(uuid, function (err) {
                if (err) {
                  reject(err);
                  return;
                }

                resolve();
              });
            });
          }));
        };

        _proto._loadCCEScripts = function _loadCCEScripts() {
          return new Promise(function (resolve, reject) {
            {
              resolve();
            }
          });
        };

        _proto._loadProjectBundles = function _loadProjectBundles() {
          var preloadBundles = settings.querySettings(Settings.Category.ASSETS, 'preloadBundles');
          if (!preloadBundles) return Promise.resolve([]);
          return Promise.all(preloadBundles.map(function (_ref) {
            var bundle = _ref.bundle,
                version = _ref.version;
            return new Promise(function (resolve, reject) {
              var opts = {};
              if (version) opts.version = version;
              assetManager.loadBundle(bundle, opts, function (err) {
                if (err) {
                  reject(err);
                  return;
                }

                resolve();
              });
            });
          }));
        };

        _proto.run = function run(onStart) {
          if (onStart) {
            this.onStart = onStart;
          }

          if (!this._inited || EDITOR ) {
            return;
          }

          this.resume();
        };

        _proto._calculateDT = function _calculateDT() {
          var now = performance.now();
          this._deltaTime = now > this._startTime ? (now - this._startTime) / 1000 : 0;

          if (this._deltaTime > Game.DEBUG_DT_THRESHOLD) {
            this._deltaTime = this.frameTime / 1000;
          }

          this._startTime = now;
          return this._deltaTime;
        };

        _proto._updateCallback = function _updateCallback() {
          var _this4 = this;

          if (!this._inited) return;

          if (!SplashScreen.instance.isFinished) {
            SplashScreen.instance.update(this._calculateDT());
          } else if (this._shouldLoadLaunchScene) {
            this._shouldLoadLaunchScene = false;
            var launchScene = settings.querySettings(Settings.Category.LAUNCH, 'launchScene');

            if (launchScene) {
              director.loadScene(launchScene, function () {
                var _this4$onStart;

                console.log("Success to load scene: " + launchScene);
                _this4._initTime = performance.now();
                director.startAnimation();
                (_this4$onStart = _this4.onStart) === null || _this4$onStart === void 0 ? void 0 : _this4$onStart.call(_this4);
              });
            } else {
              var _this$onStart;

              this._initTime = performance.now();
              director.startAnimation();
              (_this$onStart = this.onStart) === null || _this$onStart === void 0 ? void 0 : _this$onStart.call(this);
            }
          } else {
            director.tick(this._calculateDT());
          }
        };

        _proto.initPacer = function initPacer() {
          var _settings$querySettin4;

          var frameRate = (_settings$querySettin4 = settings.querySettings(Settings.Category.SCREEN, 'frameRate')) !== null && _settings$querySettin4 !== void 0 ? _settings$querySettin4 : 60;
          assert(typeof frameRate === 'number');
          this._pacer = new Pacer();
          this._pacer.onTick = this._updateCallback.bind(this);
          this.frameRate = frameRate;
        };

        _proto._initEvents = function _initEvents() {
          systemInfo.on('show', this._onShow, this);
          systemInfo.on('hide', this._onHide, this);
        };

        _proto._onHide = function _onHide() {
          this.emit(Game.EVENT_HIDE);
          this.pauseByEngine();
        };

        _proto._onShow = function _onShow() {
          this.emit(Game.EVENT_SHOW);
          this.resumeByEngine();
        };

        _proto.addPersistRootNode = function addPersistRootNode(node) {
          director.addPersistRootNode(node);
        };

        _proto.removePersistRootNode = function removePersistRootNode(node) {
          director.removePersistRootNode(node);
        };

        _proto.isPersistRootNode = function isPersistRootNode(node) {
          return director.isPersistRootNode(node);
        };

        _proto._setupRenderPipeline = function _setupRenderPipeline() {
          var _this5 = this;

          var renderPipeline = settings.querySettings(Settings.Category.RENDERING, 'renderPipeline');

          if (!renderPipeline) {
            return this._setRenderPipeline();
          }

          return new Promise(function (resolve, reject) {
            assetManager.loadAny(renderPipeline, function (err, asset) {
              return err || !(asset instanceof RenderPipeline) ? reject(err) : resolve(asset);
            });
          }).then(function (asset) {
            _this5._setRenderPipeline(asset);
          })["catch"](function (reason) {
            warn(reason);
            warn("Failed load render pipeline: " + renderPipeline + ", engine failed to initialize, will fallback to default pipeline");

            _this5._setRenderPipeline();
          });
        };

        _proto._setRenderPipeline = function _setRenderPipeline(rppl) {
          if (!director.root.setRenderPipeline(rppl)) {
            this._setRenderPipeline();
          }

          this._rendererInitialized = true;

          this._safeEmit(Game.EVENT_RENDERER_INITED);
        };

        _proto._safeEmit = function _safeEmit(event) {
          {
            this.emit(event);
          }
        };

        _createClass(Game, [{
          key: "inited",
          get: function get() {
            return this._inited;
          }
        }, {
          key: "frameRate",
          get: function get() {
            return this._frameRate;
          },
          set: function set(frameRate) {
            if (typeof frameRate !== 'number') {
              frameRate = parseInt(frameRate, 10);

              if (Number.isNaN(frameRate)) {
                frameRate = 60;
              }
            }

            this._frameRate = frameRate;
            this.frameTime = 1000 / frameRate;
            if (this._pacer) this._pacer.targetFrameRate = this._frameRate;
          }
        }, {
          key: "deltaTime",
          get: function get() {
            return this._deltaTime;
          }
        }, {
          key: "totalTime",
          get: function get() {
            return performance.now() - this._initTime;
          }
        }, {
          key: "frameStartTime",
          get: function get() {
            return this._startTime;
          }
        }]);

        return Game;
      }(EventTarget));
      Game.EVENT_HIDE = 'game_on_hide';
      Game.EVENT_SHOW = 'game_on_show';
      Game.EVENT_LOW_MEMORY = 'game_on_low_memory';
      Game.EVENT_GAME_INITED = 'game_inited';
      Game.EVENT_ENGINE_INITED = 'engine_inited';
      Game.EVENT_RENDERER_INITED = 'renderer_inited';
      Game.EVENT_PRE_BASE_INIT = 'pre_base_init';
      Game.EVENT_POST_BASE_INIT = 'post_base_init';
      Game.EVENT_PRE_INFRASTRUCTURE_INIT = 'pre_infrastructure_init';
      Game.EVENT_POST_INFRASTRUCTURE_INIT = 'post_infrastructure_init';
      Game.EVENT_PRE_SUBSYSTEM_INIT = 'pre_subsystem_init';
      Game.EVENT_POST_SUBSYSTEM_INIT = 'post_subsystem_init';
      Game.EVENT_PRE_PROJECT_INIT = 'pre_project_init';
      Game.EVENT_POST_PROJECT_INIT = 'post_project_init';
      Game.EVENT_RESTART = 'game_on_restart';
      Game.EVENT_PAUSE = 'game_on_pause';
      Game.EVENT_RESUME = 'game_on_resume';
      Game.RENDER_TYPE_CANVAS = 0;
      Game.RENDER_TYPE_WEBGL = 1;
      Game.RENDER_TYPE_OPENGL = 2;
      Game.RENDER_TYPE_HEADLESS = 3;
      Game.DEBUG_DT_THRESHOLD = 1;
      legacyCC.Game = Game;
      var game = exports('game', legacyCC.game = new Game());

      var DynamicAtlasManager = function (_System) {
        _inheritsLoose(DynamicAtlasManager, _System);

        function DynamicAtlasManager() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _System.call.apply(_System, [this].concat(args)) || this;
          _this._atlases = [];
          _this._atlasIndex = -1;
          _this._maxAtlasCount = 5;
          _this._textureSize = 2048;
          _this._maxFrameSize = 512;
          _this._textureBleeding = true;
          _this._enabled = false;
          return _this;
        }

        var _proto = DynamicAtlasManager.prototype;

        _proto.newAtlas = function newAtlas() {
          var atlas = this._atlases[++this._atlasIndex];

          if (!atlas) {
            atlas = new Atlas(this._textureSize, this._textureSize);

            this._atlases.push(atlas);
          }

          return atlas;
        };

        _proto.beforeSceneLoad = function beforeSceneLoad() {
          this.reset();
        };

        _proto.init = function init() {
          this.enabled = !macro.CLEANUP_IMAGE_CACHE;
        };

        _proto.insertSpriteFrame = function insertSpriteFrame(spriteFrame) {
          if (!this._enabled || this._atlasIndex === this._maxAtlasCount || !spriteFrame || spriteFrame._original) return null;
          if (!spriteFrame.packable) return null;
          var sampler = spriteFrame.texture.getSamplerInfo();

          if (sampler.minFilter !== Filter$1.LINEAR || sampler.magFilter !== Filter$1.LINEAR || sampler.mipFilter !== Filter$1.NONE) {
            return null;
          }

          var atlas = this._atlases[this._atlasIndex];

          if (!atlas) {
            atlas = this.newAtlas();
          }

          var frame = atlas.insertSpriteFrame(spriteFrame);

          if (!frame && this._atlasIndex !== this._maxAtlasCount) {
            atlas = this.newAtlas();
            return atlas.insertSpriteFrame(spriteFrame);
          }

          return frame;
        };

        _proto.reset = function reset() {
          for (var i = 0, l = this._atlases.length; i < l; i++) {
            this._atlases[i].destroy();
          }

          this._atlases.length = 0;
          this._atlasIndex = -1;
        };

        _proto.deleteAtlasSpriteFrame = function deleteAtlasSpriteFrame(spriteFrame) {
          if (!spriteFrame._original) return;
          var atlas;

          for (var i = this._atlases.length - 1; i >= 0; i--) {
            atlas = this._atlases[i];
            fastRemove(atlas._innerSpriteFrames, spriteFrame);
          }

          var texture = spriteFrame._original._texture;
          this.deleteAtlasTexture(texture);
        };

        _proto.deleteAtlasTexture = function deleteAtlasTexture(texture) {
          if (texture) {
            for (var i = this._atlases.length - 1; i >= 0; i--) {
              this._atlases[i].deleteInnerTexture(texture);

              if (this._atlases[i].isEmpty()) {
                this._atlases[i].destroy();

                this._atlases.splice(i, 1);

                this._atlasIndex--;
              }
            }
          }
        };

        _proto.packToDynamicAtlas = function packToDynamicAtlas(comp, frame) {
          if ( !this._enabled) return;

          if (frame && !frame._original && frame.packable && frame.texture && frame.texture.width > 0 && frame.texture.height > 0) {
            var packedFrame = this.insertSpriteFrame(frame);

            if (packedFrame) {
              frame._setDynamicAtlasFrame(packedFrame);
            }
          }
        };

        _createClass(DynamicAtlasManager, [{
          key: "enabled",
          get: function get() {
            return this._enabled;
          },
          set: function set(value) {
            if (this._enabled === value) return;

            if (value) {
              this.reset();
              legacyCC.director.on(legacyCC.Director.EVENT_BEFORE_SCENE_LAUNCH, this.beforeSceneLoad, this);
            } else {
              this.reset();
              legacyCC.director.off(legacyCC.Director.EVENT_BEFORE_SCENE_LAUNCH, this.beforeSceneLoad, this);
            }

            this._enabled = value;
          }
        }, {
          key: "maxAtlasCount",
          get: function get() {
            return this._maxAtlasCount;
          },
          set: function set(value) {
            this._maxAtlasCount = value;
          }
        }, {
          key: "atlasCount",
          get: function get() {
            return this._atlases.length;
          }
        }, {
          key: "textureBleeding",
          get: function get() {
            return this._textureBleeding;
          },
          set: function set(enable) {
            this._textureBleeding = enable;
          }
        }, {
          key: "textureSize",
          get: function get() {
            return this._textureSize;
          },
          set: function set(value) {
            this._textureSize = value;
          }
        }, {
          key: "maxFrameSize",
          get: function get() {
            return this._maxFrameSize;
          },
          set: function set(value) {
            this._maxFrameSize = value;
          }
        }]);

        return DynamicAtlasManager;
      }(System);
      DynamicAtlasManager.instance = void 0;
      var dynamicAtlasManager = exports('dynamicAtlasManager', DynamicAtlasManager.instance = new DynamicAtlasManager());
      director.registerSystem('dynamicAtlasManager', dynamicAtlasManager, 0);
      legacyCC.internal.dynamicAtlasManager = dynamicAtlasManager;

      var _keyMap;

      (function (_keyMap) {
        _keyMap[_keyMap["positions"] = AttributeName.ATTR_POSITION] = "positions";
        _keyMap[_keyMap["normals"] = AttributeName.ATTR_NORMAL] = "normals";
        _keyMap[_keyMap["uvs"] = AttributeName.ATTR_TEX_COORD] = "uvs";
        _keyMap[_keyMap["colors"] = AttributeName.ATTR_COLOR] = "colors";
      })(_keyMap || (_keyMap = {}));

      var BufferBlob = function () {
        function BufferBlob() {
          this._arrayBufferOrPaddings = [];
          this._length = 0;
        }

        var _proto = BufferBlob.prototype;

        _proto.setNextAlignment = function setNextAlignment(align) {
          if (align !== 0) {
            var remainder = this._length % align;

            if (remainder !== 0) {
              var padding = align - remainder;

              this._arrayBufferOrPaddings.push(padding);

              this._length += padding;
            }
          }
        };

        _proto.addBuffer = function addBuffer(arrayBuffer) {
          var result = this._length;

          this._arrayBufferOrPaddings.push(arrayBuffer);

          this._length += arrayBuffer.byteLength;
          return result;
        };

        _proto.getLength = function getLength() {
          return this._length;
        };

        _proto.getCombined = function getCombined() {
          var result = new Uint8Array(this._length);
          var counter = 0;

          this._arrayBufferOrPaddings.forEach(function (arrayBufferOrPadding) {
            if (typeof arrayBufferOrPadding === 'number') {
              counter += arrayBufferOrPadding;
            } else {
              result.set(new Uint8Array(arrayBufferOrPadding), counter);
              counter += arrayBufferOrPadding.byteLength;
            }
          });

          return result.buffer;
        };

        return BufferBlob;
      }();

      function createMorphRendering(mesh, gfxDevice) {
        return new StdMorphRendering(mesh, gfxDevice);
      }
      var StdMorphRendering = function () {
        function StdMorphRendering(mesh, gfxDevice) {
          this._mesh = void 0;
          this._subMeshRenderings = [];
          this._mesh = mesh;

          if (!this._mesh.struct.morph) {
            return;
          }

          var nSubMeshes = this._mesh.struct.primitives.length;
          this._subMeshRenderings = new Array(nSubMeshes).fill(null);

          for (var iSubMesh = 0; iSubMesh < nSubMeshes; ++iSubMesh) {
            var subMeshMorph = this._mesh.struct.morph.subMeshMorphs[iSubMesh];

            if (!subMeshMorph) {
              continue;
            }

            if ( subMeshMorph.targets.length > UBOMorph.MAX_MORPH_TARGET_COUNT) {
              this._subMeshRenderings[iSubMesh] = new CpuComputing(this._mesh, iSubMesh, this._mesh.struct.morph, gfxDevice);
            } else {
              this._subMeshRenderings[iSubMesh] = new GpuComputing(this._mesh, iSubMesh, this._mesh.struct.morph, gfxDevice);
            }
          }
        }

        var _proto = StdMorphRendering.prototype;

        _proto.createInstance = function createInstance() {
          var _this = this;

          var nSubMeshes = this._mesh.struct.primitives.length;
          var subMeshInstances = new Array(nSubMeshes);

          for (var iSubMesh = 0; iSubMesh < nSubMeshes; ++iSubMesh) {
            var _this$_subMeshRenderi, _this$_subMeshRenderi2;

            subMeshInstances[iSubMesh] = (_this$_subMeshRenderi = (_this$_subMeshRenderi2 = this._subMeshRenderings[iSubMesh]) === null || _this$_subMeshRenderi2 === void 0 ? void 0 : _this$_subMeshRenderi2.createInstance()) !== null && _this$_subMeshRenderi !== void 0 ? _this$_subMeshRenderi : null;
          }

          return {
            setWeights: function setWeights(subMeshIndex, weights) {
              var _subMeshInstances$sub;

              (_subMeshInstances$sub = subMeshInstances[subMeshIndex]) === null || _subMeshInstances$sub === void 0 ? void 0 : _subMeshInstances$sub.setWeights(weights);
            },
            requiredPatches: function requiredPatches(subMeshIndex) {
              assertIsNonNullable(_this._mesh.struct.morph);
              var subMeshMorph = _this._mesh.struct.morph.subMeshMorphs[subMeshIndex];
              var subMeshRenderingInstance = subMeshInstances[subMeshIndex];

              if (subMeshRenderingInstance === null) {
                return null;
              }

              assertIsNonNullable(subMeshMorph);
              var patches = [{
                name: 'CC_USE_MORPH',
                value: true
              }, {
                name: 'CC_MORPH_TARGET_COUNT',
                value: subMeshMorph.targets.length
              }];

              if (subMeshMorph.attributes.includes(AttributeName.ATTR_POSITION)) {
                patches.push({
                  name: 'CC_MORPH_TARGET_HAS_POSITION',
                  value: true
                });
              }

              if (subMeshMorph.attributes.includes(AttributeName.ATTR_NORMAL)) {
                patches.push({
                  name: 'CC_MORPH_TARGET_HAS_NORMAL',
                  value: true
                });
              }

              if (subMeshMorph.attributes.includes(AttributeName.ATTR_TANGENT)) {
                patches.push({
                  name: 'CC_MORPH_TARGET_HAS_TANGENT',
                  value: true
                });
              }

              patches.push.apply(patches, subMeshRenderingInstance.requiredPatches());
              return patches;
            },
            adaptPipelineState: function adaptPipelineState(subMeshIndex, descriptorSet) {
              var _subMeshInstances$sub2;

              (_subMeshInstances$sub2 = subMeshInstances[subMeshIndex]) === null || _subMeshInstances$sub2 === void 0 ? void 0 : _subMeshInstances$sub2.adaptPipelineState(descriptorSet);
            },
            destroy: function destroy() {
              for (var _iterator = _createForOfIteratorHelperLoose(subMeshInstances), _step; !(_step = _iterator()).done;) {
                var subMeshInstance = _step.value;
                subMeshInstance === null || subMeshInstance === void 0 ? void 0 : subMeshInstance.destroy();
              }
            }
          };
        };

        return StdMorphRendering;
      }();

      var GpuComputing = function () {
        function GpuComputing(mesh, subMeshIndex, morph, gfxDevice) {
          this._gfxDevice = void 0;
          this._subMeshMorph = void 0;
          this._textureInfo = void 0;
          this._attributes = void 0;
          this._verticesCount = void 0;
          this._gfxDevice = gfxDevice;
          var subMeshMorph = morph.subMeshMorphs[subMeshIndex];
          assertIsNonNullable(subMeshMorph);
          this._subMeshMorph = subMeshMorph;
          enableVertexId(mesh, subMeshIndex, gfxDevice);
          var nVertices = mesh.struct.vertexBundles[mesh.struct.primitives[subMeshIndex].vertexBundelIndices[0]].view.count;
          this._verticesCount = nVertices;
          var nTargets = subMeshMorph.targets.length;
          var vec4Required = nVertices * nTargets;
          var vec4TextureFactory = createVec4TextureFactory(gfxDevice, vec4Required);
          this._textureInfo = {
            width: vec4TextureFactory.width,
            height: vec4TextureFactory.height
          };
          this._attributes = subMeshMorph.attributes.map(function (attributeName, attributeIndex) {
            var vec4Tex = vec4TextureFactory.create();
            var valueView = vec4Tex.valueView;
            subMeshMorph.targets.forEach(function (morphTarget, morphTargetIndex) {
              var displacementsView = morphTarget.displacements[attributeIndex];
              var displacements = new Float32Array(mesh.data.buffer, mesh.data.byteOffset + displacementsView.offset, displacementsView.count);
              var displacementsOffset = nVertices * morphTargetIndex * 4;

              for (var iVertex = 0; iVertex < nVertices; ++iVertex) {
                valueView[displacementsOffset + 4 * iVertex + 0] = displacements[3 * iVertex + 0];
                valueView[displacementsOffset + 4 * iVertex + 1] = displacements[3 * iVertex + 1];
                valueView[displacementsOffset + 4 * iVertex + 2] = displacements[3 * iVertex + 2];
              }
            });
            vec4Tex.updatePixels();
            return {
              name: attributeName,
              morphTexture: vec4Tex
            };
          });
        }

        var _proto2 = GpuComputing.prototype;

        _proto2.destroy = function destroy() {
          for (var _iterator2 = _createForOfIteratorHelperLoose(this._attributes), _step2; !(_step2 = _iterator2()).done;) {
            var attribute = _step2.value;
            attribute.morphTexture.destroy();
          }
        };

        _proto2.createInstance = function createInstance() {
          var _this2 = this;

          var morphUniforms = new MorphUniforms(this._gfxDevice, this._subMeshMorph.targets.length);
          morphUniforms.setMorphTextureInfo(this._textureInfo.width, this._textureInfo.height);
          morphUniforms.setVerticesCount(this._verticesCount);
          morphUniforms.commit();
          return {
            setWeights: function setWeights(weights) {
              morphUniforms.setWeights(weights);
              morphUniforms.commit();
            },
            requiredPatches: function requiredPatches() {
              return [{
                name: 'CC_MORPH_TARGET_USE_TEXTURE',
                value: true
              }];
            },
            adaptPipelineState: function adaptPipelineState(descriptorSet) {
              for (var _iterator3 = _createForOfIteratorHelperLoose(_this2._attributes), _step3; !(_step3 = _iterator3()).done;) {
                var attribute = _step3.value;
                var binding = void 0;

                switch (attribute.name) {
                  case AttributeName.ATTR_POSITION:
                    binding = UNIFORM_POSITION_MORPH_TEXTURE_BINDING;
                    break;

                  case AttributeName.ATTR_NORMAL:
                    binding = UNIFORM_NORMAL_MORPH_TEXTURE_BINDING;
                    break;

                  case AttributeName.ATTR_TANGENT:
                    binding = UNIFORM_TANGENT_MORPH_TEXTURE_BINDING;
                    break;

                  default:
                    warn('Unexpected attribute!');
                    break;
                }

                if (binding !== undefined) {
                  descriptorSet.bindSampler(binding, attribute.morphTexture.sampler);
                  descriptorSet.bindTexture(binding, attribute.morphTexture.texture);
                }
              }

              descriptorSet.bindBuffer(UBOMorph.BINDING, morphUniforms.buffer);
              descriptorSet.update();
            },
            destroy: function destroy() {}
          };
        };

        return GpuComputing;
      }();

      var CpuComputing = function () {
        function CpuComputing(mesh, subMeshIndex, morph, gfxDevice) {
          this._gfxDevice = void 0;
          this._attributes = [];
          this._gfxDevice = gfxDevice;
          var subMeshMorph = morph.subMeshMorphs[subMeshIndex];
          assertIsNonNullable(subMeshMorph);
          enableVertexId(mesh, subMeshIndex, gfxDevice);
          this._attributes = subMeshMorph.attributes.map(function (attributeName, attributeIndex) {
            return {
              name: attributeName,
              targets: subMeshMorph.targets.map(function (attributeDisplacement) {
                return {
                  displacements: new Float32Array(mesh.data.buffer, mesh.data.byteOffset + attributeDisplacement.displacements[attributeIndex].offset, attributeDisplacement.displacements[attributeIndex].count)
                };
              })
            };
          });
        }

        var _proto3 = CpuComputing.prototype;

        _proto3.createInstance = function createInstance() {
          return new CpuComputingRenderingInstance(this, this._attributes[0].targets[0].displacements.length / 3, this._gfxDevice);
        };

        _createClass(CpuComputing, [{
          key: "data",
          get: function get() {
            return this._attributes;
          }
        }]);

        return CpuComputing;
      }();

      var CpuComputingRenderingInstance = function () {
        function CpuComputingRenderingInstance(owner, nVertices, gfxDevice) {
          this._attributes = void 0;
          this._owner = void 0;
          this._morphUniforms = void 0;
          this._owner = owner;
          this._morphUniforms = new MorphUniforms(gfxDevice, 0);
          var vec4TextureFactory = createVec4TextureFactory(gfxDevice, nVertices);

          this._morphUniforms.setMorphTextureInfo(vec4TextureFactory.width, vec4TextureFactory.height);

          this._morphUniforms.commit();

          this._attributes = this._owner.data.map(function (attributeMorph, attributeIndex) {
            var morphTexture = vec4TextureFactory.create();
            return {
              attributeName: attributeMorph.name,
              morphTexture: morphTexture
            };
          });
        }

        var _proto4 = CpuComputingRenderingInstance.prototype;

        _proto4.setWeights = function setWeights(weights) {
          for (var iAttribute = 0; iAttribute < this._attributes.length; ++iAttribute) {
            var myAttribute = this._attributes[iAttribute];
            var valueView = myAttribute.morphTexture.valueView;
            var attributeMorph = this._owner.data[iAttribute];
            assertIsTrue(weights.length === attributeMorph.targets.length);

            for (var iTarget = 0; iTarget < attributeMorph.targets.length; ++iTarget) {
              var targetDisplacements = attributeMorph.targets[iTarget].displacements;
              var weight = weights[iTarget];
              var nVertices = targetDisplacements.length / 3;

              if (iTarget === 0) {
                for (var iVertex = 0; iVertex < nVertices; ++iVertex) {
                  valueView[4 * iVertex + 0] = targetDisplacements[3 * iVertex + 0] * weight;
                  valueView[4 * iVertex + 1] = targetDisplacements[3 * iVertex + 1] * weight;
                  valueView[4 * iVertex + 2] = targetDisplacements[3 * iVertex + 2] * weight;
                }
              } else if (weight !== 0.0) {
                for (var _iVertex = 0; _iVertex < nVertices; ++_iVertex) {
                  valueView[4 * _iVertex + 0] += targetDisplacements[3 * _iVertex + 0] * weight;
                  valueView[4 * _iVertex + 1] += targetDisplacements[3 * _iVertex + 1] * weight;
                  valueView[4 * _iVertex + 2] += targetDisplacements[3 * _iVertex + 2] * weight;
                }
              }
            }

            myAttribute.morphTexture.updatePixels();
          }
        };

        _proto4.requiredPatches = function requiredPatches() {
          return [{
            name: 'CC_MORPH_TARGET_USE_TEXTURE',
            value: true
          }, {
            name: 'CC_MORPH_PRECOMPUTED',
            value: true
          }];
        };

        _proto4.adaptPipelineState = function adaptPipelineState(descriptorSet) {
          for (var _iterator4 = _createForOfIteratorHelperLoose(this._attributes), _step4; !(_step4 = _iterator4()).done;) {
            var attribute = _step4.value;
            var attributeName = attribute.attributeName;
            var binding = void 0;

            switch (attributeName) {
              case AttributeName.ATTR_POSITION:
                binding = UNIFORM_POSITION_MORPH_TEXTURE_BINDING;
                break;

              case AttributeName.ATTR_NORMAL:
                binding = UNIFORM_NORMAL_MORPH_TEXTURE_BINDING;
                break;

              case AttributeName.ATTR_TANGENT:
                binding = UNIFORM_TANGENT_MORPH_TEXTURE_BINDING;
                break;

              default:
                warn('Unexpected attribute!');
                break;
            }

            if (binding !== undefined) {
              descriptorSet.bindSampler(binding, attribute.morphTexture.sampler);
              descriptorSet.bindTexture(binding, attribute.morphTexture.texture);
            }
          }

          descriptorSet.bindBuffer(UBOMorph.BINDING, this._morphUniforms.buffer);
          descriptorSet.update();
        };

        _proto4.destroy = function destroy() {
          this._morphUniforms.destroy();

          for (var iAttribute = 0; iAttribute < this._attributes.length; ++iAttribute) {
            var myAttribute = this._attributes[iAttribute];
            myAttribute.morphTexture.destroy();
          }
        };

        return CpuComputingRenderingInstance;
      }();

      var MorphUniforms = function () {
        function MorphUniforms(gfxDevice, targetCount) {
          this._targetCount = void 0;
          this._localBuffer = void 0;
          this._remoteBuffer = void 0;
          this._targetCount = targetCount;
          this._localBuffer = new DataView(new ArrayBuffer(UBOMorph.SIZE));
          this._remoteBuffer = gfxDevice.createBuffer(new BufferInfo(BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.HOST | MemoryUsageBit.DEVICE, UBOMorph.SIZE, UBOMorph.SIZE));
        }

        var _proto5 = MorphUniforms.prototype;

        _proto5.destroy = function destroy() {
          this._remoteBuffer.destroy();
        };

        _proto5.setWeights = function setWeights(weights) {
          assertIsTrue(weights.length === this._targetCount);

          for (var iWeight = 0; iWeight < weights.length; ++iWeight) {
            this._localBuffer.setFloat32(UBOMorph.OFFSET_OF_WEIGHTS + 4 * iWeight, weights[iWeight], legacyCC.sys.isLittleEndian);
          }
        };

        _proto5.setMorphTextureInfo = function setMorphTextureInfo(width, height) {
          this._localBuffer.setFloat32(UBOMorph.OFFSET_OF_DISPLACEMENT_TEXTURE_WIDTH, width, legacyCC.sys.isLittleEndian);

          this._localBuffer.setFloat32(UBOMorph.OFFSET_OF_DISPLACEMENT_TEXTURE_HEIGHT, height, legacyCC.sys.isLittleEndian);
        };

        _proto5.setVerticesCount = function setVerticesCount(count) {
          this._localBuffer.setFloat32(UBOMorph.OFFSET_OF_VERTICES_COUNT, count, legacyCC.sys.isLittleEndian);
        };

        _proto5.commit = function commit() {
          this._remoteBuffer.update(this._localBuffer.buffer);
        };

        _createClass(MorphUniforms, [{
          key: "buffer",
          get: function get() {
            return this._remoteBuffer;
          }
        }]);

        return MorphUniforms;
      }();

      function createVec4TextureFactory(gfxDevice, vec4Capacity) {
        var hasFeatureFloatTexture = gfxDevice.getFormatFeatures(Format.RGBA32F) & FormatFeatureBit.SAMPLED_TEXTURE;
        var pixelRequired;
        var pixelFormat;
        var pixelBytes;
        var UpdateViewConstructor;

        if (hasFeatureFloatTexture) {
          pixelRequired = vec4Capacity;
          pixelBytes = 16;
          pixelFormat = Texture2D.PixelFormat.RGBA32F;
          UpdateViewConstructor = Float32Array;
        } else {
          pixelRequired = 4 * vec4Capacity;
          pixelBytes = 4;
          pixelFormat = Texture2D.PixelFormat.RGBA8888;
          UpdateViewConstructor = Uint8Array;
        }

        var _bestSizeToHavePixels = bestSizeToHavePixels(pixelRequired),
            width = _bestSizeToHavePixels.width,
            height = _bestSizeToHavePixels.height;

        assertIsTrue(width * height >= pixelRequired);
        return {
          width: width,
          height: height,
          create: function create() {
            var arrayBuffer = new ArrayBuffer(width * height * pixelBytes);
            var valueView = new Float32Array(arrayBuffer);
            var updateView = UpdateViewConstructor === Float32Array ? valueView : new UpdateViewConstructor(arrayBuffer);
            var image = new ImageAsset({
              width: width,
              height: height,
              _data: updateView,
              _compressed: false,
              format: pixelFormat
            });
            var textureAsset = new Texture2D();
            textureAsset.setFilters(Texture2D.Filter.NEAREST, Texture2D.Filter.NEAREST);
            textureAsset.setMipFilter(Texture2D.Filter.NONE);
            textureAsset.setWrapMode(Texture2D.WrapMode.CLAMP_TO_EDGE, Texture2D.WrapMode.CLAMP_TO_EDGE, Texture2D.WrapMode.CLAMP_TO_EDGE);
            textureAsset.image = image;

            if (!textureAsset.getGFXTexture()) {
              warn('Unexpected: failed to create morph texture?');
            }

            var sampler = gfxDevice.getSampler(textureAsset.getSamplerInfo());
            return {
              get texture() {
                return textureAsset.getGFXTexture();
              },

              get sampler() {
                return sampler;
              },

              get valueView() {
                return valueView;
              },

              destroy: function destroy() {
                textureAsset.destroy();
              },
              updatePixels: function updatePixels() {
                textureAsset.uploadData(updateView);
              }
            };
          }
        };
      }

      function enableVertexId(mesh, subMeshIndex, gfxDevice) {
        mesh.renderingSubMeshes[subMeshIndex].enableVertexIdChannel(gfxDevice);
      }

      function bestSizeToHavePixels(nPixels) {
        if (nPixels < 5) {
          nPixels = 5;
        }

        var aligned = nextPow2$1(nPixels);
        var epxSum = log2(aligned);
        var h = epxSum >> 1;
        var w = epxSum & 1 ? h + 1 : h;
        return {
          width: 1 << w,
          height: 1 << h
        };
      }

      var _dec$G, _class$G, _class2$D, _initializer$u, _initializer2$j, _initializer3$f;

      function getIndexStrideCtor(stride) {
        switch (stride) {
          case 1:
            return Uint8Array;

          case 2:
            return Uint16Array;

          case 4:
            return Uint32Array;

          default:
            return Uint8Array;
        }
      }

      var v3_1$4 = new Vec3();
      var v3_2$2 = new Vec3();
      var globalEmptyMeshBuffer = new Uint8Array();
      var Mesh = (_dec$G = ccclass('cc.Mesh'), _dec$G(_class$G = (_class2$D = function (_Asset) {
        _inheritsLoose(Mesh, _Asset);

        function Mesh() {
          var _this;

          _this = _Asset.call(this) || this;
          _this.morphRendering = null;
          _this._struct = _initializer$u && _initializer$u();
          _this._hash = _initializer2$j && _initializer2$j();
          _this._data = globalEmptyMeshBuffer;
          _this._initialized = false;
          _this._allowDataAccess = _initializer3$f && _initializer3$f();
          _this._isMeshDataUploaded = false;
          _this._renderingSubMeshes = null;
          _this._boneSpaceBounds = new Map();
          _this._jointBufferIndices = null;
          return _this;
        }

        var _proto = Mesh.prototype;

        _proto.onLoaded = function onLoaded() {
          this.initialize();
        };

        _proto.initialize = function initialize() {
          var _this2 = this;

          if (this._initialized) {
            return;
          }

          this._initialized = true;

          if (this._struct.dynamic) {
            var device = deviceManager.gfxDevice;
            var vertexBuffers = [];
            var subMeshes = [];

            for (var i = 0; i < this._struct.vertexBundles.length; i++) {
              var _vertexBundle = this._struct.vertexBundles[i];
              var vertexBuffer = device.createBuffer(new BufferInfo(BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, _vertexBundle.view.length, _vertexBundle.view.stride));
              vertexBuffers.push(vertexBuffer);
            }

            for (var _i = 0; _i < this._struct.primitives.length; _i++) {
              var primitive = this._struct.primitives[_i];
              var indexView = primitive.indexView;
              var indexBuffer = null;

              if (indexView) {
                indexBuffer = device.createBuffer(new BufferInfo(BufferUsageBit.INDEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, indexView.length, indexView.stride));
              }

              var subVBs = [];

              for (var k = 0; k < primitive.vertexBundelIndices.length; k++) {
                var idx = primitive.vertexBundelIndices[k];
                subVBs.push(vertexBuffers[idx]);
              }

              var attributes = [];

              for (var _k = 0; _k < primitive.vertexBundelIndices.length; _k++) {
                var _idx = primitive.vertexBundelIndices[_k];
                var _vertexBundle2 = this._struct.vertexBundles[_idx];

                for (var _iterator = _createForOfIteratorHelperLoose(_vertexBundle2.attributes), _step; !(_step = _iterator()).done;) {
                  var attr = _step.value;
                  var attribute = new Attribute();
                  attribute.copy(attr);
                  attributes.push(attribute);
                }
              }

              var subMesh = new RenderingSubMesh(subVBs, attributes, primitive.primitiveMode, indexBuffer);
              subMesh.drawInfo = new DrawInfo();
              subMesh.mesh = this;
              subMesh.subMeshIdx = _i;
              subMeshes.push(subMesh);
            }

            this._renderingSubMeshes = subMeshes;
          } else {
            (function () {
              var buffer = _this2._data.buffer;
              var gfxDevice = deviceManager.gfxDevice;

              var vertexBuffers = _this2._createVertexBuffers(gfxDevice, buffer);
              var subMeshes = [];

              for (var _i2 = 0; _i2 < _this2._struct.primitives.length; _i2++) {
                var prim = _this2._struct.primitives[_i2];

                if (prim.vertexBundelIndices.length === 0) {
                  continue;
                }

                var _indexBuffer = null;
                var ib = null;

                if (prim.indexView) {
                  var idxView = prim.indexView;
                  var dstStride = idxView.stride;
                  var dstSize = idxView.length;

                  if (dstStride === 4 && !gfxDevice.hasFeature(Feature$1.ELEMENT_INDEX_UINT)) {
                    var vertexCount = _this2._struct.vertexBundles[prim.vertexBundelIndices[0]].view.count;

                    if (vertexCount >= 65536) {
                      warnID(10001, vertexCount, 65536);
                      continue;
                    } else {
                      dstStride >>= 1;
                      dstSize >>= 1;
                    }
                  }

                  _indexBuffer = gfxDevice.createBuffer(new BufferInfo(BufferUsageBit.INDEX, MemoryUsageBit.DEVICE, dstSize, dstStride));
                  ib = new (getIndexStrideCtor(idxView.stride))(buffer, idxView.offset, idxView.count);

                  if (idxView.stride !== dstStride) {
                    ib = getIndexStrideCtor(dstStride).from(ib);
                  }

                  _indexBuffer.update(ib);
                }

                var vbReference = prim.vertexBundelIndices.map(function (idx) {
                  return vertexBuffers[idx];
                });
                var gfxAttributes = [];

                if (prim.vertexBundelIndices.length > 0) {
                  var _idx2 = prim.vertexBundelIndices[0];
                  var _vertexBundle3 = _this2._struct.vertexBundles[_idx2];
                  var attrs = _vertexBundle3.attributes;

                  for (var j = 0; j < attrs.length; ++j) {
                    var _attr = attrs[j];
                    gfxAttributes[j] = new Attribute(_attr.name, _attr.format, _attr.isNormalized, _attr.stream, _attr.isInstanced, _attr.location);
                  }
                }

                var _subMesh = new RenderingSubMesh(vbReference, gfxAttributes, prim.primitiveMode, _indexBuffer);

                _subMesh.mesh = _this2;
                _subMesh.subMeshIdx = _i2;
                subMeshes.push(_subMesh);
              }

              _this2._renderingSubMeshes = subMeshes;

              if (_this2._struct.morph) {
                _this2.morphRendering = createMorphRendering(_this2, gfxDevice);
              }

              _this2._isMeshDataUploaded = true;

              if (!_this2._allowDataAccess) {
                _this2.releaseData();
              }
            })();
          }
        };

        _proto.updateSubMesh = function updateSubMesh(primitiveIndex, dynamicGeometry) {
          if (!this._struct.dynamic) {
            warnID(14200);
            return;
          }

          if (primitiveIndex >= this._struct.primitives.length) {
            warnID(14201);
            return;
          }

          var buffers = [];

          if (dynamicGeometry.positions.length > 0) {
            buffers.push(dynamicGeometry.positions);
          }

          if (dynamicGeometry.normals && dynamicGeometry.normals.length > 0) {
            buffers.push(dynamicGeometry.normals);
          }

          if (dynamicGeometry.uvs && dynamicGeometry.uvs.length > 0) {
            buffers.push(dynamicGeometry.uvs);
          }

          if (dynamicGeometry.tangents && dynamicGeometry.tangents.length > 0) {
            buffers.push(dynamicGeometry.tangents);
          }

          if (dynamicGeometry.colors && dynamicGeometry.colors.length > 0) {
            buffers.push(dynamicGeometry.colors);
          }

          if (dynamicGeometry.customAttributes) {
            for (var k = 0; k < dynamicGeometry.customAttributes.length; k++) {
              buffers.push(dynamicGeometry.customAttributes[k].values);
            }
          }

          var dynamic = this._struct.dynamic;
          var info = dynamic.info;
          var primitive = this._struct.primitives[primitiveIndex];
          var subMesh = this._renderingSubMeshes[primitiveIndex];
          var drawInfo = subMesh.drawInfo;

          for (var index = 0; index < buffers.length; index++) {
            var vertices = buffers[index];
            var bundle = this._struct.vertexBundles[primitive.vertexBundelIndices[index]];
            var stride = bundle.view.stride;
            var vertexCount = vertices.byteLength / stride;
            var updateSize = vertices.byteLength;
            var dstBuffer = new Uint8Array(this._data.buffer, bundle.view.offset, updateSize);
            var srcBuffer = new Uint8Array(vertices.buffer, vertices.byteOffset, updateSize);
            var vertexBuffer = subMesh.vertexBuffers[index];
            assertIsTrue(vertexCount <= info.maxSubMeshVertices, 'Too many vertices.');

            if (updateSize > 0) {
              dstBuffer.set(srcBuffer);
              vertexBuffer.update(srcBuffer, updateSize);
            }

            bundle.view.count = vertexCount;
            drawInfo.vertexCount = vertexCount;
          }

          if (primitive.indexView) {
            var indexView = primitive.indexView;
            var _stride = indexView.stride;
            var indexCount = _stride === 2 ? dynamicGeometry.indices16.length : dynamicGeometry.indices32.length;

            var _updateSize = indexCount * _stride;

            var _dstBuffer = new Uint8Array(this._data.buffer, indexView.offset, _updateSize);

            var _srcBuffer = _stride === 2 ? new Uint8Array(dynamicGeometry.indices16.buffer, dynamicGeometry.indices16.byteOffset, _updateSize) : new Uint8Array(dynamicGeometry.indices32.buffer, dynamicGeometry.indices32.byteOffset, _updateSize);

            var indexBuffer = subMesh.indexBuffer;
            assertIsTrue(indexCount <= info.maxSubMeshIndices, 'Too many indices.');

            if (_updateSize > 0) {
              _dstBuffer.set(_srcBuffer);

              indexBuffer.update(_srcBuffer, _updateSize);
            }

            indexView.count = indexCount;
            drawInfo.indexCount = indexCount;
          }

          if (dynamicGeometry.minPos && dynamicGeometry.maxPos) {
            var minPos = new Vec3(dynamicGeometry.minPos.x, dynamicGeometry.minPos.y, dynamicGeometry.minPos.z);
            var maxPos = new Vec3(dynamicGeometry.maxPos.x, dynamicGeometry.maxPos.y, dynamicGeometry.maxPos.z);

            if (!dynamic.bounds[primitiveIndex]) {
              dynamic.bounds[primitiveIndex] = new AABB();
            }

            AABB.fromPoints(dynamic.bounds[primitiveIndex], minPos, maxPos);
            var subMin = new Vec3();
            var subMax = new Vec3();

            for (var _iterator2 = _createForOfIteratorHelperLoose(dynamic.bounds), _step2; !(_step2 = _iterator2()).done;) {
              var bound = _step2.value;

              if (bound) {
                bound.getBoundary(subMin, subMax);
                Vec3.min(minPos, subMin, minPos);
                Vec3.max(maxPos, subMax, maxPos);
              }
            }

            this._struct.minPosition = new Vec3(minPos.x, minPos.y, minPos.z);
            this._struct.maxPosition = new Vec3(maxPos.x, maxPos.y, maxPos.z);
          }

          subMesh.invalidateGeometricInfo();
        };

        _proto.destroy = function destroy() {
          this.destroyRenderingMesh();
          return _Asset.prototype.destroy.call(this);
        };

        _proto.destroyRenderingMesh = function destroyRenderingMesh() {
          if (this._renderingSubMeshes) {
            for (var i = 0; i < this._renderingSubMeshes.length; i++) {
              this._renderingSubMeshes[i].destroy();
            }

            this._renderingSubMeshes = null;
            this._initialized = false;
            this._isMeshDataUploaded = false;
          }
        };

        _proto.assign = function assign(struct, data) {
          this.reset({
            struct: struct,
            data: data
          });
        };

        _proto.reset = function reset(info) {
          this.destroyRenderingMesh();
          this._struct = info.struct;
          this._data = info.data;
          this._hash = 0;
        };

        _proto.getBoneSpaceBounds = function getBoneSpaceBounds(skeleton) {
          if (this._boneSpaceBounds.has(skeleton.hash)) {
            return this._boneSpaceBounds.get(skeleton.hash);
          }

          var bounds = [];

          this._boneSpaceBounds.set(skeleton.hash, bounds);

          var valid = [];
          var bindposes = skeleton.bindposes;

          for (var i = 0; i < bindposes.length; i++) {
            bounds.push(new AABB(Infinity, Infinity, Infinity, -Infinity, -Infinity, -Infinity));
            valid.push(false);
          }

          var primitives = this._struct.primitives;

          for (var p = 0; p < primitives.length; p++) {
            var joints = this.readAttribute(p, AttributeName.ATTR_JOINTS);
            var weights = this.readAttribute(p, AttributeName.ATTR_WEIGHTS);
            var positions = this.readAttribute(p, AttributeName.ATTR_POSITION);

            if (!joints || !weights || !positions) {
              continue;
            }

            var vertCount = Math.min(joints.length / 4, weights.length / 4, positions.length / 3);

            for (var _i3 = 0; _i3 < vertCount; _i3++) {
              Vec3.set(v3_1$4, positions[3 * _i3 + 0], positions[3 * _i3 + 1], positions[3 * _i3 + 2]);

              for (var j = 0; j < 4; ++j) {
                var idx = 4 * _i3 + j;
                var joint = joints[idx];

                if (weights[idx] === 0 || joint >= bindposes.length) {
                  continue;
                }

                Vec3.transformMat4(v3_2$2, v3_1$4, bindposes[joint]);
                valid[joint] = true;
                var b = bounds[joint];
                Vec3.min(b.center, b.center, v3_2$2);
                Vec3.max(b.halfExtents, b.halfExtents, v3_2$2);
              }
            }
          }

          for (var _i4 = 0; _i4 < bindposes.length; _i4++) {
            var _b = bounds[_i4];

            if (!valid[_i4]) {
              bounds[_i4] = null;
            } else {
              AABB.fromPoints(_b, _b.center, _b.halfExtents);
            }
          }

          return bounds;
        };

        _proto.merge = function merge(mesh, worldMatrix, validate) {
          if (validate) {
            if (!this.validateMergingMesh(mesh)) {
              return false;
            }
          }

          var vec3_temp = new Vec3();
          var rotate = worldMatrix && new Quat();
          var boundingBox = worldMatrix && new AABB();

          if (rotate) {
            worldMatrix.getRotation(rotate);
          }

          if (!this._initialized) {
            var struct = JSON.parse(JSON.stringify(mesh._struct));

            var data = mesh._data.slice();

            if (worldMatrix) {
              if (struct.maxPosition && struct.minPosition) {
                Vec3.add(boundingBox.center, struct.maxPosition, struct.minPosition);
                Vec3.multiplyScalar(boundingBox.center, boundingBox.center, 0.5);
                Vec3.subtract(boundingBox.halfExtents, struct.maxPosition, struct.minPosition);
                Vec3.multiplyScalar(boundingBox.halfExtents, boundingBox.halfExtents, 0.5);
                AABB.transform(boundingBox, boundingBox, worldMatrix);
                Vec3.add(struct.maxPosition, boundingBox.center, boundingBox.halfExtents);
                Vec3.subtract(struct.minPosition, boundingBox.center, boundingBox.halfExtents);
              }

              for (var i = 0; i < struct.vertexBundles.length; i++) {
                var vtxBdl = struct.vertexBundles[i];

                for (var j = 0; j < vtxBdl.attributes.length; j++) {
                  if (vtxBdl.attributes[j].name === AttributeName.ATTR_POSITION || vtxBdl.attributes[j].name === AttributeName.ATTR_NORMAL) {
                    var format = vtxBdl.attributes[j].format;
                    var inputView = new DataView(data.buffer, vtxBdl.view.offset + getOffset(vtxBdl.attributes, j));
                    var reader = getReader(inputView, format);
                    var writer = getWriter(inputView, format);

                    if (!reader || !writer) {
                      continue;
                    }

                    var vertexCount = vtxBdl.view.count;
                    var vertexStride = vtxBdl.view.stride;
                    var attrComponentByteLength = getComponentByteLength(format);

                    for (var vtxIdx = 0; vtxIdx < vertexCount; vtxIdx++) {
                      var xOffset = vtxIdx * vertexStride;
                      var yOffset = xOffset + attrComponentByteLength;
                      var zOffset = yOffset + attrComponentByteLength;
                      vec3_temp.set(reader(xOffset), reader(yOffset), reader(zOffset));

                      switch (vtxBdl.attributes[j].name) {
                        case AttributeName.ATTR_POSITION:
                          vec3_temp.transformMat4(worldMatrix);
                          break;

                        case AttributeName.ATTR_NORMAL:
                          Vec3.transformQuat(vec3_temp, vec3_temp, rotate);
                          break;
                      }

                      writer(xOffset, vec3_temp.x);
                      writer(yOffset, vec3_temp.y);
                      writer(zOffset, vec3_temp.z);
                    }
                  }
                }
              }
            }

            this.reset({
              struct: struct,
              data: data
            });
            this.initialize();
            return true;
          }

          var bufferBlob = new BufferBlob();
          var vertCount = 0;
          var vertStride = 0;
          var srcOffset = 0;
          var dstOffset = 0;
          var vb;
          var vbView;
          var srcVBView;
          var dstVBView;
          var srcAttrOffset = 0;
          var srcVBOffset = 0;
          var dstVBOffset = 0;
          var attrSize = 0;
          var dstAttrView;
          var hasAttr = false;
          var vertexBundles = new Array(this._struct.vertexBundles.length);

          for (var _i5 = 0; _i5 < this._struct.vertexBundles.length; ++_i5) {
            var bundle = this._struct.vertexBundles[_i5];
            var dstBundle = mesh._struct.vertexBundles[_i5];
            srcOffset = bundle.view.offset;
            dstOffset = dstBundle.view.offset;
            vertStride = bundle.view.stride;
            vertCount = bundle.view.count + dstBundle.view.count;
            vb = new ArrayBuffer(vertCount * vertStride);
            vbView = new Uint8Array(vb);
            srcVBView = this._data.subarray(srcOffset, srcOffset + bundle.view.length);
            srcOffset += srcVBView.length;
            dstVBView = mesh._data.subarray(dstOffset, dstOffset + dstBundle.view.length);
            dstOffset += dstVBView.length;
            vbView.set(srcVBView);
            srcAttrOffset = 0;

            for (var _iterator3 = _createForOfIteratorHelperLoose(bundle.attributes), _step3; !(_step3 = _iterator3()).done;) {
              var attr = _step3.value;
              dstVBOffset = 0;
              hasAttr = false;

              for (var _iterator4 = _createForOfIteratorHelperLoose(dstBundle.attributes), _step4; !(_step4 = _iterator4()).done;) {
                var dstAttr = _step4.value;

                if (attr.name === dstAttr.name && attr.format === dstAttr.format) {
                  hasAttr = true;
                  break;
                }

                dstVBOffset += FormatInfos[dstAttr.format].size;
              }

              if (hasAttr) {
                attrSize = FormatInfos[attr.format].size;
                srcVBOffset = bundle.view.length + srcAttrOffset;

                for (var v = 0; v < dstBundle.view.count; ++v) {
                  dstAttrView = dstVBView.subarray(dstVBOffset, dstVBOffset + attrSize);
                  vbView.set(dstAttrView, srcVBOffset);

                  if ((attr.name === AttributeName.ATTR_POSITION || attr.name === AttributeName.ATTR_NORMAL) && worldMatrix) {
                    var f32_temp = new Float32Array(vbView.buffer, srcVBOffset, 3);
                    vec3_temp.set(f32_temp[0], f32_temp[1], f32_temp[2]);

                    switch (attr.name) {
                      case AttributeName.ATTR_POSITION:
                        vec3_temp.transformMat4(worldMatrix);
                        break;

                      case AttributeName.ATTR_NORMAL:
                        Vec3.transformQuat(vec3_temp, vec3_temp, rotate);
                        break;
                    }

                    f32_temp[0] = vec3_temp.x;
                    f32_temp[1] = vec3_temp.y;
                    f32_temp[2] = vec3_temp.z;
                  }

                  srcVBOffset += bundle.view.stride;
                  dstVBOffset += dstBundle.view.stride;
                }
              }

              srcAttrOffset += FormatInfos[attr.format].size;
            }

            vertexBundles[_i5] = {
              attributes: bundle.attributes,
              view: {
                offset: bufferBlob.getLength(),
                length: vb.byteLength,
                count: vertCount,
                stride: vertStride
              }
            };
            bufferBlob.addBuffer(vb);
          }

          var idxCount = 0;
          var idxStride = 2;
          var ibView;
          var srcIBView;
          var dstIBView;
          var primitives = new Array(this._struct.primitives.length);

          for (var _i6 = 0; _i6 < this._struct.primitives.length; ++_i6) {
            var prim = this._struct.primitives[_i6];
            var dstPrim = mesh._struct.primitives[_i6];
            primitives[_i6] = {
              primitiveMode: prim.primitiveMode,
              vertexBundelIndices: prim.vertexBundelIndices
            };
            var vertBatchCount = 0;

            for (var _iterator5 = _createForOfIteratorHelperLoose(prim.vertexBundelIndices), _step5; !(_step5 = _iterator5()).done;) {
              var bundleIdx = _step5.value;
              vertBatchCount = Math.max(vertBatchCount, this._struct.vertexBundles[bundleIdx].view.count);
            }

            if (prim.indexView && dstPrim.indexView) {
              idxCount = prim.indexView.count;
              idxCount += dstPrim.indexView.count;
              srcOffset = prim.indexView.offset;
              dstOffset = dstPrim.indexView.offset;

              if (idxCount < 256) {
                idxStride = 1;
              } else if (idxCount < 65536) {
                idxStride = 2;
              } else {
                idxStride = 4;
              }

              var ib = new ArrayBuffer(idxCount * idxStride);

              if (idxStride === 2) {
                ibView = new Uint16Array(ib);
              } else if (idxStride === 1) {
                ibView = new Uint8Array(ib);
              } else {
                ibView = new Uint32Array(ib);
              }

              if (prim.indexView.stride === 2) {
                srcIBView = new Uint16Array(this._data.buffer, srcOffset, prim.indexView.count);
              } else if (prim.indexView.stride === 1) {
                srcIBView = new Uint8Array(this._data.buffer, srcOffset, prim.indexView.count);
              } else {
                srcIBView = new Uint32Array(this._data.buffer, srcOffset, prim.indexView.count);
              }

              if (idxStride === prim.indexView.stride) {
                ibView.set(srcIBView);
              } else {
                for (var n = 0; n < prim.indexView.count; ++n) {
                  ibView[n] = srcIBView[n];
                }
              }

              srcOffset += prim.indexView.length;

              if (dstPrim.indexView.stride === 2) {
                dstIBView = new Uint16Array(mesh._data.buffer, dstOffset, dstPrim.indexView.count);
              } else if (dstPrim.indexView.stride === 1) {
                dstIBView = new Uint8Array(mesh._data.buffer, dstOffset, dstPrim.indexView.count);
              } else {
                dstIBView = new Uint32Array(mesh._data.buffer, dstOffset, dstPrim.indexView.count);
              }

              for (var _n = 0; _n < dstPrim.indexView.count; ++_n) {
                ibView[prim.indexView.count + _n] = vertBatchCount + dstIBView[_n];
              }

              dstOffset += dstPrim.indexView.length;
              primitives[_i6].indexView = {
                offset: bufferBlob.getLength(),
                length: ib.byteLength,
                count: idxCount,
                stride: idxStride
              };
              bufferBlob.setNextAlignment(idxStride);
              bufferBlob.addBuffer(ib);
            }
          }

          var meshStruct = {
            vertexBundles: vertexBundles,
            primitives: primitives,
            minPosition: this._struct.minPosition,
            maxPosition: this._struct.maxPosition
          };

          if (meshStruct.minPosition && mesh._struct.minPosition && meshStruct.maxPosition && mesh._struct.maxPosition) {
            if (worldMatrix) {
              Vec3.add(boundingBox.center, mesh._struct.maxPosition, mesh._struct.minPosition);
              Vec3.multiplyScalar(boundingBox.center, boundingBox.center, 0.5);
              Vec3.subtract(boundingBox.halfExtents, mesh._struct.maxPosition, mesh._struct.minPosition);
              Vec3.multiplyScalar(boundingBox.halfExtents, boundingBox.halfExtents, 0.5);
              AABB.transform(boundingBox, boundingBox, worldMatrix);
              Vec3.add(vec3_temp, boundingBox.center, boundingBox.halfExtents);
              Vec3.max(meshStruct.maxPosition, meshStruct.maxPosition, vec3_temp);
              Vec3.subtract(vec3_temp, boundingBox.center, boundingBox.halfExtents);
              Vec3.min(meshStruct.minPosition, meshStruct.minPosition, vec3_temp);
            } else {
              Vec3.min(meshStruct.minPosition, meshStruct.minPosition, mesh._struct.minPosition);
              Vec3.max(meshStruct.maxPosition, meshStruct.maxPosition, mesh._struct.maxPosition);
            }
          }

          this.reset({
            struct: meshStruct,
            data: new Uint8Array(bufferBlob.getCombined())
          });
          this.initialize();
          return true;
        };

        _proto.validateMergingMesh = function validateMergingMesh(mesh) {
          if (this._struct.dynamic || mesh._struct.dynamic) {
            return false;
          }

          if (this._struct.vertexBundles.length !== mesh._struct.vertexBundles.length) {
            return false;
          }

          for (var i = 0; i < this._struct.vertexBundles.length; ++i) {
            var bundle = this._struct.vertexBundles[i];
            var dstBundle = mesh._struct.vertexBundles[i];

            if (bundle.attributes.length !== dstBundle.attributes.length) {
              return false;
            }

            for (var j = 0; j < bundle.attributes.length; ++j) {
              if (bundle.attributes[j].format !== dstBundle.attributes[j].format) {
                return false;
              }
            }
          }

          if (this._struct.primitives.length !== mesh._struct.primitives.length) {
            return false;
          }

          for (var _i7 = 0; _i7 < this._struct.primitives.length; ++_i7) {
            var prim = this._struct.primitives[_i7];
            var dstPrim = mesh._struct.primitives[_i7];

            if (prim.vertexBundelIndices.length !== dstPrim.vertexBundelIndices.length) {
              return false;
            }

            for (var _j = 0; _j < prim.vertexBundelIndices.length; ++_j) {
              if (prim.vertexBundelIndices[_j] !== dstPrim.vertexBundelIndices[_j]) {
                return false;
              }
            }

            if (prim.primitiveMode !== dstPrim.primitiveMode) {
              return false;
            }

            if (prim.indexView) {
              if (dstPrim.indexView === undefined) {
                return false;
              }
            } else if (dstPrim.indexView) {
              return false;
            }
          }

          return true;
        };

        _proto.readAttribute = function readAttribute(primitiveIndex, attributeName) {
          var _this3 = this;

          var result = null;

          this._accessAttribute(primitiveIndex, attributeName, function (vertexBundle, iAttribute) {
            var vertexCount = vertexBundle.view.count;
            var format = vertexBundle.attributes[iAttribute].format;
            var StorageConstructor = getTypedArrayConstructor(FormatInfos[format]);

            if (vertexCount === 0) {
              return;
            }

            var inputView = new DataView(_this3._data.buffer, vertexBundle.view.offset + getOffset(vertexBundle.attributes, iAttribute));
            var formatInfo = FormatInfos[format];
            var reader = getReader(inputView, format);

            if (!StorageConstructor || !reader) {
              return;
            }

            var componentCount = formatInfo.count;
            var storage = new StorageConstructor(vertexCount * componentCount);
            var inputStride = vertexBundle.view.stride;

            for (var iVertex = 0; iVertex < vertexCount; ++iVertex) {
              for (var iComponent = 0; iComponent < componentCount; ++iComponent) {
                storage[componentCount * iVertex + iComponent] = reader(inputStride * iVertex + storage.BYTES_PER_ELEMENT * iComponent);
              }
            }

            result = storage;
          });

          return result;
        };

        _proto.copyAttribute = function copyAttribute(primitiveIndex, attributeName, buffer, stride, offset) {
          var _this4 = this;

          var written = false;

          this._accessAttribute(primitiveIndex, attributeName, function (vertexBundle, iAttribute) {
            var vertexCount = vertexBundle.view.count;

            if (vertexCount === 0) {
              written = true;
              return;
            }

            var format = vertexBundle.attributes[iAttribute].format;
            var inputView = new DataView(_this4._data.buffer, vertexBundle.view.offset + getOffset(vertexBundle.attributes, iAttribute));
            var outputView = new DataView(buffer, offset);
            var formatInfo = FormatInfos[format];
            var reader = getReader(inputView, format);
            var writer = getWriter(outputView, format);

            if (!reader || !writer) {
              return;
            }

            var componentCount = formatInfo.count;
            var inputStride = vertexBundle.view.stride;
            var inputComponentByteLength = getComponentByteLength(format);
            var outputStride = stride;
            var outputComponentByteLength = inputComponentByteLength;

            for (var iVertex = 0; iVertex < vertexCount; ++iVertex) {
              for (var iComponent = 0; iComponent < componentCount; ++iComponent) {
                var inputOffset = inputStride * iVertex + inputComponentByteLength * iComponent;
                var outputOffset = outputStride * iVertex + outputComponentByteLength * iComponent;
                writer(outputOffset, reader(inputOffset));
              }
            }

            written = true;
          });

          return written;
        };

        _proto.readIndices = function readIndices(primitiveIndex) {
          if (primitiveIndex >= this._struct.primitives.length) {
            return null;
          }

          var primitive = this._struct.primitives[primitiveIndex];

          if (!primitive.indexView) {
            return null;
          }

          var stride = primitive.indexView.stride;
          var Ctor = stride === 1 ? Uint8Array : stride === 2 ? Uint16Array : Uint32Array;
          return new Ctor(this._data.buffer, primitive.indexView.offset, primitive.indexView.count);
        };

        _proto.copyIndices = function copyIndices(primitiveIndex, outputArray) {
          if (primitiveIndex >= this._struct.primitives.length) {
            return false;
          }

          var primitive = this._struct.primitives[primitiveIndex];

          if (!primitive.indexView) {
            return false;
          }

          var indexCount = primitive.indexView.count;
          var indexFormat = primitive.indexView.stride === 1 ? Format.R8UI : primitive.indexView.stride === 2 ? Format.R16UI : Format.R32UI;
          var reader = getReader(new DataView(this._data.buffer), indexFormat);

          for (var i = 0; i < indexCount; ++i) {
            outputArray[i] = reader(primitive.indexView.offset + FormatInfos[indexFormat].size * i);
          }

          return true;
        };

        _proto.readAttributeFormat = function readAttributeFormat(primitiveIndex, attributeName) {
          var result = null;

          this._accessAttribute(primitiveIndex, attributeName, function (vertexBundle, iAttribute) {
            var format = vertexBundle.attributes[iAttribute].format;
            result = FormatInfos[format];
          });

          return result;
        };

        _proto._accessAttribute = function _accessAttribute(primitiveIndex, attributeName, accessor) {
          if (primitiveIndex >= this._struct.primitives.length) {
            return;
          }

          var primitive = this._struct.primitives[primitiveIndex];

          for (var _iterator6 = _createForOfIteratorHelperLoose(primitive.vertexBundelIndices), _step6; !(_step6 = _iterator6()).done;) {
            var vertexBundleIndex = _step6.value;
            var _vertexBundle4 = this._struct.vertexBundles[vertexBundleIndex];

            var _iAttribute = _vertexBundle4.attributes.findIndex(function (a) {
              return a.name === attributeName;
            });

            if (_iAttribute < 0) {
              continue;
            }

            accessor(_vertexBundle4, _iAttribute);
            break;
          }
        };

        _proto._createVertexBuffers = function _createVertexBuffers(gfxDevice, data) {
          return this._struct.vertexBundles.map(function (vertexBundle) {
            var vertexBuffer = gfxDevice.createBuffer(new BufferInfo(BufferUsageBit.VERTEX, MemoryUsageBit.DEVICE, vertexBundle.view.length, vertexBundle.view.stride));
            var view = new Uint8Array(data, vertexBundle.view.offset, vertexBundle.view.length);
            vertexBuffer.update(view);
            return vertexBuffer;
          });
        };

        _proto.initDefault = function initDefault(uuid) {
          _Asset.prototype.initDefault.call(this, uuid);

          this.reset({
            struct: {
              vertexBundles: [],
              primitives: []
            },
            data: globalEmptyMeshBuffer
          });
        };

        _proto.releaseData = function releaseData() {
          this._data = globalEmptyMeshBuffer;
        };

        _createClass(Mesh, [{
          key: "_nativeAsset",
          get: function get() {
            return this._data.buffer;
          },
          set: function set(value) {
            this._data = new Uint8Array(value);
          }
        }, {
          key: "subMeshCount",
          get: function get() {
            var renderingMesh = this.renderingSubMeshes;
            return renderingMesh ? renderingMesh.length : 0;
          }
        }, {
          key: "minPosition",
          get: function get() {
            return this.struct.minPosition;
          }
        }, {
          key: "maxPosition",
          get: function get() {
            return this.struct.maxPosition;
          }
        }, {
          key: "struct",
          get: function get() {
            return this._struct;
          }
        }, {
          key: "data",
          get: function get() {
            return this._data;
          }
        }, {
          key: "hash",
          get: function get() {
            if (!this._hash) {
              this._hash = murmurhash2_32_gc(this._data, 666);
            }

            return this._hash;
          }
        }, {
          key: "jointBufferIndices",
          get: function get() {
            if (this._jointBufferIndices) {
              return this._jointBufferIndices;
            }

            return this._jointBufferIndices = this._struct.primitives.map(function (p) {
              return p.jointMapIndex || 0;
            });
          }
        }, {
          key: "renderingSubMeshes",
          get: function get() {
            this.initialize();
            return this._renderingSubMeshes;
          }
        }, {
          key: "allowDataAccess",
          get: function get() {
            return this._allowDataAccess;
          },
          set: function set(allowDataAccess) {
            this._allowDataAccess = allowDataAccess;

            if (this._isMeshDataUploaded && !this._allowDataAccess) {
              this.releaseData();
            }
          }
        }]);

        return Mesh;
      }(Asset), (_initializer$u = applyDecoratedInitializer(_class2$D.prototype, "_struct", [serializable], function () {
        return {
          vertexBundles: [],
          primitives: []
        };
      }), _initializer2$j = applyDecoratedInitializer(_class2$D.prototype, "_hash", [serializable], function () {
        return 0;
      }), _initializer3$f = applyDecoratedInitializer(_class2$D.prototype, "_allowDataAccess", [serializable], function () {
        return true;
      })), _class2$D)) || _class$G);
      legacyCC.Mesh = Mesh;

      function getOffset(attributes, attributeIndex) {
        var result = 0;

        for (var i = 0; i < attributeIndex; ++i) {
          var attribute = attributes[i];
          result += FormatInfos[attribute.format].size;
        }

        return result;
      }

      var isLittleEndian = sys.isLittleEndian;

      function getComponentByteLength(format) {
        var info = FormatInfos[format];
        return info.size / info.count;
      }

      function getReader(dataView, format) {
        var info = FormatInfos[format];
        var stride = info.size / info.count;

        switch (info.type) {
          case FormatType.UNORM:
            {
              switch (stride) {
                case 1:
                  return function (offset) {
                    return dataView.getUint8(offset);
                  };

                case 2:
                  return function (offset) {
                    return dataView.getUint16(offset, isLittleEndian);
                  };

                case 4:
                  return function (offset) {
                    return dataView.getUint32(offset, isLittleEndian);
                  };
              }

              break;
            }

          case FormatType.SNORM:
            {
              switch (stride) {
                case 1:
                  return function (offset) {
                    return dataView.getInt8(offset);
                  };

                case 2:
                  return function (offset) {
                    return dataView.getInt16(offset, isLittleEndian);
                  };

                case 4:
                  return function (offset) {
                    return dataView.getInt32(offset, isLittleEndian);
                  };
              }

              break;
            }

          case FormatType.INT:
            {
              switch (stride) {
                case 1:
                  return function (offset) {
                    return dataView.getInt8(offset);
                  };

                case 2:
                  return function (offset) {
                    return dataView.getInt16(offset, isLittleEndian);
                  };

                case 4:
                  return function (offset) {
                    return dataView.getInt32(offset, isLittleEndian);
                  };
              }

              break;
            }

          case FormatType.UINT:
            {
              switch (stride) {
                case 1:
                  return function (offset) {
                    return dataView.getUint8(offset);
                  };

                case 2:
                  return function (offset) {
                    return dataView.getUint16(offset, isLittleEndian);
                  };

                case 4:
                  return function (offset) {
                    return dataView.getUint32(offset, isLittleEndian);
                  };
              }

              break;
            }

          case FormatType.FLOAT:
            {
              return function (offset) {
                return dataView.getFloat32(offset, isLittleEndian);
              };
            }
        }

        return null;
      }

      function getWriter(dataView, format) {
        var info = FormatInfos[format];
        var stride = info.size / info.count;

        switch (info.type) {
          case FormatType.UNORM:
            {
              switch (stride) {
                case 1:
                  return function (offset, value) {
                    return dataView.setUint8(offset, value);
                  };

                case 2:
                  return function (offset, value) {
                    return dataView.setUint16(offset, value, isLittleEndian);
                  };

                case 4:
                  return function (offset, value) {
                    return dataView.setUint32(offset, value, isLittleEndian);
                  };
              }

              break;
            }

          case FormatType.SNORM:
            {
              switch (stride) {
                case 1:
                  return function (offset, value) {
                    return dataView.setInt8(offset, value);
                  };

                case 2:
                  return function (offset, value) {
                    return dataView.setInt16(offset, value, isLittleEndian);
                  };

                case 4:
                  return function (offset, value) {
                    return dataView.setInt32(offset, value, isLittleEndian);
                  };
              }

              break;
            }

          case FormatType.INT:
            {
              switch (stride) {
                case 1:
                  return function (offset, value) {
                    return dataView.setInt8(offset, value);
                  };

                case 2:
                  return function (offset, value) {
                    return dataView.setInt16(offset, value, isLittleEndian);
                  };

                case 4:
                  return function (offset, value) {
                    return dataView.setInt32(offset, value, isLittleEndian);
                  };
              }

              break;
            }

          case FormatType.UINT:
            {
              switch (stride) {
                case 1:
                  return function (offset, value) {
                    return dataView.setUint8(offset, value);
                  };

                case 2:
                  return function (offset, value) {
                    return dataView.setUint16(offset, value, isLittleEndian);
                  };

                case 4:
                  return function (offset, value) {
                    return dataView.setUint32(offset, value, isLittleEndian);
                  };
              }

              break;
            }

          case FormatType.FLOAT:
            {
              return function (offset, value) {
                return dataView.setFloat32(offset, value, isLittleEndian);
              };
            }
        }

        return null;
      }

      var _defAttrs = [new Attribute(AttributeName.ATTR_POSITION, Format.RGB32F), new Attribute(AttributeName.ATTR_NORMAL, Format.RGB32F), new Attribute(AttributeName.ATTR_TEX_COORD, Format.RG32F), new Attribute(AttributeName.ATTR_TANGENT, Format.RGBA32F), new Attribute(AttributeName.ATTR_COLOR, Format.RGBA32F)];
      var v3_1$5 = new Vec3();

      function _createMesh(geometry, out, options) {
        options = options || {};
        var attributes = [];
        var stride = 0;
        var channels = [];
        var vertCount = 0;
        var attr;
        var positions = geometry.positions.slice();

        if (positions.length > 0) {
          attr = null;

          if (geometry.attributes) {
            for (var _iterator = _createForOfIteratorHelperLoose(geometry.attributes), _step; !(_step = _iterator()).done;) {
              var att = _step.value;

              if (att.name === AttributeName.ATTR_POSITION) {
                attr = att;
                break;
              }
            }
          }

          if (!attr) {
            attr = _defAttrs[0];
          }

          attributes.push(attr);
          var info = FormatInfos[attr.format];
          vertCount = Math.max(vertCount, Math.floor(positions.length / info.count));
          channels.push({
            offset: stride,
            data: positions,
            attribute: attr
          });
          stride += info.size;
        }

        if (geometry.normals && geometry.normals.length > 0) {
          attr = null;

          if (geometry.attributes) {
            for (var _iterator2 = _createForOfIteratorHelperLoose(geometry.attributes), _step2; !(_step2 = _iterator2()).done;) {
              var _att = _step2.value;

              if (_att.name === AttributeName.ATTR_NORMAL) {
                attr = _att;
                break;
              }
            }
          }

          if (!attr) {
            attr = _defAttrs[1];
          }

          var _info = FormatInfos[attr.format];
          attributes.push(attr);
          vertCount = Math.max(vertCount, Math.floor(geometry.normals.length / _info.count));
          channels.push({
            offset: stride,
            data: geometry.normals,
            attribute: attr
          });
          stride += _info.size;
        }

        if (geometry.uvs && geometry.uvs.length > 0) {
          attr = null;

          if (geometry.attributes) {
            for (var _iterator3 = _createForOfIteratorHelperLoose(geometry.attributes), _step3; !(_step3 = _iterator3()).done;) {
              var _att2 = _step3.value;

              if (_att2.name === AttributeName.ATTR_TEX_COORD) {
                attr = _att2;
                break;
              }
            }
          }

          if (!attr) {
            attr = _defAttrs[2];
          }

          var _info2 = FormatInfos[attr.format];
          attributes.push(attr);
          vertCount = Math.max(vertCount, Math.floor(geometry.uvs.length / _info2.count));
          channels.push({
            offset: stride,
            data: geometry.uvs,
            attribute: attr
          });
          stride += _info2.size;
        }

        if (geometry.tangents && geometry.tangents.length > 0) {
          attr = null;

          if (geometry.attributes) {
            for (var _iterator4 = _createForOfIteratorHelperLoose(geometry.attributes), _step4; !(_step4 = _iterator4()).done;) {
              var _att3 = _step4.value;

              if (_att3.name === AttributeName.ATTR_TANGENT) {
                attr = _att3;
                break;
              }
            }
          }

          if (!attr) {
            attr = _defAttrs[3];
          }

          var _info3 = FormatInfos[attr.format];
          attributes.push(attr);
          vertCount = Math.max(vertCount, Math.floor(geometry.tangents.length / _info3.count));
          channels.push({
            offset: stride,
            data: geometry.tangents,
            attribute: attr
          });
          stride += _info3.size;
        }

        if (geometry.colors && geometry.colors.length > 0) {
          attr = null;

          if (geometry.attributes) {
            for (var _iterator5 = _createForOfIteratorHelperLoose(geometry.attributes), _step5; !(_step5 = _iterator5()).done;) {
              var _att4 = _step5.value;

              if (_att4.name === AttributeName.ATTR_COLOR) {
                attr = _att4;
                break;
              }
            }
          }

          if (!attr) {
            attr = _defAttrs[4];
          }

          var _info4 = FormatInfos[attr.format];
          attributes.push(attr);
          vertCount = Math.max(vertCount, Math.floor(geometry.colors.length / _info4.count));
          channels.push({
            offset: stride,
            data: geometry.colors,
            attribute: attr
          });
          stride += _info4.size;
        }

        if (geometry.customAttributes) {
          for (var k = 0; k < geometry.customAttributes.length; k++) {
            var ca = geometry.customAttributes[k];
            var _info5 = FormatInfos[ca.attr.format];
            attributes.push(ca.attr);
            vertCount = Math.max(vertCount, Math.floor(ca.values.length / _info5.count));
            channels.push({
              offset: stride,
              data: ca.values,
              attribute: ca.attr
            });
            stride += _info5.size;
          }
        }

        var bufferBlob = new BufferBlob();
        var vertexBuffer = new ArrayBuffer(vertCount * stride);
        var vertexBufferView = new DataView(vertexBuffer);

        for (var _i = 0, _channels = channels; _i < _channels.length; _i++) {
          var channel = _channels[_i];
          writeBuffer(vertexBufferView, channel.data, channel.attribute.format, channel.offset, stride);
        }

        bufferBlob.setNextAlignment(0);
        var vertexBundle = {
          attributes: attributes,
          view: {
            offset: bufferBlob.getLength(),
            length: vertexBuffer.byteLength,
            count: vertCount,
            stride: stride
          }
        };
        bufferBlob.addBuffer(vertexBuffer);
        var indexBuffer = null;
        var idxCount = 0;
        var idxStride = 2;

        if (geometry.indices) {
          var indices = geometry.indices;
          idxCount = indices.length;
          indexBuffer = new ArrayBuffer(idxStride * idxCount);
          var indexBufferView = new DataView(indexBuffer);
          writeBuffer(indexBufferView, indices, Format.R16UI);
        }

        var primitive = {
          primitiveMode: geometry.primitiveMode || PrimitiveMode.TRIANGLE_LIST,
          vertexBundelIndices: [0]
        };

        if (indexBuffer) {
          bufferBlob.setNextAlignment(idxStride);
          primitive.indexView = {
            offset: bufferBlob.getLength(),
            length: indexBuffer.byteLength,
            count: idxCount,
            stride: idxStride
          };
          bufferBlob.addBuffer(indexBuffer);
        }

        var minPosition = geometry.minPos;

        if (!minPosition && options.calculateBounds) {
          minPosition = Vec3.set(new Vec3(), Infinity, Infinity, Infinity);

          for (var iVertex = 0; iVertex < vertCount; ++iVertex) {
            Vec3.set(v3_1$5, positions[iVertex * 3 + 0], positions[iVertex * 3 + 1], positions[iVertex * 3 + 2]);
            Vec3.min(minPosition, minPosition, v3_1$5);
          }
        }

        var maxPosition = geometry.maxPos;

        if (!maxPosition && options.calculateBounds) {
          maxPosition = Vec3.set(new Vec3(), -Infinity, -Infinity, -Infinity);

          for (var _iVertex = 0; _iVertex < vertCount; ++_iVertex) {
            Vec3.set(v3_1$5, positions[_iVertex * 3 + 0], positions[_iVertex * 3 + 1], positions[_iVertex * 3 + 2]);
            Vec3.max(maxPosition, maxPosition, v3_1$5);
          }
        }

        var meshStruct = {
          vertexBundles: [vertexBundle],
          primitives: [primitive]
        };

        if (minPosition) {
          meshStruct.minPosition = new Vec3(minPosition.x, minPosition.y, minPosition.z);
        }

        if (maxPosition) {
          meshStruct.maxPosition = new Vec3(maxPosition.x, maxPosition.y, maxPosition.z);
        }

        if (!out) {
          out = new Mesh();
        }

        out.reset({
          struct: meshStruct,
          data: new Uint8Array(bufferBlob.getCombined())
        });
        return out;
      }

      var _dec$H, _class$H, _class2$E, _temp$l;
      var INSET_LEFT = 0;
      var INSET_TOP = 1;
      var INSET_RIGHT = 2;
      var INSET_BOTTOM = 3;
      var temp_vec3 = new Vec3();
      var temp_matrix = new Mat4();
      var MeshType;

      (function (MeshType) {
        MeshType[MeshType["RECT"] = 0] = "RECT";
        MeshType[MeshType["POLYGON"] = 1] = "POLYGON";
      })(MeshType || (MeshType = {}));

      var temp_uvs = [{
        u: 0,
        v: 0
      }, {
        u: 0,
        v: 0
      }, {
        u: 0,
        v: 0
      }, {
        u: 0,
        v: 0
      }];
      var SpriteFrame = exports('SpriteFrame', (_dec$H = ccclass('cc.SpriteFrame'), _dec$H(_class$H = (_temp$l = _class2$E = function (_Asset) {
        _inheritsLoose(SpriteFrame, _Asset);

        SpriteFrame.createWithImage = function createWithImage(imageSourceOrImageAsset) {
          var img = imageSourceOrImageAsset instanceof ImageAsset ? imageSourceOrImageAsset : new ImageAsset(imageSourceOrImageAsset);
          var tex = new Texture2D();
          tex.image = img;
          var spf = new SpriteFrame();
          spf.texture = tex;
          return spf;
        };

        function SpriteFrame() {
          var _this;

          _this = _Asset.call(this) || this;
          _this.vertices = null;
          _this.uv = [];
          _this.unbiasUV = [];
          _this.uvSliced = [];
          _this._rect = new Rect();
          _this._trimmedBorder = new Vec4();
          _this._offset = new Vec2();
          _this._originalSize = new Size();
          _this._rotated = false;
          _this._capInsets = [0, 0, 0, 0];
          _this._atlasUuid = '';
          _this._texture = void 0;
          _this._isFlipUVY = false;
          _this._isFlipUVX = false;
          _this._original = null;
          _this._packable = true;
          _this._pixelsToUnit = 100;
          _this._pivot = new Vec2(0.5, 0.5);
          _this._meshType = MeshType.RECT;
          _this._extrude = 0;
          _this._customOutLine = [];
          _this._minPos = new Vec3();
          _this._maxPos = new Vec3();

          return _this;
        }

        var _proto = SpriteFrame.prototype;

        _proto.textureLoaded = function textureLoaded() {
          return !!this.texture;
        };

        _proto.isRotated = function isRotated() {
          return this._rotated;
        };

        _proto.setRotated = function setRotated(rotated) {
          this.rotated = rotated;
        };

        _proto.getRect = function getRect(out) {
          if (out) {
            out.set(this._rect);
            return out;
          }

          return this._rect.clone();
        };

        _proto.setRect = function setRect(rect) {
          this.rect = rect;
        };

        _proto.getOriginalSize = function getOriginalSize(out) {
          if (out) {
            out.set(this._originalSize);
            return out;
          }

          return this._originalSize.clone();
        };

        _proto.setOriginalSize = function setOriginalSize(size) {
          this.originalSize = size;
        };

        _proto.getOffset = function getOffset(out) {
          if (out) {
            out.set(this._offset);
            return out;
          }

          return this._offset.clone();
        };

        _proto.setOffset = function setOffset(offset) {
          this.offset = offset;
        };

        _proto.getGFXTexture = function getGFXTexture() {
          return this._texture.getGFXTexture();
        };

        _proto.getGFXSampler = function getGFXSampler() {
          return this._texture.getGFXSampler();
        };

        _proto.getHash = function getHash() {
          return this._texture.getHash();
        };

        _proto.getSamplerInfo = function getSamplerInfo() {
          return this._texture.getSamplerInfo();
        };

        _proto.reset = function reset(info, clearData) {
          if (clearData === void 0) {
            clearData = false;
          }

          var calUV = false;

          if (clearData) {
            this._originalSize.set(0, 0);

            this._rect.set(0, 0, 0, 0);

            this._offset.set(0, 0);

            this._capInsets = [0, 0, 0, 0];
            this._rotated = false;
            calUV = true;
          }

          if (info) {
            if (info.texture) {
              this._rect.x = this._rect.y = 0;
              this._rect.width = info.texture.width;
              this._rect.height = info.texture.height;

              this._refreshTexture(info.texture);

              this.checkRect(this._texture);
            }

            if (info.originalSize) {
              this._originalSize.set(info.originalSize);
            }

            if (info.rect) {
              this._rect.set(info.rect);
            }

            if (info.offset) {
              this._offset.set(info.offset);
            }

            if (info.borderTop !== undefined) {
              this._capInsets[INSET_TOP] = info.borderTop;
            }

            if (info.borderBottom !== undefined) {
              this._capInsets[INSET_BOTTOM] = info.borderBottom;
            }

            if (info.borderLeft !== undefined) {
              this._capInsets[INSET_LEFT] = info.borderLeft;
            }

            if (info.borderRight !== undefined) {
              this._capInsets[INSET_RIGHT] = info.borderRight;
            }

            if (info.isRotate !== undefined) {
              this._rotated = !!info.isRotate;
            }

            if (info.isFlipUv !== undefined) {
              this._isFlipUVY = !!info.isFlipUv;
            }

            calUV = true;
          }

          if (calUV && this.texture) {
            this._calculateUV();
          }

          this._calcTrimmedBorder();
        };

        _proto.checkRect = function checkRect(texture) {
          var rect = this._rect;
          var maxX = rect.x;
          var maxY = rect.y;

          if (this._rotated) {
            maxX += rect.height;
            maxY += rect.width;
          } else {
            maxX += rect.width;
            maxY += rect.height;
          }

          if (maxX > texture.width) {
            errorID(3300, this.name + "/" + texture.name, maxX, texture.width);
            return false;
          }

          if (maxY > texture.height) {
            errorID(3301, this.name + "/" + texture.name, maxY, texture.height);
            return false;
          }

          return true;
        };

        _proto._calcTrimmedBorder = function _calcTrimmedBorder() {
          var ow = this._originalSize.width;
          var oh = this._originalSize.height;
          var rw = this._rect.width;
          var rh = this._rect.height;
          var halfTrimmedWidth = (ow - rw) * 0.5;
          var halfTrimmedHeight = (oh - rh) * 0.5;
          this._trimmedBorder.x = this._offset.x + halfTrimmedWidth;
          this._trimmedBorder.y = this._offset.x - halfTrimmedWidth;
          this._trimmedBorder.z = this._offset.y + halfTrimmedHeight;
          this._trimmedBorder.w = this._offset.y - halfTrimmedHeight;
        };

        _proto.ensureMeshData = function ensureMeshData() {
          if (this._mesh) return;

          this._initVertices();

          this._createMesh();
        };

        _proto.destroy = function destroy() {
          if (this._packable && dynamicAtlasManager) {
            dynamicAtlasManager.deleteAtlasSpriteFrame(this);
          }

          return _Asset.prototype.destroy.call(this);
        };

        _proto._calculateSlicedUV = function _calculateSlicedUV() {
          var rect = this._rect;
          var tex = this.texture;
          var atlasWidth = tex.width;
          var atlasHeight = tex.height;
          var leftWidth = this._capInsets[INSET_LEFT];
          var rightWidth = this._capInsets[INSET_RIGHT];
          var centerWidth = rect.width - leftWidth - rightWidth;
          var topHeight = this._capInsets[INSET_TOP];
          var bottomHeight = this._capInsets[INSET_BOTTOM];
          var centerHeight = rect.height - topHeight - bottomHeight;
          var uvSliced = this.uvSliced;
          uvSliced.length = 0;

          if (this._rotated) {
            temp_uvs[0].u = rect.x / atlasWidth;
            temp_uvs[1].u = (rect.x + bottomHeight) / atlasWidth;
            temp_uvs[2].u = (rect.x + bottomHeight + centerHeight) / atlasWidth;
            temp_uvs[3].u = (rect.x + rect.height) / atlasWidth;
            temp_uvs[3].v = rect.y / atlasHeight;
            temp_uvs[2].v = (rect.y + leftWidth) / atlasHeight;
            temp_uvs[1].v = (rect.y + leftWidth + centerWidth) / atlasHeight;
            temp_uvs[0].v = (rect.y + rect.width) / atlasHeight;

            for (var row = 0; row < 4; ++row) {
              var rowD = temp_uvs[row];

              for (var col = 0; col < 4; ++col) {
                var colD = temp_uvs[3 - col];
                uvSliced.push({
                  u: rowD.u,
                  v: colD.v
                });
              }
            }
          } else {
            temp_uvs[0].u = rect.x / atlasWidth;
            temp_uvs[1].u = (rect.x + leftWidth) / atlasWidth;
            temp_uvs[2].u = (rect.x + leftWidth + centerWidth) / atlasWidth;
            temp_uvs[3].u = (rect.x + rect.width) / atlasWidth;
            temp_uvs[3].v = rect.y / atlasHeight;
            temp_uvs[2].v = (rect.y + topHeight) / atlasHeight;
            temp_uvs[1].v = (rect.y + topHeight + centerHeight) / atlasHeight;
            temp_uvs[0].v = (rect.y + rect.height) / atlasHeight;

            for (var _row = 0; _row < 4; ++_row) {
              var _rowD = temp_uvs[_row];

              for (var _col = 0; _col < 4; ++_col) {
                var _colD = temp_uvs[_col];
                uvSliced.push({
                  u: _colD.u,
                  v: _rowD.v
                });
              }
            }
          }

          this.emit(SpriteFrame.EVENT_UV_UPDATED, this);
        };

        _proto._calculateUV = function _calculateUV() {
          var rect = this._rect;
          var uv = this.uv;
          var unbiasUV = this.unbiasUV;
          var tex = this.texture;
          var texw = tex.width;
          var texh = tex.height;

          if (this._rotated) {
            var l = texw === 0 ? 0 : rect.x / texw;
            var r = texw === 0 ? 1 : (rect.x + rect.height) / texw;
            var t = texh === 0 ? 0 : rect.y / texh;
            var b = texh === 0 ? 1 : (rect.y + rect.width) / texh;

            if (this._isFlipUVX && this._isFlipUVY) {
              uv[0] = r;
              uv[1] = b;
              uv[2] = r;
              uv[3] = t;
              uv[4] = l;
              uv[5] = b;
              uv[6] = l;
              uv[7] = t;
            } else if (this._isFlipUVX) {
              uv[0] = r;
              uv[1] = t;
              uv[2] = r;
              uv[3] = b;
              uv[4] = l;
              uv[5] = t;
              uv[6] = l;
              uv[7] = b;
            } else if (this._isFlipUVY) {
              uv[0] = l;
              uv[1] = b;
              uv[2] = l;
              uv[3] = t;
              uv[4] = r;
              uv[5] = b;
              uv[6] = r;
              uv[7] = t;
            } else {
              uv[0] = l;
              uv[1] = t;
              uv[2] = l;
              uv[3] = b;
              uv[4] = r;
              uv[5] = t;
              uv[6] = r;
              uv[7] = b;
            }

            var ul = texw === 0 ? 0 : rect.x / texw;
            var ur = texw === 0 ? 1 : (rect.x + rect.height) / texw;
            var ut = texh === 0 ? 0 : rect.y / texh;
            var ub = texh === 0 ? 1 : (rect.y + rect.width) / texh;

            if (this._isFlipUVX && this._isFlipUVY) {
              unbiasUV[0] = ur;
              unbiasUV[1] = ub;
              unbiasUV[2] = ur;
              unbiasUV[3] = ut;
              unbiasUV[4] = ul;
              unbiasUV[5] = ub;
              unbiasUV[6] = ul;
              unbiasUV[7] = ut;
            } else if (this._isFlipUVX) {
              unbiasUV[0] = ur;
              unbiasUV[1] = ut;
              unbiasUV[2] = ur;
              unbiasUV[3] = ub;
              unbiasUV[4] = ul;
              unbiasUV[5] = ut;
              unbiasUV[6] = ul;
              unbiasUV[7] = ub;
            } else if (this._isFlipUVY) {
              unbiasUV[0] = ul;
              unbiasUV[1] = ub;
              unbiasUV[2] = ul;
              unbiasUV[3] = ut;
              unbiasUV[4] = ur;
              unbiasUV[5] = ub;
              unbiasUV[6] = ur;
              unbiasUV[7] = ut;
            } else {
              unbiasUV[0] = ul;
              unbiasUV[1] = ut;
              unbiasUV[2] = ul;
              unbiasUV[3] = ub;
              unbiasUV[4] = ur;
              unbiasUV[5] = ut;
              unbiasUV[6] = ur;
              unbiasUV[7] = ub;
            }
          } else {
            var _l = texw === 0 ? 0 : rect.x / texw;

            var _r = texw === 0 ? 1 : (rect.x + rect.width) / texw;

            var _b = texh === 0 ? 1 : (rect.y + rect.height) / texh;

            var _t = texh === 0 ? 0 : rect.y / texh;

            if (this._isFlipUVX && this._isFlipUVY) {
              uv[0] = _r;
              uv[1] = _t;
              uv[2] = _l;
              uv[3] = _t;
              uv[4] = _r;
              uv[5] = _b;
              uv[6] = _l;
              uv[7] = _b;
            } else if (this._isFlipUVX) {
              uv[0] = _r;
              uv[1] = _b;
              uv[2] = _l;
              uv[3] = _b;
              uv[4] = _r;
              uv[5] = _t;
              uv[6] = _l;
              uv[7] = _t;
            } else if (this._isFlipUVY) {
              uv[0] = _l;
              uv[1] = _t;
              uv[2] = _r;
              uv[3] = _t;
              uv[4] = _l;
              uv[5] = _b;
              uv[6] = _r;
              uv[7] = _b;
            } else {
              uv[0] = _l;
              uv[1] = _b;
              uv[2] = _r;
              uv[3] = _b;
              uv[4] = _l;
              uv[5] = _t;
              uv[6] = _r;
              uv[7] = _t;
            }

            var _ul = texw === 0 ? 0 : rect.x / texw;

            var _ur = texw === 0 ? 1 : (rect.x + rect.width) / texw;

            var _ub = texh === 0 ? 1 : (rect.y + rect.height) / texh;

            var _ut = texh === 0 ? 0 : rect.y / texh;

            if (this._isFlipUVX && this._isFlipUVY) {
              unbiasUV[0] = _ur;
              unbiasUV[1] = _ut;
              unbiasUV[2] = _ul;
              unbiasUV[3] = _ut;
              unbiasUV[4] = _ur;
              unbiasUV[5] = _ub;
              unbiasUV[6] = _ul;
              unbiasUV[7] = _ub;
            } else if (this._isFlipUVX) {
              unbiasUV[0] = _ur;
              unbiasUV[1] = _ub;
              unbiasUV[2] = _ul;
              unbiasUV[3] = _ub;
              unbiasUV[4] = _ur;
              unbiasUV[5] = _ut;
              unbiasUV[6] = _ul;
              unbiasUV[7] = _ut;
            } else if (this._isFlipUVY) {
              unbiasUV[0] = _ul;
              unbiasUV[1] = _ut;
              unbiasUV[2] = _ur;
              unbiasUV[3] = _ut;
              unbiasUV[4] = _ul;
              unbiasUV[5] = _ub;
              unbiasUV[6] = _ur;
              unbiasUV[7] = _ub;
            } else {
              unbiasUV[0] = _ul;
              unbiasUV[1] = _ub;
              unbiasUV[2] = _ur;
              unbiasUV[3] = _ub;
              unbiasUV[4] = _ul;
              unbiasUV[5] = _ut;
              unbiasUV[6] = _ur;
              unbiasUV[7] = _ut;
            }
          }

          this._calculateSlicedUV();
        };

        _proto._setDynamicAtlasFrame = function _setDynamicAtlasFrame(frame) {
          if (!frame) return;
          this._original = {
            _texture: this._texture,
            _x: this._rect.x,
            _y: this._rect.y
          };
          this._texture = frame.texture;
          this._rect.x = frame.x;
          this._rect.y = frame.y;

          this._calculateUV();
        };

        _proto._resetDynamicAtlasFrame = function _resetDynamicAtlasFrame() {
          if (!this._original) return;
          this._rect.x = this._original._x;
          this._rect.y = this._original._y;
          this._texture = this._original._texture;
          this._original = null;

          this._calculateUV();
        };

        _proto._checkPackable = function _checkPackable() {
          var dynamicAtlas = dynamicAtlasManager;
          if (!dynamicAtlas) return;
          var texture = this._texture;

          if (!(texture instanceof Texture2D) || texture.isCompressed) {
            this._packable = false;
            return;
          }

          var w = this.width;
          var h = this.height;

          if (!texture.image || w > dynamicAtlas.maxFrameSize || h > dynamicAtlas.maxFrameSize) {
            this._packable = false;
            return;
          }

          var CanvasElement = ccwindow.HTMLCanvasElement;

          if (texture.image && texture.image instanceof CanvasElement) {
            this._packable = true;
          }
        };

        _proto._serialize = function _serialize(ctxForExporting) {

          return null;
        };

        _proto._deserialize = function _deserialize(serializeData, handle) {
          var data = serializeData;
          var rect = data.rect;

          if (rect) {
            this._rect = new Rect(rect.x, rect.y, rect.width, rect.height);
          }

          var offset = data.offset;

          if (data.offset) {
            this._offset = new Vec2(offset.x, offset.y);
          }

          var originalSize = data.originalSize;

          if (data.originalSize) {
            this._originalSize = new Size(originalSize.width, originalSize.height);
          }

          this._rotated = !!data.rotated;
          this._name = data.name;
          this._packable = !!data.packable;
          this._pixelsToUnit = data.pixelsToUnit;
          var pivot = data.pivot;

          if (pivot) {
            this._pivot = new Vec2(pivot.x, pivot.y);
          }

          this._meshType = data.meshType;
          var capInsets = data.capInsets;

          if (capInsets) {
            this._capInsets[INSET_LEFT] = capInsets[INSET_LEFT];
            this._capInsets[INSET_TOP] = capInsets[INSET_TOP];
            this._capInsets[INSET_RIGHT] = capInsets[INSET_RIGHT];
            this._capInsets[INSET_BOTTOM] = capInsets[INSET_BOTTOM];
          }

          var vertices = data.vertices;

          if (vertices) {
            if (!this.vertices) {
              this.vertices = {
                rawPosition: [],
                positions: [],
                indexes: vertices.indexes,
                uv: vertices.uv,
                nuv: vertices.nuv,
                minPos: new Vec3(vertices.minPos.x, vertices.minPos.y, vertices.minPos.z),
                maxPos: new Vec3(vertices.maxPos.x, vertices.maxPos.y, vertices.maxPos.z)
              };
            }

            this.vertices.rawPosition.length = 0;
            var rawPosition = vertices.rawPosition;

            for (var i = 0; i < rawPosition.length; i += 3) {
              this.vertices.rawPosition.push(new Vec3(rawPosition[i], rawPosition[i + 1], rawPosition[i + 2]));
            }

            this._updateMeshVertices();
          }
        };

        _proto.clone = function clone() {
          var _sp$uv, _sp$unbiasUV, _sp$uvSliced, _sp$_capInsets;

          var sp = new SpriteFrame();
          var v = this.vertices;
          sp.vertices = v ? {
            rawPosition: v.rawPosition.slice(0),
            positions: v.positions.slice(0),
            indexes: v.indexes.slice(0),
            uv: v.uv.slice(0),
            nuv: v.nuv.slice(0),
            minPos: v.minPos.clone(),
            maxPos: v.minPos.clone()
          } : null;

          (_sp$uv = sp.uv).splice.apply(_sp$uv, [0, sp.uv.length].concat(this.uv));

          (_sp$unbiasUV = sp.unbiasUV).splice.apply(_sp$unbiasUV, [0, sp.unbiasUV.length].concat(this.unbiasUV));

          (_sp$uvSliced = sp.uvSliced).splice.apply(_sp$uvSliced, [0, sp.uvSliced.length].concat(this.uvSliced));

          sp._rect.set(this._rect);

          sp._offset.set(this._offset);

          sp._originalSize.set(this._originalSize);

          sp._rotated = this._rotated;

          (_sp$_capInsets = sp._capInsets).splice.apply(_sp$_capInsets, [0, sp._capInsets.length].concat(this._capInsets));

          sp._atlasUuid = this._atlasUuid;
          sp._texture = this._texture;
          sp._isFlipUVX = this._isFlipUVX;
          sp._isFlipUVY = this._isFlipUVY;
          sp._pixelsToUnit = this._pixelsToUnit;

          sp._pivot.set(this._pivot);

          sp._meshType = this._meshType;
          return sp;
        };

        _proto._refreshTexture = function _refreshTexture(texture) {
          this._texture = texture;
          var tex = this._texture;
          var config = {};
          var isReset = false;

          if (this._rect.width === 0 || this._rect.height === 0 || !this.checkRect(tex)) {
            config.rect = new Rect(0, 0, tex.width, tex.height);
            isReset = true;
          }

          if (this._originalSize.width === 0 || this._originalSize.height === 0 || isReset) {
            config.originalSize = new Size(tex.width, tex.height);
            isReset = true;
          }

          if (isReset) {
            this.reset(config);
          }

          this._checkPackable();

          if (this._mesh) {
            this._updateMesh();
          }
        };

        _proto.onLoaded = function onLoaded() {
          this._calcTrimmedBorder();
        };

        _proto.initDefault = function initDefault(uuid) {
          _Asset.prototype.initDefault.call(this, uuid);

          var texture = new Texture2D();
          texture.initDefault();

          this._refreshTexture(texture);

          this._calculateUV();
        };

        _proto.validate = function validate() {
          return this._texture && this._rect && this._rect.width !== 0 && this._rect.height !== 0;
        };

        _proto._initVertices = function _initVertices() {
          if (!this.vertices) {
            this.vertices = {
              rawPosition: [],
              positions: [],
              indexes: [],
              uv: [],
              nuv: [],
              minPos: new Vec3(),
              maxPos: new Vec3()
            };
          } else {
            this.vertices.rawPosition.length = 0;
            this.vertices.positions.length = 0;
            this.vertices.indexes.length = 0;
            this.vertices.uv.length = 0;
            this.vertices.nuv.length = 0;
            this.vertices.minPos.set(0, 0, 0);
            this.vertices.maxPos.set(0, 0, 0);
          }

          if (this._meshType === MeshType.POLYGON) ; else {
            var tex = this.texture;
            var texw = tex.width;
            var texh = tex.height;
            var rect = this.rect;
            var width = rect.width;
            var height = rect.height;
            var rectX = rect.x;
            var rectY = texh - rect.y - height;
            var halfWidth = width / 2;
            var halfHeight = height / 2;
            var l = texw === 0 ? 0 : rectX / texw;
            var r = texw === 0 ? 1 : (rectX + width) / texw;
            var t = texh === 0 ? 1 : (rectY + height) / texh;
            var b = texh === 0 ? 0 : rect.y / texh;
            temp_vec3.set(-halfWidth, -halfHeight, 0);
            this.vertices.rawPosition.push(temp_vec3.clone());
            this.vertices.uv.push(rectX);
            this.vertices.uv.push(rectY + height);
            this.vertices.nuv.push(l);
            this.vertices.nuv.push(b);
            this.vertices.minPos.set(temp_vec3);
            temp_vec3.set(halfWidth, -halfHeight, 0);
            this.vertices.rawPosition.push(temp_vec3.clone());
            this.vertices.uv.push(rectX + width);
            this.vertices.uv.push(rectY + height);
            this.vertices.nuv.push(r);
            this.vertices.nuv.push(b);
            temp_vec3.set(-halfWidth, halfHeight, 0);
            this.vertices.rawPosition.push(temp_vec3.clone());
            this.vertices.uv.push(rectX);
            this.vertices.uv.push(rectY);
            this.vertices.nuv.push(l);
            this.vertices.nuv.push(t);
            temp_vec3.set(halfWidth, halfHeight, 0);
            this.vertices.rawPosition.push(temp_vec3.clone());
            this.vertices.uv.push(rectX + width);
            this.vertices.uv.push(rectY);
            this.vertices.nuv.push(r);
            this.vertices.nuv.push(t);
            this.vertices.maxPos.set(temp_vec3);
            this.vertices.indexes.push(0);
            this.vertices.indexes.push(1);
            this.vertices.indexes.push(2);
            this.vertices.indexes.push(2);
            this.vertices.indexes.push(1);
            this.vertices.indexes.push(3);
          }

          this._updateMeshVertices();
        };

        _proto._updateMeshVertices = function _updateMeshVertices() {
          temp_matrix.identity();
          var units = 1 / this._pixelsToUnit;
          var temp_vec3 = new Vec3(units, units, 1);
          temp_matrix.scale(temp_vec3);
          var PosX = -(this._pivot.x - 0.5) * this.rect.width * units;
          var PosY = -(this._pivot.y - 0.5) * this.rect.height * units;
          temp_vec3.set(PosX, PosY, 0);
          temp_matrix.translate(temp_vec3);
          var vertices = this.vertices;

          for (var i = 0; i < vertices.rawPosition.length; i++) {
            var pos = vertices.rawPosition[i];
            Vec3.transformMat4(temp_vec3, pos, temp_matrix);
            Vec3.toArray(vertices.positions, temp_vec3, 3 * i);
          }

          Vec3.transformMat4(this._minPos, vertices.minPos, temp_matrix);
          Vec3.transformMat4(this._maxPos, vertices.maxPos, temp_matrix);
        };

        _proto._createMesh = function _createMesh$1() {
          this._mesh = _createMesh({
            primitiveMode: PrimitiveMode.TRIANGLE_LIST,
            positions: this.vertices.positions,
            uvs: this.vertices.nuv,
            indices: this.vertices.indexes,
            minPos: this._minPos,
            maxPos: this._maxPos,
            attributes: [new Attribute(AttributeName.ATTR_POSITION, Format.RGB32F), new Attribute(AttributeName.ATTR_TEX_COORD, Format.RG32F)]
          });
        };

        _proto._updateMesh = function _updateMesh() {
          if (this._mesh) {
            this._mesh.destroy();
          }

          this._initVertices();

          this._createMesh();
        };

        _createClass(SpriteFrame, [{
          key: "insetTop",
          get: function get() {
            return this._capInsets[INSET_TOP];
          },
          set: function set(value) {
            if (this._capInsets[INSET_TOP] === value) {
              return;
            }

            this._capInsets[INSET_TOP] = value;

            if (this._texture) {
              this._calculateSlicedUV();
            }
          }
        }, {
          key: "insetBottom",
          get: function get() {
            return this._capInsets[INSET_BOTTOM];
          },
          set: function set(value) {
            if (this._capInsets[INSET_BOTTOM] === value) {
              return;
            }

            this._capInsets[INSET_BOTTOM] = value;

            if (this._texture) {
              this._calculateSlicedUV();
            }
          }
        }, {
          key: "insetLeft",
          get: function get() {
            return this._capInsets[INSET_LEFT];
          },
          set: function set(value) {
            if (this._capInsets[INSET_LEFT] === value) {
              return;
            }

            this._capInsets[INSET_LEFT] = value;

            if (this._texture) {
              this._calculateSlicedUV();
            }
          }
        }, {
          key: "insetRight",
          get: function get() {
            return this._capInsets[INSET_RIGHT];
          },
          set: function set(value) {
            if (this._capInsets[INSET_RIGHT] === value) {
              return;
            }

            this._capInsets[INSET_RIGHT] = value;

            if (this._texture) {
              this._calculateSlicedUV();
            }
          }
        }, {
          key: "rect",
          get: function get() {
            return this._rect;
          },
          set: function set(value) {
            if (this._rect.equals(value)) {
              return;
            }

            this._rect.set(value);

            if (this._texture) {
              this._calculateUV();
            }

            this._calcTrimmedBorder();
          }
        }, {
          key: "originalSize",
          get: function get() {
            return this._originalSize;
          },
          set: function set(value) {
            if (this._originalSize.equals(value)) {
              return;
            }

            this._originalSize.set(value);

            if (this._texture) {
              this._calculateUV();
            }

            this._calcTrimmedBorder();
          }
        }, {
          key: "offset",
          get: function get() {
            return this._offset;
          },
          set: function set(value) {
            this._offset.set(value);

            this._calcTrimmedBorder();
          }
        }, {
          key: "rotated",
          get: function get() {
            return this._rotated;
          },
          set: function set(rotated) {
            if (this._rotated === rotated) {
              return;
            }

            this._rotated = rotated;

            if (this._texture) {
              this._calculateUV();
            }
          }
        }, {
          key: "texture",
          get: function get() {
            return this._texture;
          },
          set: function set(value) {
            if (!value) {
              warnID(3122, this.name);
              return;
            }

            if (value === this._texture) {
              return;
            }

            this.reset({
              texture: value
            }, true);
          }
        }, {
          key: "atlasUuid",
          get: function get() {
            return this._atlasUuid;
          },
          set: function set(value) {
            this._atlasUuid = value;
          }
        }, {
          key: "width",
          get: function get() {
            return this._texture.width;
          }
        }, {
          key: "height",
          get: function get() {
            return this._texture.height;
          }
        }, {
          key: "_textureSource",
          set: function set(value) {
            if (globalThis.Build) {
              this._texture = value;
              return;
            }

            if (value) {
              this._refreshTexture(value);

              this._calculateUV();
            }
          }
        }, {
          key: "flipUVX",
          get: function get() {
            return this._isFlipUVX;
          },
          set: function set(value) {
            this._isFlipUVX = value;

            this._calculateUV();
          }
        }, {
          key: "flipUVY",
          get: function get() {
            return this._isFlipUVY;
          },
          set: function set(value) {
            this._isFlipUVY = value;

            this._calculateUV();
          }
        }, {
          key: "packable",
          get: function get() {
            return this._packable;
          },
          set: function set(value) {
            this._packable = value;
          }
        }, {
          key: "original",
          get: function get() {
            return this._original;
          }
        }, {
          key: "pixelsToUnit",
          get: function get() {
            return this._pixelsToUnit;
          }
        }, {
          key: "pivot",
          get: function get() {
            return this._pivot;
          }
        }, {
          key: "mesh",
          get: function get() {
            return this._mesh;
          }
        }, {
          key: "trimmedBorder",
          get: function get() {
            return this._trimmedBorder;
          }
        }]);

        return SpriteFrame;
      }(Asset), _class2$E.EVENT_UV_UPDATED = 'uv_updated', _class2$E.MeshType = MeshType, _temp$l)) || _class$H));
      legacyCC.SpriteFrame = SpriteFrame;

      var _dec$I, _class$I, _class2$F, _initializer$v;
      var SpriteAtlas = exports('SpriteAtlas', (_dec$I = ccclass('cc.SpriteAtlas'), _dec$I(_class$I = (_class2$F = function (_Asset) {
        _inheritsLoose(SpriteAtlas, _Asset);

        function SpriteAtlas() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Asset.call.apply(_Asset, [this].concat(args)) || this;
          _this.spriteFrames = _initializer$v && _initializer$v();
          return _this;
        }

        var _proto = SpriteAtlas.prototype;

        _proto.getTexture = function getTexture() {
          var keys = Object.keys(this.spriteFrames);

          if (keys.length > 0) {
            var spriteFrame = this.spriteFrames[keys[0]];
            return spriteFrame && spriteFrame.texture;
          } else {
            return null;
          }
        };

        _proto.getSpriteFrame = function getSpriteFrame(key) {
          var sf = this.spriteFrames[key];

          if (!sf) {
            return null;
          }

          if (!sf.name) {
            sf.name = key;
          }

          return sf;
        };

        _proto.getSpriteFrames = function getSpriteFrames() {
          var frames = [];
          var spriteFrames = this.spriteFrames;

          for (var _i = 0, _Object$keys = Object.keys(spriteFrames); _i < _Object$keys.length; _i++) {
            var _key2 = _Object$keys[_i];
            frames.push(spriteFrames[_key2]);
          }

          return frames;
        };

        _proto._serialize = function _serialize(ctxForExporting) {
        };

        _proto._deserialize = function _deserialize(serializeData, handle) {
          var data = serializeData;
          this._name = data.name;
          var frames = data.spriteFrames;
          this.spriteFrames = createMap();

          for (var i = 0; i < frames.length; i += 2) {
            handle.result.push(this.spriteFrames, frames[i], frames[i + 1], getClassId(SpriteFrame));
          }
        };

        return SpriteAtlas;
      }(Asset), (_initializer$v = applyDecoratedInitializer(_class2$F.prototype, "spriteFrames", [serializable], function () {
        return createMap();
      })), _class2$F)) || _class$I));
      legacyCC.SpriteAtlas = SpriteAtlas;

      var _dec$J, _class$J;
      var Font = exports('Font', (_dec$J = ccclass('cc.Font'), _dec$J(_class$J = function (_Asset) {
        _inheritsLoose(Font, _Asset);

        function Font() {
          return _Asset.apply(this, arguments) || this;
        }

        return Font;
      }(Asset)) || _class$J));
      legacyCC.Font = Font;

      var _dec$K, _class$K, _class2$G, _initializer$w;
      var TTFFont = exports('TTFFont', (_dec$K = ccclass('cc.TTFFont'), _dec$K(_class$K = (_class2$G = function (_Font) {
        _inheritsLoose(TTFFont, _Font);

        function TTFFont() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Font.call.apply(_Font, [this].concat(args)) || this;
          _this._fontFamily = _initializer$w && _initializer$w();
          return _this;
        }

        var _proto = TTFFont.prototype;

        _proto.initDefault = function initDefault(uuid) {
          this._fontFamily = 'Arial';

          _Font.prototype.initDefault.call(this, uuid);
        };

        _createClass(TTFFont, [{
          key: "_nativeAsset",
          get: function get() {
            return this._fontFamily;
          },
          set: function set(value) {
            this._fontFamily = value || 'Arial';
          }
        }, {
          key: "_nativeDep",
          get: function get() {
            return {
              uuid: this._uuid,
              __nativeName__: this._native,
              ext: extname(this._native),
              __isNative__: true
            };
          }
        }]);

        return TTFFont;
      }(Font), (_initializer$w = applyDecoratedInitializer(_class2$G.prototype, "_fontFamily", [serializable], function () {
        return null;
      }), _applyDecoratedDescriptor(_class2$G.prototype, "_nativeAsset", [override, string], Object.getOwnPropertyDescriptor(_class2$G.prototype, "_nativeAsset"), _class2$G.prototype), _applyDecoratedDescriptor(_class2$G.prototype, "_nativeDep", [override], Object.getOwnPropertyDescriptor(_class2$G.prototype, "_nativeDep"), _class2$G.prototype)), _class2$G)) || _class$K));
      legacyCC.TTFFont = TTFFont;

      var _dec$L, _dec2$i, _class$L, _class2$H, _initializer$x, _initializer2$k, _initializer3$g, _initializer4$c;
      var FontLetterDefinition = function FontLetterDefinition() {
        this.u = 0;
        this.v = 0;
        this.w = 0;
        this.h = 0;
        this.offsetX = 0;
        this.offsetY = 0;
        this.textureID = 0;
        this.valid = false;
        this.xAdvance = 0;
      };
      var FontAtlas = function () {
        function FontAtlas(texture) {
          this.letterDefinitions = {};
          this.texture = texture;
        }

        var _proto = FontAtlas.prototype;

        _proto.addLetterDefinitions = function addLetterDefinitions(letter, letterDefinition) {
          this.letterDefinitions[letter] = letterDefinition;
        };

        _proto.cloneLetterDefinition = function cloneLetterDefinition() {
          var copyLetterDefinitions = {};

          for (var _i = 0, _Object$keys = Object.keys(this.letterDefinitions); _i < _Object$keys.length; _i++) {
            var _key = _Object$keys[_i];
            var value = new FontLetterDefinition();
            mixin(value, this.letterDefinitions[_key]);
            copyLetterDefinitions[_key] = value;
          }

          return copyLetterDefinitions;
        };

        _proto.getTexture = function getTexture() {
          return this.texture;
        };

        _proto.getLetter = function getLetter(key) {
          return this.letterDefinitions[key];
        };

        _proto.getLetterDefinitionForChar = function getLetterDefinitionForChar(_char, labelInfo) {
          var key = _char.charCodeAt(0);

          var hasKey = this.letterDefinitions.hasOwnProperty(key);
          var letter;

          if (hasKey) {
            letter = this.letterDefinitions[key];
          } else {
            letter = null;
          }

          return letter;
        };

        _proto.clear = function clear() {
          this.letterDefinitions = {};
        };

        return FontAtlas;
      }();
      var BitmapFont = exports('BitmapFont', (_dec$L = ccclass('cc.BitmapFont'), _dec2$i = type(SpriteFrame), _dec$L(_class$L = (_class2$H = function (_Font) {
        _inheritsLoose(BitmapFont, _Font);

        function BitmapFont() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {
            args[_key2] = arguments[_key2];
          }

          _this = _Font.call.apply(_Font, [this].concat(args)) || this;
          _this.fntDataStr = _initializer$x && _initializer$x();
          _this.spriteFrame = _initializer2$k && _initializer2$k();
          _this.fontSize = _initializer3$g && _initializer3$g();
          _this.fntConfig = _initializer4$c && _initializer4$c();
          return _this;
        }

        var _proto2 = BitmapFont.prototype;

        _proto2.onLoaded = function onLoaded() {
          var spriteFrame = this.spriteFrame;

          if (!this.fontDefDictionary && spriteFrame) {
            this.fontDefDictionary = new FontAtlas(spriteFrame.texture);
          }

          var fntConfig = this.fntConfig;

          if (!fntConfig) {
            warn('The fnt config is not exists!');
            return;
          }

          var fontDict = fntConfig.fontDefDictionary;

          for (var fontDef in fontDict) {
            var letter = new FontLetterDefinition();
            var rect = fontDict[fontDef].rect;
            letter.offsetX = fontDict[fontDef].xOffset;
            letter.offsetY = fontDict[fontDef].yOffset;
            letter.w = rect.width;
            letter.h = rect.height;
            letter.u = rect.x;
            letter.v = rect.y;
            letter.textureID = 0;
            letter.valid = true;
            letter.xAdvance = fontDict[fontDef].xAdvance;
            this.fontDefDictionary.addLetterDefinitions(fontDef, letter);
          }
        };

        return BitmapFont;
      }(Font), (_initializer$x = applyDecoratedInitializer(_class2$H.prototype, "fntDataStr", [serializable], function () {
        return '';
      }), _initializer2$k = applyDecoratedInitializer(_class2$H.prototype, "spriteFrame", [_dec2$i], function () {
        return null;
      }), _initializer3$g = applyDecoratedInitializer(_class2$H.prototype, "fontSize", [serializable], function () {
        return -1;
      }), _initializer4$c = applyDecoratedInitializer(_class2$H.prototype, "fntConfig", [serializable], function () {
        return null;
      })), _class2$H)) || _class$L));
      legacyCC.BitmapFont = BitmapFont;

      var _dec$M, _class$M;
      var LabelAtlas = exports('LabelAtlas', (_dec$M = ccclass('cc.LabelAtlas'), _dec$M(_class$M = function (_BitmapFont) {
        _inheritsLoose(LabelAtlas, _BitmapFont);

        function LabelAtlas() {
          return _BitmapFont.apply(this, arguments) || this;
        }

        return LabelAtlas;
      }(BitmapFont)) || _class$M));
      legacyCC.LabelAtlas = LabelAtlas;

      var BASELINE_RATIO = exports('BASELINE_RATIO', 0.26);
      var _BASELINE_OFFSET = 0;

      var MIDDLE_RATIO = exports('MIDDLE_RATIO', (BASELINE_RATIO + 1) / 2 - BASELINE_RATIO);
      function getBaselineOffset() {
        return _BASELINE_OFFSET;
      }
      var MAX_CACHE_SIZE = 100;
      var pool = new Pool(2);

      pool.get = function () {
        return this._get() || {
          key: '',
          value: 0,
          prev: null,
          next: null
        };
      };

      var LRUCache = function () {
        function LRUCache(size) {
          this.count = 0;
          this.limit = 0;
          this.datas = {};
          this.limit = size;
        }

        var _proto = LRUCache.prototype;

        _proto.moveToHead = function moveToHead(node) {
          node.next = this.head;
          node.prev = null;
          if (this.head) this.head.prev = node;
          this.head = node;
          if (!this.tail) this.tail = node;
          this.count++;
          this.datas[node.key] = node;
        };

        _proto.put = function put(key, value) {
          var node = pool.get();
          node.key = key;
          node.value = value;

          if (this.count >= this.limit) {
            var discard = this.tail;
            delete this.datas[discard.key];
            this.count--;
            this.tail = discard.prev;
            this.tail.next = null;
            discard.prev = null;
            discard.next = null;
            pool.put(discard);
          }

          this.moveToHead(node);
        };

        _proto.remove = function remove(node) {
          if (node.prev) {
            node.prev.next = node.next;
          } else {
            this.head = node.next;
          }

          if (node.next) {
            node.next.prev = node.prev;
          } else {
            this.tail = node.prev;
          }

          delete this.datas[node.key];
          this.count--;
        };

        _proto.get = function get(key) {
          var node = this.datas[key];

          if (node) {
            this.remove(node);
            this.moveToHead(node);
            return node.value;
          }

          return null;
        };

        _proto.clear = function clear() {
          this.count = 0;
          this.datas = {};
          this.head = null;
          this.tail = null;
        };

        _proto.has = function has(key) {
          return !!this.datas[key];
        };

        _proto["delete"] = function _delete(key) {
          var node = this.datas[key];
          this.remove(node);
        };

        return LRUCache;
      }();

      var measureCache = new LRUCache(MAX_CACHE_SIZE);
      var WORD_REG = /([a-zA-Z0-9ÄÖÜäöüßéèçàùêâîôûа-яА-ЯЁё]+|\S)/;
      var SYMBOL_REG = /^[!,.:;'}\]%\?>、‘“》？。，！]/;
      var LAST_WORD_REG = /([a-zA-Z0-9ÄÖÜäöüßéèçàùêâîôûаíìÍÌïÁÀáàÉÈÒÓòóŐőÙÚŰúűñÑæÆœŒÃÂãÔõěščřžýáíéóúůťďňĚŠČŘŽÁÍÉÓÚŤżźśóńłęćąŻŹŚÓŃŁĘĆĄ-яА-ЯЁёáàảạãăắằẳẵặâấầẩẫậéèẻẽẹêếềểễệiíìỉĩịóòỏõọôốồổỗộơớờởỡợúùủũụưứừửữựýỳỷỹỵđÁÀẢẠÃĂẮẰẲẴẶÂẤẦẨẪẬÉÈẺẼẸÊẾỀỂỄỆIÍÌỈĨỊÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢÚÙỦŨỤƯỨỪỬỮỰÝỲỶỸỴĐ]+|\S)$/;
      var LAST_ENGLISH_REG = /[a-zA-Z0-9ÄÖÜäöüßéèçàùêâîôûаíìÍÌïÁÀáàÉÈÒÓòóŐőÙÚŰúűñÑæÆœŒÃÂãÔõěščřžýáíéóúůťďňĚŠČŘŽÁÍÉÓÚŤżźśóńłęćąŻŹŚÓŃŁĘĆĄ-яА-ЯЁёáàảạãăắằẳẵặâấầẩẫậéèẻẽẹêếềểễệiíìỉĩịóòỏõọôốồổỗộơớờởỡợúùủũụưứừửữựýỳỷỹỵđÁÀẢẠÃĂẮẰẲẴẶÂẤẦẨẪẬÉÈẺẼẸÊẾỀỂỄỆIÍÌỈĨỊÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢÚÙỦŨỤƯỨỪỬỮỰÝỲỶỸỴĐ]+$/;
      var FIRST_ENGLISH_REG = /^[a-zA-Z0-9ÄÖÜäöüßéèçàùêâîôûаíìÍÌïÁÀáàÉÈÒÓòóŐőÙÚŰúűñÑæÆœŒÃÂãÔõěščřžýáíéóúůťďňĚŠČŘŽÁÍÉÓÚŤżźśóńłęćąŻŹŚÓŃŁĘĆĄ-яА-ЯЁёáàảạãăắằẳẵặâấầẩẫậéèẻẽẹêếềểễệiíìỉĩịóòỏõọôốồổỗộơớờởỡợúùủũụưứừửữựýỳỷỹỵđÁÀẢẠÃĂẮẰẲẴẶÂẤẦẨẪẬÉÈẺẼẸÊẾỀỂỄỆIÍÌỈĨỊÓÒỎÕỌÔỐỒỔỖỘƠỚỜỞỠỢÚÙỦŨỤƯỨỪỬỮỰÝỲỶỸỴĐ]/;
      function isUnicodeCJK(ch) {
        var __CHINESE_REG = /^[\u4E00-\u9FFF\u3400-\u4DFF]+$/;
        var __JAPANESE_REG = /[\u3000-\u303F]|[\u3040-\u309F]|[\u30A0-\u30FF]|[\uFF00-\uFFEF]|[\u4E00-\u9FAF]|[\u2605-\u2606]|[\u2190-\u2195]|\u203B/g;
        var __KOREAN_REG = /^[\u1100-\u11FF]|[\u3130-\u318F]|[\uA960-\uA97F]|[\uAC00-\uD7AF]|[\uD7B0-\uD7FF]+$/;
        return __CHINESE_REG.test(ch) || __JAPANESE_REG.test(ch) || __KOREAN_REG.test(ch);
      }
      function isUnicodeSpace(ch) {
        var chCode = ch.charCodeAt(0);
        return chCode >= 9 && chCode <= 13 || chCode === 32 || chCode === 133 || chCode === 160 || chCode === 5760 || chCode >= 8192 && chCode <= 8202 || chCode === 8232 || chCode === 8233 || chCode === 8239 || chCode === 8287 || chCode === 12288;
      }
      function safeMeasureText(ctx, string, desc) {
        var font = desc || ctx.font;
        var key = font + "\uD83C\uDFAE" + string;
        var cache = measureCache.get(key);

        if (cache !== null) {
          return cache;
        }

        var metric = ctx.measureText(string);
        var width = metric && metric.width || 0;
        measureCache.put(key, width);
        return width;
      }

      function _safeSubstring(targetString, startIndex, endIndex) {
        var newStartIndex = startIndex;
        var newEndIndex = endIndex;
        var startChar = targetString[startIndex];

        if (startChar >= "\uDC00" && startChar <= "\uDFFF") {
          newStartIndex--;
        }

        if (endIndex !== undefined) {
          if (endIndex - 1 !== startIndex) {
            var endChar = targetString[endIndex - 1];

            if (endChar >= "\uD800" && endChar <= "\uDBFF") {
              newEndIndex--;
            }
          } else if (startChar >= "\uD800" && startChar <= "\uDBFF") {
            newEndIndex++;
          }
        }

        return targetString.substring(newStartIndex, newEndIndex);
      }

      function isEnglishWordPartAtFirst(stringToken) {
        return FIRST_ENGLISH_REG.test(stringToken);
      }
      function isEnglishWordPartAtLast(stringToken) {
        return LAST_ENGLISH_REG.test(stringToken);
      }
      function getEnglishWordPartAtFirst(stringToken) {
        var result = FIRST_ENGLISH_REG.exec(stringToken);
        return result;
      }
      function getEnglishWordPartAtLast(stringToken) {
        var result = LAST_ENGLISH_REG.exec(stringToken);
        return result;
      }
      function fragmentText(stringToken, allWidth, maxWidth, measureText) {
        var wrappedWords = [];

        if (stringToken.length === 0 || maxWidth < 0) {
          wrappedWords.push('');
          return wrappedWords;
        }

        var text = stringToken;

        while (allWidth > maxWidth && text.length > 1) {
          var fuzzyLen = text.length * (maxWidth / allWidth) | 0;

          var tmpText = _safeSubstring(text, fuzzyLen);

          var width = allWidth - measureText(tmpText);
          var sLine = tmpText;
          var pushNum = 0;
          var checkWhile = 0;
          var checkCount = 100;

          while (width > maxWidth && checkWhile++ < checkCount) {
            fuzzyLen *= maxWidth / width;
            fuzzyLen |= 0;
            tmpText = _safeSubstring(text, fuzzyLen);
            width = allWidth - measureText(tmpText);
          }

          checkWhile = 0;

          while (tmpText && width <= maxWidth && checkWhile++ < checkCount) {
            var exec = WORD_REG.exec(tmpText);
            pushNum = exec ? exec[0].length : 1;
            sLine = tmpText;
            fuzzyLen += pushNum;
            tmpText = _safeSubstring(text, fuzzyLen);
            width = allWidth - measureText(tmpText);
          }

          fuzzyLen -= pushNum;

          if (fuzzyLen === 0) {
            fuzzyLen = 1;
            sLine = _safeSubstring(text, 1);
          } else if (fuzzyLen === 1 && text[0] >= "\uD800" && text[0] <= "\uDBFF") {
            fuzzyLen = 2;
            sLine = _safeSubstring(text, 2);
          }

          var sText = _safeSubstring(text, 0, fuzzyLen);

          var result = void 0;

          {
            if (SYMBOL_REG.test(sLine || tmpText)) {
              result = LAST_WORD_REG.exec(sText);
              fuzzyLen -= result ? result[0].length : 0;

              if (fuzzyLen === 0) {
                fuzzyLen = 1;
              }

              sLine = _safeSubstring(text, fuzzyLen);
              sText = _safeSubstring(text, 0, fuzzyLen);
            }
          }

          if (FIRST_ENGLISH_REG.test(sLine)) {
            result = LAST_ENGLISH_REG.exec(sText);

            if (result && sText !== result[0]) {
              fuzzyLen -= result[0].length;
              sLine = _safeSubstring(text, fuzzyLen);
              sText = _safeSubstring(text, 0, fuzzyLen);
            }
          }

          if (wrappedWords.length === 0) {
            wrappedWords.push(sText);
          } else {
            sText = sText.trim();

            if (sText.length > 0) {
              wrappedWords.push(sText);
            }
          }

          text = sLine || tmpText;
          allWidth = measureText(text);
        }

        if (wrappedWords.length === 0) {
          wrappedWords.push(text);
        } else {
          text = text.trim();

          if (text.length > 0) {
            wrappedWords.push(text);
          }
        }

        return wrappedWords;
      }

      var _canvasPool;

      var CanvasPool = exports('CanvasPool', function () {
        function CanvasPool() {
          this.pool = [];
        }

        CanvasPool.getInstance = function getInstance() {
          if (!_canvasPool) {
            _canvasPool = new CanvasPool();
          }

          return _canvasPool;
        };

        var _proto = CanvasPool.prototype;

        _proto.get = function get() {
          var data = this.pool.pop();

          if (!data) {
            var canvas = ccwindow.document.createElement('canvas');
            var context = canvas.getContext('2d');
            data = {
              canvas: canvas,
              context: context
            };
          }

          return data;
        };

        _proto.put = function put(canvas) {
          if (this.pool.length >= macro.MAX_LABEL_CANVAS_POOL_SIZE) {
            return;
          }

          this.pool.push(canvas);
        };

        return CanvasPool;
      }());
      var WHITE = Color.WHITE.clone();
      var space$1 = 0;
      var bleed = 2;

      var FontLetterDefinition$1 = function FontLetterDefinition() {
        this.u = 0;
        this.v = 0;
        this.w = 0;
        this.h = 0;
        this.texture = null;
        this.offsetX = 0;
        this.offsetY = 0;
        this.valid = false;
        this.xAdvance = 0;
      };

      var _backgroundStyle = "rgba(255, 255, 255, " + (1 / 255).toFixed(3) + ")";

      var BASELINE_OFFSET = getBaselineOffset();

      var LetterTexture = function () {
        function LetterTexture(_char, labelInfo) {
          this.image = null;
          this.labelInfo = void 0;
          this["char"] = void 0;
          this.data = null;
          this.canvas = null;
          this.context = null;
          this.width = 0;
          this.height = 0;
          this.offsetY = 0;
          this.hash = void 0;
          this["char"] = _char;
          this.labelInfo = labelInfo;
          this.hash = "" + _char.charCodeAt(0) + labelInfo.hash;
        }

        var _proto2 = LetterTexture.prototype;

        _proto2.updateRenderData = function updateRenderData() {
          this._updateProperties();

          this._updateTexture();
        };

        _proto2.destroy = function destroy() {
          this.image = null;
          CanvasPool.getInstance().put(this.data);
        };

        _proto2._updateProperties = function _updateProperties() {
          this.data = CanvasPool.getInstance().get();
          this.canvas = this.data.canvas;
          this.context = this.data.context;

          if (this.context) {
            this.context.font = this.labelInfo.fontDesc;
            var width = safeMeasureText(this.context, this["char"], this.labelInfo.fontDesc);
            var blank = this.labelInfo.margin * 2 + bleed;
            this.width = parseFloat(width.toFixed(2)) + blank;
            this.height = (1 + BASELINE_RATIO) * this.labelInfo.fontSize + blank;
            this.offsetY = -(this.labelInfo.fontSize * BASELINE_RATIO) / 2;
          }

          if (this.canvas.width !== this.width) {
            this.canvas.width = this.width;
          }

          if (this.canvas.height !== this.height) {
            this.canvas.height = this.height;
          }

          if (!this.image) {
            this.image = new ImageAsset();
          }

          this.image.reset(this.canvas);
        };

        _proto2._updateTexture = function _updateTexture() {
          if (!this.context || !this.canvas) {
            return;
          }

          var context = this.context;
          var labelInfo = this.labelInfo;
          var width = this.canvas.width;
          var height = this.canvas.height;
          context.textAlign = 'center';
          context.textBaseline = 'alphabetic';
          context.clearRect(0, 0, width, height);
          context.fillStyle = _backgroundStyle;
          context.fillRect(0, 0, width, height);
          context.font = labelInfo.fontDesc;
          var fontSize = labelInfo.fontSize;
          var startX = width / 2;
          var startY = height / 2 + fontSize * MIDDLE_RATIO + fontSize * BASELINE_OFFSET;
          var color = labelInfo.color;
          context.lineJoin = 'round';
          context.fillStyle = "rgba(" + color.r + ", " + color.g + ", " + color.b + ", " + 1 + ")";

          if (labelInfo.isOutlined) {
            var strokeColor = labelInfo.out || WHITE;
            context.strokeStyle = "rgba(" + strokeColor.r + ", " + strokeColor.g + ", " + strokeColor.b + ", " + strokeColor.a / 255 + ")";
            context.lineWidth = labelInfo.margin * 2;
            context.strokeText(this["char"], startX, startY);
          }

          context.fillText(this["char"], startX, startY);
        };

        return LetterTexture;
      }();

      var LetterRenderTexture = function (_Texture2D) {
        _inheritsLoose(LetterRenderTexture, _Texture2D);

        function LetterRenderTexture() {
          return _Texture2D.apply(this, arguments) || this;
        }

        var _proto3 = LetterRenderTexture.prototype;

        _proto3.initWithSize = function initWithSize(width, height, format) {
          if (format === void 0) {
            format = PixelFormat.RGBA8888;
          }

          this.reset({
            width: width,
            height: height,
            format: format
          });
        };

        _proto3.drawTextureAt = function drawTextureAt(image, x, y) {
          var gfxTexture = this.getGFXTexture();

          if (!image || !gfxTexture) {
            return;
          }

          var gfxDevice = this._getGFXDevice();

          if (!gfxDevice) {
            console.warn('Unable to get device');
            return;
          }

          var region = new BufferTextureCopy();
          region.texOffset.x = x;
          region.texOffset.y = y;
          region.texExtent.width = image.width;
          region.texExtent.height = image.height;
          gfxDevice.copyTexImagesToTexture([image.data], gfxTexture, [region]);
        };

        return LetterRenderTexture;
      }(Texture2D);
      var LetterAtlas = function () {
        function LetterAtlas(width, height) {
          this._x = space$1;
          this._y = space$1;
          this._nextY = space$1;
          this._width = 0;
          this._height = 0;
          this._halfBleed = 0;
          this._dirty = false;
          var texture = new LetterRenderTexture();
          texture.initWithSize(width, height);
          this.fontDefDictionary = new FontAtlas(texture);
          this._halfBleed = bleed / 2;
          this._width = width;
          this._height = height;
          director.on(Director.EVENT_BEFORE_SCENE_LAUNCH, this.beforeSceneLoad, this);
        }

        var _proto4 = LetterAtlas.prototype;

        _proto4.insertLetterTexture = function insertLetterTexture(letterTexture) {
          var texture = letterTexture.image;
          var device = director.root.device;

          if (!texture || !this.fontDefDictionary || !device) {
            return null;
          }

          var width = texture.width;
          var height = texture.height;

          if (this._x + width + space$1 > this._width) {
            this._x = space$1;
            this._y = this._nextY;
          }

          if (this._y + height > this._nextY) {
            this._nextY = this._y + height + space$1;
          }

          if (this._nextY > this._height) {
            warnID(12100);
            return null;
          }

          this.fontDefDictionary.texture.drawTextureAt(texture, this._x, this._y);
          this._dirty = true;
          var letterDefinition = new FontLetterDefinition$1();
          letterDefinition.u = this._x + this._halfBleed;
          letterDefinition.v = this._y + this._halfBleed;
          letterDefinition.texture = this.fontDefDictionary.texture;
          letterDefinition.valid = true;
          letterDefinition.w = letterTexture.width - bleed;
          letterDefinition.h = letterTexture.height - bleed;
          letterDefinition.xAdvance = letterDefinition.w;
          letterDefinition.offsetY = letterTexture.offsetY;
          this._x += width + space$1;
          this.fontDefDictionary.addLetterDefinitions(letterTexture.hash, letterDefinition);
          return letterDefinition;
        };

        _proto4.update = function update() {
          if (!this._dirty) {
            return;
          }

          this._dirty = false;
        };

        _proto4.reset = function reset() {
          this._x = space$1;
          this._y = space$1;
          this._nextY = space$1;
          this.fontDefDictionary.clear();
        };

        _proto4.destroy = function destroy() {
          this.reset();

          if (this.fontDefDictionary) {
            this.fontDefDictionary.texture.destroy();
            this.fontDefDictionary.texture = null;
          }
        };

        _proto4.getTexture = function getTexture() {
          return this.fontDefDictionary.getTexture();
        };

        _proto4.beforeSceneLoad = function beforeSceneLoad() {
          this.clearAllCache();
        };

        _proto4.clearAllCache = function clearAllCache() {
          this.destroy();
          var texture = new LetterRenderTexture();
          texture.initWithSize(this._width, this._height);
          this.fontDefDictionary.texture = texture;
        };

        _proto4.getLetter = function getLetter(key) {
          return this.fontDefDictionary.letterDefinitions[key];
        };

        _proto4.getLetterDefinitionForChar = function getLetterDefinitionForChar(_char2, labelInfo) {
          var hash = _char2.charCodeAt(0) + labelInfo.hash;
          var letter = this.fontDefDictionary.letterDefinitions[hash];

          if (!letter) {
            var temp = new LetterTexture(_char2, labelInfo);
            temp.updateRenderData();
            letter = this.insertLetterTexture(temp);
            temp.destroy();
          }

          return letter;
        };

        _createClass(LetterAtlas, [{
          key: "width",
          get: function get() {
            return this._width;
          }
        }, {
          key: "height",
          get: function get() {
            return this._height;
          }
        }]);

        return LetterAtlas;
      }();
      var shareLabelInfo = {
        fontAtlas: null,
        fontSize: 0,
        lineHeight: 0,
        hAlign: 0,
        vAlign: 0,
        hash: '',
        fontFamily: '',
        fontDesc: 'Arial',
        color: Color.WHITE.clone(),
        isOutlined: false,
        out: Color.WHITE.clone(),
        margin: 0
      };
      function computeHash(labelInfo) {
        var hashData = '';
        var color = labelInfo.color.toHEX();
        var out = '';

        if (labelInfo.isOutlined && labelInfo.margin > 0) {
          out = out + labelInfo.margin + labelInfo.out.toHEX();
        }

        return hashData + labelInfo.fontSize + labelInfo.fontFamily + color + out;
      }

      var vfmt = [new Attribute(AttributeName.ATTR_POSITION, Format.RGB32F)];
      var vfmtPosColor = [new Attribute(AttributeName.ATTR_POSITION, Format.RGB32F), new Attribute(AttributeName.ATTR_COLOR, Format.RGBA32F)];
      var vfmtPosUvColor = [new Attribute(AttributeName.ATTR_POSITION, Format.RGB32F), new Attribute(AttributeName.ATTR_TEX_COORD, Format.RG32F), new Attribute(AttributeName.ATTR_COLOR, Format.RGBA32F)];
      var vfmtPosUvColor4B = [new Attribute(AttributeName.ATTR_POSITION, Format.RGB32F), new Attribute(AttributeName.ATTR_TEX_COORD, Format.RG32F), new Attribute(AttributeName.ATTR_COLOR, Format.RGBA8, true)];
      var vfmtPosUvTwoColor = [new Attribute(AttributeName.ATTR_POSITION, Format.RGB32F), new Attribute(AttributeName.ATTR_TEX_COORD, Format.RG32F), new Attribute(AttributeName.ATTR_COLOR, Format.RGBA32F), new Attribute(AttributeName.ATTR_COLOR2, Format.RGBA32F)];
      var vfmtPosUvTwoColor4B = [new Attribute(AttributeName.ATTR_POSITION, Format.RGB32F), new Attribute(AttributeName.ATTR_TEX_COORD, Format.RG32F), new Attribute(AttributeName.ATTR_COLOR, Format.RGBA8, true), new Attribute(AttributeName.ATTR_COLOR2, Format.RGBA8, true)];
      function getComponentPerVertex(attrs) {
        var count = 0;

        for (var i = 0; i < attrs.length; i++) {
          var attr = attrs[i];
          var info = FormatInfos[attr.format];
          count += info.count;
        }

        return count;
      }
      function getAttributeStride(attrs) {
        var count = 0;

        for (var i = 0; i < attrs.length; i++) {
          var attr = attrs[i];
          var info = FormatInfos[attr.format];
          count += info.size;
        }

        return count;
      }
      legacyCC.internal.vfmtPosUvColor = vfmtPosUvColor;
      legacyCC.internal.vfmtPosUvTwoColor = vfmtPosUvTwoColor;
      legacyCC.internal.vfmtPosUvColor4B = vfmtPosUvColor4B;
      legacyCC.internal.vfmtPosUvTwoColor4B = vfmtPosUvTwoColor4B;

      var MeshBufferSharedBufferView;

      (function (MeshBufferSharedBufferView) {
        MeshBufferSharedBufferView[MeshBufferSharedBufferView["byteOffset"] = 0] = "byteOffset";
        MeshBufferSharedBufferView[MeshBufferSharedBufferView["vertexOffset"] = 1] = "vertexOffset";
        MeshBufferSharedBufferView[MeshBufferSharedBufferView["indexOffset"] = 2] = "indexOffset";
        MeshBufferSharedBufferView[MeshBufferSharedBufferView["dirty"] = 3] = "dirty";
        MeshBufferSharedBufferView[MeshBufferSharedBufferView["count"] = 4] = "count";
      })(MeshBufferSharedBufferView || (MeshBufferSharedBufferView = {}));

      var MeshBuffer = exports('MeshBuffer', function () {
        var _proto = MeshBuffer.prototype;

        _proto.initSharedBuffer = function initSharedBuffer() {
        };

        _proto.syncSharedBufferToNative = function syncSharedBufferToNative() {
        };

        function MeshBuffer() {
          this._byteOffset = 0;
          this._vertexOffset = 0;
          this._indexOffset = 0;
          this._dirty = false;
          this._floatsPerVertex = 0;
          this._vData = null;
          this._iData = null;
          this._vertexFormatBytes = 0;
          this._initVDataCount = 0;
          this._initIDataCount = 0;
          this._attributes = null;
          this._iaPool = [];
          this._iaInfo = null;
          this._nextFreeIAHandle = 0;

          this.initSharedBuffer();
          this.syncSharedBufferToNative();
        }

        _proto.initialize = function initialize(device, attrs, vFloatCount, iCount) {
          this._initVDataCount = vFloatCount;
          this._initIDataCount = iCount;
          this._attributes = attrs;
          this.floatsPerVertex = getAttributeStride(attrs) >> 2;
          assertIsTrue(this._initVDataCount / this._floatsPerVertex < 65536, getError(9005));

          if (!this.vData || !this.iData) {
            this.vData = new Float32Array(this._initVDataCount);
            this.iData = new Uint16Array(this._initIDataCount);
          }

          this._iaPool.push(this.createNewIA(device));
        };

        _proto.reset = function reset() {
          this._nextFreeIAHandle = 0;
          this.dirty = false;
        };

        _proto.destroy = function destroy() {
          this.reset();
          this._attributes = null;
          this._iaInfo = null;
          this.vData = null;
          this.iData = null;

          for (var i = 0; i < this._iaPool.length; ++i) {
            var iaRef = this._iaPool[i];

            if (iaRef.vertexBuffers[0]) {
              iaRef.vertexBuffers[0].destroy();
            }

            if (iaRef.indexBuffer) {
              iaRef.indexBuffer.destroy();
            }

            iaRef.ia.destroy();
          }

          this._iaPool.length = 0;
        };

        _proto.setDirty = function setDirty() {
          this.dirty = true;
        };

        _proto.request = function request(vertexCount, indexCount) {
          warnID(9002);
          return false;
        };

        _proto.requireFreeIA = function requireFreeIA(device) {
          if (this._iaPool.length <= this._nextFreeIAHandle) {
            this._iaPool.push(this.createNewIA(device));
          }

          var ia = this._iaPool[this._nextFreeIAHandle++].ia;
          return ia;
        };

        _proto.recycleIA = function recycleIA(ia) {
          var pool = this._iaPool;

          for (var i = 0; i < this._nextFreeIAHandle; ++i) {
            if (ia === pool[i].ia) {
              var iaRef = pool[i];
              pool[i] = pool[--this._nextFreeIAHandle];
              pool[this._nextFreeIAHandle] = iaRef;
              return;
            }
          }
        };

        _proto.checkCapacity = function checkCapacity(vertexCount, indexCount) {
          var maxVertex = (this.vertexOffset + vertexCount) * this._floatsPerVertex;
          var maxIndex = this.indexOffset + indexCount;

          if (maxVertex > this._initVDataCount || maxIndex > this._initIDataCount) {
            return false;
          }

          return true;
        };

        _proto.uploadBuffers = function uploadBuffers() {
          if (this.byteOffset === 0 || !this._dirty) {
            return;
          }

          var iOS14 = sys.__isWebIOS14OrIPadOS14Env;
          var submitCount = iOS14 ? this._nextFreeIAHandle : 1;
          var byteCount = this.byteOffset;
          var indexCount = this.indexOffset;

          for (var i = 0; i < submitCount; ++i) {
            var iaRef = this._iaPool[i];
            var verticesData = new Float32Array(this.vData.buffer, 0, byteCount >> 2);
            var indicesData = new Uint16Array(this.iData.buffer, 0, indexCount);
            var vertexBuffer = iaRef.vertexBuffers[0];

            if (byteCount > vertexBuffer.size) {
              vertexBuffer.resize(byteCount);
            }

            vertexBuffer.update(verticesData);

            if (indexCount * 2 > iaRef.indexBuffer.size) {
              iaRef.indexBuffer.resize(indexCount * 2);
            }

            iaRef.indexBuffer.update(indicesData);
          }

          this.dirty = false;
        };

        _proto.createNewIA = function createNewIA(device) {
          var ia;
          var vertexBuffers;
          var indexBuffer;

          if (sys.__isWebIOS14OrIPadOS14Env || !this._iaPool[0]) {
            var vbStride = this._vertexFormatBytes = this._floatsPerVertex * Float32Array.BYTES_PER_ELEMENT;
            var ibStride = Uint16Array.BYTES_PER_ELEMENT;
            var vertexBuffer = device.createBuffer(new BufferInfo(BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.HOST | MemoryUsageBit.DEVICE, vbStride, vbStride));
            indexBuffer = device.createBuffer(new BufferInfo(BufferUsageBit.INDEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.HOST | MemoryUsageBit.DEVICE, ibStride, ibStride));
            vertexBuffers = [vertexBuffer];
            this._iaInfo = new InputAssemblerInfo(this._attributes, vertexBuffers, indexBuffer);
            ia = device.createInputAssembler(this._iaInfo);
          } else {
            ia = device.createInputAssembler(this._iaInfo);
            vertexBuffers = this._iaInfo.vertexBuffers;
            indexBuffer = this._iaInfo.indexBuffer;
          }

          return {
            ia: ia,
            vertexBuffers: vertexBuffers,
            indexBuffer: indexBuffer
          };
        };

        _createClass(MeshBuffer, [{
          key: "attributes",
          get: function get() {
            return this._attributes;
          }
        }, {
          key: "vertexFormatBytes",
          get: function get() {
            return this._vertexFormatBytes;
          }
        }, {
          key: "byteOffset",
          get: function get() {
            return this._byteOffset;
          },
          set: function set(val) {
            this._byteOffset = val;
          }
        }, {
          key: "vertexOffset",
          get: function get() {
            return this._vertexOffset;
          },
          set: function set(val) {
            this._vertexOffset = val;
          }
        }, {
          key: "indexOffset",
          get: function get() {
            return this._indexOffset;
          },
          set: function set(val) {
            this._indexOffset = val;
          }
        }, {
          key: "dirty",
          get: function get() {
            return this._dirty;
          },
          set: function set(val) {
            this._dirty = val;
          }
        }, {
          key: "floatsPerVertex",
          get: function get() {
            return this._floatsPerVertex;
          },
          set: function set(val) {
            this._floatsPerVertex = val;
          }
        }, {
          key: "vData",
          get: function get() {
            return this._vData;
          },
          set: function set(val) {
            this._vData = val;
          }
        }, {
          key: "iData",
          get: function get() {
            return this._iData;
          },
          set: function set(val) {
            this._iData = val;
          }
        }, {
          key: "nativeObj",
          get: function get() {
            return this._nativeObj;
          }
        }, {
          key: "sharedBuffer",
          get: function get() {
            return this._sharedBuffer;
          }
        }]);

        return MeshBuffer;
      }());

      var BufferAccessor = function () {
        function BufferAccessor(device, attributes) {
          this._device = null;
          this._attributes = null;
          this._vertexFormatBytes = void 0;
          this._floatsPerVertex = void 0;
          this._buffers = [];
          this._device = device;
          this._attributes = attributes;
          this._floatsPerVertex = getAttributeStride(attributes) >> 2;
          this._vertexFormatBytes = this._floatsPerVertex * Float32Array.BYTES_PER_ELEMENT;
        }

        var _proto = BufferAccessor.prototype;

        _proto.initialize = function initialize() {};

        _proto.reset = function reset() {};

        _proto.request = function request(vertexCount, indexCount) {
        };

        _proto.appendBuffers = function appendBuffers(vertices, indices) {};

        _proto.uploadBuffers = function uploadBuffers() {};

        _proto.destroy = function destroy() {
          this._attributes.length = 0;
        };

        _createClass(BufferAccessor, [{
          key: "attributes",
          get: function get() {
            return this._attributes;
          }
        }, {
          key: "vertexFormatBytes",
          get: function get() {
            return this._vertexFormatBytes;
          }
        }, {
          key: "floatsPerVertex",
          get: function get() {
            return this._floatsPerVertex;
          }
        }]);

        return BufferAccessor;
      }();

      var _entryPool = new Pool$1(function () {
        return {
          offset: 0,
          length: 0
        };
      }, 32);

      var StaticVBChunk = function () {
        function StaticVBChunk(vertexAccessor, bufferId, meshBuffer, vertexOffset, vb, indexCount) {
          this._ib = void 0;
          this.vertexAccessor = vertexAccessor;
          this.bufferId = bufferId;
          this.meshBuffer = meshBuffer;
          this.vertexOffset = vertexOffset;
          this.vb = vb;
          this.indexCount = indexCount;
          this._ib = new Uint16Array(indexCount);
          assertIsTrue(meshBuffer === vertexAccessor.getMeshBuffer(bufferId));
        }

        var _proto = StaticVBChunk.prototype;

        _proto.setIndexBuffer = function setIndexBuffer(indices) {
        };

        _createClass(StaticVBChunk, [{
          key: "ib",
          get: function get() {
            return this._ib;
          }
        }]);

        return StaticVBChunk;
      }();
      var StaticVBAccessor = function (_BufferAccessor) {
        _inheritsLoose(StaticVBAccessor, _BufferAccessor);

        function StaticVBAccessor(device, attributes, vCount, iCount) {
          var _this;

          _this = _BufferAccessor.call(this, device, attributes) || this;
          _this._freeLists = [];
          _this._vCount = 0;
          _this._iCount = 0;
          _this._id = 0;
          _this._vCount = vCount || Math.floor(macro.BATCHER2D_MEM_INCREMENT * 1024 / _this._vertexFormatBytes);
          _this._iCount = iCount || _this._vCount * StaticVBAccessor.IB_SCALE;
          _this._id = StaticVBAccessor.generateID();

          _this._allocateBuffer();

          return _this;
        }

        var _proto2 = StaticVBAccessor.prototype;

        _proto2.destroy = function destroy() {
          for (var i = 0; i < this._buffers.length; ++i) {
            this._buffers[i].destroy();

            var freeList = this._freeLists[i];

            for (var j = 0; j < freeList.length; ++j) {
              _entryPool.free(freeList[j]);
            }
          }

          this._buffers.length = 0;
          this._freeLists.length = 0;

          _BufferAccessor.prototype.destroy.call(this);
        };

        _proto2.reset = function reset() {
          for (var i = 0; i < this._buffers.length; ++i) {
            var buffer = this._buffers[i];
            buffer.indexOffset = 0;
            buffer.reset();
          }
        };

        _proto2.getVertexBuffer = function getVertexBuffer(bid) {
          return this._buffers[bid].vData;
        };

        _proto2.getIndexBuffer = function getIndexBuffer(bid) {
          return this._buffers[bid].iData;
        };

        _proto2.getMeshBuffer = function getMeshBuffer(bid) {
          return this._buffers[bid];
        };

        _proto2.uploadBuffers = function uploadBuffers() {
          for (var i = 0; i < this._buffers.length; ++i) {
            var firstEntry = this._freeLists[i][0];
            var buffer = this._buffers[i];

            if (!firstEntry || firstEntry.length < buffer.vData.byteLength) {
              buffer.uploadBuffers();
            }
          }
        };

        _proto2.appendIndices = function appendIndices(bufferId, indices) {
          var buf = this._buffers[bufferId];
          var iCount = indices.length;

          if (iCount) {
            var needLength = buf.indexOffset + indices.length;

            if (buf.iData.length < needLength) {
              var expansionLength = Math.floor(1.25 * needLength);
              var newIData = new Uint16Array(expansionLength);
              newIData.set(buf.iData);
              buf.iData = newIData;
            }

            buf.iData.set(indices, buf.indexOffset);
            buf.indexOffset += indices.length;
          }
        };

        _proto2.allocateChunk = function allocateChunk(vertexCount, indexCount) {
          var byteLength = vertexCount * this.vertexFormatBytes;
          var buf = null;
          var freeList;
          var bid = 0;
          var eid = -1;
          var entry = null;

          for (var i = 0; i < this._buffers.length; ++i) {
            buf = this._buffers[i];
            freeList = this._freeLists[i];

            for (var e = 0; e < freeList.length; ++e) {
              if (freeList[e].length >= byteLength) {
                entry = freeList[e];
                bid = i;
                eid = e;
                break;
              }
            }

            if (entry) break;
          }

          if (!entry) {
            bid = this._allocateBuffer();
            buf = this._buffers[bid];

            if (buf && buf.checkCapacity(vertexCount, indexCount)) {
              eid = 0;
              entry = this._freeLists[bid][eid];
            }
          }

          if (entry) {
            var _vertexOffset = entry.offset / this.vertexFormatBytes;

            assertIsTrue(Number.isInteger(_vertexOffset));

            var _vb = new Float32Array(buf.vData.buffer, entry.offset, byteLength >> 2).fill(0);

            this._allocateChunkFromEntry(bid, eid, entry, byteLength);

            return new StaticVBChunk(this, bid, buf, _vertexOffset, _vb, indexCount);
          } else {
            errorID(9004, byteLength);
            return null;
          }
        };

        _proto2.recycleChunk = function recycleChunk(chunk) {
          var freeList = this._freeLists[chunk.bufferId];
          var buf = this._buffers[chunk.bufferId];
          var offset = chunk.vertexOffset * this.vertexFormatBytes;
          var bytes = chunk.vb.byteLength;
          if (bytes === 0) return;
          var recycled = false;
          var i = 0;
          var prevEntry = null;
          var nextEntry = freeList[i];

          while (nextEntry && nextEntry.offset < offset) {
            prevEntry = nextEntry;
            nextEntry = freeList[++i];
          }

          if (prevEntry) {
            var distance = offset - (prevEntry.offset + prevEntry.length);
            assertIsTrue(distance >= 0);

            if (distance === 0) {
              prevEntry.length += bytes;
              offset = prevEntry.offset;
              bytes = prevEntry.length;

              if (nextEntry && nextEntry.offset - (offset + bytes) === 0) {
                prevEntry.length += nextEntry.length;
                freeList.splice(i, 1);

                _entryPool.free(nextEntry);

                nextEntry = null;
              }

              recycled = true;
            }
          }

          if (!recycled && nextEntry) {
            var _distance = nextEntry.offset - (offset + bytes);

            assertIsTrue(_distance >= 0);

            if (_distance === 0) {
              nextEntry.offset = offset;
              nextEntry.length += bytes;
            } else {
              var newEntry = _entryPool.alloc();

              newEntry.offset = offset;
              newEntry.length = bytes;
              freeList.splice(i, 0, newEntry);
            }

            recycled = true;
          }

          if (recycled) {
            if (offset + bytes === buf.byteOffset) {
              buf.byteOffset = offset;
            }
          } else {
            var _newEntry = _entryPool.alloc();

            _newEntry.offset = offset;
            _newEntry.length = bytes;
            freeList.push(_newEntry);
          }
        };

        _proto2._allocateChunkFromEntry = function _allocateChunkFromEntry(bid, eid, entry, bytes) {
          var remaining = entry.length - bytes;
          var offset = entry.offset + bytes;
          var buf = this._buffers[bid];

          if (buf.byteOffset < offset) {
            buf.byteOffset = offset;
          }

          assertID(remaining >= 0, 9004, bid, entry.offset, entry.length);

          if (remaining === 0) {
            this._freeLists[bid].splice(eid, 1);

            _entryPool.free(entry);
          } else {
            entry.offset += bytes;
            entry.length = remaining;
          }
        };

        _proto2._allocateBuffer = function _allocateBuffer() {
          assertID(this._buffers.length === this._freeLists.length, 9003);
          var buffer = new MeshBuffer();
          var vFloatCount = this._vCount * this._floatsPerVertex;
          buffer.initialize(this._device, this._attributes, vFloatCount, this._iCount);

          this._buffers.push(buffer);

          var entry = _entryPool.alloc();

          entry.offset = 0;
          entry.length = buffer.vData.byteLength;
          var freeList = [entry];

          this._freeLists.push(freeList);

          var batcher = director.root.batcher2D;
          batcher.syncMeshBuffersToNative(this.id, this._buffers);
          return this._buffers.length - 1;
        };

        StaticVBAccessor.generateID = function generateID() {
          return StaticVBAccessor.ID_COUNT++;
        };

        _createClass(StaticVBAccessor, [{
          key: "id",
          get: function get() {
            return this._id;
          }
        }]);

        return StaticVBAccessor;
      }(BufferAccessor);
      StaticVBAccessor.IB_SCALE = 4;
      StaticVBAccessor.ID_COUNT = 0;

      var AttrUInt8ArrayView;

      (function (AttrUInt8ArrayView) {
        AttrUInt8ArrayView[AttrUInt8ArrayView["DrawInfoType"] = 0] = "DrawInfoType";
        AttrUInt8ArrayView[AttrUInt8ArrayView["VertDirty"] = 1] = "VertDirty";
        AttrUInt8ArrayView[AttrUInt8ArrayView["IsMeshBuffer"] = 2] = "IsMeshBuffer";
        AttrUInt8ArrayView[AttrUInt8ArrayView["Stride"] = 3] = "Stride";
        AttrUInt8ArrayView[AttrUInt8ArrayView["Count"] = 4] = "Count";
      })(AttrUInt8ArrayView || (AttrUInt8ArrayView = {}));

      var AttrUInt16ArrayView;

      (function (AttrUInt16ArrayView) {
        AttrUInt16ArrayView[AttrUInt16ArrayView["BufferID"] = 0] = "BufferID";
        AttrUInt16ArrayView[AttrUInt16ArrayView["AccessorID"] = 1] = "AccessorID";
        AttrUInt16ArrayView[AttrUInt16ArrayView["Count"] = 2] = "Count";
      })(AttrUInt16ArrayView || (AttrUInt16ArrayView = {}));

      var AttrUInt32ArrayView;

      (function (AttrUInt32ArrayView) {
        AttrUInt32ArrayView[AttrUInt32ArrayView["VertexOffset"] = 0] = "VertexOffset";
        AttrUInt32ArrayView[AttrUInt32ArrayView["IndexOffset"] = 1] = "IndexOffset";
        AttrUInt32ArrayView[AttrUInt32ArrayView["VBCount"] = 2] = "VBCount";
        AttrUInt32ArrayView[AttrUInt32ArrayView["IBCount"] = 3] = "IBCount";
        AttrUInt32ArrayView[AttrUInt32ArrayView["DataHash"] = 4] = "DataHash";
        AttrUInt32ArrayView[AttrUInt32ArrayView["Count"] = 5] = "Count";
      })(AttrUInt32ArrayView || (AttrUInt32ArrayView = {}));

      var RenderDrawInfoType;

      (function (RenderDrawInfoType) {
        RenderDrawInfoType[RenderDrawInfoType["COMP"] = 0] = "COMP";
        RenderDrawInfoType[RenderDrawInfoType["MODEL"] = 1] = "MODEL";
        RenderDrawInfoType[RenderDrawInfoType["MIDDLEWARE"] = 2] = "MIDDLEWARE";
        RenderDrawInfoType[RenderDrawInfoType["SUB_NODE"] = 3] = "SUB_NODE";
      })(RenderDrawInfoType || (RenderDrawInfoType = {}));

      var RenderDrawInfo = function () {
        function RenderDrawInfo(nativeDrawInfo) {
          this._accId = -1;
          this._bufferId = -1;
          this._vertexOffset = 0;
          this._indexOffset = 0;
          this._vb = null;
          this._ib = null;
          this._vData = null;
          this._iData = null;
          this._vertDirty = false;
          this._vbCount = 0;
          this._ibCount = 0;
          this._dataHash = 0;
          this._isMeshBuffer = false;
          this._material = null;
          this._texture = null;
          this._sampler = null;
          this._stride = 0;
          this._useLocal = false;
          this._model = null;
          this._drawInfoType = RenderDrawInfoType.COMP;
          this._subNode = null;
          this._uint8SharedBuffer = void 0;
          this._uint16SharedBuffer = void 0;
          this._uint32SharedBuffer = void 0;
          this.init(nativeDrawInfo);

          var attrSharedBuffer = this._nativeObj.getAttrSharedBufferForJS();

          var offset = 0;
          this._uint8SharedBuffer = new Uint8Array(attrSharedBuffer, offset, AttrUInt8ArrayView.Count);
          offset += AttrUInt8ArrayView.Count * Uint8Array.BYTES_PER_ELEMENT;
          this._uint16SharedBuffer = new Uint16Array(attrSharedBuffer, offset, AttrUInt16ArrayView.Count);
          offset += AttrUInt16ArrayView.Count * Uint16Array.BYTES_PER_ELEMENT;
          this._uint32SharedBuffer = new Uint32Array(attrSharedBuffer, offset, AttrUInt32ArrayView.Count);
        }

        var _proto = RenderDrawInfo.prototype;

        _proto.init = function init(nativeDrawInfo) {
        };

        _proto.clear = function clear() {
          this._bufferId = 0;
          this._vertexOffset = 0;
          this._indexOffset = 0;
          this._vertDirty = false;
        };

        _proto.setAccId = function setAccId(accId) {

          this._accId = accId;
        };

        _proto.setBufferId = function setBufferId(bufferId) {

          this._bufferId = bufferId;
        };

        _proto.setAccAndBuffer = function setAccAndBuffer(accId, bufferId) {

          this._bufferId = bufferId;
          this._accId = accId;
        };

        _proto.setVertexOffset = function setVertexOffset(vertexOffset) {
          this._vertexOffset = vertexOffset;
        };

        _proto.setIndexOffset = function setIndexOffset(indexOffset) {
          this._indexOffset = indexOffset;
        };

        _proto.setVB = function setVB(vbBuffer) {
        };

        _proto.setIB = function setIB(ibBuffer) {
        };

        _proto.setVData = function setVData(vDataBuffer) {
        };

        _proto.setIData = function setIData(iDataBuffer) {
        };

        _proto.setVBCount = function setVBCount(vbCount) {

          this._vbCount = vbCount;
        };

        _proto.setIBCount = function setIBCount(ibCount) {
        };

        _proto.setVertDirty = function setVertDirty(val) {

          this._vertDirty = val;
        };

        _proto.setDataHash = function setDataHash(dataHash) {

          this._dataHash = dataHash;
        };

        _proto.setIsMeshBuffer = function setIsMeshBuffer(isMeshBuffer) {

          this._isMeshBuffer = isMeshBuffer;
        };

        _proto.setMaterial = function setMaterial(material) {

          this._material = material;
        };

        _proto.setTexture = function setTexture(texture) {

          this._texture = texture;
        };

        _proto.setSampler = function setSampler(sampler) {

          this._sampler = sampler;
        };

        _proto.setModel = function setModel(model) {
        };

        _proto.setDrawInfoType = function setDrawInfoType(drawInfoType) {

          this._drawInfoType = drawInfoType;
        };

        _proto.setSubNode = function setSubNode(node) {

          this._subNode = node;
        };

        _proto.setStride = function setStride(stride) {

          this._stride = stride;
        };

        _proto.initRender2dBuffer = function initRender2dBuffer() {
        };

        _proto.fillRender2dBuffer = function fillRender2dBuffer(vertexDataArr) {
        };

        _createClass(RenderDrawInfo, [{
          key: "nativeObj",
          get: function get() {
            return this._nativeObj;
          }
        }, {
          key: "render2dBuffer",
          get: function get() {
            return this._render2dBuffer;
          }
        }]);

        return RenderDrawInfo;
      }();

      var Stage;

      (function (Stage) {
        Stage[Stage["DISABLED"] = 0] = "DISABLED";
        Stage[Stage["CLEAR"] = 1] = "CLEAR";
        Stage[Stage["ENTER_LEVEL"] = 2] = "ENTER_LEVEL";
        Stage[Stage["ENABLED"] = 3] = "ENABLED";
        Stage[Stage["EXIT_LEVEL"] = 4] = "EXIT_LEVEL";
        Stage[Stage["CLEAR_INVERTED"] = 5] = "CLEAR_INVERTED";
        Stage[Stage["ENTER_LEVEL_INVERTED"] = 6] = "ENTER_LEVEL_INVERTED";
      })(Stage || (Stage = {}));

      var StencilSharedBufferView;

      (function (StencilSharedBufferView) {
        StencilSharedBufferView[StencilSharedBufferView["stencilTest"] = 0] = "stencilTest";
        StencilSharedBufferView[StencilSharedBufferView["func"] = 1] = "func";
        StencilSharedBufferView[StencilSharedBufferView["stencilMask"] = 2] = "stencilMask";
        StencilSharedBufferView[StencilSharedBufferView["writeMask"] = 3] = "writeMask";
        StencilSharedBufferView[StencilSharedBufferView["failOp"] = 4] = "failOp";
        StencilSharedBufferView[StencilSharedBufferView["zFailOp"] = 5] = "zFailOp";
        StencilSharedBufferView[StencilSharedBufferView["passOp"] = 6] = "passOp";
        StencilSharedBufferView[StencilSharedBufferView["ref"] = 7] = "ref";
        StencilSharedBufferView[StencilSharedBufferView["count"] = 8] = "count";
      })(StencilSharedBufferView || (StencilSharedBufferView = {}));

      var StencilManager = exports('StencilManager', function () {
        function StencilManager() {
          this._maskStack = [];
          this._stencilPattern = {
            stencilTest: true,
            func: ComparisonFunc.ALWAYS,
            stencilMask: 0xffff,
            writeMask: 0xffff,
            failOp: StencilOp.KEEP,
            zFailOp: StencilOp.KEEP,
            passOp: StencilOp.KEEP,
            ref: 1
          };
          this._stage = Stage.DISABLED;
          this.stencilStateMap = new Map();
          this.stencilStateMapWithDepth = new Map();
        }

        var _proto = StencilManager.prototype;

        _proto.pushMask = function pushMask(mask) {
          this._maskStack.push(mask);
        };

        _proto.clear = function clear(comp) {
          var isInverted = comp.stencilStage !== Stage.ENTER_LEVEL;
          return isInverted ? Stage.CLEAR_INVERTED : Stage.CLEAR;
        };

        _proto.enableMask = function enableMask() {
          this.stage = Stage.ENABLED;
        };

        _proto.exitMask = function exitMask() {
          if (this._maskStack.length === 0) {
            return;
          }

          this._maskStack.pop();

          if (this._maskStack.length === 0) {
            this.stage = Stage.DISABLED;
          } else {
            this.stage = Stage.ENABLED;
          }
        };

        _proto.getWriteMask = function getWriteMask() {
          return 1 << this._maskStack.length - 1;
        };

        _proto.getExitWriteMask = function getExitWriteMask() {
          return 1 << this._maskStack.length;
        };

        _proto.getStencilRef = function getStencilRef() {
          var result = 0;

          for (var i = 0; i < this._maskStack.length; ++i) {
            result += 0x00000001 << i;
          }

          return result;
        };

        _proto.getMaskStackSize = function getMaskStackSize() {
          return this._maskStack.length;
        };

        _proto.reset = function reset() {
          this._maskStack.length = 0;
          this.stage = Stage.DISABLED;
        };

        _proto.destroy = function destroy() {
          this.stencilStateMap.forEach(function (value, key) {
            value.destroy();
          });
          this.stencilStateMap.clear();
        };

        _proto.getStencilStage = function getStencilStage(stage, mat) {
          var key = 0;
          var depthTest = false;
          var depthWrite = false;
          var depthFunc = ComparisonFunc.LESS;
          var cacheMap = this.stencilStateMap;

          if (mat && mat.passes[0]) {
            var pass = mat.passes[0];
            var dss = pass.depthStencilState;
            var depthTestValue = 0;
            var depthWriteValue = 0;
            if (dss.depthTest) depthTestValue = 1;
            if (dss.depthWrite) depthWriteValue = 1;
            key = depthTestValue | depthWriteValue << 1 | dss.depthFunc << 2 | stage << 6 | this._maskStack.length << 9;
            depthTest = dss.depthTest;
            depthWrite = dss.depthWrite;
            depthFunc = dss.depthFunc;
            cacheMap = this.stencilStateMapWithDepth;
          } else {
            key = stage << 16 | this._maskStack.length;
          }

          if (cacheMap && cacheMap.has(key)) {
            return cacheMap.get(key);
          }

          this.setStateFromStage(stage);
          var depthStencilState = new DepthStencilState(depthTest, depthWrite, depthFunc, this._stencilPattern.stencilTest, this._stencilPattern.func, this._stencilPattern.stencilMask, this._stencilPattern.writeMask, this._stencilPattern.failOp, this._stencilPattern.zFailOp, this._stencilPattern.passOp, this._stencilPattern.ref, this._stencilPattern.stencilTest, this._stencilPattern.func, this._stencilPattern.stencilMask, this._stencilPattern.writeMask, this._stencilPattern.failOp, this._stencilPattern.zFailOp, this._stencilPattern.passOp, this._stencilPattern.ref);
          cacheMap.set(key, depthStencilState);
          return depthStencilState;
        };

        _proto.getStencilHash = function getStencilHash(stage) {
          return stage << 8 | this._maskStack.length;
        };

        _proto.setStateFromStage = function setStateFromStage(stage) {
          var pattern = this._stencilPattern;

          if (stage === Stage.DISABLED) {
            pattern.stencilTest = false;
            pattern.func = ComparisonFunc.ALWAYS;
            pattern.failOp = StencilOp.KEEP;
            pattern.stencilMask = pattern.writeMask = 0xffff;
            pattern.ref = 1;
          } else {
            pattern.stencilTest = true;

            if (stage === Stage.ENABLED) {
              pattern.func = ComparisonFunc.EQUAL;
              pattern.failOp = StencilOp.KEEP;
              pattern.stencilMask = pattern.ref = this.getStencilRef();
              pattern.writeMask = this.getWriteMask();
            } else if (stage === Stage.CLEAR) {
              pattern.func = ComparisonFunc.NEVER;
              pattern.failOp = StencilOp.ZERO;
              pattern.writeMask = pattern.stencilMask = pattern.ref = this.getWriteMask();
            } else if (stage === Stage.CLEAR_INVERTED) {
              pattern.func = ComparisonFunc.NEVER;
              pattern.failOp = StencilOp.REPLACE;
              pattern.writeMask = pattern.stencilMask = pattern.ref = this.getWriteMask();
            } else if (stage === Stage.ENTER_LEVEL) {
              pattern.func = ComparisonFunc.NEVER;
              pattern.failOp = StencilOp.REPLACE;
              pattern.writeMask = pattern.stencilMask = pattern.ref = this.getWriteMask();
            } else if (stage === Stage.ENTER_LEVEL_INVERTED) {
              pattern.func = ComparisonFunc.NEVER;
              pattern.failOp = StencilOp.ZERO;
              pattern.writeMask = pattern.stencilMask = pattern.ref = this.getWriteMask();
            }
          }
        };

        _createClass(StencilManager, [{
          key: "stage",
          get: function get() {
            return this._stage;
          },
          set: function set(val) {
            this._stage = val;
          }
        }, {
          key: "pattern",
          get: function get() {
            return this._stencilPattern;
          }
        }]);

        return StencilManager;
      }());
      StencilManager.sharedManager = null;
      StencilManager.sharedManager = new StencilManager();

      var RenderEntityType;

      (function (RenderEntityType) {
        RenderEntityType[RenderEntityType["STATIC"] = 0] = "STATIC";
        RenderEntityType[RenderEntityType["DYNAMIC"] = 1] = "DYNAMIC";
        RenderEntityType[RenderEntityType["CROSSED"] = 2] = "CROSSED";
      })(RenderEntityType || (RenderEntityType = {}));

      var RenderEntityFloatSharedBufferView;

      (function (RenderEntityFloatSharedBufferView) {
        RenderEntityFloatSharedBufferView[RenderEntityFloatSharedBufferView["localOpacity"] = 0] = "localOpacity";
        RenderEntityFloatSharedBufferView[RenderEntityFloatSharedBufferView["count"] = 1] = "count";
      })(RenderEntityFloatSharedBufferView || (RenderEntityFloatSharedBufferView = {}));

      var RenderEntityUInt8SharedBufferView;

      (function (RenderEntityUInt8SharedBufferView) {
        RenderEntityUInt8SharedBufferView[RenderEntityUInt8SharedBufferView["colorR"] = 0] = "colorR";
        RenderEntityUInt8SharedBufferView[RenderEntityUInt8SharedBufferView["colorG"] = 1] = "colorG";
        RenderEntityUInt8SharedBufferView[RenderEntityUInt8SharedBufferView["colorB"] = 2] = "colorB";
        RenderEntityUInt8SharedBufferView[RenderEntityUInt8SharedBufferView["colorA"] = 3] = "colorA";
        RenderEntityUInt8SharedBufferView[RenderEntityUInt8SharedBufferView["maskMode"] = 4] = "maskMode";
        RenderEntityUInt8SharedBufferView[RenderEntityUInt8SharedBufferView["count"] = 5] = "count";
      })(RenderEntityUInt8SharedBufferView || (RenderEntityUInt8SharedBufferView = {}));

      var RenderEntityBoolSharedBufferView;

      (function (RenderEntityBoolSharedBufferView) {
        RenderEntityBoolSharedBufferView[RenderEntityBoolSharedBufferView["colorDirty"] = 0] = "colorDirty";
        RenderEntityBoolSharedBufferView[RenderEntityBoolSharedBufferView["enabled"] = 1] = "enabled";
        RenderEntityBoolSharedBufferView[RenderEntityBoolSharedBufferView["useLocal"] = 2] = "useLocal";
        RenderEntityBoolSharedBufferView[RenderEntityBoolSharedBufferView["count"] = 3] = "count";
      })(RenderEntityBoolSharedBufferView || (RenderEntityBoolSharedBufferView = {}));

      var MaskMode;

      (function (MaskMode) {
        MaskMode[MaskMode["NONE"] = 0] = "NONE";
        MaskMode[MaskMode["MASK"] = 1] = "MASK";
        MaskMode[MaskMode["MASK_INVERTED"] = 2] = "MASK_INVERTED";
        MaskMode[MaskMode["MASK_NODE"] = 3] = "MASK_NODE";
        MaskMode[MaskMode["MASK_NODE_INVERTED"] = 4] = "MASK_NODE_INVERTED";
      })(MaskMode || (MaskMode = {}));

      var RenderEntity = function () {
        function RenderEntity(entityType) {
          this._renderEntityType = RenderEntityType.STATIC;
          this._dynamicDrawInfoArr = [];
          this._node = null;
          this._renderTransform = null;
          this._stencilStage = Stage.DISABLED;
          this._useLocal = false;
          this._maskMode = MaskMode.NONE;
          this._color = Color.WHITE;
          this._localOpacity = 255;
          this._colorDirty = true;
          this._enabled = false;
        }

        var _proto = RenderEntity.prototype;

        _proto.addDynamicRenderDrawInfo = function addDynamicRenderDrawInfo(renderDrawInfo) {
        };

        _proto.removeDynamicRenderDrawInfo = function removeDynamicRenderDrawInfo() {
        };

        _proto.clearDynamicRenderDrawInfos = function clearDynamicRenderDrawInfos() {
        };

        _proto.clearStaticRenderDrawInfos = function clearStaticRenderDrawInfos() {
        };

        _proto.setDynamicRenderDrawInfo = function setDynamicRenderDrawInfo(renderDrawInfo, index) {
        };

        _proto.setMaskMode = function setMaskMode(mode) {

          this._maskMode = mode;
        };

        _proto.getStaticRenderDrawInfo = function getStaticRenderDrawInfo() {

          return null;
        };

        _proto.setNode = function setNode(node) {

          this._node = node;
        };

        _proto.setRenderTransform = function setRenderTransform(renderTransform) {

          this._renderTransform = renderTransform;
        };

        _proto.setStencilStage = function setStencilStage(stage) {

          this._stencilStage = stage;
        };

        _proto.setUseLocal = function setUseLocal(useLocal) {

          this._useLocal = useLocal;
        };

        _proto.initSharedBuffer = function initSharedBuffer() {
        };

        _createClass(RenderEntity, [{
          key: "nativeObj",
          get: function get() {
            return this._nativeObj;
          }
        }, {
          key: "renderDrawInfoArr",
          get: function get() {
            return this._dynamicDrawInfoArr;
          }
        }, {
          key: "renderEntityType",
          get: function get() {
            return this._renderEntityType;
          }
        }, {
          key: "color",
          get: function get() {
            return this._color;
          },
          set: function set(val) {
            this._color = val;
          }
        }, {
          key: "localOpacity",
          get: function get() {
            return this._localOpacity;
          },
          set: function set(val) {
            this._localOpacity = val;
          }
        }, {
          key: "colorDirty",
          get: function get() {
            return this._colorDirty;
          },
          set: function set(val) {
            this._colorDirty = val;
          }
        }, {
          key: "enabled",
          get: function get() {
            return this._enabled;
          },
          set: function set(val) {
            this._enabled = val;
          }
        }]);

        return RenderEntity;
      }();

      var DEFAULT_STRIDE = getAttributeStride(vfmtPosUvColor) >> 2;

      var _dataPool = new Pool$1(function () {
        return {
          x: 0,
          y: 0,
          z: 0,
          u: 0,
          v: 0,
          color: Color.WHITE.clone()
        };
      }, 128);
      var BaseRenderData = exports('BaseRenderData', function () {
        function BaseRenderData(vertexFormat) {
          if (vertexFormat === void 0) {
            vertexFormat = vfmtPosUvColor;
          }

          this.chunk = null;
          this._renderDrawInfo = null;
          this._material = null;
          this._dataHash = 0;
          this._isMeshBuffer = false;
          this._vc = 0;
          this._ic = 0;
          this._floatStride = 0;
          this._vertexFormat = vfmtPosUvColor;
          this._drawInfoType = RenderDrawInfoType.COMP;
          this._multiOwner = false;
          this._batcher = null;
          this._floatStride = vertexFormat === vfmtPosUvColor ? DEFAULT_STRIDE : getAttributeStride(vertexFormat) >> 2;
          this._vertexFormat = vertexFormat;
        }

        var _proto = BaseRenderData.prototype;

        _proto.isValid = function isValid() {
          return this._ic > 0 && this.chunk.vertexAccessor;
        };

        _proto.initRenderDrawInfo = function initRenderDrawInfo(comp, drawInfoType) {
          if (drawInfoType === void 0) {
            drawInfoType = RenderDrawInfoType.COMP;
          }
        };

        _proto.removeRenderDrawInfo = function removeRenderDrawInfo(comp) {
        };

        _proto.setRenderDrawInfoAttributes = function setRenderDrawInfoAttributes() {
        };

        _createClass(BaseRenderData, [{
          key: "vertexCount",
          get: function get() {
            return this._vc;
          }
        }, {
          key: "indexCount",
          get: function get() {
            return this._ic;
          }
        }, {
          key: "stride",
          get: function get() {
            return this._floatStride << 2;
          }
        }, {
          key: "floatStride",
          get: function get() {
            return this._floatStride;
          }
        }, {
          key: "vertexFormat",
          get: function get() {
            return this._vertexFormat;
          }
        }, {
          key: "drawInfoType",
          get: function get() {
            return this._drawInfoType;
          },
          set: function set(type) {
            this._drawInfoType = type;

            if (this._renderDrawInfo) {
              this._renderDrawInfo.setDrawInfoType(type);
            }
          }
        }, {
          key: "renderDrawInfo",
          get: function get() {
            return this._renderDrawInfo;
          }
        }, {
          key: "material",
          get: function get() {
            return this._material;
          },
          set: function set(val) {
            this._material = val;

            if (this._renderDrawInfo) {
              this._renderDrawInfo.setMaterial(val);
            }
          }
        }, {
          key: "dataHash",
          get: function get() {
            return this._dataHash;
          },
          set: function set(val) {
            this._dataHash = val;

            if (this._renderDrawInfo) {
              this._renderDrawInfo.setDataHash(val);
            }
          }
        }, {
          key: "multiOwner",
          get: function get() {
            return this._multiOwner;
          },
          set: function set(val) {
            this._multiOwner = val;
          }
        }, {
          key: "batcher",
          get: function get() {
            if (!this._batcher) {
              this._batcher = director.root.batcher2D;
            }

            return this._batcher;
          }
        }]);

        return BaseRenderData;
      }());
      var RenderData = exports('RenderData', function (_BaseRenderData) {
        _inheritsLoose(RenderData, _BaseRenderData);

        RenderData.add = function add(vertexFormat, accessor) {
          if (vertexFormat === void 0) {
            vertexFormat = vfmtPosUvColor;
          }

          var rd = new RenderData(vertexFormat, accessor);

          if (!accessor) {
            var batcher = director.root.batcher2D;
            accessor = batcher.switchBufferAccessor(rd._vertexFormat);
          }

          rd._accessor = accessor;
          return rd;
        };

        RenderData.remove = function remove(data) {
          data.clear();
          data._accessor = null;
        };

        function RenderData(vertexFormat, accessor) {
          var _this;

          if (vertexFormat === void 0) {
            vertexFormat = vfmtPosUvColor;
          }

          _this = _BaseRenderData.call(this, vertexFormat) || this;
          _this._vertDirty = true;
          _this._textureHash = 0;
          _this.indices = null;
          _this.layer = 0;
          _this.nodeDirty = true;
          _this.passDirty = true;
          _this.textureDirty = true;
          _this.hashDirty = true;
          _this._data = [];
          _this._pivotX = 0;
          _this._pivotY = 0;
          _this._width = 0;
          _this._height = 0;
          _this._frame = null;
          _this._accessor = null;
          _this.vertexRow = 1;
          _this.vertexCol = 1;

          if (!accessor) {
            accessor = _this.batcher.switchBufferAccessor(_this._vertexFormat);
          }

          _this._accessor = accessor;
          return _this;
        }

        var _proto2 = RenderData.prototype;

        _proto2.resize = function resize(vertexCount, indexCount) {
          if (vertexCount === this._vc && indexCount === this._ic && this.chunk) return;
          this._vc = vertexCount;
          this._ic = indexCount;

          if (this.chunk) {
            this._accessor.recycleChunk(this.chunk);

            this.chunk = null;
          }

          this.chunk = this._accessor.allocateChunk(vertexCount, indexCount);
          this.updateHash();
        };

        _proto2.setRenderDrawInfoAttributes = function setRenderDrawInfoAttributes() {
        };

        _proto2.fillDrawInfoAttributes = function fillDrawInfoAttributes(drawInfo) {
        };

        _proto2.syncRender2dBuffer = function syncRender2dBuffer() {
        };

        _proto2.resizeAndCopy = function resizeAndCopy(vertexCount, indexCount) {
          if (vertexCount === this._vc && indexCount === this._ic && this.chunk) return;
          this._vc = vertexCount;
          this._ic = indexCount;
          var oldChunk = this.chunk;
          this.chunk = this._accessor.allocateChunk(vertexCount, indexCount);

          if (oldChunk) {
            this.chunk.vb.set(oldChunk.vb);

            this._accessor.recycleChunk(oldChunk);
          }

          this.updateHash();
        };

        _proto2.getMeshBuffer = function getMeshBuffer() {
          if (this.chunk && this._accessor) {
            return this._accessor.getMeshBuffer(this.chunk.bufferId);
          } else {
            return null;
          }
        };

        _proto2.updateNode = function updateNode(comp) {
          this.layer = comp.node.layer;
          this.nodeDirty = false;
          this.hashDirty = true;
        };

        _proto2.updatePass = function updatePass(comp) {
          this.material = comp.getRenderMaterial(0);
          this.passDirty = false;
          this.hashDirty = true;
        };

        _proto2.updateTexture = function updateTexture(frame) {
          this.frame = frame;
          this.textureHash = frame.getHash();
          this.textureDirty = false;
          this.hashDirty = true;
        };

        _proto2.updateHash = function updateHash() {
          var bid = this.chunk ? this.chunk.bufferId : -1;
          var hashString = "" + bid + this.layer + " " + this.textureHash;
          this.dataHash = murmurhash2_32_gc(hashString, 666);
          this.hashDirty = false;
        };

        _proto2.updateRenderData = function updateRenderData(comp, frame) {
          if (this.passDirty) {
            this.material = comp.getRenderMaterial(0);
            this.passDirty = false;
            this.hashDirty = true;

            if (this._renderDrawInfo) {
              this._renderDrawInfo.setMaterial(this.material);
            }
          }

          if (this.nodeDirty) {
            var renderScene = comp.node.scene ? comp._getRenderScene() : null;
            this.layer = comp.node.layer;

            if (renderScene !== null) {
              this.nodeDirty = false;
            }

            this.hashDirty = true;
          }

          if (this.textureDirty) {
            this.frame = frame;
            this.textureHash = frame.getHash();
            this.textureDirty = false;
            this.hashDirty = true;

            if (this._renderDrawInfo) {
              this._renderDrawInfo.setTexture(this.frame ? this.frame.getGFXTexture() : null);

              this._renderDrawInfo.setSampler(this.frame ? this.frame.getGFXSampler() : null);
            }
          }

          if (this.hashDirty) {
            this.updateHash();

            if (this._renderDrawInfo) {
              this._renderDrawInfo.setDataHash(this.dataHash);
            }
          }
        };

        _proto2.updateSizeNPivot = function updateSizeNPivot(width, height, pivotX, pivotY) {
          if (width !== this._width || height !== this._height || pivotX !== this._pivotX || pivotY !== this._pivotY) {
            this._width = width;
            this._height = height;
            this._pivotX = pivotX;
            this._pivotY = pivotY;
            this.vertDirty = true;
          }
        };

        _proto2.clear = function clear() {
          this.resize(0, 0);
          this._data.length = 0;
          this._pivotX = 0;
          this._pivotY = 0;
          this._width = 0;
          this._height = 0;
          this.indices = null;
          this.vertDirty = true;
          this.material = null;
          this.nodeDirty = true;
          this.passDirty = true;
          this.textureDirty = true;
          this.hashDirty = true;
          this.layer = 0;
          this.frame = null;
          this.textureHash = 0;
          this.dataHash = 0;
        };

        RenderData.createStaticVBAccessor = function createStaticVBAccessor(attributes, vCount, iCount) {
          var device = director.root.device;
          var accessor = new StaticVBAccessor(device, attributes, vCount, iCount);
          return accessor;
        };

        _createClass(RenderData, [{
          key: "dataLength",
          get: function get() {
            return this._data.length;
          },
          set: function set(length) {
            var data = this._data;

            if (data.length !== length) {
              var value = data.length;
              var i = 0;

              for (i = length; i < value; i++) {
                _dataPool.free(data[i]);
              }

              for (i = value; i < length; i++) {
                data[i] = _dataPool.alloc();
              }

              data.length = length;
            }

            this.syncRender2dBuffer();
          }
        }, {
          key: "data",
          get: function get() {
            return this._data;
          }
        }, {
          key: "vertDirty",
          get: function get() {
            return this._vertDirty;
          },
          set: function set(val) {
            this._vertDirty = val;

            if (this._renderDrawInfo && val) {
              this._renderDrawInfo.setVertDirty(val);
            }
          }
        }, {
          key: "textureHash",
          get: function get() {
            return this._textureHash;
          },
          set: function set(val) {
            this._textureHash = val;
          }
        }, {
          key: "frame",
          get: function get() {
            return this._frame;
          },
          set: function set(val) {
            this._frame = val;

            if (this._renderDrawInfo) {
              if (this._frame) {
                this._renderDrawInfo.setTexture(this._frame.getGFXTexture());

                this._renderDrawInfo.setSampler(this._frame.getGFXSampler());
              } else {
                this._renderDrawInfo.setTexture(null);

                this._renderDrawInfo.setSampler(null);
              }
            }
          }
        }, {
          key: "accessor",
          get: function get() {
            return this._accessor;
          }
        }]);

        return RenderData;
      }(BaseRenderData));
      var MeshRenderData = exports('MeshRenderData', function (_BaseRenderData2) {
        _inheritsLoose(MeshRenderData, _BaseRenderData2);

        MeshRenderData.add = function add(vertexFormat) {
          if (vertexFormat === void 0) {
            vertexFormat = vfmtPosUvColor;
          }

          var rd = new MeshRenderData();
          rd._floatStride = vertexFormat === vfmtPosUvColor ? DEFAULT_STRIDE : getAttributeStride(vertexFormat) >> 2;
          rd._vertexFormat = vertexFormat;
          return rd;
        };

        MeshRenderData.remove = function remove(data) {
          data.clear();
        };

        function MeshRenderData(vertexFormat) {
          var _this2;

          if (vertexFormat === void 0) {
            vertexFormat = vfmtPosUvColor;
          }

          _this2 = _BaseRenderData2.call(this, vertexFormat) || this;
          _this2._isMeshBuffer = true;
          _this2.vData = void 0;
          _this2.iData = void 0;
          _this2.vertexStart = 0;
          _this2.vertexRange = 0;
          _this2.indexStart = 0;
          _this2.indexRange = 0;
          _this2.lastFilledIndex = 0;
          _this2.lastFilledVertex = 0;
          _this2.frame = void 0;
          _this2._byteLength = 0;
          _this2._vertexBuffers = [];
          _this2._indexBuffer = null;
          _this2._iaPool = null;
          _this2._iaInfo = null;
          _this2.vData = new Float32Array(256 * _this2.stride);
          _this2.iData = new Uint16Array(256 * 6);
          return _this2;
        }

        var _proto3 = MeshRenderData.prototype;

        _proto3.request = function request(vertexCount, indexCount) {
          var byteOffset = this._byteLength + vertexCount * this.stride;
          var succeed = this.reserve(vertexCount, indexCount);
          if (!succeed) return false;
          this._vc += vertexCount;
          this._ic += indexCount;
          this._byteLength = byteOffset;
          this.vertexRange = this._vc;
          this.indexRange = this._ic;
          return true;
        };

        _proto3.reserve = function reserve(vertexCount, indexCount) {
          var newVBytes = this._byteLength + vertexCount * this.stride;
          var newICount = this.indexCount + indexCount;

          if (vertexCount + this.vertexCount > 65535) {
            return false;
          }

          var byteLength = this.vData.byteLength;
          var indicesLength = this.iData.length;
          var vCount = this.vData.length;
          var iCount = this.iData.length;

          if (newVBytes > byteLength || newICount > indicesLength) {
            while (byteLength < newVBytes || indicesLength < newICount) {
              vCount *= 2;
              iCount *= 2;
              byteLength = vCount * 4;
              indicesLength = iCount;
            }

            this._reallocBuffer(vCount, iCount);
          }

          return true;
        };

        _proto3.resize = function resize(vertexCount, indexCount) {
          var byteLength = vertexCount * this.stride;
          assertIsTrue(vertexCount >= 0 && indexCount >= 0 && byteLength <= this.vData.byteLength && indexCount <= this.iData.length);
          this._vc = vertexCount;
          this._ic = indexCount;
          this._byteLength = byteLength;
          this.updateRange(0, vertexCount, 0, indexCount);
        };

        _proto3.updateRange = function updateRange(vertOffset, vertexCount, indexOffset, indexCount) {
          assertIsTrue(vertexCount >= 0 && indexCount >= 0 && vertexCount <= this._vc && indexCount <= this._ic);
          this.vertexStart = vertOffset;
          this.indexStart = indexOffset;
          this.vertexRange = vertexCount;
          this.indexRange = indexCount;
        };

        _proto3.requestIA = function requestIA(device) {
          this._initIAInfo(device);

          var ia = this._iaPool.add();

          ia.firstIndex = this.indexStart;
          ia.indexCount = this.indexRange;
          return ia;
        };

        _proto3.uploadBuffers = function uploadBuffers() {
          if (this._byteLength === 0 || !this._vertexBuffers[0] || !this._indexBuffer) {
            return;
          }

          var indexCount = this._ic;
          var verticesData = new Float32Array(this.vData.buffer, 0, this._byteLength >> 2);
          var indicesData = new Uint16Array(this.iData.buffer, 0, indexCount);
          var vertexBuffer = this._vertexBuffers[0];

          if (this._byteLength > vertexBuffer.size) {
            vertexBuffer.resize(this._byteLength);
          }

          vertexBuffer.update(verticesData);
          var indexBytes = indexCount << 1;

          if (indexBytes > this._indexBuffer.size) {
            this._indexBuffer.resize(indexBytes);
          }

          this._indexBuffer.update(indicesData);
        };

        _proto3.freeIAPool = function freeIAPool() {
          if (this._iaPool) {
            this._iaPool.reset();
          }
        };

        _proto3.reset = function reset() {
          this._vc = 0;
          this._ic = 0;
          this._byteLength = 0;
          this.vertexStart = 0;
          this.vertexRange = 0;
          this.indexStart = 0;
          this.indexRange = 0;
          this.lastFilledIndex = 0;
          this.lastFilledVertex = 0;
          this.material = null;
          this.freeIAPool();
        };

        _proto3.clear = function clear() {
          this.reset();

          if (this._iaPool) {
            this._iaPool.destroy();
          }

          if (this._vertexBuffers[0]) {
            this._vertexBuffers[0].destroy();

            this._vertexBuffers = [];
          }

          this._iaInfo = null;
          this.vData = new Float32Array(256 * this.stride);
          this.iData = new Uint16Array(256 * 6);
        };

        _proto3._initIAInfo = function _initIAInfo(device) {
          var _this3 = this;

          if (!this._iaInfo) {
            var vbStride = this.stride;
            var vbs = this._vertexBuffers;

            if (!vbs.length) {
              vbs.push(device.createBuffer(new BufferInfo(BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, vbStride, vbStride)));
            }

            var ibStride = Uint16Array.BYTES_PER_ELEMENT;

            if (!this._indexBuffer) {
              this._indexBuffer = device.createBuffer(new BufferInfo(BufferUsageBit.INDEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, ibStride, ibStride));
            }

            this._iaInfo = new InputAssemblerInfo(this._vertexFormat, vbs, this._indexBuffer);
            this._iaPool = new RecyclePool(function () {
              return device.createInputAssembler(_this3._iaInfo);
            }, 1, function (ia) {
              ia.destroy();
            });
          }
        };

        _proto3._reallocBuffer = function _reallocBuffer(vCount, iCount) {
          var oldVData = this.vData;
          this.vData = new Float32Array(vCount);

          if (oldVData) {
            this.vData.set(oldVData, 0);
          }

          var oldIData = this.iData;
          this.iData = new Uint16Array(iCount);

          if (oldIData) {
            this.iData.set(oldIData, 0);
          }
        };

        _proto3.setRenderDrawInfoAttributes = function setRenderDrawInfoAttributes() {
        };

        _proto3.particleInitRenderDrawInfo = function particleInitRenderDrawInfo(entity) {
        };

        _createClass(MeshRenderData, [{
          key: "formatByte",
          get: function get() {
            return this.stride;
          },
          set: function set(value) {}
        }, {
          key: "floatStride",
          get: function get() {
            return this._floatStride;
          }
        }, {
          key: "vDataOffset",
          get: function get() {
            return this._byteLength >>> 2;
          }
        }]);

        return MeshRenderData;
      }(BaseRenderData));

      var _meshDataPool = new RecyclePool(function () {
        return new MeshRenderData();
      }, 32);

      var _dec$N, _dec2$j, _class$N, _class2$I, _initializer$y, _initializer2$l, _class3$e, _temp$m;

      var _vec2a = new Vec2();

      var _vec2b = new Vec2();

      var _vec3a = new Vec3();

      var _mat4_temp = new Mat4();

      var _matrix = new Mat4();

      var _worldMatrix = new Mat4();

      var _zeroMatrix = new Mat4(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);

      var _rect = new Rect();

      var UITransform = exports('UITransform', (_dec$N = ccclass('cc.UITransform'), _dec2$j = executionOrder(110), _dec$N(_class$N = _dec2$j(_class$N = disallowMultiple(_class$N = (_class2$I = (_temp$m = _class3$e = function (_Component) {
        _inheritsLoose(UITransform, _Component);

        function UITransform() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._priority = 0;
          _this._contentSize = _initializer$y && _initializer$y();
          _this._anchorPoint = _initializer2$l && _initializer2$l();
          return _this;
        }

        var _proto = UITransform.prototype;

        _proto.__preload = function __preload() {
          this.node._uiProps.uiTransformComp = this;
        };

        _proto.onLoad = function onLoad() {
          if (this.node.parent) {
            UITransform.insertChangeMap(this.node.parent);
          }
        };

        _proto.onEnable = function onEnable() {
          this.node.on(NodeEventType.PARENT_CHANGED, this._parentChanged, this);

          this._markRenderDataDirty();
        };

        _proto.onDisable = function onDisable() {
          this.node.off(NodeEventType.PARENT_CHANGED, this._parentChanged, this);
        };

        _proto.onDestroy = function onDestroy() {
          this.node._uiProps.uiTransformComp = null;
        };

        _proto.setContentSize = function setContentSize(size, height) {
          var locContentSize = this._contentSize;

          if (height === undefined) {
            size = size;

            if (approx(size.width, locContentSize.width, EPSILON) && approx(size.height, locContentSize.height, EPSILON)) {
              return;
            }

            locContentSize.width = size.width;
            locContentSize.height = size.height;
          } else {
            size = size;

            if (approx(size, locContentSize.width, EPSILON) && approx(height, locContentSize.height, EPSILON)) {
              return;
            }

            locContentSize.width = size;
            locContentSize.height = height;
          }

          {
            this.node.emit(NodeEventType.SIZE_CHANGED);
          }

          this._markRenderDataDirty();
        };

        _proto.setAnchorPoint = function setAnchorPoint(point, y) {
          var locAnchorPoint = this._anchorPoint;

          if (y === undefined) {
            point = point;

            if (point.x === locAnchorPoint.x && point.y === locAnchorPoint.y) {
              return;
            }

            locAnchorPoint.x = point.x;
            locAnchorPoint.y = point.y;
          } else {
            if (point === locAnchorPoint.x && y === locAnchorPoint.y) {
              return;
            }

            locAnchorPoint.x = point;
            locAnchorPoint.y = y;
          }

          this.node.emit(NodeEventType.ANCHOR_CHANGED, this._anchorPoint);

          this._markRenderDataDirty();
        };

        _proto.isHit = function isHit(uiPoint) {
          var w = this._contentSize.width;
          var h = this._contentSize.height;
          var v2WorldPt = _vec2a;
          var testPt = _vec2b;

          var cameras = this._getRenderScene().cameras;

          for (var i = 0; i < cameras.length; i++) {
            var camera = cameras[i];
            if (!(camera.visibility & this.node.layer)) continue;
            camera.node.getWorldRT(_mat4_temp);
            var m12 = _mat4_temp.m12;
            var m13 = _mat4_temp.m13;
            var center = visibleRect.center;
            _mat4_temp.m12 = center.x - (_mat4_temp.m00 * m12 + _mat4_temp.m04 * m13);
            _mat4_temp.m13 = center.y - (_mat4_temp.m01 * m12 + _mat4_temp.m05 * m13);
            Mat4.invert(_mat4_temp, _mat4_temp);
            Vec2.transformMat4(v2WorldPt, uiPoint, _mat4_temp);
            this.node.getWorldMatrix(_worldMatrix);
            Mat4.invert(_mat4_temp, _worldMatrix);

            if (Mat4.strictEquals(_mat4_temp, _zeroMatrix)) {
              continue;
            }

            Vec2.transformMat4(testPt, v2WorldPt, _mat4_temp);
            testPt.x += this._anchorPoint.x * w;
            testPt.y += this._anchorPoint.y * h;
            var hit = false;

            if (testPt.x >= 0 && testPt.y >= 0 && testPt.x <= w && testPt.y <= h) {
              hit = this._maskTest(v2WorldPt);
            }

            if (hit) {
              return true;
            }
          }

          return false;
        };

        _proto.hitTest = function hitTest(screenPoint, windowId) {
          if (windowId === void 0) {
            windowId = 0;
          }

          var w = this._contentSize.width;
          var h = this._contentSize.height;
          var v3WorldPt = _vec3a;
          var v2WorldPt = _vec2a;
          var testPt = _vec2b;

          var cameras = this._getRenderScene().cameras;

          for (var i = 0; i < cameras.length; i++) {
            var camera = cameras[i];

            if (!(camera.visibility & this.node.layer) || camera.window && !camera.window.swapchain) {
              continue;
            }

            if (camera.systemWindowId !== windowId) {
              continue;
            }

            Vec3.set(v3WorldPt, screenPoint.x, screenPoint.y, 0);
            camera.screenToWorld(v3WorldPt, v3WorldPt);
            Vec2.set(v2WorldPt, v3WorldPt.x, v3WorldPt.y);
            this.node.getWorldMatrix(_worldMatrix);
            Mat4.invert(_mat4_temp, _worldMatrix);

            if (Mat4.strictEquals(_mat4_temp, _zeroMatrix)) {
              continue;
            }

            Vec2.transformMat4(testPt, v2WorldPt, _mat4_temp);
            testPt.x += this._anchorPoint.x * w;
            testPt.y += this._anchorPoint.y * h;
            var hit = false;

            if (testPt.x >= 0 && testPt.y >= 0 && testPt.x <= w && testPt.y <= h) {
              hit = this._maskTest(v2WorldPt);
            }

            if (hit) {
              return true;
            }
          }

          return false;
        };

        _proto._maskTest = function _maskTest(pointInWorldSpace) {
          var _this$node, _this$node$eventProce;

          var maskList = (_this$node = this.node) === null || _this$node === void 0 ? void 0 : (_this$node$eventProce = _this$node.eventProcessor) === null || _this$node$eventProce === void 0 ? void 0 : _this$node$eventProce.maskList;

          if (maskList) {
            var parent = this.node;
            var length = maskList.length;

            for (var i = 0, j = 0; parent && j < length; ++i, parent = parent.parent) {
              var temp = maskList[j];

              if (i === temp.index) {
                if (parent === temp.comp.node) {
                  var comp = temp.comp;

                  if (comp && comp._enabled && !comp.isHit(pointInWorldSpace)) {
                    return false;
                  }

                  j++;
                } else {
                  maskList.length = j;
                  break;
                }
              } else if (i > temp.index) {
                maskList.length = j;
                break;
              }
            }
          }

          return true;
        };

        _proto.convertToNodeSpaceAR = function convertToNodeSpaceAR(worldPoint, out) {
          this.node.getWorldMatrix(_worldMatrix);
          Mat4.invert(_mat4_temp, _worldMatrix);

          if (!out) {
            out = new Vec3();
          }

          return Vec3.transformMat4(out, worldPoint, _mat4_temp);
        };

        _proto.convertToWorldSpaceAR = function convertToWorldSpaceAR(nodePoint, out) {
          this.node.getWorldMatrix(_worldMatrix);

          if (!out) {
            out = new Vec3();
          }

          return Vec3.transformMat4(out, nodePoint, _worldMatrix);
        };

        _proto.getBoundingBox = function getBoundingBox() {
          Mat4.fromRTS(_matrix, this.node.getRotation(), this.node.getPosition(), this.node.getScale());
          var width = this._contentSize.width;
          var height = this._contentSize.height;
          var rect = new Rect(-this._anchorPoint.x * width, -this._anchorPoint.y * height, width, height);
          rect.transformMat4(_matrix);
          return rect;
        };

        _proto.getBoundingBoxToWorld = function getBoundingBoxToWorld() {
          if (this.node.parent) {
            var m = this.node.parent.getWorldMatrix();
            return this.getBoundingBoxTo(m);
          }

          return this.getBoundingBox();
        };

        _proto.getBoundingBoxTo = function getBoundingBoxTo(parentMat) {
          Mat4.fromRTS(_matrix, this.node.getRotation(), this.node.getPosition(), this.node.getScale());
          var width = this._contentSize.width;
          var height = this._contentSize.height;
          var rect = new Rect(-this._anchorPoint.x * width, -this._anchorPoint.y * height, width, height);
          Mat4.multiply(_worldMatrix, parentMat, _matrix);
          rect.transformMat4(_worldMatrix);

          if (!this.node.children || this.node.children.length === 0) {
            return rect;
          }

          var locChildren = this.node.children;

          for (var _iterator = _createForOfIteratorHelperLoose(locChildren), _step; !(_step = _iterator()).done;) {
            var child = _step.value;

            if (child && child.active) {
              var uiTransform = child.getComponent(UITransform);

              if (uiTransform) {
                var childRect = uiTransform.getBoundingBoxTo(parentMat);

                if (childRect) {
                  Rect.union(rect, rect, childRect);
                }
              }
            }
          }

          return rect;
        };

        _proto.getComputeAABB = function getComputeAABB(out) {
          var width = this._contentSize.width;
          var height = this._contentSize.height;

          _rect.set(-this._anchorPoint.x * width, -this._anchorPoint.y * height, width, height);

          _rect.transformMat4(this.node.worldMatrix);

          var px = _rect.x + _rect.width * 0.5;
          var py = _rect.y + _rect.height * 0.5;
          var pz = this.node.worldPosition.z;
          var w = _rect.width / 2;
          var h = _rect.height / 2;
          var l = 0.001;

          if (out != null) {
            AABB.set(out, px, py, pz, w, h, l);
            return out;
          } else {
            return new AABB(px, py, pz, w, h, l);
          }
        };

        _proto._parentChanged = function _parentChanged(node) {
          if (this.node.getComponent('cc.RenderRoot2D')) {
            return;
          }

          if (this.node.parent) {
            UITransform.insertChangeMap(this.node.parent);
          }
        };

        _proto._markRenderDataDirty = function _markRenderDataDirty() {
          var uiComp = this.node._uiProps.uiComp;

          if (uiComp) {
            uiComp.markForUpdateRenderData();
          }
        };

        UITransform.insertChangeMap = function insertChangeMap(node) {
          var key = node.uuid;

          if (!UITransform.priorityChangeNodeMap.has(key)) {
            UITransform.priorityChangeNodeMap.set(key, node);
          }
        };

        UITransform._sortChildrenSibling = function _sortChildrenSibling(node) {
          var siblings = node.children;

          if (siblings) {
            siblings.sort(function (a, b) {
              var aComp = a._uiProps.uiTransformComp;
              var bComp = b._uiProps.uiTransformComp;
              var ca = aComp ? aComp._priority : 0;
              var cb = bComp ? bComp._priority : 0;
              var diff = ca - cb;
              if (diff === 0) return a.getSiblingIndex() - b.getSiblingIndex();
              return diff;
            });
          }
        };

        UITransform._sortSiblings = function _sortSiblings() {
          UITransform.priorityChangeNodeMap.forEach(function (node, ID) {
            UITransform._sortChildrenSibling(node);

            node._updateSiblingIndex();

            node.emit('childrenSiblingOrderChanged');
          });
          UITransform.priorityChangeNodeMap.clear();
        };

        UITransform._cleanChangeMap = function _cleanChangeMap() {
          UITransform.priorityChangeNodeMap.clear();
        };

        _createClass(UITransform, [{
          key: "contentSize",
          get: function get() {
            return this._contentSize;
          },
          set: function set(value) {
            if (this._contentSize.equals(value)) {
              return;
            }

            this._contentSize.set(value);

            {
              this.node.emit(NodeEventType.SIZE_CHANGED);
            }

            this._markRenderDataDirty();
          }
        }, {
          key: "width",
          get: function get() {
            return this._contentSize.width;
          },
          set: function set(value) {
            if (this._contentSize.width === value) {
              return;
            }

            this._contentSize.width = value;

            {
              this.node.emit(NodeEventType.SIZE_CHANGED);
            }

            this._markRenderDataDirty();
          }
        }, {
          key: "height",
          get: function get() {
            return this._contentSize.height;
          },
          set: function set(value) {
            if (this.contentSize.height === value) {
              return;
            }

            this._contentSize.height = value;

            {
              this.node.emit(NodeEventType.SIZE_CHANGED);
            }

            this._markRenderDataDirty();
          }
        }, {
          key: "anchorPoint",
          get: function get() {
            return this._anchorPoint;
          },
          set: function set(value) {
            if (this._anchorPoint.equals(value)) {
              return;
            }

            this._anchorPoint.set(value);

            this.node.emit(NodeEventType.ANCHOR_CHANGED, this._anchorPoint);

            this._markRenderDataDirty();
          }
        }, {
          key: "anchorX",
          get: function get() {
            return this._anchorPoint.x;
          },
          set: function set(value) {
            if (this._anchorPoint.x === value) {
              return;
            }

            this._anchorPoint.x = value;
            this.node.emit(NodeEventType.ANCHOR_CHANGED, this._anchorPoint);

            this._markRenderDataDirty();
          }
        }, {
          key: "anchorY",
          get: function get() {
            return this._anchorPoint.y;
          },
          set: function set(value) {
            if (this._anchorPoint.y === value) {
              return;
            }

            this._anchorPoint.y = value;
            this.node.emit(NodeEventType.ANCHOR_CHANGED, this._anchorPoint);

            this._markRenderDataDirty();
          }
        }, {
          key: "priority",
          get: function get() {
            return this._priority;
          },
          set: function set(value) {
            if (this._priority === value) {
              return;
            }

            if (this.node.getComponent('cc.RenderRoot2D')) {
              warnID(6706);
              return;
            }

            this._priority = value;

            if (this.node.parent) {
              UITransform.insertChangeMap(this.node.parent);
            }
          }
        }, {
          key: "visibility",
          get: function get() {
            var camera = director.root.batcher2D.getFirstRenderCamera(this.node);
            return camera ? camera.visibility : 0;
          }
        }, {
          key: "cameraPriority",
          get: function get() {
            var camera = director.root.batcher2D.getFirstRenderCamera(this.node);
            return camera ? camera.priority : 0;
          }
        }]);

        return UITransform;
      }(Component), _class3$e.EventType = NodeEventType, _class3$e.priorityChangeNodeMap = new Map(), _temp$m), (_initializer$y = applyDecoratedInitializer(_class2$I.prototype, "_contentSize", [serializable], function () {
        return new Size(100, 100);
      }), _initializer2$l = applyDecoratedInitializer(_class2$I.prototype, "_anchorPoint", [serializable], function () {
        return new Vec2(0.5, 0.5);
      })), _class2$I)) || _class$N) || _class$N) || _class$N));
      director.on(Director.EVENT_AFTER_UPDATE, UITransform._sortSiblings);
      director.on(Director.EVENT_BEFORE_SCENE_LAUNCH, UITransform._cleanChangeMap);

      var _dec$O, _dec2$k, _dec3$7, _class$O, _class2$J, _initializer$z;
      var _matInsInfo = {
        parent: null,
        owner: null,
        subModelIdx: 0
      };
      var ccclass$2 = ccclass,
          disallowMultiple$1 = disallowMultiple,
          type$1 = type;
      var Renderer = exports('Renderer', (_dec$O = ccclass$2('cc.Renderer'), _dec2$k = type$1(Material), _dec3$7 = type$1([Material]), _dec$O(_class$O = disallowMultiple$1(_class$O = (_class2$J = function (_Component) {
        _inheritsLoose(Renderer, _Component);

        function Renderer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._materials = _initializer$z && _initializer$z();
          _this._materialInstances = [];
          return _this;
        }

        var _proto = Renderer.prototype;

        _proto.getMaterial = function getMaterial(idx) {
          if (idx < 0 || idx >= this._materials.length) {
            return null;
          }

          return this._materials[idx];
        };

        _proto.setMaterial = function setMaterial(material, index) {
          if (material && material instanceof MaterialInstance) {
            console.error('Can\'t set a material instance to a sharedMaterial slot');
          }

          this._materials[index] = material;
          var inst = this._materialInstances[index];

          if (inst) {
            inst.destroy();
            this._materialInstances[index] = null;
          }

          this._onMaterialModified(index, this._materials[index]);
        };

        _proto.getMaterialInstance = function getMaterialInstance(idx) {
          var mat = this._materials[idx];

          if (!mat) {
            return null;
          }

          if (!this._materialInstances[idx]) {
            _matInsInfo.parent = this._materials[idx];
            _matInsInfo.owner = this;
            _matInsInfo.subModelIdx = idx;
            var instantiated = new MaterialInstance(_matInsInfo);
            _matInsInfo.parent = null;
            _matInsInfo.owner = null;
            _matInsInfo.subModelIdx = 0;
            this.setMaterialInstance(instantiated, idx);
          }

          return this._materialInstances[idx];
        };

        _proto.setMaterialInstance = function setMaterialInstance(matInst, index) {
          if (typeof matInst === 'number') {
            warnID(12007);
            var temp = matInst;
            matInst = index;
            index = temp;
          }

          var curInst = this._materialInstances[index];

          if (matInst && matInst.parent) {
            if (matInst !== curInst) {
              this._materialInstances[index] = matInst;

              this._onMaterialModified(index, matInst);
            }

            return;
          }

          if (matInst !== this._materials[index] || curInst) {
            this.setMaterial(matInst, index);
          }
        };

        _proto.getRenderMaterial = function getRenderMaterial(index) {
          return this._materialInstances[index] || this._materials[index];
        };

        _proto._onMaterialModified = function _onMaterialModified(index, material) {};

        _proto._onRebuildPSO = function _onRebuildPSO(index, material) {};

        _proto._clearMaterials = function _clearMaterials() {};

        _createClass(Renderer, [{
          key: "sharedMaterial",
          get: function get() {
            return this.getMaterial(0);
          }
        }, {
          key: "sharedMaterials",
          get: function get() {
            return  this._materials;
          },
          set: function set(val) {
            for (var i = 0; i < val.length; i++) {
              if (val[i] !== this._materials[i]) {
                this.setMaterial(val[i], i);
              }
            }

            if (val.length < this._materials.length) {
              for (var _i = val.length; _i < this._materials.length; _i++) {
                this.setMaterial(null, _i);
              }

              this._materials.splice(val.length);
            }
          }
        }, {
          key: "material",
          get: function get() {
            return this.getMaterialInstance(0);
          },
          set: function set(val) {
            if (this._materials.length === 1 && !this._materialInstances[0] && this._materials[0] === val) {
              return;
            }

            this.setMaterialInstance(val, 0);
          }
        }, {
          key: "materials",
          get: function get() {
            for (var i = 0; i < this._materials.length; i++) {
              this._materialInstances[i] = this.getMaterialInstance(i);
            }

            return this._materialInstances;
          },
          set: function set(val) {
            var newLength = val.length;
            var oldLength = this._materials.length;

            for (var i = newLength; i < oldLength; i++) {
              this.setMaterialInstance(null, i);
            }

            this._materials.length = newLength;
            this._materialInstances.length = newLength;

            for (var _i2 = 0; _i2 < newLength; _i2++) {
              if (this._materialInstances[_i2] != val[_i2]) {
                this.setMaterialInstance(val[_i2], _i2);
              }
            }
          }
        }]);

        return Renderer;
      }(Component), (_applyDecoratedDescriptor(_class2$J.prototype, "sharedMaterials", [_dec2$k], Object.getOwnPropertyDescriptor(_class2$J.prototype, "sharedMaterials"), _class2$J.prototype), _initializer$z = applyDecoratedInitializer(_class2$J.prototype, "_materials", [_dec3$7], function () {
        return [];
      })), _class2$J)) || _class$O) || _class$O));

      var _dec$P, _dec2$l, _dec3$8, _dec4$3, _class$P, _class2$K, _initializer$A, _initializer2$m, _initializer3$h, _initializer4$d, _initializer5$8, _class3$f, _temp$n;
      ccenum(BlendFactor);
      var InstanceMaterialType;

      (function (InstanceMaterialType) {
        InstanceMaterialType[InstanceMaterialType["ADD_COLOR"] = 0] = "ADD_COLOR";
        InstanceMaterialType[InstanceMaterialType["ADD_COLOR_AND_TEXTURE"] = 1] = "ADD_COLOR_AND_TEXTURE";
        InstanceMaterialType[InstanceMaterialType["GRAYSCALE"] = 2] = "GRAYSCALE";
        InstanceMaterialType[InstanceMaterialType["USE_ALPHA_SEPARATED"] = 3] = "USE_ALPHA_SEPARATED";
        InstanceMaterialType[InstanceMaterialType["USE_ALPHA_SEPARATED_AND_GRAY"] = 4] = "USE_ALPHA_SEPARATED_AND_GRAY";
      })(InstanceMaterialType || (InstanceMaterialType = exports('InstanceMaterialType', {})));

      var UIRenderer = exports('UIRenderer', (_dec$P = ccclass('cc.UIRenderer'), _dec2$l = requireComponent(UITransform), _dec3$8 = type(Material), _dec4$3 = type(Material), _dec$P(_class$P = _dec2$l(_class$P = (_class2$K = (_temp$n = _class3$f = function (_Renderer) {
        _inheritsLoose(UIRenderer, _Renderer);

        function UIRenderer() {
          var _this;

          _this = _Renderer.call(this) || this;
          _this._renderData = null;
          _this._materials = _initializer$A && _initializer$A();
          _this._customMaterial = _initializer2$m && _initializer2$m();
          _this._srcBlendFactor = _initializer3$h && _initializer3$h();
          _this._dstBlendFactor = _initializer4$d && _initializer4$d();
          _this._color = _initializer5$8 && _initializer5$8();
          _this._stencilStage = Stage.DISABLED;
          _this._assembler = null;
          _this._postAssembler = null;
          _this._renderDataFlag = true;
          _this._renderFlag = true;
          _this._renderEntity = void 0;
          _this._instanceMaterialType = -1;
          _this._srcBlendFactorCache = BlendFactor.SRC_ALPHA;
          _this._dstBlendFactorCache = BlendFactor.ONE_MINUS_SRC_ALPHA;
          _this._dirtyVersion = -1;
          _this._internalId = -1;
          _this._useVertexOpacity = false;
          _this._lastParent = null;
          _this._renderEntity = _this.createRenderEntity();
          return _this;
        }

        var _proto = UIRenderer.prototype;

        _proto.onLoad = function onLoad() {
          this._renderEntity.setNode(this.node);
        };

        _proto.__preload = function __preload() {
          this.node._uiProps.uiComp = this;

          if (this._flushAssembler) {
            this._flushAssembler();
          }
        };

        _proto.onEnable = function onEnable() {
          this.node.on(NodeEventType.ANCHOR_CHANGED, this._nodeStateChange, this);
          this.node.on(NodeEventType.SIZE_CHANGED, this._nodeStateChange, this);
          this.node.on(NodeEventType.PARENT_CHANGED, this._colorDirty, this);
          this.updateMaterial();

          this._colorDirty();

          uiRendererManager.addRenderer(this);
          this.markForUpdateRenderData();
        };

        _proto.onRestore = function onRestore() {
          this.updateMaterial();
          this.markForUpdateRenderData();
        };

        _proto.onDisable = function onDisable() {
          this.node.off(NodeEventType.ANCHOR_CHANGED, this._nodeStateChange, this);
          this.node.off(NodeEventType.SIZE_CHANGED, this._nodeStateChange, this);
          this.node.off(NodeEventType.PARENT_CHANGED, this._colorDirty, this);
          uiRendererManager.removeRenderer(this);
          this._renderFlag = false;
          this._renderEntity.enabled = false;
        };

        _proto.onDestroy = function onDestroy() {
          this._renderEntity.setNode(null);

          if (this.node._uiProps.uiComp === this) {
            this.node._uiProps.uiComp = null;
          }

          this.destroyRenderData();

          if (this._materialInstances) {
            for (var i = 0; i < this._materialInstances.length; i++) {
              var instance = this._materialInstances[i];

              if (instance) {
                instance.destroy();
              }
            }
          }
        };

        _proto.markForUpdateRenderData = function markForUpdateRenderData(enable) {
          if (enable === void 0) {
            enable = true;
          }

          if (enable) {
            var renderData = this.renderData;

            if (renderData) {
              renderData.vertDirty = true;
            }

            uiRendererManager.markDirtyRenderer(this);
          }
        };

        _proto.requestRenderData = function requestRenderData(drawInfoType) {
          if (drawInfoType === void 0) {
            drawInfoType = RenderDrawInfoType.COMP;
          }

          var data = RenderData.add();
          data.initRenderDrawInfo(this, drawInfoType);
          this._renderData = data;
          return data;
        };

        _proto.destroyRenderData = function destroyRenderData() {
          if (!this.renderData) {
            return;
          }

          this.renderData.removeRenderDrawInfo(this);
          RenderData.remove(this.renderData);
          this._renderData = null;
        };

        _proto.updateRenderer = function updateRenderer() {
          if (this._assembler) {
            this._assembler.updateRenderData(this);
          }

          this._renderFlag = this._canRender();
          this._renderEntity.enabled = this._renderFlag;
        };

        _proto.fillBuffers = function fillBuffers(render) {
          if (this._renderFlag) {
            this._render(render);
          }
        };

        _proto.postUpdateAssembler = function postUpdateAssembler(render) {
          if (this._postAssembler && this._renderFlag) {
            this._postRender(render);
          }
        };

        _proto._render = function _render(render) {};

        _proto._postRender = function _postRender(render) {};

        _proto._canRender = function _canRender() {
          {
            assert(this.isValid, 'this component should not be invalid!');
          }

          return this.getMaterial(0) !== null && this._enabled && this._color.a > 0;
        };

        _proto._postCanRender = function _postCanRender() {};

        _proto.updateMaterial = function updateMaterial() {
          if (this._customMaterial) {
            if (this.getMaterial(0) !== this._customMaterial) {
              this.setMaterial(this._customMaterial, 0);
            }

            return;
          }

          var mat = this._updateBuiltinMaterial();

          this.setMaterial(mat, 0);

          if (this.stencilStage === Stage.ENTER_LEVEL || this.stencilStage === Stage.ENTER_LEVEL_INVERTED) {
            this.getMaterialInstance(0).recompileShaders({
              USE_ALPHA_TEST: true
            });
          }

          this._updateBlendFunc();
        };

        _proto._updateColor = function _updateColor() {
          this.node._uiProps.colorDirty = true;
          this.setEntityColorDirty(true);
          this.setEntityColor(this._color);
          this.setEntityOpacity(this.node._uiProps.localOpacity);

          if (this._assembler) {
            this._assembler.updateColor(this);

            this._renderFlag = this._canRender();
            this.setEntityEnabled(this._renderFlag);
          }
        };

        UIRenderer.setEntityColorDirtyRecursively = function setEntityColorDirtyRecursively(node, dirty) {
          var render = node._uiProps.uiComp;

          if (render && render.color) {
            render._renderEntity.colorDirty = dirty;
          }

          for (var i = 0; i < node.children.length; i++) {
            UIRenderer.setEntityColorDirtyRecursively(node.children[i], dirty);
          }
        };

        _proto.setEntityColorDirty = function setEntityColorDirty(dirty) {
        };

        _proto.setEntityColor = function setEntityColor(color) {
        };

        _proto.setEntityOpacity = function setEntityOpacity(opacity) {
        };

        _proto.setEntityEnabled = function setEntityEnabled(enabled) {
        };

        _proto._updateBlendFunc = function _updateBlendFunc() {
          var target = this.getRenderMaterial(0).passes[0].blendState.targets[0];
          this._dstBlendFactorCache = target.blendDst;
          this._srcBlendFactorCache = target.blendSrc;

          if (this._dstBlendFactorCache !== this._dstBlendFactor || this._srcBlendFactorCache !== this._srcBlendFactor) {
            target = this.getMaterialInstance(0).passes[0].blendState.targets[0];
            target.blend = true;
            target.blendDstAlpha = BlendFactor.ONE_MINUS_SRC_ALPHA;
            target.blendDst = this._dstBlendFactor;
            target.blendSrc = this._srcBlendFactor;
            var targetPass = this.getMaterialInstance(0).passes[0];
            targetPass.blendState.setTarget(0, target);

            targetPass._updatePassHash();

            this._dstBlendFactorCache = this._dstBlendFactor;
            this._srcBlendFactorCache = this._srcBlendFactor;
          }
        };

        _proto._nodeStateChange = function _nodeStateChange(transformType) {
          if (this.renderData) {
            this.markForUpdateRenderData();
          }

          for (var i = 0; i < this.node.children.length; ++i) {
            var child = this.node.children[i];
            var renderComp = child.getComponent(UIRenderer);

            if (renderComp) {
              renderComp.markForUpdateRenderData();
            }
          }
        };

        _proto._colorDirty = function _colorDirty() {
          this.node._uiProps.colorDirty = true;
          this.setEntityColorDirty(true);
        };

        _proto._onMaterialModified = function _onMaterialModified(idx, material) {
          if (this.renderData) {
            this.markForUpdateRenderData();
            this.renderData.passDirty = true;
          }

          _Renderer.prototype._onMaterialModified.call(this, idx, material);
        };

        _proto._updateBuiltinMaterial = function _updateBuiltinMaterial() {
          var mat;

          switch (this._instanceMaterialType) {
            case InstanceMaterialType.ADD_COLOR:
              mat = builtinResMgr.get("ui-base-material");
              break;

            case InstanceMaterialType.GRAYSCALE:
              mat = builtinResMgr.get("ui-sprite-gray-material");
              break;

            case InstanceMaterialType.USE_ALPHA_SEPARATED:
              mat = builtinResMgr.get("ui-sprite-alpha-sep-material");
              break;

            case InstanceMaterialType.USE_ALPHA_SEPARATED_AND_GRAY:
              mat = builtinResMgr.get("ui-sprite-gray-alpha-sep-material");
              break;

            default:
              mat = builtinResMgr.get("ui-sprite-material");
              break;
          }

          return mat;
        };

        _proto.setNodeDirty = function setNodeDirty() {
          if (this.renderData) {
            this.renderData.nodeDirty = true;
          }
        };

        _proto.setTextureDirty = function setTextureDirty() {
          if (this.renderData) {
            this.renderData.textureDirty = true;
          }
        };

        _proto.createRenderEntity = function createRenderEntity() {
          return new RenderEntity(RenderEntityType.STATIC);
        };

        _createClass(UIRenderer, [{
          key: "sharedMaterials",
          get: function get() {
            return  this._materials;
          },
          set: function set(val) {
            for (var i = 0; i < val.length; i++) {
              if (val[i] !== this._materials[i]) {
                this.setMaterial(val[i], i);
              }
            }

            if (val.length < this._materials.length) {
              for (var _i = val.length; _i < this._materials.length; _i++) {
                this.setMaterial(null, _i);
              }

              this._materials.splice(val.length);
            }
          }
        }, {
          key: "customMaterial",
          get: function get() {
            return this._customMaterial;
          },
          set: function set(val) {
            this._customMaterial = val;
            this.updateMaterial();
          }
        }, {
          key: "color",
          get: function get() {
            return this._color;
          },
          set: function set(value) {
            if (this._color.equals(value)) {
              return;
            }

            this._color.set(value);

            this._updateColor();
          }
        }, {
          key: "renderData",
          get: function get() {
            return this._renderData;
          }
        }, {
          key: "useVertexOpacity",
          get: function get() {
            return this._useVertexOpacity;
          }
        }, {
          key: "stencilStage",
          get: function get() {
            return this._stencilStage;
          },
          set: function set(val) {
            this._stencilStage = val;

            this._renderEntity.setStencilStage(val);
          }
        }, {
          key: "batcher",
          get: function get() {
            return director.root.batcher2D;
          }
        }, {
          key: "renderEntity",
          get: function get() {
            {
              assert(this._renderEntity, 'this._renderEntity should not be invalid');
            }

            return this._renderEntity;
          }
        }]);

        return UIRenderer;
      }(Renderer), _class3$f.BlendState = BlendFactor, _class3$f.Assembler = null, _class3$f.PostAssembler = null, _temp$n), (_applyDecoratedDescriptor(_class2$K.prototype, "sharedMaterials", [override], Object.getOwnPropertyDescriptor(_class2$K.prototype, "sharedMaterials"), _class2$K.prototype), _applyDecoratedDescriptor(_class2$K.prototype, "customMaterial", [_dec3$8], Object.getOwnPropertyDescriptor(_class2$K.prototype, "customMaterial"), _class2$K.prototype), _initializer$A = applyDecoratedInitializer(_class2$K.prototype, "_materials", [override], function () {
        return [];
      }), _initializer2$m = applyDecoratedInitializer(_class2$K.prototype, "_customMaterial", [_dec4$3], function () {
        return null;
      }), _initializer3$h = applyDecoratedInitializer(_class2$K.prototype, "_srcBlendFactor", [serializable], function () {
        return BlendFactor.SRC_ALPHA;
      }), _initializer4$d = applyDecoratedInitializer(_class2$K.prototype, "_dstBlendFactor", [serializable], function () {
        return BlendFactor.ONE_MINUS_SRC_ALPHA;
      }), _initializer5$8 = applyDecoratedInitializer(_class2$K.prototype, "_color", [serializable], function () {
        return Color.WHITE.clone();
      })), _class2$K)) || _class$P) || _class$P));
      legacyCC.internal.UIRenderer = UIRenderer;

      var _dec$Q, _dec2$m, _dec3$9, _dec4$4, _dec5$3, _dec6$3, _dec7$3, _class$Q, _class2$L, _initializer$B, _initializer2$n, _initializer3$i, _initializer4$e, _initializer5$9, _initializer6$5, _initializer7$5, _initializer8$5, _initializer9$4, _initializer10$4, _initializer11$4, _initializer12$3, _initializer13$3, _initializer14$3, _initializer15$3, _initializer16$3, _initializer17$3, _class3$g, _temp$o;
      var tempColor = Color.WHITE.clone();
      var HorizontalTextAlignment;

      (function (HorizontalTextAlignment) {
        HorizontalTextAlignment[HorizontalTextAlignment["LEFT"] = 0] = "LEFT";
        HorizontalTextAlignment[HorizontalTextAlignment["CENTER"] = 1] = "CENTER";
        HorizontalTextAlignment[HorizontalTextAlignment["RIGHT"] = 2] = "RIGHT";
      })(HorizontalTextAlignment || (HorizontalTextAlignment = exports('HorizontalTextAlignment', {})));

      ccenum(HorizontalTextAlignment);
      var VerticalTextAlignment;

      (function (VerticalTextAlignment) {
        VerticalTextAlignment[VerticalTextAlignment["TOP"] = 0] = "TOP";
        VerticalTextAlignment[VerticalTextAlignment["CENTER"] = 1] = "CENTER";
        VerticalTextAlignment[VerticalTextAlignment["BOTTOM"] = 2] = "BOTTOM";
      })(VerticalTextAlignment || (VerticalTextAlignment = exports('VerticalTextAlignment', {})));

      ccenum(VerticalTextAlignment);
      var Overflow;

      (function (Overflow) {
        Overflow[Overflow["NONE"] = 0] = "NONE";
        Overflow[Overflow["CLAMP"] = 1] = "CLAMP";
        Overflow[Overflow["SHRINK"] = 2] = "SHRINK";
        Overflow[Overflow["RESIZE_HEIGHT"] = 3] = "RESIZE_HEIGHT";
      })(Overflow || (Overflow = exports('Overflow', {})));

      ccenum(Overflow);
      var CacheMode;

      (function (CacheMode) {
        CacheMode[CacheMode["NONE"] = 0] = "NONE";
        CacheMode[CacheMode["BITMAP"] = 1] = "BITMAP";
        CacheMode[CacheMode["CHAR"] = 2] = "CHAR";
      })(CacheMode || (CacheMode = exports('CacheMode', {})));

      ccenum(CacheMode);
      var Label = exports('Label', (_dec$Q = ccclass('cc.Label'), _dec2$m = executionOrder(110), _dec3$9 = type(HorizontalTextAlignment), _dec4$4 = type(VerticalTextAlignment), _dec5$3 = type(Overflow), _dec6$3 = type(Font), _dec7$3 = type(CacheMode), _dec$Q(_class$Q = _dec2$m(_class$Q = (_class2$L = (_temp$o = _class3$g = function (_UIRenderer) {
        _inheritsLoose(Label, _UIRenderer);

        function Label() {
          var _this;

          _this = _UIRenderer.call(this) || this;
          _this._string = _initializer$B && _initializer$B();
          _this._horizontalAlign = _initializer2$n && _initializer2$n();
          _this._verticalAlign = _initializer3$i && _initializer3$i();
          _this._actualFontSize = _initializer4$e && _initializer4$e();
          _this._fontSize = _initializer5$9 && _initializer5$9();
          _this._fontFamily = _initializer6$5 && _initializer6$5();
          _this._lineHeight = _initializer7$5 && _initializer7$5();
          _this._overflow = _initializer8$5 && _initializer8$5();
          _this._enableWrapText = _initializer9$4 && _initializer9$4();
          _this._font = _initializer10$4 && _initializer10$4();
          _this._isSystemFontUsed = _initializer11$4 && _initializer11$4();
          _this._spacingX = _initializer12$3 && _initializer12$3();
          _this._isItalic = _initializer13$3 && _initializer13$3();
          _this._isBold = _initializer14$3 && _initializer14$3();
          _this._isUnderline = _initializer15$3 && _initializer15$3();
          _this._underlineHeight = _initializer16$3 && _initializer16$3();
          _this._cacheMode = _initializer17$3 && _initializer17$3();
          _this._N$file = null;
          _this._texture = null;
          _this._ttfSpriteFrame = null;
          _this._userDefinedFont = null;
          _this._assemblerData = null;
          _this._fontAtlas = null;
          _this._letterTexture = null;
          _this._contentWidth = 0;

          _this._ttfSpriteFrame = null;
          return _this;
        }

        var _proto = Label.prototype;

        _proto.onEnable = function onEnable() {
          _UIRenderer.prototype.onEnable.call(this);

          if (!this._font && !this._isSystemFontUsed) {
            this.useSystemFont = true;
          }

          if (this._isSystemFontUsed && !this._fontFamily) {
            this.fontFamily = 'Arial';
          }

          this._applyFontTexture();
        };

        _proto.onDestroy = function onDestroy() {
          if (this._assembler && this._assembler.resetAssemblerData) {
            this._assembler.resetAssemblerData(this._assemblerData);
          }

          this._assemblerData = null;

          if (this._ttfSpriteFrame) {
            this._ttfSpriteFrame._resetDynamicAtlasFrame();

            var tex = this._ttfSpriteFrame.texture;

            this._ttfSpriteFrame.destroy();

            if (tex) {
              var tex2d = tex;

              if (tex2d.image) {
                tex2d.image.destroy();
              }

              tex.destroy();
            }

            this._ttfSpriteFrame = null;
          }

          this._letterTexture = null;

          _UIRenderer.prototype.onDestroy.call(this);
        };

        _proto.updateRenderData = function updateRenderData(force) {
          if (force === void 0) {
            force = false;
          }

          if (force) {
            this._flushAssembler();

            if (this.renderData) this.renderData.vertDirty = true;

            this._applyFontTexture();
          }

          if (this._assembler) {
            this._assembler.updateRenderData(this);
          }
        };

        _proto._render = function _render(render) {
          render.commitComp(this, this.renderData, this._texture, this._assembler, null);
        };

        _proto._updateColor = function _updateColor() {
          _UIRenderer.prototype._updateColor.call(this);

          this.markForUpdateRenderData();
        };

        _proto.setEntityColor = function setEntityColor(color) {
        };

        _proto._canRender = function _canRender() {
          if (!_UIRenderer.prototype._canRender.call(this) || !this._string) {
            return false;
          }

          var font = this._font;

          if (font && font instanceof BitmapFont) {
            var spriteFrame = font.spriteFrame;

            if (!spriteFrame || !spriteFrame.texture) {
              return false;
            }
          }

          return true;
        };

        _proto._flushAssembler = function _flushAssembler() {
          var assembler = Label.Assembler.getAssembler(this);

          if (this._assembler !== assembler) {
            this.destroyRenderData();
            this._assembler = assembler;
          }

          if (!this.renderData) {
            if (this._assembler && this._assembler.createData) {
              this._renderData = this._assembler.createData(this);
              this.renderData.material = this.material;

              this._updateColor();
            }
          }
        };

        _proto._applyFontTexture = function _applyFontTexture() {
          this.markForUpdateRenderData();
          var font = this._font;

          if (font instanceof BitmapFont) {
            var spriteFrame = font.spriteFrame;

            if (spriteFrame && spriteFrame.texture) {
              this._texture = spriteFrame;

              if (this.renderData) {
                this.renderData.textureDirty = true;
              }

              this.changeMaterialForDefine();

              if (this._assembler) {
                this._assembler.updateRenderData(this);
              }
            }
          } else {
            if (this.cacheMode === CacheMode.CHAR) {
              this._letterTexture = this._assembler.getAssemblerData();
              this._texture = this._letterTexture;
            } else if (!this._ttfSpriteFrame) {
              this._ttfSpriteFrame = new SpriteFrame();
              this._assemblerData = this._assembler.getAssemblerData();
              var image = new ImageAsset(this._assemblerData.canvas);
              var texture = new Texture2D();
              texture.image = image;
              this._ttfSpriteFrame.texture = texture;
            }

            if (this.cacheMode !== CacheMode.CHAR) {
              this._texture = this._ttfSpriteFrame;
            }

            this.changeMaterialForDefine();
          }
        };

        _proto.changeMaterialForDefine = function changeMaterialForDefine() {
          if (!this._texture) {
            return;
          }

          var value = false;

          if (this.cacheMode !== CacheMode.CHAR) {
            var spriteFrame = this._texture;
            var texture = spriteFrame.texture;

            if (texture instanceof TextureBase) {
              var format = texture.getPixelFormat();
              value = format === PixelFormat.RGBA_ETC1 || format === PixelFormat.RGB_A_PVRTC_4BPPV1 || format === PixelFormat.RGB_A_PVRTC_2BPPV1;
            }
          }

          if (value) {
            this._instanceMaterialType = InstanceMaterialType.USE_ALPHA_SEPARATED;
          } else {
            this._instanceMaterialType = InstanceMaterialType.ADD_COLOR_AND_TEXTURE;
          }

          this.updateMaterial();
        };

        _proto._updateBlendFunc = function _updateBlendFunc() {

          _UIRenderer.prototype._updateBlendFunc.call(this);
        };

        _createClass(Label, [{
          key: "string",
          get: function get() {
            return this._string;
          },
          set: function set(value) {
            if (value === null || value === undefined) {
              value = '';
            } else {
              value = value.toString();
            }

            if (this._string === value) {
              return;
            }

            this._string = value;
            this.markForUpdateRenderData();
          }
        }, {
          key: "horizontalAlign",
          get: function get() {
            return this._horizontalAlign;
          },
          set: function set(value) {
            if (this._horizontalAlign === value) {
              return;
            }

            this._horizontalAlign = value;
            this.markForUpdateRenderData();
          }
        }, {
          key: "verticalAlign",
          get: function get() {
            return this._verticalAlign;
          },
          set: function set(value) {
            if (this._verticalAlign === value) {
              return;
            }

            this._verticalAlign = value;
            this.markForUpdateRenderData();
          }
        }, {
          key: "actualFontSize",
          get: function get() {
            return this._actualFontSize;
          },
          set: function set(value) {
            this._actualFontSize = value;
          }
        }, {
          key: "fontSize",
          get: function get() {
            return this._fontSize;
          },
          set: function set(value) {
            if (this._fontSize === value) {
              return;
            }

            this._fontSize = value;
            this.markForUpdateRenderData();
          }
        }, {
          key: "lineHeight",
          get: function get() {
            return this._lineHeight;
          },
          set: function set(value) {
            if (this._lineHeight === value) {
              return;
            }

            this._lineHeight = value;
            this.markForUpdateRenderData();
          }
        }, {
          key: "spacingX",
          get: function get() {
            return this._spacingX;
          },
          set: function set(value) {
            if (this._spacingX === value) {
              return;
            }

            this._spacingX = value;
            this.markForUpdateRenderData();
          }
        }, {
          key: "overflow",
          get: function get() {
            return this._overflow;
          },
          set: function set(value) {
            if (this._overflow === value) {
              return;
            }

            this._overflow = value;
            this.markForUpdateRenderData();
          }
        }, {
          key: "enableWrapText",
          get: function get() {
            return this._enableWrapText;
          },
          set: function set(value) {
            if (this._enableWrapText === value) {
              return;
            }

            this._enableWrapText = value;
            this.markForUpdateRenderData();
          }
        }, {
          key: "useSystemFont",
          get: function get() {
            return this._isSystemFontUsed;
          },
          set: function set(value) {
            if (this._isSystemFontUsed === value) {
              return;
            }

            this.destroyRenderData();

            this._isSystemFontUsed = !!value;

            if (value) {
              this.font = null;
            }

            this._flushAssembler();

            this.markForUpdateRenderData();
          }
        }, {
          key: "fontFamily",
          get: function get() {
            return this._fontFamily;
          },
          set: function set(value) {
            if (this._fontFamily === value) {
              return;
            }

            this._fontFamily = value;
            this.markForUpdateRenderData();
          }
        }, {
          key: "font",
          get: function get() {
            return this._font;
          },
          set: function set(value) {
            if (this._font === value) {
              return;
            }

            this._isSystemFontUsed = !value;

            this._font = value;
            this.destroyRenderData();
            this._fontAtlas = null;
            this.updateRenderData(true);
          }
        }, {
          key: "cacheMode",
          get: function get() {
            return this._cacheMode;
          },
          set: function set(value) {
            if (this._cacheMode === value) {
              return;
            }

            if (this._cacheMode === CacheMode.BITMAP && !(this._font instanceof BitmapFont) && this._ttfSpriteFrame) {
              this._ttfSpriteFrame._resetDynamicAtlasFrame();
            }

            if (this._cacheMode === CacheMode.CHAR) {
              this._ttfSpriteFrame = null;
            }

            this._cacheMode = value;
            this.updateRenderData(true);
          }
        }, {
          key: "isBold",
          get: function get() {
            return this._isBold;
          },
          set: function set(value) {
            if (this._isBold === value) {
              return;
            }

            this._isBold = value;
            this.markForUpdateRenderData();
          }
        }, {
          key: "isItalic",
          get: function get() {
            return this._isItalic;
          },
          set: function set(value) {
            if (this._isItalic === value) {
              return;
            }

            this._isItalic = value;
            this.markForUpdateRenderData();
          }
        }, {
          key: "isUnderline",
          get: function get() {
            return this._isUnderline;
          },
          set: function set(value) {
            if (this._isUnderline === value) {
              return;
            }

            this._isUnderline = value;
            this.markForUpdateRenderData();
          }
        }, {
          key: "underlineHeight",
          get: function get() {
            return this._underlineHeight;
          },
          set: function set(value) {
            if (this._underlineHeight === value) return;
            this._underlineHeight = value;
            this.markForUpdateRenderData();
          }
        }, {
          key: "spriteFrame",
          get: function get() {
            return this._texture;
          }
        }, {
          key: "ttfSpriteFrame",
          get: function get() {
            return this._ttfSpriteFrame;
          }
        }, {
          key: "assemblerData",
          get: function get() {
            return this._assemblerData;
          }
        }, {
          key: "fontAtlas",
          get: function get() {
            return this._fontAtlas;
          },
          set: function set(value) {
            this._fontAtlas = value;
          }
        }, {
          key: "_bmFontOriginalSize",
          get: function get() {
            if (this._font instanceof BitmapFont) {
              return this._font.fontSize;
            } else {
              return -1;
            }
          }
        }, {
          key: "contentWidth",
          get: function get() {
            return this._contentWidth;
          },
          set: function set(val) {
            this._contentWidth = val;
          }
        }]);

        return Label;
      }(UIRenderer), _class3$g.HorizontalAlign = HorizontalTextAlignment, _class3$g.VerticalAlign = VerticalTextAlignment, _class3$g.Overflow = Overflow, _class3$g.CacheMode = CacheMode, _class3$g._canvasPool = CanvasPool.getInstance(), _temp$o), (_applyDecoratedDescriptor(_class2$L.prototype, "horizontalAlign", [_dec3$9], Object.getOwnPropertyDescriptor(_class2$L.prototype, "horizontalAlign"), _class2$L.prototype), _applyDecoratedDescriptor(_class2$L.prototype, "verticalAlign", [_dec4$4], Object.getOwnPropertyDescriptor(_class2$L.prototype, "verticalAlign"), _class2$L.prototype), _applyDecoratedDescriptor(_class2$L.prototype, "overflow", [_dec5$3], Object.getOwnPropertyDescriptor(_class2$L.prototype, "overflow"), _class2$L.prototype), _applyDecoratedDescriptor(_class2$L.prototype, "font", [_dec6$3], Object.getOwnPropertyDescriptor(_class2$L.prototype, "font"), _class2$L.prototype), _applyDecoratedDescriptor(_class2$L.prototype, "cacheMode", [_dec7$3], Object.getOwnPropertyDescriptor(_class2$L.prototype, "cacheMode"), _class2$L.prototype), _initializer$B = applyDecoratedInitializer(_class2$L.prototype, "_string", [serializable], function () {
        return 'label';
      }), _initializer2$n = applyDecoratedInitializer(_class2$L.prototype, "_horizontalAlign", [serializable], function () {
        return HorizontalTextAlignment.CENTER;
      }), _initializer3$i = applyDecoratedInitializer(_class2$L.prototype, "_verticalAlign", [serializable], function () {
        return VerticalTextAlignment.CENTER;
      }), _initializer4$e = applyDecoratedInitializer(_class2$L.prototype, "_actualFontSize", [serializable], function () {
        return 0;
      }), _initializer5$9 = applyDecoratedInitializer(_class2$L.prototype, "_fontSize", [serializable], function () {
        return 40;
      }), _initializer6$5 = applyDecoratedInitializer(_class2$L.prototype, "_fontFamily", [serializable], function () {
        return 'Arial';
      }), _initializer7$5 = applyDecoratedInitializer(_class2$L.prototype, "_lineHeight", [serializable], function () {
        return 40;
      }), _initializer8$5 = applyDecoratedInitializer(_class2$L.prototype, "_overflow", [serializable], function () {
        return Overflow.NONE;
      }), _initializer9$4 = applyDecoratedInitializer(_class2$L.prototype, "_enableWrapText", [serializable], function () {
        return true;
      }), _initializer10$4 = applyDecoratedInitializer(_class2$L.prototype, "_font", [serializable], function () {
        return null;
      }), _initializer11$4 = applyDecoratedInitializer(_class2$L.prototype, "_isSystemFontUsed", [serializable], function () {
        return true;
      }), _initializer12$3 = applyDecoratedInitializer(_class2$L.prototype, "_spacingX", [serializable], function () {
        return 0;
      }), _initializer13$3 = applyDecoratedInitializer(_class2$L.prototype, "_isItalic", [serializable], function () {
        return false;
      }), _initializer14$3 = applyDecoratedInitializer(_class2$L.prototype, "_isBold", [serializable], function () {
        return false;
      }), _initializer15$3 = applyDecoratedInitializer(_class2$L.prototype, "_isUnderline", [serializable], function () {
        return false;
      }), _initializer16$3 = applyDecoratedInitializer(_class2$L.prototype, "_underlineHeight", [serializable], function () {
        return 2;
      }), _initializer17$3 = applyDecoratedInitializer(_class2$L.prototype, "_cacheMode", [serializable], function () {
        return CacheMode.NONE;
      })), _class2$L)) || _class$Q) || _class$Q));
      legacyCC.Label = Label;

      var _stageOffset = 0;
      var _name2stageID = {};
      var config = {
        addStage: function addStage(name) {
          if (_name2stageID[name] !== undefined) {
            return;
          }

          var stageID = 1 << _stageOffset;
          _name2stageID[name] = stageID;
          _stageOffset += 1;
        },
        stageID: function stageID(name) {
          var id = _name2stageID[name];

          if (id === undefined) {
            return -1;
          }

          return id;
        },
        stageIDs: function stageIDs(nameList) {
          var key = 0;

          for (var _iterator = _createForOfIteratorHelperLoose(nameList), _step; !(_step = _iterator()).done;) {
            var name = _step.value;
            var id = _name2stageID[name];

            if (id !== undefined) {
              key |= id;
            }
          }

          return key;
        }
      };

      function createIA(device, data) {
        if (!data.positions) {
          console.error('The data must have positions field');
          return null;
        }

        var verts = [];
        var vcount = data.positions.length / 3;

        for (var i = 0; i < vcount; ++i) {
          verts.push(data.positions[3 * i], data.positions[3 * i + 1], data.positions[3 * i + 2]);

          if (data.normals) {
            verts.push(data.normals[3 * i], data.normals[3 * i + 1], data.normals[3 * i + 2]);
          }

          if (data.uvs) {
            verts.push(data.uvs[2 * i], data.uvs[2 * i + 1]);
          }

          if (data.colors) {
            verts.push(data.colors[3 * i], data.colors[3 * i + 1], data.colors[3 * i + 2]);
          }
        }

        var vfmt = [];
        vfmt.push(new Attribute(AttributeName.ATTR_POSITION, Format.RGB32F));

        if (data.normals) {
          vfmt.push(new Attribute(AttributeName.ATTR_NORMAL, Format.RGB32F));
        }

        if (data.uvs) {
          vfmt.push(new Attribute(AttributeName.ATTR_TEX_COORD, Format.RG32F));
        }

        if (data.colors) {
          vfmt.push(new Attribute(AttributeName.ATTR_COLOR, Format.RGB32F));
        }

        var vb = device.createBuffer(new BufferInfo(BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, verts.length * 4, verts.length * 4 / vcount));
        vb.update(new Float32Array(verts));
        var ib = null;

        if (data.indices) {
          ib = device.createBuffer(new BufferInfo(BufferUsageBit.INDEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, data.indices.length * 2, 2));
          ib.update(new Uint16Array(data.indices));
        }

        return device.createInputAssembler(new InputAssemblerInfo(vfmt, [vb], ib));
      }

      var RenderQueue$1;

      (function (RenderQueue) {
        RenderQueue[RenderQueue["OPAQUE"] = 0] = "OPAQUE";
        RenderQueue[RenderQueue["TRANSPARENT"] = 1] = "TRANSPARENT";
        RenderQueue[RenderQueue["OVERLAY"] = 2] = "OVERLAY";
      })(RenderQueue$1 || (RenderQueue$1 = {}));

      var PassStage;

      (function (PassStage) {
        PassStage[PassStage["DEFAULT"] = 1] = "DEFAULT";
        PassStage[PassStage["FORWARD"] = 2] = "FORWARD";
        PassStage[PassStage["SHADOWCAST"] = 4] = "SHADOWCAST";
      })(PassStage || (PassStage = {}));

      function nearestPOT(num) {
        --num;
        num |= num >> 16;
        num |= num >> 8;
        num |= num >> 4;
        num |= num >> 2;
        num |= num >> 1;
        ++num;
        return num;
      }

      function roundUp(n, alignment) {
        return Math.ceil(n / alignment) * alignment;
      }

      var TextureBufferPool = function () {
        function TextureBufferPool(device) {
          this._device = void 0;
          this._format = Format.UNKNOWN;
          this._formatSize = 0;
          this._chunks = [];
          this._chunkCount = 0;
          this._handles = [];
          this._region0 = new BufferTextureCopy();
          this._region1 = new BufferTextureCopy();
          this._region2 = new BufferTextureCopy();
          this._roundUpFn = null;
          this._bufferViewCtor = Uint8Array;
          this._channels = 4;
          this._alignment = 1;
          this._device = device;
        }

        var _proto = TextureBufferPool.prototype;

        _proto.initialize = function initialize(info) {
          var formatInfo = FormatInfos[info.format];
          this._format = info.format;
          this._formatSize = formatInfo.size;
          this._channels = formatInfo.count;
          this._bufferViewCtor = getTypedArrayConstructor(formatInfo);
          this._roundUpFn = info.roundUpFn || null;
          this._alignment = info.alignment || 1;

          if (info.inOrderFree) {
            this.alloc = this._McDonaldAlloc;
          }
        };

        _proto.destroy = function destroy() {
          for (var i = 0; i < this._chunkCount; ++i) {
            var chunk = this._chunks[i];
            chunk.texture.destroy();
          }

          this._chunks.length = 0;
          this._handles.length = 0;
        };

        _proto.alloc = function alloc(size, chunkIdx) {
          size = roundUp(size, this._alignment);
          var index = -1;
          var start = -1;

          if (chunkIdx !== undefined) {
            index = chunkIdx;
            start = this._findAvailableSpace(size, index);
          }

          if (start < 0) {
            for (var i = 0; i < this._chunkCount; ++i) {
              index = i;
              start = this._findAvailableSpace(size, index);

              if (start >= 0) {
                break;
              }
            }
          }

          if (start >= 0) {
            var chunk = this._chunks[index];
            chunk.start += size;
            var handle = {
              chunkIdx: index,
              start: start,
              end: start + size,
              texture: chunk.texture
            };

            this._handles.push(handle);

            return handle;
          }

          var targetSize = Math.sqrt(size / this._formatSize);
          var texLength = this._roundUpFn && this._roundUpFn(targetSize, this._formatSize) || Math.max(1024, nearestPOT(targetSize));

          var newChunk = this._chunks[this.createChunk(texLength)];

          newChunk.start += size;
          var texHandle = {
            chunkIdx: this._chunkCount - 1,
            start: 0,
            end: size,
            texture: newChunk.texture
          };

          this._handles.push(texHandle);

          return texHandle;
        };

        _proto.free = function free(handle) {
          for (var i = 0; i < this._handles.length; ++i) {
            if (this._handles[i] === handle) {
              this._chunks[handle.chunkIdx].end = handle.end;

              this._handles.splice(i, 1);

              return;
            }
          }
        };

        _proto.createChunk = function createChunk(length) {
          var texSize = length * length * this._formatSize;
          debug("TextureBufferPool: Allocate chunk " + this._chunkCount + ", size: " + texSize + ", format: " + this._format);

          var texture = this._device.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.SAMPLED | TextureUsageBit.TRANSFER_DST, this._format, length, length));

          var chunk = {
            texture: texture,
            size: texSize,
            start: 0,
            end: texSize
          };
          this._chunks[this._chunkCount] = chunk;
          return this._chunkCount++;
        };

        _proto.update = function update(handle, buffer) {
          var buffers = [];
          var regions = [];
          var start = handle.start / this._formatSize;
          var remainSize = buffer.byteLength / this._formatSize;
          var offsetX = start % handle.texture.width;
          var offsetY = Math.floor(start / handle.texture.width);
          var copySize = Math.min(handle.texture.width - offsetX, remainSize);
          var begin = 0;

          if (offsetX > 0) {
            this._region0.texOffset.x = offsetX;
            this._region0.texOffset.y = offsetY;
            this._region0.texExtent.width = copySize;
            this._region0.texExtent.height = 1;
            buffers.push(new this._bufferViewCtor(buffer, begin * this._formatSize, copySize * this._channels));
            regions.push(this._region0);
            offsetX = 0;
            offsetY += 1;
            remainSize -= copySize;
            begin += copySize;
          }

          if (remainSize > 0) {
            this._region1.texOffset.x = offsetX;
            this._region1.texOffset.y = offsetY;

            if (remainSize > handle.texture.width) {
              this._region1.texExtent.width = handle.texture.width;
              this._region1.texExtent.height = Math.floor(remainSize / handle.texture.width);
              copySize = this._region1.texExtent.width * this._region1.texExtent.height;
            } else {
              copySize = remainSize;
              this._region1.texExtent.width = copySize;
              this._region1.texExtent.height = 1;
            }

            buffers.push(new this._bufferViewCtor(buffer, begin * this._formatSize, copySize * this._channels));
            regions.push(this._region1);
            offsetX = 0;
            offsetY += this._region1.texExtent.height;
            remainSize -= copySize;
            begin += copySize;
          }

          if (remainSize > 0) {
            this._region2.texOffset.x = offsetX;
            this._region2.texOffset.y = offsetY;
            this._region2.texExtent.width = remainSize;
            this._region2.texExtent.height = 1;
            buffers.push(new this._bufferViewCtor(buffer, begin * this._formatSize, remainSize * this._channels));
            regions.push(this._region2);
          }

          this._device.copyBuffersToTexture(buffers, handle.texture, regions);
        };

        _proto._findAvailableSpace = function _findAvailableSpace(size, chunkIdx) {
          var chunk = this._chunks[chunkIdx];
          var isFound = false;
          var start = chunk.start;

          if (start + size <= chunk.size) {
            isFound = true;
          } else {
            start = 0;

            var handles = this._handles.filter(function (h) {
              return h.chunkIdx === chunkIdx;
            }).sort(function (a, b) {
              return a.start - b.start;
            });

            for (var i = 0; i < handles.length; i++) {
              var handle = handles[i];

              if (start + size <= handle.start) {
                isFound = true;
                break;
              }

              start = handle.end;
            }

            if (!isFound && start + size <= chunk.size) {
              isFound = true;
            }
          }

          return isFound ? start : -1;
        };

        _proto._McDonaldAlloc = function _McDonaldAlloc(size) {
          size = roundUp(size, this._alignment);

          for (var i = 0; i < this._chunkCount; ++i) {
            var chunk = this._chunks[i];
            var isFound = false;
            var start = chunk.start;

            if (start + size <= chunk.end) {
              isFound = true;
            } else if (start > chunk.end) {
              if (start + size <= chunk.size) {
                isFound = true;
              } else if (size <= chunk.end) {
                chunk.start = start = 0;
                isFound = true;
              }
            } else if (start === chunk.end) {
              chunk.start = start = 0;
              chunk.end = chunk.size;

              if (size <= chunk.end) {
                isFound = true;
              }
            }

            if (isFound) {
              chunk.start += size;
              var handle = {
                chunkIdx: i,
                start: start,
                end: start + size,
                texture: chunk.texture
              };

              this._handles.push(handle);

              return handle;
            }
          }

          var targetSize = Math.sqrt(size / this._formatSize);
          var texLength = this._roundUpFn && this._roundUpFn(targetSize, this._formatSize) || Math.max(1024, nearestPOT(targetSize));

          var newChunk = this._chunks[this.createChunk(texLength)];

          newChunk.start += size;
          var texHandle = {
            chunkIdx: this._chunkCount,
            start: 0,
            end: size,
            texture: newChunk.texture
          };

          this._handles.push(texHandle);

          return texHandle;
        };

        return TextureBufferPool;
      }();

      var NativeBufferPool = function () {
        function NativeBufferPool(dataType, entryBits, stride) {
          this._arrayBuffers = [];
          this._chunkSize = void 0;
          this._chunkSize = stride * (1 << entryBits);
        }

        var _proto = NativeBufferPool.prototype;

        _proto.allocateNewChunk = function allocateNewChunk() {
          return new ArrayBuffer(this._chunkSize);
        };

        return NativeBufferPool;
      }();

      var _Render2dViewDataType, _Render2dViewDataMemb, _NodeViewDataType, _NodeViewDataMembers, _PassViewDataType, _PassViewDataMembers, _AABBViewDataType, _AABBViewDataMembers;

      var contains$2 = function contains(a, t) {
        for (var i = 0; i < a.length; ++i) {
          if (a[i] === t) return true;
        }

        return false;
      };

      var BufferDataType;

      (function (BufferDataType) {
        BufferDataType[BufferDataType["UINT32"] = 0] = "UINT32";
        BufferDataType[BufferDataType["FLOAT32"] = 1] = "FLOAT32";
        BufferDataType[BufferDataType["NEVER"] = 2] = "NEVER";
      })(BufferDataType || (BufferDataType = {}));

      var BufferPool = function () {
        function BufferPool(poolType, dataType, dataMembers, enumType, entryBits) {
          if (entryBits === void 0) {
            entryBits = 8;
          }

          this._dataType = void 0;
          this._dataMembers = void 0;
          this._elementCount = void 0;
          this._entryBits = void 0;
          this._stride = void 0;
          this._entriesPerChunk = void 0;
          this._entryMask = void 0;
          this._chunkMask = void 0;
          this._poolFlag = void 0;
          this._arrayBuffers = [];
          this._freeLists = [];
          this._uint32BufferViews = [];
          this._float32BufferViews = [];
          this._hasUint32 = false;
          this._hasFloat32 = false;
          this._nativePool = void 0;
          this._elementCount = enumType.COUNT;
          this._entryBits = entryBits;
          this._dataType = dataType;
          this._dataMembers = dataMembers;
          var bytesPerElement = 4;
          this._stride = bytesPerElement * this._elementCount;
          this._entriesPerChunk = 1 << entryBits;
          this._entryMask = this._entriesPerChunk - 1;
          this._poolFlag = 1 << 30;
          this._chunkMask = ~(this._entryMask | this._poolFlag);
          this._nativePool = new NativeBufferPool(poolType, entryBits, this._stride);
          var type = BufferDataType.NEVER;
          var hasFloat32 = false;
          var hasUint32 = false;

          for (var e in dataType) {
            hasFloat32 = this._hasFloat32;
            hasUint32 = this._hasUint32;

            if (hasUint32 && hasFloat32) {
              break;
            }

            type = dataType[e];

            if (!hasFloat32 && type === BufferDataType.FLOAT32) {
              this._hasFloat32 = true;
            } else if (!hasUint32 && type === BufferDataType.UINT32) {
              this._hasUint32 = true;
            }
          }
        }

        var _proto = BufferPool.prototype;

        _proto.alloc = function alloc() {
          var i = 0;

          for (; i < this._freeLists.length; i++) {
            var list = this._freeLists[i];

            if (list.length) {
              var j = list[list.length - 1];
              list.length--;
              return (i << this._entryBits) + j + this._poolFlag;
            }
          }

          var buffer = this._nativePool.allocateNewChunk();

          var float32BufferViews = [];
          var uint32BufferViews = [];
          var freeList = [];
          var hasFloat32 = this._hasFloat32;
          var hasUint32 = this._hasUint32;

          for (var _j = 0; _j < this._entriesPerChunk; _j++) {
            if (hasFloat32) {
              float32BufferViews.push(new Float32Array(buffer, this._stride * _j, this._elementCount));
            }

            if (hasUint32) {
              uint32BufferViews.push(new Uint32Array(buffer, this._stride * _j, this._elementCount));
            }

            if (_j) {
              freeList.push(_j);
            }
          }

          if (hasUint32) {
            this._uint32BufferViews.push(uint32BufferViews);
          }

          if (hasFloat32) {
            this._float32BufferViews.push(float32BufferViews);
          }

          this._freeLists.push(freeList);

          this._arrayBuffers.push(buffer);

          var handle = (i << this._entryBits) + this._poolFlag;
          return handle;
        };

        _proto.getBuffer = function getBuffer(handle) {
          var chunk = (this._chunkMask & handle) >> this._entryBits;
          var entry = this._entryMask & handle;
          var bufferViews = this._hasFloat32 ? this._float32BufferViews : this._uint32BufferViews;

          if ( (!handle || chunk < 0 || chunk >= bufferViews.length || entry < 0 || entry >= this._entriesPerChunk || contains$2(this._freeLists[chunk], entry))) {
            console.warn('invalid buffer pool handle');
            return [];
          }

          return bufferViews[chunk][entry];
        };

        _proto.getTypedArray = function getTypedArray(handle, element) {
          var chunk = (this._chunkMask & handle) >> this._entryBits;
          var entry = this._entryMask & handle;
          var bufferViews = this._dataType[element] === BufferDataType.UINT32 ? this._uint32BufferViews : this._float32BufferViews;

          if ( (!handle || chunk < 0 || chunk >= bufferViews.length || entry < 0 || entry >= this._entriesPerChunk || contains$2(this._freeLists[chunk], entry))) {
            console.warn('invalid buffer pool handle');
            return [];
          }

          var index = element;
          var view = bufferViews[chunk][entry];
          var count = this._dataMembers[element];
          return view.subarray(index, index + count);
        };

        _proto.free = function free(handle) {
          var chunk = (this._chunkMask & handle) >> this._entryBits;
          var entry = this._entryMask & handle;

          if ( (!handle || chunk < 0 || chunk >= this._freeLists.length || entry < 0 || entry >= this._entriesPerChunk || contains$2(this._freeLists[chunk], entry))) {
            console.warn('invalid buffer pool handle');
            return;
          }

          var bufferViews = this._hasUint32 ? this._uint32BufferViews : this._float32BufferViews;
          bufferViews[chunk][entry].fill(0);

          this._freeLists[chunk].push(entry);
        };

        return BufferPool;
      }();

      var PoolType;

      (function (PoolType) {
        PoolType[PoolType["NODE"] = 0] = "NODE";
        PoolType[PoolType["PASS"] = 1] = "PASS";
        PoolType[PoolType["AABB"] = 2] = "AABB";
        PoolType[PoolType["RENDER2D"] = 3] = "RENDER2D";
      })(PoolType || (PoolType = {}));

      var NULL_HANDLE = 0;
      var Render2dView;

      (function (Render2dView) {
        Render2dView[Render2dView["POSITION"] = 0] = "POSITION";
        Render2dView[Render2dView["UV"] = 3] = "UV";
        Render2dView[Render2dView["COLOR"] = 5] = "COLOR";
        Render2dView[Render2dView["COUNT"] = 9] = "COUNT";
      })(Render2dView || (Render2dView = {}));

      var Render2dViewDataType = (_Render2dViewDataType = {}, _Render2dViewDataType[Render2dView.POSITION] = BufferDataType.FLOAT32, _Render2dViewDataType[Render2dView.UV] = BufferDataType.FLOAT32, _Render2dViewDataType[Render2dView.COLOR] = BufferDataType.UINT32, _Render2dViewDataType[Render2dView.COUNT] = BufferDataType.NEVER, _Render2dViewDataType);
      var Render2dViewDataMembers = (_Render2dViewDataMemb = {}, _Render2dViewDataMemb[Render2dView.POSITION] = Render2dView.UV - Render2dView.POSITION, _Render2dViewDataMemb[Render2dView.UV] = Render2dView.COLOR - Render2dView.UV, _Render2dViewDataMemb[Render2dView.COLOR] = Render2dView.COUNT - Render2dView.COLOR, _Render2dViewDataMemb[Render2dView.COUNT] = 1, _Render2dViewDataMemb);
      var Render2dPool = new BufferPool(PoolType.RENDER2D, Render2dViewDataType, Render2dViewDataMembers, Render2dView);
      var NodeView;

      (function (NodeView) {
        NodeView[NodeView["DIRTY_FLAG"] = 0] = "DIRTY_FLAG";
        NodeView[NodeView["LAYER"] = 1] = "LAYER";
        NodeView[NodeView["WORLD_SCALE"] = 2] = "WORLD_SCALE";
        NodeView[NodeView["WORLD_POSITION"] = 5] = "WORLD_POSITION";
        NodeView[NodeView["WORLD_ROTATION"] = 8] = "WORLD_ROTATION";
        NodeView[NodeView["WORLD_MATRIX"] = 12] = "WORLD_MATRIX";
        NodeView[NodeView["LOCAL_SCALE"] = 28] = "LOCAL_SCALE";
        NodeView[NodeView["LOCAL_POSITION"] = 31] = "LOCAL_POSITION";
        NodeView[NodeView["LOCAL_ROTATION"] = 34] = "LOCAL_ROTATION";
        NodeView[NodeView["COUNT"] = 38] = "COUNT";
      })(NodeView || (NodeView = {}));

      var NodeViewDataType = (_NodeViewDataType = {}, _NodeViewDataType[NodeView.DIRTY_FLAG] = BufferDataType.UINT32, _NodeViewDataType[NodeView.LAYER] = BufferDataType.UINT32, _NodeViewDataType[NodeView.WORLD_SCALE] = BufferDataType.FLOAT32, _NodeViewDataType[NodeView.WORLD_POSITION] = BufferDataType.FLOAT32, _NodeViewDataType[NodeView.WORLD_ROTATION] = BufferDataType.FLOAT32, _NodeViewDataType[NodeView.WORLD_MATRIX] = BufferDataType.FLOAT32, _NodeViewDataType[NodeView.LOCAL_SCALE] = BufferDataType.FLOAT32, _NodeViewDataType[NodeView.LOCAL_POSITION] = BufferDataType.FLOAT32, _NodeViewDataType[NodeView.LOCAL_ROTATION] = BufferDataType.FLOAT32, _NodeViewDataType[NodeView.COUNT] = BufferDataType.NEVER, _NodeViewDataType);
      var NodeViewDataMembers = (_NodeViewDataMembers = {}, _NodeViewDataMembers[NodeView.DIRTY_FLAG] = NodeView.LAYER - NodeView.DIRTY_FLAG, _NodeViewDataMembers[NodeView.LAYER] = NodeView.WORLD_SCALE - NodeView.LAYER, _NodeViewDataMembers[NodeView.WORLD_SCALE] = NodeView.WORLD_POSITION - NodeView.WORLD_SCALE, _NodeViewDataMembers[NodeView.WORLD_POSITION] = NodeView.WORLD_ROTATION - NodeView.WORLD_POSITION, _NodeViewDataMembers[NodeView.WORLD_ROTATION] = NodeView.WORLD_MATRIX - NodeView.WORLD_ROTATION, _NodeViewDataMembers[NodeView.WORLD_MATRIX] = NodeView.LOCAL_SCALE - NodeView.WORLD_MATRIX, _NodeViewDataMembers[NodeView.LOCAL_SCALE] = NodeView.LOCAL_POSITION - NodeView.LOCAL_SCALE, _NodeViewDataMembers[NodeView.LOCAL_POSITION] = NodeView.LOCAL_ROTATION - NodeView.LOCAL_POSITION, _NodeViewDataMembers[NodeView.LOCAL_ROTATION] = NodeView.COUNT - NodeView.LOCAL_ROTATION, _NodeViewDataMembers[NodeView.COUNT] = 1, _NodeViewDataMembers);
      var NodePool = new BufferPool(PoolType.NODE, NodeViewDataType, NodeViewDataMembers, NodeView);
      var PassView;

      (function (PassView) {
        PassView[PassView["PRIORITY"] = 0] = "PRIORITY";
        PassView[PassView["STAGE"] = 1] = "STAGE";
        PassView[PassView["PHASE"] = 2] = "PHASE";
        PassView[PassView["PRIMITIVE"] = 3] = "PRIMITIVE";
        PassView[PassView["BATCHING_SCHEME"] = 4] = "BATCHING_SCHEME";
        PassView[PassView["DYNAMIC_STATE"] = 5] = "DYNAMIC_STATE";
        PassView[PassView["HASH"] = 6] = "HASH";
        PassView[PassView["COUNT"] = 7] = "COUNT";
      })(PassView || (PassView = {}));

      var PassViewDataType = (_PassViewDataType = {}, _PassViewDataType[PassView.PRIORITY] = BufferDataType.UINT32, _PassViewDataType[PassView.STAGE] = BufferDataType.UINT32, _PassViewDataType[PassView.PHASE] = BufferDataType.UINT32, _PassViewDataType[PassView.PRIMITIVE] = BufferDataType.UINT32, _PassViewDataType[PassView.BATCHING_SCHEME] = BufferDataType.UINT32, _PassViewDataType[PassView.DYNAMIC_STATE] = BufferDataType.UINT32, _PassViewDataType[PassView.HASH] = BufferDataType.UINT32, _PassViewDataType[PassView.COUNT] = BufferDataType.NEVER, _PassViewDataType);
      var PassViewDataMembers = (_PassViewDataMembers = {}, _PassViewDataMembers[PassView.PRIORITY] = PassView.STAGE - PassView.PRIORITY, _PassViewDataMembers[PassView.STAGE] = PassView.PHASE - PassView.STAGE, _PassViewDataMembers[PassView.PHASE] = PassView.PRIMITIVE - PassView.PHASE, _PassViewDataMembers[PassView.PRIMITIVE] = PassView.BATCHING_SCHEME - PassView.PRIMITIVE, _PassViewDataMembers[PassView.BATCHING_SCHEME] = PassView.DYNAMIC_STATE - PassView.BATCHING_SCHEME, _PassViewDataMembers[PassView.DYNAMIC_STATE] = PassView.HASH - PassView.DYNAMIC_STATE, _PassViewDataMembers[PassView.HASH] = PassView.COUNT - PassView.HASH, _PassViewDataMembers[PassView.COUNT] = 1, _PassViewDataMembers);
      var PassPool = new BufferPool(PoolType.PASS, PassViewDataType, PassViewDataMembers, PassView);
      var AABBView;

      (function (AABBView) {
        AABBView[AABBView["CENTER"] = 0] = "CENTER";
        AABBView[AABBView["HALFEXTENTS"] = 3] = "HALFEXTENTS";
        AABBView[AABBView["COUNT"] = 6] = "COUNT";
      })(AABBView || (AABBView = {}));

      var AABBViewDataType = (_AABBViewDataType = {}, _AABBViewDataType[AABBView.CENTER] = BufferDataType.FLOAT32, _AABBViewDataType[AABBView.HALFEXTENTS] = BufferDataType.FLOAT32, _AABBViewDataType[AABBView.COUNT] = BufferDataType.NEVER, _AABBViewDataType);
      var AABBViewDataMembers = (_AABBViewDataMembers = {}, _AABBViewDataMembers[AABBView.CENTER] = AABBView.HALFEXTENTS - AABBView.CENTER, _AABBViewDataMembers[AABBView.HALFEXTENTS] = AABBView.COUNT - AABBView.HALFEXTENTS, _AABBViewDataMembers[AABBView.COUNT] = 1, _AABBViewDataMembers);
      var AABBPool = new BufferPool(PoolType.AABB, AABBViewDataType, AABBViewDataMembers, AABBView);

      var addStage = config.addStage;

      var renderer = /*#__PURE__*/Object.freeze({
        __proto__: null,
        addStage: addStage,
        scene: index$2,
        createIA: createIA,
        get RenderQueue () { return RenderQueue$1; },
        get PassStage () { return PassStage; },
        genHandle: genHandle,
        getTypeFromHandle: getTypeFromHandle,
        getBindingFromHandle: getBindingFromHandle,
        getCountFromHandle: getCountFromHandle,
        getOffsetFromHandle: getOffsetFromHandle,
        customizeType: customizeType,
        type2reader: type2reader,
        type2writer: type2writer,
        type2validator: type2validator,
        getDefaultFromType: getDefaultFromType,
        getStringFromType: getStringFromType,
        overrideMacros: overrideMacros,
        get BatchingSchemes () { return BatchingSchemes; },
        Pass: Pass,
        flattenShaderLocation: flattenShaderLocation,
        getDeviceShaderVersion: getDeviceShaderVersion,
        programLib: programLib,
        nearestPOT: nearestPOT,
        TextureBufferPool: TextureBufferPool,
        MaterialInstance: MaterialInstance,
        PassInstance: PassInstance,
        get PoolType () { return PoolType; },
        NULL_HANDLE: NULL_HANDLE,
        get Render2dView () { return Render2dView; },
        Render2dPool: Render2dPool,
        get NodeView () { return NodeView; },
        NodePool: NodePool,
        get PassView () { return PassView; },
        PassPool: PassPool,
        get AABBView () { return AABBView; },
        AABBPool: AABBPool,
        RenderScene: RenderScene
      });
      exports('renderer', renderer);

      var LineCap;

      (function (LineCap) {
        LineCap[LineCap["BUTT"] = 0] = "BUTT";
        LineCap[LineCap["ROUND"] = 1] = "ROUND";
        LineCap[LineCap["SQUARE"] = 2] = "SQUARE";
      })(LineCap || (LineCap = {}));

      ccenum(LineCap);
      var LineJoin;

      (function (LineJoin) {
        LineJoin[LineJoin["BEVEL"] = 0] = "BEVEL";
        LineJoin[LineJoin["ROUND"] = 1] = "ROUND";
        LineJoin[LineJoin["MITER"] = 2] = "MITER";
      })(LineJoin || (LineJoin = {}));

      ccenum(LineJoin);
      var PointFlags;

      (function (PointFlags) {
        PointFlags[PointFlags["PT_CORNER"] = 1] = "PT_CORNER";
        PointFlags[PointFlags["PT_LEFT"] = 2] = "PT_LEFT";
        PointFlags[PointFlags["PT_BEVEL"] = 4] = "PT_BEVEL";
        PointFlags[PointFlags["PT_INNERBEVEL"] = 8] = "PT_INNERBEVEL";
      })(PointFlags || (PointFlags = {}));

      ccenum(PointFlags);

      var PI = Math.PI;
      var min$2 = Math.min;
      var max$3 = Math.max;
      var cos$1 = Math.cos;
      var sin = Math.sin;
      var abs$1 = Math.abs;
      var sign$1 = Math.sign;
      var KAPPA90 = 0.5522847493;
      function arc(ctx, cx, cy, r, startAngle, endAngle, counterclockwise) {
        counterclockwise = counterclockwise || false;
        var a = 0;
        var da = 0;
        var hda = 0;
        var kappa = 0;
        var dx = 0;
        var dy = 0;
        var x = 0;
        var y = 0;
        var tanx = 0;
        var tany = 0;
        var px = 0;
        var py = 0;
        var ptanx = 0;
        var ptany = 0;
        var i = 0;
        var ndivs = 0;
        da = endAngle - startAngle;

        if (counterclockwise) {
          if (abs$1(da) >= PI * 2) {
            da = PI * 2;
          } else {
            while (da < 0) {
              da += PI * 2;
            }
          }
        } else if (abs$1(da) >= PI * 2) {
          da = -PI * 2;
        } else {
          while (da > 0) {
            da -= PI * 2;
          }
        }

        ndivs = max$3(1, min$2(abs$1(da) / (PI * 0.5) + 0.5, 5)) | 0;
        hda = da / ndivs / 2.0;
        kappa = abs$1(4.0 / 3.0 * (1 - cos$1(hda)) / sin(hda));

        if (!counterclockwise) {
          kappa = -kappa;
        }

        for (i = 0; i <= ndivs; i++) {
          a = startAngle + da * (i / ndivs);
          dx = cos$1(a);
          dy = sin(a);
          x = cx + dx * r;
          y = cy + dy * r;
          tanx = -dy * r * kappa;
          tany = dx * r * kappa;

          if (i === 0) {
            ctx.moveTo(x, y);
          } else {
            ctx.bezierCurveTo(px + ptanx, py + ptany, x - tanx, y - tany, x, y);
          }

          px = x;
          py = y;
          ptanx = tanx;
          ptany = tany;
        }
      }
      function ellipse(ctx, cx, cy, rx, ry) {
        ctx.moveTo(cx - rx, cy);
        ctx.bezierCurveTo(cx - rx, cy + ry * KAPPA90, cx - rx * KAPPA90, cy + ry, cx, cy + ry);
        ctx.bezierCurveTo(cx + rx * KAPPA90, cy + ry, cx + rx, cy + ry * KAPPA90, cx + rx, cy);
        ctx.bezierCurveTo(cx + rx, cy - ry * KAPPA90, cx + rx * KAPPA90, cy - ry, cx, cy - ry);
        ctx.bezierCurveTo(cx - rx * KAPPA90, cy - ry, cx - rx, cy - ry * KAPPA90, cx - rx, cy);
        ctx.close();
      }
      function roundRect(ctx, x, y, w, h, r) {
        if (r < 0.1) {
          ctx.rect(x, y, w, h);
        } else {
          var rx = min$2(r, abs$1(w) * 0.5) * sign$1(w);
          var ry = min$2(r, abs$1(h) * 0.5) * sign$1(h);
          ctx.moveTo(x, y + ry);
          ctx.lineTo(x, y + h - ry);
          ctx.bezierCurveTo(x, y + h - ry * (1 - KAPPA90), x + rx * (1 - KAPPA90), y + h, x + rx, y + h);
          ctx.lineTo(x + w - rx, y + h);
          ctx.bezierCurveTo(x + w - rx * (1 - KAPPA90), y + h, x + w, y + h - ry * (1 - KAPPA90), x + w, y + h - ry);
          ctx.lineTo(x + w, y + ry);
          ctx.bezierCurveTo(x + w, y + ry * (1 - KAPPA90), x + w - rx * (1 - KAPPA90), y, x + w - rx, y);
          ctx.lineTo(x + rx, y);
          ctx.bezierCurveTo(x + rx * (1 - KAPPA90), y, x, y + ry * (1 - KAPPA90), x, y + ry);
          ctx.close();
        }
      }
      function tesselateBezier(ctx, x1, y1, x2, y2, x3, y3, x4, y4, level, type) {
        var x12 = 0;
        var y12 = 0;
        var x23 = 0;
        var y23 = 0;
        var x34 = 0;
        var y34 = 0;
        var x123 = 0;
        var y123 = 0;
        var x234 = 0;
        var y234 = 0;
        var x1234 = 0;
        var y1234 = 0;
        var dx = 0;
        var dy = 0;
        var d2 = 0;
        var d3 = 0;

        if (level > 10) {
          return;
        }

        x12 = (x1 + x2) * 0.5;
        y12 = (y1 + y2) * 0.5;
        x23 = (x2 + x3) * 0.5;
        y23 = (y2 + y3) * 0.5;
        x34 = (x3 + x4) * 0.5;
        y34 = (y3 + y4) * 0.5;
        x123 = (x12 + x23) * 0.5;
        y123 = (y12 + y23) * 0.5;
        dx = x4 - x1;
        dy = y4 - y1;
        d2 = abs$1((x2 - x4) * dy - (y2 - y4) * dx);
        d3 = abs$1((x3 - x4) * dy - (y3 - y4) * dx);

        if ((d2 + d3) * (d2 + d3) < ctx.tessTol * (dx * dx + dy * dy)) {
          ctx.addPoint(x4, y4, type === 0 ? type | PointFlags.PT_BEVEL : type);
          return;
        }

        x234 = (x23 + x34) * 0.5;
        y234 = (y23 + y34) * 0.5;
        x1234 = (x123 + x234) * 0.5;
        y1234 = (y123 + y234) * 0.5;
        tesselateBezier(ctx, x1, y1, x12, y12, x123, y123, x1234, y1234, level + 1, 0);
        tesselateBezier(ctx, x1234, y1234, x234, y234, x34, y34, x4, y4, level + 1, type);
      }

      var Point = function (_Vec) {
        _inheritsLoose(Point, _Vec);

        function Point(x, y) {
          var _this;

          _this = _Vec.call(this, x, y) || this;
          _this.dx = 0;
          _this.dy = 0;
          _this.dmx = 0;
          _this.dmy = 0;
          _this.flags = 0;
          _this.len = 0;

          _this.reset();

          return _this;
        }

        var _proto = Point.prototype;

        _proto.reset = function reset() {
          this.dx = 0;
          this.dy = 0;
          this.dmx = 0;
          this.dmy = 0;
          this.flags = 0;
          this.len = 0;
        };

        return Point;
      }(Vec2);
      var Path = function () {
        function Path() {
          this.closed = false;
          this.bevel = 0;
          this.complex = true;
          this.points = [];
          this.reset();
        }

        var _proto2 = Path.prototype;

        _proto2.reset = function reset() {
          this.closed = false;
          this.bevel = 0;
          this.complex = true;

          if (this.points) {
            this.points.length = 0;
          } else {
            this.points = [];
          }
        };

        return Path;
      }();
      var Impl = function () {
        function Impl(comp) {
          this.dataOffset = 0;
          this.updatePathOffset = false;
          this.pathLength = 0;
          this.pathOffset = 0;
          this.paths = [];
          this.tessTol = 0.25;
          this.distTol = 0.01;
          this.fillColor = Color.WHITE.clone();
          this.lineCap = LineCap.BUTT;
          this.strokeColor = Color.BLACK.clone();
          this.lineJoin = LineJoin.MITER;
          this.lineWidth = 0;
          this.pointsOffset = 0;
          this._commandX = 0;
          this._commandY = 0;
          this._points = [];
          this._renderDataList = [];
          this._curPath = null;
          this._comp = void 0;
          this._comp = comp;
        }

        var _proto3 = Impl.prototype;

        _proto3.moveTo = function moveTo(x, y) {
          if (this.updatePathOffset) {
            this.pathOffset = this.pathLength;
            this.updatePathOffset = false;
          }

          this._addPath();

          this.addPoint(x, y, PointFlags.PT_CORNER);
          this._commandX = x;
          this._commandY = y;
        };

        _proto3.lineTo = function lineTo(x, y) {
          this.addPoint(x, y, PointFlags.PT_CORNER);
          this._commandX = x;
          this._commandY = y;
        };

        _proto3.bezierCurveTo = function bezierCurveTo(c1x, c1y, c2x, c2y, x, y) {
          var path = this._curPath;
          var last = path.points[path.points.length - 1];

          if (!last) {
            return;
          }

          if (last.x === c1x && last.y === c1y && c2x === x && c2y === y) {
            this.lineTo(x, y);
            return;
          }

          tesselateBezier(this, last.x, last.y, c1x, c1y, c2x, c2y, x, y, 0, PointFlags.PT_CORNER);
          this._commandX = x;
          this._commandY = y;
        };

        _proto3.quadraticCurveTo = function quadraticCurveTo(cx, cy, x, y) {
          var x0 = this._commandX;
          var y0 = this._commandY;
          this.bezierCurveTo(x0 + 2.0 / 3.0 * (cx - x0), y0 + 2.0 / 3.0 * (cy - y0), x + 2.0 / 3.0 * (cx - x), y + 2.0 / 3.0 * (cy - y), x, y);
        };

        _proto3.arc = function arc$1(cx, cy, r, startAngle, endAngle, counterclockwise) {
          arc(this, cx, cy, r, startAngle, endAngle, counterclockwise);
        };

        _proto3.ellipse = function ellipse$1(cx, cy, rx, ry) {
          ellipse(this, cx, cy, rx, ry);

          this._curPath.complex = false;
        };

        _proto3.circle = function circle(cx, cy, r) {
          ellipse(this, cx, cy, r, r);

          this._curPath.complex = false;
        };

        _proto3.rect = function rect(x, y, w, h) {
          this.moveTo(x, y);
          this.lineTo(x + w, y);
          this.lineTo(x + w, y + h);
          this.lineTo(x, y + h);
          this.close();
          this._curPath.complex = false;
        };

        _proto3.roundRect = function roundRect$1(x, y, w, h, r) {
          roundRect(this, x, y, w, h, r);

          this._curPath.complex = false;
        };

        _proto3.clear = function clear() {
          this.pathLength = 0;
          this.pathOffset = 0;
          this.pointsOffset = 0;
          this.dataOffset = 0;
          this._curPath = null;
          this.paths.length = 0;
          this._points.length = 0;
          var dataList = this._renderDataList;

          for (var i = 0, l = dataList.length; i < l; i++) {
            var data = dataList[i];

            if (!data) {
              continue;
            }

            MeshRenderData.remove(data);
            data.removeRenderDrawInfo(this._comp);
          }

          this._renderDataList.length = 0;
        };

        _proto3.close = function close() {
          this._curPath.closed = true;
        };

        _proto3.requestRenderData = function requestRenderData() {
          var renderData = MeshRenderData.add();

          this._renderDataList.push(renderData);

          return renderData;
        };

        _proto3.getRenderDataList = function getRenderDataList() {
          if (this._renderDataList.length === 0) {
            this.requestRenderData();
          }

          return this._renderDataList;
        };

        _proto3.addPoint = function addPoint(x, y, flags) {
          var path = this._curPath;

          if (!path) {
            return;
          }

          var points = this._points;
          var pathPoints = path.points;
          var offset = this.pointsOffset++;
          var pt = points[offset];

          if (!pt) {
            pt = new Point(x, y);
            points.push(pt);
          } else {
            pt.x = x;
            pt.y = y;
          }

          pt.flags = flags;
          pathPoints.push(pt);
        };

        _proto3._addPath = function _addPath() {
          var offset = this.pathLength;
          var path = this.paths[offset];

          if (!path) {
            path = new Path();
            this.paths.push(path);
          } else {
            path.reset();
          }

          this.pathLength++;
          this._curPath = path;
          return path;
        };

        return Impl;
      }();

      var _dec$R, _dec2$n, _dec3$a, _dec4$5, _class$R, _class2$M, _initializer$C, _initializer2$o, _initializer3$j, _initializer4$f, _initializer5$a, _initializer6$6, _class3$h, _temp$p;
      var attributes = vfmtPosColor.concat([new Attribute('a_dist', Format.R32F)]);
      var componentPerVertex = getComponentPerVertex(attributes);
      var stride = getAttributeStride(attributes);
      var Graphics = exports('Graphics', (_dec$R = ccclass('cc.Graphics'), _dec2$n = executionOrder(110), _dec3$a = type(LineJoin), _dec4$5 = type(LineCap), _dec$R(_class$R = _dec2$n(_class$R = (_class2$M = (_temp$p = _class3$h = function (_UIRenderer) {
        _inheritsLoose(Graphics, _UIRenderer);

        function Graphics() {
          var _this;

          _this = _UIRenderer.call(this) || this;
          _this.impl = null;
          _this.model = null;
          _this._lineWidth = _initializer$C && _initializer$C();
          _this._strokeColor = _initializer2$o && _initializer2$o();
          _this._lineJoin = _initializer3$j && _initializer3$j();
          _this._lineCap = _initializer4$f && _initializer4$f();
          _this._fillColor = _initializer5$a && _initializer5$a();
          _this._miterLimit = _initializer6$6 && _initializer6$6();
          _this._isDrawing = false;
          _this._isNeedUploadData = true;
          _this._graphicsUseSubMeshes = [];
          _this._instanceMaterialType = InstanceMaterialType.ADD_COLOR;
          _this.impl = new Impl(_assertThisInitialized(_this));

          return _this;
        }

        var _proto = Graphics.prototype;

        _proto.onRestore = function onRestore() {
          if (!this.impl) {
            this._flushAssembler();
          }
        };

        _proto.onLoad = function onLoad() {
          _UIRenderer.prototype.onLoad.call(this);

          {
            this.model = director.root.createModel(Model);
            this.model.node = this.model.transform = this.node;
          }

          this._flushAssembler();
        };

        _proto.onEnable = function onEnable() {
          _UIRenderer.prototype.onEnable.call(this);

          this._updateMtlForGraphics();
        };

        _proto.onDestroy = function onDestroy() {
          this._sceneGetter = null;

          {
            if (this.model) {
              director.root.destroyModel(this.model);
              this.model = null;
            }

            var subMeshLength = this._graphicsUseSubMeshes.length;

            if (subMeshLength > 0) {
              for (var i = 0; i < subMeshLength; ++i) {
                this._graphicsUseSubMeshes[i].destroy();
              }

              this._graphicsUseSubMeshes.length = 0;
            }
          }

          if (this.impl) {
            this._isDrawing = false;
            this.impl.clear();
            this.impl = null;
          }

          _UIRenderer.prototype.onDestroy.call(this);
        };

        _proto.moveTo = function moveTo(x, y) {
          if (!this.impl) {
            return;
          }

          this.impl.moveTo(x, y);
        };

        _proto.lineTo = function lineTo(x, y) {
          if (!this.impl) {
            return;
          }

          this.impl.lineTo(x, y);
        };

        _proto.bezierCurveTo = function bezierCurveTo(c1x, c1y, c2x, c2y, x, y) {
          if (!this.impl) {
            return;
          }

          this.impl.bezierCurveTo(c1x, c1y, c2x, c2y, x, y);
        };

        _proto.quadraticCurveTo = function quadraticCurveTo(cx, cy, x, y) {
          if (!this.impl) {
            return;
          }

          this.impl.quadraticCurveTo(cx, cy, x, y);
        };

        _proto.arc = function arc(cx, cy, r, startAngle, endAngle, counterclockwise) {
          if (!this.impl) {
            return;
          }

          this.impl.arc(cx, cy, r, startAngle, endAngle, counterclockwise);
        };

        _proto.ellipse = function ellipse(cx, cy, rx, ry) {
          if (!this.impl) {
            return;
          }

          this.impl.ellipse(cx, cy, rx, ry);
        };

        _proto.circle = function circle(cx, cy, r) {
          if (!this.impl) {
            return;
          }

          this.impl.circle(cx, cy, r);
        };

        _proto.rect = function rect(x, y, w, h) {
          if (!this.impl) {
            return;
          }

          this.impl.rect(x, y, w, h);
        };

        _proto.roundRect = function roundRect(x, y, w, h, r) {
          if (!this.impl) {
            return;
          }

          this.impl.roundRect(x, y, w, h, r);
        };

        _proto.fillRect = function fillRect(x, y, w, h) {
          this.rect(x, y, w, h);
          this.fill();
        };

        _proto.clear = function clear() {
          if (!this.impl) {
            return;
          }

          this.impl.clear();
          this._isDrawing = false;

          if (this.model) {
            for (var i = 0; i < this.model.subModels.length; i++) {
              var subModel = this.model.subModels[i];
              subModel.inputAssembler.indexCount = 0;
            }
          }

          this.markForUpdateRenderData();
        };

        _proto.close = function close() {
          if (!this.impl) {
            return;
          }

          this.impl.close();
        };

        _proto.stroke = function stroke() {
          if (!this._assembler) {
            this._flushAssembler();
          }

          this._isDrawing = true;
          this._isNeedUploadData = true;

          this._assembler.stroke(this);
        };

        _proto.fill = function fill() {
          if (!this._assembler) {
            this._flushAssembler();
          }

          this._isDrawing = true;
          this._isNeedUploadData = true;

          this._assembler.fill(this);
        };

        _proto._updateMtlForGraphics = function _updateMtlForGraphics() {
          var mat;

          if (this._customMaterial) {
            mat = this.getMaterialInstance(0);
          } else {
            mat = builtinResMgr.get('ui-graphics-material');
            this.setMaterial(mat, 0);
            mat = this.getMaterialInstance(0);
            mat.recompileShaders({
              USE_LOCAL: true
            });
          }
        };

        _proto.activeSubModel = function activeSubModel(idx) {
          if (!this.model) {
            warnID(4500, this.node.name);
            return;
          }

          if (this.model.subModels.length <= idx) {
            var gfxDevice = deviceManager.gfxDevice;
            var vertexBuffer = gfxDevice.createBuffer(new BufferInfo(BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, 65535 * stride, stride));
            var indexBuffer = gfxDevice.createBuffer(new BufferInfo(BufferUsageBit.INDEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, 65535 * Uint16Array.BYTES_PER_ELEMENT * 2, Uint16Array.BYTES_PER_ELEMENT));
            var renderMesh = new RenderingSubMesh([vertexBuffer], attributes, PrimitiveMode.TRIANGLE_LIST, indexBuffer);
            renderMesh.subMeshIdx = 0;
            this.model.initSubModel(idx, renderMesh, this.getMaterialInstance(0));

            this._graphicsUseSubMeshes.push(renderMesh);
          }
        };

        _proto._uploadData = function _uploadData() {
          var impl = this.impl;

          if (!impl) {
            return;
          }

          var renderDataList = impl && impl.getRenderDataList();

          if (renderDataList.length <= 0 || !this.model) {
            return;
          }

          var subModelList = this.model.subModels;

          for (var i = 0; i < renderDataList.length; i++) {
            var renderData = renderDataList[i];
            var ia = subModelList[i].inputAssembler;

            if (renderData.lastFilledVertex === renderData.vertexStart) {
              continue;
            }

            var vb = new Float32Array(renderData.vData.buffer, 0, renderData.vertexStart * componentPerVertex);
            ia.vertexBuffers[0].update(vb);
            ia.vertexCount = renderData.vertexStart;
            var ib = new Uint16Array(renderData.iData.buffer, 0, renderData.indexStart);
            ia.indexBuffer.update(ib);
            ia.indexCount = renderData.indexStart;
            renderData.lastFilledVertex = renderData.vertexStart;
            renderData.lastFilledIndex = renderData.indexStart;
          }

          this._isNeedUploadData = false;
        };

        _proto._render = function _render(render) {
          if (this._isNeedUploadData) {
            if (this.impl) {
              var renderDataList = this.impl.getRenderDataList();
              var len = this.model.subModels.length;

              if (renderDataList.length > len) {
                for (var i = len; i < renderDataList.length; i++) {
                  this.activeSubModel(i);
                }
              }
            }

            this._uploadData();
          }

          render.commitModel(this, this.model, this.getMaterialInstance(0));
        };

        _proto._flushAssembler = function _flushAssembler() {
          var assembler = Graphics.Assembler.getAssembler(this);

          if (this._assembler !== assembler) {
            this._assembler = assembler;
          }
        };

        _proto._canRender = function _canRender() {
          if (!_UIRenderer.prototype._canRender.call(this)) {
            return false;
          }

          {
            return !!this.model && this._isDrawing;
          }
        };

        _proto.updateRenderer = function updateRenderer() {
          _UIRenderer.prototype.updateRenderer.call(this);
        };

        _proto.createRenderEntity = function createRenderEntity() {
          return new RenderEntity(RenderEntityType.DYNAMIC);
        };

        _createClass(Graphics, [{
          key: "lineWidth",
          get: function get() {
            return this._lineWidth;
          },
          set: function set(value) {
            this._lineWidth = value;

            if (!this.impl) {
              return;
            }

            this.impl.lineWidth = value;
          }
        }, {
          key: "lineJoin",
          get: function get() {
            return this._lineJoin;
          },
          set: function set(value) {
            this._lineJoin = value;

            if (!this.impl) {
              return;
            }

            this.impl.lineJoin = value;
          }
        }, {
          key: "lineCap",
          get: function get() {
            return this._lineCap;
          },
          set: function set(value) {
            this._lineCap = value;

            if (!this.impl) {
              return;
            }

            this.impl.lineCap = value;
          }
        }, {
          key: "strokeColor",
          get: function get() {
            return this._strokeColor;
          },
          set: function set(value) {
            if (!this.impl) {
              return;
            }

            this._strokeColor.set(value);

            this.impl.strokeColor = this._strokeColor;
          }
        }, {
          key: "fillColor",
          get: function get() {
            return this._fillColor;
          },
          set: function set(value) {
            if (!this.impl) {
              return;
            }

            this._fillColor.set(value);

            this.impl.fillColor = this._fillColor;
          }
        }, {
          key: "miterLimit",
          get: function get() {
            return this._miterLimit;
          },
          set: function set(value) {
            this._miterLimit = value;
          }
        }, {
          key: "color",
          get: function get() {
            return this._color;
          },
          set: function set(value) {
            if (this._color === value) {
              return;
            }

            this._color.set(value);
          }
        }, {
          key: "srcBlendFactor",
          get: function get() {
            return this._srcBlendFactor;
          },
          set: function set(value) {}
        }, {
          key: "dstBlendFactor",
          get: function get() {
            return this._dstBlendFactor;
          },
          set: function set(value) {}
        }, {
          key: "graphicsNativeProxy",
          get: function get() {
            return this._graphicsNativeProxy;
          }
        }]);

        return Graphics;
      }(UIRenderer), _class3$h.LineJoin = LineJoin, _class3$h.LineCap = LineCap, _temp$p), (_applyDecoratedDescriptor(_class2$M.prototype, "lineJoin", [_dec3$a], Object.getOwnPropertyDescriptor(_class2$M.prototype, "lineJoin"), _class2$M.prototype), _applyDecoratedDescriptor(_class2$M.prototype, "lineCap", [_dec4$5], Object.getOwnPropertyDescriptor(_class2$M.prototype, "lineCap"), _class2$M.prototype), _applyDecoratedDescriptor(_class2$M.prototype, "color", [override], Object.getOwnPropertyDescriptor(_class2$M.prototype, "color"), _class2$M.prototype), _initializer$C = applyDecoratedInitializer(_class2$M.prototype, "_lineWidth", [serializable], function () {
        return 1;
      }), _initializer2$o = applyDecoratedInitializer(_class2$M.prototype, "_strokeColor", [serializable], function () {
        return Color.BLACK.clone();
      }), _initializer3$j = applyDecoratedInitializer(_class2$M.prototype, "_lineJoin", [serializable], function () {
        return LineJoin.MITER;
      }), _initializer4$f = applyDecoratedInitializer(_class2$M.prototype, "_lineCap", [serializable], function () {
        return LineCap.BUTT;
      }), _initializer5$a = applyDecoratedInitializer(_class2$M.prototype, "_fillColor", [serializable], function () {
        return Color.WHITE.clone();
      }), _initializer6$6 = applyDecoratedInitializer(_class2$M.prototype, "_miterLimit", [serializable], function () {
        return 10;
      })), _class2$M)) || _class$R) || _class$R));
      legacyCC.Graphics = Graphics;

      var _dec$S, _dec2$o, _dec3$b, _dec4$6, _dec5$4, _dec6$4, _dec7$4, _class$S, _class2$N, _initializer$D, _initializer2$p, _initializer3$k, _initializer4$g, _initializer5$b, _initializer6$7, _initializer7$6, _initializer8$6, _initializer9$5, _initializer10$5, _class3$i, _temp$q;
      var SpriteType;

      (function (SpriteType) {
        SpriteType[SpriteType["SIMPLE"] = 0] = "SIMPLE";
        SpriteType[SpriteType["SLICED"] = 1] = "SLICED";
        SpriteType[SpriteType["TILED"] = 2] = "TILED";
        SpriteType[SpriteType["FILLED"] = 3] = "FILLED";
      })(SpriteType || (SpriteType = {}));

      ccenum(SpriteType);
      var FillType;

      (function (FillType) {
        FillType[FillType["HORIZONTAL"] = 0] = "HORIZONTAL";
        FillType[FillType["VERTICAL"] = 1] = "VERTICAL";
        FillType[FillType["RADIAL"] = 2] = "RADIAL";
      })(FillType || (FillType = {}));

      ccenum(FillType);
      var SizeMode;

      (function (SizeMode) {
        SizeMode[SizeMode["CUSTOM"] = 0] = "CUSTOM";
        SizeMode[SizeMode["TRIMMED"] = 1] = "TRIMMED";
        SizeMode[SizeMode["RAW"] = 2] = "RAW";
      })(SizeMode || (SizeMode = {}));

      ccenum(SizeMode);
      var EventType;

      (function (EventType) {
        EventType["SPRITE_FRAME_CHANGED"] = "spriteframe-changed";
      })(EventType || (EventType = {}));

      var Sprite = exports('Sprite', (_dec$S = ccclass('cc.Sprite'), _dec2$o = executionOrder(110), _dec3$b = type(SpriteAtlas), _dec4$6 = type(SpriteFrame), _dec5$4 = type(SpriteType), _dec6$4 = type(FillType), _dec7$4 = type(SizeMode), _dec$S(_class$S = _dec2$o(_class$S = (_class2$N = (_temp$q = _class3$i = function (_UIRenderer) {
        _inheritsLoose(Sprite, _UIRenderer);

        function Sprite() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _UIRenderer.call.apply(_UIRenderer, [this].concat(args)) || this;
          _this._spriteFrame = _initializer$D && _initializer$D();
          _this._type = _initializer2$p && _initializer2$p();
          _this._fillType = _initializer3$k && _initializer3$k();
          _this._sizeMode = _initializer4$g && _initializer4$g();
          _this._fillCenter = _initializer5$b && _initializer5$b();
          _this._fillStart = _initializer6$7 && _initializer6$7();
          _this._fillRange = _initializer7$6 && _initializer7$6();
          _this._isTrimmedMode = _initializer8$6 && _initializer8$6();
          _this._useGrayscale = _initializer9$5 && _initializer9$5();
          _this._atlas = _initializer10$5 && _initializer10$5();
          return _this;
        }

        var _proto = Sprite.prototype;

        _proto.__preload = function __preload() {
          this.changeMaterialForDefine();

          _UIRenderer.prototype.__preload.call(this);
        };

        _proto.onEnable = function onEnable() {
          _UIRenderer.prototype.onEnable.call(this);

          this._activateMaterial();

          var spriteFrame = this._spriteFrame;

          if (spriteFrame) {
            this._updateUVs();

            if (this._type === SpriteType.SLICED) {
              spriteFrame.on(SpriteFrame.EVENT_UV_UPDATED, this._updateUVs, this);
            }
          }
        };

        _proto.onDisable = function onDisable() {
          _UIRenderer.prototype.onDisable.call(this);

          if (this._spriteFrame && this._type === SpriteType.SLICED) {
            this._spriteFrame.off(SpriteFrame.EVENT_UV_UPDATED, this._updateUVs, this);
          }
        };

        _proto.onDestroy = function onDestroy() {

          _UIRenderer.prototype.onDestroy.call(this);
        };

        _proto.changeSpriteFrameFromAtlas = function changeSpriteFrameFromAtlas(name) {
          if (!this._atlas) {
            console.warn('SpriteAtlas is null.');
            return;
          }

          var sprite = this._atlas.getSpriteFrame(name);

          this.spriteFrame = sprite;
        };

        _proto.changeMaterialForDefine = function changeMaterialForDefine() {
          var texture;
          var lastInstanceMaterialType = this._instanceMaterialType;

          if (this._spriteFrame) {
            texture = this._spriteFrame.texture;
          }

          var value = false;

          if (texture instanceof TextureBase) {
            var format = texture.getPixelFormat();
            value = format === PixelFormat.RGBA_ETC1 || format === PixelFormat.RGB_A_PVRTC_4BPPV1 || format === PixelFormat.RGB_A_PVRTC_2BPPV1;
          }

          if (value && this.grayscale) {
            this._instanceMaterialType = InstanceMaterialType.USE_ALPHA_SEPARATED_AND_GRAY;
          } else if (value) {
            this._instanceMaterialType = InstanceMaterialType.USE_ALPHA_SEPARATED;
          } else if (this.grayscale) {
            this._instanceMaterialType = InstanceMaterialType.GRAYSCALE;
          } else {
            this._instanceMaterialType = InstanceMaterialType.ADD_COLOR_AND_TEXTURE;
          }

          if (lastInstanceMaterialType !== this._instanceMaterialType) {
            this.updateMaterial();
          }
        };

        _proto._updateBuiltinMaterial = function _updateBuiltinMaterial() {
          var mat = _UIRenderer.prototype._updateBuiltinMaterial.call(this);

          if (this.spriteFrame && this.spriteFrame.texture instanceof RenderTexture) {
            var defines = _extends({
              SAMPLE_FROM_RT: true
            }, mat.passes[0].defines);

            var renderMat = new Material();
            renderMat.initialize({
              effectAsset: mat.effectAsset,
              defines: defines
            });
            mat = renderMat;
          }

          return mat;
        };

        _proto._render = function _render(render) {
          render.commitComp(this, this.renderData, this._spriteFrame, this._assembler, null);
        };

        _proto._canRender = function _canRender() {
          if (!_UIRenderer.prototype._canRender.call(this)) {
            return false;
          }

          var spriteFrame = this._spriteFrame;

          if (!spriteFrame || !spriteFrame.texture) {
            return false;
          }

          return true;
        };

        _proto._flushAssembler = function _flushAssembler() {
          var assembler = Sprite.Assembler.getAssembler(this);

          if (this._assembler !== assembler) {
            this.destroyRenderData();
            this._assembler = assembler;
          }

          if (!this.renderData) {
            if (this._assembler && this._assembler.createData) {
              this._renderData = this._assembler.createData(this);
              this.renderData.material = this.getRenderMaterial(0);
              this.markForUpdateRenderData();

              if (this.spriteFrame) {
                this._assembler.updateUVs(this);
              }

              this._updateColor();
            }
          }

          if (this._spriteFrame) {
            if (this._type === SpriteType.SLICED) {
              this._spriteFrame.on(SpriteFrame.EVENT_UV_UPDATED, this._updateUVs, this);
            } else {
              this._spriteFrame.off(SpriteFrame.EVENT_UV_UPDATED, this._updateUVs, this);
            }
          }
        };

        _proto._applySpriteSize = function _applySpriteSize() {
          if (this._spriteFrame) {
            {
              if (SizeMode.RAW === this._sizeMode) {
                var size = this._spriteFrame.originalSize;

                this.node._uiProps.uiTransformComp.setContentSize(size);
              } else if (SizeMode.TRIMMED === this._sizeMode) {
                var rect = this._spriteFrame.rect;

                this.node._uiProps.uiTransformComp.setContentSize(rect.width, rect.height);
              }
            }
          }
        };

        _proto._resized = function _resized() {
          {
            return;
          }
        };

        _proto._activateMaterial = function _activateMaterial() {
          var spriteFrame = this._spriteFrame;
          var material = this.getRenderMaterial(0);

          if (spriteFrame) {
            if (material) {
              this.markForUpdateRenderData();
            }
          }

          if (this.renderData) {
            this.renderData.material = material;
          }
        };

        _proto._updateUVs = function _updateUVs() {
          if (this._assembler) {
            this._assembler.updateUVs(this);
          }
        };

        _proto._applySpriteFrame = function _applySpriteFrame(oldFrame) {
          var spriteFrame = this._spriteFrame;

          if (oldFrame && this._type === SpriteType.SLICED) {
            oldFrame.off(SpriteFrame.EVENT_UV_UPDATED, this._updateUVs, this);
          }

          var textureChanged = false;

          if (spriteFrame) {
            if (!oldFrame || oldFrame.texture !== spriteFrame.texture) {
              textureChanged = true;
            }

            if (textureChanged) {
              if (this.renderData) this.renderData.textureDirty = true;
              this.changeMaterialForDefine();
            }

            this._applySpriteSize();

            if (this._type === SpriteType.SLICED) {
              spriteFrame.on(SpriteFrame.EVENT_UV_UPDATED, this._updateUVs, this);
            }
          }
        };

        _createClass(Sprite, [{
          key: "spriteAtlas",
          get: function get() {
            return this._atlas;
          },
          set: function set(value) {
            if (this._atlas === value) {
              return;
            }

            this._atlas = value;
          }
        }, {
          key: "spriteFrame",
          get: function get() {
            return this._spriteFrame;
          },
          set: function set(value) {
            if (this._spriteFrame === value) {
              return;
            }

            var lastSprite = this._spriteFrame;
            this._spriteFrame = value;
            this.markForUpdateRenderData();

            this._applySpriteFrame(lastSprite);
          }
        }, {
          key: "type",
          get: function get() {
            return this._type;
          },
          set: function set(value) {
            if (this._type !== value) {
              this._type = value;

              this._flushAssembler();
            }
          }
        }, {
          key: "fillType",
          get: function get() {
            return this._fillType;
          },
          set: function set(value) {
            if (this._fillType !== value) {
              if (value === FillType.RADIAL || this._fillType === FillType.RADIAL) {
                this.destroyRenderData();
              } else if (this.renderData) {
                this.markForUpdateRenderData(true);
              }
            }

            this._fillType = value;

            this._flushAssembler();
          }
        }, {
          key: "fillCenter",
          get: function get() {
            return this._fillCenter;
          },
          set: function set(value) {
            this._fillCenter.x = value.x;
            this._fillCenter.y = value.y;

            if (this._type === SpriteType.FILLED && this.renderData) {
              this.markForUpdateRenderData();
            }
          }
        }, {
          key: "fillStart",
          get: function get() {
            return this._fillStart;
          },
          set: function set(value) {
            this._fillStart = clamp(value, 0, 1);

            if (this._type === SpriteType.FILLED && this.renderData) {
              this.markForUpdateRenderData();

              this._updateUVs();
            }
          }
        }, {
          key: "fillRange",
          get: function get() {
            return this._fillRange;
          },
          set: function set(value) {
            this._fillRange = clamp(value, -1, 1);

            if (this._type === SpriteType.FILLED && this.renderData) {
              this.markForUpdateRenderData();

              this._updateUVs();
            }
          }
        }, {
          key: "trim",
          get: function get() {
            return this._isTrimmedMode;
          },
          set: function set(value) {
            if (this._isTrimmedMode === value) {
              return;
            }

            this._isTrimmedMode = value;

            if (this._type === SpriteType.SIMPLE && this.renderData) {
              this.markForUpdateRenderData(true);
            }
          }
        }, {
          key: "grayscale",
          get: function get() {
            return this._useGrayscale;
          },
          set: function set(value) {
            if (this._useGrayscale === value) {
              return;
            }

            this._useGrayscale = value;
            this.changeMaterialForDefine();
            this.updateMaterial();
          }
        }, {
          key: "sizeMode",
          get: function get() {
            return this._sizeMode;
          },
          set: function set(value) {
            if (this._sizeMode === value) {
              return;
            }

            this._sizeMode = value;

            if (value !== SizeMode.CUSTOM) {
              this._applySpriteSize();
            }
          }
        }]);

        return Sprite;
      }(UIRenderer), _class3$i.FillType = FillType, _class3$i.Type = SpriteType, _class3$i.SizeMode = SizeMode, _class3$i.EventType = EventType, _temp$q), (_applyDecoratedDescriptor(_class2$N.prototype, "spriteAtlas", [_dec3$b], Object.getOwnPropertyDescriptor(_class2$N.prototype, "spriteAtlas"), _class2$N.prototype), _applyDecoratedDescriptor(_class2$N.prototype, "spriteFrame", [_dec4$6], Object.getOwnPropertyDescriptor(_class2$N.prototype, "spriteFrame"), _class2$N.prototype), _applyDecoratedDescriptor(_class2$N.prototype, "type", [_dec5$4], Object.getOwnPropertyDescriptor(_class2$N.prototype, "type"), _class2$N.prototype), _applyDecoratedDescriptor(_class2$N.prototype, "fillType", [_dec6$4], Object.getOwnPropertyDescriptor(_class2$N.prototype, "fillType"), _class2$N.prototype), _applyDecoratedDescriptor(_class2$N.prototype, "sizeMode", [_dec7$4], Object.getOwnPropertyDescriptor(_class2$N.prototype, "sizeMode"), _class2$N.prototype), _initializer$D = applyDecoratedInitializer(_class2$N.prototype, "_spriteFrame", [serializable], function () {
        return null;
      }), _initializer2$p = applyDecoratedInitializer(_class2$N.prototype, "_type", [serializable], function () {
        return SpriteType.SIMPLE;
      }), _initializer3$k = applyDecoratedInitializer(_class2$N.prototype, "_fillType", [serializable], function () {
        return FillType.HORIZONTAL;
      }), _initializer4$g = applyDecoratedInitializer(_class2$N.prototype, "_sizeMode", [serializable], function () {
        return SizeMode.TRIMMED;
      }), _initializer5$b = applyDecoratedInitializer(_class2$N.prototype, "_fillCenter", [serializable], function () {
        return new Vec2(0, 0);
      }), _initializer6$7 = applyDecoratedInitializer(_class2$N.prototype, "_fillStart", [serializable], function () {
        return 0;
      }), _initializer7$6 = applyDecoratedInitializer(_class2$N.prototype, "_fillRange", [serializable], function () {
        return 0;
      }), _initializer8$6 = applyDecoratedInitializer(_class2$N.prototype, "_isTrimmedMode", [serializable], function () {
        return true;
      }), _initializer9$5 = applyDecoratedInitializer(_class2$N.prototype, "_useGrayscale", [serializable], function () {
        return false;
      }), _initializer10$5 = applyDecoratedInitializer(_class2$N.prototype, "_atlas", [serializable], function () {
        return null;
      })), _class2$N)) || _class$S) || _class$S));
      legacyCC.Sprite = Sprite;

      var _dec$T, _dec2$p, _dec3$c, _class$T, _class2$O, _initializer$E, _initializer2$q, _initializer3$l, _initializer4$h, _class3$j, _temp$r;

      var _worldMatrix$1 = new Mat4();

      var _vec2_temp = new Vec2();

      var _mat4_temp$1 = new Mat4();

      var _circlePoints = [];

      function _calculateCircle(center, radius, segments) {
        _circlePoints.length = 0;
        var anglePerStep = Math.PI * 2 / segments;

        for (var step = 0; step < segments; ++step) {
          _circlePoints.push(new Vec3(radius.x * Math.cos(anglePerStep * step) + center.x, radius.y * Math.sin(anglePerStep * step) + center.y, 0));
        }

        return _circlePoints;
      }

      var MaskType;

      (function (MaskType) {
        MaskType[MaskType["GRAPHICS_RECT"] = 0] = "GRAPHICS_RECT";
        MaskType[MaskType["GRAPHICS_ELLIPSE"] = 1] = "GRAPHICS_ELLIPSE";
        MaskType[MaskType["GRAPHICS_STENCIL"] = 2] = "GRAPHICS_STENCIL";
        MaskType[MaskType["SPRITE_STENCIL"] = 3] = "SPRITE_STENCIL";
      })(MaskType || (MaskType = {}));

      ccenum(MaskType);
      var SEGMENTS_MIN = 3;
      var SEGMENTS_MAX = 10000;
      var Mask = exports('Mask', (_dec$T = ccclass('cc.Mask'), _dec2$p = executionOrder(110), _dec3$c = type(MaskType), _dec$T(_class$T = _dec2$p(_class$T = (_class2$O = (_temp$r = _class3$j = function (_Component) {
        _inheritsLoose(Mask, _Component);

        function Mask() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._type = _initializer$E && _initializer$E();
          _this._inverted = _initializer2$q && _initializer2$q();
          _this._segments = _initializer3$l && _initializer3$l();
          _this._alphaThreshold = _initializer4$h && _initializer4$h();
          _this._sprite = null;
          _this._graphics = null;
          _this._stencilStage = Stage.DISABLED;
          return _this;
        }

        var _proto = Mask.prototype;

        _proto.onLoad = function onLoad() {
          this._changeRenderType();
        };

        _proto.onEnable = function onEnable() {
          this._changeRenderType();

          this._updateGraphics();

          this._enableRender();

          this.node.on(NodeEventType.ANCHOR_CHANGED, this._nodeStateChange, this);
          this.node.on(NodeEventType.SIZE_CHANGED, this._nodeStateChange, this);
        };

        _proto.onRestore = function onRestore() {
          this._changeRenderType();

          this._updateGraphics();
        };

        _proto.onDisable = function onDisable() {
          this._disableRender();

          this.node.off(NodeEventType.ANCHOR_CHANGED, this._nodeStateChange, this);
          this.node.off(NodeEventType.SIZE_CHANGED, this._nodeStateChange, this);
        };

        _proto.onDestroy = function onDestroy() {
          this._removeMaskNode();
        };

        _proto.isHit = function isHit(worldPt) {
          var uiTrans = this.node._uiProps.uiTransformComp;
          var size = uiTrans.contentSize;
          var w = size.width;
          var h = size.height;
          var testPt = _vec2_temp;
          this.node.getWorldMatrix(_worldMatrix$1);
          Mat4.invert(_mat4_temp$1, _worldMatrix$1);
          Vec2.transformMat4(testPt, worldPt, _mat4_temp$1);
          var ap = uiTrans.anchorPoint;
          testPt.x += ap.x * w;
          testPt.y += ap.y * h;
          var result = false;

          if (this.type === MaskType.GRAPHICS_RECT || this.type === MaskType.GRAPHICS_STENCIL || this.type === MaskType.SPRITE_STENCIL) {
            result = testPt.x >= 0 && testPt.y >= 0 && testPt.x <= w && testPt.y <= h;
          } else if (this.type === MaskType.GRAPHICS_ELLIPSE) {
            var rx = w / 2;
            var ry = h / 2;
            var px = testPt.x - 0.5 * w;
            var py = testPt.y - 0.5 * h;
            result = px * px / (rx * rx) + py * py / (ry * ry) < 1;
          }

          if (this._inverted) {
            result = !result;
          }

          return result;
        };

        _proto._nodeStateChange = function _nodeStateChange(type) {
          this._updateGraphics();
        };

        _proto._changeRenderType = function _changeRenderType() {
          var isGraphics = this._type !== MaskType.SPRITE_STENCIL;

          if (isGraphics) {
            this._createGraphics();
          } else {
            this._createSprite();
          }
        };

        _proto._createSprite = function _createSprite() {
          if (!this._sprite) {
            var sprite = this._sprite = this.node.getComponent(Sprite);

            if (!sprite) {
              var node = this.node;
              sprite = this._sprite = node.addComponent(Sprite);
            }

            sprite.color = Color.WHITE.clone();
            sprite.sizeMode = 0;
          }

          this._sprite.stencilStage = this.inverted ? Stage.ENTER_LEVEL_INVERTED : Stage.ENTER_LEVEL;

          this._sprite.updateMaterial();
        };

        _proto._createGraphics = function _createGraphics() {
          if (!this._graphics) {
            var graphics = this._graphics = this.node.getComponent(Graphics);

            if (!graphics) {
              var node = this.node;
              graphics = this._graphics = node.addComponent(Graphics);
            }

            graphics.lineWidth = 1;
            var color = Color.WHITE.clone();
            color.a = 0;
            graphics.fillColor = color;
          }

          this._graphics.stencilStage = this.inverted ? Stage.ENTER_LEVEL_INVERTED : Stage.ENTER_LEVEL;
        };

        _proto._updateGraphics = function _updateGraphics() {
          if (!this._graphics || this._type !== MaskType.GRAPHICS_RECT && this._type !== MaskType.GRAPHICS_ELLIPSE) {
            return;
          }

          var uiTrans = this.node._uiProps.uiTransformComp;
          var graphics = this._graphics;
          graphics.clear();
          var size = uiTrans.contentSize;
          var width = size.width;
          var height = size.height;
          var ap = uiTrans.anchorPoint;
          var x = -width * ap.x;
          var y = -height * ap.y;

          if (this._type === MaskType.GRAPHICS_RECT) {
            graphics.rect(x, y, width, height);
          } else if (this._type === MaskType.GRAPHICS_ELLIPSE) {
            var center = new Vec3(x + width / 2, y + height / 2, 0);
            var radius = new Vec3(width / 2, height / 2, 0);

            var points = _calculateCircle(center, radius, this._segments);

            for (var i = 0; i < points.length; ++i) {
              var point = points[i];

              if (i === 0) {
                graphics.moveTo(point.x, point.y);
              } else {
                graphics.lineTo(point.x, point.y);
              }
            }

            graphics.close();
          }

          graphics.fill();
        };

        _proto._enableRender = function _enableRender() {
          if (this.subComp) {
            this.subComp.enabled = true;
          }
        };

        _proto._disableRender = function _disableRender() {
          if (this.subComp) {
            this.subComp.stencilStage = Stage.DISABLED;
            this.subComp.updateMaterial();

            if (this.node.activeInHierarchy) {
              this.subComp.enabled = false;
            }
          }
        };

        _proto._removeMaskNode = function _removeMaskNode() {
          if (this._sprite) {
            this._sprite.destroy();

            this._sprite = null;
          }

          if (this._graphics) {
            this._graphics.destroy();

            this._graphics = null;
          }
        };

        _proto.markForUpdateRenderData = function markForUpdateRenderData(enable) {
          if (enable === void 0) {
            enable = true;
          }

          warnID(9007);

          if (this.subComp) {
            this.subComp.markForUpdateRenderData(enable);
          }
        };

        _proto.requestRenderData = function requestRenderData(any) {
          warnID(9007);
        };

        _proto.destroyRenderData = function destroyRenderData() {
          warnID(9007);
        };

        _proto.updateRenderer = function updateRenderer() {
          warnID(9007);

          if (this.subComp) {
            this.subComp.updateRenderer();
          }
        };

        _proto.fillBuffers = function fillBuffers(render) {
          warnID(9007);
        };

        _proto.postUpdateAssembler = function postUpdateAssembler(render) {
          warnID(9007);
        };

        _proto.setNodeDirty = function setNodeDirty() {
          warnID(9007);

          if (this.subComp) {
            this.subComp.setNodeDirty();
          }
        };

        _proto.setTextureDirty = function setTextureDirty() {
          warnID(9007);

          if (this.subComp) {
            this.subComp.setTextureDirty();
          }
        };

        _proto.getMaterial = function getMaterial(idx) {
          warnID(9007);

          if (this.subComp) {
            return this.subComp.getMaterial(idx);
          }

          return null;
        };

        _proto.setMaterial = function setMaterial(material, index) {
          warnID(9007);

          if (this.subComp) {
            this.subComp.setMaterial(material, index);
          }
        };

        _proto.getMaterialInstance = function getMaterialInstance(idx) {
          warnID(9007);

          if (this.subComp) {
            return this.subComp.getMaterialInstance(idx);
          }

          return null;
        };

        _proto.setMaterialInstance = function setMaterialInstance(matInst, index) {
          warnID(9007);

          if (this.subComp) {
            this.subComp.setMaterialInstance(matInst, index);
          }
        };

        _proto.getRenderMaterial = function getRenderMaterial(index) {
          warnID(9007);

          if (this.subComp) {
            return this.subComp.getRenderMaterial(index);
          }

          return null;
        };

        _createClass(Mask, [{
          key: "type",
          get: function get() {
            return this._type;
          },
          set: function set(value) {
            if (this._type === value) {
              return;
            }

            this._type = value;

            if (this._type !== MaskType.SPRITE_STENCIL) {
              if (this._sprite) {
                this.node.removeComponent(Sprite);

                this._sprite._destroyImmediate();

                this._sprite = null;
              }

              this._changeRenderType();

              this._updateGraphics();
            } else {
              if (this._graphics) {
                this._graphics.clear();

                this.node.removeComponent(Graphics);

                this._graphics._destroyImmediate();

                this._graphics = null;
              }

              this._changeRenderType();
            }
          }
        }, {
          key: "inverted",
          get: function get() {
            return this._inverted;
          },
          set: function set(value) {
            this._inverted = value;
            this.subComp.stencilStage = this.inverted ? Stage.ENTER_LEVEL_INVERTED : Stage.ENTER_LEVEL;
          }
        }, {
          key: "segments",
          get: function get() {
            return this._segments;
          },
          set: function set(value) {
            if (this._segments === value) {
              return;
            }

            this._segments = clamp(value, SEGMENTS_MIN, SEGMENTS_MAX);

            this._updateGraphics();
          }
        }, {
          key: "spriteFrame",
          get: function get() {
            if (this._sprite) {
              return this._sprite.spriteFrame;
            }

            return null;
          },
          set: function set(value) {
            if (this._sprite) {
              this._sprite.spriteFrame = value;
            } else {
              console.error('please change type to sprite_stencil first');
            }
          }
        }, {
          key: "alphaThreshold",
          get: function get() {
            return this._alphaThreshold;
          },
          set: function set(value) {
            if (this._alphaThreshold === value) {
              return;
            }

            this._alphaThreshold = value;

            if (this.type === MaskType.SPRITE_STENCIL && this._sprite) {
              var mat = this._sprite.getMaterialInstance(0);

              mat.setProperty('alphaThreshold', this._alphaThreshold);
            }
          }
        }, {
          key: "subComp",
          get: function get() {
            return this._graphics || this._sprite;
          }
        }, {
          key: "customMaterial",
          get: function get() {
            warnID(9007);

            if (this.subComp) {
              return this.subComp.customMaterial;
            }

            return null;
          },
          set: function set(val) {
            warnID(9007);

            if (this.subComp) {
              this.subComp.customMaterial = val;
            }
          }
        }, {
          key: "color",
          get: function get() {
            warnID(9007);

            if (this.subComp) {
              return this.subComp.color;
            }

            return null;
          },
          set: function set(value) {
            warnID(9007);

            if (this.subComp && value) {
              this.subComp.color = value;
            }
          }
        }, {
          key: "sharedMaterial",
          get: function get() {
            warnID(9007);

            if (this.subComp) {
              return this.subComp.sharedMaterial;
            }

            return null;
          }
        }, {
          key: "sharedMaterials",
          get: function get() {
            warnID(9007);

            if (this.subComp) {
              return this.subComp.sharedMaterials;
            }

            return null;
          },
          set: function set(val) {
            warnID(9007);

            if (this.subComp && val) {
              this.subComp.sharedMaterials = val;
            }
          }
        }, {
          key: "material",
          get: function get() {
            warnID(9007);

            if (this.subComp) {
              return this.subComp.material;
            }

            return null;
          },
          set: function set(val) {
            warnID(9007);

            if (this.subComp) {
              this.subComp.material = val;
            }
          }
        }, {
          key: "materials",
          get: function get() {
            warnID(9007);

            if (this.subComp) {
              return this.subComp.materials;
            }

            return [null];
          },
          set: function set(val) {
            warnID(9007);

            if (this.subComp) {
              this.subComp.materials = val;
            }
          }
        }]);

        return Mask;
      }(Component), _class3$j.Type = MaskType, _temp$r), (_applyDecoratedDescriptor(_class2$O.prototype, "type", [_dec3$c], Object.getOwnPropertyDescriptor(_class2$O.prototype, "type"), _class2$O.prototype), _initializer$E = applyDecoratedInitializer(_class2$O.prototype, "_type", [serializable], function () {
        return MaskType.GRAPHICS_RECT;
      }), _initializer2$q = applyDecoratedInitializer(_class2$O.prototype, "_inverted", [serializable], function () {
        return false;
      }), _initializer3$l = applyDecoratedInitializer(_class2$O.prototype, "_segments", [serializable], function () {
        return 64;
      }), _initializer4$h = applyDecoratedInitializer(_class2$O.prototype, "_alphaThreshold", [serializable], function () {
        return 0.1;
      })), _class2$O)) || _class$T) || _class$T));
      NodeEventProcessor._maskComp = Mask;
      legacyCC.Mask = Mask;

      var eventRegx = /^(click)(\s)*=|(param)(\s)*=/;
      var imageAttrReg = /(\s)*src(\s)*=|(\s)*height(\s)*=|(\s)*width(\s)*=|(\s)*align(\s)*=|(\s)*offset(\s)*=|(\s)*click(\s)*=|(\s)*param(\s)*=/;
      var HtmlTextParser = exports('HtmlTextParser', function () {
        function HtmlTextParser() {
          this._specialSymbolArray = [];
          this._stack = [];
          this._resultObjectArray = [];

          this._specialSymbolArray.push([/&lt;/g, '<']);

          this._specialSymbolArray.push([/&gt;/g, '>']);

          this._specialSymbolArray.push([/&amp;/g, '&']);

          this._specialSymbolArray.push([/&quot;/g, '"']);

          this._specialSymbolArray.push([/&apos;/g, '\'']);
        }

        var _proto = HtmlTextParser.prototype;

        _proto.parse = function parse(htmlString) {
          this._resultObjectArray.length = 0;
          this._stack.length = 0;
          var startIndex = 0;
          var length = htmlString.length;

          while (startIndex < length) {
            var tagEndIndex = htmlString.indexOf('>', startIndex);
            var tagBeginIndex = -1;

            if (tagEndIndex >= 0) {
              tagBeginIndex = htmlString.lastIndexOf('<', tagEndIndex);
              var noTagBegin = tagBeginIndex < startIndex - 1;

              if (noTagBegin) {
                tagBeginIndex = htmlString.indexOf('<', tagEndIndex + 1);
                tagEndIndex = htmlString.indexOf('>', tagBeginIndex + 1);
              }
            }

            if (tagBeginIndex < 0) {
              this._stack.pop();

              this._processResult(htmlString.substring(startIndex));

              startIndex = length;
            } else {
              var newStr = htmlString.substring(startIndex, tagBeginIndex);
              var tagStr = htmlString.substring(tagBeginIndex + 1, tagEndIndex);
              if (tagStr === '') newStr = htmlString.substring(startIndex, tagEndIndex + 1);

              this._processResult(newStr);

              if (tagEndIndex === -1) {
                tagEndIndex = tagBeginIndex;
              } else if (htmlString.charAt(tagBeginIndex + 1) === '/') {
                this._stack.pop();
              } else {
                this._addToStack(tagStr);
              }

              startIndex = tagEndIndex + 1;
            }
          }

          return this._resultObjectArray;
        };

        _proto._attributeToObject = function _attributeToObject(attribute) {
          attribute = attribute.trim();
          var obj = {};
          var header = /^(color|size)(\s)*=/.exec(attribute);
          var tagName = '';
          var nextSpace = 0;
          var eventHanlderString = '';

          if (header) {
            tagName = header[0];
            attribute = attribute.substring(tagName.length).trim();

            if (attribute === '') {
              return obj;
            }

            nextSpace = attribute.indexOf(' ');

            switch (tagName[0]) {
              case 'c':
                if (nextSpace > -1) {
                  obj.color = attribute.substring(0, nextSpace).trim();
                } else {
                  obj.color = attribute;
                }

                break;

              case 's':
                obj.size = parseInt(attribute);
                break;
            }

            if (nextSpace > -1) {
              eventHanlderString = attribute.substring(nextSpace + 1).trim();
              obj.event = this._processEventHandler(eventHanlderString);
            }

            return obj;
          }

          header = /^(br(\s)*\/)/.exec(attribute);

          if (header && header[0].length > 0) {
            tagName = header[0].trim();

            if (tagName.startsWith('br') && tagName[tagName.length - 1] === '/') {
              obj.isNewLine = true;

              this._resultObjectArray.push({
                text: '',
                style: {
                  isNewLine: true
                }
              });

              return obj;
            }
          }

          header = /^(img(\s)*src(\s)*=[^>]+\/)/.exec(attribute);
          var remainingArgument = '';
          var rightQuot = -1;

          if (header && header[0].length > 0) {
            tagName = header[0].trim();

            if (tagName.startsWith('img') && tagName[tagName.length - 1] === '/') {
              header = imageAttrReg.exec(attribute);
              var tagValue;
              var isValidImageTag = false;

              while (header) {
                attribute = attribute.substring(attribute.indexOf(header[0]));
                tagName = attribute.substr(0, header[0].length);
                var originTagNameLength = tagName.length;
                tagName = tagName.replace(/[^a-zA-Z]/g, '').trim();
                tagName = tagName.toLowerCase();
                remainingArgument = attribute.substring(originTagNameLength).trim();

                if (tagName === 'src') {
                  rightQuot = this.getRightQuotationIndex(remainingArgument);
                } else {
                  rightQuot = -1;
                }

                nextSpace = remainingArgument.indexOf(' ', rightQuot + 1 >= remainingArgument.length ? -1 : rightQuot + 1);
                tagValue = nextSpace > -1 ? remainingArgument.substr(0, nextSpace) : remainingArgument;
                attribute = remainingArgument.substring(nextSpace).trim();

                if (tagValue.endsWith('/')) {
                  tagValue = tagValue.slice(0, -1);
                }

                if (tagName === 'src') {
                  switch (tagValue.charCodeAt(0)) {
                    case 34:
                    case 39:
                      isValidImageTag = true;
                      tagValue = tagValue.slice(1, -1);
                      break;
                  }

                  obj.isImage = true;
                  obj.src = tagValue;
                } else if (tagName === 'height') {
                  obj.imageHeight = parseInt(tagValue);
                } else if (tagName === 'width') {
                  obj.imageWidth = parseInt(tagValue);
                } else if (tagName === 'align') {
                  switch (tagValue.charCodeAt(0)) {
                    case 34:
                    case 39:
                      tagValue = tagValue.slice(1, -1);
                      break;
                  }

                  obj.imageAlign = tagValue.toLowerCase();
                } else if (tagName === 'offset') {
                  obj.imageOffset = tagValue;
                } else if (tagName === 'click') {
                  obj.event = this._processEventHandler(tagName + "=" + tagValue);
                }

                if (obj.event && tagName === 'param') {
                  obj.event[tagName] = tagValue.replace(/^"|"$/g, '');
                }

                header = imageAttrReg.exec(attribute);
              }

              if (isValidImageTag && obj.isImage) {
                this._resultObjectArray.push({
                  text: '',
                  style: obj
                });
              }

              return {};
            }
          }

          header = /^(outline(\s)*[^>]*)/.exec(attribute);

          if (header) {
            attribute = header[0].substring('outline'.length).trim();
            var defaultOutlineObject = {
              color: '#ffffff',
              width: 1
            };

            if (attribute) {
              var outlineAttrReg = /(\s)*color(\s)*=|(\s)*width(\s)*=|(\s)*click(\s)*=|(\s)*param(\s)*=/;
              header = outlineAttrReg.exec(attribute);

              var _tagValue;

              while (header) {
                attribute = attribute.substring(attribute.indexOf(header[0]));
                tagName = attribute.substr(0, header[0].length);
                remainingArgument = attribute.substring(tagName.length).trim();
                nextSpace = remainingArgument.indexOf(' ');

                if (nextSpace > -1) {
                  _tagValue = remainingArgument.substr(0, nextSpace);
                } else {
                  _tagValue = remainingArgument;
                }

                tagName = tagName.replace(/[^a-zA-Z]/g, '').trim();
                tagName = tagName.toLowerCase();
                attribute = remainingArgument.substring(nextSpace).trim();

                if (tagName === 'click') {
                  obj.event = this._processEventHandler(tagName + "=" + _tagValue);
                } else if (tagName === 'color') {
                  defaultOutlineObject.color = _tagValue;
                } else if (tagName === 'width') {
                  defaultOutlineObject.width = parseInt(_tagValue);
                }

                if (obj.event && tagName === 'param') {
                  obj.event[tagName] = _tagValue.replace(/^"|"$/g, '');
                }

                header = outlineAttrReg.exec(attribute);
              }
            }

            obj.outline = defaultOutlineObject;
          }

          header = /^(on|u|b|i)(\s)*/.exec(attribute);

          if (header && header[0].length > 0) {
            tagName = header[0];
            attribute = attribute.substring(tagName.length).trim();

            switch (tagName[0]) {
              case 'u':
                obj.underline = true;
                break;

              case 'i':
                obj.italic = true;
                break;

              case 'b':
                obj.bold = true;
                break;
            }

            if (attribute === '') {
              return obj;
            }

            obj.event = this._processEventHandler(attribute);
          }

          return obj;
        };

        _proto.getRightQuotationIndex = function getRightQuotationIndex(remainingArgument) {
          var leftQuot = -1;
          var rightQuot = -1;
          var leftSingleQuot = remainingArgument.indexOf('\'');
          var leftDoubleQuot = remainingArgument.indexOf('"');
          var useSingleQuot = leftSingleQuot > -1 && (leftSingleQuot < leftDoubleQuot || leftDoubleQuot === -1);
          var useDoubleQuot = leftDoubleQuot > -1 && (leftDoubleQuot < leftSingleQuot || leftSingleQuot === -1);

          if (useSingleQuot) {
            leftQuot = leftSingleQuot;
            rightQuot = remainingArgument.indexOf('\'', leftQuot + 1 >= remainingArgument.length ? -1 : leftQuot + 1);
          } else if (useDoubleQuot) {
            leftQuot = leftDoubleQuot;
            rightQuot = remainingArgument.indexOf('"', leftQuot + 1 >= remainingArgument.length ? -1 : leftQuot + 1);
          }

          return rightQuot;
        };

        _proto._processEventHandler = function _processEventHandler(eventString) {
          var obj = {};
          var index = 0;
          var isValidTag = false;
          var eventNames = eventRegx.exec(eventString);

          while (eventNames) {
            var eventName = eventNames[0];
            var eventValue = '';
            isValidTag = false;
            eventString = eventString.substring(eventName.length).trim();

            if (eventString.charAt(0) === '"') {
              index = eventString.indexOf('"', 1);

              if (index > -1) {
                eventValue = eventString.substring(1, index).trim();
                isValidTag = true;
              }

              index++;
            } else if (eventString.charAt(0) === '\'') {
              index = eventString.indexOf('\'', 1);

              if (index > -1) {
                eventValue = eventString.substring(1, index).trim();
                isValidTag = true;
              }

              index++;
            } else {
              var match = /(\S)+/.exec(eventString);

              if (match) {
                eventValue = match[0];
              } else {
                eventValue = '';
              }

              index = eventValue.length;
            }

            if (isValidTag) {
              eventName = eventName.substring(0, eventName.length - 1).trim();
              obj[eventName] = eventValue;
            }

            eventString = eventString.substring(index).trim();
            eventNames = eventRegx.exec(eventString);
          }

          return obj;
        };

        _proto._addToStack = function _addToStack(attribute) {
          var obj = this._attributeToObject(attribute);

          if (this._stack.length === 0) {
            this._stack.push(obj);
          } else {
            if (obj.isNewLine || obj.isImage) {
              return;
            }

            var previousTagObj = this._stack[this._stack.length - 1];

            for (var key in previousTagObj) {
              if (!obj[key]) {
                obj[key] = previousTagObj[key];
              }
            }

            this._stack.push(obj);
          }
        };

        _proto._processResult = function _processResult(value) {
          if (value.length === 0) {
            return;
          }

          value = this._escapeSpecialSymbol(value);

          if (this._stack.length > 0) {
            this._resultObjectArray.push({
              text: value,
              style: this._stack[this._stack.length - 1]
            });
          } else {
            this._resultObjectArray.push({
              text: value
            });
          }
        };

        _proto._escapeSpecialSymbol = function _escapeSpecialSymbol(str) {
          for (var _iterator = _createForOfIteratorHelperLoose(this._specialSymbolArray), _step; !(_step = _iterator()).done;) {
            var symbolArr = _step.value;
            var key = symbolArr[0];
            var value = symbolArr[1];
            str = str.replace(key, value);
          }

          return str;
        };

        return HtmlTextParser;
      }());

      var _dec$U, _dec2$q, _dec3$d, _class$U, _class2$P, _initializer$F, _initializer2$r;
      var LabelOutline = exports('LabelOutline', (_dec$U = ccclass('cc.LabelOutline'), _dec2$q = executionOrder(110), _dec3$d = requireComponent(Label), _dec$U(_class$U = _dec2$q(_class$U = _dec3$d(_class$U = (_class2$P = function (_Component) {
        _inheritsLoose(LabelOutline, _Component);

        function LabelOutline() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._color = _initializer$F && _initializer$F();
          _this._width = _initializer2$r && _initializer2$r();
          return _this;
        }

        var _proto = LabelOutline.prototype;

        _proto.onEnable = function onEnable() {
          this._updateRenderData();
        };

        _proto.onDisable = function onDisable() {
          this._updateRenderData();
        };

        _proto._updateRenderData = function _updateRenderData() {
          var label = this.node.getComponent(Label);

          if (label) {
            label.updateRenderData(true);
          }
        };

        _createClass(LabelOutline, [{
          key: "color",
          get: function get() {
            return this._color;
          },
          set: function set(value) {
            if (this._color === value) {
              return;
            }

            this._color.set(value);

            this._updateRenderData();
          }
        }, {
          key: "width",
          get: function get() {
            return this._width;
          },
          set: function set(value) {
            if (this._width === value) {
              return;
            }

            this._width = value;

            this._updateRenderData();
          }
        }]);

        return LabelOutline;
      }(Component), (_initializer$F = applyDecoratedInitializer(_class2$P.prototype, "_color", [serializable], function () {
        return new Color(0, 0, 0, 255);
      }), _initializer2$r = applyDecoratedInitializer(_class2$P.prototype, "_width", [serializable], function () {
        return 2;
      })), _class2$P)) || _class$U) || _class$U) || _class$U));
      legacyCC.LabelOutline = LabelOutline;

      deprecateModuleExportedName({
        Renderable2D: {
          newName: 'UIRenderer',
          since: '3.6.0',
          removed: false
        }
      });

      var _dec$V, _dec2$r, _dec3$e, _dec4$7, _dec5$5, _dec6$5, _dec7$5, _dec8$3, _dec9$3, _class$V, _class2$Q, _initializer$G, _initializer2$s, _initializer3$m, _initializer4$i, _initializer5$c, _initializer6$8, _initializer7$7, _initializer8$7, _initializer9$6, _initializer10$6, _initializer11$5, _initializer12$4, _initializer13$4, _initializer14$4, _initializer15$4, _initializer16$4, _initializer17$4, _initializer18$3, _initializer19$3, _initializer20$3, _class3$k, _temp$s;

      var _temp_vec3_1 = new Vec3();

      var ProjectionType = Enum(CameraProjection);
      var FOVAxis = Enum(CameraFOVAxis);
      var Aperture = Enum(CameraAperture);
      var Shutter = Enum(CameraShutter);
      var ISO = Enum(CameraISO);
      var ClearFlag = Enum({
        SKYBOX: SKYBOX_FLAG | ClearFlagBit.DEPTH_STENCIL,
        SOLID_COLOR: ClearFlagBit.ALL,
        DEPTH_ONLY: ClearFlagBit.DEPTH_STENCIL,
        DONT_CLEAR: ClearFlagBit.NONE
      });
      var Camera$1 = exports('Camera', (_dec$V = ccclass('cc.Camera'), _dec2$r = type(Layers.BitMask), _dec3$e = type(ClearFlag), _dec4$7 = type(ProjectionType), _dec5$5 = type(FOVAxis), _dec6$5 = type(Aperture), _dec7$5 = type(Shutter), _dec8$3 = type(ISO), _dec9$3 = type(RenderTexture), _dec$V(_class$V = (_class2$Q = (_temp$s = _class3$k = function (_Component) {
        _inheritsLoose(Camera, _Component);

        function Camera() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._projection = _initializer$G && _initializer$G();
          _this._priority = _initializer2$s && _initializer2$s();
          _this._fov = _initializer3$m && _initializer3$m();
          _this._fovAxis = _initializer4$i && _initializer4$i();
          _this._orthoHeight = _initializer5$c && _initializer5$c();
          _this._near = _initializer6$8 && _initializer6$8();
          _this._far = _initializer7$7 && _initializer7$7();
          _this._color = _initializer8$7 && _initializer8$7();
          _this._depth = _initializer9$6 && _initializer9$6();
          _this._stencil = _initializer10$6 && _initializer10$6();
          _this._clearFlags = _initializer11$5 && _initializer11$5();
          _this._rect = _initializer12$4 && _initializer12$4();
          _this._aperture = _initializer13$4 && _initializer13$4();
          _this._shutter = _initializer14$4 && _initializer14$4();
          _this._iso = _initializer15$4 && _initializer15$4();
          _this._screenScale = _initializer16$4 && _initializer16$4();
          _this._visibility = _initializer17$4 && _initializer17$4();
          _this._targetTexture = _initializer18$3 && _initializer18$3();
          _this._camera = null;
          _this._inEditorMode = false;
          _this._flows = undefined;
          _this._cameraType = _initializer19$3 && _initializer19$3();
          _this._trackingType = _initializer20$3 && _initializer20$3();
          return _this;
        }

        var _proto = Camera.prototype;

        _proto.onLoad = function onLoad() {
          this._createCamera();
        };

        _proto.onEnable = function onEnable() {
          this.node.hasChangedFlags |= TransformBit.POSITION;

          if (this._camera) {
            this._attachToScene();
          }
        };

        _proto.onDisable = function onDisable() {
          if (this._camera) {
            this._detachFromScene();
          }
        };

        _proto.onDestroy = function onDestroy() {
          if (this._camera) {
            this._camera.destroy();

            this._camera = null;
          }

          if (this._targetTexture) {
            this._targetTexture.off('resize');
          }
        };

        _proto.screenPointToRay = function screenPointToRay(x, y, out) {
          if (!out) {
            out = Ray.create();
          }

          if (this._camera) {
            this._camera.screenPointToRay(out, x, y);
          }

          return out;
        };

        _proto.worldToScreen = function worldToScreen(worldPos, out) {
          if (!out) {
            out = new Vec3();
          }

          if (this._camera) {
            this._camera.worldToScreen(out, worldPos);
          }

          return out;
        };

        _proto.screenToWorld = function screenToWorld(screenPos, out) {
          if (!out) {
            out = this.node.getWorldPosition();
          }

          if (this._camera) {
            this._camera.screenToWorld(out, screenPos);
          }

          return out;
        };

        _proto.convertToUINode = function convertToUINode(wpos, uiNode, out) {
          if (!out) {
            out = new Vec3();
          }

          if (!this._camera) {
            return out;
          }

          this.worldToScreen(wpos, _temp_vec3_1);
          var cmp = uiNode.getComponent('cc.UITransform');
          var designSize = legacyCC.view.getVisibleSize();
          var xoffset = _temp_vec3_1.x - this._camera.width * 0.5;
          var yoffset = _temp_vec3_1.y - this._camera.height * 0.5;
          _temp_vec3_1.x = xoffset / legacyCC.view.getScaleX() + designSize.width * 0.5;
          _temp_vec3_1.y = yoffset / legacyCC.view.getScaleY() + designSize.height * 0.5;

          if (cmp) {
            cmp.convertToNodeSpaceAR(_temp_vec3_1, out);
          }

          return out;
        };

        _proto._createCamera = function _createCamera() {
          if (!this._camera) {
            this._camera = legacyCC.director.root.createCamera();

            this._camera.initialize({
              name: this.node.name,
              node: this.node,
              projection: this._projection,
              window: this._inEditorMode ? legacyCC.director.root && legacyCC.director.root.mainWindow : legacyCC.director.root && legacyCC.director.root.tempWindow,
              priority: this._priority,
              cameraType: this.cameraType,
              trackingType: this.trackingType
            });

            this._camera.setViewportInOrientedSpace(this._rect);

            this._camera.fovAxis = this._fovAxis;
            this._camera.fov = toRadian(this._fov);
            this._camera.orthoHeight = this._orthoHeight;
            this._camera.nearClip = this._near;
            this._camera.farClip = this._far;
            this._camera.clearColor = this._color;
            this._camera.clearDepth = this._depth;
            this._camera.clearStencil = this._stencil;
            this._camera.clearFlag = this._clearFlags;
            this._camera.visibility = this._visibility;
            this._camera.aperture = this._aperture;
            this._camera.shutter = this._shutter;
            this._camera.iso = this._iso;
          }

          this._updateTargetTexture();
        };

        _proto._attachToScene = function _attachToScene() {
          if (!this.node.scene || !this._camera) {
            return;
          }

          if (this._camera && this._camera.scene) {
            this._camera.scene.removeCamera(this._camera);
          }

          var rs = this._getRenderScene();

          rs.addCamera(this._camera);
        };

        _proto._detachFromScene = function _detachFromScene() {
          if (this._camera && this._camera.scene) {
            this._camera.scene.removeCamera(this._camera);
          }
        };

        _proto._checkTargetTextureEvent = function _checkTargetTextureEvent(old) {
          var _this2 = this;

          if (old) {
            old.off('resize');
          }

          if (this._targetTexture) {
            this._targetTexture.on('resize', function (window) {
              if (_this2._camera) {
                _this2._camera.setFixedSize(window.width, window.height);
              }
            }, this);
          }
        };

        _proto._updateTargetTexture = function _updateTargetTexture() {
          if (!this._camera) {
            return;
          }

          if (this._targetTexture) {
            var window = this._targetTexture.window;

            this._camera.changeTargetWindow(window);

            this._camera.setFixedSize(window.width, window.height);
          }
        };

        _createClass(Camera, [{
          key: "camera",
          get: function get() {
            return this._camera;
          }
        }, {
          key: "priority",
          get: function get() {
            return this._priority;
          },
          set: function set(val) {
            this._priority = val;

            if (this._camera) {
              this._camera.priority = val;
            }
          }
        }, {
          key: "visibility",
          get: function get() {
            return this._visibility;
          },
          set: function set(val) {
            this._visibility = val;

            if (this._camera) {
              this._camera.visibility = val;
            }
          }
        }, {
          key: "clearFlags",
          get: function get() {
            return this._clearFlags;
          },
          set: function set(val) {
            this._clearFlags = val;

            if (this._camera) {
              this._camera.clearFlag = val;
            }
          }
        }, {
          key: "clearColor",
          get: function get() {
            return this._color;
          },
          set: function set(val) {
            this._color.set(val);

            if (this._camera) {
              this._camera.clearColor = this._color;
            }
          }
        }, {
          key: "clearDepth",
          get: function get() {
            return this._depth;
          },
          set: function set(val) {
            this._depth = val;

            if (this._camera) {
              this._camera.clearDepth = val;
            }
          }
        }, {
          key: "clearStencil",
          get: function get() {
            return this._stencil;
          },
          set: function set(val) {
            this._stencil = val;

            if (this._camera) {
              this._camera.clearStencil = val;
            }
          }
        }, {
          key: "projection",
          get: function get() {
            return this._projection;
          },
          set: function set(val) {
            this._projection = val;

            if (this._camera) {
              this._camera.projectionType = val;
            }
          }
        }, {
          key: "fovAxis",
          get: function get() {
            return this._fovAxis;
          },
          set: function set(val) {
            if (val === this._fovAxis) {
              return;
            }

            this._fovAxis = val;

            if (this._camera) {
              this._camera.fovAxis = val;

              if (val === CameraFOVAxis.VERTICAL) {
                this.fov = this._fov * this._camera.aspect;
              } else {
                this.fov = this._fov / this._camera.aspect;
              }
            }
          }
        }, {
          key: "fov",
          get: function get() {
            return this._fov;
          },
          set: function set(val) {
            this._fov = val;

            if (this._camera) {
              this._camera.fov = toRadian(val);
            }
          }
        }, {
          key: "orthoHeight",
          get: function get() {
            return this._orthoHeight;
          },
          set: function set(val) {
            this._orthoHeight = val;

            if (this._camera) {
              this._camera.orthoHeight = val;
            }
          }
        }, {
          key: "near",
          get: function get() {
            return this._near;
          },
          set: function set(val) {
            this._near = val;

            if (this._camera) {
              this._camera.nearClip = val;
            }
          }
        }, {
          key: "far",
          get: function get() {
            return this._far;
          },
          set: function set(val) {
            this._far = val;

            if (this._camera) {
              this._camera.farClip = val;
            }
          }
        }, {
          key: "aperture",
          get: function get() {
            return this._aperture;
          },
          set: function set(val) {
            this._aperture = val;

            if (this._camera) {
              this._camera.aperture = val;
            }
          }
        }, {
          key: "shutter",
          get: function get() {
            return this._shutter;
          },
          set: function set(val) {
            this._shutter = val;

            if (this._camera) {
              this._camera.shutter = val;
            }
          }
        }, {
          key: "iso",
          get: function get() {
            return this._iso;
          },
          set: function set(val) {
            this._iso = val;

            if (this._camera) {
              this._camera.iso = val;
            }
          }
        }, {
          key: "rect",
          get: function get() {
            return this._rect;
          },
          set: function set(val) {
            this._rect = val;

            if (this._camera) {
              this._camera.setViewportInOrientedSpace(val);
            }
          }
        }, {
          key: "targetTexture",
          get: function get() {
            return this._targetTexture;
          },
          set: function set(value) {
            if (this._targetTexture === value) {
              return;
            }

            var old = this._targetTexture;
            this._targetTexture = value;

            this._checkTargetTextureEvent(old);

            this._updateTargetTexture();

            if (!value && this._camera) {
              this._camera.changeTargetWindow( null);

              this._camera.isWindowSize = true;
            }

            this.node.emit(Camera.TARGET_TEXTURE_CHANGE, this);
          }
        }, {
          key: "screenScale",
          get: function get() {
            return this._screenScale;
          },
          set: function set(val) {
            this._screenScale = val;

            if (this._camera) {
              this._camera.screenScale = val;
            }
          }
        }, {
          key: "inEditorMode",
          get: function get() {
            return this._inEditorMode;
          },
          set: function set(value) {
            this._inEditorMode = value;

            if (this._camera) {
              this._camera.changeTargetWindow(value ? legacyCC.director.root && legacyCC.director.root.mainWindow : legacyCC.director.root && legacyCC.director.root.tempWindow);
            }
          }
        }, {
          key: "cameraType",
          get: function get() {
            return this._cameraType;
          },
          set: function set(val) {
            if (this._cameraType === val) {
              return;
            }

            this._cameraType = val;

            if (this.camera) {
              this.camera.cameraType = val;
            }
          }
        }, {
          key: "trackingType",
          get: function get() {
            return this._trackingType;
          },
          set: function set(val) {
            if (this._trackingType === val) {
              return;
            }

            this._trackingType = val;

            if (this.camera) {
              this.camera.trackingType = val;
            }
          }
        }]);

        return Camera;
      }(Component), _class3$k.ProjectionType = ProjectionType, _class3$k.FOVAxis = FOVAxis, _class3$k.ClearFlag = ClearFlag, _class3$k.Aperture = Aperture, _class3$k.Shutter = Shutter, _class3$k.ISO = ISO, _class3$k.TARGET_TEXTURE_CHANGE = 'tex-change', _temp$s), (_initializer$G = applyDecoratedInitializer(_class2$Q.prototype, "_projection", [serializable], function () {
        return ProjectionType.PERSPECTIVE;
      }), _initializer2$s = applyDecoratedInitializer(_class2$Q.prototype, "_priority", [serializable], function () {
        return 0;
      }), _initializer3$m = applyDecoratedInitializer(_class2$Q.prototype, "_fov", [serializable], function () {
        return 45;
      }), _initializer4$i = applyDecoratedInitializer(_class2$Q.prototype, "_fovAxis", [serializable], function () {
        return FOVAxis.VERTICAL;
      }), _initializer5$c = applyDecoratedInitializer(_class2$Q.prototype, "_orthoHeight", [serializable], function () {
        return 10;
      }), _initializer6$8 = applyDecoratedInitializer(_class2$Q.prototype, "_near", [serializable], function () {
        return 1;
      }), _initializer7$7 = applyDecoratedInitializer(_class2$Q.prototype, "_far", [serializable], function () {
        return 1000;
      }), _initializer8$7 = applyDecoratedInitializer(_class2$Q.prototype, "_color", [serializable], function () {
        return new Color('#333333');
      }), _initializer9$6 = applyDecoratedInitializer(_class2$Q.prototype, "_depth", [serializable], function () {
        return 1;
      }), _initializer10$6 = applyDecoratedInitializer(_class2$Q.prototype, "_stencil", [serializable], function () {
        return 0;
      }), _initializer11$5 = applyDecoratedInitializer(_class2$Q.prototype, "_clearFlags", [serializable], function () {
        return ClearFlag.SOLID_COLOR;
      }), _initializer12$4 = applyDecoratedInitializer(_class2$Q.prototype, "_rect", [serializable], function () {
        return new Rect(0, 0, 1, 1);
      }), _initializer13$4 = applyDecoratedInitializer(_class2$Q.prototype, "_aperture", [serializable], function () {
        return Aperture.F16_0;
      }), _initializer14$4 = applyDecoratedInitializer(_class2$Q.prototype, "_shutter", [serializable], function () {
        return Shutter.D125;
      }), _initializer15$4 = applyDecoratedInitializer(_class2$Q.prototype, "_iso", [serializable], function () {
        return ISO.ISO100;
      }), _initializer16$4 = applyDecoratedInitializer(_class2$Q.prototype, "_screenScale", [serializable], function () {
        return 1;
      }), _initializer17$4 = applyDecoratedInitializer(_class2$Q.prototype, "_visibility", [serializable], function () {
        return CAMERA_DEFAULT_MASK;
      }), _initializer18$3 = applyDecoratedInitializer(_class2$Q.prototype, "_targetTexture", [serializable], function () {
        return null;
      }), _initializer19$3 = applyDecoratedInitializer(_class2$Q.prototype, "_cameraType", [serializable], function () {
        return CameraType.DEFAULT;
      }), _initializer20$3 = applyDecoratedInitializer(_class2$Q.prototype, "_trackingType", [serializable], function () {
        return TrackingType.NO_TRACKING;
      }), _applyDecoratedDescriptor(_class2$Q.prototype, "visibility", [_dec2$r], Object.getOwnPropertyDescriptor(_class2$Q.prototype, "visibility"), _class2$Q.prototype), _applyDecoratedDescriptor(_class2$Q.prototype, "clearFlags", [_dec3$e], Object.getOwnPropertyDescriptor(_class2$Q.prototype, "clearFlags"), _class2$Q.prototype), _applyDecoratedDescriptor(_class2$Q.prototype, "projection", [_dec4$7], Object.getOwnPropertyDescriptor(_class2$Q.prototype, "projection"), _class2$Q.prototype), _applyDecoratedDescriptor(_class2$Q.prototype, "fovAxis", [_dec5$5], Object.getOwnPropertyDescriptor(_class2$Q.prototype, "fovAxis"), _class2$Q.prototype), _applyDecoratedDescriptor(_class2$Q.prototype, "aperture", [_dec6$5], Object.getOwnPropertyDescriptor(_class2$Q.prototype, "aperture"), _class2$Q.prototype), _applyDecoratedDescriptor(_class2$Q.prototype, "shutter", [_dec7$5], Object.getOwnPropertyDescriptor(_class2$Q.prototype, "shutter"), _class2$Q.prototype), _applyDecoratedDescriptor(_class2$Q.prototype, "iso", [_dec8$3], Object.getOwnPropertyDescriptor(_class2$Q.prototype, "iso"), _class2$Q.prototype), _applyDecoratedDescriptor(_class2$Q.prototype, "targetTexture", [_dec9$3], Object.getOwnPropertyDescriptor(_class2$Q.prototype, "targetTexture"), _class2$Q.prototype)), _class2$Q)) || _class$V));
      legacyCC.Camera = Camera$1;

      var _orientationMap$1;
      var localWinSize = new Size();
      var orientationMap$2 = (_orientationMap$1 = {}, _orientationMap$1[macro.ORIENTATION_AUTO] = Orientation.AUTO, _orientationMap$1[macro.ORIENTATION_LANDSCAPE] = Orientation.LANDSCAPE, _orientationMap$1[macro.ORIENTATION_PORTRAIT] = Orientation.PORTRAIT, _orientationMap$1);
      var View = exports('View', function (_Eventify) {
        _inheritsLoose(View, _Eventify);

        function View() {
          var _this;

          _this = _Eventify.call(this) || this;
          _this._designResolutionSize = void 0;
          _this._scaleX = void 0;
          _this._scaleY = void 0;
          _this._viewportRect = void 0;
          _this._visibleRect = void 0;
          _this._autoFullScreen = void 0;
          _this._retinaEnabled = void 0;
          _this._resizeCallback = void 0;
          _this._resolutionPolicy = void 0;
          _this._rpExactFit = void 0;
          _this._rpShowAll = void 0;
          _this._rpNoBorder = void 0;
          _this._rpFixedHeight = void 0;
          _this._rpFixedWidth = void 0;
          var _strategyer = ContainerStrategy;
          var _strategy = ContentStrategy;
          _this._designResolutionSize = new Size(0, 0);
          _this._scaleX = 1;
          _this._scaleY = 1;
          _this._viewportRect = new Rect(0, 0, 0, 0);
          _this._visibleRect = new Rect(0, 0, 0, 0);
          _this._autoFullScreen = false;
          _this._retinaEnabled = false;
          _this._resizeCallback = null;
          _this._rpExactFit = new ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.EXACT_FIT);
          _this._rpShowAll = new ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.SHOW_ALL);
          _this._rpNoBorder = new ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.NO_BORDER);
          _this._rpFixedHeight = new ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.FIXED_HEIGHT);
          _this._rpFixedWidth = new ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.FIXED_WIDTH);
          _this._resolutionPolicy = _this._rpShowAll;
          return _this;
        }

        var _proto = View.prototype;

        _proto.init = function init() {
          var windowSize = screen.windowSize;
          var w = windowSize.width;
          var h = windowSize.height;
          this._designResolutionSize.width = w;
          this._designResolutionSize.height = h;
          this._viewportRect.width = w;
          this._viewportRect.height = h;
          this._visibleRect.width = w;
          this._visibleRect.height = h;
          localWinSize.width = this._visibleRect.width;
          localWinSize.height = this._visibleRect.height;

          if (visibleRect) {
            visibleRect.init(this._visibleRect);
          }

          {
            this.resizeWithBrowserSize(true);
            var designResolution = settings.querySettings(Settings.Category.SCREEN, 'designResolution');

            if (designResolution) {
              this.setDesignResolutionSize(Number(designResolution.width), Number(designResolution.height), designResolution.policy || ResolutionPolicy.FIXED_HEIGHT);
            }
          }

          screenAdapter.on('window-resize', this._updateAdaptResult, this);
          screenAdapter.on('orientation-change', this._updateAdaptResult, this);
          screenAdapter.on('fullscreen-change', this._updateAdaptResult, this);
        };

        _proto.resizeWithBrowserSize = function resizeWithBrowserSize(enabled) {
          screenAdapter.handleResizeEvent = enabled;
        };

        _proto.setResizeCallback = function setResizeCallback(callback) {
          if (typeof callback === 'function' || callback == null) {
            this._resizeCallback = callback;
          }
        };

        _proto.setOrientation = function setOrientation(orientation) {
          screenAdapter.orientation = orientationMap$2[orientation];
        };

        _proto.adjustViewportMeta = function adjustViewportMeta(enabled) {};

        _proto.enableRetina = function enableRetina(enabled) {
          this._retinaEnabled = !!enabled;
        };

        _proto.isRetinaEnabled = function isRetinaEnabled() {
          return this._retinaEnabled;
        };

        _proto.enableAutoFullScreen = function enableAutoFullScreen(enabled) {
          if (enabled === this._autoFullScreen) {
            return;
          }

          this._autoFullScreen = enabled;

          if (enabled) {
            screen.requestFullScreen()["catch"](function (e) {});
          }
        };

        _proto.isAutoFullScreenEnabled = function isAutoFullScreenEnabled() {
          return this._autoFullScreen;
        };

        _proto.setCanvasSize = function setCanvasSize(width, height) {
          screenAdapter.resolutionScale = 1;
          var dpr = screenAdapter.devicePixelRatio;
          var windowSize = new Size(width * dpr, height * dpr);
          screen.windowSize = windowSize;
        };

        _proto.getCanvasSize = function getCanvasSize() {
          return screen.windowSize;
        };

        _proto.getFrameSize = function getFrameSize() {
          var dpr = screenAdapter.devicePixelRatio;
          var sizeInCssPixels = screen.windowSize;
          sizeInCssPixels.width /= dpr;
          sizeInCssPixels.height /= dpr;
          return sizeInCssPixels;
        };

        _proto.setFrameSize = function setFrameSize(width, height) {
          var dpr = screenAdapter.devicePixelRatio;
          screen.windowSize = new Size(width * dpr, height * dpr);
        };

        _proto.getVisibleSize = function getVisibleSize() {
          return new Size(this._visibleRect.width, this._visibleRect.height);
        };

        _proto.getVisibleSizeInPixel = function getVisibleSizeInPixel() {
          return new Size(this._visibleRect.width * this._scaleX, this._visibleRect.height * this._scaleY);
        };

        _proto.getVisibleOrigin = function getVisibleOrigin() {
          return new Vec2(this._visibleRect.x, this._visibleRect.y);
        };

        _proto.getVisibleOriginInPixel = function getVisibleOriginInPixel() {
          return new Vec2(this._visibleRect.x * this._scaleX, this._visibleRect.y * this._scaleY);
        };

        _proto.getResolutionPolicy = function getResolutionPolicy() {
          return this._resolutionPolicy;
        };

        _proto._updateResolutionPolicy = function _updateResolutionPolicy(resolutionPolicy) {
          if (resolutionPolicy instanceof ResolutionPolicy) {
            this._resolutionPolicy = resolutionPolicy;
          } else {
            var _locPolicy = ResolutionPolicy;

            if (resolutionPolicy === _locPolicy.EXACT_FIT) {
              this._resolutionPolicy = this._rpExactFit;
            }

            if (resolutionPolicy === _locPolicy.SHOW_ALL) {
              this._resolutionPolicy = this._rpShowAll;
            }

            if (resolutionPolicy === _locPolicy.NO_BORDER) {
              this._resolutionPolicy = this._rpNoBorder;
            }

            if (resolutionPolicy === _locPolicy.FIXED_HEIGHT) {
              this._resolutionPolicy = this._rpFixedHeight;
            }

            if (resolutionPolicy === _locPolicy.FIXED_WIDTH) {
              this._resolutionPolicy = this._rpFixedWidth;
            }
          }
        };

        _proto.setResolutionPolicy = function setResolutionPolicy(resolutionPolicy) {
          this._updateResolutionPolicy(resolutionPolicy);

          var designedResolution = view.getDesignResolutionSize();
          view.setDesignResolutionSize(designedResolution.width, designedResolution.height, resolutionPolicy);
        };

        _proto.setDesignResolutionSize = function setDesignResolutionSize(width, height, resolutionPolicy) {
          if (!(width > 0 && height > 0)) {
            errorID(2200);
            return;
          }

          this._updateResolutionPolicy(resolutionPolicy);

          var policy = this._resolutionPolicy;

          if (policy) {
            policy.preApply(this);
          }

          this._designResolutionSize.width = width;
          this._designResolutionSize.height = height;
          var result = policy.apply(this, this._designResolutionSize);

          if (result.scale && result.scale.length === 2) {
            this._scaleX = result.scale[0];
            this._scaleY = result.scale[1];
          }

          if (result.viewport) {
            var vp = this._viewportRect;
            var vb = this._visibleRect;
            var rv = result.viewport;
            vp.x = rv.x;
            vp.y = rv.y;
            vp.width = rv.width;
            vp.height = rv.height;
            vb.x = 0;
            vb.y = 0;
            vb.width = rv.width / this._scaleX;
            vb.height = rv.height / this._scaleY;
          }

          policy.postApply(this);
          localWinSize.width = this._visibleRect.width;
          localWinSize.height = this._visibleRect.height;

          if (visibleRect) {
            visibleRect.init(this._visibleRect);
          }

          this.emit('design-resolution-changed');
        };

        _proto.getDesignResolutionSize = function getDesignResolutionSize() {
          return new Size(this._designResolutionSize.width, this._designResolutionSize.height);
        };

        _proto.setRealPixelResolution = function setRealPixelResolution(width, height, resolutionPolicy) {
          {
            document.documentElement.style.width = width + "px";
            document.body.style.width = width + "px";
            document.body.style.left = '0px';
            document.body.style.top = '0px';
          }

          this.setDesignResolutionSize(width, height, resolutionPolicy);
        };

        _proto.getViewportRect = function getViewportRect() {
          return this._viewportRect;
        };

        _proto.getScaleX = function getScaleX() {
          return this._scaleX;
        };

        _proto.getScaleY = function getScaleY() {
          return this._scaleY;
        };

        _proto.getDevicePixelRatio = function getDevicePixelRatio() {
          return screenAdapter.devicePixelRatio;
        };

        _proto.convertToLocationInView = function convertToLocationInView(tx, ty, relatedPos, out) {
          if (out === void 0) {
            out = new Vec2();
          }

          var x = screenAdapter.devicePixelRatio * (tx - relatedPos.left);
          var y = screenAdapter.devicePixelRatio * (relatedPos.top + relatedPos.height - ty);

          if (screenAdapter.isFrameRotated) {
            out.x = screen.windowSize.width - y;
            out.y = x;
          } else {
            out.x = x;
            out.y = y;
          }

          return out;
        };

        _proto._convertToUISpace = function _convertToUISpace(point) {
          var viewport = this._viewportRect;
          point.x = (point.x - viewport.x) / this._scaleX;
          point.y = (point.y - viewport.y) / this._scaleY;
        };

        _proto._updateAdaptResult = function _updateAdaptResult(width, height, windowId) {
          var _this$_resizeCallback;

          legacyCC.director.root.resize(width, height, windowId === undefined ? 1 : windowId);
          var w = this._designResolutionSize.width;
          var h = this._designResolutionSize.height;

          if (width > 0) {
            this.setDesignResolutionSize(w, h, this._resolutionPolicy);
          }

          this.emit('canvas-resize');
          (_this$_resizeCallback = this._resizeCallback) === null || _this$_resizeCallback === void 0 ? void 0 : _this$_resizeCallback.call(this);
        };

        return View;
      }(Eventify(System)));
      View.instance = void 0;

      var ContainerStrategy = function () {
        function ContainerStrategy() {
          this.name = 'ContainerStrategy';
        }

        var _proto2 = ContainerStrategy.prototype;

        _proto2.preApply = function preApply(_view) {};

        _proto2.apply = function apply(_view, designedResolution) {};

        _proto2.postApply = function postApply(_view) {};

        _proto2._setupCanvas = function _setupCanvas() {
          var locCanvas = legacyCC.game.canvas;

          if (locCanvas) {
            var windowSize = screen.windowSize;
            locCanvas.width = windowSize.width;
            locCanvas.height = windowSize.height;
          }
        };

        return ContainerStrategy;
      }();

      ContainerStrategy.EQUAL_TO_FRAME = void 0;
      ContainerStrategy.PROPORTION_TO_FRAME = void 0;

      var ContentStrategy = function () {
        function ContentStrategy() {
          this.name = 'ContentStrategy';
          this._result = void 0;
          this._result = {
            scale: [1, 1],
            viewport: null
          };
        }

        var _proto3 = ContentStrategy.prototype;

        _proto3.preApply = function preApply(_view) {};

        _proto3.apply = function apply(_view, designedResolution) {
          return {
            scale: [1, 1]
          };
        };

        _proto3.postApply = function postApply(_view) {};

        _proto3._buildResult = function _buildResult(containerW, containerH, contentW, contentH, scaleX, scaleY) {
          if (Math.abs(containerW - contentW) < 2) {
            contentW = containerW;
          }

          if (Math.abs(containerH - contentH) < 2) {
            contentH = containerH;
          }

          var viewport = new Rect(Math.round((containerW - contentW) / 2), Math.round((containerH - contentH) / 2), contentW, contentH);
          this._result.scale = [scaleX, scaleY];
          this._result.viewport = viewport;
          return this._result;
        };

        return ContentStrategy;
      }();

      ContentStrategy.EXACT_FIT = void 0;
      ContentStrategy.SHOW_ALL = void 0;
      ContentStrategy.NO_BORDER = void 0;
      ContentStrategy.FIXED_HEIGHT = void 0;
      ContentStrategy.FIXED_WIDTH = void 0;

      (function () {
        var EqualToFrame = function (_ContainerStrategy) {
          _inheritsLoose(EqualToFrame, _ContainerStrategy);

          function EqualToFrame() {
            var _this2;

            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            _this2 = _ContainerStrategy.call.apply(_ContainerStrategy, [this].concat(args)) || this;
            _this2.name = 'EqualToFrame';
            return _this2;
          }

          var _proto4 = EqualToFrame.prototype;

          _proto4.apply = function apply(_view, designedResolution) {
            screenAdapter.isProportionalToFrame = false;

            this._setupCanvas();
          };

          return EqualToFrame;
        }(ContainerStrategy);

        var ProportionalToFrame = function (_ContainerStrategy2) {
          _inheritsLoose(ProportionalToFrame, _ContainerStrategy2);

          function ProportionalToFrame() {
            var _this3;

            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }

            _this3 = _ContainerStrategy2.call.apply(_ContainerStrategy2, [this].concat(args)) || this;
            _this3.name = 'ProportionalToFrame';
            return _this3;
          }

          var _proto5 = ProportionalToFrame.prototype;

          _proto5.apply = function apply(_view, designedResolution) {
            screenAdapter.isProportionalToFrame = true;

            this._setupCanvas();
          };

          return ProportionalToFrame;
        }(ContainerStrategy);

        ContainerStrategy.EQUAL_TO_FRAME = new EqualToFrame();
        ContainerStrategy.PROPORTION_TO_FRAME = new ProportionalToFrame();

        var ExactFit = function (_ContentStrategy) {
          _inheritsLoose(ExactFit, _ContentStrategy);

          function ExactFit() {
            var _this4;

            for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
              args[_key3] = arguments[_key3];
            }

            _this4 = _ContentStrategy.call.apply(_ContentStrategy, [this].concat(args)) || this;
            _this4.name = 'ExactFit';
            return _this4;
          }

          var _proto6 = ExactFit.prototype;

          _proto6.apply = function apply(_view, designedResolution) {
            var windowSize = screen.windowSize;
            var containerW = windowSize.width;
            var containerH = windowSize.height;
            var scaleX = containerW / designedResolution.width;
            var scaleY = containerH / designedResolution.height;
            return this._buildResult(containerW, containerH, containerW, containerH, scaleX, scaleY);
          };

          return ExactFit;
        }(ContentStrategy);

        var ShowAll = function (_ContentStrategy2) {
          _inheritsLoose(ShowAll, _ContentStrategy2);

          function ShowAll() {
            var _this5;

            for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
              args[_key4] = arguments[_key4];
            }

            _this5 = _ContentStrategy2.call.apply(_ContentStrategy2, [this].concat(args)) || this;
            _this5.name = 'ShowAll';
            return _this5;
          }

          var _proto7 = ShowAll.prototype;

          _proto7.apply = function apply(_view, designedResolution) {
            var windowSize = screen.windowSize;
            var containerW = windowSize.width;
            var containerH = windowSize.height;
            var designW = designedResolution.width;
            var designH = designedResolution.height;
            var scaleX = containerW / designW;
            var scaleY = containerH / designH;
            var scale = 0;
            var contentW;
            var contentH;

            if (scaleX < scaleY) {
              scale = scaleX;
              contentW = containerW;
              contentH = designH * scale;
            } else {
              scale = scaleY;
              contentW = designW * scale;
              contentH = containerH;
            }

            return this._buildResult(containerW, containerH, contentW, contentH, scale, scale);
          };

          return ShowAll;
        }(ContentStrategy);

        var NoBorder = function (_ContentStrategy3) {
          _inheritsLoose(NoBorder, _ContentStrategy3);

          function NoBorder() {
            var _this6;

            for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
              args[_key5] = arguments[_key5];
            }

            _this6 = _ContentStrategy3.call.apply(_ContentStrategy3, [this].concat(args)) || this;
            _this6.name = 'NoBorder';
            return _this6;
          }

          var _proto8 = NoBorder.prototype;

          _proto8.apply = function apply(_view, designedResolution) {
            var windowSize = screen.windowSize;
            var containerW = windowSize.width;
            var containerH = windowSize.height;
            var designW = designedResolution.width;
            var designH = designedResolution.height;
            var scaleX = containerW / designW;
            var scaleY = containerH / designH;
            var scale;
            var contentW;
            var contentH;

            if (scaleX < scaleY) {
              scale = scaleY;
              contentW = designW * scale;
              contentH = containerH;
            } else {
              scale = scaleX;
              contentW = containerW;
              contentH = designH * scale;
            }

            return this._buildResult(containerW, containerH, contentW, contentH, scale, scale);
          };

          return NoBorder;
        }(ContentStrategy);

        var FixedHeight = function (_ContentStrategy4) {
          _inheritsLoose(FixedHeight, _ContentStrategy4);

          function FixedHeight() {
            var _this7;

            for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
              args[_key6] = arguments[_key6];
            }

            _this7 = _ContentStrategy4.call.apply(_ContentStrategy4, [this].concat(args)) || this;
            _this7.name = 'FixedHeight';
            return _this7;
          }

          var _proto9 = FixedHeight.prototype;

          _proto9.apply = function apply(_view, designedResolution) {
            var windowSize = screen.windowSize;
            var containerW = windowSize.width;
            var containerH = windowSize.height;
            var designH = designedResolution.height;
            var scale = containerH / designH;
            var contentW = containerW;
            var contentH = containerH;
            return this._buildResult(containerW, containerH, contentW, contentH, scale, scale);
          };

          return FixedHeight;
        }(ContentStrategy);

        var FixedWidth = function (_ContentStrategy5) {
          _inheritsLoose(FixedWidth, _ContentStrategy5);

          function FixedWidth() {
            var _this8;

            for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
              args[_key7] = arguments[_key7];
            }

            _this8 = _ContentStrategy5.call.apply(_ContentStrategy5, [this].concat(args)) || this;
            _this8.name = 'FixedWidth';
            return _this8;
          }

          var _proto10 = FixedWidth.prototype;

          _proto10.apply = function apply(_view, designedResolution) {
            var windowSize = screen.windowSize;
            var containerW = windowSize.width;
            var containerH = windowSize.height;
            var designW = designedResolution.width;
            var scale = containerW / designW;
            var contentW = containerW;
            var contentH = containerH;
            return this._buildResult(containerW, containerH, contentW, contentH, scale, scale);
          };

          return FixedWidth;
        }(ContentStrategy);

        ContentStrategy.EXACT_FIT = new ExactFit();
        ContentStrategy.SHOW_ALL = new ShowAll();
        ContentStrategy.NO_BORDER = new NoBorder();
        ContentStrategy.FIXED_HEIGHT = new FixedHeight();
        ContentStrategy.FIXED_WIDTH = new FixedWidth();
      })();

      var ResolutionPolicy = exports('ResolutionPolicy', function () {
        function ResolutionPolicy(containerStg, contentStg) {
          this.name = 'ResolutionPolicy';
          this._containerStrategy = void 0;
          this._contentStrategy = void 0;
          this._containerStrategy = null;
          this._contentStrategy = null;
          this.setContainerStrategy(containerStg);
          this.setContentStrategy(contentStg);
        }

        var _proto11 = ResolutionPolicy.prototype;

        _proto11.preApply = function preApply(_view) {
          this._contentStrategy.preApply(_view);
        };

        _proto11.apply = function apply(_view, designedResolution) {
          this._containerStrategy.apply(_view, designedResolution);

          return this._contentStrategy.apply(_view, designedResolution);
        };

        _proto11.postApply = function postApply(_view) {
          this._contentStrategy.postApply(_view);
        };

        _proto11.setContainerStrategy = function setContainerStrategy(containerStg) {
          if (containerStg instanceof ContainerStrategy) {
            this._containerStrategy = containerStg;
          }
        };

        _proto11.setContentStrategy = function setContentStrategy(contentStg) {
          if (contentStg instanceof ContentStrategy) {
            this._contentStrategy = contentStg;
          }
        };

        _createClass(ResolutionPolicy, [{
          key: "canvasSize",
          get: function get() {
            return screen.windowSize;
          }
        }]);

        return ResolutionPolicy;
      }());
      ResolutionPolicy.EXACT_FIT = 0;
      ResolutionPolicy.NO_BORDER = 1;
      ResolutionPolicy.SHOW_ALL = 2;
      ResolutionPolicy.FIXED_HEIGHT = 3;
      ResolutionPolicy.FIXED_WIDTH = 4;
      ResolutionPolicy.UNKNOWN = 5;
      ResolutionPolicy.ContainerStrategy = ContainerStrategy;
      ResolutionPolicy.ContentStrategy = ContentStrategy;
      legacyCC.ResolutionPolicy = ResolutionPolicy;
      var view = exports('view', View.instance = legacyCC.view = new View());
      director.registerSystem('view', view, 0);
      legacyCC.winSize = localWinSize;

      var _dec$W, _dec2$s, _dec3$f, _class$W;
      var RenderRoot2D = exports('RenderRoot2D', (_dec$W = ccclass('cc.RenderRoot2D'), _dec2$s = executionOrder(100), _dec3$f = requireComponent(UITransform), _dec$W(_class$W = _dec2$s(_class$W = _dec3$f(_class$W = disallowMultiple(_class$W = function (_Component) {
        _inheritsLoose(RenderRoot2D, _Component);

        function RenderRoot2D() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = RenderRoot2D.prototype;

        _proto.onEnable = function onEnable() {
          legacyCC.director.root.batcher2D.addScreen(this);
        };

        _proto.onDisable = function onDisable() {
          legacyCC.director.root.batcher2D.removeScreen(this);
        };

        _proto.onDestroy = function onDestroy() {
          legacyCC.director.root.batcher2D.removeScreen(this);
        };

        return RenderRoot2D;
      }(Component)) || _class$W) || _class$W) || _class$W) || _class$W));

      var _dec$X, _dec2$t, _dec3$g, _dec4$8, _class$X, _class2$R, _initializer$H, _initializer2$t;

      var _worldPos = new Vec3();

      var RenderMode = Enum({
        OVERLAY: 0,
        INTERSPERSE: 1
      });
      var Canvas = exports('Canvas', (_dec$X = ccclass('cc.Canvas'), _dec2$t = executionOrder(100), _dec3$g = type(Camera$1), _dec4$8 = type(Camera$1), _dec$X(_class$X = _dec2$t(_class$X = disallowMultiple(_class$X = (_class2$R = function (_RenderRoot2D) {
        _inheritsLoose(Canvas, _RenderRoot2D);

        function Canvas() {
          var _this;

          _this = _RenderRoot2D.call(this) || this;
          _this._cameraComponent = _initializer$H && _initializer$H();
          _this._alignCanvasWithScreen = _initializer2$t && _initializer2$t();
          _this._thisOnCameraResized = void 0;
          _this._fitDesignResolution = void 0;
          _this._pos = new Vec3();
          _this._renderMode = RenderMode.OVERLAY;
          _this._thisOnCameraResized = _this._onResizeCamera.bind(_assertThisInitialized(_this));

          return _this;
        }

        var _proto = Canvas.prototype;

        _proto.__preload = function __preload() {
          var widget = this.getComponent('cc.Widget');

          if (widget) {
            widget.updateAlignment();
          }

          {
            if (this._cameraComponent) {
              this._cameraComponent._createCamera();

              this._cameraComponent.node.on(Camera$1.TARGET_TEXTURE_CHANGE, this._thisOnCameraResized);
            }
          }

          this._onResizeCamera();

          {
            this.node.on(NodeEventType.TRANSFORM_CHANGED, this._thisOnCameraResized);
          }
        };

        _proto.onEnable = function onEnable() {
          _RenderRoot2D.prototype.onEnable.call(this);

          if ( this._cameraComponent) {
            this._cameraComponent.node.on(Camera$1.TARGET_TEXTURE_CHANGE, this._thisOnCameraResized);
          }
        };

        _proto.onDisable = function onDisable() {
          _RenderRoot2D.prototype.onDisable.call(this);

          if (this._cameraComponent) {
            this._cameraComponent.node.off(Camera$1.TARGET_TEXTURE_CHANGE, this._thisOnCameraResized);
          }
        };

        _proto.onDestroy = function onDestroy() {
          _RenderRoot2D.prototype.onDestroy.call(this);

          {
            this.node.off(NodeEventType.TRANSFORM_CHANGED, this._thisOnCameraResized);
          }
        };

        _proto._onResizeCamera = function _onResizeCamera() {
          if (this._cameraComponent && this._alignCanvasWithScreen) {
            if (this._cameraComponent.targetTexture) {
              this._cameraComponent.orthoHeight = visibleRect.height / 2;
            } else {
              var size = screen.windowSize;
              this._cameraComponent.orthoHeight = size.height / view.getScaleY() / 2;
            }

            this.node.getWorldPosition(_worldPos);

            this._cameraComponent.node.setWorldPosition(_worldPos.x, _worldPos.y, 1000);
          }
        };

        _proto._getViewPriority = function _getViewPriority() {
          if (this._cameraComponent) {
            var _this$cameraComponent;

            var priority = (_this$cameraComponent = this.cameraComponent) === null || _this$cameraComponent === void 0 ? void 0 : _this$cameraComponent.priority;
            priority = this._renderMode === RenderMode.OVERLAY ? priority | 1 << 30 : priority & ~(1 << 30);
            return priority;
          }

          return 0;
        };

        _createClass(Canvas, [{
          key: "renderMode",
          get: function get() {
            return this._renderMode;
          },
          set: function set(val) {
            this._renderMode = val;

            if (this._cameraComponent) {
              this._cameraComponent.priority = this._getViewPriority();
            }
          }
        }, {
          key: "cameraComponent",
          get: function get() {
            return this._cameraComponent;
          },
          set: function set(value) {
            if (this._cameraComponent === value) {
              return;
            }

            this._cameraComponent = value;

            this._onResizeCamera();
          }
        }, {
          key: "alignCanvasWithScreen",
          get: function get() {
            return this._alignCanvasWithScreen;
          },
          set: function set(value) {
            this._alignCanvasWithScreen = value;

            this._onResizeCamera();
          }
        }]);

        return Canvas;
      }(RenderRoot2D), (_applyDecoratedDescriptor(_class2$R.prototype, "cameraComponent", [_dec3$g], Object.getOwnPropertyDescriptor(_class2$R.prototype, "cameraComponent"), _class2$R.prototype), _initializer$H = applyDecoratedInitializer(_class2$R.prototype, "_cameraComponent", [_dec4$8], function () {
        return null;
      }), _initializer2$t = applyDecoratedInitializer(_class2$R.prototype, "_alignCanvasWithScreen", [serializable], function () {
        return true;
      })), _class2$R)) || _class$X) || _class$X) || _class$X));
      legacyCC.Canvas = Canvas;

      var _dec$Y, _dec2$u, _dec3$h, _class$Y;
      var UIComponent = exports('UIComponent', (_dec$Y = ccclass('cc.UIComponent'), _dec2$u = requireComponent(UITransform), _dec3$h = executionOrder(110), _dec$Y(_class$Y = _dec2$u(_class$Y = _dec3$h(_class$Y = disallowMultiple(_class$Y = function (_Component) {
        _inheritsLoose(UIComponent, _Component);

        function UIComponent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._lastParent = null;
          _this.stencilStage = Stage.DISABLED;
          return _this;
        }

        var _proto = UIComponent.prototype;

        _proto.__preload = function __preload() {
          this.node._uiProps.uiComp = this;
        };

        _proto.onEnable = function onEnable() {};

        _proto.onDisable = function onDisable() {};

        _proto.onDestroy = function onDestroy() {
          if (this.node._uiProps.uiComp === this) {
            this.node._uiProps.uiComp = null;
          }
        };

        _proto.postUpdateAssembler = function postUpdateAssembler(render) {};

        _proto.markForUpdateRenderData = function markForUpdateRenderData(enable) {
        };

        _proto.setNodeDirty = function setNodeDirty() {};

        _proto.setTextureDirty = function setTextureDirty() {};

        return UIComponent;
      }(Component)) || _class$Y) || _class$Y) || _class$Y) || _class$Y));

      function rayAABB2$1(ray, min, max) {
        var o = ray.o;
        var d = ray.d;
        var ix = 1 / d.x;
        var iy = 1 / d.y;
        var iz = 1 / d.z;
        var t1 = (min.x - o.x) * ix;
        var t2 = (max.x - o.x) * ix;
        var t3 = (min.y - o.y) * iy;
        var t4 = (max.y - o.y) * iy;
        var t5 = (min.z - o.z) * iz;
        var t6 = (max.z - o.z) * iz;
        var tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)), Math.min(t5, t6));
        var tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)), Math.max(t5, t6));

        if (tmax < 0 || tmin > tmax) {
          return 0;
        }

        return tmin > 0 ? tmin : tmax;
      }

      var raySubMesh = function () {
        var tri = Triangle.create();
        var deOpt = {
          distance: Infinity,
          doubleSided: false,
          mode: ERaycastMode.ANY
        };
        var minDis = 0;

        var fillResult = function fillResult(m, d, i0, i1, i2, r) {
          if (m === ERaycastMode.CLOSEST) {
            if (minDis > d || minDis === 0) {
              minDis = d;

              if (r) {
                if (r.length === 0) {
                  r.push({
                    distance: d,
                    vertexIndex0: i0 / 3,
                    vertexIndex1: i1 / 3,
                    vertexIndex2: i2 / 3
                  });
                } else {
                  r[0].distance = d;
                  r[0].vertexIndex0 = i0 / 3;
                  r[0].vertexIndex1 = i1 / 3;
                  r[0].vertexIndex2 = i2 / 3;
                }
              }
            }
          } else {
            minDis = d;
            if (r) r.push({
              distance: d,
              vertexIndex0: i0 / 3,
              vertexIndex1: i1 / 3,
              vertexIndex2: i2 / 3
            });
          }
        };

        var narrowphase = function narrowphase(vb, ib, pm, ray, opt) {
          if (pm === PrimitiveMode.TRIANGLE_LIST) {
            var cnt = ib.length;

            for (var j = 0; j < cnt; j += 3) {
              var i0 = ib[j] * 3;
              var i1 = ib[j + 1] * 3;
              var i2 = ib[j + 2] * 3;
              Vec3.set(tri.a, vb[i0], vb[i0 + 1], vb[i0 + 2]);
              Vec3.set(tri.b, vb[i1], vb[i1 + 1], vb[i1 + 2]);
              Vec3.set(tri.c, vb[i2], vb[i2 + 1], vb[i2 + 2]);
              var dist = intersect.rayTriangle(ray, tri, opt.doubleSided);
              if (dist === 0 || dist > opt.distance) continue;
              fillResult(opt.mode, dist, i0, i1, i2, opt.result);
              if (opt.mode === ERaycastMode.ANY) return dist;
            }
          } else if (pm === PrimitiveMode.TRIANGLE_STRIP) {
            var _cnt = ib.length - 2;

            var rev = 0;

            for (var _j = 0; _j < _cnt; _j += 1) {
              var _i = ib[_j - rev] * 3;

              var _i2 = ib[_j + rev + 1] * 3;

              var _i3 = ib[_j + 2] * 3;

              Vec3.set(tri.a, vb[_i], vb[_i + 1], vb[_i + 2]);
              Vec3.set(tri.b, vb[_i2], vb[_i2 + 1], vb[_i2 + 2]);
              Vec3.set(tri.c, vb[_i3], vb[_i3 + 1], vb[_i3 + 2]);
              rev = ~rev;

              var _dist = intersect.rayTriangle(ray, tri, opt.doubleSided);

              if (_dist === 0 || _dist > opt.distance) continue;
              fillResult(opt.mode, _dist, _i, _i2, _i3, opt.result);
              if (opt.mode === ERaycastMode.ANY) return _dist;
            }
          } else if (pm === PrimitiveMode.TRIANGLE_FAN) {
            var _cnt2 = ib.length - 1;

            var _i4 = ib[0] * 3;

            Vec3.set(tri.a, vb[_i4], vb[_i4 + 1], vb[_i4 + 2]);

            for (var _j2 = 1; _j2 < _cnt2; _j2 += 1) {
              var _i5 = ib[_j2] * 3;

              var _i6 = ib[_j2 + 1] * 3;

              Vec3.set(tri.b, vb[_i5], vb[_i5 + 1], vb[_i5 + 2]);
              Vec3.set(tri.c, vb[_i6], vb[_i6 + 1], vb[_i6 + 2]);

              var _dist2 = intersect.rayTriangle(ray, tri, opt.doubleSided);

              if (_dist2 === 0 || _dist2 > opt.distance) continue;
              fillResult(opt.mode, _dist2, _i4, _i5, _i6, opt.result);
              if (opt.mode === ERaycastMode.ANY) return _dist2;
            }
          }

          return minDis;
        };

        return function (ray, submesh, options) {
          minDis = 0;
          if (submesh.geometricInfo.positions.length === 0) return minDis;
          var opt = options === undefined ? deOpt : options;
          var min = submesh.geometricInfo.boundingBox.min;
          var max = submesh.geometricInfo.boundingBox.max;

          if (rayAABB2$1(ray, min, max)) {
            var pm = submesh.primitiveMode;
            var _submesh$geometricInf = submesh.geometricInfo,
                vb = _submesh$geometricInf.positions,
                ib = _submesh$geometricInf.indices;
            narrowphase(vb, ib, pm, ray, opt);
          }

          return minDis;
        };
      }();

      var rayMesh = function () {
        var minDis = 0;
        var deOpt = {
          distance: Infinity,
          doubleSided: false,
          mode: ERaycastMode.ANY
        };
        return function (ray, mesh, options) {
          minDis = 0;
          var opt = options === undefined ? deOpt : options;
          var length = mesh.renderingSubMeshes.length;
          var min = mesh.struct.minPosition;
          var max = mesh.struct.maxPosition;
          if (min && max && !rayAABB2$1(ray, min, max)) return minDis;

          for (var i = 0; i < length; i++) {
            var sm = mesh.renderingSubMeshes[i];
            var dis = raySubMesh(ray, sm, opt);

            if (dis) {
              if (opt.mode === ERaycastMode.CLOSEST) {
                if (minDis === 0 || minDis > dis) {
                  minDis = dis;
                  if (opt.subIndices) opt.subIndices[0] = i;
                }
              } else {
                minDis = dis;
                if (opt.subIndices) opt.subIndices.push(i);

                if (opt.mode === ERaycastMode.ANY) {
                  return dis;
                }
              }
            }
          }

          if (minDis && opt.mode === ERaycastMode.CLOSEST) {
            if (opt.result) {
              opt.result[0].distance = minDis;
              opt.result.length = 1;
            }

            if (opt.subIndices) opt.subIndices.length = 1;
          }

          return minDis;
        };
      }();

      var rayModel = function () {
        var minDis = 0;
        var deOpt = {
          distance: Infinity,
          doubleSided: false,
          mode: ERaycastMode.ANY
        };
        var modelRay = new Ray();
        var m4 = new Mat4();
        return function (r, model, options) {
          minDis = 0;
          var opt = options === undefined ? deOpt : options;
          var wb = model.worldBounds;
          if (wb && !intersect.rayAABB(r, wb)) return minDis;
          Ray.copy(modelRay, r);

          if (model.node) {
            Mat4.invert(m4, model.node.getWorldMatrix(m4));
            Vec3.transformMat4(modelRay.o, r.o, m4);
            Vec3.transformMat4Normal(modelRay.d, r.d, m4);
          }

          var subModels = model.subModels;

          for (var i = 0; i < subModels.length; i++) {
            var subMesh = subModels[i].subMesh;
            var dis = raySubMesh(modelRay, subMesh, opt);

            if (dis) {
              if (opt.mode === ERaycastMode.CLOSEST) {
                if (minDis === 0 || minDis > dis) {
                  minDis = dis;
                  if (opt.subIndices) opt.subIndices[0] = i;
                }
              } else {
                minDis = dis;
                if (opt.subIndices) opt.subIndices.push(i);

                if (opt.mode === ERaycastMode.ANY) {
                  return dis;
                }
              }
            }
          }

          if (minDis && opt.mode === ERaycastMode.CLOSEST) {
            if (opt.result) {
              opt.result[0].distance = minDis;
              opt.result.length = 1;
            }

            if (opt.subIndices) opt.subIndices.length = 1;
          }

          return minDis;
        };
      }();

      intersect.rayModel = rayModel;
      intersect.raySubMesh = raySubMesh;
      intersect.rayMesh = rayMesh;

      var _dec$Z, _class$Z, _class2$S, _initializer$I;
      var ModelRenderer = exports('ModelRenderer', (_dec$Z = ccclass('cc.ModelRenderer'), _dec$Z(_class$Z = (_class2$S = function (_Renderer) {
        _inheritsLoose(ModelRenderer, _Renderer);

        function ModelRenderer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Renderer.call.apply(_Renderer, [this].concat(args)) || this;
          _this._visFlags = _initializer$I && _initializer$I();
          _this._models = [];
          _this._priority = 0;
          return _this;
        }

        var _proto = ModelRenderer.prototype;

        _proto._collectModels = function _collectModels() {
          return this._models;
        };

        _proto.onEnable = function onEnable() {
          this._updatePriority();
        };

        _proto._attachToScene = function _attachToScene() {};

        _proto._detachFromScene = function _detachFromScene() {};

        _proto._onVisibilityChange = function _onVisibilityChange(val) {};

        _proto._updatePriority = function _updatePriority() {
          if (this._models.length > 0) {
            for (var i = 0; i < this._models.length; i++) {
              this._models[i].priority = this._priority;
            }
          }
        };

        _createClass(ModelRenderer, [{
          key: "visibility",
          get: function get() {
            return this._visFlags;
          },
          set: function set(val) {
            this._visFlags = val;

            this._onVisibilityChange(val);
          }
        }, {
          key: "priority",
          get: function get() {
            return this._priority;
          },
          set: function set(val) {
            if (val === this._priority) return;
            this._priority = val;

            this._updatePriority();
          }
        }]);

        return ModelRenderer;
      }(Renderer), (_initializer$I = applyDecoratedInitializer(_class2$S.prototype, "_visFlags", [serializable], function () {
        return Layers.Enum.NONE;
      })), _class2$S)) || _class$Z));

      var _dec$_, _dec2$v, _class$_, _class2$T, _initializer$J;
      var ccclass$3 = ccclass,
          serializable$2 = serializable,
          type$2 = type;
      var PrefabLink = exports('PrefabLink', (_dec$_ = ccclass$3('cc.PrefabLink'), _dec2$v = type$2(Prefab), _dec$_(_class$_ = (_class2$T = function (_Component) {
        _inheritsLoose(PrefabLink, _Component);

        function PrefabLink() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.prefab = _initializer$J && _initializer$J();
          return _this;
        }

        return PrefabLink;
      }(Component), (_initializer$J = applyDecoratedInitializer(_class2$T.prototype, "prefab", [_dec2$v, serializable$2], function () {
        return null;
      })), _class2$T)) || _class$_));

      var _dec$$, _dec2$w, _dec3$i, _class$$, _class2$U, _initializer$K, _initializer2$u, _initializer3$n, _initializer4$j, _initializer5$d, _initializer6$9;
      var SpriteMode;

      (function (SpriteMode) {
        SpriteMode[SpriteMode["SIMPLE"] = 0] = "SIMPLE";
        SpriteMode[SpriteMode["SLICED"] = 1] = "SLICED";
        SpriteMode[SpriteMode["TILED"] = 2] = "TILED";
      })(SpriteMode || (SpriteMode = {}));

      var SpriteRenderer = exports('SpriteRenderer', (_dec$$ = ccclass('cc.SpriteRenderer'), _dec2$w = executionOrder(100), _dec3$i = type(SpriteFrame), _dec$$(_class$$ = _dec2$w(_class$$ = (_class2$U = function (_ModelRenderer) {
        _inheritsLoose(SpriteRenderer, _ModelRenderer);

        function SpriteRenderer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _ModelRenderer.call.apply(_ModelRenderer, [this].concat(args)) || this;
          _this._spriteFrame = _initializer$K && _initializer$K();
          _this._mode = _initializer2$u && _initializer2$u();
          _this._color = _initializer3$n && _initializer3$n();
          _this._flipX = _initializer4$j && _initializer4$j();
          _this._flipY = _initializer5$d && _initializer5$d();
          _this._size = _initializer6$9 && _initializer6$9();
          _this._model = null;
          return _this;
        }

        var _proto = SpriteRenderer.prototype;

        _proto.onLoad = function onLoad() {
          if (this._spriteFrame) {
            if (!this._spriteFrame.mesh) {
              this._spriteFrame.ensureMeshData();
            }

            this._spriteFrame.mesh.initialize();
          }

          this._updateModels();
        };

        _proto.onRestore = function onRestore() {
          this._updateModels();

          if (this.enabledInHierarchy) {
            this._attachToScene();
          }
        };

        _proto.onEnable = function onEnable() {
          if (!this._model) {
            this._updateModels();
          }

          this._attachToScene();
        };

        _proto.onDisable = function onDisable() {
          if (this._model) {
            this._detachFromScene();
          }
        };

        _proto.onDestroy = function onDestroy() {
          if (this._model) {
            legacyCC.director.root.destroyModel(this._model);
            this._model = null;
            this._models.length = 0;
          }
        };

        _proto._updateModels = function _updateModels() {
          if (!this._spriteFrame) {
            return;
          }

          var model = this._model;

          if (model) {
            model.destroy();
            model.initialize();
            model.node = model.transform = this.node;
          } else {
            this._createModel();
          }

          if (this._model) {
            var mesh = this._spriteFrame.mesh;

            this._model.createBoundingShape(mesh.struct.minPosition, mesh.struct.maxPosition);

            this._updateModelParams();

            this._onUpdateLocalDescriptorSet();
          }
        };

        _proto._createModel = function _createModel() {
          var model = this._model = legacyCC.director.root.createModel(Model);
          model.visFlags = this.visibility;
          model.node = model.transform = this.node;
          this._models.length = 0;

          this._models.push(this._model);
        };

        _proto._updateModelParams = function _updateModelParams() {
          if (!this._spriteFrame || !this._model) {
            return;
          }

          this._spriteFrame.ensureMeshData();

          var mesh = this._spriteFrame.mesh;
          this.node.hasChangedFlags |= TransformBit.POSITION;
          this._model.transform.hasChangedFlags |= TransformBit.POSITION;
          var meshCount = mesh ? mesh.renderingSubMeshes.length : 0;
          var renderingMesh = mesh.renderingSubMeshes;

          if (renderingMesh) {
            for (var i = 0; i < meshCount; ++i) {
              var material = this.getRenderMaterial(i);

              if (material && !material.isValid) {
                material = null;
              }

              var subMeshData = renderingMesh[i];

              if (subMeshData) {
                this._model.initSubModel(i, subMeshData, material || this._getBuiltinMaterial());
              }
            }
          }

          this._model.enabled = true;
        };

        _proto._getBuiltinMaterial = function _getBuiltinMaterial() {
          return builtinResMgr.get('missing-material');
        };

        _proto._onMaterialModified = function _onMaterialModified(idx, material) {
          _ModelRenderer.prototype._onMaterialModified.call(this, idx, material);

          if (!this._spriteFrame || !this._model || !this._model.inited) {
            return;
          }

          this._onRebuildPSO(idx, material || this._getBuiltinMaterial());
        };

        _proto._onRebuildPSO = function _onRebuildPSO(idx, material) {
          if (!this._model || !this._model.inited) {
            return;
          }

          this._model.setSubModelMaterial(idx, material);

          this._onUpdateLocalDescriptorSet();
        };

        _proto._onUpdateLocalDescriptorSet = function _onUpdateLocalDescriptorSet() {
          if (!this._spriteFrame || !this._model || !this._model.inited) {
            return;
          }

          var texture = this._spriteFrame.getGFXTexture();

          var sampler = this._spriteFrame.getGFXSampler();

          var subModels = this._model.subModels;
          var binding = ModelLocalBindings.SAMPLER_SPRITE;

          for (var i = 0; i < subModels.length; i++) {
            var descriptorSet = subModels[i].descriptorSet;
            descriptorSet.bindTexture(binding, texture);
            descriptorSet.bindSampler(binding, sampler);
            descriptorSet.update();
          }
        };

        _proto._attachToScene = function _attachToScene() {
          if (!this.node.scene || !this._model) {
            return;
          }

          var renderScene = this._getRenderScene();

          if (this._model.scene !== null) {
            this._detachFromScene();
          }

          renderScene.addModel(this._model);
        };

        _proto._detachFromScene = function _detachFromScene() {
          if (this._model && this._model.scene) {
            this._model.scene.removeModel(this._model);
          }
        };

        _createClass(SpriteRenderer, [{
          key: "spriteFrame",
          get: function get() {
            return this._spriteFrame;
          },
          set: function set(value) {
            if (this._spriteFrame === value) {
              return;
            }

            var lastSprite = this._spriteFrame;
            this._spriteFrame = value;

            if (this._spriteFrame) {
              this._spriteFrame.ensureMeshData();

              var mesh = this._spriteFrame.mesh;
              mesh.initialize();
            }

            this._updateModels();

            if (this.enabledInHierarchy) {
              this._attachToScene();
            }
          }
        }, {
          key: "model",
          get: function get() {
            return this._model;
          }
        }]);

        return SpriteRenderer;
      }(ModelRenderer), (_applyDecoratedDescriptor(_class2$U.prototype, "spriteFrame", [_dec3$i], Object.getOwnPropertyDescriptor(_class2$U.prototype, "spriteFrame"), _class2$U.prototype), _initializer$K = applyDecoratedInitializer(_class2$U.prototype, "_spriteFrame", [serializable], function () {
        return null;
      }), _initializer2$u = applyDecoratedInitializer(_class2$U.prototype, "_mode", [serializable], function () {
        return SpriteMode.SIMPLE;
      }), _initializer3$n = applyDecoratedInitializer(_class2$U.prototype, "_color", [serializable], function () {
        return Color.WHITE.clone();
      }), _initializer4$j = applyDecoratedInitializer(_class2$U.prototype, "_flipX", [serializable], function () {
        return false;
      }), _initializer5$d = applyDecoratedInitializer(_class2$U.prototype, "_flipY", [serializable], function () {
        return false;
      }), _initializer6$9 = applyDecoratedInitializer(_class2$U.prototype, "_size", [serializable], function () {
        return new Vec2();
      })), _class2$U)) || _class$$) || _class$$));

      var _dec$10, _dec2$x, _dec3$j, _dec4$9, _dec5$6, _dec6$6, _dec7$6, _class$10, _class2$V, _initializer$L, _initializer2$v, _initializer3$o, _initializer4$k, _initializer5$e, _initializer6$a, _initializer7$8, _initializer8$8, _initializer9$7, _initializer10$7, _initializer11$6, _initializer12$5, _initializer13$5, _class3$l, _temp$t;

      var _htmlTextParser = new HtmlTextParser();

      var RichTextChildName = 'RICHTEXT_CHILD';
      var RichTextChildImageName = 'RICHTEXT_Image_CHILD';
      var labelPool = new Pool(function (seg) {

        if (!legacyCC.isValid(seg.node)) {
          return false;
        } else {
          var outline = seg.node.getComponent(LabelOutline);

          if (outline) {
            outline.width = 0;
          }
        }

        return true;
      }, 20);
      var imagePool = new Pool(function (seg) {

        return legacyCC.isValid(seg.node);
      }, 10);

      function createSegment(type) {
        return {
          node: new Node$1(type),
          comp: null,
          lineCount: 0,
          styleIndex: 0,
          imageOffset: '',
          clickParam: '',
          clickHandler: '',
          type: type
        };
      }

      function getSegmentByPool(type, content) {
        var seg;

        if (type === RichTextChildName) {
          seg = labelPool._get();
        } else if (type === RichTextChildImageName) {
          seg = imagePool._get();
        }

        seg = seg || createSegment(type);
        var node = seg.node;

        if (!node) {
          node = new Node$1(type);
        }

        node.hideFlags |= CCObject.Flags.DontSave | CCObject.Flags.HideInHierarchy;

        if (type === RichTextChildImageName) {
          seg.comp = node.getComponent(Sprite) || node.addComponent(Sprite);
          seg.comp.spriteFrame = content;
          seg.comp.type = Sprite.Type.SLICED;
          seg.comp.sizeMode = Sprite.SizeMode.CUSTOM;
        } else {
          seg.comp = node.getComponent(Label) || node.addComponent(Label);
          seg.comp.string = content;
          seg.comp.horizontalAlign = HorizontalTextAlignment.LEFT;
          seg.comp.verticalAlign = VerticalTextAlignment.TOP;
          seg.comp.underlineHeight = 2;
        }

        node.setPosition(0, 0, 0);
        var trans = node._uiProps.uiTransformComp;
        trans.setAnchorPoint(0.5, 0.5);
        seg.node = node;
        seg.lineCount = 0;
        seg.styleIndex = 0;
        seg.imageOffset = '';
        seg.clickParam = '';
        seg.clickHandler = '';
        return seg;
      }

      var RichText = exports('RichText', (_dec$10 = ccclass('cc.RichText'), _dec2$x = executionOrder(110), _dec3$j = type(HorizontalTextAlignment), _dec4$9 = type(VerticalTextAlignment), _dec5$6 = type(Font), _dec6$6 = type(CacheMode), _dec7$6 = type(SpriteAtlas), _dec$10(_class$10 = _dec2$x(_class$10 = (_class2$V = (_temp$t = _class3$l = function (_Component) {
        _inheritsLoose(RichText, _Component);

        function RichText() {
          var _this;

          _this = _Component.call(this) || this;
          _this._lineHeight = _initializer$L && _initializer$L();
          _this._string = _initializer2$v && _initializer2$v();
          _this._horizontalAlign = _initializer3$o && _initializer3$o();
          _this._verticalAlign = _initializer4$k && _initializer4$k();
          _this._fontSize = _initializer5$e && _initializer5$e();
          _this._maxWidth = _initializer6$a && _initializer6$a();
          _this._fontFamily = _initializer7$8 && _initializer7$8();
          _this._font = _initializer8$8 && _initializer8$8();
          _this._isSystemFontUsed = _initializer9$7 && _initializer9$7();
          _this._userDefinedFont = _initializer10$7 && _initializer10$7();
          _this._cacheMode = _initializer11$6 && _initializer11$6();
          _this._imageAtlas = _initializer12$5 && _initializer12$5();
          _this._handleTouchEvent = _initializer13$5 && _initializer13$5();
          _this._textArray = [];
          _this._segments = [];
          _this._labelSegmentsCache = [];
          _this._linesWidth = [];
          _this._lineCount = 1;
          _this._labelWidth = 0;
          _this._labelHeight = 0;
          _this._layoutDirty = true;
          _this._lineOffsetX = 0;
          _this._updateRichTextStatus = void 0;
          _this._labelChildrenNum = 0;

          _this._updateRichTextStatus = _this._updateRichText;
          return _this;
        }

        var _proto = RichText.prototype;

        _proto.onLoad = function onLoad() {
          this.node.on(NodeEventType.LAYER_CHANGED, this._applyLayer, this);
          this.node.on(NodeEventType.ANCHOR_CHANGED, this._updateRichTextPosition, this);
        };

        _proto.onEnable = function onEnable() {
          if (this.handleTouchEvent) {
            this._addEventListeners();
          }

          this._updateRichText();

          this._activateChildren(true);
        };

        _proto.onDisable = function onDisable() {
          if (this.handleTouchEvent) {
            this._removeEventListeners();
          }

          this._activateChildren(false);
        };

        _proto.onRestore = function onRestore() {
          {
            return;
          }
        };

        _proto.onDestroy = function onDestroy() {
          for (var _iterator = _createForOfIteratorHelperLoose(this._segments), _step; !(_step = _iterator()).done;) {
            var seg = _step.value;
            seg.node.removeFromParent();

            if (seg.type === RichTextChildName) {
              labelPool.put(seg);
            } else if (seg.type === RichTextChildImageName) {
              imagePool.put(seg);
            }
          }

          this.node.off(NodeEventType.ANCHOR_CHANGED, this._updateRichTextPosition, this);
          this.node.off(NodeEventType.LAYER_CHANGED, this._applyLayer, this);
        };

        _proto._addEventListeners = function _addEventListeners() {
          this.node.on(NodeEventType.TOUCH_END, this._onTouchEnded, this);
        };

        _proto._removeEventListeners = function _removeEventListeners() {
          this.node.off(NodeEventType.TOUCH_END, this._onTouchEnded, this);
        };

        _proto._updateLabelSegmentTextAttributes = function _updateLabelSegmentTextAttributes() {
          var _this2 = this;

          this._segments.forEach(function (item) {
            _this2._applyTextAttribute(item);
          });
        };

        _proto._createFontLabel = function _createFontLabel(str) {
          return getSegmentByPool(RichTextChildName, str);
        };

        _proto._createImage = function _createImage(spriteFrame) {
          return getSegmentByPool(RichTextChildImageName, spriteFrame);
        };

        _proto._onTTFLoaded = function _onTTFLoaded() {
          if (this._font instanceof TTFFont) {
            this._layoutDirty = true;

            this._updateRichText();
          } else {
            this._layoutDirty = true;

            this._updateRichText();
          }
        };

        _proto.splitLongStringApproximatelyIn2048 = function splitLongStringApproximatelyIn2048(text, styleIndex) {
          var approxSize = text.length * this.fontSize;
          var partStringArr = [];

          if (approxSize <= 2048 * 0.8) {
            partStringArr.push(text);
            return partStringArr;
          }

          var labelSize = this._calculateSize(styleIndex, text);

          if (labelSize.x < 2048) {
            partStringArr.push(text);
          } else {
            var multilineTexts = text.split('\n');

            for (var i = 0; i < multilineTexts.length; i++) {
              var thisPartSize = this._calculateSize(styleIndex, multilineTexts[i]);

              if (thisPartSize.x < 2048) {
                partStringArr.push(multilineTexts[i]);
              } else {
                var thisPartSplitResultArr = this.splitLongStringOver2048(multilineTexts[i], styleIndex);
                partStringArr.push.apply(partStringArr, thisPartSplitResultArr);
              }
            }
          }

          return partStringArr;
        };

        _proto.splitLongStringOver2048 = function splitLongStringOver2048(text, styleIndex) {
          var partStringArr = [];
          var longStr = text;
          var curStart = 0;
          var curEnd = longStr.length / 2;
          var curString = longStr.substring(curStart, curEnd);
          var leftString = longStr.substring(curEnd);

          var curStringSize = this._calculateSize(styleIndex, curString);

          var leftStringSize = this._calculateSize(styleIndex, leftString);

          var lineCountForOnePart = 1;
          var sizeForOnePart = lineCountForOnePart * this.maxWidth;

          while (curStringSize.x > sizeForOnePart) {
            curEnd /= 2;

            if (curEnd < 1) {
              curEnd *= 2;
              break;
            }

            curString = curString.substring(curStart, curEnd);
            leftString = longStr.substring(curEnd);
            curStringSize = this._calculateSize(styleIndex, curString);
          }

          var leftTryTimes = 1000;
          var curWordStep = 1;

          while (leftTryTimes && curStart < text.length) {
            while (leftTryTimes && curStringSize.x < sizeForOnePart) {
              var nextPartExec = getEnglishWordPartAtFirst(leftString);

              if (nextPartExec && nextPartExec.length > 0) {
                curWordStep = nextPartExec[0].length;
              }

              curEnd += curWordStep;
              curString = longStr.substring(curStart, curEnd);
              leftString = longStr.substring(curEnd);
              curStringSize = this._calculateSize(styleIndex, curString);
              leftTryTimes--;
            }

            while (leftTryTimes && curString.length >= 2 && curStringSize.x > sizeForOnePart) {
              curEnd -= curWordStep;
              curString = longStr.substring(curStart, curEnd);
              curStringSize = this._calculateSize(styleIndex, curString);
              curWordStep = 1;
              leftTryTimes--;
            }

            if (curString.length >= 2) {
              var lastWordExec = getEnglishWordPartAtLast(curString);

              if (lastWordExec && lastWordExec.length > 0 && curString !== lastWordExec[0]) {
                curEnd -= lastWordExec[0].length;
                curString = longStr.substring(curStart, curEnd);
              }
            }

            partStringArr.push(curString);
            var partStep = curString.length;
            curStart = curEnd;
            curEnd += partStep;
            curString = longStr.substring(curStart, curEnd);
            leftString = longStr.substring(curEnd);
            leftStringSize = this._calculateSize(styleIndex, leftString);
            leftTryTimes--;

            if (leftStringSize.x < 2048) {
              curStart = text.length;
              curEnd = text.length;
              curString = leftString;
              partStringArr.push(curString);
              break;
            } else {
              curStringSize = this._calculateSize(styleIndex, curString);
            }
          }

          return partStringArr;
        };

        _proto._measureText = function _measureText(styleIndex, string) {
          var _this3 = this;

          var func = function func(s) {
            var labelSize = _this3._calculateSize(styleIndex, s);

            return labelSize.width;
          };

          if (string) {
            return func(string);
          } else {
            return func;
          }
        };

        _proto._calculateSize = function _calculateSize(styleIndex, s) {
          var label;

          if (this._labelSegmentsCache.length === 0) {
            label = this._createFontLabel(s);

            this._labelSegmentsCache.push(label);
          } else {
            label = this._labelSegmentsCache[0];
            label.node.getComponent(Label).string = s;
          }

          label.styleIndex = styleIndex;

          this._applyTextAttribute(label);

          var labelSize = label.node._uiProps.uiTransformComp.contentSize;
          return labelSize;
        };

        _proto._onTouchEnded = function _onTouchEnded(event) {
          var _this4 = this;

          var components = this.node.getComponents(Component);

          var _loop = function _loop() {
            var seg = _step2.value;
            var clickHandler = seg.clickHandler;
            var clickParam = seg.clickParam;

            if (clickHandler && _this4._containsTouchLocation(seg, event.touch.getUILocation())) {
              components.forEach(function (component) {
                var func = component[clickHandler];

                if (component.enabledInHierarchy && func) {
                  func.call(component, event, clickParam);
                }
              });
              event.propagationStopped = true;
            }
          };

          for (var _iterator2 = _createForOfIteratorHelperLoose(this._segments), _step2; !(_step2 = _iterator2()).done;) {
            _loop();
          }
        };

        _proto._containsTouchLocation = function _containsTouchLocation(label, point) {
          var comp = label.node.getComponent(UITransform);

          if (!comp) {
            return false;
          }

          var myRect = comp.getBoundingBoxToWorld();
          return myRect.contains(point);
        };

        _proto._resetState = function _resetState() {
          var children = this.node.children;

          for (var i = children.length - 1; i >= 0; i--) {
            var child = children[i];

            if (child.name === RichTextChildName || child.name === RichTextChildImageName) {
              {
                assert(child.parent === this.node);
              }

              child.parent = null;
              var segment = createSegment(child.name);
              segment.node = child;

              if (child.name === RichTextChildName) {
                segment.comp = child.getComponent(Label);
                labelPool.put(segment);
              } else {
                segment.comp = child.getComponent(Sprite);
                imagePool.put(segment);
              }

              this._labelChildrenNum--;
            }
          }

          this._segments.length = 0;
          this._labelSegmentsCache.length = 0;
          this._linesWidth.length = 0;
          this._lineOffsetX = 0;
          this._lineCount = 1;
          this._labelWidth = 0;
          this._labelHeight = 0;
          this._layoutDirty = true;
        };

        _proto._activateChildren = function _activateChildren(active) {
          for (var i = this.node.children.length - 1; i >= 0; i--) {
            var child = this.node.children[i];

            if (child.name === RichTextChildName || child.name === RichTextChildImageName) {
              child.active = active;
            }
          }
        };

        _proto._addLabelSegment = function _addLabelSegment(stringToken, styleIndex) {
          var labelSegment;

          if (this._labelSegmentsCache.length === 0) {
            labelSegment = this._createFontLabel(stringToken);
          } else {
            labelSegment = this._labelSegmentsCache.pop();
            var label = labelSegment.node.getComponent(Label);

            if (label) {
              label.string = stringToken;
            }
          }

          var labelComp = labelSegment.comp;

          if (labelComp.verticalAlign !== this._verticalAlign) {
            labelComp.verticalAlign = this._verticalAlign;
          }

          labelSegment.styleIndex = styleIndex;
          labelSegment.lineCount = this._lineCount;

          labelSegment.node._uiProps.uiTransformComp.setAnchorPoint(0, 0);

          labelSegment.node.layer = this.node.layer;
          this.node.insertChild(labelSegment.node, this._labelChildrenNum++);

          this._applyTextAttribute(labelSegment);

          this._segments.push(labelSegment);

          return labelSegment;
        };

        _proto._updateRichTextWithMaxWidth = function _updateRichTextWithMaxWidth(labelString, labelWidth, styleIndex) {
          var fragmentWidth = labelWidth;
          var labelSegment;

          if (this._lineOffsetX > 0 && fragmentWidth + this._lineOffsetX > this._maxWidth) {
            var checkStartIndex = 0;

            while (this._lineOffsetX <= this._maxWidth) {
              var checkEndIndex = this._getFirstWordLen(labelString, checkStartIndex, labelString.length);

              var checkString = labelString.substr(checkStartIndex, checkEndIndex);

              var checkStringWidth = this._measureText(styleIndex, checkString);

              if (this._lineOffsetX + checkStringWidth <= this._maxWidth) {
                this._lineOffsetX += checkStringWidth;
                checkStartIndex += checkEndIndex;
              } else {
                if (checkStartIndex > 0) {
                  var remainingString = labelString.substr(0, checkStartIndex);

                  this._addLabelSegment(remainingString, styleIndex);

                  labelString = labelString.substr(checkStartIndex, labelString.length);
                  fragmentWidth = this._measureText(styleIndex, labelString);
                }

                this._updateLineInfo();

                break;
              }
            }
          }

          if (fragmentWidth > this._maxWidth) {
            var fragments = fragmentText(labelString, fragmentWidth, this._maxWidth, this._measureText(styleIndex));

            for (var k = 0; k < fragments.length; ++k) {
              var splitString = fragments[k];
              labelSegment = this._addLabelSegment(splitString, styleIndex);
              var labelSize = labelSegment.node._uiProps.uiTransformComp.contentSize;
              this._lineOffsetX += labelSize.width;

              if (fragments.length > 1 && k < fragments.length - 1) {
                this._updateLineInfo();
              }
            }
          } else {
            this._lineOffsetX += fragmentWidth;

            this._addLabelSegment(labelString, styleIndex);
          }
        };

        _proto._isLastComponentCR = function _isLastComponentCR(stringToken) {
          return stringToken.length - 1 === stringToken.lastIndexOf('\n');
        };

        _proto._updateLineInfo = function _updateLineInfo() {
          this._linesWidth.push(this._lineOffsetX);

          this._lineOffsetX = 0;
          this._lineCount++;
        };

        _proto._needsUpdateTextLayout = function _needsUpdateTextLayout(newTextArray) {
          if (this._layoutDirty || !this._textArray || !newTextArray) {
            return true;
          }

          if (this._textArray.length !== newTextArray.length) {
            return true;
          }

          for (var i = 0; i < this._textArray.length; i++) {
            var oldItem = this._textArray[i];
            var newItem = newTextArray[i];

            if (oldItem.text !== newItem.text) {
              return true;
            } else {
              var oldStyle = oldItem.style;
              var newStyle = newItem.style;

              if (oldStyle) {
                if (newStyle) {
                  if (!!newStyle.outline !== !!oldStyle.outline) {
                    return true;
                  }

                  if (oldStyle.size !== newStyle.size || oldStyle.italic !== newStyle.italic || oldStyle.isImage !== newStyle.isImage) {
                    return true;
                  }

                  if (oldStyle.src !== newStyle.src || oldStyle.imageAlign !== newStyle.imageAlign || oldStyle.imageHeight !== newStyle.imageHeight || oldStyle.imageWidth !== newStyle.imageWidth || oldStyle.imageOffset !== newStyle.imageOffset) {
                    return true;
                  }
                } else if (oldStyle.size || oldStyle.italic || oldStyle.isImage || oldStyle.outline) {
                  return true;
                }
              } else if (newStyle) {
                if (newStyle.size || newStyle.italic || newStyle.isImage || newStyle.outline) {
                  return true;
                }
              }
            }
          }

          return false;
        };

        _proto._addRichTextImageElement = function _addRichTextImageElement(richTextElement) {
          if (!richTextElement.style) {
            return;
          }

          var style = richTextElement.style;
          var spriteFrameName = style.src;

          var spriteFrame = this._imageAtlas && spriteFrameName && this._imageAtlas.getSpriteFrame(spriteFrameName);

          if (!spriteFrame) {
            warnID(4400);
          } else {
            var segment = this._createImage(spriteFrame);

            var sprite = segment.comp;

            switch (style.imageAlign) {
              case 'top':
                segment.node._uiProps.uiTransformComp.setAnchorPoint(0, 1);

                break;

              case 'center':
                segment.node._uiProps.uiTransformComp.setAnchorPoint(0, 0.5);

                break;

              default:
                segment.node._uiProps.uiTransformComp.setAnchorPoint(0, 0);

                break;
            }

            if (style.imageOffset) {
              segment.imageOffset = style.imageOffset;
            }

            segment.node.layer = this.node.layer;
            this.node.insertChild(segment.node, this._labelChildrenNum++);

            this._segments.push(segment);

            var spriteRect = spriteFrame.rect.clone();
            var scaleFactor = 1;
            var spriteWidth = spriteRect.width;
            var spriteHeight = spriteRect.height;
            var expectWidth = style.imageWidth || 0;
            var expectHeight = style.imageHeight || 0;

            if (expectHeight > 0) {
              scaleFactor = expectHeight / spriteHeight;
              spriteWidth *= scaleFactor;
              spriteHeight *= scaleFactor;
            } else {
              scaleFactor = this._lineHeight / spriteHeight;
              spriteWidth *= scaleFactor;
              spriteHeight *= scaleFactor;
            }

            if (expectWidth > 0) {
              spriteWidth = expectWidth;
            }

            if (this._maxWidth > 0) {
              if (this._lineOffsetX + spriteWidth > this._maxWidth) {
                this._updateLineInfo();
              }

              this._lineOffsetX += spriteWidth;
            } else {
              this._lineOffsetX += spriteWidth;

              if (this._lineOffsetX > this._labelWidth) {
                this._labelWidth = this._lineOffsetX;
              }
            }

            segment.node._uiProps.uiTransformComp.setContentSize(spriteWidth, spriteHeight);

            segment.lineCount = this._lineCount;
            segment.clickHandler = '';
            segment.clickParam = '';
            var event = style.event;

            if (event) {
              segment.clickHandler = event.click;
              segment.clickParam = event.param;
            }
          }
        };

        _proto._updateRichText = function _updateRichText() {
          if (!this.enabledInHierarchy) {
            return;
          }

          var newTextArray = _htmlTextParser.parse(this._string);

          if (!this._needsUpdateTextLayout(newTextArray)) {
            this._textArray = newTextArray.slice();

            this._updateLabelSegmentTextAttributes();

            return;
          }

          this._textArray = newTextArray.slice();

          this._resetState();

          var lastEmptyLine = false;
          var label;

          for (var i = 0; i < this._textArray.length; ++i) {
            var richTextElement = this._textArray[i];
            var text = richTextElement.text;

            if (text === undefined) {
              continue;
            }

            if (text === '') {
              if (richTextElement.style && richTextElement.style.isNewLine) {
                this._updateLineInfo();

                continue;
              }

              if (richTextElement.style && richTextElement.style.isImage && this._imageAtlas) {
                this._addRichTextImageElement(richTextElement);

                continue;
              }
            }

            var splitArr = this.splitLongStringApproximatelyIn2048(text, i);
            text = splitArr.join('\n');
            var multilineTexts = text.split('\n');

            for (var j = 0; j < multilineTexts.length; ++j) {
              var labelString = multilineTexts[j];

              if (labelString === '') {
                if (this._isLastComponentCR(text) && j === multilineTexts.length - 1) {
                  continue;
                }

                this._updateLineInfo();

                lastEmptyLine = true;
                continue;
              }

              lastEmptyLine = false;

              if (this._maxWidth > 0) {
                var labelWidth = this._measureText(i, labelString);

                this._updateRichTextWithMaxWidth(labelString, labelWidth, i);

                if (multilineTexts.length > 1 && j < multilineTexts.length - 1) {
                  this._updateLineInfo();
                }
              } else {
                label = this._addLabelSegment(labelString, i);
                this._lineOffsetX += label.node._uiProps.uiTransformComp.width;

                if (this._lineOffsetX > this._labelWidth) {
                  this._labelWidth = this._lineOffsetX;
                }

                if (multilineTexts.length > 1 && j < multilineTexts.length - 1) {
                  this._updateLineInfo();
                }
              }
            }
          }

          if (!lastEmptyLine) {
            this._linesWidth.push(this._lineOffsetX);
          }

          if (this._maxWidth > 0) {
            this._labelWidth = this._maxWidth;
          }

          this._labelHeight = (this._lineCount + BASELINE_RATIO) * this._lineHeight;

          this.node._uiProps.uiTransformComp.setContentSize(this._labelWidth, this._labelHeight);

          this._updateRichTextPosition();

          this._layoutDirty = false;
        };

        _proto._getFirstWordLen = function _getFirstWordLen(text, startIndex, textLen) {
          var character = text.charAt(startIndex);

          if (isUnicodeCJK(character) || isUnicodeSpace(character)) {
            return 1;
          }

          var len = 1;

          for (var index = startIndex + 1; index < textLen; ++index) {
            character = text.charAt(index);

            if (isUnicodeSpace(character) || isUnicodeCJK(character)) {
              break;
            }

            len++;
          }

          return len;
        };

        _proto._updateRichTextPosition = function _updateRichTextPosition() {
          var nextTokenX = 0;
          var nextLineIndex = 1;
          var totalLineCount = this._lineCount;
          var trans = this.node._uiProps.uiTransformComp;
          var anchorX = trans.anchorX;
          var anchorY = trans.anchorY;

          for (var i = 0; i < this._segments.length; ++i) {
            var segment = this._segments[i];
            var lineCount = segment.lineCount;

            if (lineCount > nextLineIndex) {
              nextTokenX = 0;
              nextLineIndex = lineCount;
            }

            var lineOffsetX = this._labelWidth * (this._horizontalAlign * 0.5 - anchorX);

            switch (this._horizontalAlign) {
              case HorizontalTextAlignment.LEFT:
                break;

              case HorizontalTextAlignment.CENTER:
                lineOffsetX -= this._linesWidth[lineCount - 1] / 2;
                break;

              case HorizontalTextAlignment.RIGHT:
                lineOffsetX -= this._linesWidth[lineCount - 1];
                break;
            }

            var pos = segment.node.position;
            segment.node.setPosition(nextTokenX + lineOffsetX, this._lineHeight * (totalLineCount - lineCount) - this._labelHeight * anchorY, pos.z);

            if (lineCount === nextLineIndex) {
              nextTokenX += segment.node._uiProps.uiTransformComp.width;
            }

            var sprite = segment.node.getComponent(Sprite);

            if (sprite) {
              var position = segment.node.position.clone();
              var lineHeightSet = this._lineHeight;
              var lineHeightReal = this._lineHeight * (1 + BASELINE_RATIO);

              switch (segment.node._uiProps.uiTransformComp.anchorY) {
                case 1:
                  position.y += lineHeightSet + (lineHeightReal - lineHeightSet) / 2;
                  break;

                case 0.5:
                  position.y += lineHeightReal / 2;
                  break;

                default:
                  position.y += (lineHeightReal - lineHeightSet) / 2;
                  break;
              }

              if (segment.imageOffset) {
                var offsets = segment.imageOffset.split(',');

                if (offsets.length === 1 && offsets[0]) {
                  var offsetY = parseFloat(offsets[0]);
                  if (Number.isInteger(offsetY)) position.y += offsetY;
                } else if (offsets.length === 2) {
                  var offsetX = parseFloat(offsets[0]);

                  var _offsetY = parseFloat(offsets[1]);

                  if (Number.isInteger(offsetX)) position.x += offsetX;
                  if (Number.isInteger(_offsetY)) position.y += _offsetY;
                }
              }

              segment.node.position = position;
            }

            var outline = segment.node.getComponent(LabelOutline);

            if (outline) {
              var _position = segment.node.position.clone();

              _position.y -= outline.width;
              segment.node.position = _position;
            }
          }
        };

        _proto._convertLiteralColorValue = function _convertLiteralColorValue(color) {
          var colorValue = color.toUpperCase();

          if (Color[colorValue]) {
            var colorUse = Color[colorValue];
            return colorUse;
          } else {
            var out = new Color();
            return out.fromHEX(color);
          }
        };

        _proto._applyTextAttribute = function _applyTextAttribute(labelSeg) {
          var label = labelSeg.node.getComponent(Label);

          if (!label) {
            return;
          }

          this._resetLabelState(label);

          var index = labelSeg.styleIndex;
          var textStyle;

          if (this._textArray[index]) {
            textStyle = this._textArray[index].style;
          }

          if (textStyle) {
            label.color = this._convertLiteralColorValue(textStyle.color || 'white');
            label.isBold = !!textStyle.bold;
            label.isItalic = !!textStyle.italic;
            label.isUnderline = !!textStyle.underline;

            if (textStyle.outline) {
              var labelOutline = labelSeg.node.getComponent(LabelOutline);

              if (!labelOutline) {
                labelOutline = labelSeg.node.addComponent(LabelOutline);
              }

              labelOutline.color = this._convertLiteralColorValue(textStyle.outline.color);
              labelOutline.width = textStyle.outline.width;
            }

            label.fontSize = textStyle.size || this._fontSize;
            labelSeg.clickHandler = '';
            labelSeg.clickParam = '';
            var event = textStyle.event;

            if (event) {
              labelSeg.clickHandler = event.click || '';
              labelSeg.clickParam = event.param || '';
            }
          }

          label.cacheMode = this._cacheMode;
          var isAsset = this._font instanceof Font;

          if (isAsset && !this._isSystemFontUsed) {
            label.font = this._font;
          } else {
            label.fontFamily = this._fontFamily;
          }

          label.useSystemFont = this._isSystemFontUsed;
          label.lineHeight = this._lineHeight;
          label.updateRenderData(true);
        };

        _proto._applyLayer = function _applyLayer() {
          for (var _iterator3 = _createForOfIteratorHelperLoose(this._segments), _step3; !(_step3 = _iterator3()).done;) {
            var seg = _step3.value;
            seg.node.layer = this.node.layer;
          }
        };

        _proto._resetLabelState = function _resetLabelState(label) {
          label.fontSize = this._fontSize;
          label.color = Color.WHITE;
          label.isBold = false;
          label.isItalic = false;
          label.isUnderline = false;
        };

        _createClass(RichText, [{
          key: "string",
          get: function get() {
            return this._string;
          },
          set: function set(value) {
            if (this._string === value) {
              return;
            }

            this._string = value;

            this._updateRichTextStatus();
          }
        }, {
          key: "horizontalAlign",
          get: function get() {
            return this._horizontalAlign;
          },
          set: function set(value) {
            if (this.horizontalAlign === value) {
              return;
            }

            this._horizontalAlign = value;
            this._layoutDirty = true;

            this._updateRichTextStatus();
          }
        }, {
          key: "verticalAlign",
          get: function get() {
            return this._verticalAlign;
          },
          set: function set(value) {
            if (this._verticalAlign === value) {
              return;
            }

            this._verticalAlign = value;
            this._layoutDirty = true;

            this._updateRichTextStatus();
          }
        }, {
          key: "fontSize",
          get: function get() {
            return this._fontSize;
          },
          set: function set(value) {
            if (this._fontSize === value) {
              return;
            }

            this._fontSize = value;
            this._layoutDirty = true;

            this._updateRichTextStatus();
          }
        }, {
          key: "fontFamily",
          get: function get() {
            return this._fontFamily;
          },
          set: function set(value) {
            if (this._fontFamily === value) return;
            this._fontFamily = value;
            this._layoutDirty = true;

            this._updateRichTextStatus();
          }
        }, {
          key: "font",
          get: function get() {
            return this._font;
          },
          set: function set(value) {
            if (this._font === value) {
              return;
            }

            this._font = value;
            this._layoutDirty = true;

            if (this._font) {

              this.useSystemFont = false;

              this._onTTFLoaded();
            } else {
              this.useSystemFont = true;
            }

            this._updateRichTextStatus();
          }
        }, {
          key: "useSystemFont",
          get: function get() {
            return this._isSystemFontUsed;
          },
          set: function set(value) {
            if (this._isSystemFontUsed === value) {
              return;
            }

            this._isSystemFontUsed = value;

            this._layoutDirty = true;

            this._updateRichTextStatus();
          }
        }, {
          key: "cacheMode",
          get: function get() {
            return this._cacheMode;
          },
          set: function set(value) {
            if (this._cacheMode === value) {
              return;
            }

            this._cacheMode = value;

            this._updateRichTextStatus();
          }
        }, {
          key: "maxWidth",
          get: function get() {
            return this._maxWidth;
          },
          set: function set(value) {
            if (this._maxWidth === value) {
              return;
            }

            this._maxWidth = value;
            this._layoutDirty = true;

            this._updateRichTextStatus();
          }
        }, {
          key: "lineHeight",
          get: function get() {
            return this._lineHeight;
          },
          set: function set(value) {
            if (this._lineHeight === value) {
              return;
            }

            this._lineHeight = value;
            this._layoutDirty = true;

            this._updateRichTextStatus();
          }
        }, {
          key: "imageAtlas",
          get: function get() {
            return this._imageAtlas;
          },
          set: function set(value) {
            if (this._imageAtlas === value) {
              return;
            }

            this._imageAtlas = value;
            this._layoutDirty = true;

            this._updateRichTextStatus();
          }
        }, {
          key: "handleTouchEvent",
          get: function get() {
            return this._handleTouchEvent;
          },
          set: function set(value) {
            if (this._handleTouchEvent === value) {
              return;
            }

            this._handleTouchEvent = value;

            if (this.enabledInHierarchy) {
              if (this.handleTouchEvent) {
                this._addEventListeners();
              } else {
                this._removeEventListeners();
              }
            }
          }
        }]);

        return RichText;
      }(Component), _class3$l.HorizontalAlign = HorizontalTextAlignment, _class3$l.VerticalAlign = VerticalTextAlignment, _temp$t), (_applyDecoratedDescriptor(_class2$V.prototype, "horizontalAlign", [_dec3$j], Object.getOwnPropertyDescriptor(_class2$V.prototype, "horizontalAlign"), _class2$V.prototype), _applyDecoratedDescriptor(_class2$V.prototype, "verticalAlign", [_dec4$9], Object.getOwnPropertyDescriptor(_class2$V.prototype, "verticalAlign"), _class2$V.prototype), _applyDecoratedDescriptor(_class2$V.prototype, "font", [_dec5$6], Object.getOwnPropertyDescriptor(_class2$V.prototype, "font"), _class2$V.prototype), _applyDecoratedDescriptor(_class2$V.prototype, "cacheMode", [_dec6$6], Object.getOwnPropertyDescriptor(_class2$V.prototype, "cacheMode"), _class2$V.prototype), _applyDecoratedDescriptor(_class2$V.prototype, "imageAtlas", [_dec7$6], Object.getOwnPropertyDescriptor(_class2$V.prototype, "imageAtlas"), _class2$V.prototype), _initializer$L = applyDecoratedInitializer(_class2$V.prototype, "_lineHeight", [serializable], function () {
        return 40;
      }), _initializer2$v = applyDecoratedInitializer(_class2$V.prototype, "_string", [serializable], function () {
        return '<color=#00ff00>Rich</color><color=#0fffff>Text</color>';
      }), _initializer3$o = applyDecoratedInitializer(_class2$V.prototype, "_horizontalAlign", [serializable], function () {
        return HorizontalTextAlignment.LEFT;
      }), _initializer4$k = applyDecoratedInitializer(_class2$V.prototype, "_verticalAlign", [serializable], function () {
        return VerticalTextAlignment.TOP;
      }), _initializer5$e = applyDecoratedInitializer(_class2$V.prototype, "_fontSize", [serializable], function () {
        return 40;
      }), _initializer6$a = applyDecoratedInitializer(_class2$V.prototype, "_maxWidth", [serializable], function () {
        return 0;
      }), _initializer7$8 = applyDecoratedInitializer(_class2$V.prototype, "_fontFamily", [serializable], function () {
        return 'Arial';
      }), _initializer8$8 = applyDecoratedInitializer(_class2$V.prototype, "_font", [serializable], function () {
        return null;
      }), _initializer9$7 = applyDecoratedInitializer(_class2$V.prototype, "_isSystemFontUsed", [serializable], function () {
        return true;
      }), _initializer10$7 = applyDecoratedInitializer(_class2$V.prototype, "_userDefinedFont", [serializable], function () {
        return null;
      }), _initializer11$6 = applyDecoratedInitializer(_class2$V.prototype, "_cacheMode", [serializable], function () {
        return CacheMode.NONE;
      }), _initializer12$5 = applyDecoratedInitializer(_class2$V.prototype, "_imageAtlas", [serializable], function () {
        return null;
      }), _initializer13$5 = applyDecoratedInitializer(_class2$V.prototype, "_handleTouchEvent", [serializable], function () {
        return true;
      })), _class2$V)) || _class$10) || _class$10));
      legacyCC.RichText = RichText;

      var _dec$11, _dec2$y, _class$11;
      var UIMeshRenderer = exports('UIMeshRenderer', (_dec$11 = ccclass('cc.UIMeshRenderer'), _dec2$y = executionOrder(110), _dec$11(_class$11 = _dec2$y(_class$11 = function (_Component) {
        _inheritsLoose(UIMeshRenderer, _Component);

        function UIMeshRenderer() {
          var _this;

          _this = _Component.call(this) || this;
          _this._modelComponent = null;
          _this._dirtyVersion = -1;
          _this._internalId = -1;
          _this.stencilStage = Stage.DISABLED;
          _this._renderData = null;
          _this._renderEntity = new RenderEntity(RenderEntityType.DYNAMIC);

          return _this;
        }

        var _proto = UIMeshRenderer.prototype;

        _proto.__preload = function __preload() {
          this.node._uiProps.uiComp = this;
        };

        _proto.onEnable = function onEnable() {
          uiRendererManager.addRenderer(this);
          this.markForUpdateRenderData();
        };

        _proto.onDisable = function onDisable() {
          uiRendererManager.removeRenderer(this);
          this.renderEntity.enabled = this._canRender();
        };

        _proto.onLoad = function onLoad() {
          if (!this.node._uiProps.uiTransformComp) {
            this.node.addComponent('cc.UITransform');
          }

          this._modelComponent = this.getComponent('cc.ModelRenderer');

          if (!this._modelComponent) {
            console.warn("node '" + (this.node && this.node.name) + "' doesn't have any renderable component");
            return;
          }

          this.renderEntity.setNode(this.node);
        };

        _proto.onDestroy = function onDestroy() {
          this.renderEntity.setNode(null);

          if (this.node._uiProps.uiComp === this) {
            this.node._uiProps.uiComp = null;
          }

          this._modelComponent = this.getComponent('cc.ModelRenderer');

          if (!this._modelComponent) {
            return;
          }

          this._modelComponent._sceneGetter = null;
        };

        _proto._render = function _render(render) {
          if (this._modelComponent) {
            var models = this._modelComponent._collectModels();

            this._modelComponent._detachFromScene();

            for (var i = 0; i < models.length; i++) {
              if (models[i].enabled) {
                render.commitModel(this, models[i], this._modelComponent.material);
              }
            }

            return true;
          }

          return false;
        };

        _proto.fillBuffers = function fillBuffers(render) {
          if (this.enabled) {
            this._render(render);
          }
        };

        _proto.updateRenderer = function updateRenderer() {
        };

        _proto._uploadRenderData = function _uploadRenderData(index) {
        };

        _proto.postUpdateAssembler = function postUpdateAssembler(render) {};

        _proto.update = function update() {

          this._fitUIRenderQueue();
        };

        _proto._fitUIRenderQueue = function _fitUIRenderQueue() {
          if (!this._modelComponent) {
            return;
          }

          var matNum = this._modelComponent.sharedMaterials.length;

          for (var i = 0; i < matNum; i++) {
            var material = this._modelComponent.getMaterialInstance(i);

            if (material == null) {
              continue;
            }

            var passes = material.passes;
            var passNum = passes.length;

            for (var j = 0; j < passNum; j++) {
              var pass = passes[j];
              pass._priority = RenderPriority.MAX - 11;
              material.recompileShaders({
                CC_FORCE_FORWARD_SHADING: true
              }, j);
            }
          }
        };

        _proto.markForUpdateRenderData = function markForUpdateRenderData(enable) {

          uiRendererManager.markDirtyRenderer(this);
        };

        _proto.setNodeDirty = function setNodeDirty() {};

        _proto.setTextureDirty = function setTextureDirty() {};

        _proto._canRender = function _canRender() {
          return this.enabled && this._modelComponent !== null;
        };

        _createClass(UIMeshRenderer, [{
          key: "modelComponent",
          get: function get() {
            return this._modelComponent;
          }
        }, {
          key: "renderEntity",
          get: function get() {
            {
              assert(this._renderEntity, 'this._renderEntity should not be invalid');
            }

            return this._renderEntity;
          }
        }, {
          key: "renderData",
          get: function get() {
            return this._renderData;
          }
        }]);

        return UIMeshRenderer;
      }(Component)) || _class$11) || _class$11));
      legacyCC.UIMeshRenderer = UIMeshRenderer;

      var UI_VIS_FLAG = Layers.Enum.NONE | Layers.Enum.UI_3D;
      var DrawBatch2D = function () {
        function DrawBatch2D() {
          this.model = null;
          this.texture = null;
          this.sampler = null;
          this.useLocalData = null;
          this.isStatic = false;
          this.textureHash = 0;
          this.samplerHash = 0;
          this._passes = [];
          this._shaders = [];
          this._visFlags = UI_VIS_FLAG;
          this._inputAssembler = null;
          this._descriptorSet = null;
        }

        var _proto = DrawBatch2D.prototype;

        _proto.destroy = function destroy(ui) {
          this._passes = [];
        };

        _proto.clear = function clear() {
          this._inputAssembler = null;
          this._descriptorSet = null;
          this.texture = null;
          this.sampler = null;
          this.textureHash = 0;
          this.samplerHash = 0;
          this.model = null;
          this.isStatic = false;
          this.useLocalData = null;
          this.visFlags = UI_VIS_FLAG;
        };

        _proto.fillPasses = function fillPasses(mat, dss, dssHash, patches) {
          if (mat) {
            var passes = mat.passes;

            if (!passes) {
              return;
            }
            this._shaders.length = passes.length;

            for (var i = 0; i < passes.length; i++) {
              if (!this._passes[i]) {
                this._passes[i] = new Pass(legacyCC.director.root);
              }

              var mtlPass = passes[i];
              var passInUse = this._passes[i];
              mtlPass.update();

              if (!dss) {
                dss = mtlPass.depthStencilState;
                dssHash = 0;
              }

              passInUse._initPassFromTarget(mtlPass, dss, dssHash);

              this._shaders[i] = passInUse.getShaderVariant(patches);
            }
          }
        };

        _createClass(DrawBatch2D, [{
          key: "inputAssembler",
          get: function get() {
            return this._inputAssembler;
          },
          set: function set(ia) {
            this._inputAssembler = ia;
          }
        }, {
          key: "descriptorSet",
          get: function get() {
            return this._descriptorSet;
          },
          set: function set(ds) {
            this._descriptorSet = ds;
          }
        }, {
          key: "visFlags",
          get: function get() {
            return this._visFlags;
          },
          set: function set(vis) {
            this._visFlags = vis;
          }
        }, {
          key: "passes",
          get: function get() {
            return this._passes;
          }
        }, {
          key: "shaders",
          get: function get() {
            return this._shaders;
          }
        }]);

        return DrawBatch2D;
      }();

      var _dec$12, _dec2$z, _class$12, _class2$W;
      var UIStaticBatch = exports('UIStaticBatch', (_dec$12 = ccclass('cc.UIStaticBatch'), _dec2$z = executionOrder(110), _dec$12(_class$12 = _dec2$z(_class$12 = (_class2$W = function (_UIRenderer) {
        _inheritsLoose(UIStaticBatch, _UIRenderer);

        function UIStaticBatch() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _UIRenderer.call.apply(_UIRenderer, [this].concat(args)) || this;
          _this._init = false;
          _this._bufferAccessor = null;
          _this._dirty = true;
          _this._uiDrawBatchList = [];
          return _this;
        }

        var _proto = UIStaticBatch.prototype;

        _proto.postUpdateAssembler = function postUpdateAssembler(render) {};

        _proto.markAsDirty = function markAsDirty() {};

        _proto._requireDrawBatch = function _requireDrawBatch() {
          var batch = new DrawBatch2D();
          batch.isStatic = true;

          this._uiDrawBatchList.push(batch);

          return batch;
        };

        _proto._clearData = function _clearData() {
          if (this._bufferAccessor) {
            this._bufferAccessor.reset();

            var ui = this._getBatcher();

            for (var i = 0; i < this._uiDrawBatchList.length; i++) {
              var element = this._uiDrawBatchList[i];
              element.destroy(ui);
            }
          }

          this._uiDrawBatchList.length = 0;
          this._init = false;
        };

        _proto._getBatcher = function _getBatcher() {
          if (director.root && director.root.batcher2D) {
            return director.root.batcher2D;
          }

          warnID(9301);
          return null;
        };

        _createClass(UIStaticBatch, [{
          key: "color",
          get: function get() {
            return this._color;
          },
          set: function set(value) {
            if (this._color === value) {
              return;
            }

            this._color.set(value);
          }
        }, {
          key: "drawBatchList",
          get: function get() {
            return this._uiDrawBatchList;
          }
        }]);

        return UIStaticBatch;
      }(UIRenderer), (_applyDecoratedDescriptor(_class2$W.prototype, "color", [override], Object.getOwnPropertyDescriptor(_class2$W.prototype, "color"), _class2$W.prototype)), _class2$W)) || _class$12) || _class$12));

      var _dec$13, _dec2$A, _dec3$k, _class$13, _class2$X, _initializer$M, _initializer2$w, _initializer3$p;
      var LabelShadow = exports('LabelShadow', (_dec$13 = ccclass('cc.LabelShadow'), _dec2$A = executionOrder(110), _dec3$k = requireComponent(Label), _dec$13(_class$13 = _dec2$A(_class$13 = _dec3$k(_class$13 = (_class2$X = function (_Component) {
        _inheritsLoose(LabelShadow, _Component);

        function LabelShadow() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._color = _initializer$M && _initializer$M();
          _this._offset = _initializer2$w && _initializer2$w();
          _this._blur = _initializer3$p && _initializer3$p();
          return _this;
        }

        var _proto = LabelShadow.prototype;

        _proto.onEnable = function onEnable() {
          this._updateRenderData();
        };

        _proto.onDisable = function onDisable() {
          this._updateRenderData();
        };

        _proto._updateRenderData = function _updateRenderData() {
          var label = this.node.getComponent(Label);

          if (label) {
            label.updateRenderData(true);
          }
        };

        _createClass(LabelShadow, [{
          key: "color",
          get: function get() {
            return this._color;
          },
          set: function set(value) {
            if (this._color === value) {
              return;
            }

            this._color.set(value);

            this._updateRenderData();
          }
        }, {
          key: "offset",
          get: function get() {
            return this._offset;
          },
          set: function set(value) {
            this._offset = value;

            this._updateRenderData();
          }
        }, {
          key: "blur",
          get: function get() {
            return this._blur;
          },
          set: function set(value) {
            this._blur = value;

            this._updateRenderData();
          }
        }]);

        return LabelShadow;
      }(Component), (_initializer$M = applyDecoratedInitializer(_class2$X.prototype, "_color", [serializable], function () {
        return new Color(0, 0, 0, 255);
      }), _initializer2$w = applyDecoratedInitializer(_class2$X.prototype, "_offset", [serializable], function () {
        return new Vec2(2, 2);
      }), _initializer3$p = applyDecoratedInitializer(_class2$X.prototype, "_blur", [serializable], function () {
        return 2;
      })), _class2$X)) || _class$13) || _class$13) || _class$13));

      var _dec$14, _dec2$B, _class$14, _class2$Y, _initializer$N;
      var UIOpacity = exports('UIOpacity', (_dec$14 = ccclass('cc.UIOpacity'), _dec2$B = executionOrder(110), _dec$14(_class$14 = _dec2$B(_class$14 = disallowMultiple(_class$14 = (_class2$Y = function (_Component) {
        _inheritsLoose(UIOpacity, _Component);

        function UIOpacity() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._opacity = _initializer$N && _initializer$N();
          return _this;
        }

        var _proto = UIOpacity.prototype;

        _proto.setEntityLocalOpacityDirtyRecursively = function setEntityLocalOpacityDirtyRecursively(dirty) {
        };

        UIOpacity.setEntityLocalOpacityDirtyRecursively = function setEntityLocalOpacityDirtyRecursively(node, dirty, interruptParentOpacity) {
          if (!node.isValid) {
            return;
          }

          var render = node._uiProps.uiComp;
          var uiOp = node.getComponent(UIOpacity);
          var interruptOpacity = interruptParentOpacity;

          if (render && render.color) {
            render.renderEntity.colorDirty = dirty;

            if (uiOp) {
              render.renderEntity.localOpacity = interruptOpacity * uiOp.opacity / 255;
            } else {
              render.renderEntity.localOpacity = interruptOpacity;
            }

            interruptOpacity = 1;
          } else if (uiOp) {
            interruptOpacity = interruptOpacity * uiOp.opacity / 255;
          }

          for (var i = 0; i < node.children.length; i++) {
            UIOpacity.setEntityLocalOpacityDirtyRecursively(node.children[i], dirty || interruptOpacity < 1, interruptOpacity);
          }
        };

        _proto.onEnable = function onEnable() {
          this.node._uiProps.localOpacity = this._opacity / 255;
          this.setEntityLocalOpacityDirtyRecursively(true);
        };

        _proto.onDisable = function onDisable() {
          this.node._uiProps.localOpacity = 1;
          this.setEntityLocalOpacityDirtyRecursively(true);
        };

        _createClass(UIOpacity, [{
          key: "opacity",
          get: function get() {
            return this._opacity;
          },
          set: function set(value) {
            if (this._opacity === value) {
              return;
            }

            value = clampf(value, 0, 255);
            this._opacity = value;
            this.node._uiProps.localOpacity = value / 255;
            this.setEntityLocalOpacityDirtyRecursively(true);
          }
        }]);

        return UIOpacity;
      }(Component), (_initializer$N = applyDecoratedInitializer(_class2$Y.prototype, "_opacity", [serializable], function () {
        return 255;
      })), _class2$Y)) || _class$14) || _class$14) || _class$14));

      var Aim = function Aim(i, x, y) {
        this.i = void 0;
        this.x = void 0;
        this.y = void 0;
        this.prev = null;
        this.next = null;
        this.z = null;
        this.prevZ = null;
        this.nextZ = null;
        this.steiner = false;
        this.i = i;
        this.x = x;
        this.y = y;
      };

      function linkedList(datas, start, end, dim, clockwise) {
        var i = 0;
        var last = null;

        if (clockwise === signedArea(datas, start, end, dim) > 0) {
          for (i = start; i < end; i += dim) {
            last = insertNode(i, datas[i], datas[i + 1], last);
          }
        } else {
          for (i = end - dim; i >= start; i -= dim) {
            last = insertNode(i, datas[i], datas[i + 1], last);
          }
        }

        if (last && equals$1(last, last.next)) {
          removeNode(last);
          last = last.next;
        }

        return last;
      }

      function filterPoints(start, end) {
        if (end === void 0) {
          end = null;
        }

        if (!start) {
          return start;
        }

        if (!end) {
          end = start;
        }

        var p = start;
        var again = false;

        do {
          again = false;

          if (!p.steiner && (equals$1(p, p.next) || area(p.prev, p, p.next) === 0)) {
            removeNode(p);
            p = end = p.prev;

            if (p === p.next) {
              return null;
            }

            again = true;
          } else {
            p = p.next;
          }
        } while (again || p !== end);

        return end;
      }

      function earcutLinked(ear, triangles, dim, minX, minY, size, pass) {
        if (pass === void 0) {
          pass = 0;
        }

        if (!ear) {
          return;
        }

        if (!pass && size) {
          indexCurve(ear, minX, minY, size);
        }

        var stop = ear;
        var prev = null;
        var next = null;

        while (ear.prev !== ear.next) {
          prev = ear.prev;
          next = ear.next;

          if (size ? isEarHashed(ear, minX, minY, size) : isEar(ear)) {
            triangles.push(prev.i / dim);
            triangles.push(ear.i / dim);
            triangles.push(next.i / dim);
            removeNode(ear);
            ear = next.next;
            stop = next.next;
            continue;
          }

          ear = next;

          if (ear === stop) {
            if (!pass) {
              earcutLinked(filterPoints(ear), triangles, dim, minX, minY, size, 1);
            } else if (pass === 1) {
              ear = cureLocalIntersections(ear, triangles, dim);
              earcutLinked(ear, triangles, dim, minX, minY, size, 2);
            } else if (pass === 2) {
              splitEarcut(ear, triangles, dim, minX, minY, size);
            }

            break;
          }
        }
      }

      function isEar(ear) {
        var a = ear.prev;
        var b = ear;
        var c = ear.next;

        if (area(a, b, c) >= 0) {
          return false;
        }

        var p = ear.next.next;

        while (p !== ear.prev) {
          if (pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) {
            return false;
          }

          p = p.next;
        }

        return true;
      }

      function isEarHashed(ear, minX, minY, size) {
        var a = ear.prev;
        var b = ear;
        var c = ear.next;

        if (area(a, b, c) >= 0) {
          return false;
        }

        var minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x;
        var minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y;
        var maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x;
        var maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y;
        var minZ = zOrder(minTX, minTY, minX, minY, size);
        var maxZ = zOrder(maxTX, maxTY, minX, minY, size);
        var p = ear.nextZ;

        while (p && p.z <= maxZ) {
          if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) {
            return false;
          }

          p = p.nextZ;
        }

        p = ear.prevZ;

        while (p && p.z >= minZ) {
          if (p !== ear.prev && p !== ear.next && pointInTriangle(a.x, a.y, b.x, b.y, c.x, c.y, p.x, p.y) && area(p.prev, p, p.next) >= 0) {
            return false;
          }

          p = p.prevZ;
        }

        return true;
      }

      function cureLocalIntersections(start, triangles, dim) {
        var p = start;

        do {
          var a = p.prev;
          var b = p.next.next;

          if (!equals$1(a, b) && intersects(a, p, p.next, b) && locallyInside(a, b) && locallyInside(b, a)) {
            triangles.push(a.i / dim);
            triangles.push(p.i / dim);
            triangles.push(b.i / dim);
            removeNode(p);
            removeNode(p.next);
            p = start = b;
          }

          p = p.next;
        } while (p !== start);

        return p;
      }

      function splitEarcut(start, triangles, dim, minX, minY, size) {
        var a = start;

        do {
          var b = a.next.next;

          while (b !== a.prev) {
            if (a.i !== b.i && isValidDiagonal(a, b)) {
              var c = splitPolygon(a, b);
              a = filterPoints(a, a.next);
              c = filterPoints(c, c.next);
              earcutLinked(a, triangles, dim, minX, minY, size);
              earcutLinked(c, triangles, dim, minX, minY, size);
              return;
            }

            b = b.next;
          }

          a = a.next;
        } while (a !== start);
      }

      function eliminateHoles(datas, holeIndices, outerNode, dim) {
        var queue = [];
        var i = 0;
        var len = 0;
        var start = 0;
        var end = 0;
        var list = null;

        for (i = 0, len = holeIndices.length; i < len; i++) {
          start = holeIndices[i] * dim;
          end = i < len - 1 ? holeIndices[i + 1] * dim : datas.length;
          list = linkedList(datas, start, end, dim, false);

          if (!list) {
            continue;
          }

          if (list === list.next) {
            list.steiner = true;
          }

          queue.push(getLeftmost(list));
        }

        queue.sort(compareX);

        if (!outerNode) {
          return outerNode;
        }

        for (i = 0; i < queue.length; i++) {
          eliminateHole(queue[i], outerNode);
          outerNode = filterPoints(outerNode, outerNode.next);
        }

        return outerNode;
      }

      function compareX(a, b) {
        return a.x - b.x;
      }

      function eliminateHole(hole, outerNode) {
        outerNode = findHoleBridge(hole, outerNode);

        if (outerNode) {
          var b = splitPolygon(outerNode, hole);
          filterPoints(b, b.next);
        }
      }

      function findHoleBridge(hole, outerNode) {
        var p = outerNode;
        var hx = hole.x;
        var hy = hole.y;
        var qx = -Infinity;
        var m = null;

        do {
          if (hy <= p.y && hy >= p.next.y) {
            var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);

            if (x <= hx && x > qx) {
              qx = x;

              if (x === hx) {
                if (hy === p.y) {
                  return p;
                }

                if (hy === p.next.y) {
                  return p.next;
                }
              }

              m = p.x < p.next.x ? p : p.next;
            }
          }

          p = p.next;
        } while (p !== outerNode);

        if (!m) {
          return null;
        }

        if (hx === qx) {
          return m.prev;
        }

        var stop = m;
        var mx = m.x;
        var my = m.y;
        var tanMin = Infinity;
        var tan;
        p = m.next;

        while (p !== stop) {
          if (hx >= p.x && p.x >= mx && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p.x, p.y)) {
            tan = Math.abs(hy - p.y) / (hx - p.x);

            if ((tan < tanMin || tan === tanMin && p.x > m.x) && locallyInside(p, hole)) {
              m = p;
              tanMin = tan;
            }
          }

          p = p.next;
        }

        return m;
      }

      function indexCurve(start, minX, minY, size) {
        var p = start;

        do {
          if (p.z === null) {
            p.z = zOrder(p.x, p.y, minX, minY, size);
          }

          p.prevZ = p.prev;
          p.nextZ = p.next;
          p = p.next;
        } while (p !== start);

        p.prevZ.nextZ = null;
        p.prevZ = null;
        sortLinked(p);
      }

      function sortLinked(list) {
        var i = 0;
        var p = null;
        var q = null;
        var e = null;
        var tail = null;
        var numMerges = 0;
        var pSize = 0;
        var qSize = 0;
        var inSize = 1;

        do {
          p = list;
          list = null;
          tail = null;
          numMerges = 0;

          while (p) {
            numMerges++;
            q = p;
            pSize = 0;

            for (i = 0; i < inSize; i++) {
              pSize++;
              q = q.nextZ;

              if (!q) {
                break;
              }
            }

            qSize = inSize;

            while (pSize > 0 || qSize > 0 && q) {
              if (pSize === 0) {
                e = q;
                q = q.nextZ;
                qSize--;
              } else if (qSize === 0 || !q) {
                e = p;
                p = p.nextZ;
                pSize--;
              } else if (p.z <= q.z) {
                e = p;
                p = p.nextZ;
                pSize--;
              } else {
                e = q;
                q = q.nextZ;
                qSize--;
              }

              if (tail) {
                tail.nextZ = e;
              } else {
                list = e;
              }

              e.prevZ = tail;
              tail = e;
            }

            p = q;
          }

          tail.nextZ = null;
          inSize *= 2;
        } while (numMerges > 1);

        return list;
      }

      function zOrder(x, y, minX, minY, size) {
        x = 32767 * (x - minX) / size;
        y = 32767 * (y - minY) / size;
        x = (x | x << 8) & 0x00FF00FF;
        x = (x | x << 4) & 0x0F0F0F0F;
        x = (x | x << 2) & 0x33333333;
        x = (x | x << 1) & 0x55555555;
        y = (y | y << 8) & 0x00FF00FF;
        y = (y | y << 4) & 0x0F0F0F0F;
        y = (y | y << 2) & 0x33333333;
        y = (y | y << 1) & 0x55555555;
        return x | y << 1;
      }

      function getLeftmost(start) {
        var p = start;
        var leftmost = start;

        do {
          if (p.x < leftmost.x) {
            leftmost = p;
          }

          p = p.next;
        } while (p !== start);

        return leftmost;
      }

      function pointInTriangle(ax, ay, bx, by, cx, cy, px, py) {
        return (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
      }

      function isValidDiagonal(a, b) {
        return a.next.i !== b.i && a.prev.i !== b.i && !intersectsPolygon(a, b) && locallyInside(a, b) && locallyInside(b, a) && middleInside(a, b);
      }

      function area(p, q, r) {
        return (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
      }

      function equals$1(p1, p2) {
        return p1.x === p2.x && p1.y === p2.y;
      }

      function intersects(p1, q1, p2, q2) {
        if (equals$1(p1, q1) && equals$1(p2, q2) || equals$1(p1, q2) && equals$1(p2, q1)) {
          return true;
        }

        return area(p1, q1, p2) > 0 !== area(p1, q1, q2) > 0 && area(p2, q2, p1) > 0 !== area(p2, q2, q1) > 0;
      }

      function intersectsPolygon(a, b) {
        var p = a;

        do {
          if (p.i !== a.i && p.next.i !== a.i && p.i !== b.i && p.next.i !== b.i && intersects(p, p.next, a, b)) {
            return true;
          }

          p = p.next;
        } while (p !== a);

        return false;
      }

      function locallyInside(a, b) {
        return area(a.prev, a, a.next) < 0 ? area(a, b, a.next) >= 0 && area(a, a.prev, b) >= 0 : area(a, b, a.prev) < 0 || area(a, a.next, b) < 0;
      }

      function middleInside(a, b) {
        var p = a;
        var inside = false;
        var px = (a.x + b.x) / 2;
        var py = (a.y + b.y) / 2;

        do {
          if (p.y > py !== p.next.y > py && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) {
            inside = !inside;
          }

          p = p.next;
        } while (p !== a);

        return inside;
      }

      function splitPolygon(a, b) {
        var a2 = new Aim(a.i, a.x, a.y);
        var b2 = new Aim(b.i, b.x, b.y);
        var an = a.next;
        var bp = b.prev;
        a.next = b;
        b.prev = a;
        a2.next = an;
        an.prev = a2;
        b2.next = a2;
        a2.prev = b2;
        bp.next = b2;
        b2.prev = bp;
        return b2;
      }

      function insertNode(i, x, y, last) {
        var p = new Aim(i, x, y);

        if (!last) {
          p.prev = p;
          p.next = p;
        } else {
          p.next = last.next;
          p.prev = last;
          last.next.prev = p;
          last.next = p;
        }

        return p;
      }

      function removeNode(p) {
        p.next.prev = p.prev;
        p.prev.next = p.next;

        if (p.prevZ) {
          p.prevZ.nextZ = p.nextZ;
        }

        if (p.nextZ) {
          p.nextZ.prevZ = p.prevZ;
        }
      }

      function signedArea(datas, start, end, dim) {
        var sum = 0;

        for (var i = start, j = end - dim; i < end; i += dim) {
          sum += (datas[j] - datas[i]) * (datas[i + 1] + datas[j + 1]);
          j = i;
        }

        return sum;
      }

      function earcut(datas, holeIndices, dim) {
        dim = dim || 3;
        var hasHoles = holeIndices ? holeIndices.length : 0;
        var outerLen = hasHoles ? holeIndices[0] * dim : datas.length;
        var outerNode = linkedList(datas, 0, outerLen, dim, true);
        var triangles = [];

        if (!outerNode) {
          return triangles;
        }

        var minX = 0;
        var minY = 0;
        var maxX = 0;
        var maxY = 0;
        var x = 0;
        var y = 0;
        var size = 0;

        if (hasHoles) {
          outerNode = eliminateHoles(datas, holeIndices, outerNode, dim);
        }

        if (datas.length > 80 * dim) {
          minX = maxX = datas[0];
          minY = maxY = datas[1];

          for (var i = dim; i < outerLen; i += dim) {
            x = datas[i];
            y = datas[i + 1];

            if (x < minX) {
              minX = x;
            }

            if (y < minY) {
              minY = y;
            }

            if (x > maxX) {
              maxX = x;
            }

            if (y > maxY) {
              maxY = y;
            }
          }

          size = Math.max(maxX - minX, maxY - minY);
        }

        earcutLinked(outerNode, triangles, dim, minX, minY, size);
        return triangles;
      }

      var MAX_VERTEX = 65535;
      var MAX_INDICES = MAX_VERTEX * 2;
      var PI$1 = Math.PI;
      var min$3 = Math.min;
      var max$4 = Math.max;
      var ceil = Math.ceil;
      var acos$1 = Math.acos;
      var cos$2 = Math.cos;
      var sin$1 = Math.sin;
      var atan2 = Math.atan2;
      var attrBytes = 8;
      var _renderData = null;
      var _impl = null;

      var _curColor = new Color();

      var vec3_temps = [];

      for (var i$2 = 0; i$2 < 4; i$2++) {
        vec3_temps.push(new Vec3());
      }

      function curveDivs(r, arc, tol) {
        var da = acos$1(r / (r + tol)) * 2.0;
        return max$4(2, ceil(arc / da));
      }

      function clamp$1(v, minNum, maxNum) {
        if (v < minNum) {
          return minNum;
        } else if (v > maxNum) {
          return maxNum;
        }

        return v;
      }

      var graphicsAssembler = {
        useModel: true,
        updateRenderData: function updateRenderData(graphics) {
        },
        fillBuffers: function fillBuffers(graphics, renderer) {},
        renderIA: function renderIA(graphics, renderer) {},
        getRenderData: function getRenderData(graphics, vertexCount) {
          if (!_impl) {
            return null;
          }

          var renderDataList = _impl.getRenderDataList();

          var renderData = renderDataList[_impl.dataOffset];

          if (!renderData) {
            return null;
          }

          var meshBuffer = renderData;
          var maxVertexCount = meshBuffer ? meshBuffer.vertexStart + vertexCount : 0;

          if (maxVertexCount > MAX_VERTEX || maxVertexCount * 3 > MAX_INDICES) {
            ++_impl.dataOffset;

            if (_impl.dataOffset < renderDataList.length) {
              renderData = renderDataList[_impl.dataOffset];
            } else {
              renderData = _impl.requestRenderData();
              renderDataList[_impl.dataOffset] = renderData;
            }

            meshBuffer = renderData;
          }

          if (meshBuffer && meshBuffer.vertexCount < maxVertexCount) {
            meshBuffer.request(vertexCount, vertexCount * 3);
          }

          return renderData;
        },
        stroke: function stroke(graphics) {
          Color.copy(_curColor, graphics.strokeColor);

          if (!graphics.impl) {
            return;
          }

          this._flattenPaths(graphics.impl);

          this._expandStroke(graphics);

          graphics.impl.updatePathOffset = true;
          this.end(graphics);
        },
        fill: function fill(graphics) {
          Color.copy(_curColor, graphics.fillColor);

          this._expandFill(graphics);

          if (graphics.impl) {
            graphics.impl.updatePathOffset = true;
          }

          this.end(graphics);
        },
        end: function end(graphics) {
          graphics.markForUpdateRenderData();
        },
        _expandStroke: function _expandStroke(graphics) {
          var w = graphics.lineWidth * 0.5;
          var lineCap = graphics.lineCap;
          var lineJoin = graphics.lineJoin;
          var miterLimit = graphics.miterLimit;
          _impl = graphics.impl;

          if (!_impl) {
            return;
          }

          var nCap = curveDivs(w, PI$1, _impl.tessTol);

          this._calculateJoins(_impl, w, lineJoin, miterLimit);

          var paths = _impl.paths;
          var vertexCount = 0;

          for (var _i = _impl.pathOffset, l = _impl.pathLength; _i < l; _i++) {
            var path = paths[_i];
            var pointsLength = path.points.length;

            if (lineJoin === LineJoin.ROUND) {
              vertexCount += (pointsLength + path.bevel * (nCap + 2) + 1) * 2;
            } else {
              vertexCount += (pointsLength + path.bevel * 5 + 1) * 2;
            }

            if (!path.closed) {
              if (lineCap === LineCap.ROUND) {
                vertexCount += (nCap * 2 + 2) * 2;
              } else {
                vertexCount += (3 + 3) * 2;
              }
            }
          }

          var meshBuffer = _renderData = this.getRenderData(graphics, vertexCount);

          if (!meshBuffer) {
            return;
          }

          var vData = meshBuffer.vData;
          var iData = meshBuffer.iData;

          for (var _i2 = _impl.pathOffset, _l = _impl.pathLength; _i2 < _l; _i2++) {
            var _path = paths[_i2];
            var pts = _path.points;
            var _pointsLength = pts.length;
            var offset = meshBuffer.vertexStart;
            var p0 = void 0;
            var p1 = void 0;
            var start = 0;
            var end = 0;
            var loop = _path.closed;

            if (loop) {
              p0 = pts[_pointsLength - 1];
              p1 = pts[0];
              start = 0;
              end = _pointsLength;
            } else {
              p0 = pts[0];
              p1 = pts[1];
              start = 1;
              end = _pointsLength - 1;
            }

            p1 = p1 || p0;

            if (!loop) {
              var dPos = new Point(p1.x, p1.y);
              dPos.subtract(p0);
              dPos.normalize();
              var dx = dPos.x;
              var dy = dPos.y;

              if (lineCap === LineCap.BUTT) {
                this._buttCapStart(p0, dx, dy, w, 0);
              } else if (lineCap === LineCap.SQUARE) {
                this._buttCapStart(p0, dx, dy, w, w);
              } else if (lineCap === LineCap.ROUND) {
                this._roundCapStart(p0, dx, dy, w, nCap);
              }
            }

            for (var j = start; j < end; ++j) {
              if (lineJoin === LineJoin.ROUND) {
                this._roundJoin(p0, p1, w, w, nCap);
              } else if ((p1.flags & (PointFlags.PT_BEVEL | PointFlags.PT_INNERBEVEL)) !== 0) {
                this._bevelJoin(p0, p1, w, w);
              } else {
                this._vSet(p1.x + p1.dmx * w, p1.y + p1.dmy * w, 1);

                this._vSet(p1.x - p1.dmx * w, p1.y - p1.dmy * w, -1);
              }

              p0 = p1;
              p1 = pts[j + 1];
            }

            if (loop) {
              var vDataOffset = offset * attrBytes;

              this._vSet(vData[vDataOffset], vData[vDataOffset + 1], 1);

              this._vSet(vData[vDataOffset + attrBytes], vData[vDataOffset + attrBytes + 1], -1);
            } else {
              var _dPos = new Point(p1.x, p1.y);

              _dPos.subtract(p0);

              _dPos.normalize();

              var _dx = _dPos.x;
              var _dy = _dPos.y;

              if (lineCap === LineCap.BUTT) {
                this._buttCapEnd(p1, _dx, _dy, w, 0);
              } else if (lineCap === LineCap.SQUARE) {
                this._buttCapEnd(p1, _dx, _dy, w, w);
              } else if (lineCap === LineCap.ROUND) {
                this._roundCapEnd(p1, _dx, _dy, w, nCap);
              }
            }

            var indicesOffset = meshBuffer.indexStart;

            for (var begin = offset + 2, over = meshBuffer.vertexStart; begin < over; begin++) {
              iData[indicesOffset++] = begin - 2;
              iData[indicesOffset++] = begin - 1;
              iData[indicesOffset++] = begin;
            }

            meshBuffer.indexStart = indicesOffset;
          }

          _renderData = null;
          _impl = null;
        },
        _expandFill: function _expandFill(graphics) {
          _impl = graphics.impl;

          if (!_impl) {
            return;
          }

          var paths = _impl.paths;
          var vertexCount = 0;

          for (var _i3 = _impl.pathOffset, l = _impl.pathLength; _i3 < l; _i3++) {
            var path = paths[_i3];
            var pointsLength = path.points.length;
            vertexCount += pointsLength;
          }

          var renderData = _renderData = this.getRenderData(graphics, vertexCount);

          if (!renderData) {
            return;
          }

          var meshBuffer = renderData;
          var vData = meshBuffer.vData;
          var iData = meshBuffer.iData;

          for (var _i4 = _impl.pathOffset, _l2 = _impl.pathLength; _i4 < _l2; _i4++) {
            var _path2 = paths[_i4];
            var pts = _path2.points;
            var _pointsLength2 = pts.length;

            if (_pointsLength2 === 0) {
              continue;
            }

            var vertexOffset = renderData.vertexStart;

            for (var j = 0; j < _pointsLength2; ++j) {
              this._vSet(pts[j].x, pts[j].y);
            }

            var indicesOffset = renderData.indexStart;

            if (_path2.complex) {
              var earcutData = [];

              for (var _j = vertexOffset, end = renderData.vertexStart; _j < end; _j++) {
                var vDataOffset = _j * attrBytes;
                earcutData.push(vData[vDataOffset++]);
                earcutData.push(vData[vDataOffset++]);
                earcutData.push(vData[vDataOffset++]);
              }

              var newIndices = earcut(earcutData, null, 3);

              if (!newIndices || newIndices.length === 0) {
                continue;
              }

              for (var _j2 = 0, nIndices = newIndices.length; _j2 < nIndices; _j2++) {
                iData[indicesOffset++] = newIndices[_j2] + vertexOffset;
              }
            } else {
              var first = vertexOffset;

              for (var start = vertexOffset + 2, _end = meshBuffer.vertexStart; start < _end; start++) {
                iData[indicesOffset++] = first;
                iData[indicesOffset++] = start - 1;
                iData[indicesOffset++] = start;
              }
            }

            meshBuffer.indexStart = indicesOffset;
          }

          _renderData = null;
          _impl = null;
        },
        _calculateJoins: function _calculateJoins(impl, w, lineJoin, miterLimit) {
          var iw = 0.0;

          if (w > 0.0) {
            iw = 1 / w;
          }

          var paths = impl.paths;

          for (var _i5 = impl.pathOffset, l = impl.pathLength; _i5 < l; _i5++) {
            var path = paths[_i5];
            var pts = path.points;
            var ptsLength = pts.length;
            var p0 = pts[ptsLength - 1];
            var p1 = pts[0];
            path.bevel = 0;

            for (var j = 0; j < ptsLength; j++) {
              var dmr2 = 0;
              var cross = 0;
              var limit = 0;
              var dlx0 = p0.dy;
              var dly0 = -p0.dx;
              var dlx1 = p1.dy;
              var dly1 = -p1.dx;
              p1.dmx = (dlx0 + dlx1) * 0.5;
              p1.dmy = (dly0 + dly1) * 0.5;
              dmr2 = p1.dmx * p1.dmx + p1.dmy * p1.dmy;

              if (dmr2 > 0.000001) {
                var scale = 1 / dmr2;

                if (scale > 600) {
                  scale = 600;
                }

                p1.dmx *= scale;
                p1.dmy *= scale;
              }

              cross = p1.dx * p0.dy - p0.dx * p1.dy;

              if (cross > 0) {
                p1.flags |= PointFlags.PT_LEFT;
              }

              limit = max$4(11, min$3(p0.len, p1.len) * iw);

              if (dmr2 * limit * limit < 1) {
                p1.flags |= PointFlags.PT_INNERBEVEL;
              }

              if (p1.flags & PointFlags.PT_CORNER) {
                if (dmr2 * miterLimit * miterLimit < 1 || lineJoin === LineJoin.BEVEL || lineJoin === LineJoin.ROUND) {
                  p1.flags |= PointFlags.PT_BEVEL;
                }
              }

              if ((p1.flags & (PointFlags.PT_BEVEL | PointFlags.PT_INNERBEVEL)) !== 0) {
                path.bevel++;
              }

              p0 = p1;
              p1 = pts[j + 1];
            }
          }
        },
        _flattenPaths: function _flattenPaths(impl) {
          var paths = impl.paths;

          for (var _i6 = impl.pathOffset, l = impl.pathLength; _i6 < l; _i6++) {
            var path = paths[_i6];
            var pts = path.points;
            var p0 = pts[pts.length - 1];
            var p1 = pts[0];

            if (pts.length > 2 && p0.equals(p1)) {
              path.closed = true;
              pts.pop();
              p0 = pts[pts.length - 1];
            }

            for (var j = 0, size = pts.length; j < size; j++) {
              var dPos = new Point(p1.x, p1.y);
              dPos.subtract(p0);
              p0.len = dPos.length();

              if (dPos.x || dPos.y) {
                dPos.normalize();
              }

              p0.dx = dPos.x;
              p0.dy = dPos.y;
              p0 = p1;
              p1 = pts[j + 1];
            }
          }
        },
        _chooseBevel: function _chooseBevel(bevel, p0, p1, w) {
          var x = p1.x;
          var y = p1.y;
          var x0 = 0;
          var y0 = 0;
          var x1 = 0;
          var y1 = 0;

          if (bevel !== 0) {
            x0 = x + p0.dy * w;
            y0 = y - p0.dx * w;
            x1 = x + p1.dy * w;
            y1 = y - p1.dx * w;
          } else {
            x0 = x1 = x + p1.dmx * w;
            y0 = y1 = y + p1.dmy * w;
          }

          return [x0, y0, x1, y1];
        },
        _buttCapStart: function _buttCapStart(p, dx, dy, w, d) {
          var px = p.x - dx * d;
          var py = p.y - dy * d;
          var dlx = dy;
          var dly = -dx;

          this._vSet(px + dlx * w, py + dly * w, 1);

          this._vSet(px - dlx * w, py - dly * w, -1);
        },
        _buttCapEnd: function _buttCapEnd(p, dx, dy, w, d) {
          var px = p.x + dx * d;
          var py = p.y + dy * d;
          var dlx = dy;
          var dly = -dx;

          this._vSet(px + dlx * w, py + dly * w, 1);

          this._vSet(px - dlx * w, py - dly * w, -1);
        },
        _roundCapStart: function _roundCapStart(p, dx, dy, w, nCap) {
          var px = p.x;
          var py = p.y;
          var dlx = dy;
          var dly = -dx;

          for (var _i7 = 0; _i7 < nCap; _i7++) {
            var a = _i7 / (nCap - 1) * PI$1;
            var ax = cos$2(a) * w;
            var ay = sin$1(a) * w;

            this._vSet(px - dlx * ax - dx * ay, py - dly * ax - dy * ay, 1);

            this._vSet(px, py, 0);
          }

          this._vSet(px + dlx * w, py + dly * w, 1);

          this._vSet(px - dlx * w, py - dly * w, -1);
        },
        _roundCapEnd: function _roundCapEnd(p, dx, dy, w, nCap) {
          var px = p.x;
          var py = p.y;
          var dlx = dy;
          var dly = -dx;

          this._vSet(px + dlx * w, py + dly * w, 1);

          this._vSet(px - dlx * w, py - dly * w, -1);

          for (var _i8 = 0; _i8 < nCap; _i8++) {
            var a = _i8 / (nCap - 1) * PI$1;
            var ax = cos$2(a) * w;
            var ay = sin$1(a) * w;

            this._vSet(px, py, 0);

            this._vSet(px - dlx * ax + dx * ay, py - dly * ax + dy * ay, 1);
          }
        },
        _roundJoin: function _roundJoin(p0, p1, lw, rw, nCap) {
          var dlx0 = p0.dy;
          var dly0 = -p0.dx;
          var dlx1 = p1.dy;
          var dly1 = -p1.dx;
          var p1x = p1.x;
          var p1y = p1.y;

          if ((p1.flags & PointFlags.PT_LEFT) !== 0) {
            var out = this._chooseBevel(p1.flags & PointFlags.PT_INNERBEVEL, p0, p1, lw);

            var lx0 = out[0];
            var ly0 = out[1];
            var lx1 = out[2];
            var ly1 = out[3];
            var a0 = atan2(-dly0, -dlx0);
            var a1 = atan2(-dly1, -dlx1);

            if (a1 > a0) {
              a1 -= PI$1 * 2;
            }

            this._vSet(lx0, ly0, 1);

            this._vSet(p1x - dlx0 * rw, p1.y - dly0 * rw, -1);

            var n = clamp$1(ceil((a0 - a1) / PI$1) * nCap, 2, nCap);

            for (var _i9 = 0; _i9 < n; _i9++) {
              var u = _i9 / (n - 1);
              var a = a0 + u * (a1 - a0);
              var rx = p1x + cos$2(a) * rw;
              var ry = p1y + sin$1(a) * rw;

              this._vSet(p1x, p1y, 0);

              this._vSet(rx, ry, -1);
            }

            this._vSet(lx1, ly1, 1);

            this._vSet(p1x - dlx1 * rw, p1y - dly1 * rw, -1);
          } else {
            var _out = this._chooseBevel(p1.flags & PointFlags.PT_INNERBEVEL, p0, p1, -rw);

            var rx0 = _out[0];
            var ry0 = _out[1];
            var rx1 = _out[2];
            var ry1 = _out[3];

            var _a = atan2(dly0, dlx0);

            var _a2 = atan2(dly1, dlx1);

            if (_a2 < _a) {
              _a2 += PI$1 * 2;
            }

            this._vSet(p1x + dlx0 * rw, p1y + dly0 * rw, 1);

            this._vSet(rx0, ry0, -1);

            var _n = clamp$1(ceil((_a2 - _a) / PI$1) * nCap, 2, nCap);

            for (var _i10 = 0; _i10 < _n; _i10++) {
              var _u = _i10 / (_n - 1);

              var _a3 = _a + _u * (_a2 - _a);

              var lx = p1x + cos$2(_a3) * lw;
              var ly = p1y + sin$1(_a3) * lw;

              this._vSet(lx, ly, 1);

              this._vSet(p1x, p1y, 0);
            }

            this._vSet(p1x + dlx1 * rw, p1y + dly1 * rw, 1);

            this._vSet(rx1, ry1, -1);
          }
        },
        _bevelJoin: function _bevelJoin(p0, p1, lw, rw) {
          var rx0 = 0;
          var ry0 = 0;
          var rx1 = 0;
          var ry1 = 0;
          var lx0 = 0;
          var ly0 = 0;
          var lx1 = 0;
          var ly1 = 0;
          var dlx0 = p0.dy;
          var dly0 = -p0.dx;
          var dlx1 = p1.dy;
          var dly1 = -p1.dx;

          if (p1.flags & PointFlags.PT_LEFT) {
            var out = this._chooseBevel(p1.flags & PointFlags.PT_INNERBEVEL, p0, p1, lw);

            lx0 = out[0];
            ly0 = out[1];
            lx1 = out[2];
            ly1 = out[3];

            this._vSet(lx0, ly0, 1);

            this._vSet(p1.x - dlx0 * rw, p1.y - dly0 * rw, -1);

            this._vSet(lx1, ly1, 1);

            this._vSet(p1.x - dlx1 * rw, p1.y - dly1 * rw, -1);
          } else {
            var _out2 = this._chooseBevel(p1.flags & PointFlags.PT_INNERBEVEL, p0, p1, -rw);

            rx0 = _out2[0];
            ry0 = _out2[1];
            rx1 = _out2[2];
            ry1 = _out2[3];

            this._vSet(p1.x + dlx0 * lw, p1.y + dly0 * lw, 1);

            this._vSet(rx0, ry0, -1);

            this._vSet(p1.x + dlx1 * lw, p1.y + dly1 * lw, 1);

            this._vSet(rx1, ry1, -1);
          }
        },
        _vSet: function _vSet(x, y, distance) {
          if (distance === void 0) {
            distance = 0;
          }

          if (!_renderData) {
            return;
          }

          var meshBuffer = _renderData;
          var dataOffset = meshBuffer.vertexStart * attrBytes;
          var vData = meshBuffer.vData;
          vData[dataOffset++] = x;
          vData[dataOffset++] = y;
          vData[dataOffset++] = 0;
          Color.toArray(vData, _curColor, dataOffset);
          dataOffset += 4;
          vData[dataOffset++] = distance;
          meshBuffer.vertexStart++;
        }
      };

      var graphicsAssemblerManager = exports('graphicsAssembler', {
        getAssembler: function getAssembler(sprite) {
          return graphicsAssembler;
        }
      });
      Graphics.Assembler = graphicsAssemblerManager;

      var LetterInfo = function LetterInfo() {
        this["char"] = '';
        this.valid = true;
        this.x = 0;
        this.y = 0;
        this.line = 0;
        this.hash = '';
      };

      var _tmpRect = new Rect();

      var _defaultLetterAtlas = new LetterAtlas(64, 64);

      var _defaultFontAtlas = new FontAtlas(null);

      var _comp = null;
      var _uiTrans = null;
      var _horizontalKerning = [];
      var _lettersInfo = [];
      var _linesWidth = [];
      var _linesOffsetX = [];

      var _labelDimensions = new Size();

      var _contentSize = new Size();

      var letterPosition = new Vec2();
      var _lineSpacing = 0;
      var _fntConfig = null;
      var _numberOfLines = 0;
      var _textDesiredHeight = 0;
      var _letterOffsetY = 0;
      var _tailoredTopY = 0;
      var _tailoredBottomY = 0;
      var _bmfontScale = 1.0;
      var _spriteFrame = null;
      var _string = '';
      var _fontSize = 0;
      var _originFontSize = 0;
      var _hAlign = 0;
      var _vAlign = 0;
      var _spacingX = 0;
      var _lineHeight = 0;
      var _overflow = 0;
      var _isWrapText = false;
      var _labelWidth = 0;
      var _labelHeight = 0;
      var _maxLineWidth = 0;
      var QUAD_INDICES;
      var bmfontUtils = {
        updateRenderData: function updateRenderData(comp) {
          if (!comp.renderData) {
            return;
          }

          if (_comp === comp) {
            return;
          }

          if (comp.renderData.vertDirty) {
            _comp = comp;
            _uiTrans = _comp.node._uiProps.uiTransformComp;

            this._updateFontFamily(comp);

            this._updateProperties(comp);

            this._updateLabelInfo(comp);

            this._updateContent();

            _comp.actualFontSize = _fontSize;

            _uiTrans.setContentSize(_contentSize);

            this.updateUVs(comp);
            this.updateColor(comp);
            _comp.renderData.vertDirty = false;
            _comp = null;

            this._resetProperties();
          }

          if (comp.spriteFrame) {
            var renderData = comp.renderData;
            renderData.updateRenderData(comp, comp.spriteFrame);
          }
        },
        updateUVs: function updateUVs(label) {
          var renderData = label.renderData;
          var vData = renderData.chunk.vb;
          var vertexCount = renderData.vertexCount;
          var dataList = renderData.data;
          var vertexOffset = 3;

          for (var i = 0; i < vertexCount; i++) {
            var vert = dataList[i];
            vData[vertexOffset] = vert.u;
            vData[vertexOffset + 1] = vert.v;
            vertexOffset += 9;
          }
        },
        updateColor: function updateColor(label) {
        },
        _updateFontScale: function _updateFontScale() {
          _bmfontScale = _fontSize / _originFontSize;
        },
        _updateFontFamily: function _updateFontFamily(comp) {
          var fontAsset = comp.font;
          _spriteFrame = fontAsset.spriteFrame;
          _fntConfig = fontAsset.fntConfig;
          shareLabelInfo.fontAtlas = fontAsset.fontDefDictionary;

          if (!shareLabelInfo.fontAtlas) {
            if (comp.cacheMode === CacheMode.CHAR) {
              shareLabelInfo.fontAtlas = _defaultLetterAtlas;
            } else {
              shareLabelInfo.fontAtlas = _defaultFontAtlas;
            }
          }

          dynamicAtlasManager.packToDynamicAtlas(comp, _spriteFrame);
        },
        _updateLabelInfo: function _updateLabelInfo(comp) {
          shareLabelInfo.hash = '';
          shareLabelInfo.margin = 0;
        },
        _updateProperties: function _updateProperties(comp) {
          _string = comp.string.toString();
          _fontSize = comp.fontSize;
          _originFontSize = _fntConfig ? _fntConfig.fontSize : comp.fontSize;
          _hAlign = comp.horizontalAlign;
          _vAlign = comp.verticalAlign;
          _spacingX = comp.spacingX;
          _overflow = comp.overflow;
          _lineHeight = comp._lineHeight;
          var contentSize = _uiTrans.contentSize;
          _contentSize.width = contentSize.width;
          _contentSize.height = contentSize.height;

          if (_overflow === Overflow.NONE) {
            _isWrapText = false;
            _contentSize.width += shareLabelInfo.margin * 2;
            _contentSize.height += shareLabelInfo.margin * 2;
          } else if (_overflow === Overflow.RESIZE_HEIGHT) {
            _isWrapText = true;
            _contentSize.height += shareLabelInfo.margin * 2;
          } else {
            _isWrapText = comp.enableWrapText;
          }

          shareLabelInfo.lineHeight = _lineHeight;
          shareLabelInfo.fontSize = _fontSize;

          this._setupBMFontOverflowMetrics();
        },
        _resetProperties: function _resetProperties() {
          _fntConfig = null;
          _spriteFrame = null;
          shareLabelInfo.hash = '';
          shareLabelInfo.margin = 0;
        },
        _updateContent: function _updateContent() {
          this._updateFontScale();

          this._computeHorizontalKerningForText();

          this._alignText();
        },
        _computeHorizontalKerningForText: function _computeHorizontalKerningForText() {
          var string = _string;
          var stringLen = string.length;
          var kerningDict = _fntConfig.kerningDict;
          var horizontalKerning = _horizontalKerning;

          if (!kerningDict) {
            return;
          }

          var prev = -1;

          for (var i = 0; i < stringLen; ++i) {
            var key = string.charCodeAt(i);
            var kerningAmount = kerningDict[prev << 16 | key & 0xffff] || 0;

            if (i < stringLen - 1) {
              horizontalKerning[i] = kerningAmount;
            } else {
              horizontalKerning[i] = 0;
            }

            prev = key;
          }
        },
        _multilineTextWrap: function _multilineTextWrap(nextTokenFunc) {
          var textLen = _string.length;
          var lineIndex = 0;
          var nextTokenX = 0;
          var nextTokenY = 0;
          var longestLine = 0;
          var letterRight = 0;
          var highestY = 0;
          var lowestY = 0;
          var letterDef = null;

          for (var index = 0; index < textLen;) {
            var character = _string.charAt(index);

            if (character === '\n') {
              _linesWidth.push(letterRight);

              letterRight = 0;
              lineIndex++;
              nextTokenX = 0;
              nextTokenY -= _lineHeight * this._getFontScale() + _lineSpacing;

              this._recordPlaceholderInfo(index, character);

              index++;
              continue;
            }

            var tokenLen = nextTokenFunc(_string, index, textLen);
            var tokenHighestY = highestY;
            var tokenLowestY = lowestY;
            var tokenRight = letterRight;
            var nextLetterX = nextTokenX;
            var newLine = false;

            for (var tmp = 0; tmp < tokenLen; ++tmp) {
              var letterIndex = index + tmp;
              character = _string.charAt(letterIndex);

              if (character === '\r') {
                this._recordPlaceholderInfo(letterIndex, character);

                continue;
              }

              letterDef = shareLabelInfo.fontAtlas.getLetterDefinitionForChar(character, shareLabelInfo);

              if (!letterDef) {
                this._recordPlaceholderInfo(letterIndex, character);

                console.log("Can't find letter definition in texture atlas " + _fntConfig.atlasName + " for letter:" + character);
                continue;
              }

              var letterX = nextLetterX + letterDef.offsetX * _bmfontScale - shareLabelInfo.margin;

              if (_isWrapText && _maxLineWidth > 0 && nextTokenX > 0 && letterX + letterDef.w * _bmfontScale > _maxLineWidth && !isUnicodeSpace(character)) {
                _linesWidth.push(letterRight);

                letterRight = 0;
                lineIndex++;
                nextTokenX = 0;
                nextTokenY -= _lineHeight * this._getFontScale() + _lineSpacing;
                newLine = true;
                break;
              } else {
                letterPosition.x = letterX;
              }

              letterPosition.y = nextTokenY - letterDef.offsetY * _bmfontScale;

              this._recordLetterInfo(letterPosition, character, letterIndex, lineIndex);

              if (letterIndex + 1 < _horizontalKerning.length && letterIndex < textLen - 1) {
                nextLetterX += _horizontalKerning[letterIndex + 1];
              }

              nextLetterX += letterDef.xAdvance * _bmfontScale + _spacingX;
              tokenRight = letterPosition.x + letterDef.w * _bmfontScale;

              if (tokenHighestY < letterPosition.y) {
                tokenHighestY = letterPosition.y;
              }

              if (tokenLowestY > letterPosition.y - letterDef.h * _bmfontScale) {
                tokenLowestY = letterPosition.y - letterDef.h * _bmfontScale;
              }
            }

            if (newLine) {
              continue;
            }

            nextTokenX = nextLetterX;
            letterRight = tokenRight;

            if (highestY < tokenHighestY) {
              highestY = tokenHighestY;
            }

            if (lowestY > tokenLowestY) {
              lowestY = tokenLowestY;
            }

            if (longestLine < letterRight) {
              longestLine = letterRight;
            }

            index += tokenLen;
          }

          _linesWidth.push(letterRight);

          _numberOfLines = lineIndex + 1;
          _textDesiredHeight = _numberOfLines * _lineHeight * this._getFontScale();

          if (_numberOfLines > 1) {
            _textDesiredHeight += (_numberOfLines - 1) * _lineSpacing;
          }

          _contentSize.width = _labelWidth;
          _contentSize.height = _labelHeight;

          if (_labelWidth <= 0) {
            _contentSize.width = parseFloat(longestLine.toFixed(2)) + shareLabelInfo.margin * 2;
          }

          if (_labelHeight <= 0) {
            _contentSize.height = parseFloat(_textDesiredHeight.toFixed(2)) + shareLabelInfo.margin * 2;
          }

          _tailoredTopY = _contentSize.height;
          _tailoredBottomY = 0;

          if (highestY > 0) {
            _tailoredTopY = _contentSize.height + highestY;
          }

          if (lowestY < -_textDesiredHeight) {
            _tailoredBottomY = _textDesiredHeight + lowestY;
          }

          return true;
        },
        _getFirstCharLen: function _getFirstCharLen() {
          return 1;
        },
        _getFontScale: function _getFontScale() {
          return _overflow === Overflow.SHRINK ? _bmfontScale : 1;
        },
        _getFirstWordLen: function _getFirstWordLen(text, startIndex, textLen) {
          var character = text.charAt(startIndex);

          if (isUnicodeCJK(character) || character === '\n' || isUnicodeSpace(character)) {
            return 1;
          }

          var len = 1;
          var letterDef = shareLabelInfo.fontAtlas.getLetterDefinitionForChar(character, shareLabelInfo);

          if (!letterDef) {
            return len;
          }

          var nextLetterX = letterDef.xAdvance * _bmfontScale + _spacingX;
          var letterX = 0;

          for (var index = startIndex + 1; index < textLen; ++index) {
            character = text.charAt(index);
            letterDef = shareLabelInfo.fontAtlas.getLetterDefinitionForChar(character, shareLabelInfo);

            if (!letterDef) {
              break;
            }

            letterX = nextLetterX + letterDef.offsetX * _bmfontScale;

            if (letterX + letterDef.w * _bmfontScale > _maxLineWidth && !isUnicodeSpace(character) && _maxLineWidth > 0) {
              return len;
            }

            nextLetterX += letterDef.xAdvance * _bmfontScale + _spacingX;

            if (character === '\n' || isUnicodeSpace(character) || isUnicodeCJK(character)) {
              break;
            }

            len++;
          }

          return len;
        },
        _multilineTextWrapByWord: function _multilineTextWrapByWord() {
          return this._multilineTextWrap(this._getFirstWordLen);
        },
        _multilineTextWrapByChar: function _multilineTextWrapByChar() {
          return this._multilineTextWrap(this._getFirstCharLen);
        },
        _recordPlaceholderInfo: function _recordPlaceholderInfo(letterIndex, _char) {
          if (letterIndex >= _lettersInfo.length) {
            var tmpInfo = new LetterInfo();

            _lettersInfo.push(tmpInfo);
          }

          _lettersInfo[letterIndex]["char"] = _char;
          _lettersInfo[letterIndex].hash = "" + _char.charCodeAt(0) + shareLabelInfo.hash;
          _lettersInfo[letterIndex].valid = false;
        },
        _recordLetterInfo: function _recordLetterInfo(letterPosition, character, letterIndex, lineIndex) {
          if (letterIndex >= _lettersInfo.length) {
            var tmpInfo = new LetterInfo();

            _lettersInfo.push(tmpInfo);
          }

          var _char2 = character.charCodeAt(0);

          var key = "" + _char2 + shareLabelInfo.hash;
          _lettersInfo[letterIndex].line = lineIndex;
          _lettersInfo[letterIndex]["char"] = character;
          _lettersInfo[letterIndex].hash = key;
          _lettersInfo[letterIndex].valid = shareLabelInfo.fontAtlas.getLetter(key).valid;
          _lettersInfo[letterIndex].x = letterPosition.x;
          _lettersInfo[letterIndex].y = letterPosition.y;
        },
        _alignText: function _alignText() {
          _textDesiredHeight = 0;
          _linesWidth.length = 0;

          {
            this._multilineTextWrapByWord();
          }

          this._computeAlignmentOffset();

          if (_overflow === Overflow.SHRINK) {
            if (_fontSize > 0 && this._isVerticalClamp()) {
              this._shrinkLabelToContentSize(this._isVerticalClamp);
            }
          }

          if (!this._updateQuads()) {
            if (_overflow === Overflow.SHRINK) {
              this._shrinkLabelToContentSize(this._isHorizontalClamp);
            }
          }
        },
        _scaleFontSizeDown: function _scaleFontSizeDown(fontSize) {
          var shouldUpdateContent = true;

          if (!fontSize) {
            fontSize = 0.1;
            shouldUpdateContent = false;
          }

          _fontSize = fontSize;

          if (shouldUpdateContent) {
            this._updateContent();
          }
        },
        _shrinkLabelToContentSize: function _shrinkLabelToContentSize(lambda) {
          var fontSize = _fontSize;
          var left = 0;
          var right = fontSize | 0;
          var mid = 0;

          while (left < right) {
            mid = left + right + 1 >> 1;
            var newFontSize = mid;

            if (newFontSize <= 0) {
              break;
            }

            _bmfontScale = newFontSize / _originFontSize;

            {
              this._multilineTextWrapByWord();
            }

            this._computeAlignmentOffset();

            if (lambda()) {
              right = mid - 1;
            } else {
              left = mid;
            }
          }

          if (left >= 0) {
            this._scaleFontSizeDown(left);
          }
        },
        _isVerticalClamp: function _isVerticalClamp() {
          if (_textDesiredHeight > _contentSize.height) {
            return true;
          } else {
            return false;
          }
        },
        _isHorizontalClamp: function _isHorizontalClamp() {
          var letterClamp = false;

          for (var ctr = 0, l = _string.length; ctr < l; ++ctr) {
            var letterInfo = _lettersInfo[ctr];

            if (letterInfo.valid) {
              var letterDef = shareLabelInfo.fontAtlas.getLetterDefinitionForChar(letterInfo["char"], shareLabelInfo);

              if (!letterDef) {
                continue;
              }

              var px = letterInfo.x + letterDef.w * _bmfontScale;
              var lineIndex = letterInfo.line;

              if (_labelWidth > 0) {
                if (!_isWrapText) {
                  if (px > _contentSize.width) {
                    letterClamp = true;
                    break;
                  }
                } else {
                  var wordWidth = _linesWidth[lineIndex];

                  if (wordWidth > _contentSize.width && (px > _contentSize.width || px < 0)) {
                    letterClamp = true;
                    break;
                  }
                }
              }
            }
          }

          return letterClamp;
        },
        _isHorizontalClamped: function _isHorizontalClamped(px, lineIndex) {
          var wordWidth = _linesWidth[lineIndex];
          var letterOverClamp = px > _contentSize.width || px < 0;

          if (!_isWrapText) {
            return letterOverClamp;
          } else {
            return wordWidth > _contentSize.width && letterOverClamp;
          }
        },
        _updateQuads: function _updateQuads() {
          if (!_comp) {
            return false;
          }

          var texture = _spriteFrame ? _spriteFrame.texture : shareLabelInfo.fontAtlas.getTexture();
          var renderData = _comp.renderData;
          renderData.dataLength = 0;
          renderData.resize(0, 0);
          var anchorPoint = _uiTrans.anchorPoint;
          var contentSize = _contentSize;
          var appX = anchorPoint.x * contentSize.width;
          var appY = anchorPoint.y * contentSize.height;
          var ret = true;

          for (var ctr = 0, l = _string.length; ctr < l; ++ctr) {
            var letterInfo = _lettersInfo[ctr];

            if (!letterInfo.valid) {
              continue;
            }

            var letterDef = shareLabelInfo.fontAtlas.getLetter(letterInfo.hash);

            if (!letterDef) {
              console.warn('Can\'t find letter in this bitmap-font');
              continue;
            }

            _tmpRect.height = letterDef.h;
            _tmpRect.width = letterDef.w;
            _tmpRect.x = letterDef.u;
            _tmpRect.y = letterDef.v;
            var py = letterInfo.y + _letterOffsetY;

            if (_labelHeight > 0) {
              if (py > _tailoredTopY) {
                var clipTop = py - _tailoredTopY;
                _tmpRect.y += clipTop;
                _tmpRect.height -= clipTop;
                py -= clipTop;
              }

              if (py - _tmpRect.height * _bmfontScale < _tailoredBottomY && _overflow === Overflow.CLAMP) {
                _tmpRect.height = py < _tailoredBottomY ? 0 : (py - _tailoredBottomY) / _bmfontScale;
              }
            }

            var lineIndex = letterInfo.line;
            var px = letterInfo.x + letterDef.w / 2 * _bmfontScale + _linesOffsetX[lineIndex];

            if (_labelWidth > 0) {
              if (this._isHorizontalClamped(px, lineIndex)) {
                if (_overflow === Overflow.CLAMP) {
                  _tmpRect.width = 0;
                } else if (_overflow === Overflow.SHRINK) {
                  if (_contentSize.width > letterDef.w) {
                    ret = false;
                    break;
                  } else {
                    _tmpRect.width = 0;
                  }
                }
              }
            }

            if (_tmpRect.height > 0 && _tmpRect.width > 0) {
              var isRotated = this._determineRect();

              var letterPositionX = letterInfo.x + _linesOffsetX[letterInfo.line];
              this.appendQuad(_comp, texture, _tmpRect, isRotated, letterPositionX - appX, py - appY, _bmfontScale);
            }
          }

          var indexCount = renderData.indexCount;
          this.createQuadIndices(indexCount);
          renderData.chunk.setIndexBuffer(QUAD_INDICES);
          return ret;
        },
        createQuadIndices: function createQuadIndices(indexCount) {
          if (indexCount % 6 !== 0) {
            console.error('illegal index count!');
            return;
          }

          var quadCount = indexCount / 6;
          QUAD_INDICES = null;
          QUAD_INDICES = new Uint16Array(indexCount);
          var offset = 0;

          for (var i = 0; i < quadCount; i++) {
            QUAD_INDICES[offset++] = 0 + i * 4;
            QUAD_INDICES[offset++] = 1 + i * 4;
            QUAD_INDICES[offset++] = 2 + i * 4;
            QUAD_INDICES[offset++] = 1 + i * 4;
            QUAD_INDICES[offset++] = 3 + i * 4;
            QUAD_INDICES[offset++] = 2 + i * 4;
          }
        },
        appendQuad: function appendQuad(comp, texture, rect, rotated, x, y, scale) {},
        _determineRect: function _determineRect() {
          var isRotated = _spriteFrame.isRotated();

          var originalSize = _spriteFrame.getOriginalSize();

          var rect = _spriteFrame.getRect();

          var offset = _spriteFrame.getOffset();

          var trimmedLeft = offset.x + (originalSize.width - rect.width) / 2;
          var trimmedTop = offset.y - (originalSize.height - rect.height) / 2;

          if (!isRotated) {
            _tmpRect.x += rect.x - trimmedLeft;
            _tmpRect.y += rect.y + trimmedTop;
          } else {
            var originalX = _tmpRect.x;
            _tmpRect.x = rect.x + rect.height - _tmpRect.y - _tmpRect.height - trimmedTop;
            _tmpRect.y = originalX + rect.y - trimmedLeft;

            if (_tmpRect.y < 0) {
              _tmpRect.height += trimmedTop;
            }
          }

          return isRotated;
        },
        _computeAlignmentOffset: function _computeAlignmentOffset() {
          _linesOffsetX.length = 0;

          switch (_hAlign) {
            case HorizontalTextAlignment.LEFT:
              for (var i = 0; i < _numberOfLines; ++i) {
                _linesOffsetX.push(0);
              }

              break;

            case HorizontalTextAlignment.CENTER:
              for (var _i = 0, l = _linesWidth.length; _i < l; _i++) {
                _linesOffsetX.push((_contentSize.width - _linesWidth[_i]) / 2);
              }

              break;

            case HorizontalTextAlignment.RIGHT:
              for (var _i2 = 0, _l = _linesWidth.length; _i2 < _l; _i2++) {
                _linesOffsetX.push(_contentSize.width - _linesWidth[_i2]);
              }

              break;
          }

          _letterOffsetY = _contentSize.height;

          if (_vAlign !== VerticalTextAlignment.TOP) {
            var blank = _contentSize.height - _textDesiredHeight + _lineHeight * this._getFontScale() - _originFontSize * _bmfontScale;

            if (_vAlign === VerticalTextAlignment.BOTTOM) {
              _letterOffsetY -= blank;
            } else {
              _letterOffsetY -= blank / 2;
            }
          }
        },
        _setupBMFontOverflowMetrics: function _setupBMFontOverflowMetrics() {
          var newWidth = _contentSize.width;
          var newHeight = _contentSize.height;

          if (_overflow === Overflow.RESIZE_HEIGHT) {
            newHeight = 0;
          }

          if (_overflow === Overflow.NONE) {
            newWidth = 0;
            newHeight = 0;
          }

          _labelWidth = newWidth;
          _labelHeight = newHeight;
          _labelDimensions.width = newWidth;
          _labelDimensions.height = newHeight;
          _maxLineWidth = newWidth;
        }
      };

      var tempColor$1 = new Color(255, 255, 255, 255);
      var bmfont = {
        createData: function createData(comp) {
          var renderData = comp.requestRenderData();
          renderData.resize(0, 0);
          return renderData;
        },
        fillBuffers: function fillBuffers(comp, renderer) {
          var node = comp.node;
          tempColor$1.set(comp.color);
          tempColor$1.a = node._uiProps.opacity * 255;
          fillMeshVertices3D(node, renderer, comp.renderData, tempColor$1);
        },
        appendQuad: function appendQuad(comp, spriteFrame, rect, rotated, x, y, scale) {
          var renderData = comp.renderData;

          if (!renderData) {
            return;
          }

          var dataOffset = renderData.dataLength;
          renderData.dataLength += 4;
          renderData.resize(renderData.dataLength, renderData.dataLength / 2 * 3);
          var dataList = renderData.data;
          var texW = spriteFrame.width;
          var texH = spriteFrame.height;
          var rectWidth = rect.width;
          var rectHeight = rect.height;
          var l = 0;
          var b = 0;
          var t = 0;
          var r = 0;

          if (!rotated) {
            l = rect.x / texW;
            r = (rect.x + rectWidth) / texW;
            b = (rect.y + rectHeight) / texH;
            t = rect.y / texH;
            dataList[dataOffset].u = l;
            dataList[dataOffset].v = b;
            dataList[dataOffset + 1].u = r;
            dataList[dataOffset + 1].v = b;
            dataList[dataOffset + 2].u = l;
            dataList[dataOffset + 2].v = t;
            dataList[dataOffset + 3].u = r;
            dataList[dataOffset + 3].v = t;
          } else {
            l = rect.x / texW;
            r = (rect.x + rectHeight) / texW;
            b = (rect.y + rectWidth) / texH;
            t = rect.y / texH;
            dataList[dataOffset].u = l;
            dataList[dataOffset].v = t;
            dataList[dataOffset + 1].u = l;
            dataList[dataOffset + 1].v = b;
            dataList[dataOffset + 2].u = r;
            dataList[dataOffset + 2].v = t;
            dataList[dataOffset + 3].u = r;
            dataList[dataOffset + 3].v = b;
          }

          dataList[dataOffset].x = x;
          dataList[dataOffset].y = y - rectHeight * scale;
          dataList[dataOffset + 1].x = x + rectWidth * scale;
          dataList[dataOffset + 1].y = y - rectHeight * scale;
          dataList[dataOffset + 2].x = x;
          dataList[dataOffset + 2].y = y;
          dataList[dataOffset + 3].x = x + rectWidth * scale;
          dataList[dataOffset + 3].y = y;
        }
      };
      addon(bmfont, bmfontUtils);

      var _atlasWidth = 1024;
      var _atlasHeight = 1024;
      var _shareAtlas = null;
      var letterFont = mixin(bmfontUtils, {
        getAssemblerData: function getAssemblerData() {
          if (!_shareAtlas) {
            _shareAtlas = new LetterAtlas(_atlasWidth, _atlasHeight);
          }

          return _shareAtlas.getTexture();
        },
        _updateFontFamily: function _updateFontFamily(comp) {
          shareLabelInfo.fontAtlas = _shareAtlas;
          shareLabelInfo.fontFamily = this._getFontFamily(comp);
          var outline = comp.getComponent(LabelOutline);

          if (outline && outline.enabled) {
            shareLabelInfo.isOutlined = true;
            shareLabelInfo.margin = outline.width;
            shareLabelInfo.out = outline.color.clone();
            shareLabelInfo.out.a = outline.color.a * comp.color.a / 255.0;
          } else {
            shareLabelInfo.isOutlined = false;
            shareLabelInfo.margin = 0;
          }
        },
        _getFontFamily: function _getFontFamily(comp) {
          var fontFamily = 'Arial';

          if (!comp.useSystemFont) {
            if (comp.font) {
              fontFamily = comp.font._nativeAsset || 'Arial';
            }
          } else {
            fontFamily = comp.fontFamily || 'Arial';
          }

          return fontFamily;
        },
        _updateLabelInfo: function _updateLabelInfo(comp) {
          shareLabelInfo.fontDesc = this._getFontDesc();
          shareLabelInfo.color = comp.color;
          shareLabelInfo.hash = computeHash(shareLabelInfo);
        },
        _getFontDesc: function _getFontDesc() {
          var fontDesc = shareLabelInfo.fontSize.toString() + "px ";
          fontDesc += shareLabelInfo.fontFamily;

          return fontDesc;
        },
        _computeHorizontalKerningForText: function _computeHorizontalKerningForText() {},
        _determineRect: function _determineRect(tempRect) {
          return false;
        }
      });

      var tempColor$2 = new Color(255, 255, 255, 255);
      var letter = {
        createData: function createData(comp) {
          var renderData = comp.requestRenderData();
          renderData.resize(0, 0);
          return renderData;
        },
        fillBuffers: function fillBuffers(comp, renderer) {
          if (!comp.renderData) {
            return;
          }

          var node = comp.node;
          tempColor$2.a = node._uiProps.opacity * 255;
          fillMeshVertices3D(node, renderer, comp.renderData, tempColor$2);
        },
        appendQuad: bmfont.appendQuad
      };
      addon(letter, letterFont);

      var Overflow$1 = Label.Overflow;
      var MAX_SIZE$1 = 2048;

      var _BASELINE_OFFSET$1 = getBaselineOffset();

      var _invisibleAlpha = (1 / 255).toFixed(3);

      var _context = null;
      var _canvas = null;
      var _texture = null;
      var _fontDesc = '';
      var _string$1 = '';
      var _fontSize$1 = 0;
      var _drawFontsize = 0;
      var _splitStrings = [];

      var _canvasSize = new Size();

      var _lineHeight$1 = 0;
      var _hAlign$1 = 0;
      var _vAlign$1 = 0;

      var _color = new Color();

      var _alpha = 1;
      var _fontFamily = '';
      var _overflow$1 = Overflow$1.NONE;
      var _isWrapText$1 = false;
      var _outlineComp = null;

      var _outlineColor = Color.BLACK.clone();

      var _shadowComp = null;

      var _shadowColor = Color.BLACK.clone();

      var _canvasPadding = new Rect();

      var _contentSizeExtend = Size.ZERO.clone();

      var _nodeContentSize = Size.ZERO.clone();

      var _startPosition = Vec2.ZERO.clone();

      var _drawUnderlinePos = Vec2.ZERO.clone();

      var _drawUnderlineWidth = 0;
      var _underlineThickness = 0;
      var _isBold = false;
      var _isItalic = false;
      var _isUnderline = false;
      var Alignment = ['left', 'center', 'right'];
      var ttfUtils = {
        getAssemblerData: function getAssemblerData() {
          var sharedLabelData = Label._canvasPool.get();

          sharedLabelData.canvas.width = sharedLabelData.canvas.height = 1;
          return sharedLabelData;
        },
        resetAssemblerData: function resetAssemblerData(assemblerData) {
          if (assemblerData) {
            Label._canvasPool.put(assemblerData);
          }
        },
        updateRenderData: function updateRenderData(comp) {
          if (!comp.renderData) {
            return;
          }

          if (comp.renderData.vertDirty) {
            var trans = comp.node._uiProps.uiTransformComp;

            this._updateFontFamily(comp);

            this._updateProperties(comp, trans);

            this._calculateLabelFont();

            this._updateLabelDimensions();

            this._updateTexture(comp);

            this._calDynamicAtlas(comp);

            comp.actualFontSize = _fontSize$1;
            trans.setContentSize(_canvasSize);
            this.updateVertexData(comp);
            this.updateUVs(comp);
            comp.renderData.vertDirty = false;
            comp.contentWidth = _nodeContentSize.width;
            _context = null;
            _canvas = null;
            _texture = null;
          }

          if (comp.spriteFrame) {
            var renderData = comp.renderData;
            renderData.updateRenderData(comp, comp.spriteFrame);
          }
        },
        updateVertexData: function updateVertexData(comp) {},
        updateUVs: function updateUVs(comp) {},
        _updateFontFamily: function _updateFontFamily(comp) {
          if (!comp.useSystemFont) {
            if (comp.font) {
              _fontFamily = comp.font._nativeAsset || 'Arial';
            } else {
              _fontFamily = 'Arial';
            }
          } else {
            _fontFamily = comp.fontFamily || 'Arial';
          }
        },
        _updateProperties: function _updateProperties(comp, trans) {
          var assemblerData = comp.assemblerData;

          if (!assemblerData) {
            return;
          }

          _context = assemblerData.context;
          _canvas = assemblerData.canvas;
          _texture = comp.spriteFrame;
          _string$1 = comp.string.toString();
          _fontSize$1 = comp.fontSize;
          _drawFontsize = _fontSize$1;
          _overflow$1 = comp.overflow;
          _nodeContentSize.width = _canvasSize.width = trans.width;
          _nodeContentSize.height = _canvasSize.height = trans.height;
          _underlineThickness = comp.underlineHeight;
          _lineHeight$1 = comp.lineHeight;
          _hAlign$1 = comp.horizontalAlign;
          _vAlign$1 = comp.verticalAlign;
          _color = comp.color;
          _alpha = comp.node._uiProps.opacity;
          _isBold = comp.isBold;
          _isItalic = comp.isItalic;
          _isUnderline = comp.isUnderline;

          if (_overflow$1 === Overflow$1.NONE) {
            _isWrapText$1 = false;
          } else if (_overflow$1 === Overflow$1.RESIZE_HEIGHT) {
            _isWrapText$1 = true;
          } else {
            _isWrapText$1 = comp.enableWrapText;
          }

          _outlineComp = LabelOutline && comp.getComponent(LabelOutline);
          _outlineComp = _outlineComp && _outlineComp.enabled && _outlineComp.width > 0 ? _outlineComp : null;

          if (_outlineComp) {
            _outlineColor.set(_outlineComp.color);
          }

          _shadowComp = LabelShadow && comp.getComponent(LabelShadow);
          _shadowComp = _shadowComp && _shadowComp.enabled ? _shadowComp : null;

          if (_shadowComp) {
            _shadowColor.set(_shadowComp.color);
          }

          this._updatePaddingRect();
        },
        _updatePaddingRect: function _updatePaddingRect() {
          var top = 0;
          var bottom = 0;
          var left = 0;
          var right = 0;
          var outlineWidth = 0;
          _contentSizeExtend.width = _contentSizeExtend.height = 0;

          if (_outlineComp) {
            outlineWidth = _outlineComp.width;
            top = bottom = left = right = outlineWidth;
            _contentSizeExtend.width = _contentSizeExtend.height = outlineWidth * 2;
          }

          if (_shadowComp) {
            var shadowWidth = _shadowComp.blur + outlineWidth;
            var offsetX = _shadowComp.offset.x;
            var offsetY = _shadowComp.offset.y;
            left = Math.max(left, -offsetX + shadowWidth);
            right = Math.max(right, offsetX + shadowWidth);
            top = Math.max(top, offsetY + shadowWidth);
            bottom = Math.max(bottom, -offsetY + shadowWidth);
          }

          if (_isItalic) {
            var offset = _drawFontsize * Math.tan(12 * 0.0174532925);

            right += offset;
            _contentSizeExtend.width += offset;
          }

          _canvasPadding.x = left;
          _canvasPadding.y = top;
          _canvasPadding.width = left + right;
          _canvasPadding.height = top + bottom;
        },
        _calculateFillTextStartPosition: function _calculateFillTextStartPosition() {
          var labelX = 0;

          if (_hAlign$1 === HorizontalTextAlignment.RIGHT) {
            labelX = _canvasSize.width - _canvasPadding.width;
          } else if (_hAlign$1 === HorizontalTextAlignment.CENTER) {
            labelX = (_canvasSize.width - _canvasPadding.width) / 2;
          }

          var lineHeight = this._getLineHeight();

          var drawStartY = lineHeight * (_splitStrings.length - 1);
          var firstLinelabelY = _fontSize$1 * (1 - BASELINE_RATIO / 2);

          if (_vAlign$1 !== VerticalTextAlignment.TOP) {
            var blank = drawStartY + _canvasPadding.height + _fontSize$1 - _canvasSize.height;

            if (_vAlign$1 === VerticalTextAlignment.BOTTOM) {
              blank += BASELINE_RATIO / 2 * _fontSize$1;
              firstLinelabelY -= blank;
            } else {
              firstLinelabelY -= blank / 2;
            }
          }

          firstLinelabelY += _BASELINE_OFFSET$1 * _fontSize$1;

          _startPosition.set(labelX + _canvasPadding.x, firstLinelabelY + _canvasPadding.y);
        },
        _updateTexture: function _updateTexture(comp) {
          if (!_context || !_canvas) {
            return;
          }

          _context.clearRect(0, 0, _canvas.width, _canvas.height);

          _context.font = _fontDesc;

          this._calculateFillTextStartPosition();

          var lineHeight = this._getLineHeight();

          _context.lineJoin = 'round';

          if (_outlineComp) {
            _context.fillStyle = "rgba(" + _outlineColor.r + ", " + _outlineColor.g + ", " + _outlineColor.b + ", " + _invisibleAlpha + ")";

            _context.fillRect(0, 0, _canvas.width, _canvas.height);
          } else if (comp._srcBlendFactor === BlendFactor.SRC_ALPHA) {
            _context.fillStyle = "rgba(" + _color.r + ", " + _color.g + ", " + _color.b + ", " + _invisibleAlpha + ")";

            _context.fillRect(0, 0, _canvas.width, _canvas.height);
          }

          _context.fillStyle = "rgb(" + _color.r + ", " + _color.g + ", " + _color.b + ")";
          var drawTextPosX = _startPosition.x;
          var drawTextPosY = 0;

          this._drawTextEffect(_startPosition, lineHeight);

          for (var i = 0; i < _splitStrings.length; ++i) {
            drawTextPosY = _startPosition.y + i * lineHeight;

            if (_outlineComp) {
              _context.strokeText(_splitStrings[i], drawTextPosX, drawTextPosY);
            }

            _context.fillText(_splitStrings[i], drawTextPosX, drawTextPosY);
          }

          if (_shadowComp) {
            _context.shadowColor = 'transparent';
          }

          this._uploadTexture(comp);
        },
        _uploadTexture: function _uploadTexture(comp) {
          if (comp.cacheMode === Label.CacheMode.BITMAP) {
            var frame = comp.ttfSpriteFrame;
            dynamicAtlasManager.deleteAtlasSpriteFrame(frame);

            frame._resetDynamicAtlasFrame();
          }

          if (_texture && _canvas) {
            var tex;

            if (_texture instanceof SpriteFrame) {
              tex = _texture.texture;
            } else {
              tex = _texture;
            }

            var uploadAgain = _canvas.width !== 0 && _canvas.height !== 0;

            if (uploadAgain) {
              tex.reset({
                width: _canvas.width,
                height: _canvas.height,
                mipmapLevel: 1
              });
              tex.uploadData(_canvas);
              tex.setWrapMode(WrapMode.CLAMP_TO_EDGE, WrapMode.CLAMP_TO_EDGE);

              if (_texture instanceof SpriteFrame) {
                _texture.rect = new Rect(0, 0, _canvas.width, _canvas.height);

                _texture._calculateUV();
              }

              if (comp.renderData) {
                comp.renderData.textureDirty = true;
              }

              if (legacyCC.director.root && legacyCC.director.root.batcher2D) {
                {
                  legacyCC.director.root.batcher2D._releaseDescriptorSetCache(tex.getHash());
                }
              }
            }
          }
        },
        _calDynamicAtlas: function _calDynamicAtlas(comp) {
          if (comp.cacheMode !== Label.CacheMode.BITMAP || !_canvas || _canvas.width <= 0 || _canvas.height <= 0) return;
          var frame = comp.ttfSpriteFrame;
          dynamicAtlasManager.packToDynamicAtlas(comp, frame);
        },
        _setupOutline: function _setupOutline() {
          _context.strokeStyle = "rgba(" + _outlineColor.r + ", " + _outlineColor.g + ", " + _outlineColor.b + ", " + _outlineColor.a / 255 + ")";
          _context.lineWidth = _outlineComp.width * 2;
        },
        _setupShadow: function _setupShadow() {
          _context.shadowColor = "rgba(" + _shadowColor.r + ", " + _shadowColor.g + ", " + _shadowColor.b + ", " + _shadowColor.a / 255 + ")";
          _context.shadowBlur = _shadowComp.blur;
          _context.shadowOffsetX = _shadowComp.offset.x;
          _context.shadowOffsetY = -_shadowComp.offset.y;
        },
        _drawTextEffect: function _drawTextEffect(startPosition, lineHeight) {
          if (!_shadowComp && !_outlineComp && !_isUnderline) return;
          var isMultiple = _splitStrings.length > 1 && _shadowComp;

          var measureText = this._measureText(_context, _fontDesc);

          var drawTextPosX = 0;
          var drawTextPosY = 0;

          if (_shadowComp) {
            this._setupShadow();
          }

          if (_outlineComp) {
            this._setupOutline();
          }

          for (var i = 0; i < _splitStrings.length; ++i) {
            drawTextPosX = startPosition.x;
            drawTextPosY = startPosition.y + i * lineHeight;

            if (isMultiple) {
              if (_outlineComp) {
                _context.strokeText(_splitStrings[i], drawTextPosX, drawTextPosY);
              }

              _context.fillText(_splitStrings[i], drawTextPosX, drawTextPosY);
            }

            if (_isUnderline) {
              _drawUnderlineWidth = measureText(_splitStrings[i]);

              if (_hAlign$1 === HorizontalTextAlignment.RIGHT) {
                _drawUnderlinePos.x = startPosition.x - _drawUnderlineWidth;
              } else if (_hAlign$1 === HorizontalTextAlignment.CENTER) {
                _drawUnderlinePos.x = startPosition.x - _drawUnderlineWidth / 2;
              } else {
                _drawUnderlinePos.x = startPosition.x;
              }

              _drawUnderlinePos.y = drawTextPosY + _drawFontsize / 8;

              _context.fillRect(_drawUnderlinePos.x, _drawUnderlinePos.y, _drawUnderlineWidth, _underlineThickness);
            }
          }

          if (isMultiple) {
            _context.shadowColor = 'transparent';
          }
        },
        _updateLabelDimensions: function _updateLabelDimensions() {
          _canvasSize.width = Math.min(_canvasSize.width, MAX_SIZE$1);
          _canvasSize.height = Math.min(_canvasSize.height, MAX_SIZE$1);
          var recreate = false;

          if (_canvas.width !== _canvasSize.width) {
            _canvas.width = _canvasSize.width;
            recreate = true;
          }

          if (_canvas.height !== _canvasSize.height) {
            _canvas.height = _canvasSize.height;
            recreate = true;
          }

          if (recreate) _context.font = _fontDesc;
          _context.textAlign = Alignment[_hAlign$1];
          _context.textBaseline = 'alphabetic';
        },
        _getFontDesc: function _getFontDesc() {
          var fontDesc = _fontSize$1.toString() + "px ";
          fontDesc += _fontFamily;

          if (_isBold) {
            fontDesc = "bold " + fontDesc;
          }

          if (_isItalic) {
            fontDesc = "italic " + fontDesc;
          }

          return fontDesc;
        },
        _getLineHeight: function _getLineHeight() {
          var nodeSpacingY = _lineHeight$1;

          if (nodeSpacingY === 0) {
            nodeSpacingY = _fontSize$1;
          } else {
            nodeSpacingY = nodeSpacingY * _fontSize$1 / _drawFontsize;
          }

          return nodeSpacingY | 0;
        },
        _calculateParagraphLength: function _calculateParagraphLength(paragraphedStrings, ctx) {
          var paragraphLength = [];

          for (var _iterator = _createForOfIteratorHelperLoose(paragraphedStrings), _step; !(_step = _iterator()).done;) {
            var para = _step.value;
            var width = safeMeasureText(ctx, para, _fontDesc);
            paragraphLength.push(width);
          }

          return paragraphLength;
        },
        _measureText: function _measureText(ctx, fontDesc) {
          return function (string) {
            return safeMeasureText(ctx, string, fontDesc);
          };
        },
        _calculateShrinkFont: function _calculateShrinkFont(paragraphedStrings) {
          if (!_context) return;

          var paragraphLength = this._calculateParagraphLength(paragraphedStrings, _context);

          var i = 0;
          var totalHeight = 0;
          var maxLength = 0;

          if (_isWrapText$1) {
            var canvasWidthNoMargin = _nodeContentSize.width;
            var canvasHeightNoMargin = _nodeContentSize.height;

            if (canvasWidthNoMargin < 0 || canvasHeightNoMargin < 0) {
              return;
            }

            totalHeight = canvasHeightNoMargin + 1;
            var actualFontSize = _fontSize$1 + 1;
            var textFragment = [];
            var left = 0;
            var right = actualFontSize | 0;
            var mid = 0;

            while (left < right) {
              mid = left + right + 1 >> 1;

              if (mid <= 0) {
                logID(4003);
                break;
              }

              _fontSize$1 = mid;
              _fontDesc = this._getFontDesc();
              _context.font = _fontDesc;

              var lineHeight = this._getLineHeight();

              totalHeight = 0;

              for (i = 0; i < paragraphedStrings.length; ++i) {
                var allWidth = safeMeasureText(_context, paragraphedStrings[i], _fontDesc);
                textFragment = fragmentText(paragraphedStrings[i], allWidth, canvasWidthNoMargin, this._measureText(_context, _fontDesc));
                totalHeight += textFragment.length * lineHeight;
              }

              if (totalHeight > canvasHeightNoMargin) {
                right = mid - 1;
              } else {
                left = mid;
              }
            }

            if (left === 0) {
              logID(4003);
            } else {
              _fontSize$1 = left;
              _fontDesc = this._getFontDesc();
              _context.font = _fontDesc;
            }
          } else {
            totalHeight = paragraphedStrings.length * this._getLineHeight();

            for (i = 0; i < paragraphedStrings.length; ++i) {
              if (maxLength < paragraphLength[i]) {
                maxLength = paragraphLength[i];
              }
            }

            var scaleX = (_canvasSize.width - _canvasPadding.width) / maxLength;
            var scaleY = _canvasSize.height / totalHeight;
            _fontSize$1 = _drawFontsize * Math.min(1, scaleX, scaleY) | 0;
            _fontDesc = this._getFontDesc();
            _context.font = _fontDesc;
          }
        },
        _calculateWrapText: function _calculateWrapText(paragraphedStrings) {
          if (!_isWrapText$1 || !_context) return;
          _splitStrings = [];
          var canvasWidthNoMargin = _nodeContentSize.width;

          for (var i = 0; i < paragraphedStrings.length; ++i) {
            var allWidth = safeMeasureText(_context, paragraphedStrings[i], _fontDesc);
            var textFragment = fragmentText(paragraphedStrings[i], allWidth, canvasWidthNoMargin, this._measureText(_context, _fontDesc));
            _splitStrings = _splitStrings.concat(textFragment);
          }
        },
        _calculateLabelFont: function _calculateLabelFont() {
          if (!_context) {
            return;
          }

          var paragraphedStrings = _string$1.split('\n');

          _splitStrings = paragraphedStrings;
          _fontDesc = this._getFontDesc();
          _context.font = _fontDesc;

          switch (_overflow$1) {
            case Overflow$1.NONE:
              {
                var canvasSizeX = 0;
                var canvasSizeY = 0;

                for (var i = 0; i < paragraphedStrings.length; ++i) {
                  var paraLength = safeMeasureText(_context, paragraphedStrings[i], _fontDesc);
                  canvasSizeX = canvasSizeX > paraLength ? canvasSizeX : paraLength;
                }

                canvasSizeY = (_splitStrings.length + BASELINE_RATIO) * this._getLineHeight();
                var rawWidth = parseFloat(canvasSizeX.toFixed(2));
                var rawHeight = parseFloat(canvasSizeY.toFixed(2));
                _canvasSize.width = rawWidth + _canvasPadding.width;
                _canvasSize.height = rawHeight + _canvasPadding.height;
                _nodeContentSize.width = rawWidth + _contentSizeExtend.width;
                _nodeContentSize.height = rawHeight + _contentSizeExtend.height;
                break;
              }

            case Overflow$1.SHRINK:
              {
                this._calculateShrinkFont(paragraphedStrings);

                this._calculateWrapText(paragraphedStrings);

                break;
              }

            case Overflow$1.CLAMP:
              {
                this._calculateWrapText(paragraphedStrings);

                break;
              }

            case Overflow$1.RESIZE_HEIGHT:
              {
                this._calculateWrapText(paragraphedStrings);

                var _rawHeight = (_splitStrings.length + BASELINE_RATIO) * this._getLineHeight();

                _canvasSize.height = _rawHeight + _canvasPadding.height;
                _nodeContentSize.height = _rawHeight + _contentSizeExtend.height;
                break;
              }
          }
        }
      };

      var WHITE$1 = Color.WHITE.clone();
      var QUAD_INDICES$1 = Uint16Array.from([0, 1, 2, 1, 3, 2]);
      var ttf = {
        createData: function createData(comp) {
          var renderData = comp.requestRenderData();
          renderData.dataLength = 4;
          renderData.resize(4, 6);
          var vData = renderData.chunk.vb;
          vData[3] = vData[21] = vData[22] = vData[31] = 0;
          vData[4] = vData[12] = vData[13] = vData[30] = 1;
          var offset = 5;

          for (var i = 0; i < 4; i++) {
            Color.toArray(vData, WHITE$1, offset);
            offset += 9;
          }

          renderData.vertexRow = 2;
          renderData.vertexCol = 2;
          renderData.chunk.setIndexBuffer(QUAD_INDICES$1);
          return renderData;
        },
        fillBuffers: function fillBuffers(comp, renderer) {
          var renderData = comp.renderData;
          var chunk = renderData.chunk;
          var dataList = renderData.data;
          var node = comp.node;
          var vData = chunk.vb;
          var m = node.worldMatrix;
          var stride = renderData.floatStride;
          var offset = 0;
          var length = dataList.length;

          for (var i = 0; i < length; i++) {
            var curData = dataList[i];
            var x = curData.x;
            var y = curData.y;
            var rhw = m.m03 * x + m.m07 * y + m.m15;
            rhw = rhw ? Math.abs(1 / rhw) : 1;
            offset = i * stride;
            vData[offset + 0] = (m.m00 * x + m.m04 * y + m.m12) * rhw;
            vData[offset + 1] = (m.m01 * x + m.m05 * y + m.m13) * rhw;
            vData[offset + 2] = (m.m02 * x + m.m06 * y + m.m14) * rhw;
          }

          var vid = chunk.vertexOffset;
          var meshBuffer = chunk.meshBuffer;
          var ib = chunk.meshBuffer.iData;
          var indexOffset = meshBuffer.indexOffset;
          ib[indexOffset++] = vid;
          ib[indexOffset++] = vid + 1;
          ib[indexOffset++] = vid + 2;
          ib[indexOffset++] = vid + 2;
          ib[indexOffset++] = vid + 1;
          ib[indexOffset++] = vid + 3;
          meshBuffer.indexOffset += 6;
        },
        updateVertexData: function updateVertexData(comp) {
          var renderData = comp.renderData;

          if (!renderData) {
            return;
          }

          var uiTrans = comp.node._uiProps.uiTransformComp;
          var width = uiTrans.width;
          var height = uiTrans.height;
          var appX = uiTrans.anchorX * width;
          var appY = uiTrans.anchorY * height;
          var data = renderData.data;
          data[0].x = -appX;
          data[0].y = -appY;
          data[1].x = width - appX;
          data[1].y = -appY;
          data[2].x = -appX;
          data[2].y = height - appY;
          data[3].x = width - appX;
          data[3].y = height - appY;
        },
        updateUVs: function updateUVs(comp) {
          var renderData = comp.renderData;

          if (!renderData || !comp.ttfSpriteFrame) {
            return;
          }

          var vData = renderData.chunk.vb;
          var uv = comp.ttfSpriteFrame.uv;
          vData[3] = uv[0];
          vData[4] = uv[1];
          vData[12] = uv[2];
          vData[13] = uv[3];
          vData[21] = uv[4];
          vData[22] = uv[5];
          vData[30] = uv[6];
          vData[31] = uv[7];
        },
        updateColor: function updateColor(comp) {}
      };
      addon(ttf, ttfUtils);

      var labelAssembler = exports('labelAssembler', {
        getAssembler: function getAssembler(comp) {
          var assembler = ttf;

          if (comp.font instanceof BitmapFont) {
            assembler = bmfont;
          } else if (comp.cacheMode === Label.CacheMode.CHAR) {
            assembler = letter;
          }

          return assembler;
        }
      });
      Label.Assembler = labelAssembler;

      var FillType$1 = Sprite.FillType;
      var m$1 = new Mat4();
      var QUAD_INDICES$2 = Uint16Array.from([0, 1, 2, 1, 3, 2]);
      var barFilled = {
        updateRenderData: function updateRenderData(sprite) {
          var frame = sprite.spriteFrame;
          dynamicAtlasManager.packToDynamicAtlas(sprite, frame);
          var renderData = sprite.renderData;

          if (renderData && frame) {
            var vertDirty = renderData.vertDirty;

            if (!vertDirty) {
              return;
            }

            var fillStart = sprite.fillStart;
            var fillRange = sprite.fillRange;

            if (fillRange < 0) {
              fillStart += fillRange;
              fillRange = -fillRange;
            }

            fillRange = fillStart + fillRange;
            fillStart = fillStart > 1.0 ? 1.0 : fillStart;
            fillStart = fillStart < 0.0 ? 0.0 : fillStart;
            fillRange = fillRange > 1.0 ? 1.0 : fillRange;
            fillRange = fillRange < 0.0 ? 0.0 : fillRange;
            fillRange -= fillStart;
            fillRange = fillRange < 0 ? 0 : fillRange;
            var fillEnd = fillStart + fillRange;
            fillEnd = fillEnd > 1 ? 1 : fillEnd;
            this.updateUVs(sprite, fillStart, fillEnd);
            this.updateVertexData(sprite, fillStart, fillEnd);
            renderData.updateRenderData(sprite, frame);
          }
        },
        updateUVs: function updateUVs(sprite, fillStart, fillEnd) {
          var spriteFrame = sprite.spriteFrame;
          var renderData = sprite.renderData;
          var vData = renderData.chunk.vb;
          var atlasWidth = spriteFrame.width;
          var atlasHeight = spriteFrame.height;
          var textureRect = spriteFrame.rect;
          var ul = 0;
          var vb = 0;
          var ur = 0;
          var vt = 0;
          var quadUV0 = 0;
          var quadUV1 = 0;
          var quadUV2 = 0;
          var quadUV3 = 0;
          var quadUV4 = 0;
          var quadUV5 = 0;
          var quadUV6 = 0;
          var quadUV7 = 0;

          if (spriteFrame.isRotated()) {
            ul = textureRect.x / atlasWidth;
            vb = (textureRect.y + textureRect.width) / atlasHeight;
            ur = (textureRect.x + textureRect.height) / atlasWidth;
            vt = textureRect.y / atlasHeight;
            quadUV0 = quadUV2 = ul;
            quadUV4 = quadUV6 = ur;
            quadUV3 = quadUV7 = vb;
            quadUV1 = quadUV5 = vt;
          } else {
            ul = textureRect.x / atlasWidth;
            vb = (textureRect.y + textureRect.height) / atlasHeight;
            ur = (textureRect.x + textureRect.width) / atlasWidth;
            vt = textureRect.y / atlasHeight;
            quadUV0 = quadUV4 = ul;
            quadUV2 = quadUV6 = ur;
            quadUV1 = quadUV3 = vb;
            quadUV5 = quadUV7 = vt;
          }

          switch (sprite.fillType) {
            case FillType$1.HORIZONTAL:
              vData[3] = quadUV0 + (quadUV2 - quadUV0) * fillStart;
              vData[4] = quadUV1 + (quadUV3 - quadUV1) * fillStart;
              vData[12] = quadUV0 + (quadUV2 - quadUV0) * fillEnd;
              vData[13] = quadUV1 + (quadUV3 - quadUV1) * fillEnd;
              vData[21] = quadUV4 + (quadUV6 - quadUV4) * fillStart;
              vData[22] = quadUV5 + (quadUV7 - quadUV5) * fillStart;
              vData[30] = quadUV4 + (quadUV6 - quadUV4) * fillEnd;
              vData[31] = quadUV5 + (quadUV7 - quadUV5) * fillEnd;
              break;

            case FillType$1.VERTICAL:
              vData[3] = quadUV0 + (quadUV4 - quadUV0) * fillStart;
              vData[4] = quadUV1 + (quadUV5 - quadUV1) * fillStart;
              vData[12] = quadUV2 + (quadUV6 - quadUV2) * fillStart;
              vData[13] = quadUV3 + (quadUV7 - quadUV3) * fillStart;
              vData[21] = quadUV0 + (quadUV4 - quadUV0) * fillEnd;
              vData[22] = quadUV1 + (quadUV5 - quadUV1) * fillEnd;
              vData[30] = quadUV2 + (quadUV6 - quadUV2) * fillEnd;
              vData[31] = quadUV3 + (quadUV7 - quadUV3) * fillEnd;
              break;

            default:
              errorID(2626);
              break;
          }
        },
        updateVertexData: function updateVertexData(sprite, fillStart, fillEnd) {
          var renderData = sprite.renderData;
          var dataList = renderData.data;
          var uiTrans = sprite.node._uiProps.uiTransformComp;
          var width = uiTrans.width;
          var height = uiTrans.height;
          var appX = uiTrans.anchorX * width;
          var appY = uiTrans.anchorY * height;
          var l = -appX;
          var b = -appY;
          var r = width - appX;
          var t = height - appY;
          var progressStart = 0;
          var progressEnd = 0;

          switch (sprite.fillType) {
            case FillType$1.HORIZONTAL:
              progressStart = l + (r - l) * fillStart;
              progressEnd = l + (r - l) * fillEnd;
              l = progressStart;
              r = progressEnd;
              break;

            case FillType$1.VERTICAL:
              progressStart = b + (t - b) * fillStart;
              progressEnd = b + (t - b) * fillEnd;
              b = progressStart;
              t = progressEnd;
              break;

            default:
              errorID(2626);
              break;
          }

          dataList[0].x = l;
          dataList[0].y = b;
          dataList[1].x = r;
          dataList[1].y = b;
          dataList[2].x = l;
          dataList[2].y = t;
          dataList[3].x = r;
          dataList[3].y = t;
        },
        createData: function createData(sprite) {
          var renderData = sprite.requestRenderData();
          renderData.dataLength = 4;
          renderData.resize(4, 6);
          renderData.vertexRow = 2;
          renderData.vertexCol = 2;
          renderData.chunk.setIndexBuffer(QUAD_INDICES$2);
          var dataList = renderData.data;

          for (var _iterator = _createForOfIteratorHelperLoose(dataList), _step; !(_step = _iterator()).done;) {
            var data = _step.value;
            data.z = 0;
          }

          return renderData;
        },
        updateWorldVertexData: function updateWorldVertexData(sprite, chunk) {
          var node = sprite.node;
          node.getWorldMatrix(m$1);
          var renderData = sprite.renderData;
          var stride = renderData.floatStride;
          var dataList = sprite.renderData.data;
          var vData = chunk.vb;
          var offset = 0;

          for (var i = 0; i < 4; i++) {
            var local = dataList[i];
            var x = local.x;
            var y = local.y;
            var rhw = m$1.m03 * x + m$1.m07 * y + m$1.m15;
            rhw = rhw ? Math.abs(1 / rhw) : 1;
            offset = i * stride;
            vData[offset] = (m$1.m00 * x + m$1.m04 * y + m$1.m12) * rhw;
            vData[offset + 1] = (m$1.m01 * x + m$1.m05 * y + m$1.m13) * rhw;
            vData[offset + 2] = (m$1.m02 * x + m$1.m06 * y + m$1.m14) * rhw;
          }
        },
        fillBuffers: function fillBuffers(sprite, renderer) {
          var renderData = sprite.renderData;
          var chunk = renderData.chunk;

          if (sprite.node.hasChangedFlags || renderData.vertDirty) {
            this.updateWorldVertexData(sprite, chunk);
            renderData.vertDirty = false;
          }

          var bid = chunk.bufferId;
          var vid = chunk.vertexOffset;
          var meshBuffer = chunk.meshBuffer;
          var ib = chunk.meshBuffer.iData;
          var indexOffset = meshBuffer.indexOffset;
          ib[indexOffset++] = vid;
          ib[indexOffset++] = vid + 1;
          ib[indexOffset++] = vid + 2;
          ib[indexOffset++] = vid + 2;
          ib[indexOffset++] = vid + 1;
          ib[indexOffset++] = vid + 3;
          meshBuffer.indexOffset += 6;
        },
        updateColor: function updateColor(sprite) {
          var renderData = sprite.renderData;
          var vData = renderData.chunk.vb;
          var stride = renderData.floatStride;
          var colorOffset = 5;
          var color = sprite.color;
          var colorR = color.r / 255;
          var colorG = color.g / 255;
          var colorB = color.b / 255;
          var colorA = sprite.node._uiProps.opacity;

          for (var i = 0; i < 4; i++) {
            vData[colorOffset] = colorR;
            vData[colorOffset + 1] = colorG;
            vData[colorOffset + 2] = colorB;
            vData[colorOffset + 3] = colorA;
            colorOffset += stride;
          }
        }
      };

      var PI_2 = Math.PI * 2;
      var EPSILON$2 = 1e-6;
      var m$2 = new Mat4();
      var _vertPos = [new Vec2(), new Vec2(), new Vec2(), new Vec2()];

      var _vertices = new Array(4);

      var _uvs = new Array(8);

      var _intersectPoint_1 = [new Vec2(), new Vec2(), new Vec2(), new Vec2()];
      var _intersectPoint_2 = [new Vec2(), new Vec2(), new Vec2(), new Vec2()];

      var _center = new Vec2();

      var _triangles = [new Vec2(), new Vec2(), new Vec2(), new Vec2()];
      var QUAD_INDICES$3;

      function _calcIntersectedPoints(left, right, bottom, top, center, angle, intersectPoints) {
        var sinAngle = Math.sin(angle);
        sinAngle = Math.abs(sinAngle) > EPSILON$2 ? sinAngle : 0;
        var cosAngle = Math.cos(angle);
        cosAngle = Math.abs(cosAngle) > EPSILON$2 ? cosAngle : 0;
        var tanAngle = 0;
        var cotAngle = 0;

        if (cosAngle !== 0) {
          tanAngle = sinAngle / cosAngle;

          if ((left - center.x) * cosAngle > 0) {
            var yLeft = center.y + tanAngle * (left - center.x);
            intersectPoints[0].x = left;
            intersectPoints[0].y = yLeft;
          }

          if ((right - center.x) * cosAngle > 0) {
            var yRight = center.y + tanAngle * (right - center.x);
            intersectPoints[2].x = right;
            intersectPoints[2].y = yRight;
          }
        }

        if (sinAngle !== 0) {
          cotAngle = cosAngle / sinAngle;

          if ((top - center.y) * sinAngle > 0) {
            var xTop = center.x + cotAngle * (top - center.y);
            intersectPoints[3].x = xTop;
            intersectPoints[3].y = top;
          }

          if ((bottom - center.y) * sinAngle > 0) {
            var xBottom = center.x + cotAngle * (bottom - center.y);
            intersectPoints[1].x = xBottom;
            intersectPoints[1].y = bottom;
          }
        }
      }

      function _calculateVertices(sprite) {
        var uiTrans = sprite.node._uiProps.uiTransformComp;
        var width = uiTrans.width;
        var height = uiTrans.height;
        var appX = uiTrans.anchorX * width;
        var appY = uiTrans.anchorY * height;
        var l = -appX;
        var b = -appY;
        var r = width - appX;
        var t = height - appY;
        var vertices = _vertices;
        vertices[0] = l;
        vertices[1] = b;
        vertices[2] = r;
        vertices[3] = t;
        var fillCenter = sprite.fillCenter;
        var cx = _center.x = Math.min(Math.max(0, fillCenter.x), 1) * (r - l) + l;
        var cy = _center.y = Math.min(Math.max(0, fillCenter.y), 1) * (t - b) + b;
        _vertPos[0].x = _vertPos[3].x = l;
        _vertPos[1].x = _vertPos[2].x = r;
        _vertPos[0].y = _vertPos[1].y = b;
        _vertPos[2].y = _vertPos[3].y = t;

        for (var _iterator = _createForOfIteratorHelperLoose(_triangles), _step; !(_step = _iterator()).done;) {
          var num = _step.value;
          Vec2.set(num, 0, 0);
        }

        if (cx !== vertices[0]) {
          Vec2.set(_triangles[0], 3, 0);
        }

        if (cx !== vertices[2]) {
          Vec2.set(_triangles[2], 1, 2);
        }

        if (cy !== vertices[1]) {
          Vec2.set(_triangles[1], 0, 1);
        }

        if (cy !== vertices[3]) {
          Vec2.set(_triangles[3], 2, 3);
        }
      }

      function _calculateUVs(spriteFrame) {
        var atlasWidth = spriteFrame.width;
        var atlasHeight = spriteFrame.height;
        var textureRect = spriteFrame.getRect();
        var u0 = 0;
        var u1 = 0;
        var v0 = 0;
        var v1 = 0;
        var uvs = _uvs;

        if (spriteFrame.isRotated()) {
          u0 = textureRect.x / atlasWidth;
          u1 = (textureRect.x + textureRect.height) / atlasWidth;
          v0 = textureRect.y / atlasHeight;
          v1 = (textureRect.y + textureRect.width) / atlasHeight;
          uvs[0] = uvs[2] = u0;
          uvs[4] = uvs[6] = u1;
          uvs[3] = uvs[7] = v1;
          uvs[1] = uvs[5] = v0;
        } else {
          u0 = textureRect.x / atlasWidth;
          u1 = (textureRect.x + textureRect.width) / atlasWidth;
          v0 = textureRect.y / atlasHeight;
          v1 = (textureRect.y + textureRect.height) / atlasHeight;
          uvs[0] = uvs[4] = u0;
          uvs[2] = uvs[6] = u1;
          uvs[1] = uvs[3] = v1;
          uvs[5] = uvs[7] = v0;
        }
      }

      function _getVertAngle(start, end) {
        var placementX = end.x - start.x;
        var placementY = end.y - start.y;

        if (placementX === 0 && placementY === 0) {
          return 0;
        } else if (placementX === 0) {
          if (placementY > 0) {
            return Math.PI * 0.5;
          } else {
            return Math.PI * 1.5;
          }
        } else {
          var angle = Math.atan(placementY / placementX);

          if (placementX < 0) {
            angle += Math.PI;
          }

          return angle;
        }
      }

      function _generateTriangle(dataList, offset, vert0, vert1, vert2) {
        var vertices = _vertices;
        var v0x = vertices[0];
        var v0y = vertices[1];
        var v1x = vertices[2];
        var v1y = vertices[3];
        dataList[offset].x = vert0.x;
        dataList[offset].y = vert0.y;
        dataList[offset + 1].x = vert1.x;
        dataList[offset + 1].y = vert1.y;
        dataList[offset + 2].x = vert2.x;
        dataList[offset + 2].y = vert2.y;
        var progressX = 0;
        var progressY = 0;
        progressX = (vert0.x - v0x) / (v1x - v0x);
        progressY = (vert0.y - v0y) / (v1y - v0y);

        _generateUV(progressX, progressY, dataList, offset);

        progressX = (vert1.x - v0x) / (v1x - v0x);
        progressY = (vert1.y - v0y) / (v1y - v0y);

        _generateUV(progressX, progressY, dataList, offset + 1);

        progressX = (vert2.x - v0x) / (v1x - v0x);
        progressY = (vert2.y - v0y) / (v1y - v0y);

        _generateUV(progressX, progressY, dataList, offset + 2);
      }

      function _generateUV(progressX, progressY, data, offset) {
        var uvs = _uvs;
        var px1 = uvs[0] + (uvs[2] - uvs[0]) * progressX;
        var px2 = uvs[4] + (uvs[6] - uvs[4]) * progressX;
        var py1 = uvs[1] + (uvs[3] - uvs[1]) * progressX;
        var py2 = uvs[5] + (uvs[7] - uvs[5]) * progressX;
        var uv = data[offset];
        uv.u = px1 + (px2 - px1) * progressY;
        uv.v = py1 + (py2 - py1) * progressY;
      }

      var radialFilled = {
        useModel: false,
        createData: function createData(sprite) {
          return sprite.requestRenderData();
        },
        updateRenderData: function updateRenderData(sprite) {
          var frame = sprite.spriteFrame;
          dynamicAtlasManager.packToDynamicAtlas(sprite, frame);
          this.updateUVs(sprite);
          var renderData = sprite.renderData;

          if (renderData && frame) {
            if (!renderData.vertDirty) {
              return;
            }

            var dataList = renderData.data;
            var fillStart = sprite.fillStart;
            var fillRange = sprite.fillRange;

            if (fillRange < 0) {
              fillStart += fillRange;
              fillRange = -fillRange;
            }

            while (fillStart >= 1.0) {
              fillStart -= 1.0;
            }

            while (fillStart < 0.0) {
              fillStart += 1.0;
            }

            fillStart *= PI_2;
            fillRange *= PI_2;
            var fillEnd = fillStart + fillRange;

            _calculateVertices(sprite);

            _calculateUVs(frame);

            _calcIntersectedPoints(_vertices[0], _vertices[2], _vertices[1], _vertices[3], _center, fillStart, _intersectPoint_1);

            _calcIntersectedPoints(_vertices[0], _vertices[2], _vertices[1], _vertices[3], _center, fillStart + fillRange, _intersectPoint_2);

            var offset = 0;

            for (var triangleIndex = 0; triangleIndex < 4; ++triangleIndex) {
              var triangle = _triangles[triangleIndex];

              if (!triangle) {
                continue;
              }

              if (fillRange >= PI_2) {
                renderData.dataLength = offset + 3;

                _generateTriangle(dataList, offset, _center, _vertPos[triangle.x], _vertPos[triangle.y]);

                offset += 3;
                continue;
              }

              var startAngle = _getVertAngle(_center, _vertPos[triangle.x]);

              var endAngle = _getVertAngle(_center, _vertPos[triangle.y]);

              if (endAngle < startAngle) {
                endAngle += PI_2;
              }

              startAngle -= PI_2;
              endAngle -= PI_2;

              for (var testIndex = 0; testIndex < 3; ++testIndex) {
                if (startAngle >= fillEnd) ; else if (startAngle >= fillStart) {
                  renderData.dataLength = offset + 3;

                  if (endAngle >= fillEnd) {
                    _generateTriangle(dataList, offset, _center, _vertPos[triangle.x], _intersectPoint_2[triangleIndex]);
                  } else {
                    _generateTriangle(dataList, offset, _center, _vertPos[triangle.x], _vertPos[triangle.y]);
                  }

                  offset += 3;
                } else if (endAngle > fillStart) {
                  if (endAngle <= fillEnd) {
                    renderData.dataLength = offset + 3;

                    _generateTriangle(dataList, offset, _center, _intersectPoint_1[triangleIndex], _vertPos[triangle.y]);

                    offset += 3;
                  } else {
                    renderData.dataLength = offset + 3;

                    _generateTriangle(dataList, offset, _center, _intersectPoint_1[triangleIndex], _intersectPoint_2[triangleIndex]);

                    offset += 3;
                  }
                }

                startAngle += PI_2;
                endAngle += PI_2;
              }
            }

            if (offset === 0) {
              renderData.dataLength = 0;
            }

            renderData.resize(offset, offset);

            renderData.updateRenderData(sprite, frame);
          }
        },
        createQuadIndices: function createQuadIndices(indexCount) {
          QUAD_INDICES$3 = null;
          QUAD_INDICES$3 = new Uint16Array(indexCount);
          var offset = 0;

          for (var i = 0; i < indexCount; i++) {
            QUAD_INDICES$3[offset++] = i;
          }
        },
        fillBuffers: function fillBuffers(comp, renderer) {
          var node = comp.node;
          var renderData = comp.renderData;
          var chunk = renderData.chunk;

          if (node.hasChangedFlags || renderData.vertDirty) {
            this.updateWorldVertexAndUVData(comp, chunk);
            renderData.vertDirty = false;
          }

          this.updateColorLate(comp);
          var bid = chunk.bufferId;
          var vid = chunk.vertexOffset;
          var meshBuffer = chunk.meshBuffer;
          var ib = chunk.meshBuffer.iData;
          var indexOffset = meshBuffer.indexOffset;

          for (var i = 0; i < renderData.indexCount; i++) {
            ib[indexOffset + i] = vid + i;
          }

          meshBuffer.indexOffset += renderData.indexCount;
          meshBuffer.setDirty();
        },
        updateWorldUVData: function updateWorldUVData(sprite, chunk) {
          var renderData = sprite.renderData;
          var stride = renderData.floatStride;
          var dataList = renderData.data;
          var vData = renderData.chunk.vb;

          for (var i = 0; i < dataList.length; i++) {
            var offset = i * stride;
            vData[offset + 3] = dataList[i].u;
            vData[offset + 4] = dataList[i].v;
          }
        },
        updateWorldVertexAndUVData: function updateWorldVertexAndUVData(sprite, chunk) {
          var node = sprite.node;
          node.getWorldMatrix(m$2);
          var renderData = sprite.renderData;
          var stride = renderData.floatStride;
          var dataList = sprite.renderData.data;
          var vData = chunk.vb;
          var vertexCount = renderData.vertexCount;
          var vertexOffset = 0;

          for (var i = 0; i < vertexCount; i++) {
            var vert = dataList[i];
            var x = vert.x;
            var y = vert.y;
            var rhw = m$2.m03 * x + m$2.m07 * y + m$2.m15;
            rhw = rhw ? Math.abs(1 / rhw) : 1;
            vData[vertexOffset + 0] = (m$2.m00 * x + m$2.m04 * y + m$2.m12) * rhw;
            vData[vertexOffset + 1] = (m$2.m01 * x + m$2.m05 * y + m$2.m13) * rhw;
            vData[vertexOffset + 2] = (m$2.m02 * x + m$2.m06 * y + m$2.m14) * rhw;
            vData[vertexOffset + 3] = vert.u;
            vData[vertexOffset + 4] = vert.v;
            vertexOffset += stride;
          }
        },
        updateUVs: function updateUVs(sprite) {
          var renderData = sprite.renderData;
          renderData.vertDirty = true;
          sprite.markForUpdateRenderData();
        },
        updateColorLate: function updateColorLate(sprite) {
          var renderData = sprite.renderData;
          var vData = renderData.chunk.vb;
          var stride = renderData.floatStride;
          var vertexCount = renderData.vertexCount;
          var colorOffset = 5;
          var color = sprite.color;
          var colorR = color.r / 255;
          var colorG = color.g / 255;
          var colorB = color.b / 255;
          var colorA = sprite.node._uiProps.opacity;

          for (var i = 0; i < vertexCount; i++) {
            vData[colorOffset] = colorR;
            vData[colorOffset + 1] = colorG;
            vData[colorOffset + 2] = colorB;
            vData[colorOffset + 3] = colorA;
            colorOffset += stride;
          }
        },
        updateColor: function updateColor(sprite) {}
      };

      var QUAD_INDICES$4 = Uint16Array.from([0, 1, 2, 1, 3, 2]);
      var simple = {
        createData: function createData(sprite) {
          var renderData = sprite.requestRenderData();
          renderData.dataLength = 4;
          renderData.resize(4, 6);
          renderData.vertexRow = 2;
          renderData.vertexCol = 2;
          renderData.chunk.setIndexBuffer(QUAD_INDICES$4);
          return renderData;
        },
        updateRenderData: function updateRenderData(sprite) {
          var frame = sprite.spriteFrame;
          dynamicAtlasManager.packToDynamicAtlas(sprite, frame);
          this.updateUVs(sprite);
          var renderData = sprite.renderData;

          if (renderData && frame) {
            if (renderData.vertDirty) {
              this.updateVertexData(sprite);
            }

            renderData.updateRenderData(sprite, frame);
          }
        },
        updateWorldVerts: function updateWorldVerts(sprite, chunk) {
          var renderData = sprite.renderData;
          var vData = chunk.vb;
          var dataList = renderData.data;
          var node = sprite.node;
          var m = node.worldMatrix;
          var stride = renderData.floatStride;
          var offset = 0;
          var length = dataList.length;

          for (var i = 0; i < length; i++) {
            var curData = dataList[i];
            var x = curData.x;
            var y = curData.y;
            var rhw = m.m03 * x + m.m07 * y + m.m15;
            rhw = rhw ? Math.abs(1 / rhw) : 1;
            offset = i * stride;
            vData[offset + 0] = (m.m00 * x + m.m04 * y + m.m12) * rhw;
            vData[offset + 1] = (m.m01 * x + m.m05 * y + m.m13) * rhw;
            vData[offset + 2] = (m.m02 * x + m.m06 * y + m.m14) * rhw;
          }
        },
        fillBuffers: function fillBuffers(sprite, renderer) {
          if (sprite === null) {
            return;
          }

          var renderData = sprite.renderData;
          var chunk = renderData.chunk;

          if (sprite.node.hasChangedFlags || renderData.vertDirty) {
            this.updateWorldVerts(sprite, chunk);
            renderData.vertDirty = false;
          }

          var bid = chunk.bufferId;
          var vidOrigin = chunk.vertexOffset;
          var meshBuffer = chunk.meshBuffer;
          var ib = chunk.meshBuffer.iData;
          var indexOffset = meshBuffer.indexOffset;

          for (var curRow = 0; curRow < renderData.vertexRow - 1; curRow++) {
            for (var curCol = 0; curCol < renderData.vertexCol - 1; curCol++) {
              var vid = vidOrigin + curRow * renderData.vertexCol + curCol;
              ib[indexOffset++] = vid;
              ib[indexOffset++] = vid + 1;
              ib[indexOffset++] = vid + renderData.vertexCol;
              ib[indexOffset++] = vid + 1;
              ib[indexOffset++] = vid + 1 + renderData.vertexCol;
              ib[indexOffset++] = vid + renderData.vertexCol;
              meshBuffer.indexOffset += 6;
            }
          }
        },
        updateVertexData: function updateVertexData(sprite) {
          var renderData = sprite.renderData;

          if (!renderData) {
            return;
          }

          var uiTrans = sprite.node._uiProps.uiTransformComp;
          var dataList = renderData.data;
          var cw = uiTrans.width;
          var ch = uiTrans.height;
          var appX = uiTrans.anchorX * cw;
          var appY = uiTrans.anchorY * ch;
          var l = 0;
          var b = 0;
          var r = 0;
          var t = 0;

          if (sprite.trim) {
            l = -appX;
            b = -appY;
            r = cw - appX;
            t = ch - appY;
          } else {
            var frame = sprite.spriteFrame;
            var originSize = frame.originalSize;
            var ow = originSize.width;
            var oh = originSize.height;
            var scaleX = cw / ow;
            var scaleY = ch / oh;
            var trimmedBorder = frame.trimmedBorder;
            l = trimmedBorder.x * scaleX - appX;
            b = trimmedBorder.z * scaleY - appY;
            r = cw + trimmedBorder.y * scaleX - appX;
            t = ch + trimmedBorder.w * scaleY - appY;
          }

          dataList[0].x = l;
          dataList[0].y = b;
          dataList[1].x = r;
          dataList[1].y = b;
          dataList[2].x = l;
          dataList[2].y = t;
          dataList[3].x = r;
          dataList[3].y = t;
          renderData.vertDirty = true;
        },
        updateUVs: function updateUVs(sprite) {
          if (!sprite.spriteFrame) return;
          var renderData = sprite.renderData;
          var vData = renderData.chunk.vb;
          var uv = sprite.spriteFrame.uv;
          vData[3] = uv[0];
          vData[4] = uv[1];
          vData[12] = uv[2];
          vData[13] = uv[3];
          vData[21] = uv[4];
          vData[22] = uv[5];
          vData[30] = uv[6];
          vData[31] = uv[7];
        },
        updateColor: function updateColor(sprite) {
          var renderData = sprite.renderData;
          var vData = renderData.chunk.vb;
          var colorOffset = 5;
          var color = sprite.color;
          var colorR = color.r / 255;
          var colorG = color.g / 255;
          var colorB = color.b / 255;
          var colorA = color.a / 255;

          for (var i = 0; i < 4; i++, colorOffset += renderData.floatStride) {
            vData[colorOffset] = colorR;
            vData[colorOffset + 1] = colorG;
            vData[colorOffset + 2] = colorB;
            vData[colorOffset + 3] = colorA;
          }
        }
      };

      var m$3 = new Mat4();
      var tempRenderData = [];

      for (var i$3 = 0; i$3 < 4; i$3++) {
        tempRenderData.push({
          x: 0,
          y: 0,
          z: 0,
          u: 0,
          v: 0,
          color: new Color()
        });
      }

      var sliced = {
        createData: function createData(sprite) {
          var renderData = sprite.requestRenderData();
          renderData.dataLength = 16;
          renderData.resize(16, 54);
          renderData.vertexRow = 4;
          renderData.vertexCol = 4;
          this.QUAD_INDICES = new Uint16Array(54);
          this.createQuadIndices(4, 4);
          renderData.chunk.setIndexBuffer(this.QUAD_INDICES);
          return renderData;
        },
        createQuadIndices: function createQuadIndices(vertexRow, vertexCol) {
          var offset = 0;

          for (var curRow = 0; curRow < vertexRow - 1; curRow++) {
            for (var curCol = 0; curCol < vertexCol - 1; curCol++) {
              var vid = curRow * vertexCol + curCol;
              this.QUAD_INDICES[offset++] = vid;
              this.QUAD_INDICES[offset++] = vid + 1;
              this.QUAD_INDICES[offset++] = vid + vertexCol;
              this.QUAD_INDICES[offset++] = vid + 1;
              this.QUAD_INDICES[offset++] = vid + 1 + vertexCol;
              this.QUAD_INDICES[offset++] = vid + vertexCol;
            }
          }
        },
        updateRenderData: function updateRenderData(sprite) {
          var frame = sprite.spriteFrame;
          dynamicAtlasManager.packToDynamicAtlas(sprite, frame);
          this.updateUVs(sprite);
          var renderData = sprite.renderData;

          if (renderData && frame) {
            var vertDirty = renderData.vertDirty;

            if (vertDirty) {
              this.updateVertexData(sprite);
            }

            renderData.updateRenderData(sprite, frame);
          }
        },
        updateVertexData: function updateVertexData(sprite) {
          var renderData = sprite.renderData;
          var dataList = renderData.data;
          var uiTrans = sprite.node._uiProps.uiTransformComp;
          var width = uiTrans.width;
          var height = uiTrans.height;
          var appX = uiTrans.anchorX * width;
          var appY = uiTrans.anchorY * height;
          var frame = sprite.spriteFrame;
          var leftWidth = frame.insetLeft;
          var rightWidth = frame.insetRight;
          var topHeight = frame.insetTop;
          var bottomHeight = frame.insetBottom;
          var sizableWidth = width - leftWidth - rightWidth;
          var sizableHeight = height - topHeight - bottomHeight;
          var xScale = width / (leftWidth + rightWidth);
          var yScale = height / (topHeight + bottomHeight);
          xScale = Number.isNaN(xScale) || xScale > 1 ? 1 : xScale;
          yScale = Number.isNaN(yScale) || yScale > 1 ? 1 : yScale;
          sizableWidth = sizableWidth < 0 ? 0 : sizableWidth;
          sizableHeight = sizableHeight < 0 ? 0 : sizableHeight;
          tempRenderData[0].x = -appX;
          tempRenderData[0].y = -appY;
          tempRenderData[1].x = leftWidth * xScale - appX;
          tempRenderData[1].y = bottomHeight * yScale - appY;
          tempRenderData[2].x = tempRenderData[1].x + sizableWidth;
          tempRenderData[2].y = tempRenderData[1].y + sizableHeight;
          tempRenderData[3].x = width - appX;
          tempRenderData[3].y = height - appY;

          for (var curRow = 0; curRow < renderData.vertexRow; curRow++) {
            for (var curCol = 0; curCol < renderData.vertexCol; curCol++) {
              var curIndex = curRow * renderData.vertexCol + curCol;

              if (curIndex < renderData.dataLength && curRow < tempRenderData.length && curCol < tempRenderData.length) {
                dataList[curIndex].x = tempRenderData[curCol].x;
                dataList[curIndex].y = tempRenderData[curRow].y;
              }
            }
          }
        },
        fillBuffers: function fillBuffers(sprite, renderer) {
          var renderData = sprite.renderData;
          var chunk = renderData.chunk;

          if (sprite.node.hasChangedFlags || renderData.vertDirty) {
            this.updateWorldVertexData(sprite, chunk);
            renderData.vertDirty = false;
          }

          var bid = chunk.bufferId;
          var vid = chunk.vertexOffset;
          var meshBuffer = chunk.meshBuffer;
          var ib = chunk.meshBuffer.iData;
          var indexOffset = meshBuffer.indexOffset;

          for (var r = 0; r < 3; ++r) {
            for (var c = 0; c < 3; ++c) {
              var start = vid + r * 4 + c;
              ib[indexOffset++] = start;
              ib[indexOffset++] = start + 1;
              ib[indexOffset++] = start + 4;
              ib[indexOffset++] = start + 1;
              ib[indexOffset++] = start + 5;
              ib[indexOffset++] = start + 4;
            }
          }

          meshBuffer.indexOffset = indexOffset;
        },
        updateWorldVertexData: function updateWorldVertexData(sprite, chunk) {
          var node = sprite.node;
          node.getWorldMatrix(m$3);
          var renderData = sprite.renderData;
          var stride = renderData.floatStride;
          var dataList = renderData.data;
          var vData = chunk.vb;
          var offset = 0;

          for (var row = 0; row < 4; ++row) {
            var rowD = dataList[row * 4];

            for (var col = 0; col < 4; ++col) {
              var colD = dataList[col];
              var x = colD.x;
              var y = rowD.y;
              var rhw = m$3.m03 * x + m$3.m07 * y + m$3.m15;
              rhw = rhw ? Math.abs(1 / rhw) : 1;
              offset = (row * 4 + col) * stride;
              vData[offset + 0] = (m$3.m00 * x + m$3.m04 * y + m$3.m12) * rhw;
              vData[offset + 1] = (m$3.m01 * x + m$3.m05 * y + m$3.m13) * rhw;
              vData[offset + 2] = (m$3.m02 * x + m$3.m06 * y + m$3.m14) * rhw;
            }
          }
        },
        updateUVs: function updateUVs(sprite) {
          if (!sprite.spriteFrame) return;
          var renderData = sprite.renderData;
          var vData = renderData.chunk.vb;
          var stride = renderData.floatStride;
          var uv = sprite.spriteFrame.uvSliced;
          var uvOffset = 3;

          for (var _i = 0; _i < 16; _i++) {
            vData[uvOffset] = uv[_i].u;
            vData[uvOffset + 1] = uv[_i].v;
            uvOffset += stride;
          }
        },
        updateColor: function updateColor(sprite) {
          var renderData = sprite.renderData;
          var vData = renderData.chunk.vb;
          var stride = renderData.floatStride;
          var colorOffset = 5;
          var color = sprite.color;
          var colorR = color.r / 255;
          var colorG = color.g / 255;
          var colorB = color.b / 255;
          var colorA = sprite.node._uiProps.opacity;

          for (var _i2 = 0; _i2 < 16; _i2++) {
            vData[colorOffset] = colorR;
            vData[colorOffset + 1] = colorG;
            vData[colorOffset + 2] = colorB;
            vData[colorOffset + 3] = colorA;
            colorOffset += stride;
          }
        }
      };

      var m$4 = new Mat4();
      var origin;
      var leftInner;
      var rightInner;
      var rightOuter;
      var bottomInner;
      var topInner;
      var topOuter;
      var tempRenderDataLength = 0;
      var tempRenderData$1 = [];
      var QUAD_INDICES$5;

      function has9SlicedOffsetVertexCount(spriteFrame) {
        if (spriteFrame) {
          if (spriteFrame.insetTop > 0 || spriteFrame.insetBottom > 0 || spriteFrame.insetLeft > 0 || spriteFrame.insetRight > 0) {
            return 2;
          }
        }

        return 0;
      }

      var tiled = {
        createData: function createData(sprite) {
          return sprite.requestRenderData();
        },
        updateRenderData: function updateRenderData(sprite) {
          var renderData = sprite.renderData;
          var frame = sprite.spriteFrame;

          if (!frame || !renderData) {
            return;
          }

          if (!renderData.vertDirty) {
            return;
          }

          var uiTrans = sprite.node._uiProps.uiTransformComp;
          var contentWidth = Math.abs(uiTrans.width);
          var contentHeight = Math.abs(uiTrans.height);
          var rect = frame.getRect();
          var leftWidth = frame.insetLeft;
          var rightWidth = frame.insetRight;
          var centerWidth = rect.width - leftWidth - rightWidth;
          var topHeight = frame.insetTop;
          var bottomHeight = frame.insetBottom;
          var centerHeight = rect.height - topHeight - bottomHeight;
          var sizableWidth = contentWidth - leftWidth - rightWidth;
          var sizableHeight = contentHeight - topHeight - bottomHeight;
          sizableWidth = sizableWidth > 0 ? sizableWidth : 0;
          sizableHeight = sizableHeight > 0 ? sizableHeight : 0;
          var hRepeat = centerWidth === 0 ? sizableWidth : sizableWidth / centerWidth;
          var vRepeat = centerHeight === 0 ? sizableHeight : sizableHeight / centerHeight;
          var offsetVertexCount = has9SlicedOffsetVertexCount(frame);
          var row = Math.ceil(vRepeat + offsetVertexCount);
          var col = Math.ceil(hRepeat + offsetVertexCount);
          renderData.dataLength = row * 2 * (col * 2);
          this.updateVerts(sprite, sizableWidth, sizableHeight, row, col);

          if (renderData.vertexCount !== row * col * 4) {
            sprite.renderEntity.colorDirty = true;
          }

          renderData.resize(row * col * 4, row * col * 6);

          renderData.updateRenderData(sprite, frame);
        },
        createQuadIndices: function createQuadIndices(indexCount) {
          if (indexCount % 6 !== 0) {
            console.error('illegal index count!');
            return;
          }

          var quadCount = indexCount / 6;
          QUAD_INDICES$5 = null;
          QUAD_INDICES$5 = new Uint16Array(indexCount);
          var offset = 0;

          for (var i = 0; i < quadCount; i++) {
            QUAD_INDICES$5[offset++] = 0 + i * 4;
            QUAD_INDICES$5[offset++] = 1 + i * 4;
            QUAD_INDICES$5[offset++] = 2 + i * 4;
            QUAD_INDICES$5[offset++] = 1 + i * 4;
            QUAD_INDICES$5[offset++] = 3 + i * 4;
            QUAD_INDICES$5[offset++] = 2 + i * 4;
          }
        },
        updateUVs: function updateUVs(sprite) {
          var renderData = sprite.renderData;
          renderData.vertDirty = true;
          sprite.markForUpdateRenderData();
        },
        fillBuffers: function fillBuffers(sprite, renderer) {
          var node = sprite.node;
          var renderData = sprite.renderData;
          var chunk = renderData.chunk;

          if (node.hasChangedFlags || renderData.vertDirty) {
            this.updateWorldVertexAndUVData(sprite, chunk);
            renderData.vertDirty = false;
          }

          this.updateColorLate(sprite);
          var bid = chunk.bufferId;
          var vid = chunk.vertexOffset;
          var meshBuffer = chunk.meshBuffer;
          var ib = chunk.meshBuffer.iData;
          var indexOffset = meshBuffer.indexOffset;

          for (var i = 0; i < renderData.indexCount; i += 6) {
            ib[indexOffset++] = vid;
            ib[indexOffset++] = vid + 1;
            ib[indexOffset++] = vid + 2;
            ib[indexOffset++] = vid + 1;
            ib[indexOffset++] = vid + 3;
            ib[indexOffset++] = vid + 2;
            vid += 4;
            meshBuffer.indexOffset += 6;
          }

          meshBuffer.setDirty();
        },
        updateWorldUVData: function updateWorldUVData(sprite) {
          var renderData = sprite.renderData;
          var stride = renderData.floatStride;
          var dataList = renderData.data;
          var vData = renderData.chunk.vb;

          for (var i = 0; i < dataList.length; i++) {
            var offset = i * stride;
            vData[offset + 3] = dataList[i].u;
            vData[offset + 4] = dataList[i].v;
          }
        },
        updateWorldVertexAndUVData: function updateWorldVertexAndUVData(sprite, chunk) {
          var node = sprite.node;
          node.getWorldMatrix(m$4);
          var renderData = sprite.renderData;
          var stride = renderData.floatStride;
          var dataList = renderData.data;
          var vData = chunk.vb;
          var length = dataList.length;

          for (var i = 0; i < length; i++) {
            var x = dataList[i].x;
            var y = dataList[i].y;
            var z = dataList[i].z;
            var rhw = m$4.m03 * x + m$4.m07 * y + m$4.m11 * z + m$4.m15;
            rhw = rhw ? Math.abs(1 / rhw) : 1;
            var offset = i * stride;
            vData[offset] = (m$4.m00 * x + m$4.m04 * y + m$4.m08 * z + m$4.m12) * rhw;
            vData[offset + 1] = (m$4.m01 * x + m$4.m05 * y + m$4.m09 * z + m$4.m13) * rhw;
            vData[offset + 2] = (m$4.m02 * x + m$4.m06 * y + m$4.m10 * z + m$4.m14) * rhw;
          }

          this.updateWorldUVData(sprite);
        },
        updateVerts: function updateVerts(sprite, sizableWidth, sizableHeight, row, col) {
          var uiTrans = sprite.node._uiProps.uiTransformComp;
          var renderData = sprite.renderData;
          var dataList = renderData.data;
          var frame = sprite.spriteFrame;
          var rect = frame.rect;
          var contentWidth = Math.abs(uiTrans.width);
          var contentHeight = Math.abs(uiTrans.height);
          var appx = uiTrans.anchorX * contentWidth;
          var appy = uiTrans.anchorY * contentHeight;
          var leftWidth = frame.insetLeft;
          var rightWidth = frame.insetRight;
          var centerWidth = rect.width - leftWidth - rightWidth;
          var topHeight = frame.insetTop;
          var bottomHeight = frame.insetBottom;
          var centerHeight = rect.height - topHeight - bottomHeight;
          var xScale = uiTrans.width / (leftWidth + rightWidth) > 1 ? 1 : uiTrans.width / (leftWidth + rightWidth);
          var yScale = uiTrans.height / (topHeight + bottomHeight) > 1 ? 1 : uiTrans.height / (topHeight + bottomHeight);
          var offsetWidth = 0;
          var offsetHeight = 0;

          if (centerWidth > 0) {
            offsetWidth = Math.floor(sizableWidth * 1000) / 1000 % centerWidth === 0 ? centerWidth : sizableWidth % centerWidth;
          } else {
            offsetWidth = sizableWidth;
          }

          if (centerHeight > 0) {
            offsetHeight = Math.floor(sizableHeight * 1000) / 1000 % centerHeight === 0 ? centerHeight : sizableHeight % centerHeight;
          } else {
            offsetHeight = sizableHeight;
          }

          tempRenderDataLength = Math.max(row + 1, col + 1);

          for (var i = 0; i < tempRenderDataLength; i++) {
            tempRenderData$1.push({
              x: 0,
              y: 0,
              z: 0,
              u: 0,
              v: 0,
              color: new Color()
            });
          }

          var offsetVertexCount = has9SlicedOffsetVertexCount(frame);

          if (offsetVertexCount === 0) {
            for (var _i = 0; _i < tempRenderDataLength; _i++) {
              if (_i >= col) {
                tempRenderData$1[_i].x = contentWidth - appx;
              } else {
                tempRenderData$1[_i].x = -appx + _i * centerWidth;
              }

              if (_i >= row) {
                tempRenderData$1[_i].y = contentHeight - appy;
              } else {
                tempRenderData$1[_i].y = -appy + _i * centerHeight;
              }
            }
          } else {
            for (var _i2 = 0; _i2 < tempRenderDataLength; _i2++) {
              if (_i2 === 0) {
                tempRenderData$1[_i2].x = -appx;
              } else if (_i2 === 1) {
                tempRenderData$1[_i2].x = -appx + leftWidth * xScale;
              } else if (_i2 > 1 && _i2 < col - 1) {
                if (centerWidth > 0) {
                  tempRenderData$1[_i2].x = -appx + leftWidth * xScale + centerWidth * (_i2 - 1);
                } else {
                  tempRenderData$1[_i2].x = leftWidth + sizableWidth - appx;
                }
              } else if (_i2 === col - 1) {
                tempRenderData$1[_i2].x = -appx + leftWidth * xScale + offsetWidth + centerWidth * (_i2 - 2);
              } else if (_i2 >= col) {
                tempRenderData$1[_i2].x = Math.min(leftWidth + sizableWidth + rightWidth, contentWidth) - appx;
              }

              if (_i2 === 0) {
                tempRenderData$1[_i2].y = -appy;
              } else if (_i2 === 1) {
                tempRenderData$1[_i2].y = -appy + bottomHeight * yScale;
              } else if (_i2 > 1 && _i2 < row - 1) {
                if (centerHeight > 0) {
                  tempRenderData$1[_i2].y = -appy + bottomHeight * yScale + centerHeight * (_i2 - 1);
                } else {
                  tempRenderData$1[_i2].y = bottomHeight + sizableHeight - appy;
                }
              } else if (_i2 === row - 1) {
                tempRenderData$1[_i2].y = -appy + bottomHeight * yScale + offsetHeight + centerHeight * (_i2 - 2);
              } else if (_i2 >= row) {
                tempRenderData$1[_i2].y = Math.min(bottomHeight + sizableHeight + topHeight, contentHeight) - appy;
              }
            }
          }

          var x = 0;
          var x1 = 0;
          var y = 0;
          var y1 = 0;

          for (var yIndex = 0; yIndex < row; ++yIndex) {
            y = tempRenderData$1[yIndex].y;
            y1 = tempRenderData$1[yIndex + 1].y;

            for (var xIndex = 0; xIndex < col; ++xIndex) {
              x = tempRenderData$1[xIndex].x;
              x1 = tempRenderData$1[xIndex + 1].x;
              var curIndex = 4 * (yIndex * col + xIndex);
              dataList[curIndex].x = x;
              dataList[curIndex].y = y;
              dataList[curIndex + 1].x = x1;
              dataList[curIndex + 1].y = y;
              dataList[curIndex + 2].x = x;
              dataList[curIndex + 2].y = y1;
              dataList[curIndex + 3].x = x1;
              dataList[curIndex + 3].y = y1;
            }
          }

          var rotated = frame.rotated;
          var uv = frame.uv;
          var uvSliced = frame.uvSliced;
          origin = uvSliced[0];
          leftInner = uvSliced[1];
          rightInner = uvSliced[2];
          rightOuter = uvSliced[3];
          bottomInner = uvSliced[4];
          topInner = uvSliced[8];
          topOuter = uvSliced[12];
          var coefU = 0;
          var coefV = 0;
          var hRepeat = centerWidth === 0 ? sizableWidth : sizableWidth / centerWidth;
          var vRepeat = centerHeight === 0 ? sizableHeight : sizableHeight / centerHeight;
          var tempXVerts = [];
          var tempYVerts = [];

          for (var yIndexUV = 0; yIndexUV < row; ++yIndexUV) {
            if (sizableHeight > centerHeight) {
              var curYRectCount = offsetVertexCount > 0 ? yIndexUV : yIndexUV + 1;

              if (sizableHeight >= curYRectCount * centerHeight) {
                coefV = 1;
              } else {
                coefV = vRepeat % 1;
              }
            } else {
              coefV = vRepeat;
            }

            for (var xIndexUV = 0; xIndexUV < col; ++xIndexUV) {
              if (sizableWidth > centerWidth) {
                var curXRectCount = offsetVertexCount > 0 ? xIndexUV : xIndexUV + 1;

                if (sizableWidth >= curXRectCount * centerWidth) {
                  coefU = 1;
                } else {
                  coefU = hRepeat % 1;
                }
              } else {
                coefU = hRepeat;
              }

              if (rotated) {
                if (offsetVertexCount === 0) {
                  tempXVerts[0] = bottomInner.u;
                  tempXVerts[1] = bottomInner.u;
                  tempXVerts[2] = bottomInner.u + (topInner.u - bottomInner.u) * coefV;
                  tempYVerts[0] = leftInner.v;
                  tempYVerts[1] = leftInner.v + (rightInner.v - leftInner.v) * coefU;
                  tempYVerts[2] = leftInner.v;
                } else {
                  if (yIndexUV === 0) {
                    tempXVerts[0] = origin.u;
                    tempXVerts[1] = origin.u;
                    tempXVerts[2] = bottomInner.u;
                  } else if (yIndexUV < row - 1) {
                    tempXVerts[0] = bottomInner.u;
                    tempXVerts[1] = bottomInner.u;
                    tempXVerts[2] = bottomInner.u + (topInner.u - bottomInner.u) * coefV;
                  } else if (yIndexUV === row - 1) {
                    tempXVerts[0] = topInner.u;
                    tempXVerts[1] = topInner.u;
                    tempXVerts[2] = topOuter.u;
                  }

                  if (xIndexUV === 0) {
                    tempYVerts[0] = origin.v;
                    tempYVerts[1] = leftInner.v;
                    tempYVerts[2] = origin.v;
                  } else if (xIndexUV < col - 1) {
                    tempYVerts[0] = leftInner.v;
                    tempYVerts[1] = leftInner.v + (rightInner.v - leftInner.v) * coefU;
                    tempYVerts[2] = leftInner.v;
                  } else if (xIndexUV === col - 1) {
                    tempYVerts[0] = rightInner.v;
                    tempYVerts[1] = rightOuter.v;
                    tempYVerts[2] = rightInner.v;
                  }
                }

                tempXVerts[3] = tempXVerts[2];
                tempYVerts[3] = tempYVerts[1];
              } else {
                if (offsetVertexCount === 0) {
                  tempXVerts[0] = leftInner.u;
                  tempXVerts[1] = leftInner.u + (rightInner.u - leftInner.u) * coefU;
                  tempXVerts[2] = leftInner.u;
                  tempYVerts[0] = bottomInner.v;
                  tempYVerts[1] = bottomInner.v;
                  tempYVerts[2] = bottomInner.v + (topInner.v - bottomInner.v) * coefV;
                } else {
                  if (xIndexUV === 0) {
                    tempXVerts[0] = origin.u;
                    tempXVerts[1] = leftInner.u;
                    tempXVerts[2] = origin.u;
                  } else if (xIndexUV < col - 1) {
                    tempXVerts[0] = leftInner.u;
                    tempXVerts[1] = leftInner.u + (rightInner.u - leftInner.u) * coefU;
                    tempXVerts[2] = leftInner.u;
                  } else if (xIndexUV === col - 1) {
                    tempXVerts[0] = rightInner.u;
                    tempXVerts[1] = rightOuter.u;
                    tempXVerts[2] = rightInner.u;
                  }

                  if (yIndexUV === 0) {
                    tempYVerts[0] = origin.v;
                    tempYVerts[1] = origin.v;
                    tempYVerts[2] = bottomInner.v;
                  } else if (yIndexUV < row - 1) {
                    tempYVerts[0] = bottomInner.v;
                    tempYVerts[1] = bottomInner.v;
                    tempYVerts[2] = bottomInner.v + (topInner.v - bottomInner.v) * coefV;
                  } else if (yIndexUV === row - 1) {
                    tempYVerts[0] = topInner.v;
                    tempYVerts[1] = topInner.v;
                    tempYVerts[2] = topOuter.v;
                  }
                }

                tempXVerts[3] = tempXVerts[1];
                tempYVerts[3] = tempYVerts[2];
              }

              var _curIndex = 4 * (yIndexUV * col + xIndexUV);

              dataList[_curIndex].u = tempXVerts[0];
              dataList[_curIndex].v = tempYVerts[0];
              dataList[_curIndex + 1].u = tempXVerts[1];
              dataList[_curIndex + 1].v = tempYVerts[1];
              dataList[_curIndex + 2].u = tempXVerts[2];
              dataList[_curIndex + 2].v = tempYVerts[2];
              dataList[_curIndex + 3].u = tempXVerts[3];
              dataList[_curIndex + 3].v = tempYVerts[3];
            }
          }
        },
        updateColorLate: function updateColorLate(sprite) {
          var renderData = sprite.renderData;
          var vData = renderData.chunk.vb;
          var stride = renderData.floatStride;
          var vertexCount = renderData.vertexCount;
          var colorOffset = 5;
          var color = sprite.color;
          var colorR = color.r / 255;
          var colorG = color.g / 255;
          var colorB = color.b / 255;
          var colorA = sprite.node._uiProps.opacity;

          for (var i = 0; i < vertexCount; i++) {
            vData[colorOffset] = colorR;
            vData[colorOffset + 1] = colorG;
            vData[colorOffset + 2] = colorB;
            vData[colorOffset + 3] = colorA;
            colorOffset += stride;
          }
        },
        updateColor: function updateColor(sprite) {}
      };

      var SpriteType$1 = Sprite.Type;
      var FillType$2 = Sprite.FillType;
      var spriteAssembler = exports('spriteAssembler', {
        getAssembler: function getAssembler(spriteComp) {
          var util = simple;
          var comp = spriteComp;

          switch (comp.type) {
            case SpriteType$1.SLICED:
              util = sliced;
              break;

            case SpriteType$1.TILED:
              util = tiled;
              break;

            case SpriteType$1.FILLED:
              if (comp.fillType === FillType$2.RADIAL) {
                util = radialFilled;
              } else {
                util = barFilled;
              }

              break;
          }

          return util;
        }
      });
      Sprite.Assembler = spriteAssembler;

      var mouseEvents = [Input.EventType.MOUSE_DOWN, Input.EventType.MOUSE_MOVE, Input.EventType.MOUSE_UP, Input.EventType.MOUSE_WHEEL];
      var touchEvents = [Input.EventType.TOUCH_START, Input.EventType.TOUCH_MOVE, Input.EventType.TOUCH_END, Input.EventType.TOUCH_CANCEL];

      var PointerEventDispatcher = function () {
        function PointerEventDispatcher() {
          this.priority = EventDispatcherPriority.UI;
          this._isListDirty = false;
          this._inDispatchCount = 0;
          this._pointerEventProcessorList = [];
          this._processorListToAdd = [];
          this._processorListToRemove = [];

          input._registerEventDispatcher(this);

          NodeEventProcessor.callbacksInvoker.on(DispatcherEventType.ADD_POINTER_EVENT_PROCESSOR, this.addPointerEventProcessor, this);
          NodeEventProcessor.callbacksInvoker.on(DispatcherEventType.REMOVE_POINTER_EVENT_PROCESSOR, this.removePointerEventProcessor, this);
          NodeEventProcessor.callbacksInvoker.on(DispatcherEventType.MARK_LIST_DIRTY, this._markListDirty, this);
        }

        var _proto = PointerEventDispatcher.prototype;

        _proto.dispatchEvent = function dispatchEvent(event) {
          var eventType = event.type;

          if (touchEvents.includes(eventType)) {
            return this.dispatchEventTouch(event);
          } else if (mouseEvents.includes(eventType)) {
            return this.dispatchEventMouse(event);
          }

          return true;
        };

        _proto.addPointerEventProcessor = function addPointerEventProcessor(pointerEventProcessor) {
          if (this._inDispatchCount === 0) {
            if (!this._pointerEventProcessorList.includes(pointerEventProcessor)) {
              this._pointerEventProcessorList.push(pointerEventProcessor);

              this._isListDirty = true;
            }
          } else if (!this._processorListToAdd.includes(pointerEventProcessor)) {
            this._processorListToAdd.push(pointerEventProcessor);
          }

          remove(this._processorListToRemove, pointerEventProcessor);
        };

        _proto.removePointerEventProcessor = function removePointerEventProcessor(pointerEventProcessor) {
          if (this._inDispatchCount === 0) {
            remove(this._pointerEventProcessorList, pointerEventProcessor);
            this._isListDirty = true;
          } else if (!this._processorListToRemove.includes(pointerEventProcessor)) {
            this._processorListToRemove.push(pointerEventProcessor);
          }

          remove(this._processorListToAdd, pointerEventProcessor);
        };

        _proto.dispatchEventMouse = function dispatchEventMouse(eventMouse) {
          this._inDispatchCount++;

          this._sortPointerEventProcessorList();

          var pointerEventProcessorList = this._pointerEventProcessorList;
          var length = pointerEventProcessorList.length;
          var dispatchToNextEventDispatcher = true;

          for (var i = 0; i < length; ++i) {
            var pointerEventProcessor = pointerEventProcessorList[i];

            if (pointerEventProcessor.isEnabled && pointerEventProcessor.shouldHandleEventMouse && pointerEventProcessor._handleEventMouse(eventMouse)) {
              dispatchToNextEventDispatcher = false;

              if (!eventMouse.preventSwallow) {
                break;
              } else {
                eventMouse.preventSwallow = false;
              }
            }
          }

          if (--this._inDispatchCount <= 0) {
            this._updatePointerEventProcessorList();
          }

          return dispatchToNextEventDispatcher;
        };

        _proto.dispatchEventTouch = function dispatchEventTouch(eventTouch) {
          this._inDispatchCount++;

          this._sortPointerEventProcessorList();

          var pointerEventProcessorList = this._pointerEventProcessorList;
          var length = pointerEventProcessorList.length;
          var touch = eventTouch.touch;
          var dispatchToNextEventDispatcher = true;

          for (var i = 0; i < length; ++i) {
            var pointerEventProcessor = pointerEventProcessorList[i];

            if (pointerEventProcessor.isEnabled && pointerEventProcessor.shouldHandleEventTouch) {
              if (eventTouch.type === InputEventType.TOUCH_START) {
                if (pointerEventProcessor._handleEventTouch(eventTouch)) {
                  pointerEventProcessor.claimedTouchIdList.push(touch.getID());
                  dispatchToNextEventDispatcher = false;

                  if (!eventTouch.preventSwallow) {
                    break;
                  } else {
                    eventTouch.preventSwallow = false;
                  }
                }
              } else if (pointerEventProcessor.claimedTouchIdList.length > 0) {
                var index = pointerEventProcessor.claimedTouchIdList.indexOf(touch.getID());

                if (index !== -1) {
                  pointerEventProcessor._handleEventTouch(eventTouch);

                  if (eventTouch.type === InputEventType.TOUCH_END || eventTouch.type === InputEventType.TOUCH_CANCEL) {
                    removeAt(pointerEventProcessor.claimedTouchIdList, index);
                  }

                  dispatchToNextEventDispatcher = false;

                  if (!eventTouch.preventSwallow) {
                    break;
                  } else {
                    eventTouch.preventSwallow = false;
                  }
                }
              }
            }
          }

          if (--this._inDispatchCount <= 0) {
            this._updatePointerEventProcessorList();
          }

          return dispatchToNextEventDispatcher;
        };

        _proto._updatePointerEventProcessorList = function _updatePointerEventProcessorList() {
          var listToAdd = this._processorListToAdd;
          var addLength = listToAdd.length;

          for (var i = 0; i < addLength; ++i) {
            this.addPointerEventProcessor(listToAdd[i]);
          }

          listToAdd.length = 0;
          var listToRemove = this._processorListToRemove;
          var removeLength = listToRemove.length;

          for (var _i = 0; _i < removeLength; ++_i) {
            this.removePointerEventProcessor(listToRemove[_i]);
          }

          listToRemove.length = 0;
        };

        _proto._sortPointerEventProcessorList = function _sortPointerEventProcessorList() {
          if (!this._isListDirty) {
            return;
          }

          var pointerEventProcessorList = this._pointerEventProcessorList;
          var length = pointerEventProcessorList.length;

          for (var i = 0; i < length; ++i) {
            var pointerEventProcessor = pointerEventProcessorList[i];
            var node = pointerEventProcessor.node;

            if (node._uiProps) {
              var trans = node._uiProps.uiTransformComp;
              pointerEventProcessor.cachedCameraPriority = trans.cameraPriority;
            }
          }

          pointerEventProcessorList.sort(this._sortByPriority);
          this._isListDirty = false;
        };

        _proto._sortByPriority = function _sortByPriority(p1, p2) {
          var node1 = p1.node;
          var node2 = p2.node;

          if (!p2 || !node2 || !node2.activeInHierarchy || !node2._uiProps.uiTransformComp) {
            return -1;
          } else if (!p1 || !node1 || !node1.activeInHierarchy || !node1._uiProps.uiTransformComp) {
            return 1;
          }

          if (p1.cachedCameraPriority !== p2.cachedCameraPriority) {
            return p2.cachedCameraPriority - p1.cachedCameraPriority;
          }

          var n1 = node1;
          var n2 = node2;
          var ex = false;

          while (((_n1$parent = n1.parent) === null || _n1$parent === void 0 ? void 0 : _n1$parent._id) !== ((_n2$parent = n2.parent) === null || _n2$parent === void 0 ? void 0 : _n2$parent._id)) {
            var _n1$parent, _n2$parent, _n, _n$parent, _n2, _n2$parent2;

            n1 = ((_n = n1) === null || _n === void 0 ? void 0 : (_n$parent = _n.parent) === null || _n$parent === void 0 ? void 0 : _n$parent.parent) === null ? (ex = true) && node2 : n1 && n1.parent;
            n2 = ((_n2 = n2) === null || _n2 === void 0 ? void 0 : (_n2$parent2 = _n2.parent) === null || _n2$parent2 === void 0 ? void 0 : _n2$parent2.parent) === null ? (ex = true) && node1 : n2 && n2.parent;
          }

          if (n1._id === n2._id) {
            if (n1._id === node2._id) {
              return -1;
            }

            if (n1._id === node1._id) {
              return 1;
            }
          }

          var priority1 = n1 ? n1.getSiblingIndex() : 0;
          var priority2 = n2 ? n2.getSiblingIndex() : 0;
          return ex ? priority1 - priority2 : priority2 - priority1;
        };

        _proto._markListDirty = function _markListDirty() {
          this._isListDirty = true;
        };

        return PointerEventDispatcher;
      }();

      var pointerEventDispatcher = new PointerEventDispatcher();

      var _dsInfo$2 = new DescriptorSetInfo(null);

      var m4_1$2 = new Mat4();
      var Batcher2D = function () {
        function Batcher2D(_root) {
          var _this = this;

          this.device = void 0;
          this._screens = [];
          this._staticVBBuffer = null;
          this._bufferAccessors = new Map();
          this._drawBatchPool = void 0;
          this._batches = void 0;
          this._currBID = -1;
          this._indexStart = 0;
          this._emptyMaterial = new Material();
          this._currRenderData = null;
          this._currMaterial = this._emptyMaterial;
          this._currTexture = null;
          this._currSampler = null;
          this._currStaticRoot = null;
          this._currComponent = null;
          this._currTransform = null;
          this._currTextureHash = 0;
          this._currSamplerHash = 0;
          this._currLayer = 0;
          this._currDepthStencilStateStage = null;
          this._currIsStatic = false;
          this._currHash = 0;
          this._currIsMiddleware = false;
          this._middlewareEnableBatch = false;
          this._middlewareBuffer = null;
          this._middlewareIndexStart = 0;
          this._middlewareIndexCount = 0;
          this._pOpacity = 1;
          this._opacityDirty = 0;
          this._descriptorSetCache = new DescriptorSetCache();
          this._meshDataArray = [];
          this._maskClearModel = null;
          this._maskClearMtl = null;
          this._maskModelMesh = null;
          this._root = _root;
          this.device = _root.device;
          this._batches = new CachedArray(64);
          this._drawBatchPool = new Pool$1(function () {
            return new DrawBatch2D();
          }, 128, function (obj) {
            return obj.destroy(_this);
          });
        }

        var _proto = Batcher2D.prototype;

        _proto.initialize = function initialize() {
          return true;
        };

        _proto.destroy = function destroy() {
          for (var i = 0; i < this._batches.length; i++) {
            if (this._batches.array[i]) {
              this._batches.array[i].destroy(this);
            }
          }

          this._batches.destroy();

          this._bufferAccessors.forEach(function (accessor) {
            accessor.destroy();
          });

          this._bufferAccessors.clear();

          if (this._drawBatchPool) {
            this._drawBatchPool.destroy();
          }

          this._descriptorSetCache.destroy();

          StencilManager.sharedManager.destroy();

          if (this._maskClearModel && this._maskModelMesh) {
            legacyCC.director.root.destroyModel(this._maskClearModel);

            this._maskModelMesh.destroy();
          }

          if (this._maskClearMtl) {
            this._maskClearMtl.destroy();
          }
        };

        _proto.syncRootNodesToNative = function syncRootNodesToNative() {
        };

        _proto.addScreen = function addScreen(comp) {
          this._screens.push(comp);

          this._screens.sort(this._screenSort);
        };

        _proto.removeScreen = function removeScreen(comp) {
          var idx = this._screens.indexOf(comp);

          if (idx === -1) {
            return;
          }

          this._screens.splice(idx, 1);
        };

        _proto.sortScreens = function sortScreens() {
          this._screens.sort(this._screenSort);
        };

        _proto.getFirstRenderCamera = function getFirstRenderCamera(node) {
          if (node.scene && node.scene.renderScene) {
            var cameras = node.scene.renderScene.cameras;

            for (var i = 0; i < cameras.length; i++) {
              var camera = cameras[i];

              if (camera.visibility & node.layer) {
                return camera;
              }
            }
          }

          return null;
        };

        _proto.update = function update() {

          var screens = this._screens;
          var offset = 0;

          for (var i = 0; i < screens.length; ++i) {
            var screen = screens[i];

            var _scene = screen._getRenderScene();

            if (!screen.enabledInHierarchy || !_scene) {
              continue;
            }

            this._opacityDirty = 0;
            this._pOpacity = 1;
            this.walk(screen.node);
            this.autoMergeBatches(this._currComponent);
            this.resetRenderStates();
            var batchPriority = 0;

            if (this._batches.length > offset) {
              for (; offset < this._batches.length; ++offset) {
                var batch = this._batches.array[offset];

                if (batch.model) {
                  var subModels = batch.model.subModels;

                  for (var j = 0; j < subModels.length; j++) {
                    subModels[j].priority = batchPriority++;
                  }
                } else {
                  batch.descriptorSet = this._descriptorSetCache.getDescriptorSet(batch);
                }

                _scene.addBatch(batch);
              }
            }
          }
        };

        _proto.uploadBuffers = function uploadBuffers() {
          if (this._batches.length > 0) {
            this._meshDataArray.forEach(function (rd) {
              rd.uploadBuffers();
            });

            this._bufferAccessors.forEach(function (accessor) {
              accessor.uploadBuffers();
              accessor.reset();
            });

            this._descriptorSetCache.update();
          }
        };

        _proto.reset = function reset() {
          {
            for (var i = 0; i < this._batches.length; ++i) {
              var batch = this._batches.array[i];

              if (batch.isStatic) {
                continue;
              }

              batch.clear();

              this._drawBatchPool.free(batch);
            }

            this._bufferAccessors.forEach(function (accessor) {
              accessor.reset();
            });

            this._meshDataArray.forEach(function (rd) {
              rd.freeIAPool();
            });

            this._meshDataArray.length = 0;
            this._staticVBBuffer = null;
            this._currBID = -1;
            this._indexStart = 0;
            this._currHash = 0;
            this._currLayer = 0;
            this._currRenderData = null;
            this._currMaterial = this._emptyMaterial;
            this._currTexture = null;
            this._currSampler = null;
            this._currComponent = null;
            this._currTransform = null;

            this._batches.clear();

            StencilManager.sharedManager.reset();
          }
        };

        _proto.switchBufferAccessor = function switchBufferAccessor(attributes) {
          if (attributes === void 0) {
            attributes = vfmtPosUvColor;
          }

          var strideBytes = attributes === vfmtPosUvColor ? 36 : getAttributeStride(attributes);

          if (!this._staticVBBuffer || this._staticVBBuffer.vertexFormatBytes !== strideBytes) {
            var accessor = this._bufferAccessors.get(strideBytes);

            if (!accessor) {
              accessor = new StaticVBAccessor(this.device, attributes);

              this._bufferAccessors.set(strideBytes, accessor);
            }

            this._staticVBBuffer = accessor;
            this._currBID = -1;
          }

          return this._staticVBBuffer;
        };

        _proto.registerBufferAccessor = function registerBufferAccessor(key, accessor) {
          this._bufferAccessors.set(key, accessor);
        };

        _proto.updateBuffer = function updateBuffer(attributes, bid) {
          var accessor = this.switchBufferAccessor(attributes);

          if (this._currBID !== bid) {
            this._currBID = bid;
            this._indexStart = accessor.getMeshBuffer(bid).indexOffset;
          }
        };

        _proto.commitComp = function commitComp(comp, renderData, frame, assembler, transform) {
          var dataHash = 0;
          var mat;
          var bufferID = -1;

          if (renderData && renderData.chunk) {
            if (!renderData.isValid()) return;
            dataHash = renderData.dataHash;
            mat = renderData.material;
            bufferID = renderData.chunk.bufferId;
          }

          if (comp.stencilStage === Stage.ENTER_LEVEL || comp.stencilStage === Stage.ENTER_LEVEL_INVERTED) {
            this._insertMaskBatch(comp);
          } else {
            comp.stencilStage = StencilManager.sharedManager.stage;
          }

          var depthStencilStateStage = comp.stencilStage;

          if (this._currHash !== dataHash || dataHash === 0 || this._currMaterial !== mat || this._currDepthStencilStateStage !== depthStencilStateStage) {
            this.autoMergeBatches(this._currComponent);

            if (renderData && !renderData._isMeshBuffer) {
              this.updateBuffer(renderData.vertexFormat, bufferID);
            }

            this._currRenderData = renderData;
            this._currHash = renderData ? renderData.dataHash : 0;
            this._currComponent = comp;
            this._currTransform = transform;
            this._currMaterial = comp.getRenderMaterial(0);
            this._currDepthStencilStateStage = depthStencilStateStage;
            this._currLayer = comp.node.layer;

            if (frame) {
              this._currTexture = frame.getGFXTexture();
              this._currSampler = frame.getGFXSampler();
              this._currTextureHash = frame.getHash();
              this._currSamplerHash = this._currSampler.hash;
            } else {
              this._currTexture = null;
              this._currSampler = null;
              this._currTextureHash = 0;
              this._currSamplerHash = 0;
            }
          }

          assembler.fillBuffers(comp, this);
        };

        _proto.commitIA = function commitIA(renderComp, ia, tex, mat, transform) {
          if (this._currMaterial !== this._emptyMaterial) {
            this.autoMergeBatches(this._currComponent);
            this.resetRenderStates();
          }

          var depthStencil;
          var dssHash = 0;

          if (renderComp) {
            renderComp.stencilStage = StencilManager.sharedManager.stage;

            if (renderComp.customMaterial !== null) {
              depthStencil = StencilManager.sharedManager.getStencilStage(renderComp.stencilStage, mat);
            } else {
              depthStencil = StencilManager.sharedManager.getStencilStage(renderComp.stencilStage);
            }

            dssHash = StencilManager.sharedManager.getStencilHash(renderComp.stencilStage);
          }

          var curDrawBatch = this._currStaticRoot ? this._currStaticRoot._requireDrawBatch() : this._drawBatchPool.alloc();
          curDrawBatch.visFlags = renderComp.node.layer;
          curDrawBatch.inputAssembler = ia;
          curDrawBatch.useLocalData = transform || null;

          if (tex) {
            curDrawBatch.texture = tex.getGFXTexture();
            curDrawBatch.sampler = tex.getGFXSampler();
            curDrawBatch.textureHash = tex.getHash();
            curDrawBatch.samplerHash = curDrawBatch.sampler.hash;
          }

          curDrawBatch.fillPasses(mat || null, depthStencil, dssHash, null);

          this._batches.push(curDrawBatch);
        };

        _proto.commitMiddleware = function commitMiddleware(comp, meshBuffer, indexOffset, indexCount, tex, mat, enableBatch) {
          var texture = tex.getGFXTexture();

          if (enableBatch && this._middlewareEnableBatch && this._middlewareBuffer === meshBuffer && this._currTexture === texture && this._currMaterial.hash === mat.hash && this._middlewareIndexStart + this._middlewareIndexCount === indexOffset && this._currLayer === comp.node.layer) {
            this._middlewareIndexCount += indexCount;
          } else {
            this.autoMergeBatches(this._currComponent);
            this.resetRenderStates();
            this._currComponent = comp;
            this._currTexture = texture;
            this._currSampler = tex.getGFXSampler();
            this._currTextureHash = tex.getHash();
            this._currLayer = comp.node.layer;
            this._currSamplerHash = this._currSampler.hash;
            this._currHash = 0;
            this._currTransform = enableBatch ? null : comp.node;
            this._middlewareEnableBatch = enableBatch;
            this._middlewareBuffer = meshBuffer;
            this._currMaterial = mat;
            this._middlewareIndexStart = indexOffset;
            this._middlewareIndexCount = indexCount;
          }

          this._currIsMiddleware = true;
        };

        _proto.commitModel = function commitModel(comp, model, mat) {
          if (this._currMaterial !== this._emptyMaterial) {
            this.autoMergeBatches(this._currComponent);
            this.resetRenderStates();
          }

          var depthStencil;
          var dssHash = 0;

          if (mat) {
            if (comp.stencilStage === Stage.ENTER_LEVEL || comp.stencilStage === Stage.ENTER_LEVEL_INVERTED) {
              this._insertMaskBatch(comp);
            } else {
              comp.stencilStage = StencilManager.sharedManager.stage;
            }

            depthStencil = StencilManager.sharedManager.getStencilStage(comp.stencilStage, mat);
            dssHash = StencilManager.sharedManager.getStencilHash(comp.stencilStage);
          }

          var stamp = legacyCC.director.getTotalFrames();

          if (model) {
            model.updateTransform(stamp);
            model.updateUBOs(stamp);
          }

          for (var i = 0; i < model.subModels.length; i++) {
            var curDrawBatch = this._drawBatchPool.alloc();

            var subModel = model.subModels[i];
            curDrawBatch.visFlags = comp.node.layer;
            curDrawBatch.model = model;
            curDrawBatch.texture = null;
            curDrawBatch.sampler = null;
            curDrawBatch.useLocalData = null;

            if (!depthStencil) {
              depthStencil = null;
            }

            curDrawBatch.fillPasses(mat, depthStencil, dssHash, subModel.patches);
            curDrawBatch.inputAssembler = subModel.inputAssembler;
            curDrawBatch.model.visFlags = curDrawBatch.visFlags;
            curDrawBatch.descriptorSet = subModel.descriptorSet;

            this._batches.push(curDrawBatch);
          }
        };

        _proto.setupStaticBatch = function setupStaticBatch(staticComp, bufferAccessor) {
          this.finishMergeBatches();
          this._staticVBBuffer = bufferAccessor;
          this.currStaticRoot = staticComp;
        };

        _proto.endStaticBatch = function endStaticBatch() {
          this.finishMergeBatches();
          this.currStaticRoot = null;
          this._staticVBBuffer = null;
          this.switchBufferAccessor();
        };

        _proto.commitStaticBatch = function commitStaticBatch(comp) {
          this._batches.concat(comp.drawBatchList);

          this.finishMergeBatches();
        };

        _proto.autoMergeBatches = function autoMergeBatches(renderComp) {
          if (this._currIsMiddleware) {
            this.mergeBatchesForMiddleware(renderComp);
            return;
          }

          var mat = this._currMaterial;

          if (!mat) {
            return;
          }

          var ia;
          var rd = this._currRenderData;
          var accessor = this._staticVBBuffer;

          if (rd && rd._isMeshBuffer) {
            ia = rd.requestIA(this.device);

            if (this._meshDataArray.indexOf(rd) === -1) {
              this._meshDataArray.push(rd);
            }
          } else if (accessor) {
            var bid = this._currBID;
            var buf = accessor.getMeshBuffer(bid);

            if (!buf) {
              return;
            }

            var indexCount = buf.indexOffset - this._indexStart;
            if (indexCount <= 0) return;
            assertIsTrue(this._indexStart < buf.indexOffset);
            buf.setDirty();
            ia = buf.requireFreeIA(this.device);
            ia.firstIndex = this._indexStart;
            ia.indexCount = indexCount;
            this._indexStart = buf.indexOffset;
          }

          this._currBID = -1;

          if (!ia) {
            return;
          }

          var depthStencil;
          var dssHash = 0;

          if (renderComp) {
            if (renderComp.customMaterial !== null) {
              depthStencil = StencilManager.sharedManager.getStencilStage(renderComp.stencilStage, mat);
            } else {
              depthStencil = StencilManager.sharedManager.getStencilStage(renderComp.stencilStage);
            }

            dssHash = StencilManager.sharedManager.getStencilHash(renderComp.stencilStage);
          }

          var curDrawBatch = this._currStaticRoot ? this._currStaticRoot._requireDrawBatch() : this._drawBatchPool.alloc();
          curDrawBatch.visFlags = this._currLayer;
          curDrawBatch.texture = this._currTexture;
          curDrawBatch.sampler = this._currSampler;
          curDrawBatch.inputAssembler = ia;
          curDrawBatch.useLocalData = this._currTransform;
          curDrawBatch.textureHash = this._currTextureHash;
          curDrawBatch.samplerHash = this._currSamplerHash;
          curDrawBatch.fillPasses(mat, depthStencil, dssHash, null);

          this._batches.push(curDrawBatch);
        };

        _proto.mergeBatchesForMiddleware = function mergeBatchesForMiddleware(renderComp) {
          var depthStencil;
          var dssHash = 0;
          renderComp.stencilStage = StencilManager.sharedManager.stage;

          if (renderComp.customMaterial !== null) {
            depthStencil = StencilManager.sharedManager.getStencilStage(renderComp.stencilStage, this._currMaterial);
          } else {
            depthStencil = StencilManager.sharedManager.getStencilStage(renderComp.stencilStage);
          }

          dssHash = StencilManager.sharedManager.getStencilHash(renderComp.stencilStage);
          var curDrawBatch = this._currStaticRoot ? this._currStaticRoot._requireDrawBatch() : this._drawBatchPool.alloc();
          curDrawBatch.visFlags = renderComp.node.layer;

          var ia = this._middlewareBuffer.requireFreeIA(this.device);

          ia.firstIndex = this._middlewareIndexStart;
          ia.indexCount = this._middlewareIndexCount;
          curDrawBatch.inputAssembler = ia;
          curDrawBatch.useLocalData = this._currTransform;
          curDrawBatch.texture = this._currTexture;
          curDrawBatch.sampler = this._currSampler;
          curDrawBatch.textureHash = this._currTextureHash;
          curDrawBatch.samplerHash = this._currSamplerHash;
          curDrawBatch.fillPasses(this._currMaterial || null, depthStencil, dssHash, null);

          this._batches.push(curDrawBatch);

          this._currIsMiddleware = false;
          this._middlewareBuffer = null;
        };

        _proto.forceMergeBatches = function forceMergeBatches(material, frame, renderComp) {
          this._currMaterial = material;

          if (frame) {
            this._currTexture = frame.getGFXTexture();
            this._currSampler = frame.getGFXSampler();
            this._currTextureHash = frame.getHash();
            this._currSamplerHash = this._currSampler.hash;
          } else {
            this._currTexture = this._currSampler = null;
            this._currTextureHash = this._currSamplerHash = 0;
          }

          this._currLayer = renderComp.node.layer;
          this.autoMergeBatches(renderComp);
        };

        _proto.resetRenderStates = function resetRenderStates() {
          this._currMaterial = this._emptyMaterial;
          this._currRenderData = null;
          this._currTexture = null;
          this._currComponent = null;
          this._currTransform = null;
          this._currTextureHash = 0;
          this._currSamplerHash = 0;
          this._currLayer = 0;
        };

        _proto.finishMergeBatches = function finishMergeBatches() {
          this.autoMergeBatches();
          this.resetRenderStates();
        };

        _proto.flushMaterial = function flushMaterial(mat) {
          this._currMaterial = mat;
        };

        _proto.walk = function walk(node, level) {
          if (level === void 0) {
            level = 0;
          }

          if (!node.activeInHierarchy) {
            return;
          }

          var children = node.children;
          var uiProps = node._uiProps;
          var render = uiProps.uiComp;
          var parentOpacity = this._pOpacity;
          var opacity = parentOpacity;
          var selfOpacity = render && render.color ? render.color.a / 255 : 1;
          this._pOpacity = opacity *= selfOpacity * uiProps.localOpacity;
          uiProps._opacity = opacity;

          if (uiProps.colorDirty) {
            this._opacityDirty++;
          }

          if (render && render.enabledInHierarchy) {
            render.fillBuffers(this);
          }

          if (this._opacityDirty && render && !render.useVertexOpacity && render.renderData && render.renderData.vertexCount > 0) {
            updateOpacity(render.renderData, opacity);
            var buffer = render.renderData.getMeshBuffer();

            if (buffer) {
              buffer.setDirty();
            }
          }

          if (children.length > 0 && !node._static) {
            for (var i = 0; i < children.length; ++i) {
              var child = children[i];
              this.walk(child, level);
            }
          }

          if (uiProps.colorDirty) {
            this._opacityDirty--;
            uiProps.colorDirty = false;
          }

          this._pOpacity = parentOpacity;

          if (render && render.enabledInHierarchy) {
            render.postUpdateAssembler(this);

            if ((render.stencilStage === Stage.ENTER_LEVEL || render.stencilStage === Stage.ENTER_LEVEL_INVERTED) && StencilManager.sharedManager.getMaskStackSize() > 0) {
              this.autoMergeBatches(this._currComponent);
              this.resetRenderStates();
              StencilManager.sharedManager.exitMask();
            }
          }

          level += 1;
        };

        _proto._screenSort = function _screenSort(a, b) {
          return a.node.getSiblingIndex() - b.node.getSiblingIndex();
        };

        _proto._releaseDescriptorSetCache = function _releaseDescriptorSetCache(textureHash, sampler) {

          {
            this._descriptorSetCache.releaseDescriptorSetCache(textureHash);
          }
        };

        _proto._createClearModel = function _createClearModel() {
          if (!this._maskClearModel) {
            this._maskClearMtl = builtinResMgr.get('default-clear-stencil');
            this._maskClearModel = legacyCC.director.root.createModel(Model);
            var stride = getAttributeStride(vfmt);
            var gfxDevice = deviceManager.gfxDevice;
            var vertexBuffer = gfxDevice.createBuffer(new BufferInfo(BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, 4 * stride, stride));
            var vb = new Float32Array([-1, -1, 0, 1, -1, 0, -1, 1, 0, 1, 1, 0]);
            vertexBuffer.update(vb);
            var indexBuffer = gfxDevice.createBuffer(new BufferInfo(BufferUsageBit.INDEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.DEVICE, 6 * Uint16Array.BYTES_PER_ELEMENT, Uint16Array.BYTES_PER_ELEMENT));
            var ib = new Uint16Array([0, 1, 2, 2, 1, 3]);
            indexBuffer.update(ib);
            this._maskModelMesh = new RenderingSubMesh([vertexBuffer], vfmt, PrimitiveMode.TRIANGLE_LIST, indexBuffer);
            this._maskModelMesh.subMeshIdx = 0;

            this._maskClearModel.initSubModel(0, this._maskModelMesh, this._maskClearMtl);
          }
        };

        _proto._insertMaskBatch = function _insertMaskBatch(comp) {
          this.autoMergeBatches(this._currComponent);
          this.resetRenderStates();

          this._createClearModel();

          this._maskClearModel.node = this._maskClearModel.transform = comp.node;
          var _stencilManager = StencilManager.sharedManager;

          _stencilManager.pushMask(1);

          var stage = _stencilManager.clear(comp);

          var depthStencil;
          var dssHash = 0;
          var mat = this._maskClearMtl;

          if (mat) {
            depthStencil = _stencilManager.getStencilStage(stage, mat);
            dssHash = _stencilManager.getStencilHash(stage);
          }

          var model = this._maskClearModel;
          var stamp = legacyCC.director.getTotalFrames();

          if (model) {
            model.updateTransform(stamp);
            model.updateUBOs(stamp);
          }

          for (var i = 0; i < model.subModels.length; i++) {
            var curDrawBatch = this._drawBatchPool.alloc();

            var subModel = model.subModels[i];
            curDrawBatch.visFlags = comp.node.layer;
            curDrawBatch.model = model;
            curDrawBatch.texture = null;
            curDrawBatch.sampler = null;
            curDrawBatch.useLocalData = null;

            if (!depthStencil) {
              depthStencil = null;
            }

            curDrawBatch.fillPasses(mat, depthStencil, dssHash, subModel.patches);
            curDrawBatch.inputAssembler = subModel.inputAssembler;
            curDrawBatch.model.visFlags = curDrawBatch.visFlags;
            curDrawBatch.descriptorSet = subModel.descriptorSet;

            this._batches.push(curDrawBatch);
          }

          _stencilManager.enableMask();
        };

        _proto.syncMeshBuffersToNative = function syncMeshBuffersToNative(accId, buffers) {
        };

        _createClass(Batcher2D, [{
          key: "nativeObj",
          get: function get() {
            return this._nativeObj;
          }
        }, {
          key: "currBufferAccessor",
          get: function get() {
            if (this._staticVBBuffer) return this._staticVBBuffer;
            this._staticVBBuffer = this.switchBufferAccessor();
            return this._staticVBBuffer;
          }
        }, {
          key: "batches",
          get: function get() {
            return this._batches;
          }
        }, {
          key: "currStaticRoot",
          set: function set(value) {
            this._currStaticRoot = value;
          }
        }, {
          key: "currIsStatic",
          set: function set(value) {
            this._currIsStatic = value;
          }
        }]);

        return Batcher2D;
      }();

      var LocalDescriptorSet = function () {
        function LocalDescriptorSet() {
          this._descriptorSet = null;
          this._transform = null;
          this._textureHash = 0;
          this._samplerHash = 0;
          this._localBuffer = null;
          this._transformUpdate = true;
          var device = deviceManager.gfxDevice;
          this._localData = new Float32Array(UBOLocal.COUNT);
          this._localBuffer = device.createBuffer(new BufferInfo(BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.HOST | MemoryUsageBit.DEVICE, UBOLocal.SIZE, UBOLocal.SIZE));
        }

        var _proto2 = LocalDescriptorSet.prototype;

        _proto2.initialize = function initialize(batch) {
          var device = deviceManager.gfxDevice;
          this._transform = batch.useLocalData;
          this._textureHash = batch.textureHash;
          this._samplerHash = batch.samplerHash;
          _dsInfo$2.layout = batch.passes[0].localSetLayout;
          this._descriptorSet = device.createDescriptorSet(_dsInfo$2);

          this._descriptorSet.bindBuffer(UBOLocal.BINDING, this._localBuffer);

          var binding = ModelLocalBindings.SAMPLER_SPRITE;

          this._descriptorSet.bindTexture(binding, batch.texture);

          this._descriptorSet.bindSampler(binding, batch.sampler);

          this._descriptorSet.update();

          this._transformUpdate = true;
        };

        _proto2.updateTransform = function updateTransform(transform) {
          if (transform === this._transform) return;
          this._transform = transform;
          this._transformUpdate = true;
          this.uploadLocalData();
        };

        _proto2.equals = function equals(transform, textureHash, samplerHash) {
          return this._transform === transform && this._textureHash === textureHash && this._samplerHash === samplerHash;
        };

        _proto2.reset = function reset() {
          this._transform = null;
          this._textureHash = 0;
          this._samplerHash = 0;
        };

        _proto2.destroy = function destroy() {
          if (this._localBuffer) {
            this._localBuffer.destroy();

            this._localBuffer = null;
          }

          if (this._descriptorSet) {
            this._descriptorSet.destroy();

            this._descriptorSet = null;
          }

          this._localData = null;
        };

        _proto2.isValid = function isValid() {
          return this._transform && this._transform.isValid;
        };

        _proto2.uploadLocalData = function uploadLocalData() {
          var node = this._transform;

          if (node.hasChangedFlags || node._dirtyFlags) {
            node.updateWorldTransform();
            this._transformUpdate = true;
          }

          if (this._transformUpdate) {
            var worldMatrix = node.worldMatrix;
            Mat4.toArray(this._localData, worldMatrix, UBOLocal.MAT_WORLD_OFFSET);
            Mat4.inverseTranspose(m4_1$2, worldMatrix);

            {
              var det = Mat4.determinant(m4_1$2);
              var factor = 1.0 / Math.sqrt(det);
              Mat4.multiplyScalar(m4_1$2, m4_1$2, factor);
            }

            Mat4.toArray(this._localData, m4_1$2, UBOLocal.MAT_WORLD_IT_OFFSET);

            this._localBuffer.update(this._localData);

            this._transformUpdate = false;
          }
        };

        _createClass(LocalDescriptorSet, [{
          key: "descriptorSet",
          get: function get() {
            return this._descriptorSet;
          }
        }]);

        return LocalDescriptorSet;
      }();

      var DescriptorSetCache = function () {
        function DescriptorSetCache() {
          this._descriptorSetCache = new Map();
          this._dsCacheHashByTexture = new Map();
          this._localDescriptorSetCache = [];
          this._localCachePool = void 0;
          this._localCachePool = new Pool$1(function () {
            return new LocalDescriptorSet();
          }, 16, function (obj) {
            return obj.destroy();
          });
        }

        var _proto3 = DescriptorSetCache.prototype;

        _proto3.getDescriptorSet = function getDescriptorSet(batch) {
          var root = legacyCC.director.root;
          var hash;

          if (batch.useLocalData) {
            var caches = this._localDescriptorSetCache;

            for (var i = 0, len = caches.length; i < len; i++) {
              var cache = caches[i];

              if (cache.equals(batch.useLocalData, batch.textureHash, batch.samplerHash)) {
                return cache.descriptorSet;
              }
            }

            var localDs = this._localCachePool.alloc();

            localDs.initialize(batch);

            this._localDescriptorSetCache.push(localDs);

            return localDs.descriptorSet;
          } else {
            hash = batch.textureHash ^ batch.samplerHash;

            if (this._descriptorSetCache.has(hash)) {
              return this._descriptorSetCache.get(hash);
            } else {
              _dsInfo$2.layout = batch.passes[0].localSetLayout;
              var descriptorSet = deviceManager.gfxDevice.createDescriptorSet(_dsInfo$2);
              var binding = ModelLocalBindings.SAMPLER_SPRITE;
              descriptorSet.bindTexture(binding, batch.texture);
              descriptorSet.bindSampler(binding, batch.sampler);
              descriptorSet.update();

              this._descriptorSetCache.set(hash, descriptorSet);

              this._dsCacheHashByTexture.set(batch.textureHash, hash);

              return descriptorSet;
            }
          }
        };

        _proto3.update = function update() {
          var caches = this._localDescriptorSetCache;
          var uselessArray = [];
          caches.forEach(function (value) {
            if (value.isValid()) {
              value.uploadLocalData();
            } else {
              value.reset();
              var pos = caches.indexOf(value);
              uselessArray.push(pos);
            }
          });

          for (var i = uselessArray.length - 1; i >= 0; i--) {
            caches.splice(uselessArray[i], 1);
          }
        };

        _proto3.reset = function reset() {
          var _this2 = this;

          var caches = this._localDescriptorSetCache;
          caches.forEach(function (value) {
            _this2._localCachePool.free(value);
          });
          this._localDescriptorSetCache.length = 0;
        };

        _proto3.releaseDescriptorSetCache = function releaseDescriptorSetCache(textureHash) {
          var key = this._dsCacheHashByTexture.get(textureHash);

          if (key && this._descriptorSetCache.has(key)) {
            this._descriptorSetCache.get(key).destroy();

            this._descriptorSetCache["delete"](key);

            this._dsCacheHashByTexture["delete"](textureHash);
          }
        };

        _proto3.destroy = function destroy() {
          this._descriptorSetCache.forEach(function (value, key, map) {
            value.destroy();
          });

          this._descriptorSetCache.clear();

          this._dsCacheHashByTexture.clear();

          this._localDescriptorSetCache.length = 0;

          this._localCachePool.destroy();
        };

        return DescriptorSetCache;
      }();

      legacyCC.internal.Batcher2D = Batcher2D;

      var ccdocument$2 = ccwindow.document;
      var _canvasContext = null;

      var _intervalId = -1;

      var _testString = "BES bswy:->@123\u4E01\u3041\u1101";

      var _fontFaces = Object.create(null);

      var _loadingFonts = [];
      var _timeout = 3000;

      var useNativeCheck = function () {
        var nativeCheck;
        return function () {
          if (nativeCheck === undefined) {
            if ('FontFace' in ccwindow) {
              var match = /Gecko.*Firefox\/(\d+)/.exec(ccwindow.navigator.userAgent);
              var safari10Match = /OS X.*Version\/10\..*Safari/.exec(ccwindow.navigator.userAgent) && /Apple/.exec(ccwindow.navigator.vendor);

              if (match) {
                nativeCheck = parseInt(match[1], 10) > 42;
              } else if (safari10Match) {
                nativeCheck = false;
              } else {
                nativeCheck = true;
              }
            } else {
              nativeCheck = false;
            }
          }

          return nativeCheck;
        };
      }();

      function checkFontLoaded() {
        var allFontsLoaded = true;
        var now = Date.now();

        for (var i = _loadingFonts.length - 1; i >= 0; i--) {
          var fontLoadHandle = _loadingFonts[i];
          var fontFamily = fontLoadHandle.fontFamilyName;

          if (now - fontLoadHandle.startTime > _timeout) {
            warnID(4933, fontFamily);
            fontLoadHandle.onComplete(null, fontFamily);

            _loadingFonts.splice(i, 1);

            continue;
          }

          var oldWidth = fontLoadHandle.refWidth;
          var fontDesc = "40px " + fontFamily;
          _canvasContext.font = fontDesc;
          var newWidth = safeMeasureText(_canvasContext, _testString, fontDesc);

          if (oldWidth !== newWidth) {
            _loadingFonts.splice(i, 1);

            fontLoadHandle.onComplete(null, fontFamily);
          } else {
            allFontsLoaded = false;
          }
        }

        if (allFontsLoaded) {
          clearInterval(_intervalId);
          _intervalId = -1;
        }
      }

      function nativeCheckFontLoaded(start, font, callback) {
        var loader = new Promise(function (resolve, reject) {
          var check = function check() {
            var now = Date.now();

            if (now - start >= _timeout) {
              reject();
            } else {
              ccdocument$2.fonts.load("40px " + font).then(function (fonts) {
                if (fonts.length >= 1) {
                  resolve();
                } else {
                  setTimeout(check, 100);
                }
              }, function () {
                reject();
              });
            }
          };

          check();
        });
        var timeoutId = null;
        var timer = new Promise(function (resolve, reject) {
          timeoutId = setTimeout(reject, _timeout);
        });
        Promise.race([timer, loader]).then(function () {
          if (timeoutId) {
            clearTimeout(timeoutId);
            timeoutId = null;
          }

          callback(null, font);
        }, function () {
          warnID(4933, font);
          callback(null, font);
        });
      }

      function loadFont(url, options, onComplete) {
        var fontFamilyName = getFontFamily(url);

        if (_fontFaces[fontFamilyName]) {
          onComplete(null, fontFamilyName);
          return;
        }

        if (!_canvasContext) {
          var labelCanvas = ccdocument$2.createElement('canvas');
          labelCanvas.width = 100;
          labelCanvas.height = 100;
          _canvasContext = labelCanvas.getContext('2d');
        }

        var fontDesc = "40px " + fontFamilyName;
        var refWidth = safeMeasureText(_canvasContext, _testString, fontDesc);
        var fontStyle = ccdocument$2.createElement('style');
        fontStyle.type = 'text/css';
        var fontStr = '';

        if (Number.isNaN(fontFamilyName)) {
          fontStr += "@font-face { font-family:" + fontFamilyName + "; src:";
        } else {
          fontStr += "@font-face { font-family:\"" + fontFamilyName + "\"; src:";
        }

        fontStr += "url(\"" + url + "\");";
        fontStyle.textContent = fontStr + "}";
        ccdocument$2.body.appendChild(fontStyle);
        var preloadDiv = ccdocument$2.createElement('div');
        var divStyle = preloadDiv.style;
        divStyle.fontFamily = fontFamilyName;
        preloadDiv.innerHTML = '.';
        divStyle.position = 'absolute';
        divStyle.left = '-100px';
        divStyle.top = '-100px';
        ccdocument$2.body.appendChild(preloadDiv);

        if (useNativeCheck()) {
          nativeCheckFontLoaded(Date.now(), fontFamilyName, onComplete);
        } else {
          var fontLoadHandle = {
            fontFamilyName: fontFamilyName,
            refWidth: refWidth,
            onComplete: onComplete,
            startTime: Date.now()
          };

          _loadingFonts.push(fontLoadHandle);

          if (_intervalId === -1) {
            _intervalId = setInterval(checkFontLoaded, 100);
          }
        }

        _fontFaces[fontFamilyName] = fontStyle;
      }
      function getFontFamily(fontHandle) {
        var ttfIndex = fontHandle.lastIndexOf('.ttf');

        if (ttfIndex === -1) {
          return fontHandle;
        }

        var slashPos = fontHandle.lastIndexOf('/');
        var fontFamilyName;

        if (slashPos === -1) {
          fontFamilyName = fontHandle.substring(0, ttfIndex) + "_LABEL";
        } else {
          fontFamilyName = fontHandle.substring(slashPos + 1, ttfIndex) + "_LABEL";
        }

        if (fontFamilyName.indexOf(' ') !== -1) {
          fontFamilyName = "\"" + fontFamilyName + "\"";
        }

        return fontFamilyName;
      }

      function createFont(id, data, options, onComplete) {
        var out = new TTFFont();
        out._nativeUrl = id;
        out._nativeAsset = data;
        onComplete(null, out);
      }

      downloader$1.register({
        '.font': loadFont,
        '.eot': loadFont,
        '.ttf': loadFont,
        '.woff': loadFont,
        '.svg': loadFont,
        '.ttc': loadFont
      });
      factory.register({
        '.font': createFont,
        '.eot': createFont,
        '.ttf': createFont,
        '.woff': createFont,
        '.svg': createFont,
        '.ttc': createFont
      });

      legacyCC.UI = {
        MeshBuffer: MeshBuffer,
        spriteAssembler: spriteAssembler,
        graphicsAssembler: graphicsAssemblerManager,
        labelAssembler: labelAssembler,
        RenderData: RenderData,
        MeshRenderData: MeshRenderData
      };

      var SortingLayer = {
        "default": 0
      };
      game.on(Game.EVENT_POST_SUBSYSTEM_INIT, function () {
        SortingLayers.init();
      });
      var SortingLayers = exports('SortingLayers', function () {
        function SortingLayers() {}

        SortingLayers.getSortingPriority = function getSortingPriority(layer, order) {
          if (layer === void 0) {
            layer = 0;
          }

          if (order === void 0) {
            order = 0;
          }

          return (layer + (1 << 15) << 16 | order + (1 << 15)) >>> 0;
        };

        SortingLayers.getLayerIndex = function getLayerIndex(layer) {
          if (layer === void 0) {
            layer = 0;
          }

          var index = 0;

          if (this.indexMap.has(layer)) {
            index = this.indexMap.get(layer);
          } else {
            errorID(2105);
          }

          return index;
        };

        SortingLayers.getLayerIndexByName = function getLayerIndexByName(name) {
          var id = this.getLayerByName(name);
          return this.getLayerIndex(id);
        };

        SortingLayers.getLayerName = function getLayerName(layer) {
          if (layer === void 0) {
            layer = 0;
          }

          var name = '';

          if (this.nameMap.has(layer)) {
            name = this.nameMap.get(layer);
          } else {
            errorID(2105);
          }

          return name;
        };

        SortingLayers.getLayerByName = function getLayerByName(name) {
          var count = this.nameMap.size;
          var keyIterator = this.nameMap.keys();
          var key = 0;

          for (var i = 0; i < count; i++) {
            key = keyIterator.next().value;
            if (this.nameMap.get(key) === name) return key;
          }

          errorID(2106);
          return 0;
        };

        SortingLayers.isLayerValid = function isLayerValid(id) {
          if (this.indexMap.has(id)) {
            return true;
          } else {
            errorID(2105);
            return false;
          }
        };

        SortingLayers.getBuiltinLayers = function getBuiltinLayers() {
          return [{
            id: 0,
            name: 'default',
            value: 0
          }];
        };

        SortingLayers.init = function init() {
          var sortingLayers = settings.querySettings(Settings.Category.ENGINE, 'sortingLayers');

          if (!sortingLayers || sortingLayers.length === 0) {
            sortingLayers = this.getBuiltinLayers();
          }

          SortingLayers.resetState();

          for (var i = 0; i < sortingLayers.length; i++) {
            var layer = sortingLayers[i];
            SortingLayers.setLayer(layer.id, layer.name, layer.value);
            SortingLayers.Enum[layer.name] = layer.id;
          }

          Enum.update(SortingLayers.Enum);
          Enum.sortList(SortingLayers.Enum, function (a, b) {
            return SortingLayers.getLayerIndex(a.value) - SortingLayers.getLayerIndex(b.value);
          });
        };

        SortingLayers.setLayer = function setLayer(layer, layerName, layerIndex) {
          this.nameMap.set(layer, layerName);
          this.indexMap.set(layer, layerIndex);
        };

        SortingLayers.resetState = function resetState() {
          var oldItem = Object.keys(SortingLayers.Enum);

          for (var i = 0; i < oldItem.length; i++) {
            delete SortingLayers.Enum[SortingLayers.Enum[oldItem[i]]];
            delete SortingLayers.Enum[oldItem[i]];
          }

          SortingLayers.indexMap.clear();
          SortingLayers.nameMap.clear();
        };

        return SortingLayers;
      }());
      SortingLayers.nameMap = new Map();
      SortingLayers.indexMap = new Map();
      SortingLayers.Enum = Enum(SortingLayer);

      var _dec$15, _dec2$C, _class$15, _class2$Z, _initializer$O, _initializer2$x;
      var MAX_INT16 = (1 << 15) - 1;
      var MIN_INT16 = -1 << 15;
      var Sorting = exports('Sorting', (_dec$15 = ccclass('cc.Sorting'), _dec2$C = type(SortingLayers.Enum), _dec$15(_class$15 = disallowMultiple(_class$15 = (_class2$Z = function (_Component) {
        _inheritsLoose(Sorting, _Component);

        function Sorting() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._sortingLayer = _initializer$O && _initializer$O();
          _this._sortingOrder = _initializer2$x && _initializer2$x();
          _this._modelRenderer = null;
          return _this;
        }

        var _proto = Sorting.prototype;

        _proto.__preload = function __preload() {
          this._modelRenderer = this.getComponent('cc.ModelRenderer');

          if (!this._modelRenderer) {
            warnID(16301, this.node.name);
          }

          this._updateSortingPriority();
        };

        _proto._updateSortingPriority = function _updateSortingPriority() {
          var sortingLayerValue = SortingLayers.getLayerIndex(this._sortingLayer);
          var sortingPriority = SortingLayers.getSortingPriority(sortingLayerValue, this._sortingOrder);

          if (this._modelRenderer && this._modelRenderer.isValid) {
            this._modelRenderer.priority = sortingPriority;
          }
        };

        _createClass(Sorting, [{
          key: "sortingLayer",
          get: function get() {
            return this._sortingLayer;
          },
          set: function set(val) {
            if (val === this._sortingLayer || !SortingLayers.isLayerValid(val)) return;
            this._sortingLayer = val;

            this._updateSortingPriority();
          }
        }, {
          key: "sortingOrder",
          get: function get() {
            return this._sortingOrder;
          },
          set: function set(val) {
            if (val === this._sortingOrder) return;
            this._sortingOrder = clamp(val, MIN_INT16, MAX_INT16);

            this._updateSortingPriority();
          }
        }]);

        return Sorting;
      }(Component), (_applyDecoratedDescriptor(_class2$Z.prototype, "sortingLayer", [_dec2$C], Object.getOwnPropertyDescriptor(_class2$Z.prototype, "sortingLayer"), _class2$Z.prototype), _initializer$O = applyDecoratedInitializer(_class2$Z.prototype, "_sortingLayer", [serializable], function () {
        return SortingLayers.Enum["default"];
      }), _initializer2$x = applyDecoratedInitializer(_class2$Z.prototype, "_sortingOrder", [serializable], function () {
        return 0;
      })), _class2$Z)) || _class$15) || _class$15));

      var CLASS_NAME_PREFIX_ANIM = 'cc.animation.';
      var createEvalSymbol = Symbol('CreateEval');

      var _dec$16, _class$16, _class2$_, _initializer$P, _initializer2$y, _initializer3$q, _initializer4$l;
      var EmbeddedPlayer = (_dec$16 = ccclass(CLASS_NAME_PREFIX_ANIM + "EmbeddedPlayer"), _dec$16(_class$16 = (_class2$_ = function (_EditorExtendable) {
        _inheritsLoose(EmbeddedPlayer, _EditorExtendable);

        function EmbeddedPlayer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _EditorExtendable.call.apply(_EditorExtendable, [this].concat(args)) || this;
          _this.begin = _initializer$P && _initializer$P();
          _this.end = _initializer2$y && _initializer2$y();
          _this.reconciledSpeed = _initializer3$q && _initializer3$q();
          _this.playable = _initializer4$l && _initializer4$l();
          return _this;
        }

        return EmbeddedPlayer;
      }(EditorExtendable), (_initializer$P = applyDecoratedInitializer(_class2$_.prototype, "begin", [serializable], function () {
        return 0.0;
      }), _initializer2$y = applyDecoratedInitializer(_class2$_.prototype, "end", [serializable], function () {
        return 0.0;
      }), _initializer3$q = applyDecoratedInitializer(_class2$_.prototype, "reconciledSpeed", [serializable], function () {
        return false;
      }), _initializer4$l = applyDecoratedInitializer(_class2$_.prototype, "playable", [serializable], function () {
        return null;
      })), _class2$_)) || _class$16);
      var EmbeddedPlayable = function EmbeddedPlayable() {};
      var EmbeddedPlayableState = function () {
        function EmbeddedPlayableState(randomAccess) {
          this._randomAccess = randomAccess;
        }

        var _proto = EmbeddedPlayableState.prototype;

        _proto.setTime = function setTime(_time) {};

        _createClass(EmbeddedPlayableState, [{
          key: "randomAccess",
          get: function get() {
            return this._randomAccess;
          }
        }]);

        return EmbeddedPlayableState;
      }();

      var Playable = function () {
        function Playable() {
          this._isPlaying = false;
          this._isPaused = false;
          this._stepOnce = false;
        }

        var _proto = Playable.prototype;

        _proto.play = function play() {
          if (this._isPlaying) {
            if (this._isPaused) {
              this._isPaused = false;
              this.onResume();
            } else {
              this.onError(getError(3912));
            }
          } else {
            this._isPlaying = true;
            this.onPlay();
          }
        };

        _proto.stop = function stop() {
          if (this._isPlaying) {
            this._isPlaying = false;
            this.onStop();
            this._isPaused = false;
          }
        };

        _proto.pause = function pause() {
          if (this._isPlaying && !this._isPaused) {
            this._isPaused = true;
            this.onPause();
          }
        };

        _proto.resume = function resume() {
          if (this._isPlaying && this._isPaused) {
            this._isPaused = false;
            this.onResume();
          }
        };

        _proto.step = function step() {
          this.pause();
          this._stepOnce = true;

          if (!this._isPlaying) {
            this.play();
          }
        };

        _proto.update = function update(deltaTime) {};

        _proto.onPlay = function onPlay() {};

        _proto.onPause = function onPause() {};

        _proto.onResume = function onResume() {};

        _proto.onStop = function onStop() {};

        _proto.onError = function onError(message) {};

        _createClass(Playable, [{
          key: "isPlaying",
          get: function get() {
            return this._isPlaying;
          }
        }, {
          key: "isPaused",
          get: function get() {
            return this._isPaused;
          }
        }, {
          key: "isMotionless",
          get: function get() {
            return !this.isPlaying || this.isPaused;
          }
        }]);

        return Playable;
      }();

      var WrapMode$1;

      (function (WrapMode) {
        WrapMode[WrapMode["Default"] = WrapModeMask.Default] = "Default";
        WrapMode[WrapMode["Normal"] = WrapModeMask.Normal] = "Normal";
        WrapMode[WrapMode["Reverse"] = WrapModeMask.Reverse] = "Reverse";
        WrapMode[WrapMode["Loop"] = WrapModeMask.Loop] = "Loop";
        WrapMode[WrapMode["LoopReverse"] = WrapModeMask.Loop | WrapModeMask.Reverse] = "LoopReverse";
        WrapMode[WrapMode["PingPong"] = WrapModeMask.PingPong] = "PingPong";
        WrapMode[WrapMode["PingPongReverse"] = WrapModeMask.PingPong | WrapModeMask.Reverse] = "PingPongReverse";
      })(WrapMode$1 || (WrapMode$1 = {}));

      ccenum(WrapMode$1);
      var WrappedInfo = function () {
        function WrappedInfo(info) {
          this.ratio = 0;
          this.time = 0;
          this.direction = 1;
          this.stopped = true;
          this.iterations = 0;
          this.frameIndex = undefined;

          if (info) {
            this.set(info);
          }
        }

        var _proto = WrappedInfo.prototype;

        _proto.set = function set(info) {
          this.ratio = info.ratio;
          this.time = info.time;
          this.direction = info.direction;
          this.stopped = info.stopped;
          this.iterations = info.iterations;
          this.frameIndex = info.frameIndex;
        };

        return WrappedInfo;
      }();
      function isLerpable(object) {
        return typeof object.lerp === 'function';
      }

      var PoseOutput = function () {
        function PoseOutput(pose) {
          this.weight = 0.0;
          this._pose = void 0;
          this._blendStateWriters = [];
          this._pose = pose;
        }

        var _proto = PoseOutput.prototype;

        _proto.destroy = function destroy() {
          for (var iBlendStateWriter = 0; iBlendStateWriter < this._blendStateWriters.length; ++iBlendStateWriter) {
            this._pose.destroyWriter(this._blendStateWriters[iBlendStateWriter]);
          }

          this._blendStateWriters.length = 0;
        };

        _proto.createPoseWriter = function createPoseWriter(node, property, constants) {
          var writer = this._pose.createWriter(node, property, this, constants);

          this._blendStateWriters.push(writer);

          return writer;
        };

        return PoseOutput;
      }();

      function getGlobalAnimationManager() {
        var animationManager = legacyCC.director.getAnimationManager();
        return animationManager;
      }

      var EventType$1;

      (function (EventType) {
        EventType["PLAY"] = "play";
        EventType["STOP"] = "stop";
        EventType["PAUSE"] = "pause";
        EventType["RESUME"] = "resume";
        EventType["LASTFRAME"] = "lastframe";
        EventType["FINISHED"] = "finished";
      })(EventType$1 || (EventType$1 = {}));

      ccenum(EventType$1);
      var AnimationState = exports('AnimationState', function (_Playable) {
        _inheritsLoose(AnimationState, _Playable);

        function AnimationState(clip, name) {
          var _this;

          if (name === void 0) {
            name = '';
          }

          _this = _Playable.call(this) || this;
          _this.duration = 1.0;
          _this.time = 0.0;
          _this.frameRate = 0;
          _this._targetNode = null;
          _this._curveLoaded = false;
          _this._clip = void 0;
          _this._speed = 1.0;
          _this._useSimpleProcess = false;
          _this._target = null;
          _this._wrapMode = WrapMode$1.Normal;
          _this._repeatCount = 1;
          _this._delay = 0.0;
          _this._delayTime = 0.0;
          _this._currentFramePlayed = false;
          _this._name = void 0;
          _this._lastIterations = NaN;
          _this._lastWrapInfo = null;
          _this._wrappedInfo = new WrappedInfo();
          _this._allowLastFrame = false;
          _this._blendStateWriterHost = {
            weight: 0.0
          };
          _this._playbackDuration = 0.0;
          _this._invDuration = 1.0;
          _this._poseOutput = null;
          _this._weight = 1.0;
          _this._clipEval = void 0;
          _this._clipEventEval = void 0;
          _this._clipEmbeddedPlayerEval = void 0;
          _this._doNotCreateEval = false;
          _this._clip = clip;
          _this._name = name || clip && clip.name;
          _this._playbackRange = {
            min: 0.0,
            max: clip.duration
          };
          _this._playbackDuration = clip.duration;

          if (!clip.duration) {
            debug("Clip " + clip.name + " has zero duration.");
          }

          return _this;
        }

        var _proto = AnimationState.prototype;

        _proto.initialize = function initialize(root, blendStateBuffer, mask) {
          if (this._curveLoaded) {
            return;
          }

          this._curveLoaded = true;

          if (this._poseOutput) {
            this._poseOutput.destroy();

            this._poseOutput = null;
          }

          if (this._clipEval) {
            this._clipEval = undefined;
          }

          if (this._clipEventEval) {
            this._clipEventEval = undefined;
          }

          if (this._clipEmbeddedPlayerEval) {
            this._clipEmbeddedPlayerEval.destroy();

            this._clipEmbeddedPlayerEval = undefined;
          }

          this._targetNode = root;
          var clip = this._clip;
          this.duration = clip.duration;
          this._invDuration = 1.0 / this.duration;
          this._speed = clip.speed;
          this.wrapMode = clip.wrapMode;
          this.frameRate = clip.sample;
          this._playbackRange.min = 0.0;
          this._playbackRange.max = clip.duration;
          this._playbackDuration = clip.duration;

          if ((this.wrapMode & WrapModeMask.Loop) === WrapModeMask.Loop) {
            this.repeatCount = Infinity;
          } else {
            this.repeatCount = 1;
          }

          if (!this._doNotCreateEval) {
            var _ref, _getGlobalAnimationMa, _this$_poseOutput;

            var pose = (_ref = blendStateBuffer !== null && blendStateBuffer !== void 0 ? blendStateBuffer : (_getGlobalAnimationMa = getGlobalAnimationManager()) === null || _getGlobalAnimationMa === void 0 ? void 0 : _getGlobalAnimationMa.blendState) !== null && _ref !== void 0 ? _ref : null;

            if (pose) {
              this._poseOutput = new PoseOutput(pose);
            }

            this._clipEval = clip.createEvaluator({
              target: root,
              pose: (_this$_poseOutput = this._poseOutput) !== null && _this$_poseOutput !== void 0 ? _this$_poseOutput : undefined,
              mask: mask
            });
          }

          {
            if (clip.containsAnyEvent()) {
              this._clipEventEval = clip.createEventEvaluator(this._targetNode);
            }
          }

          if (clip.containsAnyEmbeddedPlayer()) {
            this._clipEmbeddedPlayerEval = clip.createEmbeddedPlayerEvaluator(this._targetNode);

            this._clipEmbeddedPlayerEval.notifyHostSpeedChanged(this._speed);
          }
        };

        _proto.destroy = function destroy() {
          if (!this.isMotionless) {
            getGlobalAnimationManager().removeAnimation(this);
          }

          if (this._poseOutput) {
            this._poseOutput.destroy();

            this._poseOutput = null;
          }

          this._clipEval = undefined;
        };

        _proto.emit = function emit() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          getGlobalAnimationManager().pushDelayEvent(this._emit, this, args);
        };

        _proto.on = function on(type, callback, target) {
          if (this._target && this._target.isValid) {
            return this._target.on(type, callback, target);
          } else {
            return null;
          }
        };

        _proto.once = function once(type, callback, target) {
          if (this._target && this._target.isValid) {
            return this._target.once(type, callback, target);
          } else {
            return null;
          }
        };

        _proto.off = function off(type, callback, target) {
          if (this._target && this._target.isValid) {
            this._target.off(type, callback, target);
          }
        };

        _proto.allowLastFrameEvent = function allowLastFrameEvent(allowed) {
          this._allowLastFrame = allowed;
        };

        _proto._setEventTarget = function _setEventTarget(target) {
          this._target = target;
        };

        _proto.setTime = function setTime(time) {
          this._currentFramePlayed = false;
          this.time = time || 0.0;

          {
            var _this$_clipEventEval;

            var info = this.getWrappedInfo(time, this._wrappedInfo);
            (_this$_clipEventEval = this._clipEventEval) === null || _this$_clipEventEval === void 0 ? void 0 : _this$_clipEventEval.ignore(info.ratio, info.direction);
          }
        };

        _proto.update = function update(delta) {
          if (this._delayTime > 0.0) {
            this._delayTime -= delta;

            if (this._delayTime > 0.0) {
              return;
            }
          }

          if (this._currentFramePlayed) {
            this.time += delta * this._speed;
          } else {
            this._currentFramePlayed = true;
          }

          this._process();
        };

        _proto.sample = function sample() {
          var info = this.getWrappedInfo(this.time, this._wrappedInfo);

          this._sampleCurves(info.time);

          {
            this._sampleEvents(info);
          }

          this._sampleEmbeddedPlayers(info);

          return info;
        };

        _proto.onPlay = function onPlay() {
          var _this$_clipEmbeddedPl;

          this.setTime(this._getPlaybackStart());
          this._delayTime = this._delay;

          this._onReplayOrResume();

          this.emit(EventType$1.PLAY, this);
          (_this$_clipEmbeddedPl = this._clipEmbeddedPlayerEval) === null || _this$_clipEmbeddedPl === void 0 ? void 0 : _this$_clipEmbeddedPl.notifyHostPlay(this.current);
        };

        _proto.onStop = function onStop() {
          var _this$_clipEmbeddedPl2;

          if (!this.isPaused) {
            this._onPauseOrStop();
          }

          this.emit(EventType$1.STOP, this);
          (_this$_clipEmbeddedPl2 = this._clipEmbeddedPlayerEval) === null || _this$_clipEmbeddedPl2 === void 0 ? void 0 : _this$_clipEmbeddedPl2.notifyHostStop();
        };

        _proto.onResume = function onResume() {
          var _this$_clipEmbeddedPl3;

          this._onReplayOrResume();

          this.emit(EventType$1.RESUME, this);
          (_this$_clipEmbeddedPl3 = this._clipEmbeddedPlayerEval) === null || _this$_clipEmbeddedPl3 === void 0 ? void 0 : _this$_clipEmbeddedPl3.notifyHostPlay(this.current);
        };

        _proto.onPause = function onPause() {
          var _this$_clipEmbeddedPl4;

          this._onPauseOrStop();

          this.emit(EventType$1.PAUSE, this);
          (_this$_clipEmbeddedPl4 = this._clipEmbeddedPlayerEval) === null || _this$_clipEmbeddedPl4 === void 0 ? void 0 : _this$_clipEmbeddedPl4.notifyHostPause(this.current);
        };

        _proto._sampleCurves = function _sampleCurves(time) {
          var poseOutput = this._poseOutput,
              clipEval = this._clipEval;

          if (poseOutput) {
            poseOutput.weight = this.weight;
          }

          if (clipEval) {
            clipEval.evaluate(time);
          }
        };

        _proto._process = function _process() {
          if (this._useSimpleProcess) {
            this.simpleProcess();
          } else {
            this.process();
          }
        };

        _proto.process = function process() {
          var info = this.sample();

          if (this._allowLastFrame) {
            var lastInfo;

            if (!this._lastWrapInfo) {
              lastInfo = this._lastWrapInfo = new WrappedInfo(info);
            } else {
              lastInfo = this._lastWrapInfo;
            }

            if (this.repeatCount > 1 && (info.iterations | 0) > (lastInfo.iterations | 0)) {
              this.emit(EventType$1.LASTFRAME, this);
            }

            lastInfo.set(info);
          }

          if (info.stopped) {
            this.stop();
            this.emit(EventType$1.FINISHED, this);
          }
        };

        _proto.simpleProcess = function simpleProcess() {
          var playbackStart = this._playbackRange.min;
          var playbackDuration = this._playbackDuration;
          var time = 0.0;
          var ratio = 0.0;

          if (playbackDuration !== 0.0) {
            time = this.time % playbackDuration;

            if (time < 0.0) {
              time += playbackDuration;
            }

            var realTime = playbackStart + time;
            ratio = realTime * this._invDuration;
          }

          this._sampleCurves(playbackStart + time);

          if (this._clipEventEval || this._clipEmbeddedPlayerEval) {
            var wrapInfo = this.getWrappedInfo(this.time, this._wrappedInfo);

            {
              this._sampleEvents(wrapInfo);
            }

            this._sampleEmbeddedPlayers(wrapInfo);
          }

          if (this._allowLastFrame) {
            if (Number.isNaN(this._lastIterations)) {
              this._lastIterations = ratio;
            }

            if (this.time > 0 && this._lastIterations > ratio || this.time < 0 && this._lastIterations < ratio) {
              this.emit(EventType$1.LASTFRAME, this);
            }

            this._lastIterations = ratio;
          }
        };

        _proto._needReverse = function _needReverse(currentIterations) {
          var wrapMode = this.wrapMode;
          var needReverse = false;

          if ((wrapMode & WrapModeMask.PingPong) === WrapModeMask.PingPong) {
            var isEnd = currentIterations - (currentIterations | 0) === 0;

            if (isEnd && currentIterations > 0) {
              currentIterations -= 1;
            }

            var isOddIteration = currentIterations & 1;

            if (isOddIteration) {
              needReverse = !needReverse;
            }
          }

          if ((wrapMode & WrapModeMask.Reverse) === WrapModeMask.Reverse) {
            needReverse = !needReverse;
          }

          return needReverse;
        };

        _proto.getWrappedInfo = function getWrappedInfo(time, info) {
          info = info || new WrappedInfo();
          var playbackStart = this._playbackRange.min,
              playbackDuration = this._playbackDuration;
          var repeatCount = this.repeatCount;

          if (playbackDuration === 0.0) {
            info.time = 0.0;
            info.ratio = 0.0;
            info.direction = 1.0;
            info.stopped = !!Number.isFinite(repeatCount);
            info.iterations = 0.0;
            return info;
          }

          var stopped = false;
          time -= playbackStart;
          var currentIterations = time > 0 ? time / playbackDuration : -(time / playbackDuration);

          if (currentIterations >= repeatCount) {
            currentIterations = repeatCount;
            stopped = true;
            var tempRatio = repeatCount - (repeatCount | 0);

            if (tempRatio === 0) {
              tempRatio = 1;
            }

            time = tempRatio * playbackDuration * (time > 0 ? 1 : -1);
          }

          if (time > playbackDuration) {
            var tempTime = time % playbackDuration;
            time = tempTime === 0 ? playbackDuration : tempTime;
          } else if (time < 0) {
            time %= playbackDuration;

            if (time !== 0) {
              time += playbackDuration;
            }
          }

          var needReverse = false;
          var shouldWrap = this._wrapMode & WrapModeMask.ShouldWrap;

          if (shouldWrap) {
            needReverse = this._needReverse(currentIterations);
          }

          var direction = needReverse ? -1 : 1;

          if (this.speed < 0) {
            direction *= -1;
          }

          if (shouldWrap && needReverse) {
            time = playbackDuration - time;
          }

          info.time = playbackStart + time;
          info.ratio = info.time / this.duration;
          info.direction = direction;
          info.stopped = stopped;
          info.iterations = currentIterations;
          return info;
        };

        _proto._getPlaybackStart = function _getPlaybackStart() {
          return this._playbackRange.min;
        };

        _proto._sampleEvents = function _sampleEvents(wrapInfo) {
          var _this$_clipEventEval2;

          (_this$_clipEventEval2 = this._clipEventEval) === null || _this$_clipEventEval2 === void 0 ? void 0 : _this$_clipEventEval2.sample(wrapInfo.ratio, wrapInfo.direction, wrapInfo.iterations);
        };

        _proto._sampleEmbeddedPlayers = function _sampleEmbeddedPlayers(wrapInfo) {
          var _this$_clipEmbeddedPl5;

          (_this$_clipEmbeddedPl5 = this._clipEmbeddedPlayerEval) === null || _this$_clipEmbeddedPl5 === void 0 ? void 0 : _this$_clipEmbeddedPl5.evaluate(wrapInfo.time, Math.trunc(wrapInfo.iterations));
        };

        _proto._emit = function _emit(type, state) {
          if (this._target && this._target.isValid) {
            this._target.emit(type, type, state);
          }
        };

        _proto._onReplayOrResume = function _onReplayOrResume() {
          getGlobalAnimationManager().addAnimation(this);
        };

        _proto._onPauseOrStop = function _onPauseOrStop() {
          getGlobalAnimationManager().removeAnimation(this);
        };

        _createClass(AnimationState, [{
          key: "clip",
          get: function get() {
            return this._clip;
          }
        }, {
          key: "name",
          get: function get() {
            return this._name;
          }
        }, {
          key: "length",
          get: function get() {
            return this.duration;
          }
        }, {
          key: "wrapMode",
          get: function get() {
            return this._wrapMode;
          },
          set: function set(value) {
            var _this$_clipEventEval3;

            this._wrapMode = value;
            this.time = 0;

            if (value & WrapModeMask.Loop) {
              this.repeatCount = Infinity;
            } else {
              this.repeatCount = 1;
            }

            (_this$_clipEventEval3 = this._clipEventEval) === null || _this$_clipEventEval3 === void 0 ? void 0 : _this$_clipEventEval3.setWrapMode(value);
          }
        }, {
          key: "repeatCount",
          get: function get() {
            return this._repeatCount;
          },
          set: function set(value) {
            this._repeatCount = value;
            var shouldWrap = this._wrapMode & WrapModeMask.ShouldWrap;
            var reverse = (this.wrapMode & WrapModeMask.Reverse) === WrapModeMask.Reverse;

            if (value === Infinity && !shouldWrap && !reverse) {
              this._useSimpleProcess = true;
            } else {
              this._useSimpleProcess = false;
            }
          }
        }, {
          key: "delay",
          get: function get() {
            return this._delay;
          },
          set: function set(value) {
            this._delayTime = this._delay = value;
          }
        }, {
          key: "playbackRange",
          get: function get() {
            return this._playbackRange;
          },
          set: function set(value) {
            assertIsTrue(value.max >= value.min);
            this._playbackRange.min = Math.max(value.min, 0);
            this._playbackRange.max = Math.min(value.max, this.duration);
            this._playbackDuration = this._playbackRange.max - this._playbackRange.min;
            this.setTime(0.0);
          }
        }, {
          key: "speed",
          get: function get() {
            return this._speed;
          },
          set: function set(value) {
            var _this$_clipEmbeddedPl6;

            this._speed = value;
            (_this$_clipEmbeddedPl6 = this._clipEmbeddedPlayerEval) === null || _this$_clipEmbeddedPl6 === void 0 ? void 0 : _this$_clipEmbeddedPl6.notifyHostSpeedChanged(value);
          }
        }, {
          key: "current",
          get: function get() {
            return this.getWrappedInfo(this.time).time;
          }
        }, {
          key: "ratio",
          get: function get() {
            return this.duration === 0.0 ? 0.0 : this.current / this.duration;
          }
        }, {
          key: "weight",
          get: function get() {
            return this._weight;
          },
          set: function set(value) {
            this._weight = value;

            if (this._poseOutput) {
              this._poseOutput.weight = value;
            }
          }
        }, {
          key: "curveLoaded",
          get: function get() {
            return this._curveLoaded;
          }
        }]);

        return AnimationState;
      }(Playable));
      legacyCC.AnimationState = AnimationState;

      var _dec$17, _class$17, _class2$$, _initializer$Q, _initializer2$z;
      var EmbeddedAnimationClipPlayable = (_dec$17 = ccclass(CLASS_NAME_PREFIX_ANIM + "EmbeddedAnimationClipPlayable"), _dec$17(_class$17 = (_class2$$ = function (_EmbeddedPlayable) {
        _inheritsLoose(EmbeddedAnimationClipPlayable, _EmbeddedPlayable);

        function EmbeddedAnimationClipPlayable() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _EmbeddedPlayable.call.apply(_EmbeddedPlayable, [this].concat(args)) || this;
          _this.path = _initializer$Q && _initializer$Q();
          _this.clip = _initializer2$z && _initializer2$z();
          return _this;
        }

        var _proto = EmbeddedAnimationClipPlayable.prototype;

        _proto.instantiate = function instantiate(root) {
          var clip = this.clip,
              path = this.path;

          if (!clip) {
            return null;
          }

          var clipRoot = root.getChildByPath(path);

          if (!clipRoot) {
            errorID(3938, path, root.getPathInHierarchy(), clip.name);
            return null;
          }

          var state = new AnimationState(clip);
          state.initialize(clipRoot);
          return new EmbeddedAnimationClipPlayableState(state);
        };

        return EmbeddedAnimationClipPlayable;
      }(EmbeddedPlayable), (_initializer$Q = applyDecoratedInitializer(_class2$$.prototype, "path", [serializable], function () {
        return '';
      }), _initializer2$z = applyDecoratedInitializer(_class2$$.prototype, "clip", [serializable], function () {
        return null;
      })), _class2$$)) || _class$17);

      var EmbeddedAnimationClipPlayableState = function (_EmbeddedPlayableStat) {
        _inheritsLoose(EmbeddedAnimationClipPlayableState, _EmbeddedPlayableStat);

        function EmbeddedAnimationClipPlayableState(animationState) {
          var _this2;

          _this2 = _EmbeddedPlayableStat.call(this, true) || this;
          _this2._animationState = void 0;
          _this2._animationState = animationState;
          return _this2;
        }

        var _proto2 = EmbeddedAnimationClipPlayableState.prototype;

        _proto2.destroy = function destroy() {
          this._animationState.destroy();
        };

        _proto2.play = function play() {
          this._animationState.play();
        };

        _proto2.pause = function pause() {
          this._animationState.pause();
        };

        _proto2.stop = function stop() {
          this._animationState.stop();
        };

        _proto2.setSpeed = function setSpeed(speed) {
          this._animationState.speed = speed;
        };

        _proto2.setTime = function setTime(time) {
          this._animationState.time = time;
        };

        return EmbeddedAnimationClipPlayableState;
      }(EmbeddedPlayableState);

      var _dec$18, _class$18, _class2$10, _initializer$R;
      var EmbeddedParticleSystemPlayable = (_dec$18 = ccclass(CLASS_NAME_PREFIX_ANIM + "EmbeddedParticleSystemPlayable"), _dec$18(_class$18 = (_class2$10 = function (_EmbeddedPlayable) {
        _inheritsLoose(EmbeddedParticleSystemPlayable, _EmbeddedPlayable);

        function EmbeddedParticleSystemPlayable() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _EmbeddedPlayable.call.apply(_EmbeddedPlayable, [this].concat(args)) || this;
          _this.path = _initializer$R && _initializer$R();
          return _this;
        }

        var _proto = EmbeddedParticleSystemPlayable.prototype;

        _proto.instantiate = function instantiate(root) {
          var node = root.getChildByPath(this.path);

          if (!node) {
            warn("Hierarchy path " + this.path + " does not exists.");
            return null;
          }

          var ParticleSystemConstructor = getClassByName("cc.ParticleSystem");

          if (!ParticleSystemConstructor) {
            warn("Particle system is required for embedded particle system player.");
            return null;
          }

          var particleSystem = node.getComponent(ParticleSystemConstructor);

          if (!particleSystem) {
            warn(this.path + " does not includes a particle system component.");
            return null;
          }

          return new EmbeddedParticleSystemPlayableState(particleSystem);
        };

        return EmbeddedParticleSystemPlayable;
      }(EmbeddedPlayable), (_initializer$R = applyDecoratedInitializer(_class2$10.prototype, "path", [serializable], function () {
        return '';
      })), _class2$10)) || _class$18);

      var EmbeddedParticleSystemPlayableState = function (_EmbeddedPlayableStat) {
        _inheritsLoose(EmbeddedParticleSystemPlayableState, _EmbeddedPlayableStat);

        function EmbeddedParticleSystemPlayableState(particleSystem) {
          var _this2;

          _this2 = _EmbeddedPlayableStat.call(this, false) || this;
          _this2._particleSystem = void 0;
          _this2._particleSystem = particleSystem;
          return _this2;
        }

        var _proto2 = EmbeddedParticleSystemPlayableState.prototype;

        _proto2.destroy = function destroy() {};

        _proto2.play = function play() {
          this._particleSystem.play();
        };

        _proto2.pause = function pause() {
          this._particleSystem.stopEmitting();
        };

        _proto2.stop = function stop() {
          this._particleSystem.stopEmitting();
        };

        _proto2.setSpeed = function setSpeed(speed) {
          this._particleSystem.simulationSpeed = speed;
        };

        return EmbeddedParticleSystemPlayableState;
      }(EmbeddedPlayableState);

      var _dec$19, _class$19, _class2$11, _initializer$S, _dec2$D, _class4$4, _class5$4, _initializer2$A;
      function isPropertyPath(path) {
        return typeof path === 'string' || typeof path === 'number';
      }
      function isCustomPath(path, constructor) {
        return path instanceof constructor;
      }
      var HierarchyPath = (_dec$19 = ccclass('cc.animation.HierarchyPath'), _dec$19(_class$19 = (_class2$11 = function () {
        function HierarchyPath(path) {
          this.path = _initializer$S && _initializer$S();
          this.path = path || '';
        }

        var _proto = HierarchyPath.prototype;

        _proto.get = function get(target) {
          if (!(target instanceof Node$1)) {
            warnID(3925);
            return null;
          }

          var result = target.getChildByPath(this.path);

          if (!result) {
            warnID(3926, target.name, this.path);
            return null;
          }

          return result;
        };

        return HierarchyPath;
      }(), (_initializer$S = applyDecoratedInitializer(_class2$11.prototype, "path", [serializable], function () {
        return '';
      })), _class2$11)) || _class$19);
      var ComponentPath = (_dec2$D = ccclass('cc.animation.ComponentPath'), _dec2$D(_class4$4 = (_class5$4 = function () {
        function ComponentPath(component) {
          this.component = _initializer2$A && _initializer2$A();
          this.component = component || '';
        }

        var _proto2 = ComponentPath.prototype;

        _proto2.get = function get(target) {
          if (!(target instanceof Node$1)) {
            warnID(3927);
            return null;
          }

          var result = target.getComponent(this.component);

          if (!result) {
            warnID(3928, target.name, this.component);
            return null;
          }

          return result;
        };

        return ComponentPath;
      }(), (_initializer2$A = applyDecoratedInitializer(_class5$4.prototype, "component", [serializable], function () {
        return '';
      })), _class5$4)) || _class4$4);

      var _dec$1a, _class$1a, _class2$12, _initializer$T, _dec2$E, _class4$5, _class5$5, _initializer2$B, _initializer3$r, _class6, _temp$u, _dec3$l, _class7$3, _class8$3, _initializer4$m, _dec4$a, _class10$3, _class11$3, _initializer5$f, _dec5$7, _class13$3, _class14$3, _initializer6$b;
      var normalizedFollowTag = Symbol('NormalizedFollow');
      var parseTrsPathTag = Symbol('ConvertAsTrsPath');
      var trackBindingTag = Symbol('TrackBinding');
      var TrackPath = (_dec$1a = ccclass(CLASS_NAME_PREFIX_ANIM + "TrackPath"), _dec$1a(_class$1a = (_class2$12 = function () {
        function TrackPath() {
          this._paths = _initializer$T && _initializer$T();
        }

        var _proto = TrackPath.prototype;

        _proto.toProperty = function toProperty(name) {
          this._paths.push(name);

          return this;
        };

        _proto.toElement = function toElement(index) {
          this._paths.push(index);

          return this;
        };

        _proto.toHierarchy = function toHierarchy(nodePath) {
          this._paths.push(new HierarchyPath(nodePath));

          return this;
        };

        _proto.toComponent = function toComponent(constructor) {
          var path = new ComponentPath(typeof constructor === 'string' ? constructor : getClassName(constructor));

          this._paths.push(path);

          return this;
        };

        _proto.toCustomized = function toCustomized(resolver) {
          this._paths.push(resolver);

          return this;
        };

        _proto.append = function append() {
          var _this$_paths;

          for (var _len = arguments.length, trackPaths = new Array(_len), _key = 0; _key < _len; _key++) {
            trackPaths[_key] = arguments[_key];
          }

          var paths = (_this$_paths = this._paths).concat.apply(_this$_paths, trackPaths.map(function (trackPath) {
            return trackPath._paths;
          }));

          this._paths = paths;
          return this;
        };

        _proto.isPropertyAt = function isPropertyAt(index) {
          return typeof this._paths[index] === 'string';
        };

        _proto.parsePropertyAt = function parsePropertyAt(index) {
          return this._paths[index];
        };

        _proto.isElementAt = function isElementAt(index) {
          return typeof this._paths[index] === 'number';
        };

        _proto.parseElementAt = function parseElementAt(index) {
          return this._paths[index];
        };

        _proto.isHierarchyAt = function isHierarchyAt(index) {
          return this._paths[index] instanceof HierarchyPath;
        };

        _proto.parseHierarchyAt = function parseHierarchyAt(index) {
          assertIsTrue(this.isHierarchyAt(index));
          return this._paths[index].path;
        };

        _proto.isComponentAt = function isComponentAt(index) {
          return this._paths[index] instanceof ComponentPath;
        };

        _proto.parseComponentAt = function parseComponentAt(index) {
          assertIsTrue(this.isComponentAt(index));
          return this._paths[index].component;
        };

        _proto.slice = function slice(beginIndex, endIndex) {
          var trackPath = new TrackPath();
          trackPath._paths = this._paths.slice(beginIndex, endIndex);
          return trackPath;
        };

        _proto.trace = function trace(object, beginIndex, endIndex) {
          var _beginIndex, _endIndex;

          (_beginIndex = beginIndex) !== null && _beginIndex !== void 0 ? _beginIndex : beginIndex = 0;
          (_endIndex = endIndex) !== null && _endIndex !== void 0 ? _endIndex : endIndex = this._paths.length;
          return this[normalizedFollowTag](object, beginIndex, endIndex);
        };

        _proto[parseTrsPathTag] = function () {
          var paths = this._paths;
          var nPaths = paths.length;
          var iPath = 0;
          var nodePath = '';

          for (; iPath < nPaths; ++iPath) {
            var path = paths[iPath];

            if (!(path instanceof HierarchyPath)) {
              break;
            } else if (!path.path) {
              continue;
            } else if (nodePath) {
              nodePath += "/" + path.path;
            } else {
              nodePath = path.path;
            }
          }

          if (iPath === nPaths) {
            return null;
          }

          var prs;

          if (iPath !== nPaths - 1) {
            return null;
          }

          switch (paths[iPath]) {
            case 'position':
            case 'scale':
            case 'rotation':
            case 'eulerAngles':
              prs = paths[iPath];
              break;

            default:
              return null;
          }

          return {
            node: nodePath,
            property: prs
          };
        };

        _proto[normalizedFollowTag] = function (root, beginIndex, endIndex) {
          var paths = this._paths;
          var result = root;

          for (var iPath = beginIndex; iPath < endIndex; ++iPath) {
            var path = paths[iPath];

            if (isPropertyPath(path)) {
              if (!(path in result)) {
                warnID(3929, path);
                return null;
              } else {
                result = result[path];
              }
            } else {
              result = path.get(result);
            }

            if (result === null) {
              break;
            }
          }

          return result;
        };

        _createClass(TrackPath, [{
          key: "length",
          get: function get() {
            return this._paths.length;
          }
        }]);

        return TrackPath;
      }(), (_initializer$T = applyDecoratedInitializer(_class2$12.prototype, "_paths", [serializable], function () {
        return [];
      })), _class2$12)) || _class$1a);
      var TrackBinding = (_dec2$E = ccclass(CLASS_NAME_PREFIX_ANIM + "TrackBinding"), _dec2$E(_class4$5 = uniquelyReferenced(_class4$5 = (_class5$5 = (_temp$u = _class6 = function () {
        function TrackBinding() {
          this.path = _initializer2$B && _initializer2$B();
          this.proxy = _initializer3$r && _initializer3$r();
        }

        var _proto2 = TrackBinding.prototype;

        _proto2.parseTrsPath = function parseTrsPath() {
          if (this.proxy) {
            return null;
          } else {
            return this.path[parseTrsPathTag]();
          }
        };

        _proto2.createRuntimeBinding = function createRuntimeBinding(target, poseOutput, isConstant) {
          var path = this.path,
              proxy = this.proxy;
          var nPaths = path.length;
          var iLastPath = nPaths - 1;

          if (nPaths !== 0 && (path.isPropertyAt(iLastPath) || path.isElementAt(iLastPath)) && !proxy) {
            var lastPropertyKey = path.isPropertyAt(iLastPath) ? path.parsePropertyAt(iLastPath) : path.parseElementAt(iLastPath);
            var resultTarget = path[normalizedFollowTag](target, 0, nPaths - 1);

            if (resultTarget === null) {
              return null;
            }

            if (poseOutput && resultTarget instanceof Node$1 && isTrsPropertyName(lastPropertyKey)) {
              var blendStateWriter = poseOutput.createPoseWriter(resultTarget, lastPropertyKey, isConstant);
              return blendStateWriter;
            }

            var _setValue;

            var _getValue;

            {
              var animationFunction = TrackBinding._animationFunctions.get(resultTarget.constructor);

              if (!animationFunction) {
                animationFunction = new Map();

                TrackBinding._animationFunctions.set(resultTarget.constructor, animationFunction);
              }

              var accessor = animationFunction.get(lastPropertyKey);

              if (!accessor) {
                accessor = {
                  setValue: Function('value', "this.target." + lastPropertyKey + " = value;"),
                  getValue: Function("return this.target." + lastPropertyKey + ";")
                };
                animationFunction.set(lastPropertyKey, accessor);
              }

              _setValue = accessor.setValue;
              _getValue = accessor.getValue;
            }

            return {
              target: resultTarget,
              setValue: _setValue,
              getValue: _getValue
            };
          } else if (!proxy) {
            errorID(3921);
            return null;
          } else {
            var _resultTarget = path[normalizedFollowTag](target, 0, nPaths);

            if (_resultTarget === null) {
              return null;
            }

            var runtimeProxy = proxy.forTarget(_resultTarget);
            var _binding = {
              setValue: function setValue(value) {
                runtimeProxy.set(value);
              }
            };
            var proxyGet = runtimeProxy.get;

            if (proxyGet) {
              _binding.getValue = function () {
                return proxyGet.call(runtimeProxy);
              };
            }

            return _binding;
          }
        };

        _proto2.isMaskedOff = function isMaskedOff(mask) {
          var trsPath = this.parseTrsPath();

          if (!trsPath) {
            return false;
          }

          var joints = mask.joints[Symbol.iterator]();

          for (var jointMaskInfoIter = joints.next(); !jointMaskInfoIter.done; jointMaskInfoIter = joints.next()) {
            var _jointMaskInfoIter = jointMaskInfoIter,
                jointMaskInfo = _jointMaskInfoIter.value;

            if (jointMaskInfo.path !== trsPath.node) {
              continue;
            }

            return !jointMaskInfo.enabled;
          }

          return false;
        };

        return TrackBinding;
      }(), _class6._animationFunctions = new WeakMap(), _temp$u), (_initializer2$B = applyDecoratedInitializer(_class5$5.prototype, "path", [serializable], function () {
        return new TrackPath();
      }), _initializer3$r = applyDecoratedInitializer(_class5$5.prototype, "proxy", [serializable], null)), _class5$5)) || _class4$5) || _class4$5);

      function isTrsPropertyName(name) {
        return name === 'position' || name === 'rotation' || name === 'scale' || name === 'eulerAngles';
      }
      var Track = (_dec3$l = ccclass(CLASS_NAME_PREFIX_ANIM + "Track"), _dec3$l(_class7$3 = (_class8$3 = function () {
        function Track() {
          this._binding = _initializer4$m && _initializer4$m();
        }

        var _proto3 = Track.prototype;

        _proto3.channels = function channels() {
          return [];
        };

        _proto3.range = function range() {
          var range = {
            min: Infinity,
            max: -Infinity
          };

          for (var _iterator = _createForOfIteratorHelperLoose(this.channels()), _step; !(_step = _iterator()).done;) {
            var channel = _step.value;
            range.min = Math.min(range.min, channel.curve.rangeMin);
            range.max = Math.max(range.max, channel.curve.rangeMax);
          }

          return range;
        };

        _createClass(Track, [{
          key: "path",
          get: function get() {
            return this._binding.path;
          },
          set: function set(value) {
            this._binding.path = value;
          }
        }, {
          key: "proxy",
          get: function get() {
            return this._binding.proxy;
          },
          set: function set(value) {
            this._binding.proxy = value;
          }
        }, {
          key: trackBindingTag,
          get: function get() {
            return this._binding;
          }
        }]);

        return Track;
      }(), (_initializer4$m = applyDecoratedInitializer(_class8$3.prototype, "_binding", [serializable], function () {
        return new TrackBinding();
      })), _class8$3)) || _class7$3);
      var Channel = (_dec4$a = ccclass(CLASS_NAME_PREFIX_ANIM + "Channel"), _dec4$a(_class10$3 = (_class11$3 = function () {
        function Channel(curve) {
          this.name = '';
          this._curve = _initializer5$f && _initializer5$f();
          this._curve = curve;
        }

        _createClass(Channel, [{
          key: "curve",
          get: function get() {
            return this._curve;
          }
        }]);

        return Channel;
      }(), (_initializer5$f = applyDecoratedInitializer(_class11$3.prototype, "_curve", [serializable], null)), _class11$3)) || _class10$3);
      var SingleChannelTrack = (_dec5$7 = ccclass(CLASS_NAME_PREFIX_ANIM + "SingleChannelTrack"), _dec5$7(_class13$3 = (_class14$3 = function (_Track) {
        _inheritsLoose(SingleChannelTrack, _Track);

        function SingleChannelTrack() {
          var _this;

          _this = _Track.call(this) || this;
          _this._channel = _initializer6$b && _initializer6$b();
          _this._channel = new Channel(_this.createCurve());
          return _this;
        }

        var _proto4 = SingleChannelTrack.prototype;

        _proto4.channels = function channels() {
          return [this._channel];
        };

        _proto4.createCurve = function createCurve() {
          throw new Error("Not impl");
        };

        _proto4[createEvalSymbol] = function (_runtimeBinding) {
          var curve = this._channel.curve;
          return new SingleChannelTrackEval(curve);
        };

        _createClass(SingleChannelTrack, [{
          key: "channel",
          get: function get() {
            return this._channel;
          }
        }]);

        return SingleChannelTrack;
      }(Track), (_initializer6$b = applyDecoratedInitializer(_class14$3.prototype, "_channel", [serializable], null)), _class14$3)) || _class13$3);

      var SingleChannelTrackEval = function () {
        function SingleChannelTrackEval(_curve) {
          this._curve = _curve;
        }

        var _proto5 = SingleChannelTrackEval.prototype;

        _proto5.evaluate = function evaluate(time) {
          return this._curve.evaluate(time);
        };

        return SingleChannelTrackEval;
      }();

      var _dec$1b, _class$1b, _class2$13, _initializer$U;
      var ccclass$4 = ccclass,
          serializable$3 = serializable;
      var RealArrayTrack = (_dec$1b = ccclass$4(CLASS_NAME_PREFIX_ANIM + "RealArrayTrack"), _dec$1b(_class$1b = (_class2$13 = function (_Track) {
        _inheritsLoose(RealArrayTrack, _Track);

        function RealArrayTrack() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Track.call.apply(_Track, [this].concat(args)) || this;
          _this._channels = _initializer$U && _initializer$U();
          return _this;
        }

        var _proto = RealArrayTrack.prototype;

        _proto.channels = function channels() {
          return this._channels;
        };

        _proto[createEvalSymbol] = function () {
          return new RealArrayTrackEval(this._channels.map(function (_ref) {
            var curve = _ref.curve;
            return curve;
          }));
        };

        _createClass(RealArrayTrack, [{
          key: "elementCount",
          get: function get() {
            return this._channels.length;
          },
          set: function set(value) {
            var channels = this._channels;
            var nChannels = channels.length;

            if (value < nChannels) {
              this._channels.splice(value);
            } else if (value > nChannels) {
              var _this$_channels;

              (_this$_channels = this._channels).push.apply(_this$_channels, Array.from({
                length: value - nChannels
              }, function () {
                return new Channel(new RealCurve());
              }));
            }
          }
        }]);

        return RealArrayTrack;
      }(Track), (_initializer$U = applyDecoratedInitializer(_class2$13.prototype, "_channels", [serializable$3], function () {
        return [];
      })), _class2$13)) || _class$1b);
      var RealArrayTrackEval = function () {
        function RealArrayTrackEval(_curves) {
          this._curves = _curves;
          this._result = new Array(_curves.length).fill(0.0);
        }

        var _proto2 = RealArrayTrackEval.prototype;

        _proto2.evaluate = function evaluate(time, _runtimeBinding) {
          var result = this._result;
          var nElements = result.length;

          for (var iElement = 0; iElement < nElements; ++iElement) {
            result[iElement] = this._curves[iElement].evaluate(time);
          }

          return this._result;
        };

        return RealArrayTrackEval;
      }();

      var _dec$1c, _class$1c, _class2$14, _initializer$V, _initializer2$C, _descriptor;
      var UniformProxyFactory = (_dec$1c = ccclass('cc.animation.UniformProxyFactory'), _dec$1c(_class$1c = (_class2$14 = function () {
        function UniformProxyFactory(uniformName, passIndex) {
          this.passIndex = _initializer$V && _initializer$V();
          this.uniformName = _initializer2$C && _initializer2$C();

          _initializerDefineProperty(this, "channelIndex", _descriptor, this);

          this.passIndex = passIndex || 0;
          this.uniformName = uniformName || '';
        }

        var _proto = UniformProxyFactory.prototype;

        _proto.forTarget = function forTarget(target) {
          var pass = target.passes[this.passIndex];
          var handle = pass.getHandle(this.uniformName);

          if (!handle) {
            throw new Error("Material \"" + target.name + "\" has no uniform \"" + this.uniformName + "\"");
          }

          var type = Pass.getTypeFromHandle(handle);

          if (type < Type.SAMPLER1D) {
            var realHandle = this.channelIndex === undefined ? handle : pass.getHandle(this.uniformName, this.channelIndex, Type.FLOAT);

            if (!realHandle) {
              throw new Error("Uniform \"" + this.uniformName + " (in material " + target.name + ") has no channel " + this.channelIndex + "\"");
            }

            if (isUniformArray(pass, this.uniformName)) {
              return {
                set: function set(value) {
                  pass.setUniformArray(realHandle, value);
                }
              };
            }

            return {
              set: function set(value) {
                pass.setUniform(realHandle, value);
              }
            };
          } else {
            var binding = Pass.getBindingFromHandle(handle);
            var prop = pass.properties[this.uniformName];
            var texName = prop && prop.value ? "" + prop.value + getStringFromType(prop.type) : getDefaultFromType(prop.type);
            var dftTex = builtinResMgr.get(texName);

            if (!dftTex) {
              warn("Illegal texture default value: " + texName + ".");
              dftTex = builtinResMgr.get('default-texture');
            }

            return {
              set: function set(value) {
                if (!value) {
                  value = dftTex;
                }

                var texture = value.getGFXTexture();

                if (!texture || !texture.width || !texture.height) {
                  return;
                }

                pass.bindTexture(binding, texture);

                if (value instanceof TextureBase) {
                  pass.bindSampler(binding, deviceManager.gfxDevice.getSampler(value.getSamplerInfo()));
                }
              }
            };
          }
        };

        return UniformProxyFactory;
      }(), (_initializer$V = applyDecoratedInitializer(_class2$14.prototype, "passIndex", [serializable], function () {
        return 0;
      }), _initializer2$C = applyDecoratedInitializer(_class2$14.prototype, "uniformName", [serializable], function () {
        return '';
      }), _descriptor = _applyDecoratedDescriptor(_class2$14.prototype, "channelIndex", [_float], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return undefined;
        }
      })), _class2$14)) || _class$1c);

      function isUniformArray(pass, name) {
        for (var _iterator = _createForOfIteratorHelperLoose(pass.shaderInfo.blocks), _step; !(_step = _iterator()).done;) {
          var block = _step.value;

          for (var _iterator2 = _createForOfIteratorHelperLoose(block.members), _step2; !(_step2 = _iterator2()).done;) {
            var uniform = _step2.value;

            if (uniform.name === name) {
              return uniform.count > 1;
            }
          }
        }

        return false;
      }

      var _dec$1d, _class$1d, _class2$15, _initializer$W, _initializer2$D, _dec2$F, _class4$6, _class5$6, _initializer3$s, _dec3$m, _class7$4;
      var MorphWeightValueProxy = (_dec$1d = ccclass('cc.animation.MorphWeightValueProxy'), _dec$1d(_class$1d = (_class2$15 = function () {
        function MorphWeightValueProxy() {
          this.subMeshIndex = _initializer$W && _initializer$W();
          this.shapeIndex = _initializer2$D && _initializer2$D();
        }

        var _proto = MorphWeightValueProxy.prototype;

        _proto.forTarget = function forTarget(target) {
          var _this = this;

          return {
            set: function set(value) {
              target.setWeight(value, _this.subMeshIndex, _this.shapeIndex);
            }
          };
        };

        return MorphWeightValueProxy;
      }(), (_initializer$W = applyDecoratedInitializer(_class2$15.prototype, "subMeshIndex", [serializable], function () {
        return 0;
      }), _initializer2$D = applyDecoratedInitializer(_class2$15.prototype, "shapeIndex", [serializable], function () {
        return 0;
      })), _class2$15)) || _class$1d);
      var MorphWeightsValueProxy = (_dec2$F = ccclass('cc.animation.MorphWeightsValueProxy'), _dec2$F(_class4$6 = (_class5$6 = function () {
        function MorphWeightsValueProxy() {
          this.subMeshIndex = _initializer3$s && _initializer3$s();
        }

        var _proto2 = MorphWeightsValueProxy.prototype;

        _proto2.forTarget = function forTarget(target) {
          var _this2 = this;

          return {
            set: function set(value) {
              target.setWeights(value, _this2.subMeshIndex);
            }
          };
        };

        return MorphWeightsValueProxy;
      }(), (_initializer3$s = applyDecoratedInitializer(_class5$6.prototype, "subMeshIndex", [serializable], function () {
        return 0;
      })), _class5$6)) || _class4$6);
      var MorphWeightsAllValueProxy = (_dec3$m = ccclass('cc.animation.MorphWeightsAllValueProxy'), _dec3$m(_class7$4 = function () {
        function MorphWeightsAllValueProxy() {}

        var _proto3 = MorphWeightsAllValueProxy.prototype;

        _proto3.forTarget = function forTarget(target) {
          return {
            set: function set(value) {
              var _target$mesh$struct$p, _target$mesh;

              var nSubMeshes = (_target$mesh$struct$p = (_target$mesh = target.mesh) === null || _target$mesh === void 0 ? void 0 : _target$mesh.struct.primitives.length) !== null && _target$mesh$struct$p !== void 0 ? _target$mesh$struct$p : 0;

              for (var iSubMesh = 0; iSubMesh < nSubMeshes; ++iSubMesh) {
                target.setWeights(value, iSubMesh);
              }
            }
          };
        };

        return MorphWeightsAllValueProxy;
      }()) || _class7$4);

      var _dec2$G, _class4$7, _class5$7, _initializer4$n, _initializer5$g, _initializer6$c;

      function makeCubicSplineValueConstructor(name, constructorX, scaleFx, scaleAndAdd) {
        var _dec, _class, _class2, _initializer, _initializer2, _initializer3;

        var tempValue = new constructorX();
        var m0 = new constructorX();
        var m1 = new constructorX();
        var CubicSplineValueClass = (_dec = ccclass(name), _dec(_class = (_class2 = function () {
          function CubicSplineValueClass(dataPoint, inTangent, outTangent) {
            this.dataPoint = _initializer && _initializer();
            this.inTangent = _initializer2 && _initializer2();
            this.outTangent = _initializer3 && _initializer3();
            this.dataPoint = dataPoint || new constructorX();
            this.inTangent = inTangent || new constructorX();
            this.outTangent = outTangent || new constructorX();
          }

          var _proto = CubicSplineValueClass.prototype;

          _proto.lerp = function lerp(to, t, dt) {
            var p0 = this.dataPoint;
            var p1 = to.dataPoint;
            m0 = scaleFx(m0, this.inTangent, dt);
            m1 = scaleFx(m1, to.outTangent, dt);
            var t_3 = t * t * t;
            var t_2 = t * t;
            var f_0 = 2 * t_3 - 3 * t_2 + 1;
            var f_1 = t_3 - 2 * t_2 + t;
            var f_2 = -2 * t_3 + 3 * t_2;
            var f_3 = t_3 - t_2;
            tempValue = scaleFx(tempValue, p0, f_0);
            tempValue = scaleAndAdd(tempValue, tempValue, m0, f_1);
            tempValue = scaleAndAdd(tempValue, tempValue, p1, f_2);
            tempValue = scaleAndAdd(tempValue, tempValue, m1, f_3);
            return tempValue;
          };

          _proto.getNoLerp = function getNoLerp() {
            return this.dataPoint;
          };

          return CubicSplineValueClass;
        }(), (_initializer = applyDecoratedInitializer(_class2.prototype, "dataPoint", [serializable], function () {
          return new constructorX();
        }), _initializer2 = applyDecoratedInitializer(_class2.prototype, "inTangent", [serializable], function () {
          return new constructorX();
        }), _initializer3 = applyDecoratedInitializer(_class2.prototype, "outTangent", [serializable], function () {
          return new constructorX();
        })), _class2)) || _class);

        if (constructorX === Quat) {
          var _lerp = CubicSplineValueClass.prototype.lerp;

          CubicSplineValueClass.prototype.lerp = function (to, t, dt) {
            var result = _lerp.call(this, to, t, dt);

            Quat.normalize(result, result);
            return result;
          };
        }

        return CubicSplineValueClass;
      }

      var CubicSplineVec2Value = makeCubicSplineValueConstructor('cc.CubicSplineVec2Value', Vec2, Vec2.multiplyScalar, Vec2.scaleAndAdd);
      var CubicSplineVec3Value = makeCubicSplineValueConstructor('cc.CubicSplineVec3Value', Vec3, Vec3.multiplyScalar, Vec3.scaleAndAdd);
      var CubicSplineVec4Value = makeCubicSplineValueConstructor('cc.CubicSplineVec4Value', Vec4, Vec4.multiplyScalar, Vec4.scaleAndAdd);
      var CubicSplineQuatValue = makeCubicSplineValueConstructor('cc.CubicSplineQuatValue', Quat, Quat.multiplyScalar, Quat.scaleAndAdd);
      var CubicSplineNumberValue = (_dec2$G = ccclass('cc.CubicSplineNumberValue'), _dec2$G(_class4$7 = (_class5$7 = function () {
        function CubicSplineNumberValue(dataPoint, inTangent, outTangent) {
          this.dataPoint = _initializer4$n && _initializer4$n();
          this.inTangent = _initializer5$g && _initializer5$g();
          this.outTangent = _initializer6$c && _initializer6$c();
          this.dataPoint = dataPoint;
          this.inTangent = inTangent;
          this.outTangent = outTangent;
        }

        var _proto2 = CubicSplineNumberValue.prototype;

        _proto2.lerp = function lerp(to, t, dt) {
          var p0 = this.dataPoint;
          var p1 = to.dataPoint;
          var m0 = this.outTangent * dt;
          var m1 = to.inTangent * dt;
          var t_3 = t * t * t;
          var t_2 = t * t;
          var f_0 = 2 * t_3 - 3 * t_2 + 1;
          var f_1 = t_3 - 2 * t_2 + t;
          var f_2 = -2 * t_3 + 3 * t_2;
          var f_3 = t_3 - t_2;
          return p0 * f_0 + m0 * f_1 + p1 * f_2 + m1 * f_3;
        };

        _proto2.getNoLerp = function getNoLerp() {
          return this.dataPoint;
        };

        return CubicSplineNumberValue;
      }(), (_initializer4$n = applyDecoratedInitializer(_class5$7.prototype, "dataPoint", [serializable], function () {
        return 0;
      }), _initializer5$g = applyDecoratedInitializer(_class5$7.prototype, "inTangent", [serializable], function () {
        return 0;
      }), _initializer6$c = applyDecoratedInitializer(_class5$7.prototype, "outTangent", [serializable], function () {
        return 0;
      })), _class5$7)) || _class4$7);

      var _dec$1e, _class$1e;
      var RealTrack = (_dec$1e = ccclass(CLASS_NAME_PREFIX_ANIM + "RealTrack"), _dec$1e(_class$1e = function (_SingleChannelTrack) {
        _inheritsLoose(RealTrack, _SingleChannelTrack);

        function RealTrack() {
          return _SingleChannelTrack.apply(this, arguments) || this;
        }

        var _proto = RealTrack.prototype;

        _proto.createCurve = function createCurve() {
          return new RealCurve();
        };

        return RealTrack;
      }(SingleChannelTrack)) || _class$1e);

      function maskIfEmpty(curve) {
        return curve.keyFramesCount === 0 ? undefined : curve;
      }

      var _dec$1f, _class$1f, _class2$16, _initializer$X, _initializer2$E;
      var CHANNEL_NAMES = ['X', 'Y', 'Z', 'W'];
      var VectorTrack = (_dec$1f = ccclass(CLASS_NAME_PREFIX_ANIM + "VectorTrack"), _dec$1f(_class$1f = (_class2$16 = function (_Track) {
        _inheritsLoose(VectorTrack, _Track);

        function VectorTrack() {
          var _this;

          _this = _Track.call(this) || this;
          _this._channels = _initializer$X && _initializer$X();
          _this._nComponents = _initializer2$E && _initializer2$E();
          _this._channels = new Array(4);

          for (var i = 0; i < _this._channels.length; ++i) {
            var channel = new Channel(new RealCurve());
            channel.name = CHANNEL_NAMES[i];
            _this._channels[i] = channel;
          }

          return _this;
        }

        var _proto = VectorTrack.prototype;

        _proto.channels = function channels() {
          return this._channels;
        };

        _proto[createEvalSymbol] = function () {
          switch (this._nComponents) {
            default:
            case 2:
              return new Vec2TrackEval(maskIfEmpty(this._channels[0].curve), maskIfEmpty(this._channels[1].curve));

            case 3:
              return new Vec3TrackEval(maskIfEmpty(this._channels[0].curve), maskIfEmpty(this._channels[1].curve), maskIfEmpty(this._channels[2].curve));

            case 4:
              return new Vec4TrackEval(maskIfEmpty(this._channels[0].curve), maskIfEmpty(this._channels[1].curve), maskIfEmpty(this._channels[2].curve), maskIfEmpty(this._channels[3].curve));
          }
        };

        _createClass(VectorTrack, [{
          key: "componentsCount",
          get: function get() {
            return this._nComponents;
          },
          set: function set(value) {
            this._nComponents = value;
          }
        }]);

        return VectorTrack;
      }(Track), (_initializer$X = applyDecoratedInitializer(_class2$16.prototype, "_channels", [serializable], null), _initializer2$E = applyDecoratedInitializer(_class2$16.prototype, "_nComponents", [serializable], function () {
        return 4;
      })), _class2$16)) || _class$1f);
      var Vec2TrackEval = function () {
        function Vec2TrackEval(_x, _y) {
          this._result = new Vec2();
          this._x = _x;
          this._y = _y;
        }

        var _proto2 = Vec2TrackEval.prototype;

        _proto2.evaluate = function evaluate(time, runtimeBinding) {
          if ((!this._x || !this._y) && runtimeBinding.getValue) {
            Vec2.copy(this._result, runtimeBinding.getValue());
          }

          if (this._x) {
            this._result.x = this._x.evaluate(time);
          }

          if (this._y) {
            this._result.y = this._y.evaluate(time);
          }

          return this._result;
        };

        return Vec2TrackEval;
      }();
      var Vec3TrackEval = function () {
        function Vec3TrackEval(_x, _y, _z) {
          this._result = new Vec3();
          this._x = _x;
          this._y = _y;
          this._z = _z;
        }

        var _proto3 = Vec3TrackEval.prototype;

        _proto3.evaluate = function evaluate(time, runtimeBinding) {
          if ((!this._x || !this._y || !this._z) && runtimeBinding.getValue) {
            Vec3.copy(this._result, runtimeBinding.getValue());
          }

          if (this._x) {
            this._result.x = this._x.evaluate(time);
          }

          if (this._y) {
            this._result.y = this._y.evaluate(time);
          }

          if (this._z) {
            this._result.z = this._z.evaluate(time);
          }

          return this._result;
        };

        return Vec3TrackEval;
      }();
      var Vec4TrackEval = function () {
        function Vec4TrackEval(_x, _y, _z, _w) {
          this._result = new Vec4();
          this._x = _x;
          this._y = _y;
          this._z = _z;
          this._w = _w;
        }

        var _proto4 = Vec4TrackEval.prototype;

        _proto4.evaluate = function evaluate(time, runtimeBinding) {
          if ((!this._x || !this._y || !this._z || !this._w) && runtimeBinding.getValue) {
            Vec4.copy(this._result, runtimeBinding.getValue());
          }

          if (this._x) {
            this._result.x = this._x.evaluate(time);
          }

          if (this._y) {
            this._result.y = this._y.evaluate(time);
          }

          if (this._z) {
            this._result.z = this._z.evaluate(time);
          }

          if (this._w) {
            this._result.w = this._w.evaluate(time);
          }

          return this._result;
        };

        return Vec4TrackEval;
      }();

      var _dec$1g, _class$1g;
      var QuatTrack = (_dec$1g = ccclass(CLASS_NAME_PREFIX_ANIM + "QuatTrack"), _dec$1g(_class$1g = function (_SingleChannelTrack) {
        _inheritsLoose(QuatTrack, _SingleChannelTrack);

        function QuatTrack() {
          return _SingleChannelTrack.apply(this, arguments) || this;
        }

        var _proto = QuatTrack.prototype;

        _proto.createCurve = function createCurve() {
          return new QuatCurve();
        };

        _proto[createEvalSymbol] = function () {
          return new QuatTrackEval(this.channels()[0].curve);
        };

        return QuatTrack;
      }(SingleChannelTrack)) || _class$1g);
      var QuatTrackEval = function () {
        function QuatTrackEval(_curve) {
          this._result = new Quat();
          this._curve = _curve;
        }

        var _proto2 = QuatTrackEval.prototype;

        _proto2.evaluate = function evaluate(time) {
          this._curve.evaluate(time, this._result);

          return this._result;
        };

        return QuatTrackEval;
      }();

      var _dec$1h, _class$1h, _class2$17, _initializer$Y;
      var CHANNEL_NAMES$1 = ['Red', 'Green', 'Blue', 'Alpha'];
      var ColorTrack = (_dec$1h = ccclass(CLASS_NAME_PREFIX_ANIM + "ColorTrack"), _dec$1h(_class$1h = (_class2$17 = function (_Track) {
        _inheritsLoose(ColorTrack, _Track);

        function ColorTrack() {
          var _this;

          _this = _Track.call(this) || this;
          _this._channels = _initializer$Y && _initializer$Y();
          _this._channels = new Array(4);

          for (var i = 0; i < _this._channels.length; ++i) {
            var channel = new Channel(new RealCurve());
            channel.name = CHANNEL_NAMES$1[i];
            _this._channels[i] = channel;
          }

          return _this;
        }

        var _proto = ColorTrack.prototype;

        _proto.channels = function channels() {
          return this._channels;
        };

        _proto[createEvalSymbol] = function () {
          return new ColorTrackEval(maskIfEmpty(this._channels[0].curve), maskIfEmpty(this._channels[1].curve), maskIfEmpty(this._channels[2].curve), maskIfEmpty(this._channels[3].curve));
        };

        return ColorTrack;
      }(Track), (_initializer$Y = applyDecoratedInitializer(_class2$17.prototype, "_channels", [serializable], null)), _class2$17)) || _class$1h);
      var ColorTrackEval = function () {
        function ColorTrackEval(_x, _y, _z, _w) {
          this._result = new Color();
          this._x = _x;
          this._y = _y;
          this._z = _z;
          this._w = _w;
        }

        var _proto2 = ColorTrackEval.prototype;

        _proto2.evaluate = function evaluate(time, runtimeBinding) {
          if ((!this._x || !this._y || !this._z || !this._w) && runtimeBinding.getValue) {
            Color.copy(this._result, runtimeBinding.getValue());
          }

          if (this._x) {
            this._result.r = this._x.evaluate(time);
          }

          if (this._y) {
            this._result.g = this._y.evaluate(time);
          }

          if (this._z) {
            this._result.b = this._z.evaluate(time);
          }

          if (this._w) {
            this._result.a = this._w.evaluate(time);
          }

          return this._result;
        };

        return ColorTrackEval;
      }();

      var _dec$1i, _class$1i, _class2$18, _initializer$Z;
      var CHANNEL_NAMES$2 = ['Width', 'Height'];
      var SizeTrack = (_dec$1i = ccclass(CLASS_NAME_PREFIX_ANIM + "SizeTrack"), _dec$1i(_class$1i = (_class2$18 = function (_Track) {
        _inheritsLoose(SizeTrack, _Track);

        function SizeTrack() {
          var _this;

          _this = _Track.call(this) || this;
          _this._channels = _initializer$Z && _initializer$Z();
          _this._channels = new Array(2);

          for (var i = 0; i < _this._channels.length; ++i) {
            var channel = new Channel(new RealCurve());
            channel.name = CHANNEL_NAMES$2[i];
            _this._channels[i] = channel;
          }

          return _this;
        }

        var _proto = SizeTrack.prototype;

        _proto.channels = function channels() {
          return this._channels;
        };

        _proto[createEvalSymbol] = function () {
          return new SizeTrackEval(maskIfEmpty(this._channels[0].curve), maskIfEmpty(this._channels[1].curve));
        };

        return SizeTrack;
      }(Track), (_initializer$Z = applyDecoratedInitializer(_class2$18.prototype, "_channels", [serializable], null)), _class2$18)) || _class$1i);
      var SizeTrackEval = function () {
        function SizeTrackEval(_width, _height) {
          this._result = new Size();
          this._width = _width;
          this._height = _height;
        }

        var _proto2 = SizeTrackEval.prototype;

        _proto2.evaluate = function evaluate(time, runtimeBinding) {
          if ((!this._width || !this._height) && runtimeBinding.getValue) {
            var size = runtimeBinding.getValue();
            this._result.x = size.x;
            this._result.y = size.y;
          }

          if (this._width) {
            this._result.width = this._width.evaluate(time);
          }

          if (this._height) {
            this._result.height = this._height.evaluate(time);
          }

          return this._result;
        };

        return SizeTrackEval;
      }();

      var _dec$1j, _class$1j;
      var ObjectTrack = (_dec$1j = ccclass(CLASS_NAME_PREFIX_ANIM + "ObjectTrack"), _dec$1j(_class$1j = function (_SingleChannelTrack) {
        _inheritsLoose(ObjectTrack, _SingleChannelTrack);

        function ObjectTrack() {
          return _SingleChannelTrack.apply(this, arguments) || this;
        }

        var _proto = ObjectTrack.prototype;

        _proto.createCurve = function createCurve() {
          return new ObjectCurve();
        };

        return ObjectTrack;
      }(SingleChannelTrack)) || _class$1j);

      var animation = /*#__PURE__*/Object.freeze({
        __proto__: null,
        UniformProxyFactory: UniformProxyFactory,
        MorphWeightValueProxy: MorphWeightValueProxy,
        MorphWeightsValueProxy: MorphWeightsValueProxy,
        MorphWeightsAllValueProxy: MorphWeightsAllValueProxy,
        Track: Track,
        TrackPath: TrackPath,
        RealTrack: RealTrack,
        VectorTrack: VectorTrack,
        QuatTrack: QuatTrack,
        ColorTrack: ColorTrack,
        SizeTrack: SizeTrack,
        ObjectTrack: ObjectTrack,
        isPropertyPath: isPropertyPath,
        isCustomPath: isCustomPath,
        HierarchyPath: HierarchyPath,
        ComponentPath: ComponentPath,
        CubicSplineVec2Value: CubicSplineVec2Value,
        CubicSplineVec3Value: CubicSplineVec3Value,
        CubicSplineVec4Value: CubicSplineVec4Value,
        CubicSplineQuatValue: CubicSplineQuatValue,
        CubicSplineNumberValue: CubicSplineNumberValue
      });
      exports('animation', animation);

      var RatioSampler = exports('RatioSampler', function () {
        function RatioSampler(ratios) {
          this.ratios = void 0;
          this._findRatio = void 0;
          this.ratios = ratios;
          var currRatioDif;
          var lastRatioDif;
          var canOptimize = true;
          var EPSILON = 1e-6;

          for (var i = 1, l = ratios.length; i < l; i++) {
            currRatioDif = ratios[i] - ratios[i - 1];

            if (i === 1) {
              lastRatioDif = currRatioDif;
            } else if (Math.abs(currRatioDif - lastRatioDif) > EPSILON) {
              canOptimize = false;
              break;
            }
          }

          this._findRatio = canOptimize ? quickFindIndex : binarySearchEpsilon;
        }

        var _proto = RatioSampler.prototype;

        _proto.sample = function sample(ratio) {
          return this._findRatio(this.ratios, ratio);
        };

        return RatioSampler;
      }());
      legacyCC.RatioSampler = RatioSampler;
      var AnimCurve = exports('AnimCurve', function () {
        AnimCurve.Bezier = function Bezier(controlPoints) {
          return controlPoints;
        };

        function AnimCurve(propertyCurveData, duration) {
          this.types = undefined;
          this.type = null;
          this._values = [];
          this._lerp = undefined;
          this._duration = void 0;
          this._array = void 0;
          this._duration = duration;
          this._values = propertyCurveData.values;

          var getCurveType = function getCurveType(easingMethod) {
            if (typeof easingMethod === 'string') {
              return easingMethod;
            } else if (Array.isArray(easingMethod)) {
              if (easingMethod[0] === easingMethod[1] && easingMethod[2] === easingMethod[3]) {
                return AnimCurve.Linear;
              } else {
                return AnimCurve.Bezier(easingMethod);
              }
            } else {
              return AnimCurve.Linear;
            }
          };

          if (propertyCurveData.easingMethod !== undefined) {
            this.type = getCurveType(propertyCurveData.easingMethod);
          } else if (Array.isArray(propertyCurveData.easingMethods)) {
            this.types = propertyCurveData.easingMethods.map(getCurveType);
          } else if (propertyCurveData.easingMethods !== undefined) {
            this.types = new Array(this._values.length).fill(null);

            for (var _i = 0, _Object$keys = Object.keys(propertyCurveData.easingMethods); _i < _Object$keys.length; _i++) {
              var index = _Object$keys[_i];
              this.types[index] = getCurveType(propertyCurveData.easingMethods[index]);
            }
          } else {
            this.type = null;
          }

          var firstValue = propertyCurveData.values[0];
          var interpolate = propertyCurveData.interpolate === undefined ? true : propertyCurveData.interpolate;

          if (interpolate) {
            this._lerp = selectLerpFx(firstValue);
          }

          if (propertyCurveData._arrayLength !== undefined) {
            this._array = new Array(propertyCurveData._arrayLength);
          }
        }

        var _proto2 = AnimCurve.prototype;

        _proto2.hasLerp = function hasLerp() {
          return !!this._lerp;
        };

        _proto2.valueAt = function valueAt(index) {
          if (this._array === undefined) {
            var value = this._values[index];

            if (value && value.getNoLerp) {
              return value.getNoLerp();
            } else {
              return value;
            }
          } else {
            for (var i = 0; i < this._array.length; ++i) {
              this._array[i] = this._values[this._array.length * index + i];
            }

            return this._array;
          }
        };

        _proto2.valueBetween = function valueBetween(ratio, from, fromRatio, to, toRatio) {
          if (this._lerp) {
            var type = this.types ? this.types[from] : this.type;
            var dRatio = toRatio - fromRatio;
            var ratioBetweenFrames = (ratio - fromRatio) / dRatio;

            if (type) {
              ratioBetweenFrames = computeRatioByType(ratioBetweenFrames, type);
            }

            if (this._array === undefined) {
              var fromVal = this._values[from];
              var toVal = this._values[to];

              var value = this._lerp(fromVal, toVal, ratioBetweenFrames, dRatio * this._duration);

              return value;
            } else {
              for (var i = 0; i < this._array.length; ++i) {
                var _fromVal = this._values[this._array.length * from + i];
                var _toVal = this._values[this._array.length * to + i];
                this._array[i] = this._lerp(_fromVal, _toVal, ratioBetweenFrames, dRatio * this._duration);
              }

              return this._array;
            }
          } else if (this._array === undefined) {
            return this.valueAt(from);
          } else {
            for (var _i2 = 0; _i2 < this._array.length; ++_i2) {
              this._array[_i2] = this._values[this._array.length * from + _i2];
            }

            return this._array;
          }
        };

        _proto2.empty = function empty() {
          return this._values.length === 0;
        };

        _proto2.constant = function constant() {
          return this._values.length === 1;
        };

        return AnimCurve;
      }());
      AnimCurve.Linear = null;
      legacyCC.AnimCurve = AnimCurve;
      var EventInfo = exports('EventInfo', function () {
        function EventInfo() {
          this.events = [];
        }

        var _proto3 = EventInfo.prototype;

        _proto3.add = function add(func, params) {
          this.events.push({
            func: func || '',
            params: params || []
          });
        };

        return EventInfo;
      }());
      function sampleAnimationCurve(curve, sampler, ratio) {
        var index = sampler.sample(ratio);

        if (index < 0) {
          index = ~index;

          if (index <= 0) {
            index = 0;
          } else if (index >= sampler.ratios.length) {
            index = sampler.ratios.length - 1;
          } else {
            return curve.valueBetween(ratio, index - 1, sampler.ratios[index - 1], index, sampler.ratios[index]);
          }
        }

        return curve.valueAt(index);
      }
      legacyCC.sampleAnimationCurve = sampleAnimationCurve;
      function computeRatioByType(ratio, type) {
        if (typeof type === 'string') {
          var func = easing[type];

          if (func) {
            ratio = func(ratio);
          } else {
            errorID(3906, type);
          }
        } else if (Array.isArray(type)) {
          ratio = bezierByTime(type, ratio);
        }

        return ratio;
      }

      function quickFindIndex(ratios, ratio) {
        var length = ratios.length - 1;

        if (length === 0) {
          return 0;
        }

        var start = ratios[0];

        if (ratio < start) {
          return 0;
        }

        var end = ratios[length];

        if (ratio > end) {
          return length;
        }

        ratio = (ratio - start) / (end - start);
        var eachLength = 1 / length;
        var index = ratio / eachLength;
        var floorIndex = index | 0;
        var EPSILON = 1e-6;

        if (index - floorIndex < EPSILON) {
          return floorIndex;
        } else if (floorIndex + 1 - index < EPSILON) {
          return floorIndex + 1;
        }

        return ~(floorIndex + 1);
      }

      var selectLerpFx = function () {
        function makeValueTypeLerpFx(constructor) {
          var tempValue = new constructor();
          return function (from, to, ratio) {
            constructor.lerp(tempValue, from, to, ratio);
            return tempValue;
          };
        }

        function callLerpable(from, to, t, dt) {
          return from.lerp(to, t, dt);
        }

        function makeQuatSlerpFx() {
          var tempValue = new Quat();
          return function (from, to, t, dt) {
            return Quat.slerp(tempValue, from, to, t);
          };
        }

        return function (value) {
          if (value === null) {
            return undefined;
          }

          if (typeof value === 'number') {
            return lerp;
          } else if (typeof value === 'object' && value.constructor) {
            if (value instanceof Quat) {
              return makeQuatSlerpFx();
            } else if (value instanceof ValueType) {
              return makeValueTypeLerpFx(value.constructor);
            } else if (value.constructor === Number) {
              return lerp;
            } else if (isLerpable(value)) {
              return callLerpable;
            }
          }

          return undefined;
        };
      }();

      var BAKE_SKELETON_CURVE_SYMBOL = Symbol('BakeNodeCurves');

      var SkelAnimDataHub = function () {
        function SkelAnimDataHub() {}

        SkelAnimDataHub.getOrExtract = function getOrExtract(clip) {
          var data = SkelAnimDataHub.pool.get(clip);

          if (!data || data.samples !== clip.sample) {
            if (data) {
              legacyCC.director.root.dataPoolManager.releaseAnimationClip(clip);
            }

            var frames = Math.ceil(clip.sample * clip.duration) + 1;
            var step = clip.sample;
            data = clip[BAKE_SKELETON_CURVE_SYMBOL](0, step, frames);
            SkelAnimDataHub.pool.set(clip, data);
          }

          return data;
        };

        SkelAnimDataHub.destroy = function destroy(clip) {
          SkelAnimDataHub.pool["delete"](clip);
        };

        return SkelAnimDataHub;
      }();
      SkelAnimDataHub.pool = new Map();

      var _dec$1k, _class$1k, _class2$19, _initializer$_, _dec2$H, _class4$8, _class5$8, _initializer2$F;
      var UntypedTrackChannel = (_dec$1k = ccclass(CLASS_NAME_PREFIX_ANIM + "UntypedTrackChannel"), _dec$1k(_class$1k = (_class2$19 = function (_Channel) {
        _inheritsLoose(UntypedTrackChannel, _Channel);

        function UntypedTrackChannel() {
          var _this;

          _this = _Channel.call(this, new RealCurve()) || this;
          _this.property = _initializer$_ && _initializer$_();
          return _this;
        }

        return UntypedTrackChannel;
      }(Channel), (_initializer$_ = applyDecoratedInitializer(_class2$19.prototype, "property", [serializable], function () {
        return '';
      })), _class2$19)) || _class$1k);
      var UntypedTrack = (_dec2$H = ccclass(CLASS_NAME_PREFIX_ANIM + "UntypedTrack"), _dec2$H(_class4$8 = (_class5$8 = function (_Track) {
        _inheritsLoose(UntypedTrack, _Track);

        function UntypedTrack() {
          var _this2;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this2 = _Track.call.apply(_Track, [this].concat(args)) || this;
          _this2._channels = _initializer2$F && _initializer2$F();
          return _this2;
        }

        var _proto = UntypedTrack.prototype;

        _proto.channels = function channels() {
          return this._channels;
        };

        _proto[createEvalSymbol] = function (runtimeBinding) {
          var _this3 = this;

          if (!runtimeBinding.getValue) {
            throw new Error(getError(3930));
          }

          var trySearchCurve = function trySearchCurve(property) {
            var _this3$_channels$find;

            return (_this3$_channels$find = _this3._channels.find(function (channel) {
              return channel.property === property;
            })) === null || _this3$_channels$find === void 0 ? void 0 : _this3$_channels$find.curve;
          };

          var value = runtimeBinding.getValue();

          switch (true) {
            default:
              throw new Error(getError(3931));

            case value instanceof Vec2:
              return new Vec2TrackEval(trySearchCurve('x'), trySearchCurve('y'));

            case value instanceof Vec3:
              return new Vec3TrackEval(trySearchCurve('x'), trySearchCurve('y'), trySearchCurve('z'));

            case value instanceof Vec4:
              return new Vec4TrackEval(trySearchCurve('x'), trySearchCurve('y'), trySearchCurve('z'), trySearchCurve('w'));

            case value instanceof Color:
              return new ColorTrackEval(trySearchCurve('r'), trySearchCurve('g'), trySearchCurve('b'), trySearchCurve('a'));

            case value instanceof Size:
              return new SizeTrackEval(trySearchCurve('width'), trySearchCurve('height'));
          }
        };

        _proto.addChannel = function addChannel(property) {
          var channel = new UntypedTrackChannel();
          channel.property = property;

          this._channels.push(channel);

          return channel;
        };

        _proto.upgrade = function upgrade(refine) {
          var _this4 = this;

          var trySearchChannel = function trySearchChannel(property, outChannel) {
            var untypedChannel = _this4.channels().find(function (channel) {
              return channel.property === property;
            });

            if (untypedChannel) {
              outChannel.name = untypedChannel.name;
              outChannel.curve.assignSorted(Array.from(untypedChannel.curve.times()), Array.from(untypedChannel.curve.values()));
            }
          };

          var kind = refine(this.path, this.proxy);

          switch (kind) {
            default:
              break;

            case 'vec2':
            case 'vec3':
            case 'vec4':
              {
                var track = new VectorTrack();
                track.path = this.path;
                track.proxy = this.proxy;
                track.componentsCount = kind === 'vec2' ? 2 : kind === 'vec3' ? 3 : 4;

                var _track$channels = track.channels(),
                    x = _track$channels[0],
                    y = _track$channels[1],
                    z = _track$channels[2],
                    w = _track$channels[3];

                switch (kind) {
                  case 'vec4':
                    trySearchChannel('w', w);

                  case 'vec3':
                    trySearchChannel('z', z);

                  default:
                  case 'vec2':
                    trySearchChannel('x', x);
                    trySearchChannel('y', y);
                }

                return track;
              }

            case 'color':
              {
                var _track = new ColorTrack();

                var _track$channels2 = _track.channels(),
                    r = _track$channels2[0],
                    g = _track$channels2[1],
                    b = _track$channels2[2],
                    a = _track$channels2[3];

                trySearchChannel('r', r);
                trySearchChannel('g', g);
                trySearchChannel('b', b);
                trySearchChannel('a', a);
                trySearchChannel('x', r);
                trySearchChannel('y', g);
                trySearchChannel('z', b);
                trySearchChannel('w', a);
                return _track;
              }

            case 'size':
              break;
          }

          return null;
        };

        return UntypedTrack;
      }(Track), (_initializer2$F = applyDecoratedInitializer(_class5$8.prototype, "_channels", [serializable], function () {
        return [];
      })), _class5$8)) || _class4$8);

      var AnimationClipLegacyData = function () {
        function AnimationClipLegacyData(duration) {
          this._keys = [];
          this._curves = [];
          this._commonTargets = [];
          this._ratioSamplers = [];
          this._runtimeCurves = void 0;
          this._data = null;
          this._duration = void 0;
          this._duration = duration;
        }

        var _proto = AnimationClipLegacyData.prototype;

        _proto.getPropertyCurves = function getPropertyCurves() {
          if (!this._runtimeCurves) {
            this._createPropertyCurves();
          }

          return this._runtimeCurves;
        };

        _proto.toTracks = function toTracks() {
          var newTracks = [];
          var legacyKeys = this.keys,
              legacyCurves = this.curves,
              legacyCommonTargets = this.commonTargets;

          var convertTrackPath = function convertTrackPath(track, modifiers, valueAdapter) {
            var trackPath = new TrackPath();

            for (var _iterator = _createForOfIteratorHelperLoose(modifiers), _step; !(_step = _iterator()).done;) {
              var modifier = _step.value;

              if (typeof modifier === 'string') {
                trackPath.toProperty(modifier);
              } else if (typeof modifier === 'number') {
                trackPath.toElement(modifier);
              } else if (modifier instanceof HierarchyPath) {
                trackPath.toHierarchy(modifier.path);
              } else if (modifier instanceof ComponentPath) {
                trackPath.toComponent(modifier.component);
              } else {
                trackPath.toCustomized(modifier);
              }
            }

            track.path = trackPath;
            track.proxy = valueAdapter;
          };

          var untypedTracks = legacyCommonTargets.map(function (legacyCommonTarget) {
            var track = new UntypedTrack();
            convertTrackPath(track, legacyCommonTarget.modifiers, legacyCommonTarget.valueAdapter);
            newTracks.push(track);
            return track;
          });

          var _loop = function _loop() {
            var _legacyCurveData$inte;

            var legacyCurve = _step2.value;
            var legacyCurveData = legacyCurve.data;
            var legacyValues = legacyCurveData.values;

            if (legacyValues.length === 0) {
              return "continue";
            }

            var legacyKeysIndex = legacyCurveData.keys;
            var times = legacyKeysIndex < 0 ? [0.0] : legacyKeys[legacyCurveData.keys];
            var firstValue = legacyValues[0];
            var interpolate = (_legacyCurveData$inte = legacyCurveData.interpolate) !== null && _legacyCurveData$inte !== void 0 ? _legacyCurveData$inte : true;
            assertIsTrue(typeof legacyCurveData._arrayLength !== 'number' || typeof firstValue === 'number');
            var legacyEasingMethodConverter = new LegacyEasingMethodConverter(legacyCurveData, times.length);

            var installPathAndSetter = function installPathAndSetter(track) {
              convertTrackPath(track, legacyCurve.modifiers, legacyCurve.valueAdapter);
            };

            var legacyCommonTargetCurve = void 0;

            if (typeof legacyCurve.commonTarget === 'number') {
              if (!legacyValues.every(function (value) {
                return typeof value === 'number';
              })) {
                warnID(3932);
                return "continue";
              }

              if (legacyCurve.valueAdapter || legacyCurve.modifiers.length !== 1 || typeof legacyCurve.modifiers[0] !== 'string') {
                warnID(3933);
                return "continue";
              }

              var _propertyName = legacyCurve.modifiers[0];
              var untypedTrack = untypedTracks[legacyCurve.commonTarget];

              var _untypedTrack$addChan = untypedTrack.addChannel(_propertyName),
                  curve = _untypedTrack$addChan.curve;

              legacyCommonTargetCurve = curve;
            }

            var convertCurve = function convertCurve() {
              if (typeof firstValue === 'number') {
                if (!legacyValues.every(function (value) {
                  return typeof value === 'number';
                })) {
                  warnID(3934);
                  return;
                }

                var realCurve;

                if (legacyCommonTargetCurve) {
                  realCurve = legacyCommonTargetCurve;
                } else {
                  var track = new RealTrack();
                  installPathAndSetter(track);
                  newTracks.push(track);
                  realCurve = track.channel.curve;
                }

                var interpolationMethod = interpolate ? RealInterpolationMode.LINEAR : RealInterpolationMode.CONSTANT;
                realCurve.assignSorted(times, legacyValues.map(function (value) {
                  return {
                    value: value,
                    interpolationMode: interpolationMethod
                  };
                }));
                legacyEasingMethodConverter.convert(realCurve);
                return;
              } else if (typeof firstValue === 'object') {
                switch (true) {
                  default:
                    break;

                  case everyInstanceOf(legacyValues, Vec2):
                  case everyInstanceOf(legacyValues, Vec3):
                  case everyInstanceOf(legacyValues, Vec4):
                    {
                      var components = firstValue instanceof Vec2 ? 2 : firstValue instanceof Vec3 ? 3 : 4;

                      var _track = new VectorTrack();

                      installPathAndSetter(_track);
                      _track.componentsCount = components;

                      var _track$channels = _track.channels(),
                          x = _track$channels[0].curve,
                          y = _track$channels[1].curve,
                          z = _track$channels[2].curve,
                          w = _track$channels[3].curve;

                      var interpolationMode = interpolate ? RealInterpolationMode.LINEAR : RealInterpolationMode.CONSTANT;

                      var valueToFrame = function valueToFrame(value) {
                        return {
                          value: value,
                          interpolationMode: interpolationMode
                        };
                      };

                      switch (components) {
                        case 4:
                          w.assignSorted(times, legacyValues.map(function (value) {
                            return valueToFrame(value.w);
                          }));
                          legacyEasingMethodConverter.convert(w);

                        case 3:
                          z.assignSorted(times, legacyValues.map(function (value) {
                            return valueToFrame(value.z);
                          }));
                          legacyEasingMethodConverter.convert(z);

                        default:
                          x.assignSorted(times, legacyValues.map(function (value) {
                            return valueToFrame(value.x);
                          }));
                          legacyEasingMethodConverter.convert(x);
                          y.assignSorted(times, legacyValues.map(function (value) {
                            return valueToFrame(value.y);
                          }));
                          legacyEasingMethodConverter.convert(y);
                          break;
                      }

                      newTracks.push(_track);
                      return;
                    }

                  case everyInstanceOf(legacyValues, Quat):
                    {
                      var _track2 = new QuatTrack();

                      installPathAndSetter(_track2);

                      var _interpolationMode = interpolate ? QuatInterpolationMode.SLERP : QuatInterpolationMode.CONSTANT;

                      _track2.channel.curve.assignSorted(times, legacyValues.map(function (value) {
                        return {
                          value: Quat.clone(value),
                          interpolationMode: _interpolationMode
                        };
                      }));

                      legacyEasingMethodConverter.convertQuatCurve(_track2.channel.curve);
                      newTracks.push(_track2);
                      return;
                    }

                  case everyInstanceOf(legacyValues, Color):
                    {
                      var _track3 = new ColorTrack();

                      installPathAndSetter(_track3);

                      var _track3$channels = _track3.channels(),
                          r = _track3$channels[0].curve,
                          g = _track3$channels[1].curve,
                          b = _track3$channels[2].curve,
                          a = _track3$channels[3].curve;

                      var _interpolationMode2 = interpolate ? RealInterpolationMode.LINEAR : RealInterpolationMode.CONSTANT;

                      var _valueToFrame = function _valueToFrame(value) {
                        return {
                          value: value,
                          interpolationMode: _interpolationMode2
                        };
                      };

                      r.assignSorted(times, legacyValues.map(function (value) {
                        return _valueToFrame(value.r);
                      }));
                      legacyEasingMethodConverter.convert(r);
                      g.assignSorted(times, legacyValues.map(function (value) {
                        return _valueToFrame(value.g);
                      }));
                      legacyEasingMethodConverter.convert(g);
                      b.assignSorted(times, legacyValues.map(function (value) {
                        return _valueToFrame(value.b);
                      }));
                      legacyEasingMethodConverter.convert(b);
                      a.assignSorted(times, legacyValues.map(function (value) {
                        return _valueToFrame(value.a);
                      }));
                      legacyEasingMethodConverter.convert(a);
                      newTracks.push(_track3);
                      return;
                    }

                  case everyInstanceOf(legacyValues, Size):
                    {
                      var _track4 = new SizeTrack();

                      installPathAndSetter(_track4);

                      var _track4$channels = _track4.channels(),
                          width = _track4$channels[0].curve,
                          height = _track4$channels[1].curve;

                      var _interpolationMode3 = interpolate ? RealInterpolationMode.LINEAR : RealInterpolationMode.CONSTANT;

                      var _valueToFrame2 = function _valueToFrame2(value) {
                        return {
                          value: value,
                          interpolationMode: _interpolationMode3
                        };
                      };

                      width.assignSorted(times, legacyValues.map(function (value) {
                        return _valueToFrame2(value.width);
                      }));
                      legacyEasingMethodConverter.convert(width);
                      height.assignSorted(times, legacyValues.map(function (value) {
                        return _valueToFrame2(value.height);
                      }));
                      legacyEasingMethodConverter.convert(height);
                      newTracks.push(_track4);
                      return;
                    }

                  case everyInstanceOf(legacyValues, CubicSplineNumberValue):
                    {
                      assertIsTrue(legacyEasingMethodConverter.nil);

                      var _track5 = new RealTrack();

                      installPathAndSetter(_track5);

                      var _interpolationMode4 = interpolate ? RealInterpolationMode.CUBIC : RealInterpolationMode.CONSTANT;

                      _track5.channel.curve.assignSorted(times, legacyValues.map(function (value) {
                        return {
                          value: value.dataPoint,
                          leftTangent: value.inTangent,
                          rightTangent: value.outTangent,
                          interpolationMode: _interpolationMode4
                        };
                      }));

                      newTracks.push(_track5);
                      return;
                    }

                  case everyInstanceOf(legacyValues, CubicSplineVec2Value):
                  case everyInstanceOf(legacyValues, CubicSplineVec3Value):
                  case everyInstanceOf(legacyValues, CubicSplineVec4Value):
                    {
                      assertIsTrue(legacyEasingMethodConverter.nil);

                      var _components = firstValue instanceof CubicSplineVec2Value ? 2 : firstValue instanceof CubicSplineVec3Value ? 3 : 4;

                      var _track6 = new VectorTrack();

                      installPathAndSetter(_track6);
                      _track6.componentsCount = _components;

                      var _track6$channels = _track6.channels(),
                          _x = _track6$channels[0],
                          _y = _track6$channels[1],
                          _z = _track6$channels[2],
                          _w = _track6$channels[3];

                      var _interpolationMode5 = interpolate ? RealInterpolationMode.LINEAR : RealInterpolationMode.CONSTANT;

                      var _valueToFrame3 = function _valueToFrame3(value, inTangent, outTangent) {
                        return {
                          value: value,
                          leftTangent: inTangent,
                          rightTangent: outTangent,
                          interpolationMode: _interpolationMode5
                        };
                      };

                      switch (_components) {
                        case 4:
                          _w.curve.assignSorted(times, legacyValues.map(function (value) {
                            return _valueToFrame3(value.dataPoint.w, value.inTangent.w, value.outTangent.w);
                          }));

                        case 3:
                          _z.curve.assignSorted(times, legacyValues.map(function (value) {
                            return _valueToFrame3(value.dataPoint.z, value.inTangent.z, value.outTangent.z);
                          }));

                        default:
                          _x.curve.assignSorted(times, legacyValues.map(function (value) {
                            return _valueToFrame3(value.dataPoint.y, value.inTangent.y, value.outTangent.y);
                          }));

                          _y.curve.assignSorted(times, legacyValues.map(function (value) {
                            return _valueToFrame3(value.dataPoint.x, value.inTangent.x, value.outTangent.x);
                          }));

                          break;
                      }

                      newTracks.push(_track6);
                      return;
                    }

                  case legacyValues.every(function (value) {
                    return value instanceof CubicSplineQuatValue;
                  }):
                    {
                      warnID(3935);
                      break;
                    }
                }
              }

              var objectTrack = new ObjectTrack();
              installPathAndSetter(objectTrack);
              objectTrack.channel.curve.assignSorted(times, legacyValues);
              newTracks.push(objectTrack);
            };

            convertCurve();
          };

          for (var _iterator2 = _createForOfIteratorHelperLoose(legacyCurves), _step2; !(_step2 = _iterator2()).done;) {
            var _ret = _loop();

            if (_ret === "continue") continue;
          }

          return newTracks;
        };

        _proto._createPropertyCurves = function _createPropertyCurves() {
          var _this = this;

          this._ratioSamplers = this._keys.map(function (keys) {
            return new RatioSampler(keys.map(function (key) {
              return key / _this._duration;
            }));
          });
          this._runtimeCurves = this._curves.map(function (targetCurve) {
            return {
              curve: new AnimCurve(targetCurve.data, _this._duration),
              modifiers: targetCurve.modifiers,
              valueAdapter: targetCurve.valueAdapter,
              sampler: _this._ratioSamplers[targetCurve.data.keys],
              commonTarget: targetCurve.commonTarget
            };
          });
        };

        _createClass(AnimationClipLegacyData, [{
          key: "keys",
          get: function get() {
            return this._keys;
          },
          set: function set(value) {
            this._keys = value;
          }
        }, {
          key: "curves",
          get: function get() {
            return this._curves;
          },
          set: function set(value) {
            this._curves = value;
            delete this._runtimeCurves;
          }
        }, {
          key: "commonTargets",
          get: function get() {
            return this._commonTargets;
          },
          set: function set(value) {
            this._commonTargets = value;
          }
        }, {
          key: "data",
          get: function get() {
            return this._data;
          }
        }]);

        return AnimationClipLegacyData;
      }();

      function everyInstanceOf(array, constructor) {
        return array.every(function (element) {
          return element instanceof constructor;
        });
      }

      var LegacyEasingMethodConverter = function () {
        function LegacyEasingMethodConverter(legacyCurveData, keyframesCount) {
          this._easingMethods = void 0;
          var easingMethods = legacyCurveData.easingMethods;

          if (Array.isArray(easingMethods)) {
            if (easingMethods.length === 0 && keyframesCount !== 0) {
              this._easingMethods = new Array(keyframesCount).fill(null);
            } else {
              this._easingMethods = easingMethods;
            }
          } else if (easingMethods === undefined) {
            this._easingMethods = new Array(keyframesCount).fill(legacyCurveData.easingMethod);
          } else {
            this._easingMethods = Array.from({
              length: keyframesCount
            }, function (_, index) {
              var _easingMethods$index;

              return (_easingMethods$index = easingMethods[index]) !== null && _easingMethods$index !== void 0 ? _easingMethods$index : null;
            });
          }
        }

        var _proto2 = LegacyEasingMethodConverter.prototype;

        _proto2.convert = function convert(curve) {
          var easingMethods = this._easingMethods;

          if (!easingMethods) {
            return;
          }

          var nKeyframes = curve.keyFramesCount;

          if (curve.keyFramesCount < 2) {
            return;
          }

          if (Array.isArray(easingMethods)) {
            assertIsTrue(nKeyframes === easingMethods.length);
          }

          var iLastKeyframe = nKeyframes - 1;

          for (var iKeyframe = 0; iKeyframe < iLastKeyframe; ++iKeyframe) {
            var easingMethod = easingMethods[iKeyframe];

            if (!easingMethod) {
              continue;
            }

            if (Array.isArray(easingMethod)) {
              timeBezierToTangents(easingMethod, curve.getKeyframeTime(iKeyframe), curve.getKeyframeValue(iKeyframe), curve.getKeyframeTime(iKeyframe + 1), curve.getKeyframeValue(iKeyframe + 1));
            } else {
              applyLegacyEasingMethodName(easingMethod, curve, iKeyframe);
            }
          }
        };

        _proto2.convertQuatCurve = function convertQuatCurve(curve) {
          var easingMethods = this._easingMethods;

          if (!easingMethods) {
            return;
          }

          var nKeyframes = curve.keyFramesCount;

          if (curve.keyFramesCount < 2) {
            return;
          }

          if (Array.isArray(easingMethods)) {
            assertIsTrue(nKeyframes === easingMethods.length);
          }

          var iLastKeyframe = nKeyframes - 1;

          for (var iKeyframe = 0; iKeyframe < iLastKeyframe; ++iKeyframe) {
            var easingMethod = easingMethods[iKeyframe];

            if (!easingMethod) {
              continue;
            }

            if (Array.isArray(easingMethod)) {
              curve.getKeyframeValue(iKeyframe).easingMethod = easingMethod.slice();
            } else {
              applyLegacyEasingMethodNameIntoQuatCurve(easingMethod, curve, iKeyframe);
            }
          }
        };

        _createClass(LegacyEasingMethodConverter, [{
          key: "nil",
          get: function get() {
            return !this._easingMethods || this._easingMethods.every(function (easingMethod) {
              return easingMethod === null || easingMethod === undefined;
            });
          }
        }]);

        return LegacyEasingMethodConverter;
      }();

      function applyLegacyEasingMethodName(easingMethodName, curve, keyframeIndex) {
        assertIsTrue(keyframeIndex !== curve.keyFramesCount - 1);
        assertIsTrue(easingMethodName in easingMethodNameMap);
        var keyframeValue = curve.getKeyframeValue(keyframeIndex);
        var easingMethod = easingMethodNameMap[easingMethodName];

        if (easingMethod === EasingMethod.CONSTANT) {
          keyframeValue.interpolationMode = RealInterpolationMode.CONSTANT;
        } else {
          keyframeValue.interpolationMode = RealInterpolationMode.LINEAR;
          keyframeValue.easingMethod = easingMethod;
        }
      }

      function applyLegacyEasingMethodNameIntoQuatCurve(easingMethodName, curve, keyframeIndex) {
        assertIsTrue(keyframeIndex !== curve.keyFramesCount - 1);
        assertIsTrue(easingMethodName in easingMethodNameMap);
        var keyframeValue = curve.getKeyframeValue(keyframeIndex);
        var easingMethod = easingMethodNameMap[easingMethodName];
        keyframeValue.easingMethod = easingMethod;
      }

      var easingMethodNameMap = {
        constant: EasingMethod.CONSTANT,
        linear: EasingMethod.LINEAR,
        quadIn: EasingMethod.QUAD_IN,
        quadOut: EasingMethod.QUAD_OUT,
        quadInOut: EasingMethod.QUAD_IN_OUT,
        quadOutIn: EasingMethod.QUAD_OUT_IN,
        cubicIn: EasingMethod.CUBIC_IN,
        cubicOut: EasingMethod.CUBIC_OUT,
        cubicInOut: EasingMethod.CUBIC_IN_OUT,
        cubicOutIn: EasingMethod.CUBIC_OUT_IN,
        quartIn: EasingMethod.QUART_IN,
        quartOut: EasingMethod.QUART_OUT,
        quartInOut: EasingMethod.QUART_IN_OUT,
        quartOutIn: EasingMethod.QUART_OUT_IN,
        quintIn: EasingMethod.QUINT_IN,
        quintOut: EasingMethod.QUINT_OUT,
        quintInOut: EasingMethod.QUINT_IN_OUT,
        quintOutIn: EasingMethod.QUINT_OUT_IN,
        sineIn: EasingMethod.SINE_IN,
        sineOut: EasingMethod.SINE_OUT,
        sineInOut: EasingMethod.SINE_IN_OUT,
        sineOutIn: EasingMethod.SINE_OUT_IN,
        expoIn: EasingMethod.EXPO_IN,
        expoOut: EasingMethod.EXPO_OUT,
        expoInOut: EasingMethod.EXPO_IN_OUT,
        expoOutIn: EasingMethod.EXPO_OUT_IN,
        circIn: EasingMethod.CIRC_IN,
        circOut: EasingMethod.CIRC_OUT,
        circInOut: EasingMethod.CIRC_IN_OUT,
        circOutIn: EasingMethod.CIRC_OUT_IN,
        elasticIn: EasingMethod.ELASTIC_IN,
        elasticOut: EasingMethod.ELASTIC_OUT,
        elasticInOut: EasingMethod.ELASTIC_IN_OUT,
        elasticOutIn: EasingMethod.ELASTIC_OUT_IN,
        backIn: EasingMethod.BACK_IN,
        backOut: EasingMethod.BACK_OUT,
        backInOut: EasingMethod.BACK_IN_OUT,
        backOutIn: EasingMethod.BACK_OUT_IN,
        bounceIn: EasingMethod.BOUNCE_IN,
        bounceOut: EasingMethod.BOUNCE_OUT,
        bounceInOut: EasingMethod.BOUNCE_IN_OUT,
        bounceOutIn: EasingMethod.BOUNCE_OUT_IN,
        smooth: EasingMethod.SMOOTH,
        fade: EasingMethod.FADE
      };
      function timeBezierToTangents(timeBezierPoints, previousTime, previousKeyframe, nextTime, nextKeyframe) {
        var p1X = timeBezierPoints[0],
            p1Y = timeBezierPoints[1],
            p2X = timeBezierPoints[2],
            p2Y = timeBezierPoints[3];
        var previousValue = previousKeyframe.value;
        var nextValue = nextKeyframe.value;
        var dValue = nextValue - previousValue;
        var dTime = nextTime - previousTime;
        var fx = 3 * dTime;
        var fy = 3 * dValue;
        var t1x = p1X * fx;
        var t1y = p1Y * fy;
        var t2x = (1.0 - p2X) * fx;
        var t2y = (1.0 - p2Y) * fy;
        var ONE_THIRD = 1.0 / 3.0;
        var previousTangent = t1y / t1x;
        var previousTangentWeight = Math.sqrt(t1x * t1x + t1y * t1y) * ONE_THIRD;
        var nextTangent = t2y / t2x;
        var nextTangentWeight = Math.sqrt(t2x * t2x + t2y * t2y) * ONE_THIRD;
        previousKeyframe.interpolationMode = RealInterpolationMode.CUBIC;
        previousKeyframe.tangentWeightMode = ensureRightTangentWeightMode(previousKeyframe.tangentWeightMode);
        previousKeyframe.rightTangent = previousTangent;
        previousKeyframe.rightTangentWeight = previousTangentWeight;
        nextKeyframe.tangentWeightMode = ensureLeftTangentWeightMode(nextKeyframe.tangentWeightMode);
        nextKeyframe.leftTangent = nextTangent;
        nextKeyframe.leftTangentWeight = nextTangentWeight;
      }

      function ensureLeftTangentWeightMode(tangentWeightMode) {
        if (tangentWeightMode === TangentWeightMode.NONE) {
          return TangentWeightMode.LEFT;
        } else if (tangentWeightMode === TangentWeightMode.RIGHT) {
          return TangentWeightMode.BOTH;
        } else {
          return tangentWeightMode;
        }
      }

      function ensureRightTangentWeightMode(tangentWeightMode) {
        if (tangentWeightMode === TangentWeightMode.NONE) {
          return TangentWeightMode.RIGHT;
        } else if (tangentWeightMode === TangentWeightMode.LEFT) {
          return TangentWeightMode.BOTH;
        } else {
          return tangentWeightMode;
        }
      }

      var _dec$1l, _class$1l, _class2$1a, _initializer$$, _dec2$I, _class4$9, _class5$9, _initializer2$G, _initializer3$t, _initializer4$o, _initializer5$h, _dec3$n, _class7$5, _class8$4, _initializer6$d, _initializer7$9, _dec4$b, _class10$4, _dec5$8, _class11$4, _dec6$7, _class12, _class13$4, _initializer8$9, _initializer9$8, _dec7$7, _class15, _class16$3, _initializer10$8, _initializer11$7, _initializer12$6, _initializer13$6;
      var ccclass$5 = ccclass,
          serializable$4 = serializable;

      function throwIfSplitMethodIsNotValid() {
        throw new Error("split() only valid in Editor.");
      }

      var ExoticAnimation = (_dec$1l = ccclass$5(CLASS_NAME_PREFIX_ANIM + "ExoticAnimation"), _dec$1l(_class$1l = (_class2$1a = function () {
        function ExoticAnimation() {
          this._nodeAnimations = _initializer$$ && _initializer$$();
        }

        var _proto = ExoticAnimation.prototype;

        _proto.createEvaluator = function createEvaluator(binder) {
          return new ExoticTrsAnimationEvaluator(this._nodeAnimations, binder);
        };

        _proto.addNodeAnimation = function addNodeAnimation(path) {
          var nodeAnimation = new ExoticNodeAnimation(path);

          this._nodeAnimations.push(nodeAnimation);

          return nodeAnimation;
        };

        _proto.collectAnimatedJoints = function collectAnimatedJoints() {
          return Array.from(new Set(this._nodeAnimations.map(function (_ref) {
            var path = _ref.path;
            return path;
          })));
        };

        _proto.split = function split(from, to) {
          {
            return throwIfSplitMethodIsNotValid();
          }
        };

        _proto.toHashString = function toHashString() {
          return this._nodeAnimations.map(function (nodeAnimation) {
            return nodeAnimation.toHashString();
          }).join('\n');
        };

        return ExoticAnimation;
      }(), (_initializer$$ = applyDecoratedInitializer(_class2$1a.prototype, "_nodeAnimations", [serializable$4], function () {
        return [];
      })), _class2$1a)) || _class$1l);
      var ExoticNodeAnimation = (_dec2$I = ccclass$5(CLASS_NAME_PREFIX_ANIM + "ExoticNodeAnimation"), _dec2$I(_class4$9 = (_class5$9 = function () {
        function ExoticNodeAnimation(path) {
          this._path = _initializer2$G && _initializer2$G();
          this._position = _initializer3$t && _initializer3$t();
          this._rotation = _initializer4$o && _initializer4$o();
          this._scale = _initializer5$h && _initializer5$h();
          this._path = path;
        }

        var _proto2 = ExoticNodeAnimation.prototype;

        _proto2.createPosition = function createPosition(times, values) {
          this._position = new ExoticTrack(times, new ExoticVec3TrackValues(values));
        };

        _proto2.createRotation = function createRotation(times, values) {
          this._rotation = new ExoticTrack(times, new ExoticQuatTrackValues(values));
        };

        _proto2.createScale = function createScale(times, values) {
          this._scale = new ExoticTrack(times, new ExoticVec3TrackValues(values));
        };

        _proto2.createEvaluator = function createEvaluator(binder) {
          return new ExoticNodeAnimationEvaluator(this._path, this._position, this._rotation, this._scale, binder);
        };

        _proto2.split = function split(from, to, splitInfoCache) {
          {
            return throwIfSplitMethodIsNotValid();
          }
        };

        _proto2.toHashString = function toHashString() {
          var _this$_position$toHas, _this$_position, _this$_scale$toHashSt, _this$_scale, _this$_rotation$toHas, _this$_rotation;

          return this._path + "\n" + ((_this$_position$toHas = (_this$_position = this._position) === null || _this$_position === void 0 ? void 0 : _this$_position.toHashString()) !== null && _this$_position$toHas !== void 0 ? _this$_position$toHas : '') + ((_this$_scale$toHashSt = (_this$_scale = this._scale) === null || _this$_scale === void 0 ? void 0 : _this$_scale.toHashString()) !== null && _this$_scale$toHashSt !== void 0 ? _this$_scale$toHashSt : '') + ((_this$_rotation$toHas = (_this$_rotation = this._rotation) === null || _this$_rotation === void 0 ? void 0 : _this$_rotation.toHashString()) !== null && _this$_rotation$toHas !== void 0 ? _this$_rotation$toHas : '');
        };

        _createClass(ExoticNodeAnimation, [{
          key: "path",
          get: function get() {
            return this._path;
          }
        }]);

        return ExoticNodeAnimation;
      }(), (_initializer2$G = applyDecoratedInitializer(_class5$9.prototype, "_path", [serializable$4], function () {
        return '';
      }), _initializer3$t = applyDecoratedInitializer(_class5$9.prototype, "_position", [serializable$4], function () {
        return null;
      }), _initializer4$o = applyDecoratedInitializer(_class5$9.prototype, "_rotation", [serializable$4], function () {
        return null;
      }), _initializer5$h = applyDecoratedInitializer(_class5$9.prototype, "_scale", [serializable$4], function () {
        return null;
      })), _class5$9)) || _class4$9);

      function floatToHashString(value) {
        return value.toPrecision(2);
      }

      function floatArrayToHashString(values) {
        return values.map(floatToHashString).join(' ');
      }

      var ExoticVectorLikeTrackValues = (_dec3$n = ccclass$5(CLASS_NAME_PREFIX_ANIM + "ExoticVectorLikeTrackValues"), _dec3$n(_class7$5 = (_class8$4 = function () {
        function ExoticVectorLikeTrackValues(values) {
          this._values = _initializer6$d && _initializer6$d();
          this._isQuantized = _initializer7$9 && _initializer7$9();
          this._values = values;
          this._isQuantized = false;
        }

        var _proto3 = ExoticVectorLikeTrackValues.prototype;

        _proto3.quantize = function quantize(type) {
          assertIsTrue(!this._isQuantized);
          this._values = _quantize(this._values, type);
          this._isQuantized = true;
        };

        _proto3.toHashString = function toHashString() {
          var isQuantized = this._isQuantized,
              values = this._values;
          return isQuantized + " " + (isQuantized ? values.toHashString() : floatArrayToHashString(values));
        };

        _createClass(ExoticVectorLikeTrackValues, [{
          key: "precision",
          get: function get() {
            return this._isQuantized ? this._values.originalPrecision : getFloatArrayPrecision(this._values);
          }
        }]);

        return ExoticVectorLikeTrackValues;
      }(), (_initializer6$d = applyDecoratedInitializer(_class8$4.prototype, "_values", [serializable$4], null), _initializer7$9 = applyDecoratedInitializer(_class8$4.prototype, "_isQuantized", [serializable$4], null)), _class8$4)) || _class7$5);
      var ExoticVec3TrackValues = (_dec4$b = ccclass$5(CLASS_NAME_PREFIX_ANIM + "ExoticVec3TrackValues"), _dec4$b(_class10$4 = function (_ExoticVectorLikeTrac) {
        _inheritsLoose(ExoticVec3TrackValues, _ExoticVectorLikeTrac);

        function ExoticVec3TrackValues() {
          return _ExoticVectorLikeTrac.apply(this, arguments) || this;
        }

        ExoticVec3TrackValues.imitate = function imitate(values, model) {
          var trackValues = new ExoticVec3TrackValues(values);

          if (model._isQuantized) {
            trackValues.quantize(model._values.quantizationType);
          }

          return trackValues;
        };

        var _proto4 = ExoticVec3TrackValues.prototype;

        _proto4.get = function get(index, resultValue) {
          var values = this._values,
              isQuantized = this._isQuantized;

          if (isQuantized) {
            loadVec3FromQuantized(values, index, resultValue);
          } else {
            Vec3.fromArray(resultValue, values, index * 3);
          }
        };

        _proto4.lerp = function lerp(prevIndex, nextIndex, ratio, prevValue, nextValue, resultValue) {
          var values = this._values,
              isQuantized = this._isQuantized;

          if (isQuantized) {
            loadVec3FromQuantized(values, prevIndex, prevValue);
            loadVec3FromQuantized(values, nextIndex, nextValue);
          } else {
            Vec3.fromArray(prevValue, values, prevIndex * 3);
            Vec3.fromArray(nextValue, values, nextIndex * 3);
          }

          Vec3.lerp(resultValue, prevValue, nextValue, ratio);
        };

        return ExoticVec3TrackValues;
      }(ExoticVectorLikeTrackValues)) || _class10$4);
      var ExoticQuatTrackValues = (_dec5$8 = ccclass$5(CLASS_NAME_PREFIX_ANIM + "ExoticQuatTrackValues"), _dec5$8(_class11$4 = function (_ExoticVectorLikeTrac2) {
        _inheritsLoose(ExoticQuatTrackValues, _ExoticVectorLikeTrac2);

        function ExoticQuatTrackValues() {
          return _ExoticVectorLikeTrac2.apply(this, arguments) || this;
        }

        ExoticQuatTrackValues.imitate = function imitate(values, model) {
          var trackValues = new ExoticQuatTrackValues(values);

          if (model._isQuantized) {
            trackValues.quantize(model._values.quantizationType);
          }

          return trackValues;
        };

        var _proto5 = ExoticQuatTrackValues.prototype;

        _proto5.get = function get(index, resultValue) {
          var values = this._values,
              isQuantized = this._isQuantized;

          if (isQuantized) {
            loadQuatFromQuantized(values, index, resultValue);
          } else {
            Quat.fromArray(resultValue, values, index * 4);
          }
        };

        _proto5.lerp = function lerp(prevIndex, nextIndex, ratio, prevValue, nextValue, resultValue) {
          var values = this._values,
              isQuantized = this._isQuantized;

          if (isQuantized) {
            loadQuatFromQuantized(values, prevIndex, prevValue);
            loadQuatFromQuantized(values, nextIndex, nextValue);
          } else {
            Quat.fromArray(prevValue, values, prevIndex * 4);
            Quat.fromArray(nextValue, values, nextIndex * 4);
          }

          Quat.slerp(resultValue, prevValue, nextValue, ratio);
        };

        return ExoticQuatTrackValues;
      }(ExoticVectorLikeTrackValues)) || _class11$4);
      var ExoticTrack = (_dec6$7 = ccclass$5(CLASS_NAME_PREFIX_ANIM + "ExoticTrack"), _dec6$7(_class12 = (_class13$4 = function () {
        function ExoticTrack(times, values) {
          this.times = _initializer8$9 && _initializer8$9();
          this.values = _initializer9$8 && _initializer9$8();
          this.times = times;
          this.values = values;
        }

        var _proto6 = ExoticTrack.prototype;

        _proto6.toHashString = function toHashString() {
          var times = this.times,
              values = this.values;
          return "times: " + floatArrayToHashString(times) + "; values: " + values.toHashString();
        };

        return ExoticTrack;
      }(), (_initializer8$9 = applyDecoratedInitializer(_class13$4.prototype, "times", [serializable$4], null), _initializer9$8 = applyDecoratedInitializer(_class13$4.prototype, "values", [serializable$4], null)), _class13$4)) || _class12);

      var SplitInfo = function () {
        function SplitInfo() {
          this._reset();
        }

        var _proto7 = SplitInfo.prototype;

        _proto7.transformTime = function transformTime(input) {
          return input - this._timeOffset;
        };

        _proto7.calculate = function calculate(times, from, to) {
          this._reset();

          var nKeyframes = times.length;

          if (!nKeyframes) {
            return;
          }

          var firstTime = times[0];
          var lastTime = times[nKeyframes - 1];
          var fromClamped = clamp(from, firstTime, lastTime);
          var toClamped = clamp(to, firstTime, lastTime);
          this._timeOffset = fromClamped;

          var _searchRange = searchRange(times, fromClamped, toClamped),
              fromIndex = _searchRange.fromIndex,
              fromRatio = _searchRange.fromRatio,
              toIndex = _searchRange.toIndex,
              toRatio = _searchRange.toRatio;

          assertIsTrue(toIndex >= fromIndex);
          var fromJust = !fromRatio;
          var toJust = !toRatio;

          if (fromIndex === toIndex && fromRatio === toRatio) {
            if (!fromJust) {
              this.preLerpIndex = fromIndex;
              this.preLerpRatio = fromRatio;
            } else {
              this.directKeyframesBegin = fromIndex;
              this.directKeyframesEnd = fromIndex + 1;
            }

            return;
          }

          if (!fromJust) {
            this.preLerpIndex = fromIndex;
            this.preLerpRatio = fromRatio;
          }

          this.directKeyframesBegin = fromJust ? fromIndex : fromIndex + 1;
          this.directKeyframesEnd = toIndex + 1;

          if (!toJust) {
            this.postLerpIndex = toIndex;
            this.postLerpRatio = toRatio;
          }
        };

        _proto7._reset = function _reset() {
          this.preLerpIndex = -1;
          this.preLerpRatio = 0.0;
          this.directKeyframesBegin = 0;
          this.directKeyframesEnd = 0;
          this.postLerpIndex = -1;
          this.postLerpRatio = 0.0;
          this._timeOffset = 0.0;
        };

        _createClass(SplitInfo, [{
          key: "keyframesCount",
          get: function get() {
            var preLerpIndex = this.preLerpIndex,
                directKeyframesBegin = this.directKeyframesBegin,
                directKeyframesEnd = this.directKeyframesEnd,
                postLerpIndex = this.postLerpIndex;
            return 0 + (preLerpIndex < 0 ? 0 : 1) + (directKeyframesEnd - directKeyframesBegin) + (postLerpIndex < 0 ? 0 : 1);
          }
        }]);

        return SplitInfo;
      }();

      function searchRange(values, from, to) {
        var nValues = values.length;
        assertIsTrue(nValues !== 0);
        assertIsTrue(to >= from && from >= values[0] && to <= values[nValues - 1]);

        var _binarySearchRatio = binarySearchRatio(values, from),
            fromIndex = _binarySearchRatio.index,
            fromRatio = _binarySearchRatio.ratio;

        var _binarySearchRatio2 = binarySearchRatio(values, to),
            toIndex = _binarySearchRatio2.index,
            toRatio = _binarySearchRatio2.ratio;

        return {
          fromIndex: fromIndex,
          fromRatio: fromRatio,
          toIndex: toIndex,
          toRatio: toRatio
        };
      }

      function binarySearchRatio(values, value) {
        var nValues = values.length;
        assertIsTrue(values.length !== 0);
        var resultIndex = 0;
        var resultRatio = 0.0;
        var index0 = binarySearchEpsilon(values, value);

        if (index0 >= 0) {
          resultIndex = index0;
        } else {
          var iNext = ~index0;
          assertIsTrue(iNext !== 0 && iNext !== nValues && nValues > 1);
          var iPrev = iNext - 1;
          resultIndex = iPrev;
          var next = values[iNext];
          var prev = values[iPrev];
          resultRatio = (value - prev) / (next - prev);
        }

        return {
          index: resultIndex,
          ratio: resultRatio
        };
      }

      var ExoticTrsAnimationEvaluator = function () {
        function ExoticTrsAnimationEvaluator(nodeAnimations, binder) {
          this._nodeEvaluations = void 0;
          this._nodeEvaluations = nodeAnimations.map(function (nodeAnimation) {
            return nodeAnimation.createEvaluator(binder);
          });
        }

        var _proto8 = ExoticTrsAnimationEvaluator.prototype;

        _proto8.evaluate = function evaluate(time) {
          this._nodeEvaluations.forEach(function (nodeEvaluator) {
            nodeEvaluator.evaluate(time);
          });
        };

        return ExoticTrsAnimationEvaluator;
      }();

      var ExoticNodeAnimationEvaluator = function () {
        function ExoticNodeAnimationEvaluator(path, position, rotation, scale, binder) {
          this._position = null;
          this._rotation = null;
          this._scale = null;

          if (position) {
            this._position = createExoticTrackEvaluationRecord(position.times, position.values, Vec3, path, 'position', binder);
          }

          if (rotation) {
            this._rotation = createExoticTrackEvaluationRecord(rotation.times, rotation.values, Quat, path, 'rotation', binder);
          }

          if (scale) {
            this._scale = createExoticTrackEvaluationRecord(scale.times, scale.values, Vec3, path, 'scale', binder);
          }
        }

        var _proto9 = ExoticNodeAnimationEvaluator.prototype;

        _proto9.evaluate = function evaluate(time) {
          if (this._position) {
            var _value = this._position.evaluator.evaluate(time);

            this._position.runtimeBinding.setValue(_value);
          }

          if (this._rotation) {
            var _value2 = this._rotation.evaluator.evaluate(time);

            this._rotation.runtimeBinding.setValue(_value2);
          }

          if (this._scale) {
            var _value3 = this._scale.evaluator.evaluate(time);

            this._scale.runtimeBinding.setValue(_value3);
          }
        };

        return ExoticNodeAnimationEvaluator;
      }();

      var ExoticTrackEvaluator = function () {
        function ExoticTrackEvaluator(times, values, ValueConstructor) {
          this._times = void 0;
          this._inputSampleResultCache = {
            just: false,
            index: -1,
            nextIndex: -1,
            ratio: 0.0
          };
          this._values = void 0;
          this._prevValue = void 0;
          this._nextValue = void 0;
          this._resultValue = void 0;
          this._times = times;
          this._values = values;
          this._prevValue = new ValueConstructor();
          this._nextValue = new ValueConstructor();
          this._resultValue = new ValueConstructor();
        }

        var _proto10 = ExoticTrackEvaluator.prototype;

        _proto10.evaluate = function evaluate(time) {
          var times = this._times,
              values = this._values,
              resultValue = this._resultValue;
          var nFrames = times.length;

          if (nFrames === 0) {
            return resultValue;
          }

          var inputSampleResult = sampleInput(times, time, this._inputSampleResultCache);

          if (inputSampleResult.just) {
            values.get(inputSampleResult.index, resultValue);
          } else {
            values.lerp(inputSampleResult.index, inputSampleResult.nextIndex, inputSampleResult.ratio, this._prevValue, this._nextValue, resultValue);
          }

          return resultValue;
        };

        return ExoticTrackEvaluator;
      }();

      function sampleInput(values, time, result) {
        var nFrames = values.length;
        assertIsTrue(nFrames !== 0);
        var firstTime = values[0];
        var lastTime = values[nFrames - 1];

        if (time < firstTime) {
          result.just = true;
          result.index = 0;
        } else if (time > lastTime) {
          result.just = true;
          result.index = nFrames - 1;
        } else {
          var _index2 = binarySearchEpsilon(values, time);

          if (_index2 >= 0) {
            result.just = true;
            result.index = _index2;
          } else {
            var _nextIndex = ~_index2;

            assertIsTrue(_nextIndex !== 0 && _nextIndex !== nFrames && nFrames > 1);

            var _prevIndex = _nextIndex - 1;

            var prevTime = values[_prevIndex];
            var nextTime = values[_nextIndex];

            var _ratio = (time - values[_prevIndex]) / (nextTime - prevTime);

            result.just = false;
            result.index = _prevIndex;
            result.nextIndex = _nextIndex;
            result.ratio = _ratio;
          }
        }

        return result;
      }

      var QUANTIZATION_TYPE_TO_ARRAY_VIEW_CONSTRUCTOR_MAP = {
        uint8: Uint8Array,
        uint16: Uint16Array
      };
      var FloatPrecision;

      (function (FloatPrecision) {
        FloatPrecision[FloatPrecision["FLOAT_32"] = 0] = "FLOAT_32";
        FloatPrecision[FloatPrecision["FLOAT_64"] = 1] = "FLOAT_64";
      })(FloatPrecision || (FloatPrecision = {}));

      function getFloatArrayPrecision(array) {
        switch (array.BYTES_PER_ELEMENT) {
          default:
            assertIsTrue(false);

          case 4:
            return FloatPrecision.FLOAT_32;

          case 8:
            return FloatPrecision.FLOAT_64;
        }
      }

      var QuantizedFloatArray = (_dec7$7 = ccclass$5(CLASS_NAME_PREFIX_ANIM + "QuantizedFloatArray"), _dec7$7(_class15 = (_class16$3 = function () {
        function QuantizedFloatArray(originalPrecision, values, extent, min) {
          if (min === void 0) {
            min = 0.0;
          }

          this.originalPrecision = _initializer10$8 && _initializer10$8();
          this.min = _initializer11$7 && _initializer11$7();
          this.extent = _initializer12$6 && _initializer12$6();
          this.values = _initializer13$6 && _initializer13$6();
          this.originalPrecision = originalPrecision;
          this.values = values;
          this.extent = extent;
          this.min = min;
        }

        var _proto11 = QuantizedFloatArray.prototype;

        _proto11.toHashString = function toHashString() {
          var originalPrecision = this.originalPrecision,
              min = this.min,
              extent = this.extent,
              values = this.values;
          return originalPrecision + " " + floatToHashString(min) + " " + floatToHashString(extent) + " " + values.join(' ');
        };

        _createClass(QuantizedFloatArray, [{
          key: "quantizationType",
          get: function get() {
            switch (this.values.BYTES_PER_ELEMENT) {
              default:
              case 1:
                return 'uint8';

              case 2:
                return 'uint16';
            }
          }
        }]);

        return QuantizedFloatArray;
      }(), (_initializer10$8 = applyDecoratedInitializer(_class16$3.prototype, "originalPrecision", [serializable$4], null), _initializer11$7 = applyDecoratedInitializer(_class16$3.prototype, "min", [serializable$4], null), _initializer12$6 = applyDecoratedInitializer(_class16$3.prototype, "extent", [serializable$4], null), _initializer13$6 = applyDecoratedInitializer(_class16$3.prototype, "values", [serializable$4], null)), _class16$3)) || _class15);

      function _quantize(values, type) {
        var TypedArrayViewConstructor = QUANTIZATION_TYPE_TO_ARRAY_VIEW_CONSTRUCTOR_MAP[type];
        var MAX = 1 << TypedArrayViewConstructor.BYTES_PER_ELEMENT;
        var min = Number.POSITIVE_INFINITY;
        var max = Number.NEGATIVE_INFINITY;
        values.forEach(function (value) {
          min = Math.min(value, min);
          max = Math.max(value, max);
        });
        var extent = max - min;
        var normalized = TypedArrayViewConstructor.from(values, function (value) {
          return (value - min) / extent * MAX;
        });
        return new QuantizedFloatArray(getFloatArrayPrecision(values), normalized, extent, min);
      }

      function indexQuantized(quantized, index) {
        var quantizedValue = quantized.values[index];
        var MAX_VALUE = 1 << quantized.values.BYTES_PER_ELEMENT;
        return quantizedValue / MAX_VALUE * quantized.extent + quantized.min;
      }

      function createExoticTrackEvaluationRecord(times, values, ValueConstructor, path, property, binder) {
        var trackBinding = new TrackBinding();
        trackBinding.path = new TrackPath().toHierarchy(path).toProperty(property);
        var runtimeBinding = binder(trackBinding);

        if (!runtimeBinding) {
          return null;
        }

        var evaluator = new ExoticTrackEvaluator(times, values, ValueConstructor);
        return {
          runtimeBinding: runtimeBinding,
          evaluator: evaluator
        };
      }

      function loadVec3FromQuantized(values, index, out) {
        Vec3.set(out, indexQuantized(values, 3 * index + 0), indexQuantized(values, 3 * index + 1), indexQuantized(values, 3 * index + 2));
      }

      function loadQuatFromQuantized(values, index, out) {
        Quat.set(out, indexQuantized(values, 4 * index + 0), indexQuantized(values, 4 * index + 1), indexQuantized(values, 4 * index + 2), indexQuantized(values, 4 * index + 3));
      }

      var _dec$1m, _class$1m, _class2$1b, _initializer$10, _initializer2$H, _initializer3$u, _initializer4$p, _initializer5$i, _initializer6$e, _initializer7$a, _initializer8$a, _initializer9$9, _initializer10$9, _class3$m, _temp$v;
      var searchForRootBonePathSymbol = Symbol('SearchForRootBonePath');
      var exoticAnimationTag = Symbol('ExoticAnimation');
      var embeddedPlayerCountTag = Symbol('[[EmbeddedPlayerCount]]');
      var getEmbeddedPlayersTag = Symbol('[[GetEmbeddedPlayers]]');
      var addEmbeddedPlayerTag = Symbol('[[AddEmbeddedPlayer]]');
      var removeEmbeddedPlayerTag = Symbol('[[RemoveEmbeddedPlayer]]');
      var clearEmbeddedPlayersTag = Symbol('[[ClearEmbeddedPlayers]]');
      var AnimationClip = exports('AnimationClip', (_dec$1m = ccclass('cc.AnimationClip'), _dec$1m(_class$1m = (_class2$1b = (_temp$v = _class3$m = function (_Asset) {
        _inheritsLoose(AnimationClip, _Asset);

        function AnimationClip() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Asset.call.apply(_Asset, [this].concat(args)) || this;
          _this.sample = _initializer$10 && _initializer$10();
          _this.speed = _initializer2$H && _initializer2$H();
          _this.wrapMode = _initializer3$u && _initializer3$u();
          _this.enableTrsBlending = _initializer4$p && _initializer4$p();
          _this._duration = _initializer5$i && _initializer5$i();
          _this._hash = _initializer6$e && _initializer6$e();
          _this.frameRate = 0;
          _this._tracks = _initializer7$a && _initializer7$a();
          _this._exoticAnimation = _initializer8$a && _initializer8$a();
          _this._legacyData = undefined;
          _this._legacyDataDirty = false;
          _this._events = _initializer9$9 && _initializer9$9();
          _this._embeddedPlayers = _initializer10$9 && _initializer10$9();
          _this._runtimeEvents = {
            ratios: [],
            eventGroups: []
          };
          return _this;
        }

        AnimationClip.createWithSpriteFrames = function createWithSpriteFrames(spriteFrames, sample) {
          var clip = new AnimationClip();
          clip.sample = sample || clip.sample;
          clip.duration = spriteFrames.length / clip.sample;
          var step = 1 / clip.sample;
          var track = new ObjectTrack();
          track.path = new TrackPath().toComponent('cc.Sprite').toProperty('spriteFrame');
          var curve = track.channels()[0].curve;
          curve.assignSorted(spriteFrames.map(function (spriteFrame, index) {
            return [step * index, spriteFrame];
          }));
          clip.addTrack(track);
          return clip;
        };

        var _proto = AnimationClip.prototype;

        _proto.onLoaded = function onLoaded() {
          this.frameRate = this.sample;
          this.events = this._events;
        };

        _proto.range = function range() {
          var range = {
            min: Infinity,
            max: -Infinity
          };
          var tracks = this._tracks;
          var nTracks = tracks.length;

          for (var iTrack = 0; iTrack < nTracks; ++iTrack) {
            var track = tracks[iTrack];
            var trackRange = track.range();
            range.min = Math.min(range.min, trackRange.min);
            range.max = Math.max(range.max, trackRange.max);
          }

          return range;
        };

        _proto.getTrack = function getTrack(index) {
          return this._tracks[index];
        };

        _proto.addTrack = function addTrack(track) {
          var index = this._tracks.length;

          this._tracks.push(track);

          return index;
        };

        _proto.removeTrack = function removeTrack(index) {
          this._tracks.splice(index, 1);
        };

        _proto.clearTracks = function clearTracks() {
          this._tracks.length = 0;
        };

        _proto.containsAnyEvent = function containsAnyEvent() {
          return this._events.length !== 0;
        };

        _proto.createEventEvaluator = function createEventEvaluator(targetNode) {
          return new EventEvaluator(targetNode, this._runtimeEvents.ratios, this._runtimeEvents.eventGroups, this.wrapMode);
        };

        _proto.containsAnyEmbeddedPlayer = function containsAnyEmbeddedPlayer() {
          return this._embeddedPlayers.length !== 0;
        };

        _proto.createEmbeddedPlayerEvaluator = function createEmbeddedPlayerEvaluator(targetNode) {
          return new EmbeddedPlayerEvaluation(this._embeddedPlayers, targetNode);
        };

        _proto.createEvaluator = function createEvaluator(context) {
          var _this2 = this;

          var target = context.target;

          var binder = function binder(binding) {
            if (context.mask && binding.isMaskedOff(context.mask)) {
              return undefined;
            }

            var trackTarget = binding.createRuntimeBinding(target, _this2.enableTrsBlending ? context.pose : undefined, false);

            if ( !trackTarget) {
              warnID(3937, _this2.name, context.target instanceof Node$1 ? context.target.name : context.target);
            }

            return trackTarget !== null && trackTarget !== void 0 ? trackTarget : undefined;
          };

          return this._createEvalWithBinder(target, binder, context.rootMotion);
        };

        _proto.destroy = function destroy() {
          var _cclegacy$director$ro;

          if ((_cclegacy$director$ro = legacyCC.director.root) !== null && _cclegacy$director$ro !== void 0 && _cclegacy$director$ro.dataPoolManager) {
            legacyCC.director.root.dataPoolManager.releaseAnimationClip(this);
          }

          SkelAnimDataHub.destroy(this);
          return _Asset.prototype.destroy.call(this);
        };

        _proto[BAKE_SKELETON_CURVE_SYMBOL] = function (start, samples, frames) {
          var step = 1.0 / samples;

          var animatedJoints = this._collectAnimatedJoints();

          var nAnimatedJoints = animatedJoints.length;
          var jointsBakeInfo = {};

          for (var iAnimatedJoint = 0; iAnimatedJoint < nAnimatedJoints; ++iAnimatedJoint) {
            var joint = animatedJoints[iAnimatedJoint];
            jointsBakeInfo[joint] = {
              transforms: Array.from({
                length: frames
              }, function () {
                return new Mat4();
              })
            };
          }

          var skeletonFrames = animatedJoints.reduce(function (result, joint) {
            result[joint] = new BoneGlobalTransform();
            return result;
          }, {});

          for (var _joint in skeletonFrames) {
            var skeletonFrame = skeletonFrames[_joint];

            var parentJoint = _joint.lastIndexOf('/');

            if (parentJoint >= 0) {
              var parentJointName = _joint.substring(0, parentJoint);

              var parentJointFrame = skeletonFrames[parentJointName];

              if (parentJointFrame) {
                skeletonFrame.parent = parentJointFrame;
              }
            }
          }

          var binder = function binder(binding) {
            var trsPath = binding.parseTrsPath();

            if (!trsPath) {
              return undefined;
            }

            var jointFrame = skeletonFrames[trsPath.node];

            if (!jointFrame) {
              return undefined;
            }

            return createBoneTransformBinding(jointFrame, trsPath.property);
          };

          var evaluator = this._createEvalWithBinder(undefined, binder, undefined);

          for (var iFrame = 0; iFrame < frames; ++iFrame) {
            var time = start + step * iFrame;
            evaluator.evaluate(time);

            for (var _iAnimatedJoint = 0; _iAnimatedJoint < nAnimatedJoints; ++_iAnimatedJoint) {
              var _joint2 = animatedJoints[_iAnimatedJoint];
              Mat4.copy(jointsBakeInfo[_joint2].transforms[iFrame], skeletonFrames[_joint2].globalTransform);
            }

            for (var _iAnimatedJoint2 = 0; _iAnimatedJoint2 < nAnimatedJoints; ++_iAnimatedJoint2) {
              var _joint3 = animatedJoints[_iAnimatedJoint2];

              skeletonFrames[_joint3].invalidate();
            }
          }

          return {
            samples: samples,
            frames: frames,
            joints: jointsBakeInfo
          };
        };

        _proto.upgradeUntypedTracks = function upgradeUntypedTracks(refine) {
          var newTracks = [];
          var removals = [];
          var tracks = this._tracks;
          var nTracks = tracks.length;

          for (var iTrack = 0; iTrack < nTracks; ++iTrack) {
            var track = tracks[iTrack];

            if (!(track instanceof UntypedTrack)) {
              continue;
            }

            var newTrack = track.upgrade(refine);

            if (newTrack) {
              newTracks.push(newTrack);
              removals.push(track);
            }
          }

          var nRemovalTracks = removals.length;

          for (var iRemovalTrack = 0; iRemovalTrack < nRemovalTracks; ++iRemovalTrack) {
            remove(tracks, removals[iRemovalTrack]);
          }

          tracks.push.apply(tracks, newTracks);
        };

        _proto[searchForRootBonePathSymbol] = function () {
          return this._searchForRootBonePath();
        };

        _proto.getPropertyCurves = function getPropertyCurves() {
          return this._getLegacyData().getPropertyCurves();
        };

        _proto.updateEventDatas = function updateEventDatas() {
          this.events = this._events;
        };

        _proto.hasEvents = function hasEvents() {
          return this.events.length !== 0;
        };

        _proto.syncLegacyData = function syncLegacyData() {
          if (this._legacyData) {
            this._fromLegacy(this._legacyData);

            this._legacyData = undefined;
          }
        };

        _proto[getEmbeddedPlayersTag] = function () {
          return this._embeddedPlayers;
        };

        _proto[addEmbeddedPlayerTag] = function (embeddedPlayer) {
          this._embeddedPlayers.push(embeddedPlayer);
        };

        _proto[removeEmbeddedPlayerTag] = function (embeddedPlayer) {
          var iEmbeddedPlayer = this._embeddedPlayers.indexOf(embeddedPlayer);

          if (iEmbeddedPlayer >= 0) {
            this._embeddedPlayers.splice(iEmbeddedPlayer, 1);
          }
        };

        _proto[clearEmbeddedPlayersTag] = function () {
          this._embeddedPlayers.length = 0;
        };

        _proto._createEvalWithBinder = function _createEvalWithBinder(target, binder, rootMotionOptions) {
          if (this._legacyDataDirty) {
            this._legacyDataDirty = false;
            this.syncLegacyData();
          }

          var rootMotionTrackExcludes = [];
          var rootMotionEvaluation;

          if (rootMotionOptions) {
            rootMotionEvaluation = this._createRootMotionEvaluation(target, rootMotionOptions, rootMotionTrackExcludes);
          }

          var trackEvalStatues = [];
          var exoticAnimationEvaluator;
          var tracks = this._tracks;
          var nTracks = tracks.length;

          for (var iTrack = 0; iTrack < nTracks; ++iTrack) {
            var track = tracks[iTrack];

            if (rootMotionTrackExcludes.includes(track)) {
              continue;
            }

            if (Array.from(track.channels()).every(function (_ref) {
              var curve = _ref.curve;
              return curve.keyFramesCount === 0;
            })) {
              continue;
            }

            var trackTarget = binder(track[trackBindingTag]);

            if (!trackTarget) {
              continue;
            }

            var trackEval = track[createEvalSymbol](trackTarget);
            trackEvalStatues.push({
              binding: trackTarget,
              trackEval: trackEval
            });
          }

          if (this._exoticAnimation) {
            exoticAnimationEvaluator = this._exoticAnimation.createEvaluator(binder);
          }

          var evaluation = new AnimationClipEvaluation(trackEvalStatues, exoticAnimationEvaluator, rootMotionEvaluation);
          return evaluation;
        };

        _proto._createRootMotionEvaluation = function _createRootMotionEvaluation(target, rootMotionOptions, rootMotionTrackExcludes) {
          if (!(target instanceof Node$1)) {
            errorID(3920);
            return undefined;
          }

          var rootBonePath = this._searchForRootBonePath();

          if (!rootBonePath) {
            warnID(3923);
            return undefined;
          }

          var rootBone = target.getChildByPath(rootBonePath);

          if (!rootBone) {
            warnID(3924);
            return undefined;
          }

          var boneTransform = new BoneTransform();
          var rootMotionsTrackEvaluations = [];
          var tracks = this._tracks;
          var nTracks = tracks.length;

          for (var iTrack = 0; iTrack < nTracks; ++iTrack) {
            var track = tracks[iTrack];
            var trackBinding = track[trackBindingTag];
            var trsPath = trackBinding.parseTrsPath();

            if (!trsPath) {
              continue;
            }

            var bonePath = trsPath.node;

            if (bonePath !== rootBonePath) {
              continue;
            }

            rootMotionTrackExcludes.push(track);
            var property = trsPath.property;
            var trackTarget = createBoneTransformBinding(boneTransform, property);

            if (!trackTarget) {
              continue;
            }

            var trackEval = track[createEvalSymbol](trackTarget);
            rootMotionsTrackEvaluations.push({
              binding: trackTarget,
              trackEval: trackEval
            });
          }

          var rootMotionEvaluation = new RootMotionEvaluation(rootBone, this._duration, boneTransform, rootMotionsTrackEvaluations);
          return rootMotionEvaluation;
        };

        _proto._searchForRootBonePath = function _searchForRootBonePath() {
          var paths = this._tracks.map(function (track) {
            var trsPath = track[trackBindingTag].parseTrsPath();

            if (trsPath) {
              var nodePath = trsPath.node;
              return {
                path: nodePath,
                rank: nodePath.split('/').length
              };
            } else {
              return {
                path: '',
                rank: 0
              };
            }
          });

          paths.sort(function (a, b) {
            return a.rank - b.rank;
          });
          var iNonEmptyPath = paths.findIndex(function (p) {
            return p.rank !== 0;
          });

          if (iNonEmptyPath < 0) {
            return '';
          }

          var nPaths = paths.length;
          var firstPath = paths[iNonEmptyPath];
          var highestPathsAreSame = true;

          for (var iPath = iNonEmptyPath + 1; iPath < nPaths; ++iPath) {
            var path = paths[iPath];

            if (path.rank !== firstPath.rank) {
              break;
            }

            if (path.path !== firstPath.path) {
              highestPathsAreSame = false;
              break;
            }
          }

          return highestPathsAreSame ? firstPath.path : '';
        };

        _proto._getLegacyData = function _getLegacyData() {
          if (!this._legacyData) {
            this._legacyData = this._toLegacy();
          }

          return this._legacyData;
        };

        _proto._toLegacy = function _toLegacy() {
          var keys = [];
          var legacyCurves = [];
          var commonTargets = [];
          var legacyClipData = new AnimationClipLegacyData(this._duration);
          legacyClipData.keys = keys;
          legacyClipData.curves = legacyCurves;
          legacyClipData.commonTargets = commonTargets;
          return legacyClipData;
        };

        _proto._fromLegacy = function _fromLegacy(legacyData) {
          var newTracks = legacyData.toTracks();
          var nNewTracks = newTracks.length;

          for (var iNewTrack = 0; iNewTrack < nNewTracks; ++iNewTrack) {
            this.addTrack(newTracks[iNewTrack]);
          }
        };

        _proto._collectAnimatedJoints = function _collectAnimatedJoints() {
          var joints = new Set();
          var tracks = this._tracks;
          var nTracks = tracks.length;

          for (var iTrack = 0; iTrack < nTracks; ++iTrack) {
            var track = tracks[iTrack];
            var trsPath = track[trackBindingTag].parseTrsPath();

            if (trsPath) {
              joints.add(trsPath.node);
            }
          }

          if (this._exoticAnimation) {
            var animatedJoints = this._exoticAnimation.collectAnimatedJoints();

            var nAnimatedJoints = animatedJoints.length;

            for (var iAnimatedJoint = 0; iAnimatedJoint < nAnimatedJoints; ++iAnimatedJoint) {
              joints.add(animatedJoints[iAnimatedJoint]);
            }
          }

          return Array.from(joints);
        };

        _createClass(AnimationClip, [{
          key: "duration",
          get: function get() {
            return this._duration;
          },
          set: function set(value) {
            this._duration = value;
          }
        }, {
          key: "tracksCount",
          get: function get() {
            return this._tracks.length;
          }
        }, {
          key: "tracks",
          get: function get() {
            return this._tracks;
          }
        }, {
          key: "hash",
          get: function get() {
            var _this$_exoticAnimatio, _this$_exoticAnimatio2;

            if (this._hash) {
              return this._hash;
            }

            var hashString = "Exotic:" + ((_this$_exoticAnimatio = (_this$_exoticAnimatio2 = this._exoticAnimation) === null || _this$_exoticAnimatio2 === void 0 ? void 0 : _this$_exoticAnimatio2.toHashString()) !== null && _this$_exoticAnimatio !== void 0 ? _this$_exoticAnimatio : '');
            return this._hash = murmurhash2_32_gc(hashString, 666);
          }
        }, {
          key: "events",
          get: function get() {
            return this._events;
          },
          set: function set(value) {
            var _this3 = this;

            this._events = value;
            var ratios = [];
            var eventGroups = [];
            var events = this.events.sort(function (a, b) {
              return a.frame - b.frame;
            });
            var nEvents = events.length;

            var _loop = function _loop(iEvent) {
              var eventData = events[iEvent];
              var ratio = eventData.frame / _this3._duration;
              var i = ratios.findIndex(function (r) {
                return r === ratio;
              });

              if (i < 0) {
                i = ratios.length;
                ratios.push(ratio);
                eventGroups.push({
                  events: []
                });
              }

              eventGroups[i].events.push({
                functionName: eventData.func,
                parameters: eventData.params
              });
            };

            for (var iEvent = 0; iEvent < nEvents; ++iEvent) {
              _loop(iEvent);
            }

            this._runtimeEvents = {
              ratios: ratios,
              eventGroups: eventGroups
            };
          }
        }, {
          key: exoticAnimationTag,
          get: function get() {
            return this._exoticAnimation;
          }
        }, {
          key: exoticAnimationTag,
          set: function set(value) {
            this._exoticAnimation = value;
          }
        }, {
          key: "keys",
          get: function get() {
            return this._getLegacyData().keys;
          }
        }, {
          key: "keys",
          set: function set(value) {
            this._legacyDataDirty = true;
            this._getLegacyData().keys = value;
          }
        }, {
          key: "curves",
          get: function get() {
            this._legacyDataDirty = true;
            return this._getLegacyData().curves;
          }
        }, {
          key: "curves",
          set: function set(value) {
            this._getLegacyData().curves = value;
          }
        }, {
          key: "commonTargets",
          get: function get() {
            return this._getLegacyData().commonTargets;
          }
        }, {
          key: "commonTargets",
          set: function set(value) {
            this._legacyDataDirty = true;
            this._getLegacyData().commonTargets = value;
          }
        }, {
          key: "data",
          get: function get() {
            return this._getLegacyData().data;
          }
        }, {
          key: "eventGroups",
          get: function get() {
            return this._runtimeEvents.eventGroups;
          }
        }, {
          key: embeddedPlayerCountTag,
          get: function get() {
            return this._embeddedPlayers.length;
          }
        }]);

        return AnimationClip;
      }(Asset), _class3$m.WrapMode = WrapMode$1, _temp$v), (_initializer$10 = applyDecoratedInitializer(_class2$1b.prototype, "sample", [serializable], function () {
        return 60;
      }), _initializer2$H = applyDecoratedInitializer(_class2$1b.prototype, "speed", [serializable], function () {
        return 1;
      }), _initializer3$u = applyDecoratedInitializer(_class2$1b.prototype, "wrapMode", [serializable], function () {
        return WrapMode$1.Normal;
      }), _initializer4$p = applyDecoratedInitializer(_class2$1b.prototype, "enableTrsBlending", [serializable], function () {
        return false;
      }), _initializer5$i = applyDecoratedInitializer(_class2$1b.prototype, "_duration", [serializable], function () {
        return 0;
      }), _initializer6$e = applyDecoratedInitializer(_class2$1b.prototype, "_hash", [serializable], function () {
        return 0;
      }), _initializer7$a = applyDecoratedInitializer(_class2$1b.prototype, "_tracks", [serializable], function () {
        return [];
      }), _initializer8$a = applyDecoratedInitializer(_class2$1b.prototype, "_exoticAnimation", [serializable], function () {
        return null;
      }), _initializer9$9 = applyDecoratedInitializer(_class2$1b.prototype, "_events", [serializable], function () {
        return [];
      }), _initializer10$9 = applyDecoratedInitializer(_class2$1b.prototype, "_embeddedPlayers", [serializable], function () {
        return [];
      })), _class2$1b)) || _class$1m));
      legacyCC.AnimationClip = AnimationClip;

      var EmbeddedPlayerEvaluation = function () {
        function EmbeddedPlayerEvaluation(embeddedPlayers, rootNode) {
          this._embeddedPlayers = embeddedPlayers;
          this._embeddedPlayerEvaluationInfos = embeddedPlayers.map(function (embeddedPlayer) {
            var player = embeddedPlayer.playable;

            if (!player) {
              return null;
            }

            var instantiatedPlayer = player.instantiate(rootNode);

            if (!instantiatedPlayer) {
              return null;
            }

            return {
              instantiatedPlayer: instantiatedPlayer,
              entered: false,
              hostPauseTime: 0.0,
              lastIterations: 0
            };
          });
        }

        var _proto2 = EmbeddedPlayerEvaluation.prototype;

        _proto2.destroy = function destroy() {
          var embeddedPlayerEvaluationInfos = this._embeddedPlayerEvaluationInfos;
          var nEmbeddedPlayers = embeddedPlayerEvaluationInfos.length;

          for (var iEmbeddedPlayer = 0; iEmbeddedPlayer < nEmbeddedPlayers; ++iEmbeddedPlayer) {
            var _embeddedPlayerEvalua;

            (_embeddedPlayerEvalua = embeddedPlayerEvaluationInfos[iEmbeddedPlayer]) === null || _embeddedPlayerEvalua === void 0 ? void 0 : _embeddedPlayerEvalua.instantiatedPlayer.destroy();
          }

          this._embeddedPlayerEvaluationInfos.length = 0;
        };

        _proto2.evaluate = function evaluate(time, iterations) {
          assertIsTrue(Number.isInteger(iterations));
          var embeddedPlayers = this._embeddedPlayers,
              embeddedPlayerEvaluationInfos = this._embeddedPlayerEvaluationInfos;
          var nEmbeddedPlayers = embeddedPlayers.length;

          for (var iEmbeddedPlayer = 0; iEmbeddedPlayer < nEmbeddedPlayers; ++iEmbeddedPlayer) {
            var embeddedPlayerEvaluationInfo = embeddedPlayerEvaluationInfos[iEmbeddedPlayer];

            if (!embeddedPlayerEvaluationInfo) {
              continue;
            }

            var entered = embeddedPlayerEvaluationInfo.entered,
                instantiatedPlayer = embeddedPlayerEvaluationInfo.instantiatedPlayer,
                lastIterations = embeddedPlayerEvaluationInfo.lastIterations;
            var _embeddedPlayers$iEmb = embeddedPlayers[iEmbeddedPlayer],
                begin = _embeddedPlayers$iEmb.begin,
                end = _embeddedPlayers$iEmb.end;
            var withinEmbeddedPlayer = time >= begin && time <= end;

            if (withinEmbeddedPlayer) {
              if (!entered) {
                instantiatedPlayer.play();
                embeddedPlayerEvaluationInfo.entered = true;
              } else if (iterations !== lastIterations) {
                instantiatedPlayer.stop();
                instantiatedPlayer.play();
                embeddedPlayerEvaluationInfo.entered = true;
              }
            } else if (entered) {
              instantiatedPlayer.stop();
              embeddedPlayerEvaluationInfo.entered = false;
            }

            embeddedPlayerEvaluationInfo.lastIterations = iterations;

            if (embeddedPlayerEvaluationInfo.entered) {
              var playerTime = time - begin;
              embeddedPlayerEvaluationInfo.instantiatedPlayer.setTime(playerTime);
            }
          }
        };

        _proto2.notifyHostSpeedChanged = function notifyHostSpeedChanged(speed) {
          var embeddedPlayers = this._embeddedPlayers,
              embeddedPlayerEvaluationInfos = this._embeddedPlayerEvaluationInfos;
          var nEmbeddedPlayers = embeddedPlayers.length;

          for (var iEmbeddedPlayer = 0; iEmbeddedPlayer < nEmbeddedPlayers; ++iEmbeddedPlayer) {
            var embeddedPlayerEvaluationInfo = embeddedPlayerEvaluationInfos[iEmbeddedPlayer];

            if (!embeddedPlayerEvaluationInfo) {
              continue;
            }

            var instantiatedPlayer = embeddedPlayerEvaluationInfo.instantiatedPlayer;
            var reconciledSpeed = embeddedPlayers[iEmbeddedPlayer].reconciledSpeed;

            if (reconciledSpeed) {
              instantiatedPlayer.setSpeed(speed);
            }
          }
        };

        _proto2.notifyHostPlay = function notifyHostPlay(time) {
          var embeddedPlayers = this._embeddedPlayers,
              embeddedPlayerEvaluationInfos = this._embeddedPlayerEvaluationInfos;
          var nEmbeddedPlayers = embeddedPlayers.length;

          for (var iEmbeddedPlayer = 0; iEmbeddedPlayer < nEmbeddedPlayers; ++iEmbeddedPlayer) {
            var embeddedPlayerEvaluationInfo = embeddedPlayerEvaluationInfos[iEmbeddedPlayer];

            if (!embeddedPlayerEvaluationInfo) {
              continue;
            }

            var _embeddedPlayers$iEmb2 = embeddedPlayers[iEmbeddedPlayer],
                begin = _embeddedPlayers$iEmb2.begin,
                end = _embeddedPlayers$iEmb2.end;
            var instantiatedPlayer = embeddedPlayerEvaluationInfo.instantiatedPlayer,
                entered = embeddedPlayerEvaluationInfo.entered;

            if (entered) {
              var hostPauseTime = embeddedPlayerEvaluationInfo.hostPauseTime;

              if (instantiatedPlayer.randomAccess || approx(hostPauseTime, time, 1e-5)) {
                var startTime = clamp(time, begin, end);
                instantiatedPlayer.play();
                instantiatedPlayer.setTime(startTime - begin);
              } else {
                instantiatedPlayer.stop();
              }
            }
          }
        };

        _proto2.notifyHostPause = function notifyHostPause(time) {
          var embeddedPlayers = this._embeddedPlayers,
              embeddedPlayerEvaluationInfos = this._embeddedPlayerEvaluationInfos;
          var nEmbeddedPlayers = embeddedPlayers.length;

          for (var iEmbeddedPlayer = 0; iEmbeddedPlayer < nEmbeddedPlayers; ++iEmbeddedPlayer) {
            var embeddedPlayerEvaluationInfo = embeddedPlayerEvaluationInfos[iEmbeddedPlayer];

            if (!embeddedPlayerEvaluationInfo) {
              continue;
            }

            var instantiatedPlayer = embeddedPlayerEvaluationInfo.instantiatedPlayer,
                entered = embeddedPlayerEvaluationInfo.entered;

            if (entered) {
              instantiatedPlayer.pause();
              embeddedPlayerEvaluationInfo.hostPauseTime = time;
            }
          }
        };

        _proto2.notifyHostStop = function notifyHostStop() {
          var embeddedPlayers = this._embeddedPlayers,
              embeddedPlayerEvaluationInfos = this._embeddedPlayerEvaluationInfos;
          var nEmbeddedPlayers = embeddedPlayers.length;

          for (var iEmbeddedPlayer = 0; iEmbeddedPlayer < nEmbeddedPlayers; ++iEmbeddedPlayer) {
            var embeddedPlayerEvaluationInfo = embeddedPlayerEvaluationInfos[iEmbeddedPlayer];

            if (!embeddedPlayerEvaluationInfo) {
              continue;
            }

            var instantiatedPlayer = embeddedPlayerEvaluationInfo.instantiatedPlayer,
                entered = embeddedPlayerEvaluationInfo.entered;

            if (entered) {
              embeddedPlayerEvaluationInfo.entered = false;
              instantiatedPlayer.stop();
            }
          }
        };

        return EmbeddedPlayerEvaluation;
      }();

      var AnimationClipEvaluation = function () {
        function AnimationClipEvaluation(trackEvalStatuses, exoticAnimationEvaluator, rootMotionEvaluation) {
          this._exoticAnimationEvaluator = void 0;
          this._trackEvalStatues = [];
          this._rootMotionEvaluation = undefined;
          this._trackEvalStatues = trackEvalStatuses;
          this._exoticAnimationEvaluator = exoticAnimationEvaluator;
          this._rootMotionEvaluation = rootMotionEvaluation;
        }

        var _proto3 = AnimationClipEvaluation.prototype;

        _proto3.evaluate = function evaluate(time) {
          var trackEvalStatuses = this._trackEvalStatues,
              exoticAnimationEvaluator = this._exoticAnimationEvaluator;
          var nTrackEvalStatuses = trackEvalStatuses.length;

          for (var iTrackEvalStatus = 0; iTrackEvalStatus < nTrackEvalStatuses; ++iTrackEvalStatus) {
            var _trackEvalStatuses$iT = trackEvalStatuses[iTrackEvalStatus],
                trackEval = _trackEvalStatuses$iT.trackEval,
                binding = _trackEvalStatuses$iT.binding;
            var value = trackEval.evaluate(time, binding);
            binding.setValue(value);
          }

          if (exoticAnimationEvaluator) {
            exoticAnimationEvaluator.evaluate(time);
          }
        };

        _proto3.evaluateRootMotion = function evaluateRootMotion(time, motionLength) {
          var rootMotionEvaluation = this._rootMotionEvaluation;

          if (rootMotionEvaluation) {
            rootMotionEvaluation.evaluate(time, motionLength);
          }
        };

        return AnimationClipEvaluation;
      }();

      var BoneTransform = function () {
        function BoneTransform() {
          this.position = new Vec3();
          this.scale = new Vec3(1.0, 1.0, 1.0);
          this.rotation = new Quat();
          this.eulerAngles = new Vec3();
        }

        var _proto4 = BoneTransform.prototype;

        _proto4.getTransform = function getTransform(out) {
          Mat4.fromRTS(out, this.rotation, this.position, this.scale);
        };

        return BoneTransform;
      }();

      var BoneGlobalTransform = function (_BoneTransform) {
        _inheritsLoose(BoneGlobalTransform, _BoneTransform);

        function BoneGlobalTransform() {
          var _this4;

          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }

          _this4 = _BoneTransform.call.apply(_BoneTransform, [this].concat(args)) || this;
          _this4.parent = null;
          _this4._dirty = true;
          _this4._transform = new Mat4();
          return _this4;
        }

        var _proto5 = BoneGlobalTransform.prototype;

        _proto5.invalidate = function invalidate() {
          this._dirty = true;
        };

        _createClass(BoneGlobalTransform, [{
          key: "globalTransform",
          get: function get() {
            var transform = this._transform;

            if (this._dirty) {
              this._dirty = false;
              Mat4.fromRTS(transform, this.rotation, this.position, this.scale);

              if (this.parent) {
                Mat4.multiply(transform, this.parent.globalTransform, transform);
              }
            }

            return this._transform;
          }
        }]);

        return BoneGlobalTransform;
      }(BoneTransform);

      var motionTransformCache = new Mat4();

      var RootMotionEvaluation = function () {
        function RootMotionEvaluation(_rootBone, _duration, _boneTransform, _trackEvalStatuses) {
          this._initialTransformCache = new Mat4();
          this._clipEndTransformCache = new Mat4();
          this._startTransformCache = new Mat4();
          this._endTransformCache = new Mat4();
          this._motionTransformCache = new Mat4();
          this._translationMotionCache = new Vec3();
          this._rotationMotionCache = new Quat();
          this._scaleMotionCache = new Vec3();
          this._rootBone = _rootBone;
          this._duration = _duration;
          this._boneTransform = _boneTransform;
          this._trackEvalStatuses = _trackEvalStatuses;
        }

        var _proto6 = RootMotionEvaluation.prototype;

        _proto6.evaluate = function evaluate(time, motionLength) {
          var motionTransform = this._calcMotionTransform(time, motionLength, this._motionTransformCache);

          var translationMotion = this._translationMotionCache,
              rotationMotion = this._rotationMotionCache,
              scaleMotion = this._scaleMotionCache,
              rootBone = this._rootBone;
          Mat4.toRTS(motionTransform, rotationMotion, translationMotion, scaleMotion);
          Vec3.add(translationMotion, translationMotion, rootBone.position);
          rootBone.setPosition(translationMotion);
          Quat.multiply(rotationMotion, rotationMotion, rootBone.rotation);
          rootBone.setRotation(rotationMotion);
          Vec3.multiply(scaleMotion, scaleMotion, rootBone.scale);
          rootBone.setScale(scaleMotion);
        };

        _proto6._calcMotionTransform = function _calcMotionTransform(time, motionLength, outTransform) {
          var duration = this._duration;
          var remainLength = duration - time;
          assertIsTrue(remainLength >= 0);

          var startTransform = this._evaluateAt(time, this._startTransformCache);

          if (motionLength < remainLength) {
            var endTransform = this._evaluateAt(time + motionLength, this._endTransformCache);

            relativeTransform(outTransform, startTransform, endTransform);
          } else {
            Mat4.identity(outTransform);

            var accumulateMotionTransform = function accumulateMotionTransform(from, to) {
              relativeTransform(motionTransformCache, from, to);
              Mat4.multiply(outTransform, outTransform, motionTransformCache);
            };

            var diff = motionLength - remainLength;
            var repeatCount = Math.floor(diff / duration);
            var lastRemainTime = diff - repeatCount * duration;

            var clipStartTransform = this._evaluateAt(0, this._initialTransformCache);

            var clipEndTransform = this._evaluateAt(duration, this._clipEndTransformCache);

            var _endTransform = this._evaluateAt(lastRemainTime, this._endTransformCache);

            accumulateMotionTransform(startTransform, clipEndTransform);
            relativeTransform(motionTransformCache, clipStartTransform, clipEndTransform);

            for (var i = 0; i < repeatCount; ++i) {
              Mat4.multiply(outTransform, outTransform, motionTransformCache);
            }

            accumulateMotionTransform(clipStartTransform, _endTransform);
          }

          return outTransform;
        };

        _proto6._evaluateAt = function _evaluateAt(time, outTransform) {
          var trackEvalStatuses = this._trackEvalStatuses;
          var nTrackEvalStatuses = trackEvalStatuses.length;

          for (var iTrackEvalStatus = 0; iTrackEvalStatus < nTrackEvalStatuses; ++iTrackEvalStatus) {
            var _trackEvalStatuses$iT2 = trackEvalStatuses[iTrackEvalStatus],
                trackEval = _trackEvalStatuses$iT2.trackEval,
                binding = _trackEvalStatuses$iT2.binding;
            var value = trackEval.evaluate(time, binding);
            binding.setValue(value);
          }

          this._boneTransform.getTransform(outTransform);

          return outTransform;
        };

        return RootMotionEvaluation;
      }();

      function relativeTransform(out, from, to) {
        Mat4.invert(out, from);
        Mat4.multiply(out, to, out);
      }

      function createBoneTransformBinding(boneTransform, property) {
        switch (property) {
          default:
            return undefined;

          case 'position':
            return {
              setValue: function setValue(value) {
                Vec3.copy(boneTransform.position, value);
              }
            };

          case 'rotation':
            return {
              setValue: function setValue(value) {
                Quat.copy(boneTransform.rotation, value);
              }
            };

          case 'scale':
            return {
              setValue: function setValue(value) {
                Vec3.copy(boneTransform.scale, value);
              }
            };

          case 'eulerAngles':
            return {
              setValue: function setValue(value) {
                Vec3.copy(boneTransform.eulerAngles, value);
              }
            };
        }
      }

      var InvalidIndex = -1;

      var EventEvaluator = function () {
        function EventEvaluator(_targetNode, _ratios, _eventGroups, _wrapMode) {
          this._lastFrameIndex = -1;
          this._lastIterations = 0.0;
          this._lastDirection = 0;
          this._ignoreIndex = InvalidIndex;
          this._sampled = false;
          this._targetNode = _targetNode;
          this._ratios = _ratios;
          this._eventGroups = _eventGroups;
          this._wrapMode = _wrapMode;
        }

        var _proto7 = EventEvaluator.prototype;

        _proto7.setWrapMode = function setWrapMode(wrapMode) {
          this._wrapMode = wrapMode;
        };

        _proto7.ignore = function ignore(ratio, direction) {
          this._ignoreIndex = InvalidIndex;
          this._sampled = false;
          var frameIndex = getEventGroupIndexAtRatio(ratio, this._ratios);

          if (frameIndex < 0) {
            frameIndex = ~frameIndex - 1;

            if (direction < 0) {
              frameIndex += 1;
            }

            this._ignoreIndex = frameIndex;
          }
        };

        _proto7.sample = function sample(ratio, direction, iterations) {
          var length = this._eventGroups.length;
          var eventIndex = getEventGroupIndexAtRatio(ratio, this._ratios);

          if (eventIndex < 0) {
            eventIndex = ~eventIndex - 1;

            if (direction < 0) {
              eventIndex += 1;
            }
          }

          if (this._ignoreIndex !== eventIndex) {
            this._ignoreIndex = InvalidIndex;
          }

          if (!this._sampled) {
            this._sampled = true;

            this._doFire(eventIndex, false);

            this._lastFrameIndex = eventIndex;
            this._lastIterations = iterations;
            this._lastDirection = direction;
            return;
          }

          var wrapMode = this._wrapMode;
          var currentIterations = wrapIterations(iterations);
          var lastIterations = wrapIterations(this._lastIterations);
          var lastIndex = this._lastFrameIndex;
          var lastDirection = this._lastDirection;
          var iterationsChanged = lastIterations !== -1 && currentIterations !== lastIterations;

          if (lastIndex === eventIndex && iterationsChanged && length === 1) {
            this._doFire(0, false);
          } else if (lastIndex !== eventIndex || iterationsChanged) {
            direction = lastDirection;

            do {
              if (lastIndex !== eventIndex) {
                if (direction === -1 && lastIndex === 0 && eventIndex > 0) {
                  if ((wrapMode & WrapModeMask.PingPong) === WrapModeMask.PingPong) {
                    direction *= -1;
                  } else {
                    lastIndex = length;
                  }

                  lastIterations++;
                } else if (direction === 1 && lastIndex === length - 1 && eventIndex < length - 1) {
                  if ((wrapMode & WrapModeMask.PingPong) === WrapModeMask.PingPong) {
                    direction *= -1;
                  } else {
                    lastIndex = -1;
                  }

                  lastIterations++;
                }

                if (lastIndex === eventIndex) {
                  break;
                }

                if (lastIterations > currentIterations) {
                  break;
                }
              }

              lastIndex += direction;

              this._doFire(lastIndex, true);
            } while (lastIndex !== eventIndex && lastIndex > -1 && lastIndex < length);
          }

          this._lastFrameIndex = eventIndex;
          this._lastIterations = iterations;
          this._lastDirection = direction;
        };

        _proto7._doFire = function _doFire(eventIndex, delay) {
          if (delay) {
            getGlobalAnimationManager().pushDelayEvent(this._checkAndFire, this, [eventIndex]);
          } else {
            this._checkAndFire(eventIndex);
          }
        };

        _proto7._checkAndFire = function _checkAndFire(eventIndex) {
          if (!this._targetNode || !this._targetNode.isValid) {
            return;
          }

          var eventGroups = this._eventGroups;

          if (eventIndex < 0 || eventIndex >= eventGroups.length || this._ignoreIndex === eventIndex) {
            return;
          }

          var eventGroup = eventGroups[eventIndex];
          var components = this._targetNode.components;
          var nEvents = eventGroup.events.length;

          for (var iEvent = 0; iEvent < nEvents; ++iEvent) {
            var event = eventGroup.events[iEvent];
            var functionName = event.functionName;
            var nComponents = components.length;

            for (var iComponent = 0; iComponent < nComponents; ++iComponent) {
              var component = components[iComponent];
              var fx = component[functionName];

              if (typeof fx === 'function') {
                fx.apply(component, event.parameters);
              }
            }
          }
        };

        return EventEvaluator;
      }();

      function wrapIterations(iterations) {
        if (iterations - (iterations | 0) === 0) {
          iterations -= 1;
        }

        return iterations | 0;
      }

      function getEventGroupIndexAtRatio(ratio, ratios) {
        var result = binarySearchEpsilon(ratios, ratio);
        return result;
      }

      var MAX_ANIMATION_LAYER = 32;

      var BlendStateBuffer = function () {
        function BlendStateBuffer() {
          this._nodeBlendStates = new Map();
        }

        var _proto = BlendStateBuffer.prototype;

        _proto.createWriter = function createWriter(node, property, host, constants) {
          var propertyBlendState = this.ref(node, property);
          return new BlendStateWriterInternal(node, property, propertyBlendState, host, constants);
        };

        _proto.destroyWriter = function destroyWriter(writer) {
          var internal = writer;
          this.deRef(internal.node, internal.property);
        };

        _proto.ref = function ref(node, property) {
          var nodeBlendState = this._nodeBlendStates.get(node);

          if (!nodeBlendState) {
            nodeBlendState = this.createNodeBlendState();

            this._nodeBlendStates.set(node, nodeBlendState);
          }

          var propertyBlendState = nodeBlendState.refProperty(node, property);
          return propertyBlendState;
        };

        _proto.deRef = function deRef(node, property) {
          var nodeBlendState = this._nodeBlendStates.get(node);

          if (!nodeBlendState) {
            return;
          }

          nodeBlendState.deRefProperty(property);

          if (nodeBlendState.empty) {
            this._nodeBlendStates["delete"](node);
          }
        };

        _proto.apply = function apply() {
          this._nodeBlendStates.forEach(function (nodeBlendState, node) {
            nodeBlendState.apply(node);
          });
        };

        return BlendStateBuffer;
      }();

      var BlendStateWriterInternal = function () {
        function BlendStateWriterInternal(_node, _property, _propertyBlendState, _host, _constants) {
          this._node = _node;
          this._property = _property;
          this._propertyBlendState = _propertyBlendState;
          this._host = _host;
          this._constants = _constants;
        }

        var _proto2 = BlendStateWriterInternal.prototype;

        _proto2.getValue = function getValue() {
          return this._node[this._property];
        };

        _proto2.setValue = function setValue(value) {
          var propertyBlendState = this._propertyBlendState,
              host = this._host;
          var weight = host.weight;
          propertyBlendState.blend(value, weight);
        };

        _createClass(BlendStateWriterInternal, [{
          key: "node",
          get: function get() {
            return this._node;
          }
        }, {
          key: "property",
          get: function get() {
            return this._property;
          }
        }]);

        return BlendStateWriterInternal;
      }();

      var TransformApplyFlag;

      (function (TransformApplyFlag) {
        TransformApplyFlag[TransformApplyFlag["POSITION"] = 1] = "POSITION";
        TransformApplyFlag[TransformApplyFlag["ROTATION"] = 2] = "ROTATION";
        TransformApplyFlag[TransformApplyFlag["SCALE"] = 4] = "SCALE";
        TransformApplyFlag[TransformApplyFlag["EULER_ANGLES"] = 8] = "EULER_ANGLES";
      })(TransformApplyFlag || (TransformApplyFlag = {}));

      var TRANSFORM_APPLY_FLAGS_ALL = TransformApplyFlag.POSITION | TransformApplyFlag.ROTATION | TransformApplyFlag.SCALE | TransformApplyFlag.EULER_ANGLES;

      var LegacyVec3PropertyBlendState = function () {
        function LegacyVec3PropertyBlendState() {
          this.refCount = 0;
          this.accumulatedWeight = 0.0;
          this.result = new Vec3();
        }

        var _proto3 = LegacyVec3PropertyBlendState.prototype;

        _proto3.blend = function blend(value, weight) {
          this.accumulatedWeight = mixAveragedVec3(this.result, this.result, this.accumulatedWeight, value, weight);
        };

        _proto3.reset = function reset() {
          this.accumulatedWeight = 0.0;
          Vec3.zero(this.result);
        };

        return LegacyVec3PropertyBlendState;
      }();

      var LegacyQuatPropertyBlendState = function () {
        function LegacyQuatPropertyBlendState() {
          this.refCount = 0;
          this.accumulatedWeight = 0.0;
          this.result = new Quat();
        }

        var _proto4 = LegacyQuatPropertyBlendState.prototype;

        _proto4.blend = function blend(value, weight) {
          this.accumulatedWeight = mixAveragedQuat(this.result, this.result, this.accumulatedWeight, value, weight);
        };

        _proto4.reset = function reset() {
          this.accumulatedWeight = 0.0;
          Quat.identity(this.result);
        };

        return LegacyQuatPropertyBlendState;
      }();

      var NodeBlendState = function () {
        function NodeBlendState() {
          this._transformApplyFlags = 0;
          this._properties = {};
        }

        var _proto5 = NodeBlendState.prototype;

        _proto5.refProperty = function refProperty(node, property) {
          var _properties$property, _properties$property2;

          var properties = this._properties;
          var propertyBlendState;

          switch (property) {
            default:
            case 'position':
            case 'scale':
            case 'eulerAngles':
              propertyBlendState = (_properties$property = properties[property]) !== null && _properties$property !== void 0 ? _properties$property : properties[property] = this._createVec3BlendState(node[property]);
              break;

            case 'rotation':
              propertyBlendState = (_properties$property2 = properties[property]) !== null && _properties$property2 !== void 0 ? _properties$property2 : properties[property] = this._createQuatBlendState(node.rotation);
              break;
          }

          ++propertyBlendState.refCount;
          return propertyBlendState;
        };

        _proto5.deRefProperty = function deRefProperty(property) {
          var properties = this._properties;
          var propertyBlendState = properties[property];

          if (!propertyBlendState) {
            return;
          }

          --propertyBlendState.refCount;

          if (propertyBlendState.refCount > 0) {
            return;
          }

          delete properties[property];
        };

        _proto5.apply = function apply(node) {
          var transformApplyFlags = this._transformApplyFlags,
              _this$_properties = this._properties,
              position = _this$_properties.position,
              scale = _this$_properties.scale,
              rotation = _this$_properties.rotation,
              eulerAngles = _this$_properties.eulerAngles;

          if (!transformApplyFlags) {
            return;
          }

          var t;
          var s;
          var r;

          if (position && transformApplyFlags & TransformApplyFlag.POSITION) {
            t = position.result;
          }

          if (scale && transformApplyFlags & TransformApplyFlag.SCALE) {
            s = scale.result;
          }

          if (eulerAngles && transformApplyFlags & TransformApplyFlag.EULER_ANGLES) {
            r = eulerAngles.result;
          }

          if (rotation && transformApplyFlags & TransformApplyFlag.ROTATION) {
            r = rotation.result;
          }

          if (r || t || s) {
            node.setRTS(r, t, s);
          }

          this._transformApplyFlags = 0;
        };

        _createClass(NodeBlendState, [{
          key: "empty",
          get: function get() {
            var properties = this._properties;
            return !properties.position && !properties.rotation && !properties.eulerAngles && !properties.scale;
          }
        }]);

        return NodeBlendState;
      }();

      var LegacyNodeBlendState = function (_NodeBlendState) {
        _inheritsLoose(LegacyNodeBlendState, _NodeBlendState);

        function LegacyNodeBlendState() {
          return _NodeBlendState.apply(this, arguments) || this;
        }

        var _proto6 = LegacyNodeBlendState.prototype;

        _proto6.apply = function apply(node) {
          var _this$_properties2 = this._properties,
              position = _this$_properties2.position,
              scale = _this$_properties2.scale,
              rotation = _this$_properties2.rotation,
              eulerAngles = _this$_properties2.eulerAngles;

          if (position && position.accumulatedWeight) {
            this._transformApplyFlags |= TransformApplyFlag.POSITION;

            if (position.accumulatedWeight < 1.0) {
              position.blend(node.position, 1.0 - position.accumulatedWeight);
            }
          }

          if (scale && scale.accumulatedWeight) {
            this._transformApplyFlags |= TransformApplyFlag.SCALE;

            if (scale.accumulatedWeight < 1.0) {
              scale.blend(node.scale, 1.0 - scale.accumulatedWeight);
            }
          }

          if (eulerAngles && eulerAngles.accumulatedWeight) {
            this._transformApplyFlags |= TransformApplyFlag.EULER_ANGLES;

            if (eulerAngles.accumulatedWeight < 1.0) {
              eulerAngles.blend(node.eulerAngles, 1.0 - eulerAngles.accumulatedWeight);
            }
          }

          if (rotation && rotation.accumulatedWeight) {
            this._transformApplyFlags |= TransformApplyFlag.ROTATION;

            if (rotation.accumulatedWeight < 1.0) {
              rotation.blend(node.rotation, 1.0 - rotation.accumulatedWeight);
            }
          }

          _NodeBlendState.prototype.apply.call(this, node);

          position === null || position === void 0 ? void 0 : position.reset();
          scale === null || scale === void 0 ? void 0 : scale.reset();
          rotation === null || rotation === void 0 ? void 0 : rotation.reset();
          eulerAngles === null || eulerAngles === void 0 ? void 0 : eulerAngles.reset();
        };

        _proto6._createVec3BlendState = function _createVec3BlendState(_currentValue) {
          return new LegacyVec3PropertyBlendState();
        };

        _proto6._createQuatBlendState = function _createQuatBlendState(_currentValue) {
          return new LegacyQuatPropertyBlendState();
        };

        return LegacyNodeBlendState;
      }(NodeBlendState);

      var LegacyBlendStateBuffer = function (_BlendStateBuffer) {
        _inheritsLoose(LegacyBlendStateBuffer, _BlendStateBuffer);

        function LegacyBlendStateBuffer() {
          return _BlendStateBuffer.apply(this, arguments) || this;
        }

        var _proto7 = LegacyBlendStateBuffer.prototype;

        _proto7.createNodeBlendState = function createNodeBlendState() {
          return new LegacyNodeBlendState();
        };

        return LegacyBlendStateBuffer;
      }(BlendStateBuffer);

      var LayeredVec3PropertyBlendState = function () {
        function LayeredVec3PropertyBlendState(defaultValue) {
          this.refCount = 0;
          this.result = new Vec3();
          this._defaultValue = new Vec3();
          this._clipBlendResult = new Vec3();
          this._accumulatedWeight = 0.0;
          Vec3.copy(this._defaultValue, defaultValue);
          Vec3.copy(this.result, defaultValue);
        }

        var _proto8 = LayeredVec3PropertyBlendState.prototype;

        _proto8.blend = function blend(value, weight) {
          this._accumulatedWeight = mixAveragedVec3(this._clipBlendResult, this._clipBlendResult, this._accumulatedWeight, value, weight);
        };

        _proto8.commitLayerChange = function commitLayerChange(weight) {
          var result = this.result,
              clipBlendResult = this._clipBlendResult,
              accumulatedWeight = this._accumulatedWeight;

          if (accumulatedWeight < 1.0) {
            this.blend(this._defaultValue, 1.0 - accumulatedWeight);
          }

          Vec3.lerp(result, result, clipBlendResult, weight);
          Vec3.zero(this._clipBlendResult);
          this._accumulatedWeight = 0.0;
        };

        _proto8.reset = function reset() {
          Vec3.copy(this.result, this._defaultValue);
        };

        return LayeredVec3PropertyBlendState;
      }();

      var LayeredQuatPropertyBlendState = function () {
        function LayeredQuatPropertyBlendState(defaultValue) {
          this.refCount = 0;
          this.result = new Quat();
          this._defaultValue = new Quat();
          this._clipBlendResult = new Quat();
          this._accumulatedWeight = 0.0;
          Quat.copy(this._defaultValue, defaultValue);
          Quat.copy(this.result, defaultValue);
        }

        var _proto9 = LayeredQuatPropertyBlendState.prototype;

        _proto9.blend = function blend(value, weight) {
          this._accumulatedWeight = mixAveragedQuat(this._clipBlendResult, this._clipBlendResult, this._accumulatedWeight, value, weight);
        };

        _proto9.commitLayerChange = function commitLayerChange(weight) {
          var result = this.result,
              clipBlendResult = this._clipBlendResult,
              accumulatedWeight = this._accumulatedWeight;

          if (accumulatedWeight < 1.0) {
            this.blend(this._defaultValue, 1.0 - accumulatedWeight);
          }

          Quat.slerp(result, result, clipBlendResult, weight);
          Quat.identity(this._clipBlendResult);
          this._accumulatedWeight = 0.0;
        };

        _proto9.reset = function reset() {
          Quat.copy(this.result, this._defaultValue);
        };

        return LayeredQuatPropertyBlendState;
      }();

      var LayeredNodeBlendState = function (_NodeBlendState2) {
        _inheritsLoose(LayeredNodeBlendState, _NodeBlendState2);

        function LayeredNodeBlendState() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _NodeBlendState2.call.apply(_NodeBlendState2, [this].concat(args)) || this;
          _this._layerMask = ~0 >>> 0;
          return _this;
        }

        var _proto10 = LayeredNodeBlendState.prototype;

        _proto10.setLayerMask = function setLayerMask(layerIndex) {
          this._layerMask &= ~(1 << layerIndex);
        };

        _proto10.commitLayerChanges = function commitLayerChanges(layerIndex, weight) {
          if (!(this._layerMask & 1 << layerIndex)) {
            return;
          }

          var _this$_properties3 = this._properties,
              position = _this$_properties3.position,
              scale = _this$_properties3.scale,
              rotation = _this$_properties3.rotation,
              eulerAngles = _this$_properties3.eulerAngles;

          if (position) {
            position.commitLayerChange(weight);
          }

          if (scale) {
            scale.commitLayerChange(weight);
          }

          if (rotation) {
            rotation.commitLayerChange(weight);
          }

          if (eulerAngles) {
            eulerAngles.commitLayerChange(weight);
          }
        };

        _proto10.apply = function apply(node) {
          this._transformApplyFlags = TRANSFORM_APPLY_FLAGS_ALL;

          _NodeBlendState2.prototype.apply.call(this, node);

          var _this$_properties4 = this._properties,
              position = _this$_properties4.position,
              scale = _this$_properties4.scale,
              rotation = _this$_properties4.rotation,
              eulerAngles = _this$_properties4.eulerAngles;
          position === null || position === void 0 ? void 0 : position.reset();
          scale === null || scale === void 0 ? void 0 : scale.reset();
          rotation === null || rotation === void 0 ? void 0 : rotation.reset();
          eulerAngles === null || eulerAngles === void 0 ? void 0 : eulerAngles.reset();
        };

        _proto10._createVec3BlendState = function _createVec3BlendState(currentValue) {
          return new LayeredVec3PropertyBlendState(currentValue);
        };

        _proto10._createQuatBlendState = function _createQuatBlendState(currentValue) {
          return new LayeredQuatPropertyBlendState(currentValue);
        };

        return LayeredNodeBlendState;
      }(NodeBlendState);

      var LayeredBlendStateBuffer = function (_BlendStateBuffer2) {
        _inheritsLoose(LayeredBlendStateBuffer, _BlendStateBuffer2);

        function LayeredBlendStateBuffer() {
          return _BlendStateBuffer2.apply(this, arguments) || this;
        }

        var _proto11 = LayeredBlendStateBuffer.prototype;

        _proto11.setMask = function setMask(layerIndex, excludeNodes) {
          {
            checkLayerIndex(layerIndex);
          }

          this._nodeBlendStates.forEach(function (nodeBlendState, node) {
            if (excludeNodes.has(node)) {
              nodeBlendState.setLayerMask(layerIndex);
            }
          });
        };

        _proto11.commitLayerChanges = function commitLayerChanges(layerIndex, weight) {
          {
            checkLayerIndex(layerIndex);
          }

          this._nodeBlendStates.forEach(function (nodeBlendState, node) {
            nodeBlendState.commitLayerChanges(layerIndex, weight);
          });
        };

        _proto11.createNodeBlendState = function createNodeBlendState() {
          return new LayeredNodeBlendState();
        };

        return LayeredBlendStateBuffer;
      }(BlendStateBuffer);

      function checkLayerIndex(layerIndex) {
        assertIsTrue(layerIndex < MAX_ANIMATION_LAYER);
      }

      function mixAveragedVec3(result, previous, accumulatedWeight, input, weight) {
        var newSum = accumulatedWeight + weight;

        if (weight === 1.0 && !accumulatedWeight) {
          Vec3.copy(result, input);
        } else if (newSum) {
          var t = weight / newSum;
          Vec3.lerp(result, result, input, t);
        }

        return newSum;
      }

      function mixAveragedQuat(result, previous, accumulatedWeight, input, weight) {
        var newSum = accumulatedWeight + weight;

        if (weight === 1.0 && !accumulatedWeight) {
          Quat.copy(result, input);
        } else if (newSum) {
          var t = weight / newSum;
          Quat.slerp(result, previous, input, t);
        }

        return newSum;
      }

      var stack = [];
      var pool$1 = new Map();
      function getWorldMatrix(transform, stamp) {
        var i = 0;
        var res = Mat4.IDENTITY;

        while (transform) {
          if (transform.stamp === stamp || transform.stamp + 1 === stamp && !transform.node.hasChangedFlags) {
            res = transform.world;
            transform.stamp = stamp;
            break;
          }

          transform.stamp = stamp;
          stack[i++] = transform;
          transform = transform.parent;
        }

        while (i > 0) {
          transform = stack[--i];
          stack[i] = null;
          var node = transform.node;
          Mat4.fromRTS(transform.local, node.rotation, node.position, node.scale);
          res = Mat4.multiply(transform.world, res, transform.local);
        }

        return res;
      }
      function getTransform(node, root) {
        var joint = null;
        var i = 0;

        while (node !== root) {
          var id = node.uuid;

          if (pool$1.has(id)) {
            joint = pool$1.get(id);
            break;
          } else {
            joint = {
              node: node,
              local: new Mat4(),
              world: new Mat4(),
              stamp: -1,
              parent: null
            };
            pool$1.set(id, joint);
          }

          stack[i++] = joint;
          node = node.parent;
          joint = null;
        }

        var child;

        while (i > 0) {
          child = stack[--i];
          stack[i] = null;
          child.parent = joint;
          joint = child;
        }

        return joint;
      }
      function deleteTransform(node) {
        var transform = pool$1.get(node.uuid) || null;

        while (transform) {
          pool$1["delete"](transform.node.uuid);
          transform = transform.parent;
        }
      }

      var _class$1n, _class2$1c, _temp$w;
      var AnimationManager = exports('AnimationManager', ccclass(_class$1n = (_temp$w = _class2$1c = function (_System) {
        _inheritsLoose(AnimationManager, _System);

        function AnimationManager() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _System.call.apply(_System, [this].concat(args)) || this;
          _this._anims = new MutableForwardIterator([]);
          _this._crossFades = new MutableForwardIterator([]);
          _this._delayEvents = [];
          _this._blendStateBuffer = new LegacyBlendStateBuffer();
          _this._sockets = [];
          return _this;
        }

        var _proto = AnimationManager.prototype;

        _proto.addCrossFade = function addCrossFade(crossFade) {
          var index = this._crossFades.array.indexOf(crossFade);

          if (index === -1) {
            this._crossFades.push(crossFade);
          }
        };

        _proto.removeCrossFade = function removeCrossFade(crossFade) {
          var index = this._crossFades.array.indexOf(crossFade);

          if (index >= 0) {
            this._crossFades.fastRemoveAt(index);
          } else {
            errorID(3907);
          }
        };

        _proto.update = function update(dt) {
          var _delayEvents = this._delayEvents,
              crossFadesIter = this._crossFades,
              _sockets = this._sockets;
          {
            var crossFades = crossFadesIter.array;

            for (crossFadesIter.i = 0; crossFadesIter.i < crossFades.length; ++crossFadesIter.i) {
              var crossFade = crossFades[crossFadesIter.i];
              crossFade.update(dt);
            }
          }
          var iterator = this._anims;
          var array = iterator.array;

          for (iterator.i = 0; iterator.i < array.length; ++iterator.i) {
            var anim = array[iterator.i];

            if (!anim.isMotionless) {
              anim.update(dt);
            }
          }

          this._blendStateBuffer.apply();

          var stamp = director.getTotalFrames();

          for (var i = 0, l = _sockets.length; i < l; i++) {
            var _sockets$i = _sockets[i],
                target = _sockets$i.target,
                transform = _sockets$i.transform;
            target.matrix = getWorldMatrix(transform, stamp);
          }

          for (var _i = 0, _l = _delayEvents.length; _i < _l; _i++) {
            var event = _delayEvents[_i];
            event.fn.apply(event.thisArg, event.args);
          }

          _delayEvents.length = 0;
        };

        _proto.destruct = function destruct() {};

        _proto.addAnimation = function addAnimation(anim) {
          var index = this._anims.array.indexOf(anim);

          if (index === -1) {
            this._anims.push(anim);
          }
        };

        _proto.removeAnimation = function removeAnimation(anim) {
          var index = this._anims.array.indexOf(anim);

          if (index >= 0) {
            this._anims.fastRemoveAt(index);
          } else {
            errorID(3907);
          }
        };

        _proto.pushDelayEvent = function pushDelayEvent(fn, thisArg, args) {
          this._delayEvents.push({
            fn: fn,
            thisArg: thisArg,
            args: args
          });
        };

        _proto.addSockets = function addSockets(root, sockets) {
          var _this2 = this;

          var _loop = function _loop(i) {
            var socket = sockets[i];

            if (_this2._sockets.find(function (s) {
              return s.target === socket.target;
            })) {
              return "continue";
            }

            var targetNode = root.getChildByPath(socket.path);
            var transform = socket.target && targetNode && getTransform(targetNode, root);

            if (transform) {
              _this2._sockets.push({
                target: socket.target,
                transform: transform
              });
            }
          };

          for (var i = 0; i < sockets.length; ++i) {
            var _ret = _loop(i);

            if (_ret === "continue") continue;
          }
        };

        _proto.removeSockets = function removeSockets(root, sockets) {
          for (var i = 0; i < sockets.length; ++i) {
            var socketToRemove = sockets[i];

            for (var j = 0; j < this._sockets.length; ++j) {
              var socket = this._sockets[j];

              if (socket.target === socketToRemove.target) {
                deleteTransform(socket.transform.node);
                this._sockets[j] = this._sockets[this._sockets.length - 1];
                this._sockets.length--;
                break;
              }
            }
          }
        };

        _createClass(AnimationManager, [{
          key: "blendState",
          get: function get() {
            return this._blendStateBuffer;
          }
        }]);

        return AnimationManager;
      }(System), _class2$1c.ID = 'animation', _temp$w)) || _class$1n);
      director.on(Director.EVENT_INIT, function () {
        var animationManager = new AnimationManager();
        director.registerSystem(AnimationManager.ID, animationManager, System.Priority.HIGH);
      });
      legacyCC.AnimationManager = AnimationManager;

      var CrossFade = function (_Playable) {
        _inheritsLoose(CrossFade, _Playable);

        function CrossFade(scheduler) {
          var _this;

          _this = _Playable.call(this) || this;
          _this._managedStates = [];
          _this._fadings = [];
          _this._scheduled = false;
          _this._scheduler = scheduler !== null && scheduler !== void 0 ? scheduler : getGlobalAnimationManager();
          return _this;
        }

        var _proto = CrossFade.prototype;

        _proto.update = function update(deltaTime) {
          if (this.isMotionless) {
            return;
          }

          var managedStates = this._managedStates;
          var fadings = this._fadings;

          if (managedStates.length === 1 && fadings.length === 1) {
            var state = managedStates[0].state;

            if (state) {
              state.weight = 1.0;
            }
          } else {
            this._calculateWeights(deltaTime);
          }

          if (managedStates.length === 1 && fadings.length === 1) {
            this._unscheduleThis();
          }
        };

        _proto.crossFade = function crossFade(state, duration) {
          var _target$state;

          if (this._managedStates.length === 0) {
            duration = 0;
          }

          if (duration === 0) {
            this.clear();
          }

          var target = this._managedStates.find(function (weightedState) {
            return weightedState.state === state;
          });

          if (!target) {
            target = {
              state: state,
              reference: 0
            };

            if (state) {
              state.play();
            }

            this._managedStates.push(target);
          } else if ((_target$state = target.state) !== null && _target$state !== void 0 && _target$state.isMotionless) {
            target.state.play();
          }

          ++target.reference;

          this._fadings.unshift({
            easeDuration: duration,
            easeTime: 0,
            target: target
          });

          if (!this.isMotionless) {
            this._scheduleThis();
          }
        };

        _proto.clear = function clear() {
          for (var iManagedState = 0; iManagedState < this._managedStates.length; ++iManagedState) {
            var state = this._managedStates[iManagedState].state;

            if (state) {
              state.stop();
            }
          }

          this._managedStates.length = 0;
          this._fadings.length = 0;
        };

        _proto.onPlay = function onPlay() {
          _Playable.prototype.onPlay.call(this);

          this._scheduleThis();
        };

        _proto.onPause = function onPause() {
          _Playable.prototype.onPause.call(this);

          for (var iManagedState = 0; iManagedState < this._managedStates.length; ++iManagedState) {
            var state = this._managedStates[iManagedState].state;

            if (state) {
              state.pause();
            }
          }

          this._unscheduleThis();
        };

        _proto.onResume = function onResume() {
          _Playable.prototype.onResume.call(this);

          for (var iManagedState = 0; iManagedState < this._managedStates.length; ++iManagedState) {
            var state = this._managedStates[iManagedState].state;

            if (state) {
              state.resume();
            }
          }

          this._scheduleThis();
        };

        _proto.onStop = function onStop() {
          _Playable.prototype.onStop.call(this);

          this.clear();
        };

        _proto._calculateWeights = function _calculateWeights(deltaTime) {
          var managedStates = this._managedStates;
          var fadings = this._fadings;

          for (var iManagedState = 0; iManagedState < managedStates.length; ++iManagedState) {
            var state = managedStates[iManagedState].state;

            if (state) {
              state.weight = 0;
            }
          }

          var absoluteWeight = 1.0;
          var deadFadingBegin = fadings.length;

          for (var iFading = 0; iFading < fadings.length; ++iFading) {
            var fading = fadings[iFading];
            fading.easeTime += deltaTime;
            var relativeWeight = fading.easeDuration === 0 ? 1 : clamp01(fading.easeTime / fading.easeDuration);
            var weight = relativeWeight * absoluteWeight;
            absoluteWeight *= 1.0 - relativeWeight;

            if (fading.target.state) {
              fading.target.state.weight += weight;
            }

            if (fading.easeTime >= fading.easeDuration) {
              deadFadingBegin = iFading + 1;
              fading.easeTime = fading.easeDuration;
              break;
            }
          }

          if (deadFadingBegin !== fadings.length) {
            for (var iDeadFading = deadFadingBegin; iDeadFading < fadings.length; ++iDeadFading) {
              var deadFading = fadings[iDeadFading];
              --deadFading.target.reference;

              if (deadFading.target.reference <= 0) {
                if (deadFading.target.state) {
                  deadFading.target.state.stop();
                }

                remove(this._managedStates, deadFading.target);
              }
            }

            fadings.splice(deadFadingBegin);
          }
        };

        _proto._scheduleThis = function _scheduleThis() {
          if (!this._scheduled) {
            this._scheduler.addCrossFade(this);

            this._scheduled = true;
          }
        };

        _proto._unscheduleThis = function _unscheduleThis() {
          if (this._scheduled) {
            this._scheduler.removeCrossFade(this);

            this._scheduled = false;
          }
        };

        return CrossFade;
      }(Playable);

      var _dec$1n, _dec2$J, _dec3$o, _dec4$c, _dec5$9, _class$1o, _class2$1d, _initializer$11, _initializer2$I, _initializer3$v, _class3$n, _temp$x;
      var Animation = function (v) { return exports({ Animation: v, AnimationComponent: v }), v; }((_dec$1n = ccclass('cc.Animation'), _dec2$J = executionOrder(99), _dec3$o = type([AnimationClip]), _dec4$c = type(AnimationClip), _dec5$9 = type([AnimationClip]), _dec$1n(_class$1o = _dec2$J(_class$1o = (_class2$1d = (_temp$x = _class3$n = function (_Eventify) {
        _inheritsLoose(Animation, _Eventify);

        function Animation() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Eventify.call.apply(_Eventify, [this].concat(args)) || this;
          _this.playOnLoad = _initializer$11 && _initializer$11();
          _this._crossFade = new CrossFade();
          _this._nameToState = createMap(true);
          _this._clips = _initializer2$I && _initializer2$I();
          _this._defaultClip = _initializer3$v && _initializer3$v();
          _this._hasBeenPlayed = false;
          return _this;
        }

        var _proto = Animation.prototype;

        _proto.onLoad = function onLoad() {
          this.clips = this._clips;

          for (var stateName in this._nameToState) {
            var state = this._nameToState[stateName];
            state.initialize(this.node);
          }
        };

        _proto.start = function start() {
          if ( this.playOnLoad && !this._hasBeenPlayed && this._defaultClip) {
            this.crossFade(this._defaultClip.name, 0);
          }
        };

        _proto.onEnable = function onEnable() {
          this._crossFade.resume();
        };

        _proto.onDisable = function onDisable() {
          this._crossFade.pause();
        };

        _proto.onDestroy = function onDestroy() {
          this._crossFade.stop();

          for (var name in this._nameToState) {
            var state = this._nameToState[name];
            state.destroy();
          }

          this._nameToState = createMap(true);
        };

        _proto.play = function play(name) {
          this._hasBeenPlayed = true;

          if (!name) {
            if (!this._defaultClip) {
              return;
            }

            name = this._defaultClip.name;
          }

          this.crossFade(name, 0);
        };

        _proto.crossFade = function crossFade(name, duration) {
          if (duration === void 0) {
            duration = 0.3;
          }

          this._hasBeenPlayed = true;
          var state = this._nameToState[name];

          if (state) {
            this.doPlayOrCrossFade(state, duration);
          }
        };

        _proto.pause = function pause() {
          this._crossFade.pause();
        };

        _proto.resume = function resume() {
          this._crossFade.resume();
        };

        _proto.stop = function stop() {
          this._crossFade.stop();
        };

        _proto.getState = function getState(name) {
          var state = this._nameToState[name];

          if (state && !state.curveLoaded) {
            state.initialize(this.node);
          }

          return state || null;
        };

        _proto.createState = function createState(clip, name) {
          name = name || clip.name;
          this.removeState(name);
          return this._doCreateState(clip, name);
        };

        _proto.removeState = function removeState(name) {
          var state = this._nameToState[name];

          if (state) {
            state.allowLastFrameEvent(false);
            state.stop();
            delete this._nameToState[name];
          }
        };

        _proto.addClip = function addClip(clip, name) {
          if (contains(this._clips, clip)) {
            this._clips.push(clip);
          }

          return this.createState(clip, name);
        };

        _proto.removeClip = function removeClip(clip, force) {
          var removalState;

          for (var name in this._nameToState) {
            var state = this._nameToState[name];
            var stateClip = state.clip;

            if (stateClip === clip) {
              removalState = state;
              break;
            }
          }

          if (clip === this._defaultClip) {
            if (force) {
              this._defaultClip = null;
            } else {
              {
                warnID(3902);
              }

              return;
            }
          }

          if (removalState && removalState.isPlaying) {
            if (force) {
              removalState.stop();
            } else {
              {
                warnID(3903);
              }

              return;
            }
          }

          this._clips = this._clips.filter(function (item) {
            return item !== clip;
          });

          if (removalState) {
            delete this._nameToState[removalState.name];
          }
        };

        _proto.on = function on(type, callback, thisArg, once) {
          var ret = _Eventify.prototype.on.call(this, type, callback, thisArg, once);

          if (type === EventType$1.LASTFRAME) {
            this._syncAllowLastFrameEvent();
          }

          return ret;
        };

        _proto.once = function once(type, callback, thisArg) {
          var ret = _Eventify.prototype.once.call(this, type, callback, thisArg);

          if (type === EventType$1.LASTFRAME) {
            this._syncAllowLastFrameEvent();
          }

          return ret;
        };

        _proto.off = function off(type, callback, thisArg) {
          _Eventify.prototype.off.call(this, type, callback, thisArg);

          if (type === EventType$1.LASTFRAME) {
            this._syncDisallowLastFrameEvent();
          }
        };

        _proto._createState = function _createState(clip, name) {
          return new AnimationState(clip, name);
        };

        _proto._doCreateState = function _doCreateState(clip, name) {
          var state = this._createState(clip, name);

          state._setEventTarget(this);

          state.allowLastFrameEvent(this.hasEventListener(EventType$1.LASTFRAME));

          if (this.node) {
            state.initialize(this.node);
          }

          this._nameToState[state.name] = state;
          return state;
        };

        _proto.doPlayOrCrossFade = function doPlayOrCrossFade(state, duration) {
          this._crossFade.play();

          this._crossFade.crossFade(state, duration);
        };

        _proto._removeStateOfAutomaticClip = function _removeStateOfAutomaticClip(clip) {
          for (var name in this._nameToState) {
            var state = this._nameToState[name];

            if (equalClips(clip, state.clip)) {
              state.stop();
              delete this._nameToState[name];
            }
          }
        };

        _proto._syncAllowLastFrameEvent = function _syncAllowLastFrameEvent() {
          if (this.hasEventListener(EventType$1.LASTFRAME)) {
            for (var stateName in this._nameToState) {
              this._nameToState[stateName].allowLastFrameEvent(true);
            }
          }
        };

        _proto._syncDisallowLastFrameEvent = function _syncDisallowLastFrameEvent() {
          if (!this.hasEventListener(EventType$1.LASTFRAME)) {
            for (var stateName in this._nameToState) {
              this._nameToState[stateName].allowLastFrameEvent(false);
            }
          }
        };

        _createClass(Animation, [{
          key: "clips",
          get: function get() {
            return this._clips;
          },
          set: function set(value) {
            var _this2 = this;

            if (this._crossFade) {
              this._crossFade.clear();
            }

            for (var _iterator = _createForOfIteratorHelperLoose(this._clips), _step; !(_step = _iterator()).done;) {
              var clip = _step.value;

              if (clip) {
                this._removeStateOfAutomaticClip(clip);
              }
            }

            for (var _iterator2 = _createForOfIteratorHelperLoose(value), _step2; !(_step2 = _iterator2()).done;) {
              var _clip = _step2.value;

              if (_clip) {
                this.createState(_clip);
              }
            }

            var newDefaultClip = value.find(function (clip) {
              return equalClips(clip, _this2._defaultClip);
            });

            if (newDefaultClip) {
              this._defaultClip = newDefaultClip;
            } else {
              this._defaultClip = null;
            }

            this._clips = value;
          }
        }, {
          key: "defaultClip",
          get: function get() {
            return this._defaultClip;
          },
          set: function set(value) {
            this._defaultClip = value;

            if (!value) {
              return;
            }

            var isBoundedDefaultClip = this._clips.findIndex(function (clip) {
              return equalClips(clip, value);
            }) >= 0;

            if (!isBoundedDefaultClip) {
              this._clips.push(value);

              this.createState(value);
            }
          }
        }]);

        return Animation;
      }(Eventify(Component)), _class3$n.EventType = EventType$1, _temp$x), (_applyDecoratedDescriptor(_class2$1d.prototype, "clips", [_dec3$o], Object.getOwnPropertyDescriptor(_class2$1d.prototype, "clips"), _class2$1d.prototype), _applyDecoratedDescriptor(_class2$1d.prototype, "defaultClip", [_dec4$c], Object.getOwnPropertyDescriptor(_class2$1d.prototype, "defaultClip"), _class2$1d.prototype), _initializer$11 = applyDecoratedInitializer(_class2$1d.prototype, "playOnLoad", [serializable], function () {
        return false;
      }), _initializer2$I = applyDecoratedInitializer(_class2$1d.prototype, "_clips", [_dec5$9], function () {
        return [];
      }), _initializer3$v = applyDecoratedInitializer(_class2$1d.prototype, "_defaultClip", [serializable], function () {
        return null;
      })), _class2$1d)) || _class$1o) || _class$1o));

      function equalClips(clip1, clip2) {
        if (clip1 === clip2) {
          return true;
        }

        return !!clip1 && !!clip2 && clip1._uuid === clip2._uuid && clip1._uuid;
      }

      legacyCC.Animation = Animation;
      legacyCC.AnimationComponent = Animation;
      setClassAlias(Animation, 'cc.AnimationComponent');

      var m4_1$3 = new Mat4();
      function getPathFromRoot(target, root) {
        var node = target;
        var path = '';

        while (node !== null && node !== root) {
          path = node.name + "/" + path;
          node = node.parent;
        }

        return path.slice(0, -1);
      }
      function getWorldTransformUntilRoot(target, root, outMatrix) {
        Mat4.identity(outMatrix);

        while (target !== root) {
          Mat4.fromRTS(m4_1$3, target.rotation, target.position, target.scale);
          Mat4.multiply(outMatrix, m4_1$3, outMatrix);
          target = target.parent;
        }

        return outMatrix;
      }

      var AudioEvent;

      (function (AudioEvent) {
        AudioEvent["PLAYED"] = "play";
        AudioEvent["PAUSED"] = "pause";
        AudioEvent["STOPPED"] = "stop";
        AudioEvent["SEEKED"] = "seeked";
        AudioEvent["ENDED"] = "ended";
        AudioEvent["INTERRUPTION_BEGIN"] = "interruptionBegin";
        AudioEvent["INTERRUPTION_END"] = "interruptionEnd";
        AudioEvent["USER_GESTURE"] = "on_gesture";
      })(AudioEvent || (AudioEvent = {}));

      var AudioType;

      (function (AudioType) {
        AudioType[AudioType["DOM_AUDIO"] = 0] = "DOM_AUDIO";
        AudioType[AudioType["WEB_AUDIO"] = 1] = "WEB_AUDIO";
        AudioType[AudioType["MINIGAME_AUDIO"] = 2] = "MINIGAME_AUDIO";
        AudioType[AudioType["NATIVE_AUDIO"] = 3] = "NATIVE_AUDIO";
        AudioType[AudioType["UNKNOWN_AUDIO"] = 4] = "UNKNOWN_AUDIO";
      })(AudioType || (AudioType = {}));

      var AudioState;

      (function (AudioState) {
        AudioState[AudioState["INIT"] = 0] = "INIT";
        AudioState[AudioState["PLAYING"] = 1] = "PLAYING";
        AudioState[AudioState["PAUSED"] = 2] = "PAUSED";
        AudioState[AudioState["STOPPED"] = 3] = "STOPPED";
        AudioState[AudioState["INTERRUPTED"] = 4] = "INTERRUPTED";
      })(AudioState || (AudioState = {}));

      var AudioPCMDataView = exports('AudioPCMDataView', function () {
        function AudioPCMDataView() {
          this._bufferView = void 0;
          this._normalizeFactor = 1;

          if (arguments.length === 2) {
            this._bufferView = arguments.length <= 0 ? undefined : arguments[0];
            this._normalizeFactor = arguments.length <= 1 ? undefined : arguments[1];
          } else {
            var _arrayBuffer = arguments.length <= 0 ? undefined : arguments[0];

            var _Ctor = arguments.length <= 1 ? undefined : arguments[1];

            var _normalizeFactor = arguments.length <= 2 ? undefined : arguments[2];

            this._bufferView = new _Ctor(_arrayBuffer);
            this._normalizeFactor = _normalizeFactor;
          }
        }

        var _proto = AudioPCMDataView.prototype;

        _proto.getData = function getData(offset) {
          return this._bufferView[offset] * this._normalizeFactor;
        };

        _createClass(AudioPCMDataView, [{
          key: "length",
          get: function get() {
            return this._bufferView.length;
          }
        }]);

        return AudioPCMDataView;
      }());

      var operationId = 0;

      function _tryCallingRecursively(target, opInfo) {
        var _opInfo$func;

        if (opInfo.invoking) {
          return;
        }

        opInfo.invoking = true;

        (_opInfo$func = opInfo.func).call.apply(_opInfo$func, [target].concat(opInfo.args)).then(function () {
          opInfo.invoking = false;

          target._operationQueue.shift();

          target._eventTarget.emit(opInfo.id.toString());

          var nextOpInfo = target._operationQueue[0];
          nextOpInfo && _tryCallingRecursively(target, nextOpInfo);
        })["catch"](function (e) {});
      }

      function enqueueOperation(target, propertyKey, descriptor) {
        var originalOperation = descriptor.value;

        descriptor.value = function () {
          var _this = this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          return new Promise(function (resolve) {
            var id = operationId++;
            var instance = _this;

            instance._operationQueue.push({
              id: id,
              func: originalOperation,
              args: args,
              invoking: false
            });

            instance._eventTarget.once(id.toString(), resolve);

            var opInfo = instance._operationQueue[0];

            _tryCallingRecursively(instance, opInfo);
          });
        };
      }

      var _class$1p;

      function ensurePlaying(domAudio) {
        return new Promise(function (resolve) {
          var promise = domAudio.play();

          if (promise === undefined) {
            return resolve();
          }

          promise.then(resolve)["catch"](function () {
            var onGesture = function onGesture() {
              domAudio.play().then(function () {
                canvas === null || canvas === void 0 ? void 0 : canvas.removeEventListener('touchend', onGesture, {
                  capture: true
                });
                canvas === null || canvas === void 0 ? void 0 : canvas.removeEventListener('mouseup', onGesture, {
                  capture: true
                });
              })["catch"](function (e) {});
              resolve();
            };

            var canvas = document.getElementById('GameCanvas');
            canvas === null || canvas === void 0 ? void 0 : canvas.addEventListener('touchend', onGesture, {
              capture: true
            });
            canvas === null || canvas === void 0 ? void 0 : canvas.addEventListener('mouseup', onGesture, {
              capture: true
            });
          });
          return null;
        });
      }

      var OneShotAudioDOM = function () {
        function OneShotAudioDOM(nativeAudio, volume) {
          this._domAudio = void 0;
          this._onPlayCb = void 0;
          this._onEndCb = void 0;
          this._domAudio = nativeAudio;
          nativeAudio.volume = volume;
        }

        var _proto = OneShotAudioDOM.prototype;

        _proto.play = function play() {
          var _this = this;

          ensurePlaying(this._domAudio).then(function () {
            var _this$onPlay;

            (_this$onPlay = _this.onPlay) === null || _this$onPlay === void 0 ? void 0 : _this$onPlay.call(_this);
          })["catch"](function (e) {});
        };

        _proto.stop = function stop() {
          this._domAudio.pause();
        };

        _createClass(OneShotAudioDOM, [{
          key: "onPlay",
          get: function get() {
            return this._onPlayCb;
          },
          set: function set(cb) {
            this._onPlayCb = cb;
          }
        }, {
          key: "onEnd",
          get: function get() {
            return this._onEndCb;
          },
          set: function set(cb) {
            if (this._onEndCb) {
              this._domAudio.removeEventListener('ended', this._onEndCb);
            }

            this._onEndCb = cb;

            if (cb) {
              this._domAudio.addEventListener('ended', cb);
            }
          }
        }]);

        return OneShotAudioDOM;
      }();
      var AudioPlayerDOM = (_class$1p = function () {
        function AudioPlayerDOM(nativeAudio) {
          var _this2 = this;

          this._domAudio = void 0;
          this._state = AudioState.INIT;
          this._onEnded = void 0;
          this._eventTarget = new EventTarget();
          this._operationQueue = [];
          this._domAudio = nativeAudio;
          game.on(Game.EVENT_PAUSE, this._onInterruptedBegin, this);
          game.on(Game.EVENT_RESUME, this._onInterruptedEnd, this);

          this._onEnded = function () {
            _this2.seek(0)["catch"](function (e) {});

            _this2._state = AudioState.INIT;

            _this2._eventTarget.emit(AudioEvent.ENDED);
          };

          this._domAudio.addEventListener('ended', this._onEnded);
        }

        var _proto2 = AudioPlayerDOM.prototype;

        _proto2.destroy = function destroy() {
          game.off(Game.EVENT_PAUSE, this._onInterruptedBegin, this);
          game.off(Game.EVENT_RESUME, this._onInterruptedEnd, this);

          this._domAudio.removeEventListener('ended', this._onEnded);

          this._domAudio = null;
        };

        AudioPlayerDOM.load = function load(url) {
          return new Promise(function (resolve) {
            AudioPlayerDOM.loadNative(url).then(function (domAudio) {
              resolve(new AudioPlayerDOM(domAudio));
            })["catch"](function (e) {});
          });
        };

        AudioPlayerDOM.loadNative = function loadNative(url) {
          return new Promise(function (resolve, reject) {
            var domAudio = document.createElement('audio');
            var loadedEvent = 'canplaythrough';

            if (systemInfo.os === OS.IOS) {
              loadedEvent = 'loadedmetadata';
            } else if (systemInfo.browserType === BrowserType.FIREFOX) {
              loadedEvent = 'canplay';
            }

            var timer = setTimeout(function () {
              if (domAudio.readyState === 0) {
                failure();
              } else {
                success();
              }
            }, 8000);

            var clearEvent = function clearEvent() {
              clearTimeout(timer);
              domAudio.removeEventListener(loadedEvent, success, false);
              domAudio.removeEventListener('error', failure, false);
            };

            var success = function success() {
              clearEvent();
              resolve(domAudio);
            };

            var failure = function failure() {
              clearEvent();
              var message = "load audio failure - " + url;
              reject(message);
            };

            domAudio.addEventListener(loadedEvent, success, false);
            domAudio.addEventListener('error', failure, false);
            domAudio.src = url;
          });
        };

        AudioPlayerDOM.loadOneShotAudio = function loadOneShotAudio(url, volume) {
          return new Promise(function (resolve, reject) {
            AudioPlayerDOM.loadNative(url).then(function (domAudio) {
              var oneShotAudio = new OneShotAudioDOM(domAudio, volume);
              resolve(oneShotAudio);
            })["catch"](reject);
          });
        };

        _proto2._onInterruptedBegin = function _onInterruptedBegin() {
          var _this3 = this;

          if (this._state === AudioState.PLAYING) {
            this.pause().then(function () {
              _this3._state = AudioState.INTERRUPTED;

              _this3._eventTarget.emit(AudioEvent.INTERRUPTION_BEGIN);
            })["catch"](function (e) {});
          }
        };

        _proto2._onInterruptedEnd = function _onInterruptedEnd() {
          var _this4 = this;

          if (this._state === AudioState.INTERRUPTED) {
            this.play().then(function () {
              _this4._eventTarget.emit(AudioEvent.INTERRUPTION_END);
            })["catch"](function (e) {});
          }
        };

        _proto2.getPCMData = function getPCMData(channelIndex) {
          return undefined;
        };

        _proto2.seek = function seek(time) {
          time = clamp(time, 0, this.duration);
          this._domAudio.currentTime = time;
          return Promise.resolve();
        };

        _proto2.play = function play() {
          var _this5 = this;

          return new Promise(function (resolve) {
            ensurePlaying(_this5._domAudio).then(function () {
              _this5._state = AudioState.PLAYING;
              resolve();
            })["catch"](function (e) {});
          });
        };

        _proto2.pause = function pause() {
          this._domAudio.pause();

          this._state = AudioState.PAUSED;
          return Promise.resolve();
        };

        _proto2.stop = function stop() {
          var _this6 = this;

          return new Promise(function (resolve) {
            _this6._domAudio.pause();

            _this6._domAudio.currentTime = 0;
            _this6._state = AudioState.STOPPED;
            resolve();
          });
        };

        _proto2.onInterruptionBegin = function onInterruptionBegin(cb) {
          this._eventTarget.on(AudioEvent.INTERRUPTION_BEGIN, cb);
        };

        _proto2.offInterruptionBegin = function offInterruptionBegin(cb) {
          this._eventTarget.off(AudioEvent.INTERRUPTION_BEGIN, cb);
        };

        _proto2.onInterruptionEnd = function onInterruptionEnd(cb) {
          this._eventTarget.on(AudioEvent.INTERRUPTION_END, cb);
        };

        _proto2.offInterruptionEnd = function offInterruptionEnd(cb) {
          this._eventTarget.off(AudioEvent.INTERRUPTION_END, cb);
        };

        _proto2.onEnded = function onEnded(cb) {
          this._eventTarget.on(AudioEvent.ENDED, cb);
        };

        _proto2.offEnded = function offEnded(cb) {
          this._eventTarget.off(AudioEvent.ENDED, cb);
        };

        _createClass(AudioPlayerDOM, [{
          key: "src",
          get: function get() {
            return this._domAudio ? this._domAudio.src : '';
          }
        }, {
          key: "type",
          get: function get() {
            return AudioType.DOM_AUDIO;
          }
        }, {
          key: "state",
          get: function get() {
            return this._state;
          }
        }, {
          key: "loop",
          get: function get() {
            return this._domAudio.loop;
          },
          set: function set(val) {
            this._domAudio.loop = val;
          }
        }, {
          key: "volume",
          get: function get() {
            return this._domAudio.volume;
          },
          set: function set(val) {
            val = clamp01(val);
            this._domAudio.volume = val;
          }
        }, {
          key: "duration",
          get: function get() {
            return this._domAudio.duration;
          }
        }, {
          key: "currentTime",
          get: function get() {
            return this._domAudio.currentTime;
          }
        }, {
          key: "sampleRate",
          get: function get() {
            return 0;
          }
        }]);

        return AudioPlayerDOM;
      }(), (_applyDecoratedDescriptor(_class$1p.prototype, "seek", [enqueueOperation], Object.getOwnPropertyDescriptor(_class$1p.prototype, "seek"), _class$1p.prototype), _applyDecoratedDescriptor(_class$1p.prototype, "play", [enqueueOperation], Object.getOwnPropertyDescriptor(_class$1p.prototype, "play"), _class$1p.prototype), _applyDecoratedDescriptor(_class$1p.prototype, "pause", [enqueueOperation], Object.getOwnPropertyDescriptor(_class$1p.prototype, "pause"), _class$1p.prototype), _applyDecoratedDescriptor(_class$1p.prototype, "stop", [enqueueOperation], Object.getOwnPropertyDescriptor(_class$1p.prototype, "stop"), _class$1p.prototype)), _class$1p);

      var AudioTimer = function () {
        function AudioTimer(nativeAudio) {
          this._nativeAudio = void 0;
          this._startTime = 0;
          this._startOffset = 0;
          this._isPaused = true;
          this._nativeAudio = nativeAudio;
        }

        var _proto = AudioTimer.prototype;

        _proto.destroy = function destroy() {
          this._nativeAudio = undefined;
        };

        _proto._now = function _now() {
          return performance.now() / 1000;
        };

        _proto._calculateCurrentTime = function _calculateCurrentTime() {
          var timePassed = this._now() - this._startTime;

          var currentTime = this._startOffset + timePassed;

          if (currentTime >= this.duration) {
            this._startTime = this._now();
            this._startOffset = 0;
          }

          return currentTime % this.duration;
        };

        _proto.start = function start() {
          this._isPaused = false;
          this._startTime = this._now();
        };

        _proto.pause = function pause() {
          if (this._isPaused) {
            return;
          }

          this._isPaused = true;
          this._startOffset = this._calculateCurrentTime();
        };

        _proto.stop = function stop() {
          this._isPaused = true;
          this._startOffset = 0;
        };

        _proto.seek = function seek(time) {
          this._startTime = this._now();
          this._startOffset = clamp(time, 0, this.duration);
        };

        _createClass(AudioTimer, [{
          key: "duration",
          get: function get() {
            return this._nativeAudio.duration;
          }
        }, {
          key: "currentTime",
          get: function get() {
            if (this._isPaused) {
              return this._startOffset;
            } else {
              return this._calculateCurrentTime();
            }
          }
        }]);

        return AudioTimer;
      }();

      var AudioBufferManager = function () {
        function AudioBufferManager() {
          this._audioBufferDataMap = {};
        }

        var _proto = AudioBufferManager.prototype;

        _proto.addCache = function addCache(url, audioBuffer) {
          var audioBufferData = this._audioBufferDataMap[url];

          if (audioBufferData) {
            console.warn("Audio buffer " + url + " has been cached");
            return;
          }

          this._audioBufferDataMap[url] = {
            usedCount: 1,
            audioBuffer: audioBuffer
          };
        };

        _proto.retainCache = function retainCache(url) {
          var audioBufferData = this._audioBufferDataMap[url];

          if (!audioBufferData) {
            console.warn("Audio buffer cache " + url + " has not been added.");
            return;
          }

          audioBufferData.usedCount++;
        };

        _proto.getCache = function getCache(url) {
          var audioBufferData = this._audioBufferDataMap[url];
          return audioBufferData === null || audioBufferData === void 0 ? void 0 : audioBufferData.audioBuffer;
        };

        _proto.tryReleasingCache = function tryReleasingCache(url) {
          var audioBufferData = this._audioBufferDataMap[url];

          if (!audioBufferData) {
            console.warn("Audio buffer cache " + url + " has not been added.");
            return;
          }

          if (--audioBufferData.usedCount <= 0) {
            delete this._audioBufferDataMap[url];
          }
        };

        return AudioBufferManager;
      }();

      var audioBufferManager = new AudioBufferManager();

      var _class$1q;
      var AudioContextClass = window.AudioContext || window.webkitAudioContext || window.mozAudioContext;
      var _contextRunningEvent = 'on-context-running';
      var AudioContextAgent = function () {
        function AudioContextAgent() {
          var _this = this;

          this._eventTarget = void 0;
          this._context = void 0;
          this._isRunning = false;
          this._context = new (window.AudioContext || window.webkitAudioContext || window.mozAudioContext)();
          this._eventTarget = new EventTarget();

          this._context.onstatechange = function () {
            if (_this._context.state === 'running') {
              _this._isRunning = true;

              _this._eventTarget.emit(_contextRunningEvent);
            } else {
              _this._isRunning = false;
            }
          };
        }

        var _proto = AudioContextAgent.prototype;

        _proto.onceRunning = function onceRunning(cb, target) {
          this._eventTarget.once(_contextRunningEvent, cb, target);
        };

        _proto.offRunning = function offRunning(cb, target) {
          this._eventTarget.off(_contextRunningEvent, cb, target);
        };

        _proto.decodeAudioData = function decodeAudioData(audioData) {
          var _this2 = this;

          return new Promise(function (resolve) {
            var promise = _this2._context.decodeAudioData(audioData, function (audioBuffer) {
              resolve(audioBuffer);
            }, function (err) {
              console.error('failed to load Web Audio', err);
            });

            promise === null || promise === void 0 ? void 0 : promise["catch"](function (e) {});
          });
        };

        _proto.runContext = function runContext() {
          var _this3 = this;

          return new Promise(function (resolve) {
            if (_this3.isRunning) {
              resolve();
              return;
            }

            var context = _this3._context;

            if (!context.resume) {
              resolve();
              return;
            }

            context.resume()["catch"](function (e) {});

            if (context.state === 'running') {
              resolve();
              return;
            }

            var canvas = document.getElementById('GameCanvas');

            var onGesture = function onGesture() {
              context.resume().then(function () {
                canvas === null || canvas === void 0 ? void 0 : canvas.removeEventListener('touchend', onGesture, {
                  capture: true
                });
                canvas === null || canvas === void 0 ? void 0 : canvas.removeEventListener('mouseup', onGesture, {
                  capture: true
                });
                resolve();
              })["catch"](function (e) {});
            };

            canvas === null || canvas === void 0 ? void 0 : canvas.addEventListener('touchend', onGesture, {
              capture: true
            });
            canvas === null || canvas === void 0 ? void 0 : canvas.addEventListener('mouseup', onGesture, {
              capture: true
            });
          });
        };

        _proto.createBufferSource = function createBufferSource(audioBuffer, loop) {
          var sourceBufferNode = this._context.createBufferSource();

          if (audioBuffer !== undefined) {
            sourceBufferNode.buffer = audioBuffer;
          }

          if (loop !== undefined) {
            sourceBufferNode.loop = loop;
          }

          return sourceBufferNode;
        };

        _proto.createGain = function createGain(volume) {
          if (volume === void 0) {
            volume = 1;
          }

          var gainNode = this._context.createGain();

          this.setGainValue(gainNode, volume);
          return gainNode;
        };

        _proto.setGainValue = function setGainValue(gain, volume) {
          if (gain.gain.setTargetAtTime) {
            try {
              gain.gain.setTargetAtTime(volume, this._context.currentTime, 0);
            } catch (e) {
              gain.gain.setTargetAtTime(volume, this._context.currentTime, 0.01);
            }
          } else {
            gain.gain.value = volume;
          }
        };

        _proto.connectContext = function connectContext(audioNode) {
          if (!this._context) {
            return;
          }

          audioNode.connect(this._context.destination);
        };

        _createClass(AudioContextAgent, [{
          key: "isRunning",
          get: function get() {
            return this._isRunning;
          }
        }, {
          key: "currentTime",
          get: function get() {
            return this._context.currentTime;
          }
        }]);

        return AudioContextAgent;
      }();
      AudioContextAgent.support = !!AudioContextClass;
      var audioContextAgent;

      if (AudioContextAgent.support) {
        audioContextAgent = new AudioContextAgent();
      }

      var OneShotAudioWeb = function () {
        function OneShotAudioWeb(audioBuffer, volume, url) {
          this._duration = void 0;
          this._bufferSourceNode = void 0;
          this._onPlayCb = void 0;
          this._currentTimer = 0;
          this._url = void 0;
          this._onEndCb = void 0;
          this._duration = audioBuffer.duration;
          this._url = url;
          this._bufferSourceNode = audioContextAgent.createBufferSource(audioBuffer, false);
          var gainNode = audioContextAgent.createGain(volume);

          this._bufferSourceNode.connect(gainNode);

          audioContextAgent.connectContext(gainNode);
        }

        var _proto2 = OneShotAudioWeb.prototype;

        _proto2.play = function play() {
          var _this4 = this;

          this._bufferSourceNode.start();

          audioContextAgent.runContext().then(function () {
            var _this4$onPlay;

            (_this4$onPlay = _this4.onPlay) === null || _this4$onPlay === void 0 ? void 0 : _this4$onPlay.call(_this4);
            _this4._currentTimer = window.setTimeout(function () {
              var _this4$onEnd;

              audioBufferManager.tryReleasingCache(_this4._url);
              (_this4$onEnd = _this4.onEnd) === null || _this4$onEnd === void 0 ? void 0 : _this4$onEnd.call(_this4);
            }, _this4._duration * 1000);
          })["catch"](function (e) {});
        };

        _proto2.stop = function stop() {
          clearTimeout(this._currentTimer);
          audioBufferManager.tryReleasingCache(this._url);

          this._bufferSourceNode.stop();

          this._bufferSourceNode.buffer = null;
        };

        _createClass(OneShotAudioWeb, [{
          key: "onPlay",
          get: function get() {
            return this._onPlayCb;
          },
          set: function set(cb) {
            this._onPlayCb = cb;
          }
        }, {
          key: "onEnd",
          get: function get() {
            return this._onEndCb;
          },
          set: function set(cb) {
            this._onEndCb = cb;
          }
        }]);

        return OneShotAudioWeb;
      }();
      var AudioPlayerWeb = (_class$1q = function () {
        function AudioPlayerWeb(audioBuffer, url) {
          this._src = void 0;
          this._audioBuffer = void 0;
          this._sourceNode = void 0;
          this._gainNode = void 0;
          this._currentTimer = 0;
          this._volume = 1;
          this._loop = false;
          this._state = AudioState.INIT;
          this._audioTimer = void 0;
          this._eventTarget = new EventTarget();
          this._operationQueue = [];
          this._audioBuffer = audioBuffer;
          this._audioTimer = new AudioTimer(audioBuffer);
          this._gainNode = audioContextAgent.createGain();
          audioContextAgent.connectContext(this._gainNode);
          this._src = url;
          game.on(Game.EVENT_PAUSE, this._onInterruptedBegin, this);
          game.on(Game.EVENT_RESUME, this._onInterruptedEnd, this);
        }

        var _proto3 = AudioPlayerWeb.prototype;

        _proto3.destroy = function destroy() {
          this._audioTimer.destroy();

          if (this._audioBuffer) {
            this._audioBuffer = null;
          }

          audioBufferManager.tryReleasingCache(this._src);
          game.off(Game.EVENT_PAUSE, this._onInterruptedBegin, this);
          game.off(Game.EVENT_RESUME, this._onInterruptedEnd, this);
        };

        AudioPlayerWeb.load = function load(url) {
          return new Promise(function (resolve) {
            AudioPlayerWeb.loadNative(url).then(function (audioBuffer) {
              resolve(new AudioPlayerWeb(audioBuffer, url));
            })["catch"](function (e) {});
          });
        };

        AudioPlayerWeb.loadNative = function loadNative(url) {
          return new Promise(function (resolve, reject) {
            var cachedAudioBuffer = audioBufferManager.getCache(url);

            if (cachedAudioBuffer) {
              audioBufferManager.retainCache(url);
              resolve(cachedAudioBuffer);
              return;
            }

            var xhr = new XMLHttpRequest();
            var errInfo = "load audio failed: " + url + ", status: ";
            xhr.open('GET', url, true);
            xhr.responseType = 'arraybuffer';

            xhr.onload = function () {
              if (xhr.status === 200 || xhr.status === 0) {
                audioContextAgent.decodeAudioData(xhr.response).then(function (decodedAudioBuffer) {
                  audioBufferManager.addCache(url, decodedAudioBuffer);
                  resolve(decodedAudioBuffer);
                })["catch"](function (e) {});
              } else {
                reject(new Error("" + errInfo + xhr.status + "(no response)"));
              }
            };

            xhr.onerror = function () {
              reject(new Error("" + errInfo + xhr.status + "(error)"));
            };

            xhr.ontimeout = function () {
              reject(new Error("" + errInfo + xhr.status + "(time out)"));
            };

            xhr.onabort = function () {
              reject(new Error("" + errInfo + xhr.status + "(abort)"));
            };

            xhr.send(null);
          });
        };

        AudioPlayerWeb.loadOneShotAudio = function loadOneShotAudio(url, volume) {
          return new Promise(function (resolve, reject) {
            AudioPlayerWeb.loadNative(url).then(function (audioBuffer) {
              var oneShotAudio = new OneShotAudioWeb(audioBuffer, volume, url);
              resolve(oneShotAudio);
            })["catch"](reject);
          });
        };

        _proto3.getPCMData = function getPCMData(channelIndex) {
          return new AudioPCMDataView(this._audioBuffer.getChannelData(channelIndex), 1);
        };

        _proto3._onInterruptedBegin = function _onInterruptedBegin() {
          var _this5 = this;

          if (this._state === AudioState.PLAYING) {
            this.pause().then(function () {
              _this5._state = AudioState.INTERRUPTED;

              _this5._eventTarget.emit(AudioEvent.INTERRUPTION_BEGIN);
            })["catch"](function (e) {});
          }
        };

        _proto3._onInterruptedEnd = function _onInterruptedEnd() {
          var _this6 = this;

          if (this._state === AudioState.INTERRUPTED) {
            this.play().then(function () {
              _this6._eventTarget.emit(AudioEvent.INTERRUPTION_END);
            })["catch"](function (e) {});
          }
        };

        _proto3.seek = function seek(time) {
          var _this7 = this;

          return new Promise(function (resolve) {
            audioContextAgent.offRunning();

            _this7._audioTimer.seek(time);

            if (_this7._state === AudioState.PLAYING) {
              _this7._doPlay().then(resolve)["catch"](function (e) {});
            } else {
              resolve();
            }
          });
        };

        _proto3.play = function play() {
          audioContextAgent.offRunning();

          return this._doPlay();
        };

        _proto3._doPlay = function _doPlay() {
          var _this8 = this;

          return new Promise(function (resolve) {
            if (audioContextAgent.isRunning) {
              _this8._startSourceNode();

              resolve();
            } else {
              audioContextAgent.onceRunning(function () {
                _this8._startSourceNode();

                resolve();
              });
              audioContextAgent.runContext()["catch"](function (e) {});
            }
          });
        };

        _proto3._startSourceNode = function _startSourceNode() {
          var _this9 = this;

          this._stopSourceNode();

          this._sourceNode = audioContextAgent.createBufferSource(this._audioBuffer, this.loop);

          this._sourceNode.connect(this._gainNode);

          this._sourceNode.start(0, this._audioTimer.currentTime);

          this._state = AudioState.PLAYING;

          this._audioTimer.start();

          var checkEnded = function checkEnded() {
            if (_this9.loop) {
              _this9._currentTimer = window.setTimeout(checkEnded, _this9._audioBuffer.duration * 1000);
            } else {
              _this9._audioTimer.stop();

              _this9._eventTarget.emit(AudioEvent.ENDED);

              _this9._state = AudioState.INIT;
            }
          };

          window.clearTimeout(this._currentTimer);
          this._currentTimer = window.setTimeout(checkEnded, (this._audioBuffer.duration - this._audioTimer.currentTime) * 1000);
        };

        _proto3._stopSourceNode = function _stopSourceNode() {
          try {
            if (this._sourceNode) {
              this._sourceNode.stop();

              this._sourceNode.buffer = null;
            }
          } catch (e) {}
        };

        _proto3.pause = function pause() {
          audioContextAgent.offRunning();

          if (this._state !== AudioState.PLAYING || !this._sourceNode) {
            return Promise.resolve();
          }

          this._audioTimer.pause();

          this._state = AudioState.PAUSED;
          window.clearTimeout(this._currentTimer);

          this._stopSourceNode();

          return Promise.resolve();
        };

        _proto3.stop = function stop() {
          audioContextAgent.offRunning();

          if (!this._sourceNode) {
            return Promise.resolve();
          }

          this._audioTimer.stop();

          this._state = AudioState.STOPPED;
          window.clearTimeout(this._currentTimer);

          this._stopSourceNode();

          return Promise.resolve();
        };

        _proto3.onInterruptionBegin = function onInterruptionBegin(cb) {
          this._eventTarget.on(AudioEvent.INTERRUPTION_BEGIN, cb);
        };

        _proto3.offInterruptionBegin = function offInterruptionBegin(cb) {
          this._eventTarget.off(AudioEvent.INTERRUPTION_BEGIN, cb);
        };

        _proto3.onInterruptionEnd = function onInterruptionEnd(cb) {
          this._eventTarget.on(AudioEvent.INTERRUPTION_END, cb);
        };

        _proto3.offInterruptionEnd = function offInterruptionEnd(cb) {
          this._eventTarget.off(AudioEvent.INTERRUPTION_END, cb);
        };

        _proto3.onEnded = function onEnded(cb) {
          this._eventTarget.on(AudioEvent.ENDED, cb);
        };

        _proto3.offEnded = function offEnded(cb) {
          this._eventTarget.off(AudioEvent.ENDED, cb);
        };

        _createClass(AudioPlayerWeb, [{
          key: "sampleRate",
          get: function get() {
            return this._audioBuffer.sampleRate;
          }
        }, {
          key: "src",
          get: function get() {
            return this._src;
          }
        }, {
          key: "type",
          get: function get() {
            return AudioType.WEB_AUDIO;
          }
        }, {
          key: "state",
          get: function get() {
            return this._state;
          }
        }, {
          key: "loop",
          get: function get() {
            return this._loop;
          },
          set: function set(val) {
            this._loop = val;

            if (this._sourceNode) {
              this._sourceNode.loop = val;
            }
          }
        }, {
          key: "volume",
          get: function get() {
            return this._volume;
          },
          set: function set(val) {
            val = clamp01(val);
            this._volume = val;
            audioContextAgent.setGainValue(this._gainNode, val);
          }
        }, {
          key: "duration",
          get: function get() {
            return this._audioBuffer.duration;
          }
        }, {
          key: "currentTime",
          get: function get() {
            return this._audioTimer.currentTime;
          }
        }]);

        return AudioPlayerWeb;
      }(), (_applyDecoratedDescriptor(_class$1q.prototype, "seek", [enqueueOperation], Object.getOwnPropertyDescriptor(_class$1q.prototype, "seek"), _class$1q.prototype), _applyDecoratedDescriptor(_class$1q.prototype, "play", [enqueueOperation], Object.getOwnPropertyDescriptor(_class$1q.prototype, "play"), _class$1q.prototype), _applyDecoratedDescriptor(_class$1q.prototype, "pause", [enqueueOperation], Object.getOwnPropertyDescriptor(_class$1q.prototype, "pause"), _class$1q.prototype), _applyDecoratedDescriptor(_class$1q.prototype, "stop", [enqueueOperation], Object.getOwnPropertyDescriptor(_class$1q.prototype, "stop"), _class$1q.prototype)), _class$1q);

      var OneShotAudio = function () {
        function OneShotAudio(audio) {
          this._audio = void 0;
          this._audio = audio;
        }

        var _proto = OneShotAudio.prototype;

        _proto.play = function play() {
          this._audio.play();
        };

        _proto.stop = function stop() {
          this._audio.stop();
        };

        _createClass(OneShotAudio, [{
          key: "onPlay",
          get: function get() {
            return this._audio.onPlay;
          },
          set: function set(v) {
            this._audio.onPlay = v;
          }
        }, {
          key: "onEnd",
          get: function get() {
            return this._audio.onEnd;
          },
          set: function set(v) {
            this._audio.onEnd = v;
          }
        }]);

        return OneShotAudio;
      }();
      var AudioPlayer = function () {
        function AudioPlayer(player) {
          this._player = void 0;
          this._player = player;
        }

        AudioPlayer.load = function load(url, opts) {
          return new Promise(function (resolve) {
            if ((opts === null || opts === void 0 ? void 0 : opts.audioLoadMode) === AudioType.DOM_AUDIO || !AudioContextAgent.support) {
              if (!AudioContextAgent.support) {
                warnID(5201);
              }

              AudioPlayerDOM.load(url).then(function (domPlayer) {
                resolve(new AudioPlayer(domPlayer));
              })["catch"](function (e) {});
            } else {
              AudioPlayerWeb.load(url).then(function (webPlayer) {
                resolve(new AudioPlayer(webPlayer));
              })["catch"](function (e) {});
            }
          });
        };

        var _proto2 = AudioPlayer.prototype;

        _proto2.destroy = function destroy() {
          this._player.destroy();
        };

        AudioPlayer.loadNative = function loadNative(url, opts) {
          if ((opts === null || opts === void 0 ? void 0 : opts.audioLoadMode) === AudioType.DOM_AUDIO || !AudioContextAgent.support) {
            if (!AudioContextAgent.support) {
              warnID(5201);
            }

            return AudioPlayerDOM.loadNative(url);
          }

          return AudioPlayerWeb.loadNative(url);
        };

        AudioPlayer.loadOneShotAudio = function loadOneShotAudio(url, volume, opts) {
          return new Promise(function (resolve, reject) {
            if ((opts === null || opts === void 0 ? void 0 : opts.audioLoadMode) === AudioType.DOM_AUDIO || !AudioContextAgent.support) {
              if (!AudioContextAgent.support) {
                warnID(5201);
              }

              AudioPlayerDOM.loadOneShotAudio(url, volume).then(function (oneShotAudioDOM) {
                resolve(new OneShotAudio(oneShotAudioDOM));
              })["catch"](reject);
            } else {
              AudioPlayerWeb.loadOneShotAudio(url, volume).then(function (oneShotAudioWeb) {
                resolve(new OneShotAudio(oneShotAudioWeb));
              })["catch"](reject);
            }
          });
        };

        _proto2.getPCMData = function getPCMData(channelIndex) {
          return this._player.getPCMData(channelIndex);
        };

        _proto2.seek = function seek(time) {
          return this._player.seek(time);
        };

        _proto2.play = function play() {
          return this._player.play();
        };

        _proto2.pause = function pause() {
          return this._player.pause();
        };

        _proto2.stop = function stop() {
          return this._player.stop();
        };

        _proto2.onInterruptionBegin = function onInterruptionBegin(cb) {
          this._player.onInterruptionBegin(cb);
        };

        _proto2.offInterruptionBegin = function offInterruptionBegin(cb) {
          this._player.offInterruptionBegin(cb);
        };

        _proto2.onInterruptionEnd = function onInterruptionEnd(cb) {
          this._player.onInterruptionEnd(cb);
        };

        _proto2.offInterruptionEnd = function offInterruptionEnd(cb) {
          this._player.offInterruptionEnd(cb);
        };

        _proto2.onEnded = function onEnded(cb) {
          this._player.onEnded(cb);
        };

        _proto2.offEnded = function offEnded(cb) {
          this._player.offEnded(cb);
        };

        _createClass(AudioPlayer, [{
          key: "src",
          get: function get() {
            return this._player.src;
          }
        }, {
          key: "type",
          get: function get() {
            return this._player.type;
          }
        }, {
          key: "state",
          get: function get() {
            return this._player.state;
          }
        }, {
          key: "loop",
          get: function get() {
            return this._player.loop;
          },
          set: function set(val) {
            this._player.loop = val;
          }
        }, {
          key: "volume",
          get: function get() {
            return this._player.volume;
          },
          set: function set(val) {
            this._player.volume = val;
          }
        }, {
          key: "duration",
          get: function get() {
            return this._player.duration;
          }
        }, {
          key: "currentTime",
          get: function get() {
            return this._player.currentTime;
          }
        }, {
          key: "sampleRate",
          get: function get() {
            return this._player.sampleRate;
          }
        }]);

        return AudioPlayer;
      }();
      AudioPlayer.maxAudioChannel = 24;

      var _dec$1o, _class$1r, _class2$1e, _initializer$12, _class3$o, _temp$y;
      var AudioClip = exports('AudioClip', (_dec$1o = ccclass('cc.AudioClip'), _dec$1o(_class$1r = (_class2$1e = (_temp$y = _class3$o = function (_Asset) {
        _inheritsLoose(AudioClip, _Asset);

        function AudioClip() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Asset.call.apply(_Asset, [this].concat(args)) || this;
          _this._duration = _initializer$12 && _initializer$12();
          _this._loadMode = AudioType.UNKNOWN_AUDIO;
          _this._meta = null;
          _this._player = null;
          return _this;
        }

        var _proto = AudioClip.prototype;

        _proto.destroy = function destroy() {
          var _this$_player;

          var destroyResult = _Asset.prototype.destroy.call(this);

          (_this$_player = this._player) === null || _this$_player === void 0 ? void 0 : _this$_player.destroy();
          this._player = null;

          if (this._meta) {
            this._meta.player = null;
          }

          return destroyResult;
        };

        _proto.validate = function validate() {
          return !!this._meta;
        };

        _proto.getDuration = function getDuration() {
          if (this._duration) {
            return this._duration;
          }

          return this._meta ? this._meta.duration : 0;
        };

        _proto.getCurrentTime = function getCurrentTime() {
          return this._player ? this._player.currentTime : 0;
        };

        _proto.getVolume = function getVolume() {
          return this._player ? this._player.volume : 0;
        };

        _proto.getLoop = function getLoop() {
          return this._player ? this._player.loop : false;
        };

        _proto.setCurrentTime = function setCurrentTime(time) {
          var _this$_player2;

          (_this$_player2 = this._player) === null || _this$_player2 === void 0 ? void 0 : _this$_player2.seek(time)["catch"](function (e) {});
        };

        _proto.setVolume = function setVolume(volume) {
          if (this._player) {
            this._player.volume = volume;
          }
        };

        _proto.setLoop = function setLoop(loop) {
          if (this._player) {
            this._player.loop = loop;
          }
        };

        _proto.play = function play() {
          var _this$_player3;

          (_this$_player3 = this._player) === null || _this$_player3 === void 0 ? void 0 : _this$_player3.play()["catch"](function (e) {});
        };

        _proto.pause = function pause() {
          var _this$_player4;

          (_this$_player4 = this._player) === null || _this$_player4 === void 0 ? void 0 : _this$_player4.pause()["catch"](function (e) {});
        };

        _proto.stop = function stop() {
          var _this$_player5;

          (_this$_player5 = this._player) === null || _this$_player5 === void 0 ? void 0 : _this$_player5.stop()["catch"](function (e) {});
        };

        _proto.playOneShot = function playOneShot(volume) {
          if (volume === void 0) {
            volume = 1;
          }

          if (this._nativeAsset) {
            AudioPlayer.loadOneShotAudio(this._nativeAsset.url, volume).then(function (oneShotAudio) {
              oneShotAudio.play();
            })["catch"](function (e) {});
          }
        };

        _createClass(AudioClip, [{
          key: "_nativeAsset",
          get: function get() {
            return this._meta;
          },
          set: function set(meta) {
            this._meta = meta;

            if (meta) {
              this._loadMode = meta.type;
              this._player = meta.player;
            } else {
              this._meta = null;
              this._loadMode = AudioType.UNKNOWN_AUDIO;
              this._duration = 0;
            }
          }
        }, {
          key: "_nativeDep",
          get: function get() {
            return {
              uuid: this._uuid,
              audioLoadMode: this.loadMode,
              ext: this._native,
              __isNative__: true
            };
          }
        }, {
          key: "loadMode",
          get: function get() {
            return this._loadMode;
          }
        }, {
          key: "state",
          get: function get() {
            return this._player ? this._player.state : AudioState.INIT;
          }
        }]);

        return AudioClip;
      }(Asset), _class3$o.AudioType = AudioType, _temp$y), (_initializer$12 = applyDecoratedInitializer(_class2$1e.prototype, "_duration", [serializable], function () {
        return 0;
      }), _applyDecoratedDescriptor(_class2$1e.prototype, "_nativeDep", [override], Object.getOwnPropertyDescriptor(_class2$1e.prototype, "_nativeDep"), _class2$1e.prototype)), _class2$1e)) || _class$1r));
      legacyCC.AudioClip = AudioClip;

      function loadAudioPlayer(url, options, onComplete) {
        AudioPlayer.load(url, {
          audioLoadMode: options.audioLoadMode
        }).then(function (player) {
          var audioMeta = {
            player: player,
            url: url,
            duration: player.duration,
            type: player.type
          };
          onComplete(null, audioMeta);
        })["catch"](function (err) {
          onComplete(err);
        });
      }

      function createAudioClip(id, data, options, onComplete) {
        var out = new AudioClip();
        out._nativeUrl = id;
        out._nativeAsset = data;
        out._duration = data.duration;
        onComplete(null, out);
      }

      downloader$1.register({
        '.mp3': loadAudioPlayer,
        '.ogg': loadAudioPlayer,
        '.wav': loadAudioPlayer,
        '.m4a': loadAudioPlayer
      });
      factory.register({
        '.mp3': createAudioClip,
        '.ogg': createAudioClip,
        '.wav': createAudioClip,
        '.m4a': createAudioClip
      });

      var AudioManager = function () {
        function AudioManager() {
          this._oneShotAudioInfoList = [];
          this._audioPlayerInfoList = [];
        }

        var _proto = AudioManager.prototype;

        _proto._findIndex = function _findIndex(audioInfoList, audio) {
          return audioInfoList.findIndex(function (item) {
            return item.audio === audio;
          });
        };

        _proto._tryAddPlaying = function _tryAddPlaying(audioInfoList, audio) {
          var idx = this._findIndex(audioInfoList, audio);

          if (idx > -1) {
            audioInfoList[idx].playTime = performance.now();
            return false;
          }

          audioInfoList.push({
            audio: audio,
            playTime: performance.now()
          });
          return true;
        };

        _proto.addPlaying = function addPlaying(audio) {
          if (audio instanceof AudioPlayer) {
            this._tryAddPlaying(this._audioPlayerInfoList, audio);
          } else {
            this._tryAddPlaying(this._oneShotAudioInfoList, audio);
          }
        };

        _proto._tryRemovePlaying = function _tryRemovePlaying(audioInfoList, audio) {
          var idx = this._findIndex(audioInfoList, audio);

          if (idx === -1) {
            return false;
          }

          fastRemoveAt(audioInfoList, idx);
          return true;
        };

        _proto.removePlaying = function removePlaying(audio) {
          if (audio instanceof AudioPlayer) {
            this._tryRemovePlaying(this._audioPlayerInfoList, audio);
          } else {
            this._tryRemovePlaying(this._oneShotAudioInfoList, audio);
          }
        };

        _proto.discardOnePlayingIfNeeded = function discardOnePlayingIfNeeded() {
          if (this._audioPlayerInfoList.length + this._oneShotAudioInfoList.length < AudioPlayer.maxAudioChannel) {
            return;
          }

          var audioInfoToDiscard;

          if (this._oneShotAudioInfoList.length > 0) {
            this._oneShotAudioInfoList.forEach(function (audioInfo) {
              if (!audioInfoToDiscard || audioInfo.playTime < audioInfoToDiscard.playTime) {
                audioInfoToDiscard = audioInfo;
              }
            });
          } else {
            this._audioPlayerInfoList.forEach(function (audioInfo) {
              if (!audioInfoToDiscard || audioInfo.playTime < audioInfoToDiscard.playTime) {
                audioInfoToDiscard = audioInfo;
              }
            });
          }

          if (audioInfoToDiscard) {
            audioInfoToDiscard.audio.stop();
            this.removePlaying(audioInfoToDiscard.audio);
          }
        };

        _proto.pause = function pause() {
          this._oneShotAudioInfoList.forEach(function (info) {
            info.audio.stop();
          });

          this._audioPlayerInfoList.forEach(function (info) {
            info.audio.pause()["catch"](function (e) {});
          });
        };

        _proto.resume = function resume() {
          this._audioPlayerInfoList.forEach(function (info) {
            info.audio.play()["catch"](function (e) {});
          });
        };

        return AudioManager;
      }();
      var audioManager = new AudioManager();

      var _dec$1p, _dec2$K, _dec3$p, _class$1s, _class2$1f, _initializer$13, _initializer2$J, _initializer3$w, _initializer4$q, _class3$p, _temp$z;
      var _LOADED_EVENT = 'audiosource-loaded';
      var AudioSourceEventType;

      (function (AudioSourceEventType) {
        AudioSourceEventType["STARTED"] = "started";
        AudioSourceEventType["ENDED"] = "ended";
      })(AudioSourceEventType || (AudioSourceEventType = {}));

      var AudioSource = function (v) { return exports({ AudioSource: v, AudioSourceComponent: v }), v; }((_dec$1p = ccclass('cc.AudioSource'), _dec2$K = type(AudioClip), _dec3$p = type(AudioClip), _dec$1p(_class$1s = (_class2$1f = (_temp$z = _class3$p = function (_Component) {
        _inheritsLoose(AudioSource, _Component);

        function AudioSource() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._clip = _initializer$13 && _initializer$13();
          _this._player = null;
          _this._loop = _initializer2$J && _initializer2$J();
          _this._playOnAwake = _initializer3$w && _initializer3$w();
          _this._volume = _initializer4$q && _initializer4$q();
          _this._cachedCurrentTime = 0;
          _this._operationsBeforeLoading = [];
          _this._isLoaded = false;
          _this._lastSetClip = null;
          return _this;
        }

        var _proto = AudioSource.prototype;

        _proto._resetPlayer = function _resetPlayer() {
          if (this._player) {
            audioManager.removePlaying(this._player);

            this._player.offEnded();

            this._player.offInterruptionBegin();

            this._player.offInterruptionEnd();

            this._player.destroy();

            this._player = null;
          }
        };

        _proto._syncPlayer = function _syncPlayer() {
          var _this2 = this;

          var clip = this._clip;

          if (this._lastSetClip === clip) {
            return;
          }

          if (!clip) {
            this._lastSetClip = null;

            this._resetPlayer();

            return;
          }

          if (!clip._nativeAsset) {
            console.error('Invalid audio clip');
            return;
          }

          this._isLoaded = false;
          this._lastSetClip = clip;
          this._operationsBeforeLoading.length = 0;
          AudioPlayer.load(clip._nativeAsset.url, {
            audioLoadMode: clip.loadMode
          }).then(function (player) {
            var _this2$node2;

            if (_this2._lastSetClip !== clip) {
              player.destroy();
              return;
            }

            _this2._isLoaded = true;

            _this2._resetPlayer();

            _this2._player = player;
            player.onEnded(function () {
              var _this2$node;

              audioManager.removePlaying(player);
              (_this2$node = _this2.node) === null || _this2$node === void 0 ? void 0 : _this2$node.emit(AudioSourceEventType.ENDED, _this2);
            });
            player.onInterruptionBegin(function () {
              audioManager.removePlaying(player);
            });
            player.onInterruptionEnd(function () {
              audioManager.addPlaying(player);
            });

            _this2._syncStates();

            (_this2$node2 = _this2.node) === null || _this2$node2 === void 0 ? void 0 : _this2$node2.emit(_LOADED_EVENT);
          })["catch"](function (e) {});
        };

        _proto.onLoad = function onLoad() {
          this._syncPlayer();
        };

        _proto.onEnable = function onEnable() {
          if (this._playOnAwake && !this.playing) {
            this.play();
          }
        };

        _proto.onDisable = function onDisable() {
          var rootNode = this._getRootNode();

          if (rootNode !== null && rootNode !== void 0 && rootNode._persistNode) {
            return;
          }

          this.pause();
        };

        _proto.onDestroy = function onDestroy() {
          var _this$_player;

          this.stop();
          (_this$_player = this._player) === null || _this$_player === void 0 ? void 0 : _this$_player.destroy();
          this._player = null;
        };

        _proto.getPCMData = function getPCMData(channelIndex) {
          var _this3 = this;

          return new Promise(function (resolve) {
            if (channelIndex !== 0 && channelIndex !== 1) {
              console.warn('Only support channel index 0 or 1 to get buffer');
              resolve(undefined);
              return;
            }

            if (_this3._player) {
              resolve(_this3._player.getPCMData(channelIndex));
            } else {
              var _this3$node;

              (_this3$node = _this3.node) === null || _this3$node === void 0 ? void 0 : _this3$node.once(_LOADED_EVENT, function () {
                var _this3$_player;

                resolve((_this3$_player = _this3._player) === null || _this3$_player === void 0 ? void 0 : _this3$_player.getPCMData(channelIndex));
              });
            }
          });
        };

        _proto.getSampleRate = function getSampleRate() {
          var _this4 = this;

          return new Promise(function (resolve) {
            if (_this4._player) {
              resolve(_this4._player.sampleRate);
            } else {
              var _this4$node;

              (_this4$node = _this4.node) === null || _this4$node === void 0 ? void 0 : _this4$node.once(_LOADED_EVENT, function () {
                resolve(_this4._player.sampleRate);
              });
            }
          });
        };

        _proto._getRootNode = function _getRootNode() {
          var _currentNode, _currentNode$parent;

          var currentNode = this.node;
          var currentGrandparentNode = (_currentNode = currentNode) === null || _currentNode === void 0 ? void 0 : (_currentNode$parent = _currentNode.parent) === null || _currentNode$parent === void 0 ? void 0 : _currentNode$parent.parent;

          while (currentGrandparentNode) {
            var _currentNode2, _currentNode3, _currentNode3$parent;

            currentNode = (_currentNode2 = currentNode) === null || _currentNode2 === void 0 ? void 0 : _currentNode2.parent;
            currentGrandparentNode = (_currentNode3 = currentNode) === null || _currentNode3 === void 0 ? void 0 : (_currentNode3$parent = _currentNode3.parent) === null || _currentNode3$parent === void 0 ? void 0 : _currentNode3$parent.parent;
          }

          return currentNode;
        };

        _proto.play = function play() {
          var _this$_player3,
              _this5 = this;

          if (!this._isLoaded && this.clip) {
            this._operationsBeforeLoading.push('play');

            return;
          }

          audioManager.discardOnePlayingIfNeeded();

          if (this.state === AudioState.PLAYING) {
            var _this$_player2;

            (_this$_player2 = this._player) === null || _this$_player2 === void 0 ? void 0 : _this$_player2.stop()["catch"](function (e) {});
          }

          var player = this._player;
          (_this$_player3 = this._player) === null || _this$_player3 === void 0 ? void 0 : _this$_player3.play().then(function () {
            var _this5$node;

            audioManager.addPlaying(player);
            (_this5$node = _this5.node) === null || _this5$node === void 0 ? void 0 : _this5$node.emit(AudioSourceEventType.STARTED, _this5);
          })["catch"](function (e) {});
        };

        _proto.pause = function pause() {
          var _this$_player4;

          if (!this._isLoaded && this.clip) {
            this._operationsBeforeLoading.push('pause');

            return;
          }

          var player = this._player;
          (_this$_player4 = this._player) === null || _this$_player4 === void 0 ? void 0 : _this$_player4.pause().then(function () {
            audioManager.removePlaying(player);
          })["catch"](function (e) {});
        };

        _proto.stop = function stop() {
          var _this$_player5;

          if (!this._isLoaded && this.clip) {
            this._operationsBeforeLoading.push('stop');

            return;
          }

          var player = this._player;
          (_this$_player5 = this._player) === null || _this$_player5 === void 0 ? void 0 : _this$_player5.stop().then(function () {
            audioManager.removePlaying(player);
          })["catch"](function (e) {});
        };

        _proto.playOneShot = function playOneShot(clip, volumeScale) {
          if (volumeScale === void 0) {
            volumeScale = 1;
          }

          if (!clip._nativeAsset) {
            console.error('Invalid audio clip');
            return;
          }

          AudioPlayer.loadOneShotAudio(clip._nativeAsset.url, this._volume * volumeScale, {
            audioLoadMode: clip.loadMode
          }).then(function (oneShotAudio) {
            audioManager.discardOnePlayingIfNeeded();

            oneShotAudio.onPlay = function () {
              audioManager.addPlaying(oneShotAudio);
            };

            oneShotAudio.onEnd = function () {
              audioManager.removePlaying(oneShotAudio);
            };

            oneShotAudio.play();
          })["catch"](function (e) {});
        };

        _proto._syncStates = function _syncStates() {
          var _this6 = this;

          if (!this._player) {
            return;
          }

          this._player.seek(this._cachedCurrentTime).then(function () {
            if (_this6._player) {
              _this6._player.loop = _this6._loop;
              _this6._player.volume = _this6._volume;

              _this6._operationsBeforeLoading.forEach(function (opName) {
                var _this6$opName;

                (_this6$opName = _this6[opName]) === null || _this6$opName === void 0 ? void 0 : _this6$opName.call(_this6);
              });

              _this6._operationsBeforeLoading.length = 0;
            }
          })["catch"](function (e) {});
        };

        _createClass(AudioSource, [{
          key: "clip",
          get: function get() {
            return this._clip;
          },
          set: function set(val) {
            if (val === this._clip) {
              return;
            }

            this._clip = val;

            this._syncPlayer();
          }
        }, {
          key: "loop",
          get: function get() {
            return this._loop;
          },
          set: function set(val) {
            this._loop = val;
            this._player && (this._player.loop = val);
          }
        }, {
          key: "playOnAwake",
          get: function get() {
            return this._playOnAwake;
          },
          set: function set(val) {
            this._playOnAwake = val;
          }
        }, {
          key: "volume",
          get: function get() {
            return this._volume;
          },
          set: function set(val) {
            if (Number.isNaN(val)) {
              console.warn('illegal audio volume!');
              return;
            }

            val = clamp(val, 0, 1);

            if (this._player) {
              this._player.volume = val;
              this._volume = this._player.volume;
            } else {
              this._volume = val;
            }
          }
        }, {
          key: "currentTime",
          get: function get() {
            return this._player ? this._player.currentTime : this._cachedCurrentTime;
          },
          set: function set(num) {
            var _this$_player6;

            if (Number.isNaN(num)) {
              console.warn('illegal audio time!');
              return;
            }

            num = clamp(num, 0, this.duration);
            this._cachedCurrentTime = num;
            (_this$_player6 = this._player) === null || _this$_player6 === void 0 ? void 0 : _this$_player6.seek(this._cachedCurrentTime)["catch"](function (e) {});
          }
        }, {
          key: "duration",
          get: function get() {
            var _this$_clip$getDurati, _this$_clip;

            return (_this$_clip$getDurati = (_this$_clip = this._clip) === null || _this$_clip === void 0 ? void 0 : _this$_clip.getDuration()) !== null && _this$_clip$getDurati !== void 0 ? _this$_clip$getDurati : this._player ? this._player.duration : 0;
          }
        }, {
          key: "state",
          get: function get() {
            return this._player ? this._player.state : AudioState.INIT;
          }
        }, {
          key: "playing",
          get: function get() {
            return this.state === AudioSource.AudioState.PLAYING;
          }
        }], [{
          key: "maxAudioChannel",
          get: function get() {
            return AudioPlayer.maxAudioChannel;
          }
        }]);

        return AudioSource;
      }(Component), _class3$p.AudioState = AudioState, _class3$p.EventType = AudioSourceEventType, _temp$z), (_initializer$13 = applyDecoratedInitializer(_class2$1f.prototype, "_clip", [_dec2$K], function () {
        return null;
      }), _initializer2$J = applyDecoratedInitializer(_class2$1f.prototype, "_loop", [serializable], function () {
        return false;
      }), _initializer3$w = applyDecoratedInitializer(_class2$1f.prototype, "_playOnAwake", [serializable], function () {
        return true;
      }), _initializer4$q = applyDecoratedInitializer(_class2$1f.prototype, "_volume", [serializable], function () {
        return 1;
      }), _applyDecoratedDescriptor(_class2$1f.prototype, "clip", [_dec3$p], Object.getOwnPropertyDescriptor(_class2$1f.prototype, "clip"), _class2$1f.prototype)), _class2$1f)) || _class$1s));

      legacyCC.AudioSourceComponent = AudioSource;
      setClassAlias(AudioSource, 'cc.AudioSourceComponent');

      legacyCC.log = log;
      legacyCC.warn = warn;
      legacyCC.error = error;
      legacyCC.assert = assert;
      legacyCC._throw = _throw;
      legacyCC.logID = logID;
      legacyCC.warnID = warnID;
      legacyCC.errorID = errorID;
      legacyCC.assertID = assertID;
      legacyCC.debug = debug$1;
      legacyCC.path = {
        join: join,
        extname: extname,
        mainFileName: mainFileName,
        basename: basename,
        dirname: dirname,
        changeExtname: changeExtname,
        changeBasename: changeBasename,
        _normalize: _normalize,
        stripSep: stripSep,

        get sep() {
          return getSeperator();
        }

      };

      function isUICamera(camera) {
        var scene = camera.scene;
        var batches = scene.batches;

        for (var i = 0; i < batches.length; i++) {
          var batch = batches[i];

          if (camera.visibility & batch.visFlags) {
            return true;
          }
        }

        return false;
      }

      var ForwardPipelineBuilder = exports('ForwardPipelineBuilder', function () {
        function ForwardPipelineBuilder() {}

        var _proto = ForwardPipelineBuilder.prototype;

        _proto.setup = function setup(cameras, ppl) {
          for (var i = 0; i < cameras.length; i++) {
            var camera = cameras[i];

            if (camera.scene === null) {
              continue;
            }

            buildForwardPass(camera, ppl, false);
          }
        };

        return ForwardPipelineBuilder;
      }());
      var DeferredPipelineBuilder = exports('DeferredPipelineBuilder', function () {
        function DeferredPipelineBuilder() {}

        var _proto2 = DeferredPipelineBuilder.prototype;

        _proto2.setup = function setup(cameras, ppl) {
          for (var i = 0; i < cameras.length; ++i) {
            var camera = cameras[i];

            if (!camera.scene) {
              continue;
            }

            var isGameView = camera.cameraUsage === CameraUsage.GAME || camera.cameraUsage === CameraUsage.GAME_VIEW;

            if (!isGameView) {
              buildForwardPass(camera, ppl, false);
              continue;
            }

            if (!isUICamera(camera)) {
              var gBufferInfo = buildGBufferPass(camera, ppl);
              var lightInfo = buildLightingPass(camera, ppl, gBufferInfo);
              buildPostprocessPass(camera, ppl, lightInfo.rtName);
              continue;
            }

            buildUIPass(camera, ppl);
          }
        };

        return DeferredPipelineBuilder;
      }());

      var Destroyed$2 = CCObject.Flags.Destroyed;
      var PersistentMask$2 = CCObject.Flags.PersistentMask;
      var objsToClearTmpVar = [];
      function instantiate(original, internalForce) {

        var clone;

        if (isCCObject(original)) {
          if (original._instantiate) {
            legacyCC.game._isCloning = true;
            clone = original._instantiate(null, true);
            legacyCC.game._isCloning = false;

            return clone;
          } else if (original instanceof legacyCC.Asset) {
            throw new TypeError(getError(6903));
          }
        }

        legacyCC.game._isCloning = true;
        clone = doInstantiate(original);
        legacyCC.game._isCloning = false;

        return clone;
      }

      function doInstantiate(obj, parent) {

        var clone;

        if (obj._iN$t) {
          clone = obj._iN$t;
        } else if (obj.constructor) {
          var Klass = obj.constructor;
          clone = new Klass();
        } else {
          clone = Object.create(null);
        }

        enumerateObject(obj, clone, parent);

        for (var i = 0, len = objsToClearTmpVar.length; i < len; ++i) {
          objsToClearTmpVar[i]._iN$t = null;
        }

        objsToClearTmpVar.length = 0;
        return clone;
      }

      function enumerateCCClass(klass, obj, clone, parent) {
        var props = klass.__values__;

        for (var p = 0; p < props.length; p++) {
          var key = props[p];
          var value = obj[key];

          if (typeof value === 'object' && value) {
            var initValue = clone[key];

            if (initValue instanceof ValueType && initValue.constructor === value.constructor) {
              initValue.set(value);
            } else {
              clone[key] = value._iN$t || instantiateObj(value, parent);
            }
          } else {
            clone[key] = value;
          }
        }
      }

      function enumerateObject(obj, clone, parent) {
        value(obj, '_iN$t', clone, true);
        objsToClearTmpVar.push(obj);
        var klass = obj.constructor;

        if (isCCClassOrFastDefined(klass)) {
          enumerateCCClass(klass, obj, clone, parent);
        } else {
          for (var key in obj) {
            if (!obj.hasOwnProperty(key) || key.charCodeAt(0) === 95 && key.charCodeAt(1) === 95 && key !== '__type__' && key !== '__prefab') {
              continue;
            }

            var value$1 = obj[key];

            if (typeof value$1 === 'object' && value$1) {
              if (value$1 === clone) {
                continue;
              }

              clone[key] = value$1._iN$t || instantiateObj(value$1, parent);
            } else {
              clone[key] = value$1;
            }
          }
        }

        if (isCCObject(obj)) {
          clone._objFlags &= PersistentMask$2;
        }
      }

      function instantiateObj(obj, parent) {
        if (obj instanceof ValueType) {
          return obj.clone();
        }

        if (obj instanceof legacyCC.Asset) {
          return obj;
        }

        var clone;

        if (ArrayBuffer.isView(obj)) {
          var len = obj.length;
          clone = new obj.constructor(len);
          obj._iN$t = clone;
          objsToClearTmpVar.push(obj);

          for (var i = 0; i < len; ++i) {
            clone[i] = obj[i];
          }

          return clone;
        }

        if (Array.isArray(obj)) {
          var _len = obj.length;
          clone = new Array(_len);
          obj._iN$t = clone;
          objsToClearTmpVar.push(obj);

          for (var _i = 0; _i < _len; ++_i) {
            var value = obj[_i];

            if (typeof value === 'object' && value) {
              clone[_i] = value._iN$t || instantiateObj(value, parent);
            } else {
              clone[_i] = value;
            }
          }

          return clone;
        } else if (obj._objFlags & Destroyed$2) {
          return null;
        }

        var ctor = obj.constructor;

        if (isCCClassOrFastDefined(ctor)) {
          if (parent) {
            if (parent instanceof legacyCC.Component) {
              if (obj instanceof legacyCC.Node || obj instanceof legacyCC.Component) {
                return obj;
              }
            } else if (parent instanceof legacyCC.Node) {
              if (obj instanceof legacyCC.Node) {
                if (!obj.isChildOf(parent)) {
                  return obj;
                }
              } else if (obj instanceof legacyCC.Component) {
                if (obj.node && !obj.node.isChildOf(parent)) {
                  return obj;
                }
              }
            }
          }

          clone = new ctor();
        } else if (ctor === Object) {
          clone = {};
        } else if (!ctor) {
          clone = Object.create(null);
        } else {
          return obj;
        }

        enumerateObject(obj, clone, parent);
        return clone;
      }

      instantiate._clone = doInstantiate;
      legacyCC.instantiate = instantiate;

      var NodePool$1 = exports('NodePool', function () {
        function NodePool(poolHandlerComp) {
          this.poolHandlerComp = void 0;
          this._pool = void 0;
          this.poolHandlerComp = poolHandlerComp;
          this._pool = [];
        }

        var _proto = NodePool.prototype;

        _proto.size = function size() {
          return this._pool.length;
        };

        _proto.clear = function clear() {
          var count = this._pool.length;

          for (var i = 0; i < count; ++i) {
            this._pool[i].destroy();
          }

          this._pool.length = 0;
        };

        _proto.put = function put(obj) {
          if (obj && this._pool.indexOf(obj) === -1) {
            obj.removeFromParent();
            var handler = this.poolHandlerComp ? obj.getComponent(this.poolHandlerComp) : null;

            if (handler && handler.unuse) {
              handler.unuse();
            }

            this._pool.push(obj);
          }
        };

        _proto.get = function get() {
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          var last = this._pool.length - 1;

          if (last < 0) {
            return null;
          } else {
            var obj = this._pool[last];
            this._pool.length = last;
            var handler = this.poolHandlerComp ? obj.getComponent(this.poolHandlerComp) : null;

            if (handler && handler.reuse) {
              handler.reuse(arguments);
            }

            return obj;
          }
        };

        return NodePool;
      }());
      legacyCC.NodePool = NodePool$1;

      var _globalThis$jsb, _globalJsb$copyTextTo;
      var globalJsb = (_globalThis$jsb = globalThis.jsb) !== null && _globalThis$jsb !== void 0 ? _globalThis$jsb : {};

      var _native = exports('native', {
        DownloaderHints: globalJsb.DownloaderHints,
        Downloader: globalJsb.Downloader,
        zipUtils: globalJsb.zipUtils,
        fileUtils: globalJsb.fileUtils,
        DebugRenderer: globalJsb.DebugRenderer,
        copyTextToClipboard: (_globalJsb$copyTextTo = globalJsb.copyTextToClipboard) === null || _globalJsb$copyTextTo === void 0 ? void 0 : _globalJsb$copyTextTo.bind(globalJsb),
        garbageCollect: globalJsb.garbageCollect,
        reflection: globalJsb.reflection,
        bridge: globalJsb.bridge,
        jsbBridgeWrapper: globalJsb.jsbBridgeWrapper,
        AssetsManager: globalJsb.AssetsManager,
        EventAssetsManager: globalJsb.EventAssetsManager,
        Manifest: globalJsb.Manifest,
        saveImageData: globalJsb.saveImageData,
        process: globalJsb.process
      });

      legacyCC.renderer = renderer;

      var WebGLDescriptorSet = function (_DescriptorSet) {
        _inheritsLoose(WebGLDescriptorSet, _DescriptorSet);

        function WebGLDescriptorSet() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _DescriptorSet.call.apply(_DescriptorSet, [this].concat(args)) || this;
          _this._gpuDescriptorSet = null;
          return _this;
        }

        var _proto = WebGLDescriptorSet.prototype;

        _proto.initialize = function initialize(info) {
          this._layout = info.layout;
          var _gpuDescriptorSetLayo = info.layout.gpuDescriptorSetLayout,
              bindings = _gpuDescriptorSetLayo.bindings,
              descriptorIndices = _gpuDescriptorSetLayo.descriptorIndices,
              descriptorCount = _gpuDescriptorSetLayo.descriptorCount;
          this._buffers = Array(descriptorCount).fill(null);
          this._textures = Array(descriptorCount).fill(null);
          this._samplers = Array(descriptorCount).fill(null);
          var gpuDescriptors = [];
          this._gpuDescriptorSet = {
            gpuDescriptors: gpuDescriptors,
            descriptorIndices: descriptorIndices
          };

          for (var i = 0; i < bindings.length; ++i) {
            var binding = bindings[i];

            for (var j = 0; j < binding.count; j++) {
              gpuDescriptors.push({
                type: binding.descriptorType,
                gpuBuffer: null,
                gpuTexture: null,
                gpuSampler: null
              });
            }
          }
        };

        _proto.destroy = function destroy() {
          this._layout = null;
          this._gpuDescriptorSet = null;
        };

        _proto.update = function update() {
          if (this._isDirty && this._gpuDescriptorSet) {
            var descriptors = this._gpuDescriptorSet.gpuDescriptors;

            for (var i = 0; i < descriptors.length; ++i) {
              if (descriptors[i].type & DESCRIPTOR_BUFFER_TYPE) {
                var buffer = this._buffers[i];

                if (buffer) {
                  descriptors[i].gpuBuffer = buffer.gpuBuffer || buffer.gpuBufferView;
                }
              } else if (descriptors[i].type & DESCRIPTOR_SAMPLER_TYPE) {
                if (this._textures[i]) {
                  descriptors[i].gpuTexture = this._textures[i].gpuTexture;
                }

                if (this._samplers[i]) {
                  descriptors[i].gpuSampler = this._samplers[i].gpuSampler;
                }
              }
            }

            this._isDirty = false;
          }
        };

        _createClass(WebGLDescriptorSet, [{
          key: "gpuDescriptorSet",
          get: function get() {
            return this._gpuDescriptorSet;
          }
        }]);

        return WebGLDescriptorSet;
      }(DescriptorSet);

      var WebGLEXT;

      (function (WebGLEXT) {
        WebGLEXT[WebGLEXT["RGBA16F_EXT"] = 34842] = "RGBA16F_EXT";
        WebGLEXT[WebGLEXT["RGB16F_EXT"] = 34843] = "RGB16F_EXT";
        WebGLEXT[WebGLEXT["RGBA32F_EXT"] = 34836] = "RGBA32F_EXT";
        WebGLEXT[WebGLEXT["FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT"] = 33297] = "FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT";
        WebGLEXT[WebGLEXT["UNSIGNED_NORMALIZED_EXT"] = 35863] = "UNSIGNED_NORMALIZED_EXT";
        WebGLEXT[WebGLEXT["UNSIGNED_INT_24_8_WEBGL"] = 34042] = "UNSIGNED_INT_24_8_WEBGL";
        WebGLEXT[WebGLEXT["HALF_FLOAT_OES"] = 36193] = "HALF_FLOAT_OES";
        WebGLEXT[WebGLEXT["SRGB_EXT"] = 35904] = "SRGB_EXT";
        WebGLEXT[WebGLEXT["SRGB_ALPHA_EXT"] = 35906] = "SRGB_ALPHA_EXT";
        WebGLEXT[WebGLEXT["SRGB8_ALPHA8_EXT"] = 35907] = "SRGB8_ALPHA8_EXT";
        WebGLEXT[WebGLEXT["COMPRESSED_RGB_S3TC_DXT1_EXT"] = 33776] = "COMPRESSED_RGB_S3TC_DXT1_EXT";
        WebGLEXT[WebGLEXT["COMPRESSED_RGBA_S3TC_DXT1_EXT"] = 33777] = "COMPRESSED_RGBA_S3TC_DXT1_EXT";
        WebGLEXT[WebGLEXT["COMPRESSED_RGBA_S3TC_DXT3_EXT"] = 33778] = "COMPRESSED_RGBA_S3TC_DXT3_EXT";
        WebGLEXT[WebGLEXT["COMPRESSED_RGBA_S3TC_DXT5_EXT"] = 33779] = "COMPRESSED_RGBA_S3TC_DXT5_EXT";
        WebGLEXT[WebGLEXT["COMPRESSED_SRGB_S3TC_DXT1_EXT"] = 35916] = "COMPRESSED_SRGB_S3TC_DXT1_EXT";
        WebGLEXT[WebGLEXT["COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT"] = 35917] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT";
        WebGLEXT[WebGLEXT["COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT"] = 35918] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT";
        WebGLEXT[WebGLEXT["COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT"] = 35919] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT";
        WebGLEXT[WebGLEXT["COMPRESSED_RGB_PVRTC_4BPPV1_IMG"] = 35840] = "COMPRESSED_RGB_PVRTC_4BPPV1_IMG";
        WebGLEXT[WebGLEXT["COMPRESSED_RGB_PVRTC_2BPPV1_IMG"] = 35841] = "COMPRESSED_RGB_PVRTC_2BPPV1_IMG";
        WebGLEXT[WebGLEXT["COMPRESSED_RGBA_PVRTC_4BPPV1_IMG"] = 35842] = "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG";
        WebGLEXT[WebGLEXT["COMPRESSED_RGBA_PVRTC_2BPPV1_IMG"] = 35843] = "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG";
        WebGLEXT[WebGLEXT["COMPRESSED_RGB_ETC1_WEBGL"] = 36196] = "COMPRESSED_RGB_ETC1_WEBGL";
        WebGLEXT[WebGLEXT["COMPRESSED_R11_EAC"] = 37488] = "COMPRESSED_R11_EAC";
        WebGLEXT[WebGLEXT["COMPRESSED_SIGNED_R11_EAC"] = 37489] = "COMPRESSED_SIGNED_R11_EAC";
        WebGLEXT[WebGLEXT["COMPRESSED_RG11_EAC"] = 37490] = "COMPRESSED_RG11_EAC";
        WebGLEXT[WebGLEXT["COMPRESSED_SIGNED_RG11_EAC"] = 37491] = "COMPRESSED_SIGNED_RG11_EAC";
        WebGLEXT[WebGLEXT["COMPRESSED_RGB8_ETC2"] = 37492] = "COMPRESSED_RGB8_ETC2";
        WebGLEXT[WebGLEXT["COMPRESSED_SRGB8_ETC2"] = 37493] = "COMPRESSED_SRGB8_ETC2";
        WebGLEXT[WebGLEXT["COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2"] = 37494] = "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2";
        WebGLEXT[WebGLEXT["COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2"] = 37495] = "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2";
        WebGLEXT[WebGLEXT["COMPRESSED_RGBA8_ETC2_EAC"] = 37496] = "COMPRESSED_RGBA8_ETC2_EAC";
        WebGLEXT[WebGLEXT["COMPRESSED_SRGB8_ALPHA8_ETC2_EAC"] = 37497] = "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC";
        WebGLEXT[WebGLEXT["COMPRESSED_RGBA_ASTC_4x4_KHR"] = 37808] = "COMPRESSED_RGBA_ASTC_4x4_KHR";
        WebGLEXT[WebGLEXT["COMPRESSED_RGBA_ASTC_5x4_KHR"] = 37809] = "COMPRESSED_RGBA_ASTC_5x4_KHR";
        WebGLEXT[WebGLEXT["COMPRESSED_RGBA_ASTC_5x5_KHR"] = 37810] = "COMPRESSED_RGBA_ASTC_5x5_KHR";
        WebGLEXT[WebGLEXT["COMPRESSED_RGBA_ASTC_6x5_KHR"] = 37811] = "COMPRESSED_RGBA_ASTC_6x5_KHR";
        WebGLEXT[WebGLEXT["COMPRESSED_RGBA_ASTC_6x6_KHR"] = 37812] = "COMPRESSED_RGBA_ASTC_6x6_KHR";
        WebGLEXT[WebGLEXT["COMPRESSED_RGBA_ASTC_8x5_KHR"] = 37813] = "COMPRESSED_RGBA_ASTC_8x5_KHR";
        WebGLEXT[WebGLEXT["COMPRESSED_RGBA_ASTC_8x6_KHR"] = 37814] = "COMPRESSED_RGBA_ASTC_8x6_KHR";
        WebGLEXT[WebGLEXT["COMPRESSED_RGBA_ASTC_8x8_KHR"] = 37815] = "COMPRESSED_RGBA_ASTC_8x8_KHR";
        WebGLEXT[WebGLEXT["COMPRESSED_RGBA_ASTC_10x5_KHR"] = 37816] = "COMPRESSED_RGBA_ASTC_10x5_KHR";
        WebGLEXT[WebGLEXT["COMPRESSED_RGBA_ASTC_10x6_KHR"] = 37817] = "COMPRESSED_RGBA_ASTC_10x6_KHR";
        WebGLEXT[WebGLEXT["COMPRESSED_RGBA_ASTC_10x8_KHR"] = 37818] = "COMPRESSED_RGBA_ASTC_10x8_KHR";
        WebGLEXT[WebGLEXT["COMPRESSED_RGBA_ASTC_10x10_KHR"] = 37819] = "COMPRESSED_RGBA_ASTC_10x10_KHR";
        WebGLEXT[WebGLEXT["COMPRESSED_RGBA_ASTC_12x10_KHR"] = 37820] = "COMPRESSED_RGBA_ASTC_12x10_KHR";
        WebGLEXT[WebGLEXT["COMPRESSED_RGBA_ASTC_12x12_KHR"] = 37821] = "COMPRESSED_RGBA_ASTC_12x12_KHR";
        WebGLEXT[WebGLEXT["COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR"] = 37840] = "COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR";
        WebGLEXT[WebGLEXT["COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR"] = 37841] = "COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR";
        WebGLEXT[WebGLEXT["COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR"] = 37842] = "COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR";
        WebGLEXT[WebGLEXT["COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR"] = 37843] = "COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR";
        WebGLEXT[WebGLEXT["COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR"] = 37844] = "COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR";
        WebGLEXT[WebGLEXT["COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR"] = 37845] = "COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR";
        WebGLEXT[WebGLEXT["COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR"] = 37846] = "COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR";
        WebGLEXT[WebGLEXT["COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR"] = 37847] = "COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR";
        WebGLEXT[WebGLEXT["COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR"] = 37848] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR";
        WebGLEXT[WebGLEXT["COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR"] = 37849] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR";
        WebGLEXT[WebGLEXT["COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR"] = 37850] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR";
        WebGLEXT[WebGLEXT["COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR"] = 37851] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR";
        WebGLEXT[WebGLEXT["COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR"] = 37852] = "COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR";
        WebGLEXT[WebGLEXT["COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR"] = 37853] = "COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR";
      })(WebGLEXT || (WebGLEXT = {}));

      var WebGLDeviceManager = function () {
        function WebGLDeviceManager() {}

        WebGLDeviceManager.setInstance = function setInstance(instance) {
          WebGLDeviceManager._instance = instance;
        };

        _createClass(WebGLDeviceManager, null, [{
          key: "instance",
          get: function get() {
            return WebGLDeviceManager._instance;
          }
        }]);

        return WebGLDeviceManager;
      }();
      WebGLDeviceManager._instance = null;

      function GFXFormatToWebGLType(format, gl) {
        switch (format) {
          case Format.R8:
            return gl.UNSIGNED_BYTE;

          case Format.R8SN:
            return gl.BYTE;

          case Format.R8UI:
            return gl.UNSIGNED_BYTE;

          case Format.R8I:
            return gl.BYTE;

          case Format.R16F:
            return WebGLEXT.HALF_FLOAT_OES;

          case Format.R16UI:
            return gl.UNSIGNED_SHORT;

          case Format.R16I:
            return gl.SHORT;

          case Format.R32F:
            return gl.FLOAT;

          case Format.R32UI:
            return gl.UNSIGNED_INT;

          case Format.R32I:
            return gl.INT;

          case Format.RG8:
            return gl.UNSIGNED_BYTE;

          case Format.RG8SN:
            return gl.BYTE;

          case Format.RG8UI:
            return gl.UNSIGNED_BYTE;

          case Format.RG8I:
            return gl.BYTE;

          case Format.RG16F:
            return WebGLEXT.HALF_FLOAT_OES;

          case Format.RG16UI:
            return gl.UNSIGNED_SHORT;

          case Format.RG16I:
            return gl.SHORT;

          case Format.RG32F:
            return gl.FLOAT;

          case Format.RG32UI:
            return gl.UNSIGNED_INT;

          case Format.RG32I:
            return gl.INT;

          case Format.RGB8:
            return gl.UNSIGNED_BYTE;

          case Format.SRGB8:
            return gl.UNSIGNED_BYTE;

          case Format.RGB8SN:
            return gl.BYTE;

          case Format.RGB8UI:
            return gl.UNSIGNED_BYTE;

          case Format.RGB8I:
            return gl.BYTE;

          case Format.RGB16F:
            return WebGLEXT.HALF_FLOAT_OES;

          case Format.RGB16UI:
            return gl.UNSIGNED_SHORT;

          case Format.RGB16I:
            return gl.SHORT;

          case Format.RGB32F:
            return gl.FLOAT;

          case Format.RGB32UI:
            return gl.UNSIGNED_INT;

          case Format.RGB32I:
            return gl.INT;

          case Format.BGRA8:
            return gl.UNSIGNED_BYTE;

          case Format.RGBA8:
            return gl.UNSIGNED_BYTE;

          case Format.SRGB8_A8:
            return gl.UNSIGNED_BYTE;

          case Format.RGBA8SN:
            return gl.BYTE;

          case Format.RGBA8UI:
            return gl.UNSIGNED_BYTE;

          case Format.RGBA8I:
            return gl.BYTE;

          case Format.RGBA16F:
            return WebGLEXT.HALF_FLOAT_OES;

          case Format.RGBA16UI:
            return gl.UNSIGNED_SHORT;

          case Format.RGBA16I:
            return gl.SHORT;

          case Format.RGBA32F:
            return gl.FLOAT;

          case Format.RGBA32UI:
            return gl.UNSIGNED_INT;

          case Format.RGBA32I:
            return gl.INT;

          case Format.R5G6B5:
            return gl.UNSIGNED_SHORT_5_6_5;

          case Format.R11G11B10F:
            return gl.FLOAT;

          case Format.RGB5A1:
            return gl.UNSIGNED_SHORT_5_5_5_1;

          case Format.RGBA4:
            return gl.UNSIGNED_SHORT_4_4_4_4;

          case Format.RGB10A2:
            return gl.UNSIGNED_BYTE;

          case Format.RGB10A2UI:
            return gl.UNSIGNED_INT;

          case Format.RGB9E5:
            return gl.UNSIGNED_BYTE;

          case Format.DEPTH:
            return gl.UNSIGNED_INT;

          case Format.DEPTH_STENCIL:
            return WebGLEXT.UNSIGNED_INT_24_8_WEBGL;

          case Format.BC1:
            return gl.UNSIGNED_BYTE;

          case Format.BC1_SRGB:
            return gl.UNSIGNED_BYTE;

          case Format.BC2:
            return gl.UNSIGNED_BYTE;

          case Format.BC2_SRGB:
            return gl.UNSIGNED_BYTE;

          case Format.BC3:
            return gl.UNSIGNED_BYTE;

          case Format.BC3_SRGB:
            return gl.UNSIGNED_BYTE;

          case Format.BC4:
            return gl.UNSIGNED_BYTE;

          case Format.BC4_SNORM:
            return gl.BYTE;

          case Format.BC5:
            return gl.UNSIGNED_BYTE;

          case Format.BC5_SNORM:
            return gl.BYTE;

          case Format.BC6H_SF16:
            return gl.FLOAT;

          case Format.BC6H_UF16:
            return gl.FLOAT;

          case Format.BC7:
            return gl.UNSIGNED_BYTE;

          case Format.BC7_SRGB:
            return gl.UNSIGNED_BYTE;

          case Format.ETC_RGB8:
            return gl.UNSIGNED_BYTE;

          case Format.ETC2_RGB8:
            return gl.UNSIGNED_BYTE;

          case Format.ETC2_SRGB8:
            return gl.UNSIGNED_BYTE;

          case Format.ETC2_RGB8_A1:
            return gl.UNSIGNED_BYTE;

          case Format.ETC2_SRGB8_A1:
            return gl.UNSIGNED_BYTE;

          case Format.EAC_R11:
            return gl.UNSIGNED_BYTE;

          case Format.EAC_R11SN:
            return gl.BYTE;

          case Format.EAC_RG11:
            return gl.UNSIGNED_BYTE;

          case Format.EAC_RG11SN:
            return gl.BYTE;

          case Format.PVRTC_RGB2:
            return gl.UNSIGNED_BYTE;

          case Format.PVRTC_RGBA2:
            return gl.UNSIGNED_BYTE;

          case Format.PVRTC_RGB4:
            return gl.UNSIGNED_BYTE;

          case Format.PVRTC_RGBA4:
            return gl.UNSIGNED_BYTE;

          case Format.PVRTC2_2BPP:
            return gl.UNSIGNED_BYTE;

          case Format.PVRTC2_4BPP:
            return gl.UNSIGNED_BYTE;

          case Format.ASTC_RGBA_4X4:
          case Format.ASTC_RGBA_5X4:
          case Format.ASTC_RGBA_5X5:
          case Format.ASTC_RGBA_6X5:
          case Format.ASTC_RGBA_6X6:
          case Format.ASTC_RGBA_8X5:
          case Format.ASTC_RGBA_8X6:
          case Format.ASTC_RGBA_8X8:
          case Format.ASTC_RGBA_10X5:
          case Format.ASTC_RGBA_10X6:
          case Format.ASTC_RGBA_10X8:
          case Format.ASTC_RGBA_10X10:
          case Format.ASTC_RGBA_12X10:
          case Format.ASTC_RGBA_12X12:
          case Format.ASTC_SRGBA_4X4:
          case Format.ASTC_SRGBA_5X4:
          case Format.ASTC_SRGBA_5X5:
          case Format.ASTC_SRGBA_6X5:
          case Format.ASTC_SRGBA_6X6:
          case Format.ASTC_SRGBA_8X5:
          case Format.ASTC_SRGBA_8X6:
          case Format.ASTC_SRGBA_8X8:
          case Format.ASTC_SRGBA_10X5:
          case Format.ASTC_SRGBA_10X6:
          case Format.ASTC_SRGBA_10X8:
          case Format.ASTC_SRGBA_10X10:
          case Format.ASTC_SRGBA_12X10:
          case Format.ASTC_SRGBA_12X12:
            return gl.UNSIGNED_BYTE;

          default:
            {
              return gl.UNSIGNED_BYTE;
            }
        }
      }
      function GFXFormatToWebGLInternalFormat(format, gl) {
        switch (format) {
          case Format.R5G6B5:
            return gl.RGB565;

          case Format.RGB5A1:
            return gl.RGB5_A1;

          case Format.RGBA4:
            return gl.RGBA4;

          case Format.RGBA16F:
            return WebGLEXT.RGBA16F_EXT;

          case Format.RGBA32F:
            return WebGLEXT.RGBA32F_EXT;

          case Format.SRGB8_A8:
            return WebGLEXT.SRGB8_ALPHA8_EXT;

          case Format.DEPTH:
            return gl.DEPTH_COMPONENT16;

          case Format.DEPTH_STENCIL:
            return gl.DEPTH_STENCIL;

          default:
            {
              console.error('Unsupported Format, convert to WebGL internal format failed.');
              return gl.RGBA;
            }
        }
      }
      function GFXFormatToWebGLFormat(format, gl) {
        switch (format) {
          case Format.A8:
            return gl.ALPHA;

          case Format.L8:
            return gl.LUMINANCE;

          case Format.LA8:
            return gl.LUMINANCE_ALPHA;

          case Format.RGB8:
            return gl.RGB;

          case Format.RGB16F:
            return gl.RGB;

          case Format.RGB32F:
            return gl.RGB;

          case Format.BGRA8:
            return gl.RGBA;

          case Format.RGBA8:
            return gl.RGBA;

          case Format.SRGB8_A8:
            return gl.RGBA;

          case Format.RGBA16F:
            return gl.RGBA;

          case Format.RGBA32F:
            return gl.RGBA;

          case Format.R5G6B5:
            return gl.RGB;

          case Format.RGB5A1:
            return gl.RGBA;

          case Format.RGBA4:
            return gl.RGBA;

          case Format.DEPTH:
            return gl.DEPTH_COMPONENT;

          case Format.DEPTH_STENCIL:
            return gl.DEPTH_STENCIL;

          case Format.BC1:
            return WebGLEXT.COMPRESSED_RGB_S3TC_DXT1_EXT;

          case Format.BC1_ALPHA:
            return WebGLEXT.COMPRESSED_RGBA_S3TC_DXT1_EXT;

          case Format.BC1_SRGB:
            return WebGLEXT.COMPRESSED_SRGB_S3TC_DXT1_EXT;

          case Format.BC1_SRGB_ALPHA:
            return WebGLEXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;

          case Format.BC2:
            return WebGLEXT.COMPRESSED_RGBA_S3TC_DXT3_EXT;

          case Format.BC2_SRGB:
            return WebGLEXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;

          case Format.BC3:
            return WebGLEXT.COMPRESSED_RGBA_S3TC_DXT5_EXT;

          case Format.BC3_SRGB:
            return WebGLEXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;

          case Format.ETC_RGB8:
            return WebGLEXT.COMPRESSED_RGB_ETC1_WEBGL;

          case Format.ETC2_RGB8:
            return WebGLEXT.COMPRESSED_RGB8_ETC2;

          case Format.ETC2_SRGB8:
            return WebGLEXT.COMPRESSED_SRGB8_ETC2;

          case Format.ETC2_RGB8_A1:
            return WebGLEXT.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2;

          case Format.ETC2_SRGB8_A1:
            return WebGLEXT.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2;

          case Format.ETC2_RGBA8:
            return WebGLEXT.COMPRESSED_RGBA8_ETC2_EAC;

          case Format.ETC2_SRGB8_A8:
            return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC;

          case Format.EAC_R11:
            return WebGLEXT.COMPRESSED_R11_EAC;

          case Format.EAC_R11SN:
            return WebGLEXT.COMPRESSED_SIGNED_R11_EAC;

          case Format.EAC_RG11:
            return WebGLEXT.COMPRESSED_RG11_EAC;

          case Format.EAC_RG11SN:
            return WebGLEXT.COMPRESSED_SIGNED_RG11_EAC;

          case Format.PVRTC_RGB2:
            return WebGLEXT.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;

          case Format.PVRTC_RGBA2:
            return WebGLEXT.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

          case Format.PVRTC_RGB4:
            return WebGLEXT.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;

          case Format.PVRTC_RGBA4:
            return WebGLEXT.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;

          case Format.ASTC_RGBA_4X4:
            return WebGLEXT.COMPRESSED_RGBA_ASTC_4x4_KHR;

          case Format.ASTC_RGBA_5X4:
            return WebGLEXT.COMPRESSED_RGBA_ASTC_5x4_KHR;

          case Format.ASTC_RGBA_5X5:
            return WebGLEXT.COMPRESSED_RGBA_ASTC_5x5_KHR;

          case Format.ASTC_RGBA_6X5:
            return WebGLEXT.COMPRESSED_RGBA_ASTC_6x5_KHR;

          case Format.ASTC_RGBA_6X6:
            return WebGLEXT.COMPRESSED_RGBA_ASTC_6x6_KHR;

          case Format.ASTC_RGBA_8X5:
            return WebGLEXT.COMPRESSED_RGBA_ASTC_8x5_KHR;

          case Format.ASTC_RGBA_8X6:
            return WebGLEXT.COMPRESSED_RGBA_ASTC_8x6_KHR;

          case Format.ASTC_RGBA_8X8:
            return WebGLEXT.COMPRESSED_RGBA_ASTC_8x8_KHR;

          case Format.ASTC_RGBA_10X5:
            return WebGLEXT.COMPRESSED_RGBA_ASTC_10x5_KHR;

          case Format.ASTC_RGBA_10X6:
            return WebGLEXT.COMPRESSED_RGBA_ASTC_10x6_KHR;

          case Format.ASTC_RGBA_10X8:
            return WebGLEXT.COMPRESSED_RGBA_ASTC_10x8_KHR;

          case Format.ASTC_RGBA_10X10:
            return WebGLEXT.COMPRESSED_RGBA_ASTC_10x10_KHR;

          case Format.ASTC_RGBA_12X10:
            return WebGLEXT.COMPRESSED_RGBA_ASTC_12x10_KHR;

          case Format.ASTC_RGBA_12X12:
            return WebGLEXT.COMPRESSED_RGBA_ASTC_12x12_KHR;

          case Format.ASTC_SRGBA_4X4:
            return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR;

          case Format.ASTC_SRGBA_5X4:
            return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR;

          case Format.ASTC_SRGBA_5X5:
            return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR;

          case Format.ASTC_SRGBA_6X5:
            return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR;

          case Format.ASTC_SRGBA_6X6:
            return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR;

          case Format.ASTC_SRGBA_8X5:
            return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR;

          case Format.ASTC_SRGBA_8X6:
            return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR;

          case Format.ASTC_SRGBA_8X8:
            return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR;

          case Format.ASTC_SRGBA_10X5:
            return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR;

          case Format.ASTC_SRGBA_10X6:
            return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR;

          case Format.ASTC_SRGBA_10X8:
            return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR;

          case Format.ASTC_SRGBA_10X10:
            return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR;

          case Format.ASTC_SRGBA_12X10:
            return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR;

          case Format.ASTC_SRGBA_12X12:
            return WebGLEXT.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR;

          default:
            {
              console.error('Unsupported Format, convert to WebGL format failed.');
              return gl.RGBA;
            }
        }
      }

      function GFXTypeToWebGLType(type, gl) {
        switch (type) {
          case Type.BOOL:
            return gl.BOOL;

          case Type.BOOL2:
            return gl.BOOL_VEC2;

          case Type.BOOL3:
            return gl.BOOL_VEC3;

          case Type.BOOL4:
            return gl.BOOL_VEC4;

          case Type.INT:
            return gl.INT;

          case Type.INT2:
            return gl.INT_VEC2;

          case Type.INT3:
            return gl.INT_VEC3;

          case Type.INT4:
            return gl.INT_VEC4;

          case Type.UINT:
            return gl.UNSIGNED_INT;

          case Type.FLOAT:
            return gl.FLOAT;

          case Type.FLOAT2:
            return gl.FLOAT_VEC2;

          case Type.FLOAT3:
            return gl.FLOAT_VEC3;

          case Type.FLOAT4:
            return gl.FLOAT_VEC4;

          case Type.MAT2:
            return gl.FLOAT_MAT2;

          case Type.MAT3:
            return gl.FLOAT_MAT3;

          case Type.MAT4:
            return gl.FLOAT_MAT4;

          case Type.SAMPLER2D:
            return gl.SAMPLER_2D;

          case Type.SAMPLER_CUBE:
            return gl.SAMPLER_CUBE;

          default:
            {
              console.error('Unsupported GLType, convert to GL type failed.');
              return Type.UNKNOWN;
            }
        }
      }

      function GFXTypeToTypedArrayCtor(type) {
        switch (type) {
          case Type.BOOL:
          case Type.BOOL2:
          case Type.BOOL3:
          case Type.BOOL4:
          case Type.INT:
          case Type.INT2:
          case Type.INT3:
          case Type.INT4:
          case Type.UINT:
            return Int32Array;

          case Type.FLOAT:
          case Type.FLOAT2:
          case Type.FLOAT3:
          case Type.FLOAT4:
          case Type.MAT2:
          case Type.MAT3:
          case Type.MAT4:
            return Float32Array;

          default:
            {
              console.error('Unsupported GLType, convert to TypedArrayConstructor failed.');
              return Float32Array;
            }
        }
      }

      function WebGLTypeToGFXType(glType, gl) {
        switch (glType) {
          case gl.BOOL:
            return Type.BOOL;

          case gl.BOOL_VEC2:
            return Type.BOOL2;

          case gl.BOOL_VEC3:
            return Type.BOOL3;

          case gl.BOOL_VEC4:
            return Type.BOOL4;

          case gl.INT:
            return Type.INT;

          case gl.INT_VEC2:
            return Type.INT2;

          case gl.INT_VEC3:
            return Type.INT3;

          case gl.INT_VEC4:
            return Type.INT4;

          case gl.UNSIGNED_INT:
            return Type.UINT;

          case gl.FLOAT:
            return Type.FLOAT;

          case gl.FLOAT_VEC2:
            return Type.FLOAT2;

          case gl.FLOAT_VEC3:
            return Type.FLOAT3;

          case gl.FLOAT_VEC4:
            return Type.FLOAT4;

          case gl.FLOAT_MAT2:
            return Type.MAT2;

          case gl.FLOAT_MAT3:
            return Type.MAT3;

          case gl.FLOAT_MAT4:
            return Type.MAT4;

          case gl.SAMPLER_2D:
            return Type.SAMPLER2D;

          case gl.SAMPLER_CUBE:
            return Type.SAMPLER_CUBE;

          default:
            {
              console.error('Unsupported GLType, convert to Type failed.');
              return Type.UNKNOWN;
            }
        }
      }

      function WebGLGetTypeSize(glType, gl) {
        switch (glType) {
          case gl.BOOL:
            return 4;

          case gl.BOOL_VEC2:
            return 8;

          case gl.BOOL_VEC3:
            return 12;

          case gl.BOOL_VEC4:
            return 16;

          case gl.INT:
            return 4;

          case gl.INT_VEC2:
            return 8;

          case gl.INT_VEC3:
            return 12;

          case gl.INT_VEC4:
            return 16;

          case gl.UNSIGNED_INT:
            return 4;

          case gl.FLOAT:
            return 4;

          case gl.FLOAT_VEC2:
            return 8;

          case gl.FLOAT_VEC3:
            return 12;

          case gl.FLOAT_VEC4:
            return 16;

          case gl.FLOAT_MAT2:
            return 16;

          case gl.FLOAT_MAT3:
            return 36;

          case gl.FLOAT_MAT4:
            return 64;

          case gl.SAMPLER_2D:
            return 4;

          case gl.SAMPLER_CUBE:
            return 4;

          default:
            {
              console.error('Unsupported GLType, get type failed.');
              return 0;
            }
        }
      }

      function WebGLGetComponentCount(glType, gl) {
        switch (glType) {
          case gl.FLOAT_MAT2:
            return 2;

          case gl.FLOAT_MAT3:
            return 3;

          case gl.FLOAT_MAT4:
            return 4;

          default:
            {
              return 1;
            }
        }
      }

      var WebGLCmpFuncs = [0x0200, 0x0201, 0x0202, 0x0203, 0x0204, 0x0205, 0x0206, 0x0207];
      var WebGLStencilOps = [0x0000, 0x1E00, 0x1E01, 0x1E02, 0x1E03, 0x150A, 0x8507, 0x8508];
      var WebGLBlendOps = [0x8006, 0x800A, 0x800B, 0x8007, 0x8008];
      var WebGLBlendFactors = [0x0000, 0x0001, 0x0302, 0x0304, 0x0303, 0x0305, 0x0300, 0x0306, 0x0301, 0x0307, 0x0308, 0x8001, 0x8002, 0x8003, 0x8004];
      var WebGLCmd;

      (function (WebGLCmd) {
        WebGLCmd[WebGLCmd["BEGIN_RENDER_PASS"] = 0] = "BEGIN_RENDER_PASS";
        WebGLCmd[WebGLCmd["END_RENDER_PASS"] = 1] = "END_RENDER_PASS";
        WebGLCmd[WebGLCmd["BIND_STATES"] = 2] = "BIND_STATES";
        WebGLCmd[WebGLCmd["DRAW"] = 3] = "DRAW";
        WebGLCmd[WebGLCmd["UPDATE_BUFFER"] = 4] = "UPDATE_BUFFER";
        WebGLCmd[WebGLCmd["COPY_BUFFER_TO_TEXTURE"] = 5] = "COPY_BUFFER_TO_TEXTURE";
        WebGLCmd[WebGLCmd["BLIT_TEXTURE"] = 6] = "BLIT_TEXTURE";
        WebGLCmd[WebGLCmd["COUNT"] = 7] = "COUNT";
      })(WebGLCmd || (WebGLCmd = {}));

      var WebGLCmdObject = function WebGLCmdObject(type) {
        this.cmdType = void 0;
        this.refCount = 0;
        this.cmdType = type;
      };
      var WebGLCmdBeginRenderPass = function (_WebGLCmdObject) {
        _inheritsLoose(WebGLCmdBeginRenderPass, _WebGLCmdObject);

        function WebGLCmdBeginRenderPass() {
          var _this;

          _this = _WebGLCmdObject.call(this, WebGLCmd.BEGIN_RENDER_PASS) || this;
          _this.gpuRenderPass = null;
          _this.gpuFramebuffer = null;
          _this.renderArea = new Rect$1();
          _this.clearFlag = ClearFlagBit.NONE;
          _this.clearColors = [];
          _this.clearDepth = 1.0;
          _this.clearStencil = 0;
          return _this;
        }

        var _proto = WebGLCmdBeginRenderPass.prototype;

        _proto.clear = function clear() {
          this.gpuFramebuffer = null;
          this.clearColors.length = 0;
        };

        return WebGLCmdBeginRenderPass;
      }(WebGLCmdObject);
      var WebGLCmdBindStates = function (_WebGLCmdObject2) {
        _inheritsLoose(WebGLCmdBindStates, _WebGLCmdObject2);

        function WebGLCmdBindStates() {
          var _this2;

          _this2 = _WebGLCmdObject2.call(this, WebGLCmd.BIND_STATES) || this;
          _this2.gpuPipelineState = null;
          _this2.gpuInputAssembler = null;
          _this2.gpuDescriptorSets = [];
          _this2.dynamicOffsets = [];
          _this2.dynamicStates = new DynamicStates();
          return _this2;
        }

        var _proto2 = WebGLCmdBindStates.prototype;

        _proto2.clear = function clear() {
          this.gpuPipelineState = null;
          this.gpuDescriptorSets.length = 0;
          this.gpuInputAssembler = null;
          this.dynamicOffsets.length = 0;
        };

        return WebGLCmdBindStates;
      }(WebGLCmdObject);
      var WebGLCmdDraw = function (_WebGLCmdObject3) {
        _inheritsLoose(WebGLCmdDraw, _WebGLCmdObject3);

        function WebGLCmdDraw() {
          var _this3;

          _this3 = _WebGLCmdObject3.call(this, WebGLCmd.DRAW) || this;
          _this3.drawInfo = new DrawInfo();
          return _this3;
        }

        var _proto3 = WebGLCmdDraw.prototype;

        _proto3.clear = function clear() {};

        return WebGLCmdDraw;
      }(WebGLCmdObject);
      var WebGLCmdUpdateBuffer = function (_WebGLCmdObject4) {
        _inheritsLoose(WebGLCmdUpdateBuffer, _WebGLCmdObject4);

        function WebGLCmdUpdateBuffer() {
          var _this4;

          _this4 = _WebGLCmdObject4.call(this, WebGLCmd.UPDATE_BUFFER) || this;
          _this4.gpuBuffer = null;
          _this4.buffer = null;
          _this4.offset = 0;
          _this4.size = 0;
          return _this4;
        }

        var _proto4 = WebGLCmdUpdateBuffer.prototype;

        _proto4.clear = function clear() {
          this.gpuBuffer = null;
          this.buffer = null;
        };

        return WebGLCmdUpdateBuffer;
      }(WebGLCmdObject);
      var WebGLCmdCopyBufferToTexture = function (_WebGLCmdObject5) {
        _inheritsLoose(WebGLCmdCopyBufferToTexture, _WebGLCmdObject5);

        function WebGLCmdCopyBufferToTexture() {
          var _this5;

          _this5 = _WebGLCmdObject5.call(this, WebGLCmd.COPY_BUFFER_TO_TEXTURE) || this;
          _this5.gpuTexture = null;
          _this5.buffers = [];
          _this5.regions = [];
          return _this5;
        }

        var _proto5 = WebGLCmdCopyBufferToTexture.prototype;

        _proto5.clear = function clear() {
          this.gpuTexture = null;
          this.buffers.length = 0;
          this.regions.length = 0;
        };

        return WebGLCmdCopyBufferToTexture;
      }(WebGLCmdObject);
      var WebGLCmdBlitTexture = function (_WebGLCmdObject6) {
        _inheritsLoose(WebGLCmdBlitTexture, _WebGLCmdObject6);

        function WebGLCmdBlitTexture() {
          var _this6;

          _this6 = _WebGLCmdObject6.call(this, WebGLCmd.BLIT_TEXTURE) || this;
          _this6.srcTexture = null;
          _this6.dstTexture = null;
          _this6.regions = [];
          _this6.filter = Filter.LINEAR;
          return _this6;
        }

        var _proto6 = WebGLCmdBlitTexture.prototype;

        _proto6.clear = function clear() {
          this.srcTexture = null;
          this.dstTexture = null;
          this.regions.length = 0;
        };

        return WebGLCmdBlitTexture;
      }(WebGLCmdObject);
      var WebGLCmdPackage = function () {
        function WebGLCmdPackage() {
          this.cmds = new CachedArray(1);
          this.beginRenderPassCmds = new CachedArray(1);
          this.bindStatesCmds = new CachedArray(1);
          this.drawCmds = new CachedArray(1);
          this.updateBufferCmds = new CachedArray(1);
          this.copyBufferToTextureCmds = new CachedArray(1);
          this.blitTextureCmds = new CachedArray(1);
        }

        var _proto7 = WebGLCmdPackage.prototype;

        _proto7.clearCmds = function clearCmds(allocator) {
          if (this.beginRenderPassCmds.length) {
            allocator.beginRenderPassCmdPool.freeCmds(this.beginRenderPassCmds);
            this.beginRenderPassCmds.clear();
          }

          if (this.bindStatesCmds.length) {
            allocator.bindStatesCmdPool.freeCmds(this.bindStatesCmds);
            this.bindStatesCmds.clear();
          }

          if (this.drawCmds.length) {
            allocator.drawCmdPool.freeCmds(this.drawCmds);
            this.drawCmds.clear();
          }

          if (this.updateBufferCmds.length) {
            allocator.updateBufferCmdPool.freeCmds(this.updateBufferCmds);
            this.updateBufferCmds.clear();
          }

          if (this.copyBufferToTextureCmds.length) {
            allocator.copyBufferToTextureCmdPool.freeCmds(this.copyBufferToTextureCmds);
            this.copyBufferToTextureCmds.clear();
          }

          if (this.blitTextureCmds.length) {
            allocator.blitTextureCmdPool.freeCmds(this.blitTextureCmds);
            this.blitTextureCmds.clear();
          }

          this.cmds.clear();
        };

        return WebGLCmdPackage;
      }();
      function WebGLCmdFuncCreateBuffer(device, gpuBuffer) {
        var gl = device.gl;
        var cache = device.stateCache;
        var glUsage = gpuBuffer.memUsage & MemoryUsageBit.HOST ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;

        if (gpuBuffer.usage & BufferUsageBit.VERTEX) {
          gpuBuffer.glTarget = gl.ARRAY_BUFFER;
          var glBuffer = gl.createBuffer();

          if (glBuffer) {
            gpuBuffer.glBuffer = glBuffer;

            if (gpuBuffer.size > 0) {
              if (device.extensions.useVAO) {
                if (cache.glVAO) {
                  device.extensions.OES_vertex_array_object.bindVertexArrayOES(null);
                  cache.glVAO = null;
                }
              }

              gfxStateCache.gpuInputAssembler = null;

              if (device.stateCache.glArrayBuffer !== gpuBuffer.glBuffer) {
                gl.bindBuffer(gl.ARRAY_BUFFER, gpuBuffer.glBuffer);
                device.stateCache.glArrayBuffer = gpuBuffer.glBuffer;
              }

              gl.bufferData(gl.ARRAY_BUFFER, gpuBuffer.size, glUsage);
              gl.bindBuffer(gl.ARRAY_BUFFER, null);
              device.stateCache.glArrayBuffer = null;
            }
          }
        } else if (gpuBuffer.usage & BufferUsageBit.INDEX) {
          gpuBuffer.glTarget = gl.ELEMENT_ARRAY_BUFFER;

          var _glBuffer = gl.createBuffer();

          if (_glBuffer) {
            gpuBuffer.glBuffer = _glBuffer;

            if (gpuBuffer.size > 0) {
              if (device.extensions.useVAO) {
                if (cache.glVAO) {
                  device.extensions.OES_vertex_array_object.bindVertexArrayOES(null);
                  cache.glVAO = null;
                }
              }

              gfxStateCache.gpuInputAssembler = null;

              if (device.stateCache.glElementArrayBuffer !== gpuBuffer.glBuffer) {
                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.glBuffer);
                device.stateCache.glElementArrayBuffer = gpuBuffer.glBuffer;
              }

              gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.size, glUsage);
              gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
              device.stateCache.glElementArrayBuffer = null;
            }
          }
        } else if (gpuBuffer.usage & BufferUsageBit.UNIFORM) {
          gpuBuffer.glTarget = gl.NONE;

          if (gpuBuffer.buffer) {
            gpuBuffer.vf32 = new Float32Array(gpuBuffer.buffer.buffer);
          }
        } else if (gpuBuffer.usage & BufferUsageBit.INDIRECT) {
          gpuBuffer.glTarget = gl.NONE;
        } else if (gpuBuffer.usage & BufferUsageBit.TRANSFER_DST) {
          gpuBuffer.glTarget = gl.NONE;
        } else if (gpuBuffer.usage & BufferUsageBit.TRANSFER_SRC) {
          gpuBuffer.glTarget = gl.NONE;
        } else {
          console.error('Unsupported BufferType, create buffer failed.');
          gpuBuffer.glTarget = gl.NONE;
        }
      }
      function WebGLCmdFuncDestroyBuffer(device, gpuBuffer) {
        var gl = device.gl;
        var cache = device.stateCache;

        if (gpuBuffer.glBuffer) {
          switch (gpuBuffer.glTarget) {
            case gl.ARRAY_BUFFER:
              if (device.extensions.useVAO) {
                if (cache.glVAO) {
                  device.extensions.OES_vertex_array_object.bindVertexArrayOES(null);
                  device.stateCache.glVAO = null;
                }
              }

              gfxStateCache.gpuInputAssembler = null;
              gl.bindBuffer(gl.ARRAY_BUFFER, null);
              device.stateCache.glArrayBuffer = null;
              break;

            case gl.ELEMENT_ARRAY_BUFFER:
              if (device.extensions.useVAO) {
                if (cache.glVAO) {
                  device.extensions.OES_vertex_array_object.bindVertexArrayOES(null);
                  device.stateCache.glVAO = null;
                }
              }

              gfxStateCache.gpuInputAssembler = null;
              gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
              device.stateCache.glElementArrayBuffer = null;
              break;
          }

          gl.deleteBuffer(gpuBuffer.glBuffer);
          gpuBuffer.glBuffer = null;
        }
      }
      function WebGLCmdFuncResizeBuffer(device, gpuBuffer) {
        var gl = device.gl;
        var cache = device.stateCache;
        var glUsage = gpuBuffer.memUsage & MemoryUsageBit.HOST ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;

        if (gpuBuffer.usage & BufferUsageBit.VERTEX) {
          if (device.extensions.useVAO) {
            if (cache.glVAO) {
              device.extensions.OES_vertex_array_object.bindVertexArrayOES(null);
              cache.glVAO = null;
            }
          }

          gfxStateCache.gpuInputAssembler = null;

          if (device.stateCache.glArrayBuffer !== gpuBuffer.glBuffer) {
            gl.bindBuffer(gl.ARRAY_BUFFER, gpuBuffer.glBuffer);
          }

          if (gpuBuffer.buffer) {
            gl.bufferData(gl.ARRAY_BUFFER, gpuBuffer.buffer, glUsage);
          } else {
            gl.bufferData(gl.ARRAY_BUFFER, gpuBuffer.size, glUsage);
          }

          gl.bindBuffer(gl.ARRAY_BUFFER, null);
          device.stateCache.glArrayBuffer = null;
        } else if (gpuBuffer.usage & BufferUsageBit.INDEX) {
          if (device.extensions.useVAO) {
            if (cache.glVAO) {
              device.extensions.OES_vertex_array_object.bindVertexArrayOES(null);
              cache.glVAO = null;
            }
          }

          gfxStateCache.gpuInputAssembler = null;

          if (device.stateCache.glElementArrayBuffer !== gpuBuffer.glBuffer) {
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.glBuffer);
          }

          if (gpuBuffer.buffer) {
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.buffer, glUsage);
          } else {
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.size, glUsage);
          }

          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
          device.stateCache.glElementArrayBuffer = null;
        } else if (gpuBuffer.usage & BufferUsageBit.UNIFORM) {
          if (gpuBuffer.buffer) {
            gpuBuffer.vf32 = new Float32Array(gpuBuffer.buffer.buffer);
          }
        } else if (gpuBuffer.usage & BufferUsageBit.INDIRECT || gpuBuffer.usage & BufferUsageBit.TRANSFER_DST || gpuBuffer.usage & BufferUsageBit.TRANSFER_SRC) {
          gpuBuffer.glTarget = gl.NONE;
        } else {
          console.error('Unsupported BufferType, create buffer failed.');
          gpuBuffer.glTarget = gl.NONE;
        }
      }
      function WebGLCmdFuncUpdateBuffer(device, gpuBuffer, buffer, offset, size) {
        if (gpuBuffer.usage & BufferUsageBit.UNIFORM) {
          if (ArrayBuffer.isView(buffer)) {
            gpuBuffer.vf32.set(buffer, offset / Float32Array.BYTES_PER_ELEMENT);
          } else {
            gpuBuffer.vf32.set(new Float32Array(buffer), offset / Float32Array.BYTES_PER_ELEMENT);
          }
        } else if (gpuBuffer.usage & BufferUsageBit.INDIRECT) {
          gpuBuffer.indirects.clearDraws();
          var drawInfos = buffer.drawInfos;

          for (var i = 0; i < drawInfos.length; ++i) {
            gpuBuffer.indirects.setDrawInfo(offset + i, drawInfos[i]);
          }
        } else {
          var buff = buffer;
          var gl = device.gl;
          var cache = device.stateCache;

          switch (gpuBuffer.glTarget) {
            case gl.ARRAY_BUFFER:
              {
                if (device.extensions.useVAO) {
                  if (cache.glVAO) {
                    device.extensions.OES_vertex_array_object.bindVertexArrayOES(null);
                    cache.glVAO = null;
                  }
                }

                gfxStateCache.gpuInputAssembler = null;

                if (device.stateCache.glArrayBuffer !== gpuBuffer.glBuffer) {
                  gl.bindBuffer(gl.ARRAY_BUFFER, gpuBuffer.glBuffer);
                  device.stateCache.glArrayBuffer = gpuBuffer.glBuffer;
                }

                break;
              }

            case gl.ELEMENT_ARRAY_BUFFER:
              {
                if (device.extensions.useVAO) {
                  if (cache.glVAO) {
                    device.extensions.OES_vertex_array_object.bindVertexArrayOES(null);
                    cache.glVAO = null;
                  }
                }

                gfxStateCache.gpuInputAssembler = null;

                if (device.stateCache.glElementArrayBuffer !== gpuBuffer.glBuffer) {
                  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.glBuffer);
                  device.stateCache.glElementArrayBuffer = gpuBuffer.glBuffer;
                }

                break;
              }

            default:
              {
                console.error('Unsupported BufferType, update buffer failed.');
                return;
              }
          }

          if (size === buff.byteLength) {
            gl.bufferSubData(gpuBuffer.glTarget, offset, buff);
          } else {
            gl.bufferSubData(gpuBuffer.glTarget, offset, buff.slice(0, size));
          }
        }
      }
      function WebGLCmdFuncCreateTexture(device, gpuTexture) {
        var gl = device.gl;
        gpuTexture.glFormat = gpuTexture.glInternalFmt = GFXFormatToWebGLFormat(gpuTexture.format, gl);
        gpuTexture.glType = GFXFormatToWebGLType(gpuTexture.format, gl);
        var w = gpuTexture.width;
        var h = gpuTexture.height;

        switch (gpuTexture.type) {
          case TextureType.TEX2D:
            {
              gpuTexture.glTarget = gl.TEXTURE_2D;
              var maxSize = Math.max(w, h);

              if (maxSize > device.capabilities.maxTextureSize) {
                errorID(9100, maxSize, device.capabilities.maxTextureSize);
              }

              if (!device.textureExclusive[gpuTexture.format] && !device.extensions.WEBGL_depth_texture && FormatInfos[gpuTexture.format].hasDepth) {
                gpuTexture.glInternalFmt = GFXFormatToWebGLInternalFormat(gpuTexture.format, gl);
                gpuTexture.glRenderbuffer = gl.createRenderbuffer();

                if (gpuTexture.size > 0) {
                  if (device.stateCache.glRenderbuffer !== gpuTexture.glRenderbuffer) {
                    gl.bindRenderbuffer(gl.RENDERBUFFER, gpuTexture.glRenderbuffer);
                    device.stateCache.glRenderbuffer = gpuTexture.glRenderbuffer;
                  }

                  gl.renderbufferStorage(gl.RENDERBUFFER, gpuTexture.glInternalFmt, w, h);
                }
              } else {
                gpuTexture.glTexture = gl.createTexture();

                if (gpuTexture.size > 0) {
                  var glTexUnit = device.stateCache.glTexUnits[device.stateCache.texUnit];

                  if (glTexUnit.glTexture !== gpuTexture.glTexture) {
                    gl.bindTexture(gl.TEXTURE_2D, gpuTexture.glTexture);
                    glTexUnit.glTexture = gpuTexture.glTexture;
                  }

                  if (FormatInfos[gpuTexture.format].isCompressed) {
                    for (var i = 0; i < gpuTexture.mipLevel; ++i) {
                      var imgSize = FormatSize(gpuTexture.format, w, h, 1);
                      var view = new Uint8Array(imgSize);
                      gl.compressedTexImage2D(gl.TEXTURE_2D, i, gpuTexture.glInternalFmt, w, h, 0, view);
                      w = Math.max(1, w >> 1);
                      h = Math.max(1, h >> 1);
                    }
                  } else {
                    for (var _i = 0; _i < gpuTexture.mipLevel; ++_i) {
                      gl.texImage2D(gl.TEXTURE_2D, _i, gpuTexture.glInternalFmt, w, h, 0, gpuTexture.glFormat, gpuTexture.glType, null);
                      w = Math.max(1, w >> 1);
                      h = Math.max(1, h >> 1);
                    }
                  }

                  if (gpuTexture.isPowerOf2) {
                    gpuTexture.glWrapS = gl.REPEAT;
                    gpuTexture.glWrapT = gl.REPEAT;
                  } else {
                    gpuTexture.glWrapS = gl.CLAMP_TO_EDGE;
                    gpuTexture.glWrapT = gl.CLAMP_TO_EDGE;
                  }

                  gpuTexture.glMinFilter = gl.LINEAR;
                  gpuTexture.glMagFilter = gl.LINEAR;
                  gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_WRAP_S, gpuTexture.glWrapS);
                  gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_WRAP_T, gpuTexture.glWrapT);
                  gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_MIN_FILTER, gpuTexture.glMinFilter);
                  gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_MAG_FILTER, gpuTexture.glMagFilter);
                }
              }

              break;
            }

          case TextureType.CUBE:
            {
              gpuTexture.glTarget = gl.TEXTURE_CUBE_MAP;

              var _maxSize = Math.max(w, h);

              if (_maxSize > device.capabilities.maxCubeMapTextureSize) {
                errorID(9100, _maxSize, device.capabilities.maxTextureSize);
              }

              gpuTexture.glTexture = gl.createTexture();

              if (gpuTexture.size > 0) {
                var _glTexUnit = device.stateCache.glTexUnits[device.stateCache.texUnit];

                if (_glTexUnit.glTexture !== gpuTexture.glTexture) {
                  gl.bindTexture(gl.TEXTURE_CUBE_MAP, gpuTexture.glTexture);
                  _glTexUnit.glTexture = gpuTexture.glTexture;
                }

                if (FormatInfos[gpuTexture.format].isCompressed) {
                  for (var f = 0; f < 6; ++f) {
                    w = gpuTexture.width;
                    h = gpuTexture.height;

                    for (var _i2 = 0; _i2 < gpuTexture.mipLevel; ++_i2) {
                      var _imgSize = FormatSize(gpuTexture.format, w, h, 1);

                      var _view = new Uint8Array(_imgSize);

                      gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, _i2, gpuTexture.glInternalFmt, w, h, 0, _view);
                      w = Math.max(1, w >> 1);
                      h = Math.max(1, h >> 1);
                    }
                  }
                } else {
                  for (var _f = 0; _f < 6; ++_f) {
                    w = gpuTexture.width;
                    h = gpuTexture.height;

                    for (var _i3 = 0; _i3 < gpuTexture.mipLevel; ++_i3) {
                      gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + _f, _i3, gpuTexture.glInternalFmt, w, h, 0, gpuTexture.glFormat, gpuTexture.glType, null);
                      w = Math.max(1, w >> 1);
                      h = Math.max(1, h >> 1);
                    }
                  }
                }

                if (gpuTexture.isPowerOf2) {
                  gpuTexture.glWrapS = gl.REPEAT;
                  gpuTexture.glWrapT = gl.REPEAT;
                } else {
                  gpuTexture.glWrapS = gl.CLAMP_TO_EDGE;
                  gpuTexture.glWrapT = gl.CLAMP_TO_EDGE;
                }

                gpuTexture.glMinFilter = gl.LINEAR;
                gpuTexture.glMagFilter = gl.LINEAR;
                gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_WRAP_S, gpuTexture.glWrapS);
                gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_WRAP_T, gpuTexture.glWrapT);
                gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_MIN_FILTER, gpuTexture.glMinFilter);
                gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_MAG_FILTER, gpuTexture.glMagFilter);
              }

              break;
            }

          default:
            {
              console.error('Unsupported TextureType, create texture failed.');
              gpuTexture.type = TextureType.TEX2D;
              gpuTexture.glTarget = gl.TEXTURE_2D;
            }
        }
      }
      function WebGLCmdFuncDestroyTexture(device, gpuTexture) {
        var gl = device.gl;

        if (gpuTexture.glTexture) {
          var glTexUnits = device.stateCache.glTexUnits;
          var texUnit = device.stateCache.texUnit;
          gl.deleteTexture(gpuTexture.glTexture);

          for (var i = 0; i < glTexUnits.length; i++) {
            if (glTexUnits[i].glTexture === gpuTexture.glTexture) {
              gl.activeTexture(gl.TEXTURE0 + i);
              texUnit = i;
              gl.bindTexture(gpuTexture.glTarget, null);
              glTexUnits[i].glTexture = null;
            }
          }

          device.stateCache.texUnit = texUnit;
          gpuTexture.glTexture = null;
        }

        if (gpuTexture.glRenderbuffer) {
          var glRenderbuffer = device.stateCache.glRenderbuffer;
          gl.deleteRenderbuffer(gpuTexture.glRenderbuffer);

          if (glRenderbuffer === gpuTexture.glRenderbuffer) {
            gl.bindRenderbuffer(gl.RENDERBUFFER, null);
            glRenderbuffer = null;
          }

          gpuTexture.glRenderbuffer = null;
        }
      }
      function WebGLCmdFuncResizeTexture(device, gpuTexture) {
        if (!gpuTexture.size) return;
        var gl = device.gl;
        var w = gpuTexture.width;
        var h = gpuTexture.height;

        switch (gpuTexture.type) {
          case TextureType.TEX2D:
            {
              gpuTexture.glTarget = gl.TEXTURE_2D;
              var maxSize = Math.max(w, h);

              if (maxSize > device.capabilities.maxTextureSize) {
                errorID(9100, maxSize, device.capabilities.maxTextureSize);
              }

              if (gpuTexture.glRenderbuffer) {
                if (device.stateCache.glRenderbuffer !== gpuTexture.glRenderbuffer) {
                  gl.bindRenderbuffer(gl.RENDERBUFFER, gpuTexture.glRenderbuffer);
                  device.stateCache.glRenderbuffer = gpuTexture.glRenderbuffer;
                }

                gl.renderbufferStorage(gl.RENDERBUFFER, gpuTexture.glInternalFmt, w, h);
              } else if (gpuTexture.glTexture) {
                var glTexUnit = device.stateCache.glTexUnits[device.stateCache.texUnit];

                if (glTexUnit.glTexture !== gpuTexture.glTexture) {
                  gl.bindTexture(gl.TEXTURE_2D, gpuTexture.glTexture);
                  glTexUnit.glTexture = gpuTexture.glTexture;
                }

                if (FormatInfos[gpuTexture.format].isCompressed) {
                  for (var i = 0; i < gpuTexture.mipLevel; ++i) {
                    var imgSize = FormatSize(gpuTexture.format, w, h, 1);
                    var view = new Uint8Array(imgSize);
                    gl.compressedTexImage2D(gl.TEXTURE_2D, i, gpuTexture.glInternalFmt, w, h, 0, view);
                    w = Math.max(1, w >> 1);
                    h = Math.max(1, h >> 1);
                  }
                } else {
                  for (var _i4 = 0; _i4 < gpuTexture.mipLevel; ++_i4) {
                    gl.texImage2D(gl.TEXTURE_2D, _i4, gpuTexture.glInternalFmt, w, h, 0, gpuTexture.glFormat, gpuTexture.glType, null);
                    w = Math.max(1, w >> 1);
                    h = Math.max(1, h >> 1);
                  }
                }
              }

              break;
            }

          case TextureType.CUBE:
            {
              gpuTexture.glTarget = gl.TEXTURE_CUBE_MAP;

              var _maxSize2 = Math.max(w, h);

              if (_maxSize2 > device.capabilities.maxCubeMapTextureSize) {
                errorID(9100, _maxSize2, device.capabilities.maxTextureSize);
              }

              var _glTexUnit2 = device.stateCache.glTexUnits[device.stateCache.texUnit];

              if (_glTexUnit2.glTexture !== gpuTexture.glTexture) {
                gl.bindTexture(gl.TEXTURE_CUBE_MAP, gpuTexture.glTexture);
                _glTexUnit2.glTexture = gpuTexture.glTexture;
              }

              if (FormatInfos[gpuTexture.format].isCompressed) {
                for (var f = 0; f < 6; ++f) {
                  w = gpuTexture.width;
                  h = gpuTexture.height;

                  for (var _i5 = 0; _i5 < gpuTexture.mipLevel; ++_i5) {
                    var _imgSize2 = FormatSize(gpuTexture.format, w, h, 1);

                    var _view2 = new Uint8Array(_imgSize2);

                    gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, _i5, gpuTexture.glInternalFmt, w, h, 0, _view2);
                    w = Math.max(1, w >> 1);
                    h = Math.max(1, h >> 1);
                  }
                }
              } else {
                for (var _f2 = 0; _f2 < 6; ++_f2) {
                  w = gpuTexture.width;
                  h = gpuTexture.height;

                  for (var _i6 = 0; _i6 < gpuTexture.mipLevel; ++_i6) {
                    gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + _f2, _i6, gpuTexture.glInternalFmt, w, h, 0, gpuTexture.glFormat, gpuTexture.glType, null);
                    w = Math.max(1, w >> 1);
                    h = Math.max(1, h >> 1);
                  }
                }
              }

              break;
            }

          default:
            {
              console.error('Unsupported TextureType, create texture failed.');
              gpuTexture.type = TextureType.TEX2D;
              gpuTexture.glTarget = gl.TEXTURE_2D;
            }
        }
      }
      function WebGLCmdFuncCreateFramebuffer(device, gpuFramebuffer) {
        for (var i = 0; i < gpuFramebuffer.gpuColorTextures.length; ++i) {
          var tex = gpuFramebuffer.gpuColorTextures[i];

          if (tex.isSwapchainTexture) {
            gpuFramebuffer.isOffscreen = false;
            return;
          }
        }

        var gl = device.gl;
        var attachments = [];
        var glFramebuffer = gl.createFramebuffer();

        if (glFramebuffer) {
          gpuFramebuffer.glFramebuffer = glFramebuffer;

          if (device.stateCache.glFramebuffer !== gpuFramebuffer.glFramebuffer) {
            gl.bindFramebuffer(gl.FRAMEBUFFER, gpuFramebuffer.glFramebuffer);
          }

          for (var _i7 = 0; _i7 < gpuFramebuffer.gpuColorTextures.length; ++_i7) {
            var gpuTexture = gpuFramebuffer.gpuColorTextures[_i7];

            if (gpuTexture) {
              if (gpuTexture.glTexture) {
                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + _i7, gpuTexture.glTarget, gpuTexture.glTexture, 0);
              } else {
                gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + _i7, gl.RENDERBUFFER, gpuTexture.glRenderbuffer);
              }

              attachments.push(gl.COLOR_ATTACHMENT0 + _i7);
              gpuFramebuffer.width = Math.min(gpuFramebuffer.width, gpuTexture.width);
              gpuFramebuffer.height = Math.min(gpuFramebuffer.height, gpuTexture.height);
            }
          }

          var dst = gpuFramebuffer.gpuDepthStencilTexture;

          if (dst) {
            var glAttachment = FormatInfos[dst.format].hasStencil ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;

            if (dst.glTexture) {
              gl.framebufferTexture2D(gl.FRAMEBUFFER, glAttachment, dst.glTarget, dst.glTexture, 0);
            } else {
              gl.framebufferRenderbuffer(gl.FRAMEBUFFER, glAttachment, gl.RENDERBUFFER, dst.glRenderbuffer);
            }

            gpuFramebuffer.width = Math.min(gpuFramebuffer.width, dst.width);
            gpuFramebuffer.height = Math.min(gpuFramebuffer.height, dst.height);
          }

          if (device.extensions.WEBGL_draw_buffers) {
            device.extensions.WEBGL_draw_buffers.drawBuffersWEBGL(attachments);
          }

          var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);

          if (status !== gl.FRAMEBUFFER_COMPLETE) {
            switch (status) {
              case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
                {
                  console.error('glCheckFramebufferStatus() - FRAMEBUFFER_INCOMPLETE_ATTACHMENT');
                  break;
                }

              case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
                {
                  console.error('glCheckFramebufferStatus() - FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT');
                  break;
                }

              case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
                {
                  console.error('glCheckFramebufferStatus() - FRAMEBUFFER_INCOMPLETE_DIMENSIONS');
                  break;
                }

              case gl.FRAMEBUFFER_UNSUPPORTED:
                {
                  console.error('glCheckFramebufferStatus() - FRAMEBUFFER_UNSUPPORTED');
                  break;
                }
            }
          }

          if (device.stateCache.glFramebuffer !== gpuFramebuffer.glFramebuffer) {
            gl.bindFramebuffer(gl.FRAMEBUFFER, device.stateCache.glFramebuffer);
          }
        }
      }
      function WebGLCmdFuncDestroyFramebuffer(device, gpuFramebuffer) {
        if (gpuFramebuffer.glFramebuffer) {
          device.gl.deleteFramebuffer(gpuFramebuffer.glFramebuffer);

          if (device.stateCache.glFramebuffer === gpuFramebuffer.glFramebuffer) {
            device.gl.bindFramebuffer(device.gl.FRAMEBUFFER, null);
            device.stateCache.glFramebuffer = null;
          }

          gpuFramebuffer.glFramebuffer = null;
        }
      }
      function WebGLCmdFuncCreateShader(device, gpuShader) {
        var gl = device.gl;

        var _loop = function _loop(k) {
          var gpuStage = gpuShader.gpuStages[k];
          var glShaderType = 0;
          var shaderTypeStr = '';
          var lineNumber = 1;

          switch (gpuStage.type) {
            case ShaderStageFlagBit.VERTEX:
              {
                shaderTypeStr = 'VertexShader';
                glShaderType = gl.VERTEX_SHADER;
                break;
              }

            case ShaderStageFlagBit.FRAGMENT:
              {
                shaderTypeStr = 'FragmentShader';
                glShaderType = gl.FRAGMENT_SHADER;
                break;
              }

            default:
              {
                console.error('Unsupported ShaderType.');
                return {
                  v: void 0
                };
              }
          }

          var glShader = gl.createShader(glShaderType);

          if (glShader) {
            gpuStage.glShader = glShader;
            gl.shaderSource(gpuStage.glShader, gpuStage.source);
            gl.compileShader(gpuStage.glShader);

            if (!gl.getShaderParameter(gpuStage.glShader, gl.COMPILE_STATUS)) {
              console.error(shaderTypeStr + " in '" + gpuShader.name + "' compilation failed.");
              console.error('Shader source dump:', gpuStage.source.replace(/^|\n/g, function () {
                return "\n" + lineNumber++ + " ";
              }));
              console.error(gl.getShaderInfoLog(gpuStage.glShader));

              for (var l = 0; l < gpuShader.gpuStages.length; l++) {
                var stage = gpuShader.gpuStages[k];

                if (stage.glShader) {
                  gl.deleteShader(stage.glShader);
                  stage.glShader = null;
                }
              }

              return {
                v: void 0
              };
            }
          }
        };

        for (var k = 0; k < gpuShader.gpuStages.length; k++) {
          var _ret = _loop(k);

          if (typeof _ret === "object") return _ret.v;
        }

        var glProgram = gl.createProgram();

        if (!glProgram) {
          return;
        }

        gpuShader.glProgram = glProgram;

        for (var _k = 0; _k < gpuShader.gpuStages.length; _k++) {
          var gpuStage = gpuShader.gpuStages[_k];
          gl.attachShader(gpuShader.glProgram, gpuStage.glShader);
        }

        gl.linkProgram(gpuShader.glProgram);

        if (device.extensions.destroyShadersImmediately) {
          for (var _k2 = 0; _k2 < gpuShader.gpuStages.length; _k2++) {
            var _gpuStage = gpuShader.gpuStages[_k2];

            if (_gpuStage.glShader) {
              gl.detachShader(gpuShader.glProgram, _gpuStage.glShader);
              gl.deleteShader(_gpuStage.glShader);
              _gpuStage.glShader = null;
            }
          }
        }

        if (gl.getProgramParameter(gpuShader.glProgram, gl.LINK_STATUS)) {
          debug("Shader '" + gpuShader.name + "' compilation succeeded.");
        } else {
          console.error("Failed to link shader '" + gpuShader.name + "'.");
          console.error(gl.getProgramInfoLog(gpuShader.glProgram));
          return;
        }

        var activeAttribCount = gl.getProgramParameter(gpuShader.glProgram, gl.ACTIVE_ATTRIBUTES);
        gpuShader.glInputs = new Array(activeAttribCount);

        for (var i = 0; i < activeAttribCount; ++i) {
          var attribInfo = gl.getActiveAttrib(gpuShader.glProgram, i);

          if (attribInfo) {
            var varName = void 0;
            var nameOffset = attribInfo.name.indexOf('[');

            if (nameOffset !== -1) {
              varName = attribInfo.name.substr(0, nameOffset);
            } else {
              varName = attribInfo.name;
            }

            var glLoc = gl.getAttribLocation(gpuShader.glProgram, varName);
            var type = WebGLTypeToGFXType(attribInfo.type, gl);
            var stride = WebGLGetTypeSize(attribInfo.type, gl);
            gpuShader.glInputs[i] = {
              binding: glLoc,
              name: varName,
              type: type,
              stride: stride,
              count: attribInfo.size,
              size: stride * attribInfo.size,
              glType: attribInfo.type,
              glLoc: glLoc
            };
          }
        }

        if (gpuShader.blocks.length > 0) {
          gpuShader.glBlocks = new Array(gpuShader.blocks.length);

          for (var _i8 = 0; _i8 < gpuShader.blocks.length; ++_i8) {
            var block = gpuShader.blocks[_i8];
            var glBlock = {
              set: block.set,
              binding: block.binding,
              name: block.name,
              size: 0,
              glUniforms: new Array(block.members.length),
              glActiveUniforms: []
            };
            gpuShader.glBlocks[_i8] = glBlock;

            for (var u = 0; u < block.members.length; ++u) {
              var uniform = block.members[u];
              var glType = GFXTypeToWebGLType(uniform.type, gl);

              var _stride = WebGLGetTypeSize(glType, gl);

              var size = _stride * uniform.count;
              glBlock.glUniforms[u] = {
                binding: -1,
                name: uniform.name,
                type: uniform.type,
                stride: _stride,
                count: uniform.count,
                size: size,
                offset: 0,
                glType: glType,
                glLoc: null,
                array: null
              };
            }
          }
        }

        for (var _i9 = 0; _i9 < gpuShader.subpassInputs.length; ++_i9) {
          var subpassInput = gpuShader.subpassInputs[_i9];
          gpuShader.samplerTextures.push(new UniformSamplerTexture(subpassInput.set, subpassInput.binding, subpassInput.name, Type.SAMPLER2D, subpassInput.count));
        }

        if (gpuShader.samplerTextures.length > 0) {
          gpuShader.glSamplerTextures = new Array(gpuShader.samplerTextures.length);

          for (var _i10 = 0; _i10 < gpuShader.samplerTextures.length; ++_i10) {
            var sampler = gpuShader.samplerTextures[_i10];
            gpuShader.glSamplerTextures[_i10] = {
              set: sampler.set,
              binding: sampler.binding,
              name: sampler.name,
              type: sampler.type,
              count: sampler.count,
              units: [],
              glUnits: null,
              glType: GFXTypeToWebGLType(sampler.type, gl),
              glLoc: null
            };
          }
        }

        var activeUniformCount = gl.getProgramParameter(gpuShader.glProgram, gl.ACTIVE_UNIFORMS);

        for (var _i11 = 0; _i11 < activeUniformCount; ++_i11) {
          var uniformInfo = gl.getActiveUniform(gpuShader.glProgram, _i11);

          if (uniformInfo) {
            var isSampler = uniformInfo.type === gl.SAMPLER_2D || uniformInfo.type === gl.SAMPLER_CUBE;

            if (!isSampler) {
              var _glLoc = gl.getUniformLocation(gpuShader.glProgram, uniformInfo.name);

              if (device.extensions.isLocationActive(_glLoc)) {
                var _varName = void 0;

                var _nameOffset = uniformInfo.name.indexOf('[');

                if (_nameOffset !== -1) {
                  _varName = uniformInfo.name.substr(0, _nameOffset);
                } else {
                  _varName = uniformInfo.name;
                }

                for (var j = 0; j < gpuShader.glBlocks.length; j++) {
                  var _glBlock = gpuShader.glBlocks[j];

                  for (var _k3 = 0; _k3 < _glBlock.glUniforms.length; _k3++) {
                    var glUniform = _glBlock.glUniforms[_k3];

                    if (glUniform.name === _varName) {
                      glUniform.glLoc = _glLoc;
                      glUniform.count = uniformInfo.size;
                      glUniform.size = glUniform.stride * glUniform.count;
                      glUniform.array = new (GFXTypeToTypedArrayCtor(glUniform.type))(glUniform.size / 4);

                      _glBlock.glActiveUniforms.push(glUniform);

                      break;
                    }
                  }
                }
              }
            }
          }
        }

        for (var _j = 0; _j < gpuShader.glBlocks.length; _j++) {
          var _glBlock2 = gpuShader.glBlocks[_j];

          for (var _k4 = 0; _k4 < _glBlock2.glUniforms.length; _k4++) {
            var _glUniform = _glBlock2.glUniforms[_k4];
            _glUniform.offset = _glBlock2.size / 4;
            _glBlock2.size += _glUniform.size;
          }
        }

        var glActiveSamplers = [];
        var glActiveSamplerLocations = [];
        var bindingMappings = device.bindingMappings;
        var texUnitCacheMap = device.stateCache.texUnitCacheMap;

        if (!(legacyCC.rendering && legacyCC.rendering.enableEffectImport)) {
          var flexibleSetBaseOffset = 0;

          for (var _i12 = 0; _i12 < gpuShader.blocks.length; ++_i12) {
            if (gpuShader.blocks[_i12].set === bindingMappings.flexibleSet) {
              flexibleSetBaseOffset++;
            }
          }

          var arrayOffset = 0;

          for (var _i13 = 0; _i13 < gpuShader.samplerTextures.length; ++_i13) {
            var _sampler = gpuShader.samplerTextures[_i13];

            var _glLoc2 = gl.getUniformLocation(gpuShader.glProgram, _sampler.name);

            if (device.extensions.isLocationActive(_glLoc2)) {
              glActiveSamplers.push(gpuShader.glSamplerTextures[_i13]);
              glActiveSamplerLocations.push(_glLoc2);
            }

            if (texUnitCacheMap[_sampler.name] === undefined) {
              var binding = _sampler.binding + bindingMappings.samplerTextureOffsets[_sampler.set] + arrayOffset;

              if (_sampler.set === bindingMappings.flexibleSet) {
                binding -= flexibleSetBaseOffset;
              }

              texUnitCacheMap[_sampler.name] = binding % device.capabilities.maxTextureUnits;
              arrayOffset += _sampler.count - 1;
            }
          }
        } else {
          for (var _i14 = 0; _i14 < gpuShader.samplerTextures.length; ++_i14) {
            var _sampler2 = gpuShader.samplerTextures[_i14];

            var _glLoc3 = gl.getUniformLocation(gpuShader.glProgram, _sampler2.name);

            if (device.extensions.isLocationActive(_glLoc3)) {
              glActiveSamplers.push(gpuShader.glSamplerTextures[_i14]);
              glActiveSamplerLocations.push(_glLoc3);
            }

            if (texUnitCacheMap[_sampler2.name] === undefined) {
              texUnitCacheMap[_sampler2.name] = _sampler2.flattened;
            }
          }
        }

        if (glActiveSamplers.length) {
          var usedTexUnits = [];

          for (var _i15 = 0; _i15 < glActiveSamplers.length; ++_i15) {
            var glSampler = glActiveSamplers[_i15];
            var cachedUnit = texUnitCacheMap[glSampler.name];

            if (cachedUnit !== undefined) {
              glSampler.glLoc = glActiveSamplerLocations[_i15];

              for (var t = 0; t < glSampler.count; ++t) {
                while (usedTexUnits[cachedUnit]) {
                  cachedUnit = (cachedUnit + 1) % device.capabilities.maxTextureUnits;
                }

                glSampler.units.push(cachedUnit);
                usedTexUnits[cachedUnit] = true;
              }
            }
          }

          var unitIdx = 0;

          for (var _i16 = 0; _i16 < glActiveSamplers.length; ++_i16) {
            var _glSampler = glActiveSamplers[_i16];

            if (!device.extensions.isLocationActive(_glSampler.glLoc)) {
              _glSampler.glLoc = glActiveSamplerLocations[_i16];

              for (var _t = 0; _t < _glSampler.count; ++_t) {
                while (usedTexUnits[unitIdx]) {
                  unitIdx = (unitIdx + 1) % device.capabilities.maxTextureUnits;
                }

                if (texUnitCacheMap[_glSampler.name] === undefined) {
                  texUnitCacheMap[_glSampler.name] = unitIdx;
                }

                _glSampler.units.push(unitIdx);

                usedTexUnits[unitIdx] = true;
              }
            }
          }

          if (device.stateCache.glProgram !== gpuShader.glProgram) {
            gl.useProgram(gpuShader.glProgram);
          }

          for (var _i17 = 0; _i17 < glActiveSamplers.length; _i17++) {
            var _glSampler2 = glActiveSamplers[_i17];
            _glSampler2.glUnits = new Int32Array(_glSampler2.units);
            gl.uniform1iv(_glSampler2.glLoc, _glSampler2.glUnits);
          }

          if (device.stateCache.glProgram !== gpuShader.glProgram) {
            gl.useProgram(device.stateCache.glProgram);
          }
        }

        for (var _i18 = 0; _i18 < gpuShader.glBlocks.length;) {
          if (gpuShader.glBlocks[_i18].glActiveUniforms.length) {
            _i18++;
          } else {
            gpuShader.glBlocks[_i18] = gpuShader.glBlocks[gpuShader.glBlocks.length - 1];
            gpuShader.glBlocks.length--;
          }
        }

        gpuShader.glSamplerTextures = glActiveSamplers;
      }
      function WebGLCmdFuncDestroyShader(device, gpuShader) {
        if (gpuShader.glProgram) {
          var gl = device.gl;

          if (!device.extensions.destroyShadersImmediately) {
            for (var k = 0; k < gpuShader.gpuStages.length; k++) {
              var gpuStage = gpuShader.gpuStages[k];

              if (gpuStage.glShader) {
                gl.detachShader(gpuShader.glProgram, gpuStage.glShader);
                gl.deleteShader(gpuStage.glShader);
                gpuStage.glShader = null;
              }
            }
          }

          gl.deleteProgram(gpuShader.glProgram);

          if (device.stateCache.glProgram === gpuShader.glProgram) {
            device.gl.useProgram(null);
            device.stateCache.glProgram = null;
          }

          gpuShader.glProgram = null;
        }
      }
      function WebGLCmdFuncCreateInputAssember(device, gpuInputAssembler) {
        var gl = device.gl;
        gpuInputAssembler.glAttribs = new Array(gpuInputAssembler.attributes.length);
        var offsets = [0, 0, 0, 0, 0, 0, 0, 0];

        for (var i = 0; i < gpuInputAssembler.attributes.length; ++i) {
          var attrib = gpuInputAssembler.attributes[i];
          var stream = attrib.stream !== undefined ? attrib.stream : 0;
          var gpuBuffer = gpuInputAssembler.gpuVertexBuffers[stream];
          var glType = GFXFormatToWebGLType(attrib.format, gl);
          var size = FormatInfos[attrib.format].size;
          gpuInputAssembler.glAttribs[i] = {
            name: attrib.name,
            glBuffer: gpuBuffer.glBuffer,
            glType: glType,
            size: size,
            count: FormatInfos[attrib.format].count,
            stride: gpuBuffer.stride,
            componentCount: WebGLGetComponentCount(glType, gl),
            isNormalized: attrib.isNormalized !== undefined ? attrib.isNormalized : false,
            isInstanced: attrib.isInstanced !== undefined ? attrib.isInstanced : false,
            offset: offsets[stream]
          };
          offsets[stream] += size;
        }
      }
      function WebGLCmdFuncDestroyInputAssembler(device, gpuInputAssembler) {
        var it = gpuInputAssembler.glVAOs.values();
        var res = it.next();
        var OES_vertex_array_object = device.extensions.OES_vertex_array_object;
        var glVAO = device.stateCache.glVAO;

        while (!res.done) {
          OES_vertex_array_object.deleteVertexArrayOES(res.value);

          if (glVAO === res.value) {
            OES_vertex_array_object.bindVertexArrayOES(null);
            glVAO = null;
          }

          res = it.next();
        }

        device.stateCache.glVAO = glVAO;
        gpuInputAssembler.glVAOs.clear();
      }
      var gfxStateCache = {
        gpuPipelineState: null,
        gpuInputAssembler: null,
        glPrimitive: 0
      };
      var realRenderArea = new Rect$1();
      function WebGLCmdFuncBeginRenderPass(device, gpuRenderPass, gpuFramebuffer, renderArea, clearColors, clearDepth, clearStencil) {
        var gl = device.gl;
        var cache = device.stateCache;
        var clears = 0;

        if (gpuFramebuffer) {
          realRenderArea.x = renderArea.x << gpuFramebuffer.lodLevel;
          realRenderArea.y = renderArea.y << gpuFramebuffer.lodLevel;
          realRenderArea.width = renderArea.width << gpuFramebuffer.lodLevel;
          realRenderArea.height = renderArea.height << gpuFramebuffer.lodLevel;
        }

        if (gpuFramebuffer && gpuRenderPass) {
          if (cache.glFramebuffer !== gpuFramebuffer.glFramebuffer) {
            gl.bindFramebuffer(gl.FRAMEBUFFER, gpuFramebuffer.glFramebuffer);
            cache.glFramebuffer = gpuFramebuffer.glFramebuffer;
          }

          if (cache.viewport.left !== realRenderArea.x || cache.viewport.top !== realRenderArea.y || cache.viewport.width !== realRenderArea.width || cache.viewport.height !== realRenderArea.height) {
            gl.viewport(realRenderArea.x, realRenderArea.y, realRenderArea.width, realRenderArea.height);
            cache.viewport.left = realRenderArea.x;
            cache.viewport.top = realRenderArea.y;
            cache.viewport.width = realRenderArea.width;
            cache.viewport.height = realRenderArea.height;
          }

          if (cache.scissorRect.x !== realRenderArea.x || cache.scissorRect.y !== realRenderArea.y || cache.scissorRect.width !== realRenderArea.width || cache.scissorRect.height !== realRenderArea.height) {
            gl.scissor(realRenderArea.x, realRenderArea.y, realRenderArea.width, realRenderArea.height);
            cache.scissorRect.x = realRenderArea.x;
            cache.scissorRect.y = realRenderArea.y;
            cache.scissorRect.width = realRenderArea.width;
            cache.scissorRect.height = realRenderArea.height;
          }

          var clearCount = clearColors.length;

          if (!device.extensions.WEBGL_draw_buffers) {
            clearCount = 1;
          }

          for (var j = 0; j < clearCount; ++j) {
            var colorAttachment = gpuRenderPass.colorAttachments[j];

            if (colorAttachment.format !== Format.UNKNOWN) {
              switch (colorAttachment.loadOp) {
                case LoadOp.LOAD:
                  break;

                case LoadOp.CLEAR:
                  {
                    if (cache.bs.targets[0].blendColorMask !== ColorMask.ALL) {
                      gl.colorMask(true, true, true, true);
                    }

                    var clearColor = clearColors[0];
                    gl.clearColor(clearColor.x, clearColor.y, clearColor.z, clearColor.w);
                    clears |= gl.COLOR_BUFFER_BIT;
                    break;
                  }

                case LoadOp.DISCARD:
                  {
                    break;
                  }
              }
            }
          }

          if (gpuRenderPass.depthStencilAttachment) {
            if (gpuRenderPass.depthStencilAttachment.format !== Format.UNKNOWN) {
              switch (gpuRenderPass.depthStencilAttachment.depthLoadOp) {
                case LoadOp.LOAD:
                  break;

                case LoadOp.CLEAR:
                  {
                    if (!cache.dss.depthWrite) {
                      gl.depthMask(true);
                    }

                    gl.clearDepth(clearDepth);
                    clears |= gl.DEPTH_BUFFER_BIT;
                    break;
                  }

                case LoadOp.DISCARD:
                  {
                    break;
                  }
              }

              if (FormatInfos[gpuRenderPass.depthStencilAttachment.format].hasStencil) {
                switch (gpuRenderPass.depthStencilAttachment.stencilLoadOp) {
                  case LoadOp.LOAD:
                    break;

                  case LoadOp.CLEAR:
                    {
                      if (!cache.dss.stencilWriteMaskFront) {
                        gl.stencilMaskSeparate(gl.FRONT, 0xffff);
                      }

                      if (!cache.dss.stencilWriteMaskBack) {
                        gl.stencilMaskSeparate(gl.BACK, 0xffff);
                      }

                      gl.clearStencil(clearStencil);
                      clears |= gl.STENCIL_BUFFER_BIT;
                      break;
                    }

                  case LoadOp.DISCARD:
                    {
                      break;
                    }
                }
              }
            }
          }

          if (clears) {
            gl.clear(clears);
          }

          if (clears & gl.COLOR_BUFFER_BIT) {
            var colorMask = cache.bs.targets[0].blendColorMask;

            if (colorMask !== ColorMask.ALL) {
              var r = (colorMask & ColorMask.R) !== ColorMask.NONE;
              var g = (colorMask & ColorMask.G) !== ColorMask.NONE;
              var b = (colorMask & ColorMask.B) !== ColorMask.NONE;
              var a = (colorMask & ColorMask.A) !== ColorMask.NONE;
              gl.colorMask(r, g, b, a);
            }
          }

          if (clears & gl.DEPTH_BUFFER_BIT && !cache.dss.depthWrite) {
            gl.depthMask(false);
          }

          if (clears & gl.STENCIL_BUFFER_BIT) {
            if (!cache.dss.stencilWriteMaskFront) {
              gl.stencilMaskSeparate(gl.FRONT, 0);
            }

            if (!cache.dss.stencilWriteMaskBack) {
              gl.stencilMaskSeparate(gl.BACK, 0);
            }
          }
        }
      }
      function WebGLCmdFuncBindStates(device, gpuPipelineState, gpuInputAssembler, gpuDescriptorSets, dynamicOffsets, dynamicStates) {
        var gl = device.gl;
        var cache = device.stateCache;
        var gpuShader = gpuPipelineState && gpuPipelineState.gpuShader;
        var isShaderChanged = false;
        var glWrapS;
        var glWrapT;
        var glMinFilter;

        if (gpuPipelineState && gfxStateCache.gpuPipelineState !== gpuPipelineState) {
          gfxStateCache.gpuPipelineState = gpuPipelineState;
          gfxStateCache.glPrimitive = gpuPipelineState.glPrimitive;

          if (gpuPipelineState.gpuShader) {
            var glProgram = gpuPipelineState.gpuShader.glProgram;

            if (cache.glProgram !== glProgram) {
              gl.useProgram(glProgram);
              cache.glProgram = glProgram;
              isShaderChanged = true;
            }
          }

          var rs = gpuPipelineState.rs;

          if (rs) {
            if (cache.rs.cullMode !== rs.cullMode) {
              switch (rs.cullMode) {
                case CullMode.NONE:
                  {
                    gl.disable(gl.CULL_FACE);
                    break;
                  }

                case CullMode.FRONT:
                  {
                    gl.enable(gl.CULL_FACE);
                    gl.cullFace(gl.FRONT);
                    break;
                  }

                case CullMode.BACK:
                  {
                    gl.enable(gl.CULL_FACE);
                    gl.cullFace(gl.BACK);
                    break;
                  }
              }

              cache.rs.cullMode = rs.cullMode;
            }

            var isFrontFaceCCW = rs.isFrontFaceCCW;

            if (cache.rs.isFrontFaceCCW !== isFrontFaceCCW) {
              gl.frontFace(isFrontFaceCCW ? gl.CCW : gl.CW);
              cache.rs.isFrontFaceCCW = isFrontFaceCCW;
            }

            if (cache.rs.depthBias !== rs.depthBias || cache.rs.depthBiasSlop !== rs.depthBiasSlop) {
              gl.polygonOffset(rs.depthBias, rs.depthBiasSlop);
              cache.rs.depthBias = rs.depthBias;
              cache.rs.depthBiasSlop = rs.depthBiasSlop;
            }

            if (cache.rs.lineWidth !== rs.lineWidth) {
              gl.lineWidth(rs.lineWidth);
              cache.rs.lineWidth = rs.lineWidth;
            }
          }

          var dss = gpuPipelineState.dss;

          if (dss) {
            if (cache.dss.depthTest !== dss.depthTest) {
              if (dss.depthTest) {
                gl.enable(gl.DEPTH_TEST);
              } else {
                gl.disable(gl.DEPTH_TEST);
              }

              cache.dss.depthTest = dss.depthTest;
            }

            if (cache.dss.depthWrite !== dss.depthWrite) {
              gl.depthMask(dss.depthWrite);
              cache.dss.depthWrite = dss.depthWrite;
            }

            if (cache.dss.depthFunc !== dss.depthFunc) {
              gl.depthFunc(WebGLCmpFuncs[dss.depthFunc]);
              cache.dss.depthFunc = dss.depthFunc;
            }

            if (cache.dss.stencilTestFront !== dss.stencilTestFront || cache.dss.stencilTestBack !== dss.stencilTestBack) {
              if (dss.stencilTestFront || dss.stencilTestBack) {
                gl.enable(gl.STENCIL_TEST);
              } else {
                gl.disable(gl.STENCIL_TEST);
              }

              cache.dss.stencilTestFront = dss.stencilTestFront;
              cache.dss.stencilTestBack = dss.stencilTestBack;
            }

            if (cache.dss.stencilFuncFront !== dss.stencilFuncFront || cache.dss.stencilRefFront !== dss.stencilRefFront || cache.dss.stencilReadMaskFront !== dss.stencilReadMaskFront) {
              gl.stencilFuncSeparate(gl.FRONT, WebGLCmpFuncs[dss.stencilFuncFront], dss.stencilRefFront, dss.stencilReadMaskFront);
              cache.dss.stencilFuncFront = dss.stencilFuncFront;
              cache.dss.stencilRefFront = dss.stencilRefFront;
              cache.dss.stencilReadMaskFront = dss.stencilReadMaskFront;
            }

            if (cache.dss.stencilFailOpFront !== dss.stencilFailOpFront || cache.dss.stencilZFailOpFront !== dss.stencilZFailOpFront || cache.dss.stencilPassOpFront !== dss.stencilPassOpFront) {
              gl.stencilOpSeparate(gl.FRONT, WebGLStencilOps[dss.stencilFailOpFront], WebGLStencilOps[dss.stencilZFailOpFront], WebGLStencilOps[dss.stencilPassOpFront]);
              cache.dss.stencilFailOpFront = dss.stencilFailOpFront;
              cache.dss.stencilZFailOpFront = dss.stencilZFailOpFront;
              cache.dss.stencilPassOpFront = dss.stencilPassOpFront;
            }

            if (cache.dss.stencilWriteMaskFront !== dss.stencilWriteMaskFront) {
              gl.stencilMaskSeparate(gl.FRONT, dss.stencilWriteMaskFront);
              cache.dss.stencilWriteMaskFront = dss.stencilWriteMaskFront;
            }

            if (cache.dss.stencilFuncBack !== dss.stencilFuncBack || cache.dss.stencilRefBack !== dss.stencilRefBack || cache.dss.stencilReadMaskBack !== dss.stencilReadMaskBack) {
              gl.stencilFuncSeparate(gl.BACK, WebGLCmpFuncs[dss.stencilFuncBack], dss.stencilRefBack, dss.stencilReadMaskBack);
              cache.dss.stencilFuncBack = dss.stencilFuncBack;
              cache.dss.stencilRefBack = dss.stencilRefBack;
              cache.dss.stencilReadMaskBack = dss.stencilReadMaskBack;
            }

            if (cache.dss.stencilFailOpBack !== dss.stencilFailOpBack || cache.dss.stencilZFailOpBack !== dss.stencilZFailOpBack || cache.dss.stencilPassOpBack !== dss.stencilPassOpBack) {
              gl.stencilOpSeparate(gl.BACK, WebGLStencilOps[dss.stencilFailOpBack], WebGLStencilOps[dss.stencilZFailOpBack], WebGLStencilOps[dss.stencilPassOpBack]);
              cache.dss.stencilFailOpBack = dss.stencilFailOpBack;
              cache.dss.stencilZFailOpBack = dss.stencilZFailOpBack;
              cache.dss.stencilPassOpBack = dss.stencilPassOpBack;
            }

            if (cache.dss.stencilWriteMaskBack !== dss.stencilWriteMaskBack) {
              gl.stencilMaskSeparate(gl.BACK, dss.stencilWriteMaskBack);
              cache.dss.stencilWriteMaskBack = dss.stencilWriteMaskBack;
            }
          }

          var bs = gpuPipelineState.bs;

          if (bs) {
            if (cache.bs.isA2C !== bs.isA2C) {
              if (bs.isA2C) {
                gl.enable(gl.SAMPLE_ALPHA_TO_COVERAGE);
              } else {
                gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
              }

              cache.bs.isA2C = bs.isA2C;
            }

            if (cache.bs.blendColor.x !== bs.blendColor.x || cache.bs.blendColor.y !== bs.blendColor.y || cache.bs.blendColor.z !== bs.blendColor.z || cache.bs.blendColor.w !== bs.blendColor.w) {
              gl.blendColor(bs.blendColor.x, bs.blendColor.y, bs.blendColor.z, bs.blendColor.w);
              cache.bs.blendColor.x = bs.blendColor.x;
              cache.bs.blendColor.y = bs.blendColor.y;
              cache.bs.blendColor.z = bs.blendColor.z;
              cache.bs.blendColor.w = bs.blendColor.w;
            }

            var target0 = bs.targets[0];
            var target0Cache = cache.bs.targets[0];

            if (target0Cache.blend !== target0.blend) {
              if (target0.blend) {
                gl.enable(gl.BLEND);
              } else {
                gl.disable(gl.BLEND);
              }

              target0Cache.blend = target0.blend;
            }

            if (target0Cache.blendEq !== target0.blendEq || target0Cache.blendAlphaEq !== target0.blendAlphaEq) {
              gl.blendEquationSeparate(WebGLBlendOps[target0.blendEq], WebGLBlendOps[target0.blendAlphaEq]);
              target0Cache.blendEq = target0.blendEq;
              target0Cache.blendAlphaEq = target0.blendAlphaEq;
            }

            if (target0Cache.blendSrc !== target0.blendSrc || target0Cache.blendDst !== target0.blendDst || target0Cache.blendSrcAlpha !== target0.blendSrcAlpha || target0Cache.blendDstAlpha !== target0.blendDstAlpha) {
              gl.blendFuncSeparate(WebGLBlendFactors[target0.blendSrc], WebGLBlendFactors[target0.blendDst], WebGLBlendFactors[target0.blendSrcAlpha], WebGLBlendFactors[target0.blendDstAlpha]);
              target0Cache.blendSrc = target0.blendSrc;
              target0Cache.blendDst = target0.blendDst;
              target0Cache.blendSrcAlpha = target0.blendSrcAlpha;
              target0Cache.blendDstAlpha = target0.blendDstAlpha;
            }

            if (target0Cache.blendColorMask !== target0.blendColorMask) {
              gl.colorMask((target0.blendColorMask & ColorMask.R) !== ColorMask.NONE, (target0.blendColorMask & ColorMask.G) !== ColorMask.NONE, (target0.blendColorMask & ColorMask.B) !== ColorMask.NONE, (target0.blendColorMask & ColorMask.A) !== ColorMask.NONE);
              target0Cache.blendColorMask = target0.blendColorMask;
            }
          }
        }

        if (gpuPipelineState && gpuPipelineState.gpuPipelineLayout && gpuShader) {
          var blockLen = gpuShader.glBlocks.length;
          var dynamicOffsetIndices = gpuPipelineState.gpuPipelineLayout.dynamicOffsetIndices;

          for (var j = 0; j < blockLen; j++) {
            var glBlock = gpuShader.glBlocks[j];
            var gpuDescriptorSet = gpuDescriptorSets[glBlock.set];
            var descriptorIdx = gpuDescriptorSet && gpuDescriptorSet.descriptorIndices[glBlock.binding];
            var gpuDescriptor = descriptorIdx >= 0 && gpuDescriptorSet.gpuDescriptors[descriptorIdx];
            var vf32 = null;
            var offset = 0;

            if (gpuDescriptor && gpuDescriptor.gpuBuffer) {
              var gpuBuffer = gpuDescriptor.gpuBuffer;
              var dynamicOffsetIndexSet = dynamicOffsetIndices[glBlock.set];
              var dynamicOffsetIndex = dynamicOffsetIndexSet && dynamicOffsetIndexSet[glBlock.binding];

              if (dynamicOffsetIndex >= 0) {
                offset = dynamicOffsets[dynamicOffsetIndex];
              }

              if ('vf32' in gpuBuffer) {
                vf32 = gpuBuffer.vf32;
              } else {
                offset += gpuBuffer.offset;
                vf32 = gpuBuffer.gpuBuffer.vf32;
              }

              offset >>= 2;
            }

            if (!vf32) {
              error("Buffer binding '" + glBlock.name + "' at set " + glBlock.set + " binding " + glBlock.binding + " is not bounded");
              continue;
            }

            var uniformLen = glBlock.glActiveUniforms.length;

            for (var l = 0; l < uniformLen; l++) {
              var glUniform = glBlock.glActiveUniforms[l];

              switch (glUniform.glType) {
                case gl.BOOL:
                case gl.INT:
                  {
                    for (var u = 0; u < glUniform.array.length; ++u) {
                      var idx = glUniform.offset + offset + u;

                      if (vf32[idx] !== glUniform.array[u]) {
                        for (var n = u, m = idx; n < glUniform.array.length; ++n, ++m) {
                          glUniform.array[n] = vf32[m];
                        }

                        gl.uniform1iv(glUniform.glLoc, glUniform.array);
                        break;
                      }
                    }

                    break;
                  }

                case gl.BOOL_VEC2:
                case gl.INT_VEC2:
                  {
                    for (var _u = 0; _u < glUniform.array.length; ++_u) {
                      var _idx = glUniform.offset + offset + _u;

                      if (vf32[_idx] !== glUniform.array[_u]) {
                        for (var _n = _u, _m = _idx; _n < glUniform.array.length; ++_n, ++_m) {
                          glUniform.array[_n] = vf32[_m];
                        }

                        gl.uniform2iv(glUniform.glLoc, glUniform.array);
                        break;
                      }
                    }

                    break;
                  }

                case gl.BOOL_VEC3:
                case gl.INT_VEC3:
                  {
                    for (var _u2 = 0; _u2 < glUniform.array.length; ++_u2) {
                      var _idx2 = glUniform.offset + offset + _u2;

                      if (vf32[_idx2] !== glUniform.array[_u2]) {
                        for (var _n2 = _u2, _m2 = _idx2; _n2 < glUniform.array.length; ++_n2, ++_m2) {
                          glUniform.array[_n2] = vf32[_m2];
                        }

                        gl.uniform3iv(glUniform.glLoc, glUniform.array);
                        break;
                      }
                    }

                    break;
                  }

                case gl.BOOL_VEC4:
                case gl.INT_VEC4:
                  {
                    for (var _u3 = 0; _u3 < glUniform.array.length; ++_u3) {
                      var _idx3 = glUniform.offset + offset + _u3;

                      if (vf32[_idx3] !== glUniform.array[_u3]) {
                        for (var _n3 = _u3, _m3 = _idx3; _n3 < glUniform.array.length; ++_n3, ++_m3) {
                          glUniform.array[_n3] = vf32[_m3];
                        }

                        gl.uniform4iv(glUniform.glLoc, glUniform.array);
                        break;
                      }
                    }

                    break;
                  }

                case gl.FLOAT:
                  {
                    for (var _u4 = 0; _u4 < glUniform.array.length; ++_u4) {
                      var _idx4 = glUniform.offset + offset + _u4;

                      if (vf32[_idx4] !== glUniform.array[_u4]) {
                        for (var _n4 = _u4, _m4 = _idx4; _n4 < glUniform.array.length; ++_n4, ++_m4) {
                          glUniform.array[_n4] = vf32[_m4];
                        }

                        gl.uniform1fv(glUniform.glLoc, glUniform.array);
                        break;
                      }
                    }

                    break;
                  }

                case gl.FLOAT_VEC2:
                  {
                    for (var _u5 = 0; _u5 < glUniform.array.length; ++_u5) {
                      var _idx5 = glUniform.offset + offset + _u5;

                      if (vf32[_idx5] !== glUniform.array[_u5]) {
                        for (var _n5 = _u5, _m5 = _idx5; _n5 < glUniform.array.length; ++_n5, ++_m5) {
                          glUniform.array[_n5] = vf32[_m5];
                        }

                        gl.uniform2fv(glUniform.glLoc, glUniform.array);
                        break;
                      }
                    }

                    break;
                  }

                case gl.FLOAT_VEC3:
                  {
                    for (var _u6 = 0; _u6 < glUniform.array.length; ++_u6) {
                      var _idx6 = glUniform.offset + offset + _u6;

                      if (vf32[_idx6] !== glUniform.array[_u6]) {
                        for (var _n6 = _u6, _m6 = _idx6; _n6 < glUniform.array.length; ++_n6, ++_m6) {
                          glUniform.array[_n6] = vf32[_m6];
                        }

                        gl.uniform3fv(glUniform.glLoc, glUniform.array);
                        break;
                      }
                    }

                    break;
                  }

                case gl.FLOAT_VEC4:
                  {
                    for (var _u7 = 0; _u7 < glUniform.array.length; ++_u7) {
                      var _idx7 = glUniform.offset + offset + _u7;

                      if (vf32[_idx7] !== glUniform.array[_u7]) {
                        for (var _n7 = _u7, _m7 = _idx7; _n7 < glUniform.array.length; ++_n7, ++_m7) {
                          glUniform.array[_n7] = vf32[_m7];
                        }

                        gl.uniform4fv(glUniform.glLoc, glUniform.array);
                        break;
                      }
                    }

                    break;
                  }

                case gl.FLOAT_MAT2:
                  {
                    for (var _u8 = 0; _u8 < glUniform.array.length; ++_u8) {
                      var _idx8 = glUniform.offset + offset + _u8;

                      if (vf32[_idx8] !== glUniform.array[_u8]) {
                        for (var _n8 = _u8, _m8 = _idx8; _n8 < glUniform.array.length; ++_n8, ++_m8) {
                          glUniform.array[_n8] = vf32[_m8];
                        }

                        gl.uniformMatrix2fv(glUniform.glLoc, false, glUniform.array);
                        break;
                      }
                    }

                    break;
                  }

                case gl.FLOAT_MAT3:
                  {
                    for (var _u9 = 0; _u9 < glUniform.array.length; ++_u9) {
                      var _idx9 = glUniform.offset + offset + _u9;

                      if (vf32[_idx9] !== glUniform.array[_u9]) {
                        for (var _n9 = _u9, _m9 = _idx9; _n9 < glUniform.array.length; ++_n9, ++_m9) {
                          glUniform.array[_n9] = vf32[_m9];
                        }

                        gl.uniformMatrix3fv(glUniform.glLoc, false, glUniform.array);
                        break;
                      }
                    }

                    break;
                  }

                case gl.FLOAT_MAT4:
                  {
                    for (var _u10 = 0; _u10 < glUniform.array.length; ++_u10) {
                      var _idx10 = glUniform.offset + offset + _u10;

                      if (vf32[_idx10] !== glUniform.array[_u10]) {
                        for (var _n10 = _u10, _m10 = _idx10; _n10 < glUniform.array.length; ++_n10, ++_m10) {
                          glUniform.array[_n10] = vf32[_m10];
                        }

                        gl.uniformMatrix4fv(glUniform.glLoc, false, glUniform.array);
                        break;
                      }
                    }

                    break;
                  }
              }
            }

            continue;
          }

          var samplerLen = gpuShader.glSamplerTextures.length;

          for (var i = 0; i < samplerLen; i++) {
            var glSampler = gpuShader.glSamplerTextures[i];
            var _gpuDescriptorSet = gpuDescriptorSets[glSampler.set];
            var descriptorIndex = _gpuDescriptorSet && _gpuDescriptorSet.descriptorIndices[glSampler.binding];

            var _gpuDescriptor = descriptorIndex >= 0 && _gpuDescriptorSet.gpuDescriptors[descriptorIndex];

            var texUnitLen = glSampler.units.length;

            for (var _l = 0; _l < texUnitLen; _l++) {
              var texUnit = glSampler.units[_l];

              if (!_gpuDescriptor || !_gpuDescriptor.gpuSampler) {
                error("Sampler binding '" + glSampler.name + "' at set " + glSampler.set + " binding " + glSampler.binding + " index " + _l + " is not bounded");
                continue;
              }

              if (_gpuDescriptor.gpuTexture && _gpuDescriptor.gpuTexture.size > 0) {
                var _gpuDescriptor2 = _gpuDescriptor,
                    gpuTexture = _gpuDescriptor2.gpuTexture;
                var glTexUnit = cache.glTexUnits[texUnit];

                if (glTexUnit.glTexture !== gpuTexture.glTexture) {
                  if (cache.texUnit !== texUnit) {
                    gl.activeTexture(gl.TEXTURE0 + texUnit);
                    cache.texUnit = texUnit;
                  }

                  if (gpuTexture.glTexture) {
                    gl.bindTexture(gpuTexture.glTarget, gpuTexture.glTexture);
                  } else {
                    gl.bindTexture(gpuTexture.glTarget, device.nullTex2D.gpuTexture.glTexture);
                  }

                  glTexUnit.glTexture = gpuTexture.glTexture;
                }

                var _gpuDescriptor3 = _gpuDescriptor,
                    gpuSampler = _gpuDescriptor3.gpuSampler;

                if (gpuTexture.isPowerOf2) {
                  glWrapS = gpuSampler.glWrapS;
                  glWrapT = gpuSampler.glWrapT;
                } else {
                  glWrapS = gl.CLAMP_TO_EDGE;
                  glWrapT = gl.CLAMP_TO_EDGE;
                }

                if (gpuTexture.isPowerOf2) {
                  if (gpuTexture.mipLevel <= 1 && (gpuSampler.glMinFilter === gl.LINEAR_MIPMAP_NEAREST || gpuSampler.glMinFilter === gl.LINEAR_MIPMAP_LINEAR)) {
                    glMinFilter = gl.LINEAR;
                  } else {
                    glMinFilter = gpuSampler.glMinFilter;
                  }
                } else if (gpuSampler.glMinFilter === gl.LINEAR || gpuSampler.glMinFilter === gl.LINEAR_MIPMAP_NEAREST || gpuSampler.glMinFilter === gl.LINEAR_MIPMAP_LINEAR) {
                  glMinFilter = gl.LINEAR;
                } else {
                  glMinFilter = gl.NEAREST;
                }

                if (gpuTexture.glWrapS !== glWrapS) {
                  if (cache.texUnit !== texUnit) {
                    gl.activeTexture(gl.TEXTURE0 + texUnit);
                    cache.texUnit = texUnit;
                  }

                  gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_WRAP_S, glWrapS);
                  gpuTexture.glWrapS = glWrapS;
                }

                if (gpuTexture.glWrapT !== glWrapT) {
                  if (cache.texUnit !== texUnit) {
                    gl.activeTexture(gl.TEXTURE0 + texUnit);
                    cache.texUnit = texUnit;
                  }

                  gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_WRAP_T, glWrapT);
                  gpuTexture.glWrapT = glWrapT;
                }

                if (gpuTexture.glMinFilter !== glMinFilter) {
                  if (cache.texUnit !== texUnit) {
                    gl.activeTexture(gl.TEXTURE0 + texUnit);
                    cache.texUnit = texUnit;
                  }

                  gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_MIN_FILTER, glMinFilter);
                  gpuTexture.glMinFilter = glMinFilter;
                }

                if (gpuTexture.glMagFilter !== gpuSampler.glMagFilter) {
                  if (cache.texUnit !== texUnit) {
                    gl.activeTexture(gl.TEXTURE0 + texUnit);
                    cache.texUnit = texUnit;
                  }

                  gl.texParameteri(gpuTexture.glTarget, gl.TEXTURE_MAG_FILTER, gpuSampler.glMagFilter);
                  gpuTexture.glMagFilter = gpuSampler.glMagFilter;
                }
              }

              _gpuDescriptor = _gpuDescriptorSet.gpuDescriptors[++descriptorIndex];
            }
          }
        }

        if (gpuInputAssembler && gpuShader && (isShaderChanged || gfxStateCache.gpuInputAssembler !== gpuInputAssembler)) {
          gfxStateCache.gpuInputAssembler = gpuInputAssembler;
          var ia = device.extensions.ANGLE_instanced_arrays;

          if (device.extensions.useVAO) {
            var vao = device.extensions.OES_vertex_array_object;
            var glVAO = gpuInputAssembler.glVAOs.get(gpuShader.glProgram);

            if (!glVAO) {
              glVAO = vao.createVertexArrayOES();
              gpuInputAssembler.glVAOs.set(gpuShader.glProgram, glVAO);
              vao.bindVertexArrayOES(glVAO);
              gl.bindBuffer(gl.ARRAY_BUFFER, null);
              gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
              cache.glArrayBuffer = null;
              cache.glElementArrayBuffer = null;
              var glAttrib;
              var inputLen = gpuShader.glInputs.length;

              for (var _j2 = 0; _j2 < inputLen; _j2++) {
                var glInput = gpuShader.glInputs[_j2];
                glAttrib = null;
                var attribLen = gpuInputAssembler.glAttribs.length;

                for (var k = 0; k < attribLen; k++) {
                  var attrib = gpuInputAssembler.glAttribs[k];

                  if (attrib.name === glInput.name) {
                    glAttrib = attrib;
                    break;
                  }
                }

                if (glAttrib) {
                  if (cache.glArrayBuffer !== glAttrib.glBuffer) {
                    gl.bindBuffer(gl.ARRAY_BUFFER, glAttrib.glBuffer);
                    cache.glArrayBuffer = glAttrib.glBuffer;
                  }

                  for (var c = 0; c < glAttrib.componentCount; ++c) {
                    var glLoc = glInput.glLoc + c;
                    var attribOffset = glAttrib.offset + glAttrib.size * c;
                    gl.enableVertexAttribArray(glLoc);
                    cache.glCurrentAttribLocs[glLoc] = true;
                    gl.vertexAttribPointer(glLoc, glAttrib.count, glAttrib.glType, glAttrib.isNormalized, glAttrib.stride, attribOffset);

                    if (ia) {
                      ia.vertexAttribDivisorANGLE(glLoc, glAttrib.isInstanced ? 1 : 0);
                    }
                  }
                }
              }

              var _gpuBuffer = gpuInputAssembler.gpuIndexBuffer;

              if (_gpuBuffer) {
                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, _gpuBuffer.glBuffer);
              }

              vao.bindVertexArrayOES(null);
              gl.bindBuffer(gl.ARRAY_BUFFER, null);
              gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
              cache.glArrayBuffer = null;
              cache.glElementArrayBuffer = null;
            }

            if (cache.glVAO !== glVAO) {
              vao.bindVertexArrayOES(glVAO);
              cache.glVAO = glVAO;
            }
          } else {
            for (var a = 0; a < device.capabilities.maxVertexAttributes; ++a) {
              cache.glCurrentAttribLocs[a] = false;
            }

            var _inputLen = gpuShader.glInputs.length;

            for (var _j3 = 0; _j3 < _inputLen; _j3++) {
              var _glInput = gpuShader.glInputs[_j3];
              var _glAttrib = null;
              var _attribLen = gpuInputAssembler.glAttribs.length;

              for (var _k5 = 0; _k5 < _attribLen; _k5++) {
                var _attrib = gpuInputAssembler.glAttribs[_k5];

                if (_attrib.name === _glInput.name) {
                  _glAttrib = _attrib;
                  break;
                }
              }

              if (_glAttrib) {
                if (cache.glArrayBuffer !== _glAttrib.glBuffer) {
                  gl.bindBuffer(gl.ARRAY_BUFFER, _glAttrib.glBuffer);
                  cache.glArrayBuffer = _glAttrib.glBuffer;
                }

                for (var _c = 0; _c < _glAttrib.componentCount; ++_c) {
                  var _glLoc4 = _glInput.glLoc + _c;

                  var _attribOffset = _glAttrib.offset + _glAttrib.size * _c;

                  if (!cache.glEnabledAttribLocs[_glLoc4] && _glLoc4 >= 0) {
                    gl.enableVertexAttribArray(_glLoc4);
                    cache.glEnabledAttribLocs[_glLoc4] = true;
                  }

                  cache.glCurrentAttribLocs[_glLoc4] = true;
                  gl.vertexAttribPointer(_glLoc4, _glAttrib.count, _glAttrib.glType, _glAttrib.isNormalized, _glAttrib.stride, _attribOffset);

                  if (ia) {
                    ia.vertexAttribDivisorANGLE(_glLoc4, _glAttrib.isInstanced ? 1 : 0);
                  }
                }
              }
            }

            var _gpuBuffer2 = gpuInputAssembler.gpuIndexBuffer;

            if (_gpuBuffer2) {
              if (cache.glElementArrayBuffer !== _gpuBuffer2.glBuffer) {
                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, _gpuBuffer2.glBuffer);
                cache.glElementArrayBuffer = _gpuBuffer2.glBuffer;
              }
            }

            for (var _a = 0; _a < device.capabilities.maxVertexAttributes; ++_a) {
              if (cache.glEnabledAttribLocs[_a] !== cache.glCurrentAttribLocs[_a]) {
                gl.disableVertexAttribArray(_a);
                cache.glEnabledAttribLocs[_a] = false;
              }
            }
          }
        }

        if (gpuPipelineState && gpuPipelineState.dynamicStates.length) {
          var dsLen = gpuPipelineState.dynamicStates.length;

          for (var _j4 = 0; _j4 < dsLen; _j4++) {
            var dynamicState = gpuPipelineState.dynamicStates[_j4];

            switch (dynamicState) {
              case DynamicStateFlagBit.LINE_WIDTH:
                {
                  if (cache.rs.lineWidth !== dynamicStates.lineWidth) {
                    gl.lineWidth(dynamicStates.lineWidth);
                    cache.rs.lineWidth = dynamicStates.lineWidth;
                  }

                  break;
                }

              case DynamicStateFlagBit.DEPTH_BIAS:
                {
                  if (cache.rs.depthBias !== dynamicStates.depthBiasConstant || cache.rs.depthBiasSlop !== dynamicStates.depthBiasSlope) {
                    gl.polygonOffset(dynamicStates.depthBiasConstant, dynamicStates.depthBiasSlope);
                    cache.rs.depthBias = dynamicStates.depthBiasConstant;
                    cache.rs.depthBiasSlop = dynamicStates.depthBiasSlope;
                  }

                  break;
                }

              case DynamicStateFlagBit.BLEND_CONSTANTS:
                {
                  var blendConstant = dynamicStates.blendConstant;

                  if (cache.bs.blendColor.x !== blendConstant.x || cache.bs.blendColor.y !== blendConstant.y || cache.bs.blendColor.z !== blendConstant.z || cache.bs.blendColor.w !== blendConstant.w) {
                    gl.blendColor(blendConstant.x, blendConstant.y, blendConstant.z, blendConstant.w);
                    cache.bs.blendColor.copy(blendConstant);
                  }

                  break;
                }

              case DynamicStateFlagBit.STENCIL_WRITE_MASK:
                {
                  var front = dynamicStates.stencilStatesFront;
                  var back = dynamicStates.stencilStatesBack;

                  if (cache.dss.stencilWriteMaskFront !== front.writeMask) {
                    gl.stencilMaskSeparate(gl.FRONT, front.writeMask);
                    cache.dss.stencilWriteMaskFront = front.writeMask;
                  }

                  if (cache.dss.stencilWriteMaskBack !== back.writeMask) {
                    gl.stencilMaskSeparate(gl.BACK, back.writeMask);
                    cache.dss.stencilWriteMaskBack = back.writeMask;
                  }

                  break;
                }

              case DynamicStateFlagBit.STENCIL_COMPARE_MASK:
                {
                  var _front = dynamicStates.stencilStatesFront;
                  var _back = dynamicStates.stencilStatesBack;

                  if (cache.dss.stencilRefFront !== _front.reference || cache.dss.stencilReadMaskFront !== _front.compareMask) {
                    gl.stencilFuncSeparate(gl.FRONT, WebGLCmpFuncs[cache.dss.stencilFuncFront], _front.reference, _front.compareMask);
                    cache.dss.stencilRefFront = _front.reference;
                    cache.dss.stencilReadMaskFront = _front.compareMask;
                  }

                  if (cache.dss.stencilRefBack !== _back.reference || cache.dss.stencilReadMaskBack !== _back.compareMask) {
                    gl.stencilFuncSeparate(gl.BACK, WebGLCmpFuncs[cache.dss.stencilFuncBack], _back.reference, _back.compareMask);
                    cache.dss.stencilRefBack = _back.reference;
                    cache.dss.stencilReadMaskBack = _back.compareMask;
                  }

                  break;
                }
            }
          }
        }
      }
      function WebGLCmdFuncDraw(device, drawInfo) {
        var gl = device.gl;
        var _device$extensions = device.extensions,
            ia = _device$extensions.ANGLE_instanced_arrays,
            md = _device$extensions.WEBGL_multi_draw;
        var gpuInputAssembler = gfxStateCache.gpuInputAssembler,
            glPrimitive = gfxStateCache.glPrimitive;

        if (gpuInputAssembler) {
          var indexBuffer = gpuInputAssembler.gpuIndexBuffer;

          if (gpuInputAssembler.gpuIndirectBuffer) {
            var indirects = gpuInputAssembler.gpuIndirectBuffer.indirects;

            if (indirects.drawByIndex) {
              for (var j = 0; j < indirects.drawCount; j++) {
                indirects.byteOffsets[j] = indirects.offsets[j] * indexBuffer.stride;
              }

              if (md) {
                if (indirects.instancedDraw) {
                  md.multiDrawElementsInstancedWEBGL(glPrimitive, indirects.counts, 0, gpuInputAssembler.glIndexType, indirects.byteOffsets, 0, indirects.instances, 0, indirects.drawCount);
                } else {
                  md.multiDrawElementsWEBGL(glPrimitive, indirects.counts, 0, gpuInputAssembler.glIndexType, indirects.byteOffsets, 0, indirects.drawCount);
                }
              } else {
                for (var _j5 = 0; _j5 < indirects.drawCount; _j5++) {
                  if (indirects.instances[_j5] && ia) {
                    ia.drawElementsInstancedANGLE(glPrimitive, indirects.counts[_j5], gpuInputAssembler.glIndexType, indirects.byteOffsets[_j5], indirects.instances[_j5]);
                  } else {
                    gl.drawElements(glPrimitive, indirects.counts[_j5], gpuInputAssembler.glIndexType, indirects.byteOffsets[_j5]);
                  }
                }
              }
            } else if (md) {
              if (indirects.instancedDraw) {
                md.multiDrawArraysInstancedWEBGL(glPrimitive, indirects.offsets, 0, indirects.counts, 0, indirects.instances, 0, indirects.drawCount);
              } else {
                md.multiDrawArraysWEBGL(glPrimitive, indirects.offsets, 0, indirects.counts, 0, indirects.drawCount);
              }
            } else {
              for (var _j6 = 0; _j6 < indirects.drawCount; _j6++) {
                if (indirects.instances[_j6] && ia) {
                  ia.drawArraysInstancedANGLE(glPrimitive, indirects.offsets[_j6], indirects.counts[_j6], indirects.instances[_j6]);
                } else {
                  gl.drawArrays(glPrimitive, indirects.offsets[_j6], indirects.counts[_j6]);
                }
              }
            }
          } else if (drawInfo.instanceCount && ia) {
            if (indexBuffer) {
              if (drawInfo.indexCount > 0) {
                var offset = drawInfo.firstIndex * indexBuffer.stride;
                ia.drawElementsInstancedANGLE(glPrimitive, drawInfo.indexCount, gpuInputAssembler.glIndexType, offset, drawInfo.instanceCount);
              }
            } else if (drawInfo.vertexCount > 0) {
              ia.drawArraysInstancedANGLE(glPrimitive, drawInfo.firstVertex, drawInfo.vertexCount, drawInfo.instanceCount);
            }
          } else if (indexBuffer) {
            if (drawInfo.indexCount > 0) {
              var _offset = drawInfo.firstIndex * indexBuffer.stride;

              gl.drawElements(glPrimitive, drawInfo.indexCount, gpuInputAssembler.glIndexType, _offset);
            }
          } else if (drawInfo.vertexCount > 0) {
            gl.drawArrays(glPrimitive, drawInfo.firstVertex, drawInfo.vertexCount);
          }
        }
      }
      var cmdIds = new Array(WebGLCmd.COUNT);
      function WebGLCmdFuncExecuteCmds(device, cmdPackage) {
        cmdIds.fill(0);

        for (var i = 0; i < cmdPackage.cmds.length; ++i) {
          var cmd = cmdPackage.cmds.array[i];
          var cmdId = cmdIds[cmd]++;

          switch (cmd) {
            case WebGLCmd.BEGIN_RENDER_PASS:
              {
                var cmd0 = cmdPackage.beginRenderPassCmds.array[cmdId];
                WebGLCmdFuncBeginRenderPass(device, cmd0.gpuRenderPass, cmd0.gpuFramebuffer, cmd0.renderArea, cmd0.clearColors, cmd0.clearDepth, cmd0.clearStencil);
                break;
              }

            case WebGLCmd.BIND_STATES:
              {
                var cmd2 = cmdPackage.bindStatesCmds.array[cmdId];
                WebGLCmdFuncBindStates(device, cmd2.gpuPipelineState, cmd2.gpuInputAssembler, cmd2.gpuDescriptorSets, cmd2.dynamicOffsets, cmd2.dynamicStates);
                break;
              }

            case WebGLCmd.DRAW:
              {
                var cmd3 = cmdPackage.drawCmds.array[cmdId];
                WebGLCmdFuncDraw(device, cmd3.drawInfo);
                break;
              }

            case WebGLCmd.UPDATE_BUFFER:
              {
                var cmd4 = cmdPackage.updateBufferCmds.array[cmdId];
                WebGLCmdFuncUpdateBuffer(device, cmd4.gpuBuffer, cmd4.buffer, cmd4.offset, cmd4.size);
                break;
              }

            case WebGLCmd.COPY_BUFFER_TO_TEXTURE:
              {
                var cmd5 = cmdPackage.copyBufferToTextureCmds.array[cmdId];
                WebGLCmdFuncCopyBuffersToTexture(device, cmd5.buffers, cmd5.gpuTexture, cmd5.regions);
                break;
              }

            case WebGLCmd.BLIT_TEXTURE:
              {
                var cmd6 = cmdPackage.blitTextureCmds.array[cmdId];
                WebGLCmdFuncBlitTexture(device, cmd6.srcTexture, cmd6.dstTexture, cmd6.regions, cmd6.filter);
                break;
              }
          }
        }
      }
      function WebGLCmdFuncCopyTexImagesToTexture(device, texImages, gpuTexture, regions) {
        var gl = device.gl;
        var glTexUnit = device.stateCache.glTexUnits[device.stateCache.texUnit];

        if (glTexUnit.glTexture !== gpuTexture.glTexture) {
          gl.bindTexture(gpuTexture.glTarget, gpuTexture.glTexture);
          glTexUnit.glTexture = gpuTexture.glTexture;
        }

        var n = 0;
        var f = 0;

        switch (gpuTexture.glTarget) {
          case gl.TEXTURE_2D:
            {
              for (var i = 0; i < regions.length; i++) {
                var region = regions[i];
                gl.texSubImage2D(gl.TEXTURE_2D, region.texSubres.mipLevel, region.texOffset.x, region.texOffset.y, gpuTexture.glFormat, gpuTexture.glType, texImages[n++]);
              }

              break;
            }

          case gl.TEXTURE_CUBE_MAP:
            {
              for (var _i19 = 0; _i19 < regions.length; _i19++) {
                var _region = regions[_i19];
                var fcount = _region.texSubres.baseArrayLayer + _region.texSubres.layerCount;

                for (f = _region.texSubres.baseArrayLayer; f < fcount; ++f) {
                  gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, _region.texSubres.mipLevel, _region.texOffset.x, _region.texOffset.y, gpuTexture.glFormat, gpuTexture.glType, texImages[n++]);
                }
              }

              break;
            }

          default:
            {
              console.error('Unsupported GL texture type, copy buffer to texture failed.');
            }
        }

        if (gpuTexture.flags & TextureFlagBit.GEN_MIPMAP && gpuTexture.isPowerOf2) {
          gl.generateMipmap(gpuTexture.glTarget);
        }
      }
      var stagingBuffer = new Uint8Array(1);

      function pixelBufferPick(buffer, format, offset, stride, extent) {
        var blockHeight = formatAlignment(format).height;
        var bufferSize = FormatSize(format, extent.width, extent.height, extent.depth);
        var rowStride = FormatSize(format, stride.width, 1, 1);
        var sliceStride = FormatSize(format, stride.width, stride.height, 1);
        var chunkSize = FormatSize(format, extent.width, 1, 1);
        var ArrayBufferCtor = getTypedArrayConstructor(FormatInfos[format]);

        if (stagingBuffer.byteLength < bufferSize) {
          stagingBuffer = new Uint8Array(bufferSize);
        }

        var destOffset = 0;
        var bufferOffset = offset;

        for (var i = 0; i < extent.depth; i++) {
          bufferOffset = offset + sliceStride * i;

          for (var j = 0; j < extent.height; j += blockHeight) {
            stagingBuffer.subarray(destOffset, destOffset + chunkSize).set(new Uint8Array(buffer.buffer, buffer.byteOffset + bufferOffset, chunkSize));
            destOffset += chunkSize;
            bufferOffset += rowStride;
          }
        }

        return new ArrayBufferCtor(stagingBuffer.buffer);
      }

      function WebGLCmdFuncCopyBuffersToTexture(device, buffers, gpuTexture, regions) {
        var gl = device.gl;
        var glTexUnit = device.stateCache.glTexUnits[device.stateCache.texUnit];

        if (glTexUnit.glTexture !== gpuTexture.glTexture) {
          gl.bindTexture(gpuTexture.glTarget, gpuTexture.glTexture);
          glTexUnit.glTexture = gpuTexture.glTexture;
        }

        var n = 0;
        var f = 0;
        var fmtInfo = FormatInfos[gpuTexture.format];
        var ArrayBufferCtor = getTypedArrayConstructor(fmtInfo);
        var isCompressed = fmtInfo.isCompressed;
        var blockSize = formatAlignment(gpuTexture.format);
        var extent = new Extent();
        var offset = new Offset();
        var stride = new Extent();

        switch (gpuTexture.glTarget) {
          case gl.TEXTURE_2D:
            {
              for (var i = 0; i < regions.length; i++) {
                var region = regions[i];
                var mipLevel = region.texSubres.mipLevel;
                offset.x = region.texOffset.x === 0 ? 0 : alignTo(region.texOffset.x, blockSize.width);
                offset.y = region.texOffset.y === 0 ? 0 : alignTo(region.texOffset.y, blockSize.height);
                extent.width = region.texExtent.width < blockSize.width ? region.texExtent.width : alignTo(region.texExtent.width, blockSize.width);
                extent.height = region.texExtent.height < blockSize.height ? region.texExtent.width : alignTo(region.texExtent.height, blockSize.height);
                stride.width = region.buffStride > 0 ? region.buffStride : extent.width;
                stride.height = region.buffTexHeight > 0 ? region.buffTexHeight : extent.height;
                var destWidth = region.texExtent.width + offset.x === gpuTexture.width >> mipLevel ? region.texExtent.width : extent.width;
                var destHeight = region.texExtent.height + offset.y === gpuTexture.height >> mipLevel ? region.texExtent.height : extent.height;
                var pixels = void 0;
                var buffer = buffers[n++];

                if (stride.width === extent.width && stride.height === extent.height) {
                  pixels = new ArrayBufferCtor(buffer.buffer, buffer.byteOffset + region.buffOffset);
                } else {
                  pixels = pixelBufferPick(buffer, gpuTexture.format, region.buffOffset, stride, extent);
                }

                if (!isCompressed) {
                  gl.texSubImage2D(gl.TEXTURE_2D, mipLevel, offset.x, offset.y, destWidth, destHeight, gpuTexture.glFormat, gpuTexture.glType, pixels);
                } else if (gpuTexture.glInternalFmt !== WebGLEXT.COMPRESSED_RGB_ETC1_WEBGL && !device.extensions.noCompressedTexSubImage2D) {
                  gl.compressedTexSubImage2D(gl.TEXTURE_2D, mipLevel, offset.x, offset.y, destWidth, destHeight, gpuTexture.glFormat, pixels);
                } else {
                  gl.compressedTexImage2D(gl.TEXTURE_2D, mipLevel, gpuTexture.glInternalFmt, destWidth, destHeight, 0, pixels);
                }
              }

              break;
            }

          case gl.TEXTURE_CUBE_MAP:
            {
              for (var _i20 = 0; _i20 < regions.length; _i20++) {
                var _region2 = regions[_i20];
                var _mipLevel = _region2.texSubres.mipLevel;
                offset.x = _region2.texOffset.x === 0 ? 0 : alignTo(_region2.texOffset.x, blockSize.width);
                offset.y = _region2.texOffset.y === 0 ? 0 : alignTo(_region2.texOffset.y, blockSize.height);
                extent.width = _region2.texExtent.width < blockSize.width ? _region2.texExtent.width : alignTo(_region2.texExtent.width, blockSize.width);
                extent.height = _region2.texExtent.height < blockSize.height ? _region2.texExtent.width : alignTo(_region2.texExtent.height, blockSize.height);
                stride.width = _region2.buffStride > 0 ? _region2.buffStride : extent.width;
                stride.height = _region2.buffTexHeight > 0 ? _region2.buffTexHeight : extent.height;

                var _destWidth = _region2.texExtent.width + offset.x === gpuTexture.width >> _mipLevel ? _region2.texExtent.width : extent.width;

                var _destHeight = _region2.texExtent.height + offset.y === gpuTexture.height >> _mipLevel ? _region2.texExtent.height : extent.height;

                var fcount = _region2.texSubres.baseArrayLayer + _region2.texSubres.layerCount;

                for (f = _region2.texSubres.baseArrayLayer; f < fcount; ++f) {
                  var _pixels = void 0;

                  var _buffer = buffers[n++];

                  if (stride.width === extent.width && stride.height === extent.height) {
                    _pixels = new ArrayBufferCtor(_buffer.buffer, _buffer.byteOffset + _region2.buffOffset);
                  } else {
                    _pixels = pixelBufferPick(_buffer, gpuTexture.format, _region2.buffOffset, stride, extent);
                  }

                  if (!isCompressed) {
                    gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, _mipLevel, offset.x, offset.y, _destWidth, _destHeight, gpuTexture.glFormat, gpuTexture.glType, _pixels);
                  } else if (gpuTexture.glInternalFmt !== WebGLEXT.COMPRESSED_RGB_ETC1_WEBGL && !device.extensions.noCompressedTexSubImage2D) {
                    gl.compressedTexSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, _mipLevel, offset.x, offset.y, _destWidth, _destHeight, gpuTexture.glFormat, _pixels);
                  } else {
                    gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, _mipLevel, gpuTexture.glInternalFmt, _destWidth, _destHeight, 0, _pixels);
                  }
                }
              }

              break;
            }

          default:
            {
              console.error('Unsupported GL texture type, copy buffer to texture failed.');
            }
        }

        if (gpuTexture.flags & TextureFlagBit.GEN_MIPMAP) {
          gl.generateMipmap(gpuTexture.glTarget);
        }
      }
      function WebGLCmdFuncCopyTextureToBuffers(device, gpuTexture, buffers, regions) {
        var gl = device.gl;
        var cache = device.stateCache;
        var framebuffer = gl.createFramebuffer();
        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
        var x = 0;
        var y = 0;
        var w = 1;
        var h = 1;

        switch (gpuTexture.glTarget) {
          case gl.TEXTURE_2D:
            {
              for (var k = 0; k < regions.length; k++) {
                var region = regions[k];
                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gpuTexture.glTarget, gpuTexture.glTexture, region.texSubres.mipLevel);
                x = region.texOffset.x;
                y = region.texOffset.y;
                w = region.texExtent.width;
                h = region.texExtent.height;
                gl.readPixels(x, y, w, h, gpuTexture.glFormat, gpuTexture.glType, buffers[k]);
              }

              break;
            }

          default:
            {
              console.error('Unsupported GL texture type, copy texture to buffers failed.');
            }
        }

        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        cache.glFramebuffer = null;
        gl.deleteFramebuffer(framebuffer);
      }
      function WebGLCmdFuncBlitTexture(device, srcTexture, dstTexture, regions, filter) {
        device.blitManager.draw(srcTexture, dstTexture, regions, filter);
      }

      var WebGLIndirectDrawInfos = function () {
        function WebGLIndirectDrawInfos() {
          this.counts = void 0;
          this.offsets = void 0;
          this.instances = void 0;
          this.drawCount = 0;
          this.drawByIndex = false;
          this.instancedDraw = false;
          this.byteOffsets = void 0;
          this._capacity = 4;
          this.counts = new Int32Array(this._capacity);
          this.offsets = new Int32Array(this._capacity);
          this.instances = new Int32Array(this._capacity);
          this.byteOffsets = new Int32Array(this._capacity);
        }

        var _proto = WebGLIndirectDrawInfos.prototype;

        _proto.clearDraws = function clearDraws() {
          this.drawCount = 0;
          this.drawByIndex = false;
          this.instancedDraw = false;
        };

        _proto.setDrawInfo = function setDrawInfo(idx, info) {
          this._ensureCapacity(idx);

          this.drawByIndex = info.indexCount > 0;
          this.instancedDraw = !!info.instanceCount;
          this.drawCount = Math.max(idx + 1, this.drawCount);

          if (this.drawByIndex) {
            this.counts[idx] = info.indexCount;
            this.offsets[idx] = info.firstIndex;
          } else {
            this.counts[idx] = info.vertexCount;
            this.offsets[idx] = info.firstVertex;
          }

          this.instances[idx] = Math.max(1, info.instanceCount);
        };

        _proto._ensureCapacity = function _ensureCapacity(target) {
          if (this._capacity > target) return;
          this._capacity = nextPow2$1(target);
          var counts = new Int32Array(this._capacity);
          var offsets = new Int32Array(this._capacity);
          var instances = new Int32Array(this._capacity);
          this.byteOffsets = new Int32Array(this._capacity);
          counts.set(this.counts);
          offsets.set(this.offsets);
          instances.set(this.instances);
          this.counts = counts;
          this.offsets = offsets;
          this.instances = instances;
        };

        return WebGLIndirectDrawInfos;
      }();
      var IWebGLBlitManager = function () {
        function IWebGLBlitManager() {
          this._gpuShader = null;
          this._gpuDescriptorSetLayout = null;
          this._gpuPipelineLayout = null;
          this._gpuPipelineState = null;
          this._gpuVertexBuffer = null;
          this._gpuInputAssembler = null;
          this._gpuPointSampler = null;
          this._gpuLinearSampler = null;
          this._gpuDescriptorSet = null;
          this._gpuUniformBuffer = null;
          this._drawInfo = null;
          this._glFramebuffer = null;
          this._uniformBuffer = null;
          var gl = WebGLDeviceManager.instance.gl;
          var device = WebGLDeviceManager.instance;
          var samplerOffset = device.bindingMappingInfo.maxBlockCounts[0];
          this._gpuShader = {
            name: 'Blit Pass',
            blocks: [new UniformBlock(0, 0, "BlitParams", [new Uniform("tilingOffsetSrc", Type.FLOAT4, 1), new Uniform("tilingOffsetDst", Type.FLOAT4, 1)], 1)],
            samplerTextures: [new UniformSamplerTexture(0, samplerOffset, 'textureSrc', Type.SAMPLER2D, 1)],
            subpassInputs: [],
            gpuStages: [{
              type: ShaderStageFlagBit.VERTEX,
              source: "\n                    precision mediump float;\n\n                    attribute vec2 a_position;\n                    attribute vec2 a_texCoord;\n            \n                    uniform vec4 tilingOffsetSrc;\n                    uniform vec4 tilingOffsetDst;\n            \n                    varying vec2 v_texCoord;\n            \n                    void main() {\n                        v_texCoord = a_texCoord * tilingOffsetSrc.xy + tilingOffsetSrc.zw;\n                        gl_Position = vec4((a_position + 1.0) * tilingOffsetDst.xy - 1.0 + tilingOffsetDst.zw * 2.0, 0, 1);\n                    }",
              glShader: null
            }, {
              type: ShaderStageFlagBit.FRAGMENT,
              source: "\n                    precision mediump float;\n                    uniform sampler2D textureSrc;\n\n                    varying vec2 v_texCoord;\n                    \n                    void main() {\n                        gl_FragColor = texture2D(textureSrc, v_texCoord);\n                    }",
              glShader: null
            }],
            glProgram: null,
            glInputs: [],
            glUniforms: [],
            glBlocks: [],
            glSamplerTextures: []
          };
          WebGLCmdFuncCreateShader(WebGLDeviceManager.instance, this._gpuShader);
          this._gpuDescriptorSetLayout = {
            bindings: [new DescriptorSetLayoutBinding(0, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.VERTEX), new DescriptorSetLayoutBinding(samplerOffset, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT)],
            dynamicBindings: [],
            descriptorIndices: [],
            descriptorCount: samplerOffset + 1
          };

          for (var i = 0; i < samplerOffset; i++) {
            this._gpuDescriptorSetLayout.descriptorIndices[i] = 0;
          }

          this._gpuDescriptorSetLayout.descriptorIndices.push(1);

          this._gpuPipelineLayout = {
            gpuSetLayouts: [this._gpuDescriptorSetLayout],
            dynamicOffsetCount: 0,
            dynamicOffsetOffsets: [0],
            dynamicOffsetIndices: [[]]
          };
          this._gpuPipelineState = {
            glPrimitive: gl.TRIANGLE_STRIP,
            gpuShader: this._gpuShader,
            gpuPipelineLayout: this._gpuPipelineLayout,
            rs: null,
            dss: new DepthStencilState(false, false),
            bs: null,
            dynamicStates: [],
            gpuRenderPass: null
          };
          this._gpuVertexBuffer = {
            usage: BufferUsageBit.VERTEX,
            memUsage: MemoryUsageBit.DEVICE,
            size: 16 * Float32Array.BYTES_PER_ELEMENT,
            stride: 4 * Float32Array.BYTES_PER_ELEMENT,
            buffer: null,
            vf32: null,
            indirects: new WebGLIndirectDrawInfos(),
            glTarget: 0,
            glBuffer: null
          };
          WebGLCmdFuncCreateBuffer(WebGLDeviceManager.instance, this._gpuVertexBuffer);
          WebGLDeviceManager.instance.memoryStatus.bufferSize += this._gpuVertexBuffer.size;
          var data = new Float32Array([-1.0, -1.0, 0.0, 0.0, 1.0, -1.0, 1.0, 0.0, -1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0]);
          WebGLCmdFuncUpdateBuffer(WebGLDeviceManager.instance, this._gpuVertexBuffer, data, 0, data.length);
          this._gpuInputAssembler = {
            attributes: [new Attribute("a_position", Format.RG32F), new Attribute("a_texCoord", Format.RG32F)],
            gpuVertexBuffers: [this._gpuVertexBuffer],
            gpuIndexBuffer: null,
            gpuIndirectBuffer: null,
            glAttribs: [],
            glIndexType: 0,
            glVAOs: new Map()
          };
          WebGLCmdFuncCreateInputAssember(WebGLDeviceManager.instance, this._gpuInputAssembler);
          this._gpuPointSampler = {
            glMinFilter: 0x2600,
            glMagFilter: 0x2600,
            glWrapS: 0x2901,
            glWrapT: 0x2901,
            glWrapR: 0x2901
          };
          this._gpuLinearSampler = {
            glMinFilter: 0x2601,
            glMagFilter: 0x2601,
            glWrapS: 0x2901,
            glWrapT: 0x2901,
            glWrapR: 0x2901
          };
          this._uniformBuffer = new Float32Array(8);
          this._gpuUniformBuffer = {
            usage: BufferUsageBit.UNIFORM,
            memUsage: MemoryUsageBit.DEVICE,
            size: 8 * Float32Array.BYTES_PER_ELEMENT,
            stride: 8 * Float32Array.BYTES_PER_ELEMENT,
            buffer: this._uniformBuffer,
            vf32: null,
            indirects: new WebGLIndirectDrawInfos(),
            glTarget: 0,
            glBuffer: null
          };
          WebGLCmdFuncCreateBuffer(WebGLDeviceManager.instance, this._gpuUniformBuffer);
          WebGLDeviceManager.instance.memoryStatus.bufferSize += this._gpuUniformBuffer.size;
          this._gpuDescriptorSet = {
            gpuDescriptors: [{
              type: DescriptorType.UNIFORM_BUFFER,
              gpuBuffer: this._gpuUniformBuffer,
              gpuTexture: null,
              gpuSampler: null
            }, {
              type: DescriptorType.SAMPLER_TEXTURE,
              gpuBuffer: null,
              gpuTexture: null,
              gpuSampler: null
            }],
            descriptorIndices: this._gpuDescriptorSetLayout.descriptorIndices
          };
          this._drawInfo = new DrawInfo(4, 0, 0, 0, 0, 0, 0);
          this._glFramebuffer = WebGLDeviceManager.instance.gl.createFramebuffer();
        }

        var _proto2 = IWebGLBlitManager.prototype;

        _proto2.destroy = function destroy() {
          if (this._glFramebuffer) {
            WebGLDeviceManager.instance.gl.deleteFramebuffer(this._glFramebuffer);
            this._glFramebuffer = null;
          }

          if (this._gpuVertexBuffer) {
            WebGLDeviceManager.instance.memoryStatus.bufferSize -= this._gpuVertexBuffer.size;
            WebGLCmdFuncDestroyBuffer(WebGLDeviceManager.instance, this._gpuVertexBuffer);
          }

          if (this._gpuUniformBuffer) {
            WebGLDeviceManager.instance.memoryStatus.bufferSize -= this._gpuUniformBuffer.size;
            WebGLCmdFuncDestroyBuffer(WebGLDeviceManager.instance, this._gpuUniformBuffer);
          }

          if (this._gpuShader) {
            WebGLCmdFuncDestroyShader(WebGLDeviceManager.instance, this._gpuShader);
          }

          if (this._gpuInputAssembler) {
            WebGLCmdFuncDestroyInputAssembler(WebGLDeviceManager.instance, this._gpuInputAssembler);
          }
        };

        _proto2.draw = function draw(gpuTextureSrc, gpuTextureDst, regions, filter) {
          var device = WebGLDeviceManager.instance;
          var gl = device.gl;
          var stateCache = device.stateCache;
          var origFramebuffer = stateCache.glFramebuffer;
          gl.viewport(0, 0, gpuTextureDst.width, gpuTextureDst.height);
          gl.scissor(0, 0, gpuTextureDst.width, gpuTextureDst.height);

          if (!this._uniformBuffer || !this._gpuUniformBuffer || !this._gpuPipelineState || !this._gpuInputAssembler || !this._gpuDescriptorSet || !this._drawInfo) {
            return;
          }

          var descriptor = this._gpuDescriptorSet.gpuDescriptors[1];
          descriptor.gpuTexture = gpuTextureSrc;
          descriptor.gpuSampler = filter === Filter.POINT ? this._gpuPointSampler : this._gpuLinearSampler;
          var formatInfo = FormatInfos[gpuTextureDst.format];
          var attachment = gl.COLOR_ATTACHMENT0;

          if (formatInfo.hasStencil) {
            attachment = gl.DEPTH_STENCIL_ATTACHMENT;
          } else if (formatInfo.hasDepth) {
            attachment = gl.DEPTH_ATTACHMENT;
          }

          var regionIndices = regions.map(function (_, i) {
            return i;
          });
          regionIndices.sort(function (a, b) {
            return regions[a].srcSubres.mipLevel - regions[b].srcSubres.mipLevel;
          });

          if (stateCache.glFramebuffer !== this._glFramebuffer) {
            device.gl.bindFramebuffer(device.gl.FRAMEBUFFER, this._glFramebuffer);
            stateCache.glFramebuffer = this._glFramebuffer;
          }

          var mipLevel = regions[0].dstSubres.mipLevel;

          if (gpuTextureDst.glTexture) {
            gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gpuTextureDst.glTarget, gpuTextureDst.glTexture, mipLevel);
          } else {
            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, attachment, gl.RENDERBUFFER, gpuTextureDst.glRenderbuffer);
          }

          for (var i = 0; i < regionIndices.length; ++i) {
            var region = regions[regionIndices[i]];

            if (gpuTextureSrc.glTexture && mipLevel !== region.srcSubres.mipLevel) {
              mipLevel = region.srcSubres.mipLevel;
              gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gpuTextureDst.glTarget, gpuTextureDst.glTexture, mipLevel);
            }

            var srcWidth = gpuTextureSrc.width;
            var srcHeight = gpuTextureSrc.height;
            var dstWidth = gpuTextureDst.width;
            var dstHeight = gpuTextureDst.height;
            this._uniformBuffer[0] = region.srcExtent.width / srcWidth;
            this._uniformBuffer[1] = region.srcExtent.height / srcHeight;
            this._uniformBuffer[2] = region.srcOffset.x / srcWidth;
            this._uniformBuffer[3] = region.srcOffset.y / srcHeight;
            this._uniformBuffer[4] = region.dstExtent.width / dstWidth;
            this._uniformBuffer[5] = region.dstExtent.height / dstHeight;
            this._uniformBuffer[6] = region.dstOffset.x / dstWidth;
            this._uniformBuffer[7] = region.dstOffset.y / dstHeight;
            WebGLCmdFuncUpdateBuffer(device, this._gpuUniformBuffer, this._uniformBuffer, 0, this._uniformBuffer.length * Float32Array.BYTES_PER_ELEMENT);
            WebGLCmdFuncBindStates(device, this._gpuPipelineState, this._gpuInputAssembler, [this._gpuDescriptorSet], [], null);
            WebGLCmdFuncDraw(device, this._drawInfo);
          }

          if (stateCache.glFramebuffer !== origFramebuffer) {
            device.gl.bindFramebuffer(device.gl.FRAMEBUFFER, origFramebuffer);
            stateCache.glFramebuffer = origFramebuffer;
          }

          var origViewport = stateCache.viewport;
          gl.viewport(origViewport.left, origViewport.top, origViewport.width, origViewport.height);
          var origScissor = stateCache.scissorRect;
          gl.scissor(origScissor.x, origScissor.y, origScissor.width, origScissor.height);
        };

        return IWebGLBlitManager;
      }();

      var WebGLBuffer = function (_Buffer) {
        _inheritsLoose(WebGLBuffer, _Buffer);

        function WebGLBuffer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Buffer.call.apply(_Buffer, [this].concat(args)) || this;
          _this._gpuBuffer = null;
          _this._gpuBufferView = null;
          _this._uniformBuffer = null;
          return _this;
        }

        var _proto = WebGLBuffer.prototype;

        _proto.initialize = function initialize(info) {
          if ('buffer' in info) {
            this._isBufferView = true;
            var buffer = info.buffer;
            this._usage = buffer.usage;
            this._memUsage = buffer.memUsage;
            this._size = this._stride = info.range;
            this._count = 1;
            this._flags = buffer.flags;
            this._gpuBufferView = {
              gpuBuffer: buffer.gpuBuffer,
              offset: info.offset,
              range: info.range
            };
          } else {
            this._usage = info.usage;
            this._memUsage = info.memUsage;
            this._size = info.size;
            this._stride = Math.max(info.stride || this._size, 1);
            this._count = this._size / this._stride;
            this._flags = info.flags;

            if (this._usage & BufferUsageBit.UNIFORM && this._size > 0) {
              this._uniformBuffer = new Uint8Array(this._size);
            }

            this._gpuBuffer = {
              usage: this._usage,
              memUsage: this._memUsage,
              size: this._size,
              stride: this._stride,
              buffer: null,
              vf32: null,
              indirects: new WebGLIndirectDrawInfos(),
              glTarget: 0,
              glBuffer: null
            };

            if (this._usage & BufferUsageBit.UNIFORM) {
              this._gpuBuffer.buffer = this._uniformBuffer;
            }

            WebGLCmdFuncCreateBuffer(WebGLDeviceManager.instance, this._gpuBuffer);
            WebGLDeviceManager.instance.memoryStatus.bufferSize += this._size;
          }
        };

        _proto.destroy = function destroy() {
          if (this._gpuBuffer) {
            WebGLCmdFuncDestroyBuffer(WebGLDeviceManager.instance, this._gpuBuffer);
            WebGLDeviceManager.instance.memoryStatus.bufferSize -= this._size;
            this._gpuBuffer = null;
          }

          if (this._gpuBufferView) {
            this._gpuBufferView = null;
          }
        };

        _proto.resize = function resize(size) {
          if (this._isBufferView) {
            console.warn('cannot resize buffer views!');
            return;
          }

          var oldSize = this._size;

          if (oldSize === size) {
            return;
          }

          this._size = size;
          this._count = this._size / this._stride;

          if (this._uniformBuffer) {
            this._uniformBuffer = new Uint8Array(size);
          }

          if (this._gpuBuffer) {
            if (this._uniformBuffer) {
              this._gpuBuffer.buffer = this._uniformBuffer;
            }

            this._gpuBuffer.size = size;

            if (size > 0) {
              WebGLCmdFuncResizeBuffer(WebGLDeviceManager.instance, this._gpuBuffer);
              WebGLDeviceManager.instance.memoryStatus.bufferSize -= oldSize;
              WebGLDeviceManager.instance.memoryStatus.bufferSize += size;
            }
          }
        };

        _proto.update = function update(buffer, size) {
          if (this._isBufferView) {
            console.warn('cannot update through buffer views!');
            return;
          }

          var buffSize;

          if (size !== undefined) {
            buffSize = size;
          } else if (this._usage & BufferUsageBit.INDIRECT) {
            buffSize = 0;
          } else {
            buffSize = buffer.byteLength;
          }

          WebGLCmdFuncUpdateBuffer(WebGLDeviceManager.instance, this._gpuBuffer, buffer, 0, buffSize);
        };

        _createClass(WebGLBuffer, [{
          key: "gpuBuffer",
          get: function get() {
            return this._gpuBuffer;
          }
        }, {
          key: "gpuBufferView",
          get: function get() {
            return this._gpuBufferView;
          }
        }]);

        return WebGLBuffer;
      }(Buffer);

      var WebGLCommandPool = function () {
        function WebGLCommandPool(Clazz, count) {
          this._frees = void 0;
          this._freeIdx = 0;
          this._freeCmds = void 0;
          this._frees = new Array(count);
          this._freeCmds = new CachedArray(count);

          for (var i = 0; i < count; ++i) {
            this._frees[i] = new Clazz();
          }

          this._freeIdx = count - 1;
        }

        var _proto = WebGLCommandPool.prototype;

        _proto.alloc = function alloc(Clazz) {
          if (this._freeIdx < 0) {
            var size = this._frees.length * 2;
            var temp = this._frees;
            this._frees = new Array(size);
            var increase = size - temp.length;

            for (var i = 0; i < increase; ++i) {
              this._frees[i] = new Clazz();
            }

            for (var _i = increase, j = 0; _i < size; ++_i, ++j) {
              this._frees[_i] = temp[j];
            }

            this._freeIdx += increase;
          }

          var cmd = this._frees[this._freeIdx];
          this._frees[this._freeIdx--] = null;
          ++cmd.refCount;
          return cmd;
        };

        _proto.free = function free(cmd) {
          if (--cmd.refCount === 0) {
            this._freeCmds.push(cmd);
          }
        };

        _proto.freeCmds = function freeCmds(cmds) {
          for (var i = 0; i < cmds.length; ++i) {
            if (--cmds.array[i].refCount === 0) {
              this._freeCmds.push(cmds.array[i]);
            }
          }
        };

        _proto.release = function release() {
          for (var i = 0; i < this._freeCmds.length; ++i) {
            var cmd = this._freeCmds.array[i];
            cmd.clear();
            this._frees[++this._freeIdx] = cmd;
          }

          this._freeCmds.clear();
        };

        return WebGLCommandPool;
      }();
      var WebGLCommandAllocator = function () {
        function WebGLCommandAllocator() {
          this.beginRenderPassCmdPool = void 0;
          this.bindStatesCmdPool = void 0;
          this.drawCmdPool = void 0;
          this.updateBufferCmdPool = void 0;
          this.copyBufferToTextureCmdPool = void 0;
          this.blitTextureCmdPool = void 0;
          this.beginRenderPassCmdPool = new WebGLCommandPool(WebGLCmdBeginRenderPass, 1);
          this.bindStatesCmdPool = new WebGLCommandPool(WebGLCmdBindStates, 1);
          this.drawCmdPool = new WebGLCommandPool(WebGLCmdDraw, 1);
          this.updateBufferCmdPool = new WebGLCommandPool(WebGLCmdUpdateBuffer, 1);
          this.copyBufferToTextureCmdPool = new WebGLCommandPool(WebGLCmdCopyBufferToTexture, 1);
          this.blitTextureCmdPool = new WebGLCommandPool(WebGLCmdBlitTexture, 1);
        }

        var _proto2 = WebGLCommandAllocator.prototype;

        _proto2.clearCmds = function clearCmds(cmdPackage) {
          if (cmdPackage.beginRenderPassCmds.length) {
            this.beginRenderPassCmdPool.freeCmds(cmdPackage.beginRenderPassCmds);
            cmdPackage.beginRenderPassCmds.clear();
          }

          if (cmdPackage.bindStatesCmds.length) {
            this.bindStatesCmdPool.freeCmds(cmdPackage.bindStatesCmds);
            cmdPackage.bindStatesCmds.clear();
          }

          if (cmdPackage.drawCmds.length) {
            this.drawCmdPool.freeCmds(cmdPackage.drawCmds);
            cmdPackage.drawCmds.clear();
          }

          if (cmdPackage.updateBufferCmds.length) {
            this.updateBufferCmdPool.freeCmds(cmdPackage.updateBufferCmds);
            cmdPackage.updateBufferCmds.clear();
          }

          if (cmdPackage.copyBufferToTextureCmds.length) {
            this.copyBufferToTextureCmdPool.freeCmds(cmdPackage.copyBufferToTextureCmds);
            cmdPackage.copyBufferToTextureCmds.clear();
          }

          if (cmdPackage.blitTextureCmds.length) {
            this.blitTextureCmdPool.freeCmds(cmdPackage.blitTextureCmds);
            cmdPackage.blitTextureCmds.clear();
          }

          cmdPackage.cmds.clear();
        };

        _proto2.releaseCmds = function releaseCmds() {
          this.beginRenderPassCmdPool.release();
          this.bindStatesCmdPool.release();
          this.drawCmdPool.release();
          this.updateBufferCmdPool.release();
          this.copyBufferToTextureCmdPool.release();
          this.blitTextureCmdPool.release();
        };

        return WebGLCommandAllocator;
      }();

      var WebGLCommandBuffer = function (_CommandBuffer) {
        _inheritsLoose(WebGLCommandBuffer, _CommandBuffer);

        function WebGLCommandBuffer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _CommandBuffer.call.apply(_CommandBuffer, [this].concat(args)) || this;
          _this.cmdPackage = new WebGLCmdPackage();
          _this._cmdAllocator = new WebGLCommandAllocator();
          _this._isInRenderPass = false;
          _this._curGPUPipelineState = null;
          _this._curGPUInputAssembler = null;
          _this._curGPUDescriptorSets = [];
          _this._curDynamicOffsets = Array(8).fill(0);
          _this._curDynamicStates = new DynamicStates();
          _this._isStateInvalied = false;
          return _this;
        }

        var _proto = WebGLCommandBuffer.prototype;

        _proto.initialize = function initialize(info) {
          this._type = info.type;
          this._queue = info.queue;
          var setCount = WebGLDeviceManager.instance.bindingMappings.blockOffsets.length;

          for (var i = 0; i < setCount; i++) {
            this._curGPUDescriptorSets.push(null);
          }
        };

        _proto.destroy = function destroy() {
          this._cmdAllocator.clearCmds(this.cmdPackage);
        };

        _proto.begin = function begin(renderPass, subpass, frameBuffer) {

          this._cmdAllocator.clearCmds(this.cmdPackage);

          this._curGPUPipelineState = null;
          this._curGPUInputAssembler = null;
          this._curGPUDescriptorSets.length = 0;
          this._numDrawCalls = 0;
          this._numInstances = 0;
          this._numTris = 0;
        };

        _proto.end = function end() {
          if (this._isStateInvalied) {
            this.bindStates();
          }

          this._isInRenderPass = false;
        };

        _proto.beginRenderPass = function beginRenderPass(renderPass, framebuffer, renderArea, clearColors, clearDepth, clearStencil) {
          var cmd = this._cmdAllocator.beginRenderPassCmdPool.alloc(WebGLCmdBeginRenderPass);

          cmd.gpuRenderPass = renderPass.gpuRenderPass;
          cmd.gpuFramebuffer = framebuffer.gpuFramebuffer;
          cmd.renderArea.copy(renderArea);
          cmd.clearColors.length = clearColors.length;

          for (var i = 0; i < clearColors.length; ++i) {
            cmd.clearColors[i] = clearColors[i];
          }

          cmd.clearDepth = clearDepth;
          cmd.clearStencil = clearStencil;
          this.cmdPackage.beginRenderPassCmds.push(cmd);
          this.cmdPackage.cmds.push(WebGLCmd.BEGIN_RENDER_PASS);
          this._isInRenderPass = true;
        };

        _proto.endRenderPass = function endRenderPass() {
          this._isInRenderPass = false;
        };

        _proto.bindPipelineState = function bindPipelineState(pipelineState) {
          var gpuPipelineState = pipelineState.gpuPipelineState;

          if (gpuPipelineState !== this._curGPUPipelineState) {
            this._curGPUPipelineState = gpuPipelineState;
            this._isStateInvalied = true;
          }
        };

        _proto.bindDescriptorSet = function bindDescriptorSet(set, descriptorSet, dynamicOffsets) {
          var gpuDescriptorSet = descriptorSet.gpuDescriptorSet;

          if (gpuDescriptorSet !== this._curGPUDescriptorSets[set]) {
            this._curGPUDescriptorSets[set] = gpuDescriptorSet;
            this._isStateInvalied = true;
          }

          if (dynamicOffsets) {
            var _this$_curGPUPipeline;

            var gpuPipelineLayout = (_this$_curGPUPipeline = this._curGPUPipelineState) === null || _this$_curGPUPipeline === void 0 ? void 0 : _this$_curGPUPipeline.gpuPipelineLayout;

            if (gpuPipelineLayout) {
              var offsets = this._curDynamicOffsets;
              var idx = gpuPipelineLayout.dynamicOffsetOffsets[set];

              for (var i = 0; i < dynamicOffsets.length; i++) {
                offsets[idx + i] = dynamicOffsets[i];
              }

              this._isStateInvalied = true;
            }
          }
        };

        _proto.bindInputAssembler = function bindInputAssembler(inputAssembler) {
          var gpuInputAssembler = inputAssembler.gpuInputAssembler;
          this._curGPUInputAssembler = gpuInputAssembler;
          this._isStateInvalied = true;
        };

        _proto.setViewport = function setViewport(viewport) {
          var cache = this._curDynamicStates.viewport;

          if (cache.left !== viewport.left || cache.top !== viewport.top || cache.width !== viewport.width || cache.height !== viewport.height || cache.minDepth !== viewport.minDepth || cache.maxDepth !== viewport.maxDepth) {
            cache.left = viewport.left;
            cache.top = viewport.top;
            cache.width = viewport.width;
            cache.height = viewport.height;
            cache.minDepth = viewport.minDepth;
            cache.maxDepth = viewport.maxDepth;
            this._isStateInvalied = true;
          }
        };

        _proto.setScissor = function setScissor(scissor) {
          var cache = this._curDynamicStates.scissor;

          if (cache.x !== scissor.x || cache.y !== scissor.y || cache.width !== scissor.width || cache.height !== scissor.height) {
            cache.x = scissor.x;
            cache.y = scissor.y;
            cache.width = scissor.width;
            cache.height = scissor.height;
            this._isStateInvalied = true;
          }
        };

        _proto.setLineWidth = function setLineWidth(lineWidth) {
          if (this._curDynamicStates.lineWidth !== lineWidth) {
            this._curDynamicStates.lineWidth = lineWidth;
            this._isStateInvalied = true;
          }
        };

        _proto.setDepthBias = function setDepthBias(depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor) {
          var cache = this._curDynamicStates;

          if (cache.depthBiasConstant !== depthBiasConstantFactor || cache.depthBiasClamp !== depthBiasClamp || cache.depthBiasSlope !== depthBiasSlopeFactor) {
            cache.depthBiasConstant = depthBiasConstantFactor;
            cache.depthBiasClamp = depthBiasClamp;
            cache.depthBiasSlope = depthBiasSlopeFactor;
            this._isStateInvalied = true;
          }
        };

        _proto.setBlendConstants = function setBlendConstants(blendConstants) {
          var cache = this._curDynamicStates.blendConstant;

          if (cache.x !== blendConstants.x || cache.y !== blendConstants.y || cache.z !== blendConstants.z || cache.w !== blendConstants.w) {
            cache.copy(blendConstants);
            this._isStateInvalied = true;
          }
        };

        _proto.setDepthBound = function setDepthBound(minDepthBounds, maxDepthBounds) {
          var cache = this._curDynamicStates;

          if (cache.depthMinBounds !== minDepthBounds || cache.depthMaxBounds !== maxDepthBounds) {
            cache.depthMinBounds = minDepthBounds;
            cache.depthMaxBounds = maxDepthBounds;
            this._isStateInvalied = true;
          }
        };

        _proto.setStencilWriteMask = function setStencilWriteMask(face, writeMask) {
          var front = this._curDynamicStates.stencilStatesFront;
          var back = this._curDynamicStates.stencilStatesBack;

          if (face & StencilFace.FRONT) {
            if (front.writeMask !== writeMask) {
              front.writeMask = writeMask;
              this._isStateInvalied = true;
            }
          }

          if (face & StencilFace.BACK) {
            if (back.writeMask !== writeMask) {
              back.writeMask = writeMask;
              this._isStateInvalied = true;
            }
          }
        };

        _proto.setStencilCompareMask = function setStencilCompareMask(face, reference, compareMask) {
          var front = this._curDynamicStates.stencilStatesFront;
          var back = this._curDynamicStates.stencilStatesBack;

          if (face & StencilFace.FRONT) {
            if (front.compareMask !== compareMask || front.reference !== reference) {
              front.reference = reference;
              front.compareMask = compareMask;
              this._isStateInvalied = true;
            }
          }

          if (face & StencilFace.BACK) {
            if (back.compareMask !== compareMask || back.reference !== reference) {
              back.reference = reference;
              back.compareMask = compareMask;
              this._isStateInvalied = true;
            }
          }
        };

        _proto.draw = function draw(infoOrAssembler) {
          if (this._type === CommandBufferType.PRIMARY && this._isInRenderPass || this._type === CommandBufferType.SECONDARY) {
            if (this._isStateInvalied) {
              this.bindStates();
            }

            var info = 'drawInfo' in infoOrAssembler ? infoOrAssembler.drawInfo : infoOrAssembler;

            var cmd = this._cmdAllocator.drawCmdPool.alloc(WebGLCmdDraw);

            cmd.drawInfo.copy(info);
            this.cmdPackage.drawCmds.push(cmd);
            this.cmdPackage.cmds.push(WebGLCmd.DRAW);
            ++this._numDrawCalls;
            this._numInstances += info.instanceCount;
            var indexCount = info.indexCount || info.vertexCount;

            if (this._curGPUPipelineState) {
              var glPrimitive = this._curGPUPipelineState.glPrimitive;

              switch (glPrimitive) {
                case 0x0004:
                  {
                    this._numTris += indexCount / 3 * Math.max(info.instanceCount, 1);
                    break;
                  }

                case 0x0005:
                case 0x0006:
                  {
                    this._numTris += (indexCount - 2) * Math.max(info.instanceCount, 1);
                    break;
                  }
              }
            }
          } else {
            console.error('Command \'draw\' must be recorded inside a render pass.');
          }
        };

        _proto.updateBuffer = function updateBuffer(buffer, data, size) {
          if (this._type === CommandBufferType.PRIMARY && !this._isInRenderPass || this._type === CommandBufferType.SECONDARY) {
            var gpuBuffer = buffer.gpuBuffer;

            if (gpuBuffer) {
              var cmd = this._cmdAllocator.updateBufferCmdPool.alloc(WebGLCmdUpdateBuffer);

              var buffSize = 0;
              var buff = null;

              if (buffer.usage & BufferUsageBit.INDIRECT) {
                buff = data;
              } else {
                if (size !== undefined) {
                  buffSize = size;
                } else {
                  buffSize = data.byteLength;
                }

                buff = data;
              }

              cmd.gpuBuffer = gpuBuffer;
              cmd.buffer = buff;
              cmd.offset = 0;
              cmd.size = buffSize;
              this.cmdPackage.updateBufferCmds.push(cmd);
              this.cmdPackage.cmds.push(WebGLCmd.UPDATE_BUFFER);
            }
          } else {
            console.error('Command \'updateBuffer\' must be recorded outside a render pass.');
          }
        };

        _proto.copyBuffersToTexture = function copyBuffersToTexture(buffers, texture, regions) {
          if (this._type === CommandBufferType.PRIMARY && !this._isInRenderPass || this._type === CommandBufferType.SECONDARY) {
            var gpuTexture = texture.gpuTexture;

            if (gpuTexture) {
              var cmd = this._cmdAllocator.copyBufferToTextureCmdPool.alloc(WebGLCmdCopyBufferToTexture);

              if (cmd) {
                cmd.gpuTexture = gpuTexture;
                cmd.regions = regions;
                cmd.buffers = buffers;
                this.cmdPackage.copyBufferToTextureCmds.push(cmd);
                this.cmdPackage.cmds.push(WebGLCmd.COPY_BUFFER_TO_TEXTURE);
              }
            }
          } else {
            console.error('Command \'copyBufferToTexture\' must be recorded outside a render pass.');
          }
        };

        _proto.execute = function execute(cmdBuffs, count) {
          for (var i = 0; i < count; ++i) {
            var webGLCmdBuff = cmdBuffs[i];

            for (var c = 0; c < webGLCmdBuff.cmdPackage.beginRenderPassCmds.length; ++c) {
              var cmd = webGLCmdBuff.cmdPackage.beginRenderPassCmds.array[c];
              ++cmd.refCount;
              this.cmdPackage.beginRenderPassCmds.push(cmd);
            }

            for (var _c = 0; _c < webGLCmdBuff.cmdPackage.bindStatesCmds.length; ++_c) {
              var _cmd = webGLCmdBuff.cmdPackage.bindStatesCmds.array[_c];
              ++_cmd.refCount;
              this.cmdPackage.bindStatesCmds.push(_cmd);
            }

            for (var _c2 = 0; _c2 < webGLCmdBuff.cmdPackage.drawCmds.length; ++_c2) {
              var _cmd2 = webGLCmdBuff.cmdPackage.drawCmds.array[_c2];
              ++_cmd2.refCount;
              this.cmdPackage.drawCmds.push(_cmd2);
            }

            for (var _c3 = 0; _c3 < webGLCmdBuff.cmdPackage.updateBufferCmds.length; ++_c3) {
              var _cmd3 = webGLCmdBuff.cmdPackage.updateBufferCmds.array[_c3];
              ++_cmd3.refCount;
              this.cmdPackage.updateBufferCmds.push(_cmd3);
            }

            for (var _c4 = 0; _c4 < webGLCmdBuff.cmdPackage.copyBufferToTextureCmds.length; ++_c4) {
              var _cmd4 = webGLCmdBuff.cmdPackage.copyBufferToTextureCmds.array[_c4];
              ++_cmd4.refCount;
              this.cmdPackage.copyBufferToTextureCmds.push(_cmd4);
            }

            for (var _c5 = 0; _c5 < webGLCmdBuff.cmdPackage.blitTextureCmds.length; ++_c5) {
              var _cmd5 = webGLCmdBuff.cmdPackage.blitTextureCmds.array[_c5];
              ++_cmd5.refCount;
              this.cmdPackage.blitTextureCmds.push(_cmd5);
            }

            this.cmdPackage.cmds.concat(webGLCmdBuff.cmdPackage.cmds.array);
            this._numDrawCalls += webGLCmdBuff._numDrawCalls;
            this._numInstances += webGLCmdBuff._numInstances;
            this._numTris += webGLCmdBuff._numTris;
          }
        };

        _proto.pipelineBarrier = function pipelineBarrier(GeneralBarrier, bufferBarriers, buffers, textureBarriers, textures) {};

        _proto.bindStates = function bindStates() {
          var bindStatesCmd = this._cmdAllocator.bindStatesCmdPool.alloc(WebGLCmdBindStates);

          if (bindStatesCmd) {
            bindStatesCmd.gpuPipelineState = this._curGPUPipelineState;
            Array.prototype.push.apply(bindStatesCmd.gpuDescriptorSets, this._curGPUDescriptorSets);
            Array.prototype.push.apply(bindStatesCmd.dynamicOffsets, this._curDynamicOffsets);
            bindStatesCmd.gpuInputAssembler = this._curGPUInputAssembler;
            bindStatesCmd.dynamicStates.copy(this._curDynamicStates);
            this.cmdPackage.bindStatesCmds.push(bindStatesCmd);
            this.cmdPackage.cmds.push(WebGLCmd.BIND_STATES);
            this._isStateInvalied = false;
          }
        };

        _proto.blitTexture = function blitTexture(srcTexture, dstTexture, regions, filter) {
          var blitTextureCmd = this._cmdAllocator.blitTextureCmdPool.alloc(WebGLCmdBlitTexture);

          blitTextureCmd.srcTexture = srcTexture.gpuTexture;
          blitTextureCmd.dstTexture = dstTexture.gpuTexture;
          blitTextureCmd.regions = regions;
          blitTextureCmd.filter = filter;
          ++this._numDrawCalls;
          this.cmdPackage.blitTextureCmds.push(blitTextureCmd);
          this.cmdPackage.cmds.push(WebGLCmd.BLIT_TEXTURE);
        };

        return WebGLCommandBuffer;
      }(CommandBuffer);

      var WebGLFramebuffer = function (_Framebuffer) {
        _inheritsLoose(WebGLFramebuffer, _Framebuffer);

        function WebGLFramebuffer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Framebuffer.call.apply(_Framebuffer, [this].concat(args)) || this;
          _this._gpuFramebuffer = null;
          return _this;
        }

        var _proto = WebGLFramebuffer.prototype;

        _proto.initialize = function initialize(info) {
          this._renderPass = info.renderPass;
          this._colorTextures = info.colorTextures || [];
          this._depthStencilTexture = info.depthStencilTexture || null;
          var lodLevel = 0;
          var gpuColorTextures = [];

          for (var i = 0; i < info.colorTextures.length; ++i) {
            var colorTexture = info.colorTextures[i];

            if (colorTexture) {
              gpuColorTextures.push(colorTexture.gpuTexture);
              lodLevel = colorTexture.lodLevel;
            }
          }

          var gpuDepthStencilTexture = null;

          if (info.depthStencilTexture) {
            gpuDepthStencilTexture = info.depthStencilTexture.gpuTexture;
            lodLevel = info.depthStencilTexture.lodLevel;
          }

          var width = Number.MAX_SAFE_INTEGER;
          var height = Number.MAX_SAFE_INTEGER;
          this._gpuFramebuffer = {
            gpuRenderPass: info.renderPass.gpuRenderPass,
            gpuColorTextures: gpuColorTextures,
            gpuDepthStencilTexture: gpuDepthStencilTexture,
            glFramebuffer: null,
            isOffscreen: true,

            get width() {
              return this.isOffscreen ? width : this.gpuColorTextures[0].width;
            },

            set width(val) {
              width = val;
            },

            get height() {
              return this.isOffscreen ? height : this.gpuColorTextures[0].height;
            },

            set height(val) {
              height = val;
            },

            lodLevel: lodLevel
          };
          WebGLCmdFuncCreateFramebuffer(WebGLDeviceManager.instance, this._gpuFramebuffer);
        };

        _proto.destroy = function destroy() {
          if (this._gpuFramebuffer) {
            WebGLCmdFuncDestroyFramebuffer(WebGLDeviceManager.instance, this._gpuFramebuffer);
            this._gpuFramebuffer = null;
          }
        };

        _createClass(WebGLFramebuffer, [{
          key: "gpuFramebuffer",
          get: function get() {
            return this._gpuFramebuffer;
          }
        }]);

        return WebGLFramebuffer;
      }(Framebuffer);

      var WebGLInputAssembler = function (_InputAssembler) {
        _inheritsLoose(WebGLInputAssembler, _InputAssembler);

        function WebGLInputAssembler() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _InputAssembler.call.apply(_InputAssembler, [this].concat(args)) || this;
          _this._gpuInputAssembler = null;
          return _this;
        }

        var _proto = WebGLInputAssembler.prototype;

        _proto.initialize = function initialize(info) {
          if (info.vertexBuffers.length === 0) {
            console.error('InputAssemblerInfo.vertexBuffers is null.');
            return;
          }

          this._attributes = info.attributes;
          this._attributesHash = this.computeAttributesHash();
          this._vertexBuffers = info.vertexBuffers;

          if (info.indexBuffer) {
            this._indexBuffer = info.indexBuffer;
            this._drawInfo.indexCount = this._indexBuffer.size / this._indexBuffer.stride;
            this._drawInfo.firstIndex = 0;
          } else {
            var vertBuff = this._vertexBuffers[0];
            this._drawInfo.vertexCount = vertBuff.size / vertBuff.stride;
            this._drawInfo.firstVertex = 0;
            this._drawInfo.vertexOffset = 0;
          }

          this._drawInfo.instanceCount = 0;
          this._drawInfo.firstInstance = 0;
          this._indirectBuffer = info.indirectBuffer || null;
          var gpuVertexBuffers = new Array(info.vertexBuffers.length);

          for (var i = 0; i < info.vertexBuffers.length; ++i) {
            var vb = info.vertexBuffers[i];

            if (vb.gpuBuffer) {
              gpuVertexBuffers[i] = vb.gpuBuffer;
            }
          }

          var gpuIndexBuffer = null;
          var glIndexType = 0;

          if (info.indexBuffer) {
            gpuIndexBuffer = info.indexBuffer.gpuBuffer;

            if (gpuIndexBuffer) {
              switch (gpuIndexBuffer.stride) {
                case 1:
                  glIndexType = 0x1401;
                  break;

                case 2:
                  glIndexType = 0x1403;
                  break;

                case 4:
                  glIndexType = 0x1405;
                  break;

                default:
                  {
                    console.error('Error index buffer stride.');
                  }
              }
            }
          }

          var gpuIndirectBuffer = null;

          if (info.indirectBuffer) {
            gpuIndirectBuffer = info.indirectBuffer.gpuBuffer;
          }

          this._gpuInputAssembler = {
            attributes: info.attributes,
            gpuVertexBuffers: gpuVertexBuffers,
            gpuIndexBuffer: gpuIndexBuffer,
            gpuIndirectBuffer: gpuIndirectBuffer,
            glAttribs: [],
            glIndexType: glIndexType,
            glVAOs: new Map()
          };
          WebGLCmdFuncCreateInputAssember(WebGLDeviceManager.instance, this._gpuInputAssembler);
        };

        _proto.destroy = function destroy() {
          var device = WebGLDeviceManager.instance;

          if (this._gpuInputAssembler && device.extensions.useVAO) {
            WebGLCmdFuncDestroyInputAssembler(device, this._gpuInputAssembler);
          }

          this._gpuInputAssembler = null;
        };

        _createClass(WebGLInputAssembler, [{
          key: "gpuInputAssembler",
          get: function get() {
            return this._gpuInputAssembler;
          }
        }]);

        return WebGLInputAssembler;
      }(InputAssembler);

      var WebGLDescriptorSetLayout = function (_DescriptorSetLayout) {
        _inheritsLoose(WebGLDescriptorSetLayout, _DescriptorSetLayout);

        function WebGLDescriptorSetLayout() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _DescriptorSetLayout.call.apply(_DescriptorSetLayout, [this].concat(args)) || this;
          _this._gpuDescriptorSetLayout = null;
          return _this;
        }

        var _proto = WebGLDescriptorSetLayout.prototype;

        _proto.initialize = function initialize(info) {
          Array.prototype.push.apply(this._bindings, info.bindings);
          var descriptorCount = 0;
          var maxBinding = -1;
          var flattenedIndices = [];

          for (var i = 0; i < this._bindings.length; i++) {
            var binding = this._bindings[i];
            flattenedIndices.push(descriptorCount);
            descriptorCount += binding.count;
            if (binding.binding > maxBinding) maxBinding = binding.binding;
          }

          this._bindingIndices = Array(maxBinding + 1).fill(-1);
          var descriptorIndices = this._descriptorIndices = Array(maxBinding + 1).fill(-1);

          for (var _i = 0; _i < this._bindings.length; _i++) {
            var _binding = this._bindings[_i];
            this._bindingIndices[_binding.binding] = _i;
            descriptorIndices[_binding.binding] = flattenedIndices[_i];
          }

          var dynamicBindings = [];

          for (var _i2 = 0; _i2 < this._bindings.length; _i2++) {
            var _binding2 = this._bindings[_i2];

            if (_binding2.descriptorType & DESCRIPTOR_DYNAMIC_TYPE) {
              for (var j = 0; j < _binding2.count; j++) {
                dynamicBindings.push(_binding2.binding);
              }
            }
          }

          this._gpuDescriptorSetLayout = {
            bindings: this._bindings,
            dynamicBindings: dynamicBindings,
            descriptorIndices: descriptorIndices,
            descriptorCount: descriptorCount
          };
        };

        _proto.destroy = function destroy() {
          this._bindings.length = 0;
        };

        _createClass(WebGLDescriptorSetLayout, [{
          key: "gpuDescriptorSetLayout",
          get: function get() {
            return this._gpuDescriptorSetLayout;
          }
        }]);

        return WebGLDescriptorSetLayout;
      }(DescriptorSetLayout);

      var WebGLPipelineLayout = function (_PipelineLayout) {
        _inheritsLoose(WebGLPipelineLayout, _PipelineLayout);

        function WebGLPipelineLayout() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _PipelineLayout.call.apply(_PipelineLayout, [this].concat(args)) || this;
          _this._gpuPipelineLayout = null;
          return _this;
        }

        var _proto = WebGLPipelineLayout.prototype;

        _proto.initialize = function initialize(info) {
          Array.prototype.push.apply(this._setLayouts, info.setLayouts);
          var dynamicOffsetIndices = [];
          var gpuSetLayouts = [];
          var dynamicOffsetCount = 0;
          var dynamicOffsetOffsets = [];

          for (var i = 0; i < this._setLayouts.length; i++) {
            var setLayout = this._setLayouts[i];
            var dynamicBindings = setLayout.gpuDescriptorSetLayout.dynamicBindings;
            var indices = Array(setLayout.bindingIndices.length).fill(-1);

            for (var j = 0; j < dynamicBindings.length; j++) {
              var binding = dynamicBindings[j];
              if (indices[binding] < 0) indices[binding] = dynamicOffsetCount + j;
            }

            gpuSetLayouts.push(setLayout.gpuDescriptorSetLayout);
            dynamicOffsetIndices.push(indices);
            dynamicOffsetOffsets.push(dynamicOffsetCount);
            dynamicOffsetCount += dynamicBindings.length;
          }

          this._gpuPipelineLayout = {
            gpuSetLayouts: gpuSetLayouts,
            dynamicOffsetIndices: dynamicOffsetIndices,
            dynamicOffsetCount: dynamicOffsetCount,
            dynamicOffsetOffsets: dynamicOffsetOffsets
          };
        };

        _proto.destroy = function destroy() {
          this._setLayouts.length = 0;
        };

        _createClass(WebGLPipelineLayout, [{
          key: "gpuPipelineLayout",
          get: function get() {
            return this._gpuPipelineLayout;
          }
        }]);

        return WebGLPipelineLayout;
      }(PipelineLayout);

      var WebGLPrimitives = [0x0000, 0x0001, 0x0003, 0x0002, 0x0000, 0x0000, 0x0000, 0x0004, 0x0005, 0x0006, 0x0000, 0x0000, 0x0000, 0x0000];
      var WebGLPipelineState = function (_PipelineState) {
        _inheritsLoose(WebGLPipelineState, _PipelineState);

        function WebGLPipelineState() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _PipelineState.call.apply(_PipelineState, [this].concat(args)) || this;
          _this._gpuPipelineState = null;
          return _this;
        }

        var _proto = WebGLPipelineState.prototype;

        _proto.initialize = function initialize(info) {
          this._primitive = info.primitive;
          this._shader = info.shader;
          this._pipelineLayout = info.pipelineLayout;
          var bs = this._bs;

          if (info.blendState) {
            var bsInfo = info.blendState;
            var targets = bsInfo.targets;

            if (targets) {
              targets.forEach(function (t, i) {
                bs.setTarget(i, t);
              });
            }

            if (bsInfo.isA2C !== undefined) {
              bs.isA2C = bsInfo.isA2C;
            }

            if (bsInfo.isIndepend !== undefined) {
              bs.isIndepend = bsInfo.isIndepend;
            }

            if (bsInfo.blendColor !== undefined) {
              bs.blendColor = bsInfo.blendColor;
            }
          }

          Object.assign(this._rs, info.rasterizerState);
          Object.assign(this._dss, info.depthStencilState);
          this._is = info.inputState;
          this._renderPass = info.renderPass;
          this._dynamicStates = info.dynamicStates;
          var dynamicStates = [];

          for (var i = 0; i < 31; i++) {
            if (this._dynamicStates & 1 << i) {
              dynamicStates.push(1 << i);
            }
          }

          this._gpuPipelineState = {
            glPrimitive: WebGLPrimitives[info.primitive],
            gpuShader: info.shader.gpuShader,
            gpuPipelineLayout: info.pipelineLayout.gpuPipelineLayout,
            rs: info.rasterizerState,
            dss: info.depthStencilState,
            bs: info.blendState,
            gpuRenderPass: info.renderPass.gpuRenderPass,
            dynamicStates: dynamicStates
          };
        };

        _proto.destroy = function destroy() {
          this._gpuPipelineState = null;
        };

        _createClass(WebGLPipelineState, [{
          key: "gpuPipelineState",
          get: function get() {
            return this._gpuPipelineState;
          }
        }]);

        return WebGLPipelineState;
      }(PipelineState);

      var WebGLPrimaryCommandBuffer = function (_WebGLCommandBuffer) {
        _inheritsLoose(WebGLPrimaryCommandBuffer, _WebGLCommandBuffer);

        function WebGLPrimaryCommandBuffer() {
          return _WebGLCommandBuffer.apply(this, arguments) || this;
        }

        var _proto = WebGLPrimaryCommandBuffer.prototype;

        _proto.beginRenderPass = function beginRenderPass(renderPass, framebuffer, renderArea, clearColors, clearDepth, clearStencil) {
          WebGLCmdFuncBeginRenderPass(WebGLDeviceManager.instance, renderPass.gpuRenderPass, framebuffer.gpuFramebuffer, renderArea, clearColors, clearDepth, clearStencil);
          this._isInRenderPass = true;
        };

        _proto.draw = function draw(infoOrAssembler) {
          if (this._isInRenderPass) {
            if (this._isStateInvalied) {
              this.bindStates();
            }

            var info = 'drawInfo' in infoOrAssembler ? infoOrAssembler.drawInfo : infoOrAssembler;
            WebGLCmdFuncDraw(WebGLDeviceManager.instance, info);
            ++this._numDrawCalls;
            this._numInstances += info.instanceCount;
            var indexCount = info.indexCount || info.vertexCount;

            if (this._curGPUPipelineState) {
              var glPrimitive = this._curGPUPipelineState.glPrimitive;

              switch (glPrimitive) {
                case 0x0004:
                  {
                    this._numTris += indexCount / 3 * Math.max(info.instanceCount, 1);
                    break;
                  }

                case 0x0005:
                case 0x0006:
                  {
                    this._numTris += (indexCount - 2) * Math.max(info.instanceCount, 1);
                    break;
                  }
              }
            }
          } else {
            console.error('Command \'draw\' must be recorded inside a render pass.');
          }
        };

        _proto.setViewport = function setViewport(viewport) {
          var _WebGLDeviceManager$i = WebGLDeviceManager.instance,
              cache = _WebGLDeviceManager$i.stateCache,
              gl = _WebGLDeviceManager$i.gl;

          if (cache.viewport.left !== viewport.left || cache.viewport.top !== viewport.top || cache.viewport.width !== viewport.width || cache.viewport.height !== viewport.height) {
            gl.viewport(viewport.left, viewport.top, viewport.width, viewport.height);
            cache.viewport.left = viewport.left;
            cache.viewport.top = viewport.top;
            cache.viewport.width = viewport.width;
            cache.viewport.height = viewport.height;
          }
        };

        _proto.setScissor = function setScissor(scissor) {
          var _WebGLDeviceManager$i2 = WebGLDeviceManager.instance,
              cache = _WebGLDeviceManager$i2.stateCache,
              gl = _WebGLDeviceManager$i2.gl;

          if (cache.scissorRect.x !== scissor.x || cache.scissorRect.y !== scissor.y || cache.scissorRect.width !== scissor.width || cache.scissorRect.height !== scissor.height) {
            gl.scissor(scissor.x, scissor.y, scissor.width, scissor.height);
            cache.scissorRect.x = scissor.x;
            cache.scissorRect.y = scissor.y;
            cache.scissorRect.width = scissor.width;
            cache.scissorRect.height = scissor.height;
          }
        };

        _proto.updateBuffer = function updateBuffer(buffer, data, size) {
          if (!this._isInRenderPass) {
            var gpuBuffer = buffer.gpuBuffer;

            if (gpuBuffer) {
              var buffSize;

              if (size !== undefined) {
                buffSize = size;
              } else if (buffer.usage & BufferUsageBit.INDIRECT) {
                buffSize = 0;
              } else {
                buffSize = data.byteLength;
              }

              WebGLCmdFuncUpdateBuffer(WebGLDeviceManager.instance, gpuBuffer, data, 0, buffSize);
            }
          } else {
            console.error('Command \'updateBuffer\' must be recorded outside a render pass.');
          }
        };

        _proto.copyBuffersToTexture = function copyBuffersToTexture(buffers, texture, regions) {
          if (!this._isInRenderPass) {
            var gpuTexture = texture.gpuTexture;

            if (gpuTexture) {
              WebGLCmdFuncCopyBuffersToTexture(WebGLDeviceManager.instance, buffers, gpuTexture, regions);
            }
          } else {
            console.error('Command \'copyBufferToTexture\' must be recorded outside a render pass.');
          }
        };

        _proto.execute = function execute(cmdBuffs, count) {
          for (var i = 0; i < count; ++i) {
            var webGLCmdBuff = cmdBuffs[i];
            WebGLCmdFuncExecuteCmds(WebGLDeviceManager.instance, webGLCmdBuff.cmdPackage);
            this._numDrawCalls += webGLCmdBuff._numDrawCalls;
            this._numInstances += webGLCmdBuff._numInstances;
            this._numTris += webGLCmdBuff._numTris;
          }
        };

        _proto.bindStates = function bindStates() {
          WebGLCmdFuncBindStates(WebGLDeviceManager.instance, this._curGPUPipelineState, this._curGPUInputAssembler, this._curGPUDescriptorSets, this._curDynamicOffsets, this._curDynamicStates);
          this._isStateInvalied = false;
        };

        _proto.blitTexture = function blitTexture(srcTexture, dstTexture, regions, filter) {
          var gpuTextureSrc = srcTexture.gpuTexture;
          var gpuTextureDst = dstTexture.gpuTexture;
          WebGLCmdFuncBlitTexture(WebGLDeviceManager.instance, gpuTextureSrc, gpuTextureDst, regions, filter);
        };

        return WebGLPrimaryCommandBuffer;
      }(WebGLCommandBuffer);

      var WebGLQueue = function (_Queue) {
        _inheritsLoose(WebGLQueue, _Queue);

        function WebGLQueue() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Queue.call.apply(_Queue, [this].concat(args)) || this;
          _this.numDrawCalls = 0;
          _this.numInstances = 0;
          _this.numTris = 0;
          return _this;
        }

        var _proto = WebGLQueue.prototype;

        _proto.initialize = function initialize(info) {
          this._type = info.type;
        };

        _proto.destroy = function destroy() {};

        _proto.submit = function submit(cmdBuffs) {
          var len = cmdBuffs.length;

          for (var i = 0; i < len; i++) {
            var cmdBuff = cmdBuffs[i];
            this.numDrawCalls += cmdBuff.numDrawCalls;
            this.numInstances += cmdBuff.numInstances;
            this.numTris += cmdBuff.numTris;
          }
        };

        _proto.clear = function clear() {
          this.numDrawCalls = 0;
          this.numInstances = 0;
          this.numTris = 0;
        };

        return WebGLQueue;
      }(Queue);

      var WebGLRenderPass = function (_RenderPass) {
        _inheritsLoose(WebGLRenderPass, _RenderPass);

        function WebGLRenderPass() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _RenderPass.call.apply(_RenderPass, [this].concat(args)) || this;
          _this._gpuRenderPass = null;
          return _this;
        }

        var _proto = WebGLRenderPass.prototype;

        _proto.initialize = function initialize(info) {
          this._colorInfos = info.colorAttachments;
          this._depthStencilInfo = info.depthStencilAttachment;
          this._subpasses = info.subpasses;
          this._gpuRenderPass = {
            colorAttachments: this._colorInfos,
            depthStencilAttachment: this._depthStencilInfo
          };
          this._hash = this.computeHash();
        };

        _proto.destroy = function destroy() {
          this._gpuRenderPass = null;
        };

        _createClass(WebGLRenderPass, [{
          key: "gpuRenderPass",
          get: function get() {
            return this._gpuRenderPass;
          }
        }]);

        return WebGLRenderPass;
      }(RenderPass);

      var WebGLWraps = [0x2901, 0x8370, 0x812F, 0x812F];
      var WebGLSampler = function (_Sampler) {
        _inheritsLoose(WebGLSampler, _Sampler);

        function WebGLSampler(info, hash) {
          var _this;

          _this = _Sampler.call(this, info, hash) || this;
          _this._gpuSampler = null;
          var glMinFilter = 0;
          var glMagFilter = 0;
          var minFilter = _this._info.minFilter;
          var magFilter = _this._info.magFilter;
          var mipFilter = _this._info.mipFilter;

          if (minFilter === Filter.LINEAR || minFilter === Filter.ANISOTROPIC) {
            if (mipFilter === Filter.LINEAR || mipFilter === Filter.ANISOTROPIC) {
              glMinFilter = 0x2703;
            } else if (mipFilter === Filter.POINT) {
              glMinFilter = 0x2701;
            } else {
              glMinFilter = 0x2601;
            }
          } else if (mipFilter === Filter.LINEAR || mipFilter === Filter.ANISOTROPIC) {
            glMinFilter = 0x2702;
          } else if (mipFilter === Filter.POINT) {
            glMinFilter = 0x2700;
          } else {
            glMinFilter = 0x2600;
          }

          if (magFilter === Filter.LINEAR || magFilter === Filter.ANISOTROPIC) {
            glMagFilter = 0x2601;
          } else {
            glMagFilter = 0x2600;
          }

          var glWrapS = WebGLWraps[_this._info.addressU];
          var glWrapT = WebGLWraps[_this._info.addressV];
          var glWrapR = WebGLWraps[_this._info.addressW];
          _this._gpuSampler = {
            glMinFilter: glMinFilter,
            glMagFilter: glMagFilter,
            glWrapS: glWrapS,
            glWrapT: glWrapT,
            glWrapR: glWrapR
          };
          return _this;
        }

        _createClass(WebGLSampler, [{
          key: "gpuSampler",
          get: function get() {
            return this._gpuSampler;
          }
        }]);

        return WebGLSampler;
      }(Sampler);

      var WebGLShader = function (_Shader) {
        _inheritsLoose(WebGLShader, _Shader);

        function WebGLShader() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Shader.call.apply(_Shader, [this].concat(args)) || this;
          _this._gpuShader = null;
          return _this;
        }

        var _proto = WebGLShader.prototype;

        _proto.initialize = function initialize(info) {
          this._name = info.name;
          this._stages = info.stages;
          this._attributes = info.attributes;
          this._blocks = info.blocks;
          this._samplers = info.samplers;
          this._gpuShader = {
            name: info.name,
            blocks: info.blocks.slice(),
            samplerTextures: info.samplerTextures.slice(),
            subpassInputs: info.subpassInputs.slice(),
            gpuStages: new Array(info.stages.length),
            glProgram: null,
            glInputs: [],
            glUniforms: [],
            glBlocks: [],
            glSamplerTextures: []
          };

          for (var i = 0; i < info.stages.length; ++i) {
            var stage = info.stages[i];
            this._gpuShader.gpuStages[i] = {
              type: stage.stage,
              source: stage.source,
              glShader: null
            };
          }
        };

        _proto.destroy = function destroy() {
          if (this._gpuShader) {
            WebGLCmdFuncDestroyShader(WebGLDeviceManager.instance, this._gpuShader);
            this._gpuShader = null;
          }
        };

        _createClass(WebGLShader, [{
          key: "gpuShader",
          get: function get() {
            if (this._gpuShader.glProgram === null) {
              WebGLCmdFuncCreateShader(WebGLDeviceManager.instance, this._gpuShader);
            }

            return this._gpuShader;
          }
        }]);

        return WebGLShader;
      }(Shader);

      var WebGLStateCache = function () {
        function WebGLStateCache() {
          this.glArrayBuffer = null;
          this.glElementArrayBuffer = null;
          this.glVAO = null;
          this.texUnit = 0;
          this.glTexUnits = [];
          this.glRenderbuffer = null;
          this.glFramebuffer = null;
          this.viewport = new Viewport();
          this.scissorRect = new Rect$1(0, 0, 0, 0);
          this.rs = new RasterizerState();
          this.dss = new DepthStencilState();
          this.bs = new BlendState();
          this.glProgram = null;
          this.glEnabledAttribLocs = [];
          this.glCurrentAttribLocs = [];
          this.texUnitCacheMap = {};
        }

        var _proto = WebGLStateCache.prototype;

        _proto.initialize = function initialize(texUnit, vertexAttributes) {
          for (var i = 0; i < texUnit; ++i) {
            this.glTexUnits.push({
              glTexture: null
            });
          }

          this.glEnabledAttribLocs.length = vertexAttributes;
          this.glEnabledAttribLocs.fill(false);
          this.glCurrentAttribLocs.length = vertexAttributes;
          this.glCurrentAttribLocs.fill(false);
        };

        return WebGLStateCache;
      }();

      var WebGLTexture = function (_Texture) {
        _inheritsLoose(WebGLTexture, _Texture);

        function WebGLTexture() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Texture.call.apply(_Texture, [this].concat(args)) || this;
          _this._gpuTexture = null;
          _this._lodLevel = 0;
          return _this;
        }

        var _proto = WebGLTexture.prototype;

        _proto.initialize = function initialize(info, isSwapchainTexture) {
          var texInfo = info;
          var viewInfo = info;

          if ('texture' in info) {
            texInfo = viewInfo.texture.info;
            this._isTextureView = true;
          }

          this._info.copy(texInfo);

          this._isPowerOf2 = IsPowerOf2(this._info.width) && IsPowerOf2(this._info.height);
          this._size = FormatSurfaceSize(this._info.format, this.width, this.height, this.depth, this._info.levelCount) * this._info.layerCount;

          if (!this._isTextureView) {
            this._gpuTexture = {
              type: texInfo.type,
              format: texInfo.format,
              usage: texInfo.usage,
              width: texInfo.width,
              height: texInfo.height,
              depth: texInfo.depth,
              size: this._size,
              arrayLayer: texInfo.layerCount,
              mipLevel: texInfo.levelCount,
              samples: texInfo.samples,
              flags: texInfo.flags,
              isPowerOf2: this._isPowerOf2,
              glTarget: 0,
              glInternalFmt: 0,
              glFormat: 0,
              glType: 0,
              glUsage: 0,
              glTexture: null,
              glRenderbuffer: null,
              glWrapS: 0,
              glWrapT: 0,
              glMinFilter: 0,
              glMagFilter: 0,
              isSwapchainTexture: isSwapchainTexture || false
            };

            if (!this._gpuTexture.isSwapchainTexture) {
              WebGLCmdFuncCreateTexture(WebGLDeviceManager.instance, this._gpuTexture);
              WebGLDeviceManager.instance.memoryStatus.textureSize += this._size;
            }

            this._viewInfo.texture = this;
            this._viewInfo.type = info.type;
            this._viewInfo.format = info.format;
            this._viewInfo.baseLevel = 0;
            this._viewInfo.levelCount = info.levelCount;
            this._viewInfo.baseLayer = 0;
            this._viewInfo.layerCount = info.layerCount;
          } else {
            this._viewInfo.copy(viewInfo);

            this._lodLevel = viewInfo.baseLevel;
            this._gpuTexture = viewInfo.texture._gpuTexture;
          }
        };

        _proto.destroy = function destroy() {
          if (!this._isTextureView && this._gpuTexture) {
            WebGLCmdFuncDestroyTexture(WebGLDeviceManager.instance, this._gpuTexture);
            WebGLDeviceManager.instance.memoryStatus.textureSize -= this._size;
            this._gpuTexture = null;
          }
        };

        _proto.getGLTextureHandle = function getGLTextureHandle() {
          var gpuTexture = this._gpuTexture;

          if (!gpuTexture) {
            return 0;
          }

          if (gpuTexture.glTexture) {
            return gpuTexture.glTexture;
          } else if (gpuTexture.glRenderbuffer) {
            return gpuTexture.glRenderbuffer;
          }

          return 0;
        };

        _proto.resize = function resize(width, height) {
          if (this._info.width === width && this._info.height === height) {
            return;
          }

          if (this._info.levelCount === WebGLTexture.getLevelCount(this._info.width, this._info.height)) {
            this._info.levelCount = WebGLTexture.getLevelCount(width, height);
          } else if (this._info.levelCount > 1) {
            this._info.levelCount = Math.min(this._info.levelCount, WebGLTexture.getLevelCount(width, height));
          }

          var oldSize = this._size;
          this._info.width = width;
          this._info.height = height;
          this._size = FormatSurfaceSize(this._info.format, this.width, this.height, this.depth, this._info.levelCount) * this._info.layerCount;

          if (!this._isTextureView && this._gpuTexture) {
            this._gpuTexture.width = width;
            this._gpuTexture.height = height;
            this._gpuTexture.size = this._size;

            if (!this._gpuTexture.isSwapchainTexture) {
              WebGLCmdFuncResizeTexture(WebGLDeviceManager.instance, this._gpuTexture);
              WebGLDeviceManager.instance.memoryStatus.textureSize -= oldSize;
              WebGLDeviceManager.instance.memoryStatus.textureSize += this._size;
            }
          }
        };

        _proto.initAsSwapchainTexture = function initAsSwapchainTexture(info) {
          var texInfo = new TextureInfo();
          texInfo.format = info.format;
          texInfo.usage = FormatInfos[info.format].hasDepth ? TextureUsageBit.DEPTH_STENCIL_ATTACHMENT : TextureUsageBit.COLOR_ATTACHMENT;
          texInfo.width = info.width;
          texInfo.height = info.height;
          this.initialize(texInfo, true);
        };

        _createClass(WebGLTexture, [{
          key: "gpuTexture",
          get: function get() {
            return this._gpuTexture;
          }
        }, {
          key: "lodLevel",
          get: function get() {
            return this._lodLevel;
          }
        }]);

        return WebGLTexture;
      }(Texture);

      var eventWebGLContextLost = 'webglcontextlost';

      function initStates(gl) {
        gl.activeTexture(gl.TEXTURE0);
        gl.pixelStorei(gl.PACK_ALIGNMENT, 1);
        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        gl.enable(gl.SCISSOR_TEST);
        gl.enable(gl.CULL_FACE);
        gl.cullFace(gl.BACK);
        gl.frontFace(gl.CCW);
        gl.disable(gl.POLYGON_OFFSET_FILL);
        gl.polygonOffset(0.0, 0.0);
        gl.enable(gl.DEPTH_TEST);
        gl.depthMask(true);
        gl.depthFunc(gl.LESS);
        gl.depthRange(0.0, 1.0);
        gl.stencilFuncSeparate(gl.FRONT, gl.ALWAYS, 1, 0xffff);
        gl.stencilOpSeparate(gl.FRONT, gl.KEEP, gl.KEEP, gl.KEEP);
        gl.stencilMaskSeparate(gl.FRONT, 0xffff);
        gl.stencilFuncSeparate(gl.BACK, gl.ALWAYS, 1, 0xffff);
        gl.stencilOpSeparate(gl.BACK, gl.KEEP, gl.KEEP, gl.KEEP);
        gl.stencilMaskSeparate(gl.BACK, 0xffff);
        gl.disable(gl.STENCIL_TEST);
        gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
        gl.disable(gl.BLEND);
        gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);
        gl.blendFuncSeparate(gl.ONE, gl.ZERO, gl.ONE, gl.ZERO);
        gl.colorMask(true, true, true, true);
        gl.blendColor(0.0, 0.0, 0.0, 0.0);
      }

      function getExtension(gl, ext) {
        var prefixes = ['', 'WEBKIT_', 'MOZ_'];

        for (var i = 0; i < prefixes.length; ++i) {
          var _ext = gl.getExtension(prefixes[i] + ext);

          if (_ext) {
            return _ext;
          }
        }

        return null;
      }

      function getExtensions(gl) {
        var res = {
          EXT_texture_filter_anisotropic: getExtension(gl, 'EXT_texture_filter_anisotropic'),
          EXT_blend_minmax: getExtension(gl, 'EXT_blend_minmax'),
          EXT_frag_depth: getExtension(gl, 'EXT_frag_depth'),
          EXT_shader_texture_lod: getExtension(gl, 'EXT_shader_texture_lod'),
          EXT_sRGB: getExtension(gl, 'EXT_sRGB'),
          OES_vertex_array_object: getExtension(gl, 'OES_vertex_array_object'),
          EXT_color_buffer_half_float: getExtension(gl, 'EXT_color_buffer_half_float'),
          WEBGL_color_buffer_float: getExtension(gl, 'WEBGL_color_buffer_float'),
          WEBGL_compressed_texture_etc1: getExtension(gl, 'WEBGL_compressed_texture_etc1'),
          WEBGL_compressed_texture_etc: getExtension(gl, 'WEBGL_compressed_texture_etc'),
          WEBGL_compressed_texture_pvrtc: getExtension(gl, 'WEBGL_compressed_texture_pvrtc'),
          WEBGL_compressed_texture_s3tc: getExtension(gl, 'WEBGL_compressed_texture_s3tc'),
          WEBGL_compressed_texture_s3tc_srgb: getExtension(gl, 'WEBGL_compressed_texture_s3tc_srgb'),
          WEBGL_debug_shaders: getExtension(gl, 'WEBGL_debug_shaders'),
          WEBGL_draw_buffers: getExtension(gl, 'WEBGL_draw_buffers'),
          WEBGL_lose_context: getExtension(gl, 'WEBGL_lose_context'),
          WEBGL_depth_texture: getExtension(gl, 'WEBGL_depth_texture'),
          OES_texture_half_float: getExtension(gl, 'OES_texture_half_float'),
          OES_texture_half_float_linear: getExtension(gl, 'OES_texture_half_float_linear'),
          OES_texture_float: getExtension(gl, 'OES_texture_float'),
          OES_texture_float_linear: getExtension(gl, 'OES_texture_float_linear'),
          OES_standard_derivatives: getExtension(gl, 'OES_standard_derivatives'),
          OES_element_index_uint: getExtension(gl, 'OES_element_index_uint'),
          ANGLE_instanced_arrays: getExtension(gl, 'ANGLE_instanced_arrays'),
          WEBGL_debug_renderer_info: getExtension(gl, 'WEBGL_debug_renderer_info'),
          WEBGL_multi_draw: null,
          WEBGL_compressed_texture_astc: null,
          destroyShadersImmediately: true,
          noCompressedTexSubImage2D: false,
          isLocationActive: function isLocationActive(glLoc) {
            return !!glLoc;
          },
          useVAO: false
        };
        {
          if (systemInfo.os !== OS.IOS || systemInfo.osMainVersion !== 14 || !systemInfo.isBrowser) {
            res.WEBGL_compressed_texture_astc = getExtension(gl, 'WEBGL_compressed_texture_astc');
          }

          if (systemInfo.os !== OS.ANDROID && systemInfo.os !== OS.IOS) {
            res.WEBGL_multi_draw = getExtension(gl, 'WEBGL_multi_draw');
          }

          if (systemInfo.browserType === BrowserType.UC) {
            res.ANGLE_instanced_arrays = null;
          }

          if (systemInfo.os === OS.IOS && systemInfo.osMainVersion <= 10 || WECHAT ) {
            res.destroyShadersImmediately = false;
          }
        }

        if (res.OES_vertex_array_object) {
          res.useVAO = true;
        }

        return res;
      }
      function getContext(canvas) {
        var context = null;

        try {
          var webGLCtxAttribs = {
            alpha: macro.ENABLE_TRANSPARENT_CANVAS,
            antialias: EDITOR || macro.ENABLE_WEBGL_ANTIALIAS,
            depth: true,
            stencil: true,
            premultipliedAlpha: false,
            preserveDrawingBuffer: false,
            powerPreference: 'default',
            failIfMajorPerformanceCaveat: false
          };
          context = canvas.getContext('webgl', webGLCtxAttribs);
        } catch (err) {
          return null;
        }

        return context;
      }
      var WebGLSwapchain = function (_Swapchain) {
        _inheritsLoose(WebGLSwapchain, _Swapchain);

        function WebGLSwapchain() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Swapchain.call.apply(_Swapchain, [this].concat(args)) || this;
          _this.stateCache = new WebGLStateCache();
          _this.cmdAllocator = new WebGLCommandAllocator();
          _this.nullTex2D = null;
          _this.nullTexCube = null;
          _this._canvas = null;
          _this._webGLContextLostHandler = null;
          _this._extensions = null;
          _this._blitManager = null;
          return _this;
        }

        var _proto = WebGLSwapchain.prototype;

        _proto.initialize = function initialize(info) {
          this._canvas = info.windowHandle;
          this._webGLContextLostHandler = this._onWebGLContextLost.bind(this);

          this._canvas.addEventListener(eventWebGLContextLost, this._onWebGLContextLost);

          var gl = WebGLDeviceManager.instance.gl;
          this.stateCache.initialize(WebGLDeviceManager.instance.capabilities.maxTextureUnits, WebGLDeviceManager.instance.capabilities.maxVertexAttributes);
          this._extensions = getExtensions(gl);
          initStates(gl);
          var colorFmt = Format.RGBA8;
          var depthStencilFmt = Format.DEPTH_STENCIL;
          var depthBits = gl.getParameter(gl.DEPTH_BITS);
          var stencilBits = gl.getParameter(gl.STENCIL_BITS);

          if (depthBits && stencilBits) depthStencilFmt = Format.DEPTH_STENCIL;else if (depthBits) depthStencilFmt = Format.DEPTH;
          this._colorTexture = new WebGLTexture();

          this._colorTexture.initAsSwapchainTexture({
            swapchain: this,
            format: colorFmt,
            width: info.width,
            height: info.height
          });

          this._depthStencilTexture = new WebGLTexture();

          this._depthStencilTexture.initAsSwapchainTexture({
            swapchain: this,
            format: depthStencilFmt,
            width: info.width,
            height: info.height
          });

          this.nullTex2D = WebGLDeviceManager.instance.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.SAMPLED, Format.RGBA8, 2, 2, TextureFlagBit.GEN_MIPMAP));
          this.nullTexCube = WebGLDeviceManager.instance.createTexture(new TextureInfo(TextureType.CUBE, TextureUsageBit.SAMPLED, Format.RGBA8, 2, 2, TextureFlagBit.GEN_MIPMAP, 6));
          var nullTexRegion = new BufferTextureCopy();
          nullTexRegion.texExtent.width = 2;
          nullTexRegion.texExtent.height = 2;
          var nullTexBuff = new Uint8Array(this.nullTex2D.size);
          nullTexBuff.fill(0);
          WebGLDeviceManager.instance.copyBuffersToTexture([nullTexBuff], this.nullTex2D, [nullTexRegion]);
          nullTexRegion.texSubres.layerCount = 6;
          WebGLDeviceManager.instance.copyBuffersToTexture([nullTexBuff, nullTexBuff, nullTexBuff, nullTexBuff, nullTexBuff, nullTexBuff], this.nullTexCube, [nullTexRegion]);
          this._blitManager = new IWebGLBlitManager();
        };

        _proto.destroy = function destroy() {
          if (this._canvas && this._webGLContextLostHandler) {
            this._canvas.removeEventListener(eventWebGLContextLost, this._webGLContextLostHandler);

            this._webGLContextLostHandler = null;
          }

          if (this.nullTex2D) {
            this.nullTex2D.destroy();
            this.nullTex2D = null;
          }

          if (this.nullTexCube) {
            this.nullTexCube.destroy();
            this.nullTexCube = null;
          }

          if (this._blitManager) {
            this._blitManager.destroy();

            this._blitManager = null;
          }

          this._extensions = null;
          this._canvas = null;
        };

        _proto.resize = function resize(width, height, surfaceTransform) {
          if (this._colorTexture.width !== width || this._colorTexture.height !== height) {
            debug("Resizing swapchain: " + width + "x" + height);
            this._canvas.width = width;
            this._canvas.height = height;

            this._colorTexture.resize(width, height);

            this._depthStencilTexture.resize(width, height);
          }
        };

        _proto._onWebGLContextLost = function _onWebGLContextLost(event) {
          warnID(11000);
          warn(event);
        };

        _createClass(WebGLSwapchain, [{
          key: "extensions",
          get: function get() {
            return this._extensions;
          }
        }, {
          key: "blitManager",
          get: function get() {
            return this._blitManager;
          }
        }]);

        return WebGLSwapchain;
      }(Swapchain);

      var WebGLDevice = exports('WebGLDevice', function (_Device) {
        _inheritsLoose(WebGLDevice, _Device);

        function WebGLDevice() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Device.call.apply(_Device, [this].concat(args)) || this;
          _this._swapchain = null;
          _this._context = null;
          _this._bindingMappings = null;
          _this._textureExclusive = new Array(Format.COUNT);
          return _this;
        }

        var _proto = WebGLDevice.prototype;

        _proto.initialize = function initialize(info) {
          WebGLDeviceManager.setInstance(this);
          this._gfxAPI = API.WEBGL;
          var mapping = this._bindingMappingInfo = info.bindingMappingInfo;
          var blockOffsets = [];
          var samplerTextureOffsets = [];
          var firstSet = mapping.setIndices[0];
          blockOffsets[firstSet] = 0;
          samplerTextureOffsets[firstSet] = 0;

          for (var i = 1; i < mapping.setIndices.length; ++i) {
            var curSet = mapping.setIndices[i];
            var prevSet = mapping.setIndices[i - 1];
            blockOffsets[curSet] = mapping.maxBlockCounts[prevSet] + blockOffsets[prevSet];
            samplerTextureOffsets[curSet] = mapping.maxSamplerTextureCounts[prevSet] + samplerTextureOffsets[prevSet];
          }

          for (var _i = 0; _i < mapping.setIndices.length; ++_i) {
            var _curSet = mapping.setIndices[_i];
            samplerTextureOffsets[_curSet] -= mapping.maxBlockCounts[_curSet];
          }

          this._bindingMappings = {
            blockOffsets: blockOffsets,
            samplerTextureOffsets: samplerTextureOffsets,
            flexibleSet: mapping.setIndices[mapping.setIndices.length - 1]
          };
          var gl = this._context = getContext(Device.canvas);

          if (!gl) {
            console.error('This device does not support WebGL.');
            return false;
          }

          this._queue = this.createQueue(new QueueInfo(QueueType.GRAPHICS));
          this._cmdBuff = this.createCommandBuffer(new CommandBufferInfo(this._queue));
          this._caps.maxVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
          this._caps.maxVertexUniformVectors = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);
          this._caps.maxFragmentUniformVectors = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);
          this._caps.maxTextureUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
          this._caps.maxVertexTextureUnits = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
          this._caps.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
          this._caps.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);
          this._caps.maxArrayTextureLayers = 0;
          this._caps.max3DTextureSize = 0;
          this._caps.maxUniformBufferBindings = 16;
          var extensions = gl.getSupportedExtensions();
          var extStr = '';

          if (extensions) {
            for (var _iterator = _createForOfIteratorHelperLoose(extensions), _step; !(_step = _iterator()).done;) {
              var ext = _step.value;
              extStr += ext + " ";
            }
          }

          var exts = getExtensions(gl);

          if (exts.WEBGL_debug_renderer_info) {
            this._renderer = gl.getParameter(exts.WEBGL_debug_renderer_info.UNMASKED_RENDERER_WEBGL);
            this._vendor = gl.getParameter(exts.WEBGL_debug_renderer_info.UNMASKED_VENDOR_WEBGL);
          } else {
            this._renderer = gl.getParameter(gl.RENDERER);
            this._vendor = gl.getParameter(gl.VENDOR);
          }

          var version = gl.getParameter(gl.VERSION);

          this._features.fill(false);

          this.initFormatFeatures(exts);

          if (exts.EXT_blend_minmax) {
            this._features[Feature$1.BLEND_MINMAX] = true;
          }

          if (exts.OES_element_index_uint) {
            this._features[Feature$1.ELEMENT_INDEX_UINT] = true;
          }

          if (exts.ANGLE_instanced_arrays) {
            this._features[Feature$1.INSTANCED_ARRAYS] = true;
          }

          if (exts.WEBGL_draw_buffers) {
            this._features[Feature$1.MULTIPLE_RENDER_TARGETS] = true;
          }

          var compressedFormat = '';

          if (this.getFormatFeatures(Format.ETC_RGB8)) {
            compressedFormat += 'etc1 ';
          }

          if (this.getFormatFeatures(Format.ETC2_RGB8)) {
            compressedFormat += 'etc2 ';
          }

          if (this.getFormatFeatures(Format.BC1)) {
            compressedFormat += 'dxt ';
          }

          if (this.getFormatFeatures(Format.PVRTC_RGB2)) {
            compressedFormat += 'pvrtc ';
          }

          if (this.getFormatFeatures(Format.ASTC_RGBA_4X4)) {
            compressedFormat += 'astc ';
          }

          debug('WebGL device initialized.');
          debug("RENDERER: " + this._renderer);
          debug("VENDOR: " + this._vendor);
          debug("VERSION: " + version);
          debug("COMPRESSED_FORMAT: " + compressedFormat);
          debug("EXTENSIONS: " + extStr);
          return true;
        };

        _proto.destroy = function destroy() {
          if (this._queue) {
            this._queue.destroy();

            this._queue = null;
          }

          if (this._cmdBuff) {
            this._cmdBuff.destroy();

            this._cmdBuff = null;
          }

          this._swapchain = null;
        };

        _proto.flushCommands = function flushCommands(cmdBuffs) {};

        _proto.acquire = function acquire(swapchains) {};

        _proto.present = function present() {
          var queue = this._queue;
          this._numDrawCalls = queue.numDrawCalls;
          this._numInstances = queue.numInstances;
          this._numTris = queue.numTris;
          queue.clear();
        };

        _proto.initFormatFeatures = function initFormatFeatures(exts) {
          this._formatFeatures.fill(FormatFeatureBit.NONE);

          this._textureExclusive.fill(true);

          var tempFeature = FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE | FormatFeatureBit.LINEAR_FILTER;
          this._formatFeatures[Format.RGB8] = tempFeature;
          this._formatFeatures[Format.R5G6B5] = tempFeature;
          this._textureExclusive[Format.R5G6B5] = false;
          this._formatFeatures[Format.RGBA8] = tempFeature;
          this._formatFeatures[Format.RGBA4] = tempFeature;
          this._textureExclusive[Format.RGBA4] = false;
          this._formatFeatures[Format.RGB5A1] = tempFeature;
          this._textureExclusive[Format.RGB5A1] = false;
          this._formatFeatures[Format.DEPTH] = FormatFeatureBit.RENDER_TARGET;
          this._textureExclusive[Format.DEPTH] = false;
          this._formatFeatures[Format.DEPTH_STENCIL] = FormatFeatureBit.RENDER_TARGET;
          this._textureExclusive[Format.DEPTH_STENCIL] = false;
          this._formatFeatures[Format.R8I] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
          this._formatFeatures[Format.RG8I] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
          this._formatFeatures[Format.RGB8I] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
          this._formatFeatures[Format.RGBA8I] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
          this._formatFeatures[Format.R8UI] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
          this._formatFeatures[Format.RG8UI] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
          this._formatFeatures[Format.RGB8UI] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
          this._formatFeatures[Format.RGBA8UI] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
          this._formatFeatures[Format.R8I] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
          this._formatFeatures[Format.RG8I] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
          this._formatFeatures[Format.RGB8I] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
          this._formatFeatures[Format.RGBA8I] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
          this._formatFeatures[Format.R8UI] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
          this._formatFeatures[Format.RG8UI] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
          this._formatFeatures[Format.RGB8UI] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
          this._formatFeatures[Format.RGBA8UI] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
          this._formatFeatures[Format.R32F] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
          this._formatFeatures[Format.RG32F] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
          this._formatFeatures[Format.RGB32F] |= FormatFeatureBit.VERTEX_ATTRIBUTE;
          this._formatFeatures[Format.RGBA32F] |= FormatFeatureBit.VERTEX_ATTRIBUTE;

          if (exts.EXT_sRGB) {
            this._formatFeatures[Format.SRGB8] = tempFeature;
            this._formatFeatures[Format.SRGB8_A8] = tempFeature;
            this._textureExclusive[Format.SRGB8_A8] = false;
          }

          if (exts.WEBGL_depth_texture) {
            this._formatFeatures[Format.DEPTH] |= tempFeature;
            this._formatFeatures[Format.DEPTH_STENCIL] |= tempFeature;
          }

          if (exts.WEBGL_color_buffer_float) {
            this._formatFeatures[Format.RGB32F] |= FormatFeatureBit.RENDER_TARGET;
            this._formatFeatures[Format.RGBA32F] |= FormatFeatureBit.RENDER_TARGET;
            this._textureExclusive[Format.RGB32F] = false;
            this._textureExclusive[Format.RGBA32F] = false;
          }

          if (exts.EXT_color_buffer_half_float) {
            this._formatFeatures[Format.RGB16F] |= FormatFeatureBit.RENDER_TARGET;
            this._formatFeatures[Format.RGBA16F] |= FormatFeatureBit.RENDER_TARGET;
            this._textureExclusive[Format.RGB16F] = false;
            this._textureExclusive[Format.RGBA16F] = false;
          }

          if (exts.OES_texture_float) {
            this._formatFeatures[Format.RGB32F] |= FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE;
            this._formatFeatures[Format.RGBA32F] |= FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE;
          }

          if (exts.OES_texture_half_float) {
            this._formatFeatures[Format.RGB16F] |= FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE;
            this._formatFeatures[Format.RGBA16F] |= FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE;
          }

          if (exts.OES_texture_float_linear) {
            this._formatFeatures[Format.RGB32F] |= FormatFeatureBit.LINEAR_FILTER;
            this._formatFeatures[Format.RGBA32F] |= FormatFeatureBit.LINEAR_FILTER;
          }

          if (exts.OES_texture_half_float_linear) {
            this._formatFeatures[Format.RGB16F] |= FormatFeatureBit.LINEAR_FILTER;
            this._formatFeatures[Format.RGBA16F] |= FormatFeatureBit.LINEAR_FILTER;
          }

          var compressedFeature = FormatFeatureBit.SAMPLED_TEXTURE | FormatFeatureBit.LINEAR_FILTER;

          if (exts.WEBGL_compressed_texture_etc1) {
            this._formatFeatures[Format.ETC_RGB8] = compressedFeature;
          }

          if (exts.WEBGL_compressed_texture_etc) {
            this._formatFeatures[Format.ETC2_RGB8] = compressedFeature;
            this._formatFeatures[Format.ETC2_RGBA8] = compressedFeature;
            this._formatFeatures[Format.ETC2_SRGB8] = compressedFeature;
            this._formatFeatures[Format.ETC2_SRGB8_A8] = compressedFeature;
            this._formatFeatures[Format.ETC2_RGB8_A1] = compressedFeature;
            this._formatFeatures[Format.ETC2_SRGB8_A1] = compressedFeature;
          }

          if (exts.WEBGL_compressed_texture_s3tc) {
            this._formatFeatures[Format.BC1] = compressedFeature;
            this._formatFeatures[Format.BC1_ALPHA] = compressedFeature;
            this._formatFeatures[Format.BC1_SRGB] = compressedFeature;
            this._formatFeatures[Format.BC1_SRGB_ALPHA] = compressedFeature;
            this._formatFeatures[Format.BC2] = compressedFeature;
            this._formatFeatures[Format.BC2_SRGB] = compressedFeature;
            this._formatFeatures[Format.BC3] = compressedFeature;
            this._formatFeatures[Format.BC3_SRGB] = compressedFeature;
          }

          if (exts.WEBGL_compressed_texture_pvrtc) {
            this._formatFeatures[Format.PVRTC_RGB2] |= compressedFeature;
            this._formatFeatures[Format.PVRTC_RGBA2] |= compressedFeature;
            this._formatFeatures[Format.PVRTC_RGB4] |= compressedFeature;
            this._formatFeatures[Format.PVRTC_RGBA4] |= compressedFeature;
          }

          if (exts.WEBGL_compressed_texture_astc) {
            this._formatFeatures[Format.ASTC_RGBA_4X4] |= compressedFeature;
            this._formatFeatures[Format.ASTC_RGBA_5X4] |= compressedFeature;
            this._formatFeatures[Format.ASTC_RGBA_5X5] |= compressedFeature;
            this._formatFeatures[Format.ASTC_RGBA_6X5] |= compressedFeature;
            this._formatFeatures[Format.ASTC_RGBA_6X6] |= compressedFeature;
            this._formatFeatures[Format.ASTC_RGBA_8X5] |= compressedFeature;
            this._formatFeatures[Format.ASTC_RGBA_8X6] |= compressedFeature;
            this._formatFeatures[Format.ASTC_RGBA_8X8] |= compressedFeature;
            this._formatFeatures[Format.ASTC_RGBA_10X5] |= compressedFeature;
            this._formatFeatures[Format.ASTC_RGBA_10X6] |= compressedFeature;
            this._formatFeatures[Format.ASTC_RGBA_10X8] |= compressedFeature;
            this._formatFeatures[Format.ASTC_RGBA_10X10] |= compressedFeature;
            this._formatFeatures[Format.ASTC_RGBA_12X10] |= compressedFeature;
            this._formatFeatures[Format.ASTC_RGBA_12X12] |= compressedFeature;
            this._formatFeatures[Format.ASTC_SRGBA_4X4] |= compressedFeature;
            this._formatFeatures[Format.ASTC_SRGBA_5X4] |= compressedFeature;
            this._formatFeatures[Format.ASTC_SRGBA_5X5] |= compressedFeature;
            this._formatFeatures[Format.ASTC_SRGBA_6X5] |= compressedFeature;
            this._formatFeatures[Format.ASTC_SRGBA_6X6] |= compressedFeature;
            this._formatFeatures[Format.ASTC_SRGBA_8X5] |= compressedFeature;
            this._formatFeatures[Format.ASTC_SRGBA_8X6] |= compressedFeature;
            this._formatFeatures[Format.ASTC_SRGBA_8X8] |= compressedFeature;
            this._formatFeatures[Format.ASTC_SRGBA_10X5] |= compressedFeature;
            this._formatFeatures[Format.ASTC_SRGBA_10X6] |= compressedFeature;
            this._formatFeatures[Format.ASTC_SRGBA_10X8] |= compressedFeature;
            this._formatFeatures[Format.ASTC_SRGBA_10X10] |= compressedFeature;
            this._formatFeatures[Format.ASTC_SRGBA_12X10] |= compressedFeature;
            this._formatFeatures[Format.ASTC_SRGBA_12X12] |= compressedFeature;
          }
        };

        _proto.createCommandBuffer = function createCommandBuffer(info) {
          var Ctor = info.type === CommandBufferType.PRIMARY ? WebGLPrimaryCommandBuffer : WebGLCommandBuffer;
          var cmdBuff = new Ctor();
          cmdBuff.initialize(info);
          return cmdBuff;
        };

        _proto.createSwapchain = function createSwapchain(info) {
          var swapchain = new WebGLSwapchain();
          this._swapchain = swapchain;
          swapchain.initialize(info);
          return swapchain;
        };

        _proto.createBuffer = function createBuffer(info) {
          var buffer = new WebGLBuffer();
          buffer.initialize(info);
          return buffer;
        };

        _proto.createTexture = function createTexture(info) {
          var texture = new WebGLTexture();
          texture.initialize(info);
          return texture;
        };

        _proto.createDescriptorSet = function createDescriptorSet(info) {
          var descriptorSet = new WebGLDescriptorSet();
          descriptorSet.initialize(info);
          return descriptorSet;
        };

        _proto.createShader = function createShader(info) {
          var shader = new WebGLShader();
          shader.initialize(info);
          return shader;
        };

        _proto.createInputAssembler = function createInputAssembler(info) {
          var inputAssembler = new WebGLInputAssembler();
          inputAssembler.initialize(info);
          return inputAssembler;
        };

        _proto.createRenderPass = function createRenderPass(info) {
          var renderPass = new WebGLRenderPass();
          renderPass.initialize(info);
          return renderPass;
        };

        _proto.createFramebuffer = function createFramebuffer(info) {
          var framebuffer = new WebGLFramebuffer();
          framebuffer.initialize(info);
          return framebuffer;
        };

        _proto.createDescriptorSetLayout = function createDescriptorSetLayout(info) {
          var descriptorSetLayout = new WebGLDescriptorSetLayout();
          descriptorSetLayout.initialize(info);
          return descriptorSetLayout;
        };

        _proto.createPipelineLayout = function createPipelineLayout(info) {
          var pipelineLayout = new WebGLPipelineLayout();
          pipelineLayout.initialize(info);
          return pipelineLayout;
        };

        _proto.createPipelineState = function createPipelineState(info) {
          var pipelineState = new WebGLPipelineState();
          pipelineState.initialize(info);
          return pipelineState;
        };

        _proto.createQueue = function createQueue(info) {
          var queue = new WebGLQueue();
          queue.initialize(info);
          return queue;
        };

        _proto.getSampler = function getSampler(info) {
          var hash = Sampler.computeHash(info);

          if (!this._samplers.has(hash)) {
            this._samplers.set(hash, new WebGLSampler(info, hash));
          }

          return this._samplers.get(hash);
        };

        _proto.getSwapchains = function getSwapchains() {
          return [this._swapchain];
        };

        _proto.getGeneralBarrier = function getGeneralBarrier(info) {
          var hash = GeneralBarrier.computeHash(info);

          if (!this._generalBarrierss.has(hash)) {
            this._generalBarrierss.set(hash, new GeneralBarrier(info, hash));
          }

          return this._generalBarrierss.get(hash);
        };

        _proto.getTextureBarrier = function getTextureBarrier(info) {
          var hash = TextureBarrier.computeHash(info);

          if (!this._textureBarriers.has(hash)) {
            this._textureBarriers.set(hash, new TextureBarrier(info, hash));
          }

          return this._textureBarriers.get(hash);
        };

        _proto.getBufferBarrier = function getBufferBarrier(info) {
          var hash = BufferBarrier.computeHash(info);

          if (!this._bufferBarriers.has(hash)) {
            this._bufferBarriers.set(hash, new BufferBarrier(info, hash));
          }

          return this._bufferBarriers.get(hash);
        };

        _proto.copyBuffersToTexture = function copyBuffersToTexture(buffers, texture, regions) {
          WebGLCmdFuncCopyBuffersToTexture(this, buffers, texture.gpuTexture, regions);
        };

        _proto.copyTextureToBuffers = function copyTextureToBuffers(texture, buffers, regions) {
          WebGLCmdFuncCopyTextureToBuffers(this, texture.gpuTexture, buffers, regions);
        };

        _proto.copyTexImagesToTexture = function copyTexImagesToTexture(texImages, texture, regions) {
          WebGLCmdFuncCopyTexImagesToTexture(this, texImages, texture.gpuTexture, regions);
        };

        _createClass(WebGLDevice, [{
          key: "gl",
          get: function get() {
            return this._context;
          }
        }, {
          key: "extensions",
          get: function get() {
            return this._swapchain.extensions;
          }
        }, {
          key: "stateCache",
          get: function get() {
            return this._swapchain.stateCache;
          }
        }, {
          key: "nullTex2D",
          get: function get() {
            return this._swapchain.nullTex2D;
          }
        }, {
          key: "nullTexCube",
          get: function get() {
            return this._swapchain.nullTexCube;
          }
        }, {
          key: "textureExclusive",
          get: function get() {
            return this._textureExclusive;
          }
        }, {
          key: "bindingMappings",
          get: function get() {
            return this._bindingMappings;
          }
        }, {
          key: "blitManager",
          get: function get() {
            return this._swapchain.blitManager;
          }
        }]);

        return WebGLDevice;
      }(Device));

      legacyCC.WebGLDevice = WebGLDevice;

      var WebGL2DescriptorSet = function (_DescriptorSet) {
        _inheritsLoose(WebGL2DescriptorSet, _DescriptorSet);

        function WebGL2DescriptorSet() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _DescriptorSet.call.apply(_DescriptorSet, [this].concat(args)) || this;
          _this._gpuDescriptorSet = null;
          return _this;
        }

        var _proto = WebGL2DescriptorSet.prototype;

        _proto.initialize = function initialize(info) {
          this._layout = info.layout;
          var _gpuDescriptorSetLayo = info.layout.gpuDescriptorSetLayout,
              bindings = _gpuDescriptorSetLayo.bindings,
              descriptorIndices = _gpuDescriptorSetLayo.descriptorIndices,
              descriptorCount = _gpuDescriptorSetLayo.descriptorCount;
          this._buffers = Array(descriptorCount).fill(null);
          this._textures = Array(descriptorCount).fill(null);
          this._samplers = Array(descriptorCount).fill(null);
          var gpuDescriptors = [];
          this._gpuDescriptorSet = {
            gpuDescriptors: gpuDescriptors,
            descriptorIndices: descriptorIndices
          };

          for (var i = 0; i < bindings.length; ++i) {
            var binding = bindings[i];

            for (var j = 0; j < binding.count; j++) {
              gpuDescriptors.push({
                type: binding.descriptorType,
                gpuBuffer: null,
                gpuTextureView: null,
                gpuSampler: null
              });
            }
          }
        };

        _proto.destroy = function destroy() {
          this._layout = null;
          this._gpuDescriptorSet = null;
        };

        _proto.update = function update() {
          if (this._isDirty && this._gpuDescriptorSet) {
            var descriptors = this._gpuDescriptorSet.gpuDescriptors;

            for (var i = 0; i < descriptors.length; ++i) {
              if (descriptors[i].type & DESCRIPTOR_BUFFER_TYPE) {
                if (this._buffers[i]) {
                  descriptors[i].gpuBuffer = this._buffers[i].gpuBuffer;
                }
              } else if (descriptors[i].type & DESCRIPTOR_SAMPLER_TYPE) {
                if (this._textures[i]) {
                  descriptors[i].gpuTextureView = this._textures[i].gpuTextureView;
                }

                if (this._samplers[i]) {
                  descriptors[i].gpuSampler = this._samplers[i].gpuSampler;
                }
              }
            }

            this._isDirty = false;
          }
        };

        _createClass(WebGL2DescriptorSet, [{
          key: "gpuDescriptorSet",
          get: function get() {
            return this._gpuDescriptorSet;
          }
        }]);

        return WebGL2DescriptorSet;
      }(DescriptorSet);

      var WebGL2EXT;

      (function (WebGL2EXT) {
        WebGL2EXT[WebGL2EXT["COMPRESSED_RGB_S3TC_DXT1_EXT"] = 33776] = "COMPRESSED_RGB_S3TC_DXT1_EXT";
        WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_S3TC_DXT1_EXT"] = 33777] = "COMPRESSED_RGBA_S3TC_DXT1_EXT";
        WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_S3TC_DXT3_EXT"] = 33778] = "COMPRESSED_RGBA_S3TC_DXT3_EXT";
        WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_S3TC_DXT5_EXT"] = 33779] = "COMPRESSED_RGBA_S3TC_DXT5_EXT";
        WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB_S3TC_DXT1_EXT"] = 35916] = "COMPRESSED_SRGB_S3TC_DXT1_EXT";
        WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT"] = 35917] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT";
        WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT"] = 35918] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT";
        WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT"] = 35919] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT";
        WebGL2EXT[WebGL2EXT["COMPRESSED_RGB_PVRTC_4BPPV1_IMG"] = 35840] = "COMPRESSED_RGB_PVRTC_4BPPV1_IMG";
        WebGL2EXT[WebGL2EXT["COMPRESSED_RGB_PVRTC_2BPPV1_IMG"] = 35841] = "COMPRESSED_RGB_PVRTC_2BPPV1_IMG";
        WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_PVRTC_4BPPV1_IMG"] = 35842] = "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG";
        WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_PVRTC_2BPPV1_IMG"] = 35843] = "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG";
        WebGL2EXT[WebGL2EXT["COMPRESSED_RGB_ETC1_WEBGL"] = 36196] = "COMPRESSED_RGB_ETC1_WEBGL";
        WebGL2EXT[WebGL2EXT["COMPRESSED_R11_EAC"] = 37488] = "COMPRESSED_R11_EAC";
        WebGL2EXT[WebGL2EXT["COMPRESSED_SIGNED_R11_EAC"] = 37489] = "COMPRESSED_SIGNED_R11_EAC";
        WebGL2EXT[WebGL2EXT["COMPRESSED_RG11_EAC"] = 37490] = "COMPRESSED_RG11_EAC";
        WebGL2EXT[WebGL2EXT["COMPRESSED_SIGNED_RG11_EAC"] = 37491] = "COMPRESSED_SIGNED_RG11_EAC";
        WebGL2EXT[WebGL2EXT["COMPRESSED_RGB8_ETC2"] = 37492] = "COMPRESSED_RGB8_ETC2";
        WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB8_ETC2"] = 37493] = "COMPRESSED_SRGB8_ETC2";
        WebGL2EXT[WebGL2EXT["COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2"] = 37494] = "COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2";
        WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2"] = 37495] = "COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2";
        WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA8_ETC2_EAC"] = 37496] = "COMPRESSED_RGBA8_ETC2_EAC";
        WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB8_ALPHA8_ETC2_EAC"] = 37497] = "COMPRESSED_SRGB8_ALPHA8_ETC2_EAC";
        WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_ASTC_4x4_KHR"] = 37808] = "COMPRESSED_RGBA_ASTC_4x4_KHR";
        WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_ASTC_5x4_KHR"] = 37809] = "COMPRESSED_RGBA_ASTC_5x4_KHR";
        WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_ASTC_5x5_KHR"] = 37810] = "COMPRESSED_RGBA_ASTC_5x5_KHR";
        WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_ASTC_6x5_KHR"] = 37811] = "COMPRESSED_RGBA_ASTC_6x5_KHR";
        WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_ASTC_6x6_KHR"] = 37812] = "COMPRESSED_RGBA_ASTC_6x6_KHR";
        WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_ASTC_8x5_KHR"] = 37813] = "COMPRESSED_RGBA_ASTC_8x5_KHR";
        WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_ASTC_8x6_KHR"] = 37814] = "COMPRESSED_RGBA_ASTC_8x6_KHR";
        WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_ASTC_8x8_KHR"] = 37815] = "COMPRESSED_RGBA_ASTC_8x8_KHR";
        WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_ASTC_10x5_KHR"] = 37816] = "COMPRESSED_RGBA_ASTC_10x5_KHR";
        WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_ASTC_10x6_KHR"] = 37817] = "COMPRESSED_RGBA_ASTC_10x6_KHR";
        WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_ASTC_10x8_KHR"] = 37818] = "COMPRESSED_RGBA_ASTC_10x8_KHR";
        WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_ASTC_10x10_KHR"] = 37819] = "COMPRESSED_RGBA_ASTC_10x10_KHR";
        WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_ASTC_12x10_KHR"] = 37820] = "COMPRESSED_RGBA_ASTC_12x10_KHR";
        WebGL2EXT[WebGL2EXT["COMPRESSED_RGBA_ASTC_12x12_KHR"] = 37821] = "COMPRESSED_RGBA_ASTC_12x12_KHR";
        WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR"] = 37840] = "COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR";
        WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR"] = 37841] = "COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR";
        WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR"] = 37842] = "COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR";
        WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR"] = 37843] = "COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR";
        WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR"] = 37844] = "COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR";
        WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR"] = 37845] = "COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR";
        WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR"] = 37846] = "COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR";
        WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR"] = 37847] = "COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR";
        WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR"] = 37848] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR";
        WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR"] = 37849] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR";
        WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR"] = 37850] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR";
        WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR"] = 37851] = "COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR";
        WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR"] = 37852] = "COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR";
        WebGL2EXT[WebGL2EXT["COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR"] = 37853] = "COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR";
      })(WebGL2EXT || (WebGL2EXT = {}));

      var WebGL2DeviceManager = function () {
        function WebGL2DeviceManager() {}

        WebGL2DeviceManager.setInstance = function setInstance(instance) {
          WebGL2DeviceManager._instance = instance;
        };

        _createClass(WebGL2DeviceManager, null, [{
          key: "instance",
          get: function get() {
            return WebGL2DeviceManager._instance;
          }
        }]);

        return WebGL2DeviceManager;
      }();
      WebGL2DeviceManager._instance = null;

      var WebGLWraps$1 = [0x2901, 0x8370, 0x812F, 0x812F];

      var _f32v4 = new Float32Array(4);

      function GFXFormatToWebGLType$1(format, gl) {
        switch (format) {
          case Format.R8:
            return gl.UNSIGNED_BYTE;

          case Format.R8SN:
            return gl.BYTE;

          case Format.R8UI:
            return gl.UNSIGNED_BYTE;

          case Format.R8I:
            return gl.BYTE;

          case Format.R16F:
            return gl.HALF_FLOAT;

          case Format.R16UI:
            return gl.UNSIGNED_SHORT;

          case Format.R16I:
            return gl.SHORT;

          case Format.R32F:
            return gl.FLOAT;

          case Format.R32UI:
            return gl.UNSIGNED_INT;

          case Format.R32I:
            return gl.INT;

          case Format.RG8:
            return gl.UNSIGNED_BYTE;

          case Format.RG8SN:
            return gl.BYTE;

          case Format.RG8UI:
            return gl.UNSIGNED_BYTE;

          case Format.RG8I:
            return gl.BYTE;

          case Format.RG16F:
            return gl.HALF_FLOAT;

          case Format.RG16UI:
            return gl.UNSIGNED_SHORT;

          case Format.RG16I:
            return gl.SHORT;

          case Format.RG32F:
            return gl.FLOAT;

          case Format.RG32UI:
            return gl.UNSIGNED_INT;

          case Format.RG32I:
            return gl.INT;

          case Format.RGB8:
            return gl.UNSIGNED_BYTE;

          case Format.SRGB8:
            return gl.UNSIGNED_BYTE;

          case Format.RGB8SN:
            return gl.BYTE;

          case Format.RGB8UI:
            return gl.UNSIGNED_BYTE;

          case Format.RGB8I:
            return gl.BYTE;

          case Format.RGB16F:
            return gl.HALF_FLOAT;

          case Format.RGB16UI:
            return gl.UNSIGNED_SHORT;

          case Format.RGB16I:
            return gl.SHORT;

          case Format.RGB32F:
            return gl.FLOAT;

          case Format.RGB32UI:
            return gl.UNSIGNED_INT;

          case Format.RGB32I:
            return gl.INT;

          case Format.BGRA8:
            return gl.UNSIGNED_BYTE;

          case Format.RGBA8:
            return gl.UNSIGNED_BYTE;

          case Format.SRGB8_A8:
            return gl.UNSIGNED_BYTE;

          case Format.RGBA8SN:
            return gl.BYTE;

          case Format.RGBA8UI:
            return gl.UNSIGNED_BYTE;

          case Format.RGBA8I:
            return gl.BYTE;

          case Format.RGBA16F:
            return gl.HALF_FLOAT;

          case Format.RGBA16UI:
            return gl.UNSIGNED_SHORT;

          case Format.RGBA16I:
            return gl.SHORT;

          case Format.RGBA32F:
            return gl.FLOAT;

          case Format.RGBA32UI:
            return gl.UNSIGNED_INT;

          case Format.RGBA32I:
            return gl.INT;

          case Format.R5G6B5:
            return gl.UNSIGNED_SHORT_5_6_5;

          case Format.R11G11B10F:
            return gl.UNSIGNED_INT_10F_11F_11F_REV;

          case Format.RGB5A1:
            return gl.UNSIGNED_SHORT_5_5_5_1;

          case Format.RGBA4:
            return gl.UNSIGNED_SHORT_4_4_4_4;

          case Format.RGB10A2:
            return gl.UNSIGNED_INT_2_10_10_10_REV;

          case Format.RGB10A2UI:
            return gl.UNSIGNED_INT_2_10_10_10_REV;

          case Format.RGB9E5:
            return gl.FLOAT;

          case Format.DEPTH:
            return gl.FLOAT;

          case Format.DEPTH_STENCIL:
            return gl.UNSIGNED_INT_24_8;

          case Format.BC1:
            return gl.UNSIGNED_BYTE;

          case Format.BC1_SRGB:
            return gl.UNSIGNED_BYTE;

          case Format.BC2:
            return gl.UNSIGNED_BYTE;

          case Format.BC2_SRGB:
            return gl.UNSIGNED_BYTE;

          case Format.BC3:
            return gl.UNSIGNED_BYTE;

          case Format.BC3_SRGB:
            return gl.UNSIGNED_BYTE;

          case Format.BC4:
            return gl.UNSIGNED_BYTE;

          case Format.BC4_SNORM:
            return gl.BYTE;

          case Format.BC5:
            return gl.UNSIGNED_BYTE;

          case Format.BC5_SNORM:
            return gl.BYTE;

          case Format.BC6H_SF16:
            return gl.FLOAT;

          case Format.BC6H_UF16:
            return gl.FLOAT;

          case Format.BC7:
            return gl.UNSIGNED_BYTE;

          case Format.BC7_SRGB:
            return gl.UNSIGNED_BYTE;

          case Format.ETC_RGB8:
            return gl.UNSIGNED_BYTE;

          case Format.ETC2_RGB8:
            return gl.UNSIGNED_BYTE;

          case Format.ETC2_SRGB8:
            return gl.UNSIGNED_BYTE;

          case Format.ETC2_RGB8_A1:
            return gl.UNSIGNED_BYTE;

          case Format.ETC2_SRGB8_A1:
            return gl.UNSIGNED_BYTE;

          case Format.EAC_R11:
            return gl.UNSIGNED_BYTE;

          case Format.EAC_R11SN:
            return gl.BYTE;

          case Format.EAC_RG11:
            return gl.UNSIGNED_BYTE;

          case Format.EAC_RG11SN:
            return gl.BYTE;

          case Format.PVRTC_RGB2:
            return gl.UNSIGNED_BYTE;

          case Format.PVRTC_RGBA2:
            return gl.UNSIGNED_BYTE;

          case Format.PVRTC_RGB4:
            return gl.UNSIGNED_BYTE;

          case Format.PVRTC_RGBA4:
            return gl.UNSIGNED_BYTE;

          case Format.PVRTC2_2BPP:
            return gl.UNSIGNED_BYTE;

          case Format.PVRTC2_4BPP:
            return gl.UNSIGNED_BYTE;

          case Format.ASTC_RGBA_4X4:
          case Format.ASTC_RGBA_5X4:
          case Format.ASTC_RGBA_5X5:
          case Format.ASTC_RGBA_6X5:
          case Format.ASTC_RGBA_6X6:
          case Format.ASTC_RGBA_8X5:
          case Format.ASTC_RGBA_8X6:
          case Format.ASTC_RGBA_8X8:
          case Format.ASTC_RGBA_10X5:
          case Format.ASTC_RGBA_10X6:
          case Format.ASTC_RGBA_10X8:
          case Format.ASTC_RGBA_10X10:
          case Format.ASTC_RGBA_12X10:
          case Format.ASTC_RGBA_12X12:
          case Format.ASTC_SRGBA_4X4:
          case Format.ASTC_SRGBA_5X4:
          case Format.ASTC_SRGBA_5X5:
          case Format.ASTC_SRGBA_6X5:
          case Format.ASTC_SRGBA_6X6:
          case Format.ASTC_SRGBA_8X5:
          case Format.ASTC_SRGBA_8X6:
          case Format.ASTC_SRGBA_8X8:
          case Format.ASTC_SRGBA_10X5:
          case Format.ASTC_SRGBA_10X6:
          case Format.ASTC_SRGBA_10X8:
          case Format.ASTC_SRGBA_10X10:
          case Format.ASTC_SRGBA_12X10:
          case Format.ASTC_SRGBA_12X12:
            return gl.UNSIGNED_BYTE;

          default:
            {
              return gl.UNSIGNED_BYTE;
            }
        }
      }
      function GFXFormatToWebGLInternalFormat$1(format, gl) {
        switch (format) {
          case Format.A8:
            return gl.ALPHA;

          case Format.L8:
            return gl.LUMINANCE;

          case Format.LA8:
            return gl.LUMINANCE_ALPHA;

          case Format.R8:
            return gl.R8;

          case Format.R8SN:
            return gl.R8_SNORM;

          case Format.R8UI:
            return gl.R8UI;

          case Format.R8I:
            return gl.R8I;

          case Format.RG8:
            return gl.RG8;

          case Format.RG8SN:
            return gl.RG8_SNORM;

          case Format.RG8UI:
            return gl.RG8UI;

          case Format.RG8I:
            return gl.RG8I;

          case Format.RGB8:
            return gl.RGB8;

          case Format.RGB8SN:
            return gl.RGB8_SNORM;

          case Format.RGB8UI:
            return gl.RGB8UI;

          case Format.RGB8I:
            return gl.RGB8I;

          case Format.BGRA8:
            return gl.RGBA8;

          case Format.RGBA8:
            return gl.RGBA8;

          case Format.RGBA8SN:
            return gl.RGBA8_SNORM;

          case Format.RGBA8UI:
            return gl.RGBA8UI;

          case Format.RGBA8I:
            return gl.RGBA8I;

          case Format.R16I:
            return gl.R16I;

          case Format.R16UI:
            return gl.R16UI;

          case Format.R16F:
            return gl.R16F;

          case Format.RG16I:
            return gl.RG16I;

          case Format.RG16UI:
            return gl.RG16UI;

          case Format.RG16F:
            return gl.RG16F;

          case Format.RGB16I:
            return gl.RGB16I;

          case Format.RGB16UI:
            return gl.RGB16UI;

          case Format.RGB16F:
            return gl.RGB16F;

          case Format.RGBA16I:
            return gl.RGBA16I;

          case Format.RGBA16UI:
            return gl.RGBA16UI;

          case Format.RGBA16F:
            return gl.RGBA16F;

          case Format.R32I:
            return gl.R32I;

          case Format.R32UI:
            return gl.R32UI;

          case Format.R32F:
            return gl.R32F;

          case Format.RG32I:
            return gl.RG32I;

          case Format.RG32UI:
            return gl.RG32UI;

          case Format.RG32F:
            return gl.RG32F;

          case Format.RGB32I:
            return gl.RGB32I;

          case Format.RGB32UI:
            return gl.RGB32UI;

          case Format.RGB32F:
            return gl.RGB32F;

          case Format.RGBA32I:
            return gl.RGBA32I;

          case Format.RGBA32UI:
            return gl.RGBA32UI;

          case Format.RGBA32F:
            return gl.RGBA32F;

          case Format.R5G6B5:
            return gl.RGB565;

          case Format.RGB5A1:
            return gl.RGB5_A1;

          case Format.RGBA4:
            return gl.RGBA4;

          case Format.SRGB8:
            return gl.SRGB8;

          case Format.SRGB8_A8:
            return gl.SRGB8_ALPHA8;

          case Format.RGB10A2:
            return gl.RGB10_A2;

          case Format.RGB10A2UI:
            return gl.RGB10_A2UI;

          case Format.R11G11B10F:
            return gl.R11F_G11F_B10F;

          case Format.DEPTH:
            return gl.DEPTH_COMPONENT32F;

          case Format.DEPTH_STENCIL:
            return gl.DEPTH24_STENCIL8;

          case Format.BC1:
            return WebGL2EXT.COMPRESSED_RGB_S3TC_DXT1_EXT;

          case Format.BC1_ALPHA:
            return WebGL2EXT.COMPRESSED_RGBA_S3TC_DXT1_EXT;

          case Format.BC1_SRGB:
            return WebGL2EXT.COMPRESSED_SRGB_S3TC_DXT1_EXT;

          case Format.BC1_SRGB_ALPHA:
            return WebGL2EXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;

          case Format.BC2:
            return WebGL2EXT.COMPRESSED_RGBA_S3TC_DXT3_EXT;

          case Format.BC2_SRGB:
            return WebGL2EXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;

          case Format.BC3:
            return WebGL2EXT.COMPRESSED_RGBA_S3TC_DXT5_EXT;

          case Format.BC3_SRGB:
            return WebGL2EXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;

          case Format.ETC_RGB8:
            return WebGL2EXT.COMPRESSED_RGB_ETC1_WEBGL;

          case Format.ETC2_RGB8:
            return WebGL2EXT.COMPRESSED_RGB8_ETC2;

          case Format.ETC2_SRGB8:
            return WebGL2EXT.COMPRESSED_SRGB8_ETC2;

          case Format.ETC2_RGB8_A1:
            return WebGL2EXT.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2;

          case Format.ETC2_SRGB8_A1:
            return WebGL2EXT.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2;

          case Format.ETC2_RGBA8:
            return WebGL2EXT.COMPRESSED_RGBA8_ETC2_EAC;

          case Format.ETC2_SRGB8_A8:
            return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC;

          case Format.EAC_R11:
            return WebGL2EXT.COMPRESSED_R11_EAC;

          case Format.EAC_R11SN:
            return WebGL2EXT.COMPRESSED_SIGNED_R11_EAC;

          case Format.EAC_RG11:
            return WebGL2EXT.COMPRESSED_RG11_EAC;

          case Format.EAC_RG11SN:
            return WebGL2EXT.COMPRESSED_SIGNED_RG11_EAC;

          case Format.PVRTC_RGB2:
            return WebGL2EXT.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;

          case Format.PVRTC_RGBA2:
            return WebGL2EXT.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

          case Format.PVRTC_RGB4:
            return WebGL2EXT.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;

          case Format.PVRTC_RGBA4:
            return WebGL2EXT.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;

          case Format.ASTC_RGBA_4X4:
            return WebGL2EXT.COMPRESSED_RGBA_ASTC_4x4_KHR;

          case Format.ASTC_RGBA_5X4:
            return WebGL2EXT.COMPRESSED_RGBA_ASTC_5x4_KHR;

          case Format.ASTC_RGBA_5X5:
            return WebGL2EXT.COMPRESSED_RGBA_ASTC_5x5_KHR;

          case Format.ASTC_RGBA_6X5:
            return WebGL2EXT.COMPRESSED_RGBA_ASTC_6x5_KHR;

          case Format.ASTC_RGBA_6X6:
            return WebGL2EXT.COMPRESSED_RGBA_ASTC_6x6_KHR;

          case Format.ASTC_RGBA_8X5:
            return WebGL2EXT.COMPRESSED_RGBA_ASTC_8x5_KHR;

          case Format.ASTC_RGBA_8X6:
            return WebGL2EXT.COMPRESSED_RGBA_ASTC_8x6_KHR;

          case Format.ASTC_RGBA_8X8:
            return WebGL2EXT.COMPRESSED_RGBA_ASTC_8x8_KHR;

          case Format.ASTC_RGBA_10X5:
            return WebGL2EXT.COMPRESSED_RGBA_ASTC_10x5_KHR;

          case Format.ASTC_RGBA_10X6:
            return WebGL2EXT.COMPRESSED_RGBA_ASTC_10x6_KHR;

          case Format.ASTC_RGBA_10X8:
            return WebGL2EXT.COMPRESSED_RGBA_ASTC_10x8_KHR;

          case Format.ASTC_RGBA_10X10:
            return WebGL2EXT.COMPRESSED_RGBA_ASTC_10x10_KHR;

          case Format.ASTC_RGBA_12X10:
            return WebGL2EXT.COMPRESSED_RGBA_ASTC_12x10_KHR;

          case Format.ASTC_RGBA_12X12:
            return WebGL2EXT.COMPRESSED_RGBA_ASTC_12x12_KHR;

          case Format.ASTC_SRGBA_4X4:
            return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR;

          case Format.ASTC_SRGBA_5X4:
            return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR;

          case Format.ASTC_SRGBA_5X5:
            return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR;

          case Format.ASTC_SRGBA_6X5:
            return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR;

          case Format.ASTC_SRGBA_6X6:
            return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR;

          case Format.ASTC_SRGBA_8X5:
            return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR;

          case Format.ASTC_SRGBA_8X6:
            return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR;

          case Format.ASTC_SRGBA_8X8:
            return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR;

          case Format.ASTC_SRGBA_10X5:
            return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR;

          case Format.ASTC_SRGBA_10X6:
            return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR;

          case Format.ASTC_SRGBA_10X8:
            return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR;

          case Format.ASTC_SRGBA_10X10:
            return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR;

          case Format.ASTC_SRGBA_12X10:
            return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR;

          case Format.ASTC_SRGBA_12X12:
            return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR;

          default:
            {
              console.error('Unsupported Format, convert to WebGL internal format failed.');
              return gl.RGBA;
            }
        }
      }
      function GFXFormatToWebGLFormat$1(format, gl) {
        switch (format) {
          case Format.A8:
            return gl.ALPHA;

          case Format.L8:
            return gl.LUMINANCE;

          case Format.LA8:
            return gl.LUMINANCE_ALPHA;

          case Format.R8:
          case Format.R8SN:
            return gl.RED;

          case Format.R8UI:
          case Format.R8I:
            return gl.RED;

          case Format.RG8:
          case Format.RG8SN:
          case Format.RG8UI:
          case Format.RG8I:
            return gl.RG;

          case Format.RGB8:
          case Format.RGB8SN:
          case Format.RGB8UI:
          case Format.RGB8I:
            return gl.RGB;

          case Format.BGRA8:
          case Format.RGBA8:
          case Format.RGBA8SN:
          case Format.RGBA8UI:
          case Format.RGBA8I:
            return gl.RGBA;

          case Format.R16UI:
          case Format.R16I:
          case Format.R16F:
            return gl.RED;

          case Format.RG16UI:
          case Format.RG16I:
          case Format.RG16F:
            return gl.RG;

          case Format.RGB16UI:
          case Format.RGB16I:
          case Format.RGB16F:
            return gl.RGB;

          case Format.RGBA16UI:
          case Format.RGBA16I:
          case Format.RGBA16F:
            return gl.RGBA;

          case Format.R32UI:
          case Format.R32I:
          case Format.R32F:
            return gl.RED;

          case Format.RG32UI:
          case Format.RG32I:
          case Format.RG32F:
            return gl.RG;

          case Format.RGB32UI:
          case Format.RGB32I:
          case Format.RGB32F:
            return gl.RGB;

          case Format.RGBA32UI:
          case Format.RGBA32I:
          case Format.RGBA32F:
            return gl.RGBA;

          case Format.RGB10A2:
            return gl.RGBA;

          case Format.R11G11B10F:
            return gl.RGB;

          case Format.R5G6B5:
            return gl.RGB;

          case Format.RGB5A1:
            return gl.RGBA;

          case Format.RGBA4:
            return gl.RGBA;

          case Format.SRGB8:
            return gl.RGB;

          case Format.SRGB8_A8:
            return gl.RGBA;

          case Format.DEPTH:
            return gl.DEPTH_COMPONENT;

          case Format.DEPTH_STENCIL:
            return gl.DEPTH_STENCIL;

          case Format.BC1:
            return WebGL2EXT.COMPRESSED_RGB_S3TC_DXT1_EXT;

          case Format.BC1_ALPHA:
            return WebGL2EXT.COMPRESSED_RGBA_S3TC_DXT1_EXT;

          case Format.BC1_SRGB:
            return WebGL2EXT.COMPRESSED_SRGB_S3TC_DXT1_EXT;

          case Format.BC1_SRGB_ALPHA:
            return WebGL2EXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;

          case Format.BC2:
            return WebGL2EXT.COMPRESSED_RGBA_S3TC_DXT3_EXT;

          case Format.BC2_SRGB:
            return WebGL2EXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;

          case Format.BC3:
            return WebGL2EXT.COMPRESSED_RGBA_S3TC_DXT5_EXT;

          case Format.BC3_SRGB:
            return WebGL2EXT.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;

          case Format.ETC_RGB8:
            return WebGL2EXT.COMPRESSED_RGB_ETC1_WEBGL;

          case Format.ETC2_RGB8:
            return WebGL2EXT.COMPRESSED_RGB8_ETC2;

          case Format.ETC2_SRGB8:
            return WebGL2EXT.COMPRESSED_SRGB8_ETC2;

          case Format.ETC2_RGB8_A1:
            return WebGL2EXT.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2;

          case Format.ETC2_SRGB8_A1:
            return WebGL2EXT.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2;

          case Format.ETC2_RGBA8:
            return WebGL2EXT.COMPRESSED_RGBA8_ETC2_EAC;

          case Format.ETC2_SRGB8_A8:
            return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC;

          case Format.EAC_R11:
            return WebGL2EXT.COMPRESSED_R11_EAC;

          case Format.EAC_R11SN:
            return WebGL2EXT.COMPRESSED_SIGNED_R11_EAC;

          case Format.EAC_RG11:
            return WebGL2EXT.COMPRESSED_RG11_EAC;

          case Format.EAC_RG11SN:
            return WebGL2EXT.COMPRESSED_SIGNED_RG11_EAC;

          case Format.PVRTC_RGB2:
            return WebGL2EXT.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;

          case Format.PVRTC_RGBA2:
            return WebGL2EXT.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

          case Format.PVRTC_RGB4:
            return WebGL2EXT.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;

          case Format.PVRTC_RGBA4:
            return WebGL2EXT.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;

          case Format.ASTC_RGBA_4X4:
            return WebGL2EXT.COMPRESSED_RGBA_ASTC_4x4_KHR;

          case Format.ASTC_RGBA_5X4:
            return WebGL2EXT.COMPRESSED_RGBA_ASTC_5x4_KHR;

          case Format.ASTC_RGBA_5X5:
            return WebGL2EXT.COMPRESSED_RGBA_ASTC_5x5_KHR;

          case Format.ASTC_RGBA_6X5:
            return WebGL2EXT.COMPRESSED_RGBA_ASTC_6x5_KHR;

          case Format.ASTC_RGBA_6X6:
            return WebGL2EXT.COMPRESSED_RGBA_ASTC_6x6_KHR;

          case Format.ASTC_RGBA_8X5:
            return WebGL2EXT.COMPRESSED_RGBA_ASTC_8x5_KHR;

          case Format.ASTC_RGBA_8X6:
            return WebGL2EXT.COMPRESSED_RGBA_ASTC_8x6_KHR;

          case Format.ASTC_RGBA_8X8:
            return WebGL2EXT.COMPRESSED_RGBA_ASTC_8x8_KHR;

          case Format.ASTC_RGBA_10X5:
            return WebGL2EXT.COMPRESSED_RGBA_ASTC_10x5_KHR;

          case Format.ASTC_RGBA_10X6:
            return WebGL2EXT.COMPRESSED_RGBA_ASTC_10x6_KHR;

          case Format.ASTC_RGBA_10X8:
            return WebGL2EXT.COMPRESSED_RGBA_ASTC_10x8_KHR;

          case Format.ASTC_RGBA_10X10:
            return WebGL2EXT.COMPRESSED_RGBA_ASTC_10x10_KHR;

          case Format.ASTC_RGBA_12X10:
            return WebGL2EXT.COMPRESSED_RGBA_ASTC_12x10_KHR;

          case Format.ASTC_RGBA_12X12:
            return WebGL2EXT.COMPRESSED_RGBA_ASTC_12x12_KHR;

          case Format.ASTC_SRGBA_4X4:
            return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR;

          case Format.ASTC_SRGBA_5X4:
            return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR;

          case Format.ASTC_SRGBA_5X5:
            return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR;

          case Format.ASTC_SRGBA_6X5:
            return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR;

          case Format.ASTC_SRGBA_6X6:
            return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR;

          case Format.ASTC_SRGBA_8X5:
            return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR;

          case Format.ASTC_SRGBA_8X6:
            return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR;

          case Format.ASTC_SRGBA_8X8:
            return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR;

          case Format.ASTC_SRGBA_10X5:
            return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR;

          case Format.ASTC_SRGBA_10X6:
            return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR;

          case Format.ASTC_SRGBA_10X8:
            return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR;

          case Format.ASTC_SRGBA_10X10:
            return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR;

          case Format.ASTC_SRGBA_12X10:
            return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR;

          case Format.ASTC_SRGBA_12X12:
            return WebGL2EXT.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR;

          default:
            {
              console.error('Unsupported Format, convert to WebGL format failed.');
              return gl.RGBA;
            }
        }
      }

      function GFXTypeToWebGLType$1(type, gl) {
        switch (type) {
          case Type.BOOL:
            return gl.BOOL;

          case Type.BOOL2:
            return gl.BOOL_VEC2;

          case Type.BOOL3:
            return gl.BOOL_VEC3;

          case Type.BOOL4:
            return gl.BOOL_VEC4;

          case Type.INT:
            return gl.INT;

          case Type.INT2:
            return gl.INT_VEC2;

          case Type.INT3:
            return gl.INT_VEC3;

          case Type.INT4:
            return gl.INT_VEC4;

          case Type.UINT:
            return gl.UNSIGNED_INT;

          case Type.FLOAT:
            return gl.FLOAT;

          case Type.FLOAT2:
            return gl.FLOAT_VEC2;

          case Type.FLOAT3:
            return gl.FLOAT_VEC3;

          case Type.FLOAT4:
            return gl.FLOAT_VEC4;

          case Type.MAT2:
            return gl.FLOAT_MAT2;

          case Type.MAT2X3:
            return gl.FLOAT_MAT2x3;

          case Type.MAT2X4:
            return gl.FLOAT_MAT2x4;

          case Type.MAT3X2:
            return gl.FLOAT_MAT3x2;

          case Type.MAT3:
            return gl.FLOAT_MAT3;

          case Type.MAT3X4:
            return gl.FLOAT_MAT3x4;

          case Type.MAT4X2:
            return gl.FLOAT_MAT4x2;

          case Type.MAT4X3:
            return gl.FLOAT_MAT4x3;

          case Type.MAT4:
            return gl.FLOAT_MAT4;

          case Type.SAMPLER2D:
            return gl.SAMPLER_2D;

          case Type.SAMPLER2D_ARRAY:
            return gl.SAMPLER_2D_ARRAY;

          case Type.SAMPLER3D:
            return gl.SAMPLER_3D;

          case Type.SAMPLER_CUBE:
            return gl.SAMPLER_CUBE;

          default:
            {
              console.error('Unsupported GLType, convert to GL type failed.');
              return Type.UNKNOWN;
            }
        }
      }

      function WebGLTypeToGFXType$1(glType, gl) {
        switch (glType) {
          case gl.BOOL:
            return Type.BOOL;

          case gl.BOOL_VEC2:
            return Type.BOOL2;

          case gl.BOOL_VEC3:
            return Type.BOOL3;

          case gl.BOOL_VEC4:
            return Type.BOOL4;

          case gl.INT:
            return Type.INT;

          case gl.INT_VEC2:
            return Type.INT2;

          case gl.INT_VEC3:
            return Type.INT3;

          case gl.INT_VEC4:
            return Type.INT4;

          case gl.UNSIGNED_INT:
            return Type.UINT;

          case gl.UNSIGNED_INT_VEC2:
            return Type.UINT2;

          case gl.UNSIGNED_INT_VEC3:
            return Type.UINT3;

          case gl.UNSIGNED_INT_VEC4:
            return Type.UINT4;

          case gl.FLOAT:
            return Type.FLOAT;

          case gl.FLOAT_VEC2:
            return Type.FLOAT2;

          case gl.FLOAT_VEC3:
            return Type.FLOAT3;

          case gl.FLOAT_VEC4:
            return Type.FLOAT4;

          case gl.FLOAT_MAT2:
            return Type.MAT2;

          case gl.FLOAT_MAT2x3:
            return Type.MAT2X3;

          case gl.FLOAT_MAT2x4:
            return Type.MAT2X4;

          case gl.FLOAT_MAT3x2:
            return Type.MAT3X2;

          case gl.FLOAT_MAT3:
            return Type.MAT3;

          case gl.FLOAT_MAT3x4:
            return Type.MAT3X4;

          case gl.FLOAT_MAT4x2:
            return Type.MAT4X2;

          case gl.FLOAT_MAT4x3:
            return Type.MAT4X3;

          case gl.FLOAT_MAT4:
            return Type.MAT4;

          case gl.SAMPLER_2D:
            return Type.SAMPLER2D;

          case gl.SAMPLER_2D_ARRAY:
            return Type.SAMPLER2D_ARRAY;

          case gl.SAMPLER_3D:
            return Type.SAMPLER3D;

          case gl.SAMPLER_CUBE:
            return Type.SAMPLER_CUBE;

          default:
            {
              console.error('Unsupported GLType, convert to Type failed.');
              return Type.UNKNOWN;
            }
        }
      }

      function WebGLGetTypeSize$1(glType, gl) {
        switch (glType) {
          case gl.BOOL:
            return 4;

          case gl.BOOL_VEC2:
            return 8;

          case gl.BOOL_VEC3:
            return 12;

          case gl.BOOL_VEC4:
            return 16;

          case gl.INT:
            return 4;

          case gl.INT_VEC2:
            return 8;

          case gl.INT_VEC3:
            return 12;

          case gl.INT_VEC4:
            return 16;

          case gl.UNSIGNED_INT:
            return 4;

          case gl.UNSIGNED_INT_VEC2:
            return 8;

          case gl.UNSIGNED_INT_VEC3:
            return 12;

          case gl.UNSIGNED_INT_VEC4:
            return 16;

          case gl.FLOAT:
            return 4;

          case gl.FLOAT_VEC2:
            return 8;

          case gl.FLOAT_VEC3:
            return 12;

          case gl.FLOAT_VEC4:
            return 16;

          case gl.FLOAT_MAT2:
            return 16;

          case gl.FLOAT_MAT2x3:
            return 24;

          case gl.FLOAT_MAT2x4:
            return 32;

          case gl.FLOAT_MAT3x2:
            return 24;

          case gl.FLOAT_MAT3:
            return 36;

          case gl.FLOAT_MAT3x4:
            return 48;

          case gl.FLOAT_MAT4x2:
            return 32;

          case gl.FLOAT_MAT4x3:
            return 48;

          case gl.FLOAT_MAT4:
            return 64;

          case gl.SAMPLER_2D:
            return 4;

          case gl.SAMPLER_2D_ARRAY:
            return 4;

          case gl.SAMPLER_2D_ARRAY_SHADOW:
            return 4;

          case gl.SAMPLER_3D:
            return 4;

          case gl.SAMPLER_CUBE:
            return 4;

          case gl.INT_SAMPLER_2D:
            return 4;

          case gl.INT_SAMPLER_2D_ARRAY:
            return 4;

          case gl.INT_SAMPLER_3D:
            return 4;

          case gl.INT_SAMPLER_CUBE:
            return 4;

          case gl.UNSIGNED_INT_SAMPLER_2D:
            return 4;

          case gl.UNSIGNED_INT_SAMPLER_2D_ARRAY:
            return 4;

          case gl.UNSIGNED_INT_SAMPLER_3D:
            return 4;

          case gl.UNSIGNED_INT_SAMPLER_CUBE:
            return 4;

          default:
            {
              console.error('Unsupported GLType, get type failed.');
              return 0;
            }
        }
      }

      function WebGLGetComponentCount$1(glType, gl) {
        switch (glType) {
          case gl.FLOAT_MAT2:
            return 2;

          case gl.FLOAT_MAT2x3:
            return 2;

          case gl.FLOAT_MAT2x4:
            return 2;

          case gl.FLOAT_MAT3x2:
            return 3;

          case gl.FLOAT_MAT3:
            return 3;

          case gl.FLOAT_MAT3x4:
            return 3;

          case gl.FLOAT_MAT4x2:
            return 4;

          case gl.FLOAT_MAT4x3:
            return 4;

          case gl.FLOAT_MAT4:
            return 4;

          default:
            {
              return 1;
            }
        }
      }

      var WebGLCmpFuncs$1 = [0x0200, 0x0201, 0x0202, 0x0203, 0x0204, 0x0205, 0x0206, 0x0207];
      var WebGLStencilOps$1 = [0x0000, 0x1E00, 0x1E01, 0x1E02, 0x1E03, 0x150A, 0x8507, 0x8508];
      var WebGLBlendOps$1 = [0x8006, 0x800A, 0x800B, 0x8007, 0x8008];
      var WebGLBlendFactors$1 = [0x0000, 0x0001, 0x0302, 0x0304, 0x0303, 0x0305, 0x0300, 0x0306, 0x0301, 0x0307, 0x0308, 0x8001, 0x8002, 0x8003, 0x8004];
      var WebGL2Cmd;

      (function (WebGL2Cmd) {
        WebGL2Cmd[WebGL2Cmd["BEGIN_RENDER_PASS"] = 0] = "BEGIN_RENDER_PASS";
        WebGL2Cmd[WebGL2Cmd["END_RENDER_PASS"] = 1] = "END_RENDER_PASS";
        WebGL2Cmd[WebGL2Cmd["BIND_STATES"] = 2] = "BIND_STATES";
        WebGL2Cmd[WebGL2Cmd["DRAW"] = 3] = "DRAW";
        WebGL2Cmd[WebGL2Cmd["UPDATE_BUFFER"] = 4] = "UPDATE_BUFFER";
        WebGL2Cmd[WebGL2Cmd["COPY_BUFFER_TO_TEXTURE"] = 5] = "COPY_BUFFER_TO_TEXTURE";
        WebGL2Cmd[WebGL2Cmd["BLIT_TEXTURE"] = 6] = "BLIT_TEXTURE";
        WebGL2Cmd[WebGL2Cmd["COUNT"] = 7] = "COUNT";
      })(WebGL2Cmd || (WebGL2Cmd = {}));

      var WebGL2CmdObject = function WebGL2CmdObject(type) {
        this.cmdType = void 0;
        this.refCount = 0;
        this.cmdType = type;
      };
      var WebGL2CmdBeginRenderPass = function (_WebGL2CmdObject) {
        _inheritsLoose(WebGL2CmdBeginRenderPass, _WebGL2CmdObject);

        function WebGL2CmdBeginRenderPass() {
          var _this;

          _this = _WebGL2CmdObject.call(this, WebGL2Cmd.BEGIN_RENDER_PASS) || this;
          _this.gpuRenderPass = null;
          _this.gpuFramebuffer = null;
          _this.renderArea = new Rect$1();
          _this.clearColors = [];
          _this.clearDepth = 1.0;
          _this.clearStencil = 0;
          return _this;
        }

        var _proto = WebGL2CmdBeginRenderPass.prototype;

        _proto.clear = function clear() {
          this.gpuFramebuffer = null;
          this.clearColors.length = 0;
        };

        return WebGL2CmdBeginRenderPass;
      }(WebGL2CmdObject);
      var WebGL2CmdBindStates = function (_WebGL2CmdObject2) {
        _inheritsLoose(WebGL2CmdBindStates, _WebGL2CmdObject2);

        function WebGL2CmdBindStates() {
          var _this2;

          _this2 = _WebGL2CmdObject2.call(this, WebGL2Cmd.BIND_STATES) || this;
          _this2.gpuPipelineState = null;
          _this2.gpuInputAssembler = null;
          _this2.gpuDescriptorSets = [];
          _this2.dynamicOffsets = [];
          _this2.dynamicStates = new DynamicStates();
          return _this2;
        }

        var _proto2 = WebGL2CmdBindStates.prototype;

        _proto2.clear = function clear() {
          this.gpuPipelineState = null;
          this.gpuInputAssembler = null;
          this.gpuDescriptorSets.length = 0;
          this.dynamicOffsets.length = 0;
        };

        return WebGL2CmdBindStates;
      }(WebGL2CmdObject);
      var WebGL2CmdDraw = function (_WebGL2CmdObject3) {
        _inheritsLoose(WebGL2CmdDraw, _WebGL2CmdObject3);

        function WebGL2CmdDraw() {
          var _this3;

          _this3 = _WebGL2CmdObject3.call(this, WebGL2Cmd.DRAW) || this;
          _this3.drawInfo = new DrawInfo();
          return _this3;
        }

        var _proto3 = WebGL2CmdDraw.prototype;

        _proto3.clear = function clear() {};

        return WebGL2CmdDraw;
      }(WebGL2CmdObject);
      var WebGL2CmdUpdateBuffer = function (_WebGL2CmdObject4) {
        _inheritsLoose(WebGL2CmdUpdateBuffer, _WebGL2CmdObject4);

        function WebGL2CmdUpdateBuffer() {
          var _this4;

          _this4 = _WebGL2CmdObject4.call(this, WebGL2Cmd.UPDATE_BUFFER) || this;
          _this4.gpuBuffer = null;
          _this4.buffer = null;
          _this4.offset = 0;
          _this4.size = 0;
          return _this4;
        }

        var _proto4 = WebGL2CmdUpdateBuffer.prototype;

        _proto4.clear = function clear() {
          this.gpuBuffer = null;
          this.buffer = null;
        };

        return WebGL2CmdUpdateBuffer;
      }(WebGL2CmdObject);
      var WebGL2CmdCopyBufferToTexture = function (_WebGL2CmdObject5) {
        _inheritsLoose(WebGL2CmdCopyBufferToTexture, _WebGL2CmdObject5);

        function WebGL2CmdCopyBufferToTexture() {
          var _this5;

          _this5 = _WebGL2CmdObject5.call(this, WebGL2Cmd.COPY_BUFFER_TO_TEXTURE) || this;
          _this5.gpuTexture = null;
          _this5.buffers = [];
          _this5.regions = [];
          return _this5;
        }

        var _proto5 = WebGL2CmdCopyBufferToTexture.prototype;

        _proto5.clear = function clear() {
          this.gpuTexture = null;
          this.buffers.length = 0;
          this.regions.length = 0;
        };

        return WebGL2CmdCopyBufferToTexture;
      }(WebGL2CmdObject);
      var WebGL2CmdBlitTexture = function (_WebGL2CmdObject6) {
        _inheritsLoose(WebGL2CmdBlitTexture, _WebGL2CmdObject6);

        function WebGL2CmdBlitTexture() {
          var _this6;

          _this6 = _WebGL2CmdObject6.call(this, WebGL2Cmd.BLIT_TEXTURE) || this;
          _this6.srcTexture = null;
          _this6.dstTexture = null;
          _this6.regions = [];
          _this6.filter = Filter.LINEAR;
          return _this6;
        }

        var _proto6 = WebGL2CmdBlitTexture.prototype;

        _proto6.clear = function clear() {
          this.srcTexture = null;
          this.dstTexture = null;
          this.regions.length = 0;
        };

        return WebGL2CmdBlitTexture;
      }(WebGL2CmdObject);
      var WebGL2CmdPackage = function () {
        function WebGL2CmdPackage() {
          this.cmds = new CachedArray(1);
          this.beginRenderPassCmds = new CachedArray(1);
          this.bindStatesCmds = new CachedArray(1);
          this.drawCmds = new CachedArray(1);
          this.updateBufferCmds = new CachedArray(1);
          this.copyBufferToTextureCmds = new CachedArray(1);
          this.blitTextureCmds = new CachedArray(1);
        }

        var _proto7 = WebGL2CmdPackage.prototype;

        _proto7.clearCmds = function clearCmds(allocator) {
          if (this.beginRenderPassCmds.length) {
            allocator.beginRenderPassCmdPool.freeCmds(this.beginRenderPassCmds);
            this.beginRenderPassCmds.clear();
          }

          if (this.bindStatesCmds.length) {
            allocator.bindStatesCmdPool.freeCmds(this.bindStatesCmds);
            this.bindStatesCmds.clear();
          }

          if (this.drawCmds.length) {
            allocator.drawCmdPool.freeCmds(this.drawCmds);
            this.drawCmds.clear();
          }

          if (this.updateBufferCmds.length) {
            allocator.updateBufferCmdPool.freeCmds(this.updateBufferCmds);
            this.updateBufferCmds.clear();
          }

          if (this.copyBufferToTextureCmds.length) {
            allocator.copyBufferToTextureCmdPool.freeCmds(this.copyBufferToTextureCmds);
            this.copyBufferToTextureCmds.clear();
          }

          if (this.blitTextureCmds.length) {
            allocator.blitTextureCmdPool.freeCmds(this.blitTextureCmds);
            this.blitTextureCmds.clear();
          }

          this.cmds.clear();
        };

        return WebGL2CmdPackage;
      }();
      function WebGL2CmdFuncCreateBuffer(device, gpuBuffer) {
        var gl = device.gl;
        var cache = device.stateCache;
        var glUsage = gpuBuffer.memUsage & MemoryUsageBit.HOST ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;

        if (gpuBuffer.usage & BufferUsageBit.VERTEX) {
          gpuBuffer.glTarget = gl.ARRAY_BUFFER;
          var glBuffer = gl.createBuffer();

          if (glBuffer) {
            gpuBuffer.glBuffer = glBuffer;

            if (gpuBuffer.size > 0) {
              if (device.extensions.useVAO) {
                if (cache.glVAO) {
                  gl.bindVertexArray(null);
                  cache.glVAO = null;
                }
              }

              gfxStateCache$1.gpuInputAssembler = null;

              if (device.stateCache.glArrayBuffer !== gpuBuffer.glBuffer) {
                gl.bindBuffer(gl.ARRAY_BUFFER, gpuBuffer.glBuffer);
                device.stateCache.glArrayBuffer = gpuBuffer.glBuffer;
              }

              gl.bufferData(gl.ARRAY_BUFFER, gpuBuffer.size, glUsage);
              gl.bindBuffer(gl.ARRAY_BUFFER, null);
              device.stateCache.glArrayBuffer = null;
            }
          }
        } else if (gpuBuffer.usage & BufferUsageBit.INDEX) {
          gpuBuffer.glTarget = gl.ELEMENT_ARRAY_BUFFER;

          var _glBuffer = gl.createBuffer();

          if (_glBuffer) {
            gpuBuffer.glBuffer = _glBuffer;

            if (gpuBuffer.size > 0) {
              if (device.extensions.useVAO) {
                if (cache.glVAO) {
                  gl.bindVertexArray(null);
                  cache.glVAO = null;
                }
              }

              gfxStateCache$1.gpuInputAssembler = null;

              if (device.stateCache.glElementArrayBuffer !== gpuBuffer.glBuffer) {
                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.glBuffer);
                device.stateCache.glElementArrayBuffer = gpuBuffer.glBuffer;
              }

              gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.size, glUsage);
              gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
              device.stateCache.glElementArrayBuffer = null;
            }
          }
        } else if (gpuBuffer.usage & BufferUsageBit.UNIFORM) {
          gpuBuffer.glTarget = gl.UNIFORM_BUFFER;

          var _glBuffer2 = gl.createBuffer();

          if (_glBuffer2 && gpuBuffer.size > 0) {
            gpuBuffer.glBuffer = _glBuffer2;

            if (device.stateCache.glUniformBuffer !== gpuBuffer.glBuffer) {
              gl.bindBuffer(gl.UNIFORM_BUFFER, gpuBuffer.glBuffer);
              device.stateCache.glUniformBuffer = gpuBuffer.glBuffer;
            }

            gl.bufferData(gl.UNIFORM_BUFFER, gpuBuffer.size, glUsage);
            gl.bindBuffer(gl.UNIFORM_BUFFER, null);
            device.stateCache.glUniformBuffer = null;
          }
        } else if (gpuBuffer.usage & BufferUsageBit.INDIRECT) {
          gpuBuffer.glTarget = gl.NONE;
        } else if (gpuBuffer.usage & BufferUsageBit.TRANSFER_DST) {
          gpuBuffer.glTarget = gl.NONE;
        } else if (gpuBuffer.usage & BufferUsageBit.TRANSFER_SRC) {
          gpuBuffer.glTarget = gl.NONE;
        } else {
          console.error('Unsupported BufferType, create buffer failed.');
          gpuBuffer.glTarget = gl.NONE;
        }
      }
      function WebGL2CmdFuncDestroyBuffer(device, gpuBuffer) {
        var gl = device.gl;
        var cache = device.stateCache;

        if (gpuBuffer.glBuffer) {
          switch (gpuBuffer.glTarget) {
            case gl.ARRAY_BUFFER:
              if (device.extensions.useVAO) {
                if (cache.glVAO) {
                  gl.bindVertexArray(null);
                  device.stateCache.glVAO = null;
                }
              }

              gfxStateCache$1.gpuInputAssembler = null;
              gl.bindBuffer(gl.ARRAY_BUFFER, null);
              device.stateCache.glArrayBuffer = null;
              break;

            case gl.ELEMENT_ARRAY_BUFFER:
              if (device.extensions.useVAO) {
                if (cache.glVAO) {
                  gl.bindVertexArray(null);
                  device.stateCache.glVAO = null;
                }
              }

              gfxStateCache$1.gpuInputAssembler = null;
              gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
              device.stateCache.glElementArrayBuffer = null;
              break;

            case gl.UNIFORM_BUFFER:
              gl.bindBuffer(gl.UNIFORM_BUFFER, null);
              device.stateCache.glUniformBuffer = null;
              break;
          }

          gl.deleteBuffer(gpuBuffer.glBuffer);
          gpuBuffer.glBuffer = null;
        }
      }
      function WebGL2CmdFuncResizeBuffer(device, gpuBuffer) {
        var gl = device.gl;
        var cache = device.stateCache;
        var glUsage = gpuBuffer.memUsage & MemoryUsageBit.HOST ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;

        if (gpuBuffer.usage & BufferUsageBit.VERTEX) {
          if (device.extensions.useVAO) {
            if (cache.glVAO) {
              gl.bindVertexArray(null);
              cache.glVAO = null;
            }
          }

          gfxStateCache$1.gpuInputAssembler = null;

          if (cache.glArrayBuffer !== gpuBuffer.glBuffer) {
            gl.bindBuffer(gl.ARRAY_BUFFER, gpuBuffer.glBuffer);
          }

          if (gpuBuffer.buffer) {
            gl.bufferData(gl.ARRAY_BUFFER, gpuBuffer.buffer, glUsage);
          } else {
            gl.bufferData(gl.ARRAY_BUFFER, gpuBuffer.size, glUsage);
          }

          gl.bindBuffer(gl.ARRAY_BUFFER, null);
          cache.glArrayBuffer = null;
        } else if (gpuBuffer.usage & BufferUsageBit.INDEX) {
          if (device.extensions.useVAO) {
            if (cache.glVAO) {
              gl.bindVertexArray(null);
              cache.glVAO = null;
            }
          }

          gfxStateCache$1.gpuInputAssembler = null;

          if (device.stateCache.glElementArrayBuffer !== gpuBuffer.glBuffer) {
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.glBuffer);
          }

          if (gpuBuffer.buffer) {
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.buffer, glUsage);
          } else {
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.size, glUsage);
          }

          gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
          device.stateCache.glElementArrayBuffer = null;
        } else if (gpuBuffer.usage & BufferUsageBit.UNIFORM) {
          if (device.stateCache.glUniformBuffer !== gpuBuffer.glBuffer) {
            gl.bindBuffer(gl.UNIFORM_BUFFER, gpuBuffer.glBuffer);
          }

          gl.bufferData(gl.UNIFORM_BUFFER, gpuBuffer.size, glUsage);
          gl.bindBuffer(gl.UNIFORM_BUFFER, null);
          device.stateCache.glUniformBuffer = null;
        } else if (gpuBuffer.usage & BufferUsageBit.INDIRECT || gpuBuffer.usage & BufferUsageBit.TRANSFER_DST || gpuBuffer.usage & BufferUsageBit.TRANSFER_SRC) {
          gpuBuffer.glTarget = gl.NONE;
        } else {
          console.error('Unsupported BufferType, create buffer failed.');
          gpuBuffer.glTarget = gl.NONE;
        }
      }
      function WebGL2CmdFuncUpdateBuffer(device, gpuBuffer, buffer, offset, size) {
        if (gpuBuffer.usage & BufferUsageBit.INDIRECT) {
          gpuBuffer.indirects.clearDraws();
          var drawInfos = buffer.drawInfos;

          for (var i = 0; i < drawInfos.length; ++i) {
            gpuBuffer.indirects.setDrawInfo(offset + i, drawInfos[i]);
          }
        } else {
          var buff = buffer;
          var gl = device.gl;
          var cache = device.stateCache;

          switch (gpuBuffer.glTarget) {
            case gl.ARRAY_BUFFER:
              {
                if (device.extensions.useVAO) {
                  if (cache.glVAO) {
                    gl.bindVertexArray(null);
                    cache.glVAO = null;
                  }
                }

                gfxStateCache$1.gpuInputAssembler = null;

                if (cache.glArrayBuffer !== gpuBuffer.glBuffer) {
                  gl.bindBuffer(gl.ARRAY_BUFFER, gpuBuffer.glBuffer);
                  cache.glArrayBuffer = gpuBuffer.glBuffer;
                }

                if (size === buff.byteLength) {
                  gl.bufferSubData(gpuBuffer.glTarget, offset, buff);
                } else {
                  gl.bufferSubData(gpuBuffer.glTarget, offset, buff.slice(0, size));
                }

                break;
              }

            case gl.ELEMENT_ARRAY_BUFFER:
              {
                if (device.extensions.useVAO) {
                  if (cache.glVAO) {
                    gl.bindVertexArray(null);
                    cache.glVAO = null;
                  }
                }

                gfxStateCache$1.gpuInputAssembler = null;

                if (cache.glElementArrayBuffer !== gpuBuffer.glBuffer) {
                  gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.glBuffer);
                  cache.glElementArrayBuffer = gpuBuffer.glBuffer;
                }

                if (size === buff.byteLength) {
                  gl.bufferSubData(gpuBuffer.glTarget, offset, buff);
                } else {
                  gl.bufferSubData(gpuBuffer.glTarget, offset, buff.slice(0, size));
                }

                break;
              }

            case gl.UNIFORM_BUFFER:
              {
                if (cache.glUniformBuffer !== gpuBuffer.glBuffer) {
                  gl.bindBuffer(gl.UNIFORM_BUFFER, gpuBuffer.glBuffer);
                  cache.glUniformBuffer = gpuBuffer.glBuffer;
                }

                if (size === buff.byteLength) {
                  gl.bufferSubData(gpuBuffer.glTarget, offset, buff);
                } else {
                  gl.bufferSubData(gpuBuffer.glTarget, offset, new Float32Array(buff, 0, size / 4));
                }

                break;
              }

            default:
              {
                console.error('Unsupported BufferType, update buffer failed.');
              }
          }
        }
      }
      function WebGL2CmdFuncCreateTexture(device, gpuTexture) {
        var gl = device.gl;
        gpuTexture.glInternalFmt = GFXFormatToWebGLInternalFormat$1(gpuTexture.format, gl);
        gpuTexture.glFormat = GFXFormatToWebGLFormat$1(gpuTexture.format, gl);
        gpuTexture.glType = GFXFormatToWebGLType$1(gpuTexture.format, gl);
        var w = gpuTexture.width;
        var h = gpuTexture.height;
        var d = gpuTexture.depth;
        var l = gpuTexture.arrayLayer;

        switch (gpuTexture.type) {
          case TextureType.TEX2D:
            {
              gpuTexture.glTarget = gl.TEXTURE_2D;
              var maxSize = Math.max(w, h);

              if (maxSize > device.capabilities.maxTextureSize) {
                errorID(9100, maxSize, device.capabilities.maxTextureSize);
              }

              if (gpuTexture.samples === SampleCount.ONE) {
                gpuTexture.glTexture = gl.createTexture();

                if (gpuTexture.size > 0) {
                  var glTexUnit = device.stateCache.glTexUnits[device.stateCache.texUnit];

                  if (glTexUnit.glTexture !== gpuTexture.glTexture) {
                    gl.bindTexture(gl.TEXTURE_2D, gpuTexture.glTexture);
                    glTexUnit.glTexture = gpuTexture.glTexture;
                  }

                  if (FormatInfos[gpuTexture.format].isCompressed) {
                    for (var i = 0; i < gpuTexture.mipLevel; ++i) {
                      var imgSize = FormatSize(gpuTexture.format, w, h, 1);
                      var view = new Uint8Array(imgSize);
                      gl.compressedTexImage2D(gl.TEXTURE_2D, i, gpuTexture.glInternalFmt, w, h, 0, view);
                      w = Math.max(1, w >> 1);
                      h = Math.max(1, h >> 1);
                    }
                  } else {
                    gl.texStorage2D(gl.TEXTURE_2D, gpuTexture.mipLevel, gpuTexture.glInternalFmt, w, h);
                  }
                }
              } else {
                gpuTexture.glRenderbuffer = gl.createRenderbuffer();

                if (gpuTexture.size > 0) {
                  if (device.stateCache.glRenderbuffer !== gpuTexture.glRenderbuffer) {
                    gl.bindRenderbuffer(gl.RENDERBUFFER, gpuTexture.glRenderbuffer);
                    device.stateCache.glRenderbuffer = gpuTexture.glRenderbuffer;
                  }

                  gl.renderbufferStorageMultisample(gl.RENDERBUFFER, gpuTexture.samples, gpuTexture.glInternalFmt, gpuTexture.width, gpuTexture.height);
                }
              }

              break;
            }

          case TextureType.TEX2D_ARRAY:
            {
              gpuTexture.glTarget = gl.TEXTURE_2D_ARRAY;

              var _maxSize = Math.max(w, h);

              if (_maxSize > device.capabilities.maxTextureSize) {
                errorID(9100, _maxSize, device.capabilities.maxTextureSize);
              }

              if (l > device.capabilities.maxArrayTextureLayers) {
                errorID(9100, l, device.capabilities.maxArrayTextureLayers);
              }

              gpuTexture.glTexture = gl.createTexture();

              if (gpuTexture.size > 0) {
                var _glTexUnit = device.stateCache.glTexUnits[device.stateCache.texUnit];

                if (_glTexUnit.glTexture !== gpuTexture.glTexture) {
                  gl.bindTexture(gl.TEXTURE_2D_ARRAY, gpuTexture.glTexture);
                  _glTexUnit.glTexture = gpuTexture.glTexture;
                }

                if (FormatInfos[gpuTexture.format].isCompressed) {
                  for (var _i = 0; _i < gpuTexture.mipLevel; ++_i) {
                    var _imgSize = FormatSize(gpuTexture.format, w, h, l);

                    var _view = new Uint8Array(_imgSize);

                    gl.compressedTexImage3D(gl.TEXTURE_2D_ARRAY, _i, gpuTexture.glInternalFmt, w, h, l, 0, _view);
                    w = Math.max(1, w >> 1);
                    h = Math.max(1, h >> 1);
                  }
                } else {
                  gl.texStorage3D(gl.TEXTURE_2D_ARRAY, gpuTexture.mipLevel, gpuTexture.glInternalFmt, w, h, l);
                }
              }

              break;
            }

          case TextureType.TEX3D:
            {
              gpuTexture.glTarget = gl.TEXTURE_3D;

              var _maxSize2 = Math.max(Math.max(w, h), d);

              if (_maxSize2 > device.capabilities.max3DTextureSize) {
                errorID(9100, _maxSize2, device.capabilities.max3DTextureSize);
              }

              gpuTexture.glTexture = gl.createTexture();

              if (gpuTexture.size > 0) {
                var _glTexUnit2 = device.stateCache.glTexUnits[device.stateCache.texUnit];

                if (_glTexUnit2.glTexture !== gpuTexture.glTexture) {
                  gl.bindTexture(gl.TEXTURE_3D, gpuTexture.glTexture);
                  _glTexUnit2.glTexture = gpuTexture.glTexture;
                }

                if (FormatInfos[gpuTexture.format].isCompressed) {
                  for (var _i2 = 0; _i2 < gpuTexture.mipLevel; ++_i2) {
                    var _imgSize2 = FormatSize(gpuTexture.format, w, h, d);

                    var _view2 = new Uint8Array(_imgSize2);

                    gl.compressedTexImage3D(gl.TEXTURE_3D, _i2, gpuTexture.glInternalFmt, w, h, d, 0, _view2);
                    w = Math.max(1, w >> 1);
                    h = Math.max(1, h >> 1);
                  }
                } else {
                  gl.texStorage3D(gl.TEXTURE_3D, gpuTexture.mipLevel, gpuTexture.glInternalFmt, w, h, d);
                }
              }

              break;
            }

          case TextureType.CUBE:
            {
              gpuTexture.glTarget = gl.TEXTURE_CUBE_MAP;

              var _maxSize3 = Math.max(w, h);

              if (_maxSize3 > device.capabilities.maxCubeMapTextureSize) {
                errorID(9100, _maxSize3, device.capabilities.maxTextureSize);
              }

              gpuTexture.glTexture = gl.createTexture();

              if (gpuTexture.size > 0) {
                var _glTexUnit3 = device.stateCache.glTexUnits[device.stateCache.texUnit];

                if (_glTexUnit3.glTexture !== gpuTexture.glTexture) {
                  gl.bindTexture(gl.TEXTURE_CUBE_MAP, gpuTexture.glTexture);
                  _glTexUnit3.glTexture = gpuTexture.glTexture;
                }

                if (FormatInfos[gpuTexture.format].isCompressed) {
                  for (var _i3 = 0; _i3 < gpuTexture.mipLevel; ++_i3) {
                    var _imgSize3 = FormatSize(gpuTexture.format, w, h, 1);

                    var _view3 = new Uint8Array(_imgSize3);

                    for (var f = 0; f < 6; ++f) {
                      gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, _i3, gpuTexture.glInternalFmt, w, h, 0, _view3);
                    }

                    w = Math.max(1, w >> 1);
                    h = Math.max(1, h >> 1);
                  }
                } else {
                  gl.texStorage2D(gl.TEXTURE_CUBE_MAP, gpuTexture.mipLevel, gpuTexture.glInternalFmt, w, h);
                }
              }

              break;
            }

          default:
            {
              console.error('Unsupported TextureType, create texture failed.');
              gpuTexture.type = TextureType.TEX2D;
              gpuTexture.glTarget = gl.TEXTURE_2D;
            }
        }
      }
      function WebGL2CmdFuncDestroyTexture(device, gpuTexture) {
        var gl = device.gl;

        if (gpuTexture.glTexture) {
          var glTexUnits = device.stateCache.glTexUnits;
          var texUnit = device.stateCache.texUnit;
          gl.deleteTexture(gpuTexture.glTexture);

          for (var i = 0; i < glTexUnits.length; ++i) {
            if (glTexUnits[i].glTexture === gpuTexture.glTexture) {
              gl.activeTexture(gl.TEXTURE0 + i);
              texUnit = i;
              gl.bindTexture(gpuTexture.glTarget, null);
              glTexUnits[i].glTexture = null;
            }
          }

          device.stateCache.texUnit = texUnit;
          gpuTexture.glTexture = null;
        }

        if (gpuTexture.glRenderbuffer) {
          var glRenderbuffer = device.stateCache.glRenderbuffer;
          gl.deleteRenderbuffer(gpuTexture.glRenderbuffer);

          if (glRenderbuffer === gpuTexture.glRenderbuffer) {
            gl.bindRenderbuffer(gl.RENDERBUFFER, null);
            glRenderbuffer = null;
          }

          gpuTexture.glRenderbuffer = null;
        }
      }
      function WebGL2CmdFuncResizeTexture(device, gpuTexture) {
        if (!gpuTexture.size) return;
        var gl = device.gl;
        var w = gpuTexture.width;
        var h = gpuTexture.height;
        var d = gpuTexture.depth;
        var l = gpuTexture.arrayLayer;

        switch (gpuTexture.type) {
          case TextureType.TEX2D:
            {
              gpuTexture.glTarget = gl.TEXTURE_2D;
              var maxSize = Math.max(w, h);

              if (maxSize > device.capabilities.maxTextureSize) {
                errorID(9100, maxSize, device.capabilities.maxTextureSize);
              }

              if (gpuTexture.samples === SampleCount.ONE) {
                var glTexUnit = device.stateCache.glTexUnits[device.stateCache.texUnit];

                if (glTexUnit.glTexture !== gpuTexture.glTexture) {
                  gl.bindTexture(gl.TEXTURE_2D, gpuTexture.glTexture);
                  glTexUnit.glTexture = gpuTexture.glTexture;
                }

                if (FormatInfos[gpuTexture.format].isCompressed) {
                  for (var i = 0; i < gpuTexture.mipLevel; ++i) {
                    var imgSize = FormatSize(gpuTexture.format, w, h, 1);
                    var view = new Uint8Array(imgSize);
                    gl.compressedTexImage2D(gl.TEXTURE_2D, i, gpuTexture.glInternalFmt, w, h, 0, view);
                    w = Math.max(1, w >> 1);
                    h = Math.max(1, h >> 1);
                  }
                } else {
                  WebGL2CmdFuncDestroyTexture(device, gpuTexture);
                  WebGL2CmdFuncCreateTexture(device, gpuTexture);
                }
              } else if (gpuTexture.glRenderbuffer) {
                if (device.stateCache.glRenderbuffer !== gpuTexture.glRenderbuffer) {
                  gl.bindRenderbuffer(gl.RENDERBUFFER, gpuTexture.glRenderbuffer);
                  device.stateCache.glRenderbuffer = gpuTexture.glRenderbuffer;
                }

                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, gpuTexture.samples, gpuTexture.glInternalFmt, gpuTexture.width, gpuTexture.height);
              }

              break;
            }

          case TextureType.TEX2D_ARRAY:
            {
              gpuTexture.glTarget = gl.TEXTURE_2D_ARRAY;

              var _maxSize4 = Math.max(w, h);

              if (_maxSize4 > device.capabilities.maxTextureSize) {
                errorID(9100, _maxSize4, device.capabilities.maxTextureSize);
              }

              if (l > device.capabilities.maxArrayTextureLayers) {
                errorID(9100, l, device.capabilities.maxArrayTextureLayers);
              }

              gpuTexture.glTexture = gl.createTexture();

              if (gpuTexture.size > 0) {
                var _glTexUnit4 = device.stateCache.glTexUnits[device.stateCache.texUnit];

                if (_glTexUnit4.glTexture !== gpuTexture.glTexture) {
                  gl.bindTexture(gl.TEXTURE_2D_ARRAY, gpuTexture.glTexture);
                  _glTexUnit4.glTexture = gpuTexture.glTexture;
                }

                if (FormatInfos[gpuTexture.format].isCompressed) {
                  for (var _i4 = 0; _i4 < gpuTexture.mipLevel; ++_i4) {
                    var _imgSize4 = FormatSize(gpuTexture.format, w, h, l);

                    var _view4 = new Uint8Array(_imgSize4);

                    gl.compressedTexImage3D(gl.TEXTURE_2D_ARRAY, _i4, gpuTexture.glInternalFmt, w, h, l, 0, _view4);
                    w = Math.max(1, w >> 1);
                    h = Math.max(1, h >> 1);
                  }
                } else {
                  gl.texStorage3D(gl.TEXTURE_2D_ARRAY, gpuTexture.mipLevel, gpuTexture.glInternalFmt, w, h, l);
                }
              }

              break;
            }

          case TextureType.TEX3D:
            {
              gpuTexture.glTarget = gl.TEXTURE_3D;

              var _maxSize5 = Math.max(Math.max(w, h), d);

              if (_maxSize5 > device.capabilities.max3DTextureSize) {
                errorID(9100, _maxSize5, device.capabilities.max3DTextureSize);
              }

              gpuTexture.glTexture = gl.createTexture();

              if (gpuTexture.size > 0) {
                var _glTexUnit5 = device.stateCache.glTexUnits[device.stateCache.texUnit];

                if (_glTexUnit5.glTexture !== gpuTexture.glTexture) {
                  gl.bindTexture(gl.TEXTURE_3D, gpuTexture.glTexture);
                  _glTexUnit5.glTexture = gpuTexture.glTexture;
                }

                if (FormatInfos[gpuTexture.format].isCompressed) {
                  for (var _i5 = 0; _i5 < gpuTexture.mipLevel; ++_i5) {
                    var _imgSize5 = FormatSize(gpuTexture.format, w, h, d);

                    var _view5 = new Uint8Array(_imgSize5);

                    gl.compressedTexImage3D(gl.TEXTURE_3D, _i5, gpuTexture.glInternalFmt, w, h, d, 0, _view5);
                    w = Math.max(1, w >> 1);
                    h = Math.max(1, h >> 1);
                  }
                } else {
                  gl.texStorage3D(gl.TEXTURE_3D, gpuTexture.mipLevel, gpuTexture.glInternalFmt, w, h, d);
                }
              }

              break;
            }

          case TextureType.CUBE:
            {
              gpuTexture.type = TextureType.CUBE;
              gpuTexture.glTarget = gl.TEXTURE_CUBE_MAP;

              var _maxSize6 = Math.max(w, h);

              if (_maxSize6 > device.capabilities.maxCubeMapTextureSize) {
                errorID(9100, _maxSize6, device.capabilities.maxTextureSize);
              }

              var _glTexUnit6 = device.stateCache.glTexUnits[device.stateCache.texUnit];

              if (_glTexUnit6.glTexture !== gpuTexture.glTexture) {
                gl.bindTexture(gl.TEXTURE_CUBE_MAP, gpuTexture.glTexture);
                _glTexUnit6.glTexture = gpuTexture.glTexture;
              }

              if (FormatInfos[gpuTexture.format].isCompressed) {
                for (var f = 0; f < 6; ++f) {
                  w = gpuTexture.width;
                  h = gpuTexture.height;

                  for (var _i6 = 0; _i6 < gpuTexture.mipLevel; ++_i6) {
                    var _imgSize6 = FormatSize(gpuTexture.format, w, h, 1);

                    var _view6 = new Uint8Array(_imgSize6);

                    gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, _i6, gpuTexture.glInternalFmt, w, h, 0, _view6);
                    w = Math.max(1, w >> 1);
                    h = Math.max(1, h >> 1);
                  }
                }
              } else {
                WebGL2CmdFuncDestroyTexture(device, gpuTexture);
                WebGL2CmdFuncCreateTexture(device, gpuTexture);
              }

              break;
            }

          default:
            {
              console.error('Unsupported TextureType, create texture failed.');
              gpuTexture.type = TextureType.TEX2D;
              gpuTexture.glTarget = gl.TEXTURE_2D;
            }
        }
      }
      function WebGL2CmdFuncPrepareSamplerInfo(device, gpuSampler) {
        var gl = device.gl;

        if (gpuSampler.minFilter === Filter.LINEAR || gpuSampler.minFilter === Filter.ANISOTROPIC) {
          if (gpuSampler.mipFilter === Filter.LINEAR || gpuSampler.mipFilter === Filter.ANISOTROPIC) {
            gpuSampler.glMinFilter = gl.LINEAR_MIPMAP_LINEAR;
          } else if (gpuSampler.mipFilter === Filter.POINT) {
            gpuSampler.glMinFilter = gl.LINEAR_MIPMAP_NEAREST;
          } else {
            gpuSampler.glMinFilter = gl.LINEAR;
          }
        } else if (gpuSampler.mipFilter === Filter.LINEAR || gpuSampler.mipFilter === Filter.ANISOTROPIC) {
          gpuSampler.glMinFilter = gl.NEAREST_MIPMAP_LINEAR;
        } else if (gpuSampler.mipFilter === Filter.POINT) {
          gpuSampler.glMinFilter = gl.NEAREST_MIPMAP_NEAREST;
        } else {
          gpuSampler.glMinFilter = gl.NEAREST;
        }

        if (gpuSampler.magFilter === Filter.LINEAR || gpuSampler.magFilter === Filter.ANISOTROPIC) {
          gpuSampler.glMagFilter = gl.LINEAR;
        } else {
          gpuSampler.glMagFilter = gl.NEAREST;
        }

        gpuSampler.glWrapS = WebGLWraps$1[gpuSampler.addressU];
        gpuSampler.glWrapT = WebGLWraps$1[gpuSampler.addressV];
        gpuSampler.glWrapR = WebGLWraps$1[gpuSampler.addressW];
      }
      function WebGL2CmdFuncDestroySampler(device, gpuSampler) {
        var gl = device.gl;
        var it = gpuSampler.glSamplers.values();
        var res = it.next();

        while (!res.done) {
          gl.deleteSampler(res.value);
          var glSamplerUnits = device.stateCache.glSamplerUnits;

          for (var i = 0; i < glSamplerUnits.length; ++i) {
            if (glSamplerUnits[i] === res.value) {
              gl.bindSampler(i, null);
              glSamplerUnits[i] = null;
            }
          }
        }

        gpuSampler.glSamplers.clear();
      }
      function WebGL2CmdFuncCreateFramebuffer(device, gpuFramebuffer) {
        for (var i = 0; i < gpuFramebuffer.gpuColorViews.length; ++i) {
          var tex = gpuFramebuffer.gpuColorViews[i].gpuTexture;

          if (tex.isSwapchainTexture) {
            gpuFramebuffer.isOffscreen = false;
            return;
          }
        }

        var gl = device.gl;
        var attachments = [];
        var glFramebuffer = gl.createFramebuffer();

        if (glFramebuffer) {
          gpuFramebuffer.glFramebuffer = glFramebuffer;

          if (device.stateCache.glFramebuffer !== gpuFramebuffer.glFramebuffer) {
            gl.bindFramebuffer(gl.FRAMEBUFFER, gpuFramebuffer.glFramebuffer);
          }

          for (var _i7 = 0; _i7 < gpuFramebuffer.gpuColorViews.length; ++_i7) {
            var colorTextureView = gpuFramebuffer.gpuColorViews[_i7];
            var colorTexture = colorTextureView.gpuTexture;

            if (colorTexture) {
              if (colorTexture.glTexture) {
                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + _i7, colorTexture.glTarget, colorTexture.glTexture, colorTextureView.baseLevel);
              } else {
                gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + _i7, gl.RENDERBUFFER, colorTexture.glRenderbuffer);
              }

              attachments.push(gl.COLOR_ATTACHMENT0 + _i7);
              gpuFramebuffer.width = Math.min(gpuFramebuffer.width, colorTexture.width >> colorTextureView.baseLevel);
              gpuFramebuffer.height = Math.min(gpuFramebuffer.height, colorTexture.height >> colorTextureView.baseLevel);
            }
          }

          var dstView = gpuFramebuffer.gpuDepthStencilView;

          if (dstView) {
            var dst = dstView.gpuTexture;
            var glAttachment = FormatInfos[dst.format].hasStencil ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;

            if (dst.glTexture) {
              gl.framebufferTexture2D(gl.FRAMEBUFFER, glAttachment, dst.glTarget, dst.glTexture, gpuFramebuffer.gpuDepthStencilView.baseLevel);
            } else {
              gl.framebufferRenderbuffer(gl.FRAMEBUFFER, glAttachment, gl.RENDERBUFFER, dst.glRenderbuffer);
            }

            gpuFramebuffer.width = Math.min(gpuFramebuffer.width, dst.width >> dstView.baseLevel);
            gpuFramebuffer.height = Math.min(gpuFramebuffer.height, dst.height >> dstView.baseLevel);
          }

          gl.drawBuffers(attachments);
          var status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);

          if (status !== gl.FRAMEBUFFER_COMPLETE) {
            switch (status) {
              case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
                {
                  console.error('glCheckFramebufferStatus() - FRAMEBUFFER_INCOMPLETE_ATTACHMENT');
                  break;
                }

              case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
                {
                  console.error('glCheckFramebufferStatus() - FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT');
                  break;
                }

              case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:
                {
                  console.error('glCheckFramebufferStatus() - FRAMEBUFFER_INCOMPLETE_DIMENSIONS');
                  break;
                }

              case gl.FRAMEBUFFER_UNSUPPORTED:
                {
                  console.error('glCheckFramebufferStatus() - FRAMEBUFFER_UNSUPPORTED');
                  break;
                }
            }
          }

          if (device.stateCache.glFramebuffer !== gpuFramebuffer.glFramebuffer) {
            gl.bindFramebuffer(gl.FRAMEBUFFER, device.stateCache.glFramebuffer);
          }
        }
      }
      function WebGL2CmdFuncDestroyFramebuffer(device, gpuFramebuffer) {
        if (gpuFramebuffer.glFramebuffer) {
          device.gl.deleteFramebuffer(gpuFramebuffer.glFramebuffer);

          if (device.stateCache.glFramebuffer === gpuFramebuffer.glFramebuffer) {
            device.gl.bindFramebuffer(device.gl.FRAMEBUFFER, null);
            device.stateCache.glFramebuffer = null;
          }

          gpuFramebuffer.glFramebuffer = null;
        }
      }
      function WebGL2CmdFuncCreateShader(device, gpuShader) {
        var gl = device.gl;

        var _loop = function _loop(k) {
          var gpuStage = gpuShader.gpuStages[k];
          var glShaderType = 0;
          var shaderTypeStr = '';
          var lineNumber = 1;

          switch (gpuStage.type) {
            case ShaderStageFlagBit.VERTEX:
              {
                shaderTypeStr = 'VertexShader';
                glShaderType = gl.VERTEX_SHADER;
                break;
              }

            case ShaderStageFlagBit.FRAGMENT:
              {
                shaderTypeStr = 'FragmentShader';
                glShaderType = gl.FRAGMENT_SHADER;
                break;
              }

            default:
              {
                console.error('Unsupported ShaderType.');
                return {
                  v: void 0
                };
              }
          }

          var glShader = gl.createShader(glShaderType);

          if (glShader) {
            gpuStage.glShader = glShader;
            gl.shaderSource(gpuStage.glShader, "#version 300 es\n" + gpuStage.source);
            gl.compileShader(gpuStage.glShader);

            if (!gl.getShaderParameter(gpuStage.glShader, gl.COMPILE_STATUS)) {
              console.error(shaderTypeStr + " in '" + gpuShader.name + "' compilation failed.");
              console.error('Shader source dump:', gpuStage.source.replace(/^|\n/g, function () {
                return "\n" + lineNumber++ + " ";
              }));
              console.error(gl.getShaderInfoLog(gpuStage.glShader));

              for (var l = 0; l < gpuShader.gpuStages.length; l++) {
                var stage = gpuShader.gpuStages[k];

                if (stage.glShader) {
                  gl.deleteShader(stage.glShader);
                  stage.glShader = null;
                }
              }

              return {
                v: void 0
              };
            }
          }
        };

        for (var k = 0; k < gpuShader.gpuStages.length; k++) {
          var _ret = _loop(k);

          if (typeof _ret === "object") return _ret.v;
        }

        var glProgram = gl.createProgram();

        if (!glProgram) {
          return;
        }

        gpuShader.glProgram = glProgram;
        var enableEffectImport = !!(legacyCC.rendering && legacyCC.rendering.enableEffectImport);

        for (var _k = 0; _k < gpuShader.gpuStages.length; _k++) {
          var gpuStage = gpuShader.gpuStages[_k];
          gl.attachShader(gpuShader.glProgram, gpuStage.glShader);
        }

        gl.linkProgram(gpuShader.glProgram);

        for (var _k2 = 0; _k2 < gpuShader.gpuStages.length; _k2++) {
          var _gpuStage = gpuShader.gpuStages[_k2];

          if (_gpuStage.glShader) {
            gl.detachShader(gpuShader.glProgram, _gpuStage.glShader);
            gl.deleteShader(_gpuStage.glShader);
            _gpuStage.glShader = null;
          }
        }

        if (gl.getProgramParameter(gpuShader.glProgram, gl.LINK_STATUS)) {
          debug("Shader '" + gpuShader.name + "' compilation succeeded.");
        } else {
          console.error("Failed to link shader '" + gpuShader.name + "'.");
          console.error(gl.getProgramInfoLog(gpuShader.glProgram));
          return;
        }

        var activeAttribCount = gl.getProgramParameter(gpuShader.glProgram, gl.ACTIVE_ATTRIBUTES);
        gpuShader.glInputs = new Array(activeAttribCount);

        for (var i = 0; i < activeAttribCount; ++i) {
          var attribInfo = gl.getActiveAttrib(gpuShader.glProgram, i);

          if (attribInfo) {
            var varName = void 0;
            var nameOffset = attribInfo.name.indexOf('[');

            if (nameOffset !== -1) {
              varName = attribInfo.name.substr(0, nameOffset);
            } else {
              varName = attribInfo.name;
            }

            var glLoc = gl.getAttribLocation(gpuShader.glProgram, varName);
            var type = WebGLTypeToGFXType$1(attribInfo.type, gl);
            var stride = WebGLGetTypeSize$1(attribInfo.type, gl);
            gpuShader.glInputs[i] = {
              name: varName,
              type: type,
              stride: stride,
              count: attribInfo.size,
              size: stride * attribInfo.size,
              glType: attribInfo.type,
              glLoc: glLoc
            };
          }
        }

        var activeBlockCount = gl.getProgramParameter(gpuShader.glProgram, gl.ACTIVE_UNIFORM_BLOCKS);
        var blockName;
        var blockIdx;
        var blockSize;
        var block;

        if (activeBlockCount) {
          gpuShader.glBlocks = new Array(activeBlockCount);

          for (var b = 0; b < activeBlockCount; ++b) {
            blockName = gl.getActiveUniformBlockName(gpuShader.glProgram, b);

            var _nameOffset = blockName.indexOf('[');

            if (_nameOffset !== -1) {
              blockName = blockName.substr(0, _nameOffset);
            }

            block = null;

            for (var _k3 = 0; _k3 < gpuShader.blocks.length; _k3++) {
              if (gpuShader.blocks[_k3].name === blockName) {
                block = gpuShader.blocks[_k3];
                break;
              }
            }

            if (!block) {
              error("Block '" + blockName + "' does not bound");
            } else {
              blockIdx = b;
              blockSize = gl.getActiveUniformBlockParameter(gpuShader.glProgram, blockIdx, gl.UNIFORM_BLOCK_DATA_SIZE);
              var glBinding = enableEffectImport ? block.flattened : block.binding + (device.bindingMappings.blockOffsets[block.set] || 0);
              gl.uniformBlockBinding(gpuShader.glProgram, blockIdx, glBinding);
              gpuShader.glBlocks[b] = {
                set: block.set,
                binding: block.binding,
                idx: blockIdx,
                name: blockName,
                size: blockSize,
                glBinding: glBinding
              };
            }
          }
        }

        for (var _i8 = 0; _i8 < gpuShader.subpassInputs.length; ++_i8) {
          var subpassInput = gpuShader.subpassInputs[_i8];
          gpuShader.samplerTextures.push(new UniformSamplerTexture(subpassInput.set, subpassInput.binding, subpassInput.name, Type.SAMPLER2D, subpassInput.count));
        }

        if (gpuShader.samplerTextures.length > 0) {
          gpuShader.glSamplerTextures = new Array(gpuShader.samplerTextures.length);

          for (var _i9 = 0; _i9 < gpuShader.samplerTextures.length; ++_i9) {
            var sampler = gpuShader.samplerTextures[_i9];
            gpuShader.glSamplerTextures[_i9] = {
              set: sampler.set,
              binding: sampler.binding,
              name: sampler.name,
              type: sampler.type,
              count: sampler.count,
              units: [],
              glUnits: null,
              glType: GFXTypeToWebGLType$1(sampler.type, gl),
              glLoc: null
            };
          }
        }

        var glActiveSamplers = [];
        var glActiveSamplerLocations = [];
        var texUnitCacheMap = device.stateCache.texUnitCacheMap;

        if (!enableEffectImport) {
          var flexibleSetBaseOffset = 0;

          for (var _i10 = 0; _i10 < gpuShader.blocks.length; ++_i10) {
            if (gpuShader.blocks[_i10].set === device.bindingMappings.flexibleSet) {
              flexibleSetBaseOffset++;
            }
          }

          var arrayOffset = 0;

          for (var _i11 = 0; _i11 < gpuShader.samplerTextures.length; ++_i11) {
            var _sampler = gpuShader.samplerTextures[_i11];

            var _glLoc = gl.getUniformLocation(gpuShader.glProgram, _sampler.name);

            if (_glLoc && _glLoc.id !== -1) {
              glActiveSamplers.push(gpuShader.glSamplerTextures[_i11]);
              glActiveSamplerLocations.push(_glLoc);
            }

            if (texUnitCacheMap[_sampler.name] === undefined) {
              var binding = _sampler.binding + device.bindingMappings.samplerTextureOffsets[_sampler.set] + arrayOffset;

              if (_sampler.set === device.bindingMappings.flexibleSet) {
                binding -= flexibleSetBaseOffset;
              }

              texUnitCacheMap[_sampler.name] = binding % device.capabilities.maxTextureUnits;
              arrayOffset += _sampler.count - 1;
            }
          }
        } else {
          for (var _i12 = 0; _i12 < gpuShader.samplerTextures.length; ++_i12) {
            var _sampler2 = gpuShader.samplerTextures[_i12];

            var _glLoc2 = gl.getUniformLocation(gpuShader.glProgram, _sampler2.name);

            if (_glLoc2 && _glLoc2.id !== -1) {
              glActiveSamplers.push(gpuShader.glSamplerTextures[_i12]);
              glActiveSamplerLocations.push(_glLoc2);
            }

            if (texUnitCacheMap[_sampler2.name] === undefined) {
              texUnitCacheMap[_sampler2.name] = _sampler2.flattened % device.capabilities.maxTextureUnits;
            }
          }
        }

        if (glActiveSamplers.length) {
          var usedTexUnits = [];

          for (var _i13 = 0; _i13 < glActiveSamplers.length; ++_i13) {
            var glSampler = glActiveSamplers[_i13];
            var cachedUnit = texUnitCacheMap[glSampler.name];

            if (cachedUnit !== undefined) {
              glSampler.glLoc = glActiveSamplerLocations[_i13];

              for (var t = 0; t < glSampler.count; ++t) {
                while (usedTexUnits[cachedUnit]) {
                  cachedUnit = (cachedUnit + 1) % device.capabilities.maxTextureUnits;
                }

                glSampler.units.push(cachedUnit);
                usedTexUnits[cachedUnit] = true;
              }
            }
          }

          var unitIdx = 0;

          for (var _i14 = 0; _i14 < glActiveSamplers.length; ++_i14) {
            var _glSampler = glActiveSamplers[_i14];

            if (!_glSampler.glLoc) {
              _glSampler.glLoc = glActiveSamplerLocations[_i14];

              while (usedTexUnits[unitIdx]) {
                unitIdx++;
              }

              for (var _t = 0; _t < _glSampler.count; ++_t) {
                while (usedTexUnits[unitIdx]) {
                  unitIdx = (unitIdx + 1) % device.capabilities.maxTextureUnits;
                }

                if (texUnitCacheMap[_glSampler.name] === undefined) {
                  texUnitCacheMap[_glSampler.name] = unitIdx;
                }

                _glSampler.units.push(unitIdx);

                usedTexUnits[unitIdx] = true;
              }
            }
          }

          if (device.stateCache.glProgram !== gpuShader.glProgram) {
            gl.useProgram(gpuShader.glProgram);
          }

          for (var _k4 = 0; _k4 < glActiveSamplers.length; _k4++) {
            var _glSampler2 = glActiveSamplers[_k4];
            _glSampler2.glUnits = new Int32Array(_glSampler2.units);
            gl.uniform1iv(_glSampler2.glLoc, _glSampler2.glUnits);
          }

          if (device.stateCache.glProgram !== gpuShader.glProgram) {
            gl.useProgram(device.stateCache.glProgram);
          }
        }

        gpuShader.glSamplerTextures = glActiveSamplers;
      }
      function WebGL2CmdFuncDestroyShader(device, gpuShader) {
        if (gpuShader.glProgram) {
          device.gl.deleteProgram(gpuShader.glProgram);

          if (device.stateCache.glProgram === gpuShader.glProgram) {
            device.gl.useProgram(null);
            device.stateCache.glProgram = null;
          }

          gpuShader.glProgram = null;
        }
      }
      function WebGL2CmdFuncCreateInputAssember(device, gpuInputAssembler) {
        var gl = device.gl;
        gpuInputAssembler.glAttribs = new Array(gpuInputAssembler.attributes.length);
        var offsets = [0, 0, 0, 0, 0, 0, 0, 0];

        for (var i = 0; i < gpuInputAssembler.attributes.length; ++i) {
          var attrib = gpuInputAssembler.attributes[i];
          var stream = attrib.stream !== undefined ? attrib.stream : 0;
          var gpuBuffer = gpuInputAssembler.gpuVertexBuffers[stream];
          var glType = GFXFormatToWebGLType$1(attrib.format, gl);
          var size = FormatInfos[attrib.format].size;
          gpuInputAssembler.glAttribs[i] = {
            name: attrib.name,
            glBuffer: gpuBuffer.glBuffer,
            glType: glType,
            size: size,
            count: FormatInfos[attrib.format].count,
            stride: gpuBuffer.stride,
            componentCount: WebGLGetComponentCount$1(glType, gl),
            isNormalized: attrib.isNormalized !== undefined ? attrib.isNormalized : false,
            isInstanced: attrib.isInstanced !== undefined ? attrib.isInstanced : false,
            offset: offsets[stream]
          };
          offsets[stream] += size;
        }
      }
      function WebGL2CmdFuncDestroyInputAssembler(device, gpuInputAssembler) {
        var it = gpuInputAssembler.glVAOs.values();
        var res = it.next();
        var gl = device.gl;
        var glVAO = device.stateCache.glVAO;

        while (!res.done) {
          gl.deleteVertexArray(res.value);

          if (glVAO === res.value) {
            gl.bindVertexArray(null);
            glVAO = null;
          }

          res = it.next();
        }

        device.stateCache.glVAO = glVAO;
        gpuInputAssembler.glVAOs.clear();
      }
      var gfxStateCache$1 = {
        gpuPipelineState: null,
        gpuInputAssembler: null,
        glPrimitive: 0,
        invalidateAttachments: []
      };
      function WebGL2CmdFuncBeginRenderPass(device, gpuRenderPass, gpuFramebuffer, renderArea, clearColors, clearDepth, clearStencil) {
        var gl = device.gl;
        var cache = device.stateCache;
        var clears = 0;

        if (gpuFramebuffer && gpuRenderPass) {
          if (cache.glFramebuffer !== gpuFramebuffer.glFramebuffer) {
            gl.bindFramebuffer(gl.FRAMEBUFFER, gpuFramebuffer.glFramebuffer);
            cache.glFramebuffer = gpuFramebuffer.glFramebuffer;
          }

          if (cache.viewport.left !== renderArea.x || cache.viewport.top !== renderArea.y || cache.viewport.width !== renderArea.width || cache.viewport.height !== renderArea.height) {
            gl.viewport(renderArea.x, renderArea.y, renderArea.width, renderArea.height);
            cache.viewport.left = renderArea.x;
            cache.viewport.top = renderArea.y;
            cache.viewport.width = renderArea.width;
            cache.viewport.height = renderArea.height;
          }

          if (cache.scissorRect.x !== renderArea.x || cache.scissorRect.y !== renderArea.y || cache.scissorRect.width !== renderArea.width || cache.scissorRect.height !== renderArea.height) {
            gl.scissor(renderArea.x, renderArea.y, renderArea.width, renderArea.height);
            cache.scissorRect.x = renderArea.x;
            cache.scissorRect.y = renderArea.y;
            cache.scissorRect.width = renderArea.width;
            cache.scissorRect.height = renderArea.height;
          }

          gfxStateCache$1.invalidateAttachments.length = 0;

          for (var j = 0; j < clearColors.length; ++j) {
            var colorAttachment = gpuRenderPass.colorAttachments[j];

            if (colorAttachment.format !== Format.UNKNOWN) {
              switch (colorAttachment.loadOp) {
                case LoadOp.LOAD:
                  break;

                case LoadOp.CLEAR:
                  {
                    if (cache.bs.targets[0].blendColorMask !== ColorMask.ALL) {
                      gl.colorMask(true, true, true, true);
                    }

                    if (!gpuFramebuffer.isOffscreen) {
                      var clearColor = clearColors[0];
                      gl.clearColor(clearColor.x, clearColor.y, clearColor.z, clearColor.w);
                      clears |= gl.COLOR_BUFFER_BIT;
                    } else {
                      _f32v4[0] = clearColors[j].x;
                      _f32v4[1] = clearColors[j].y;
                      _f32v4[2] = clearColors[j].z;
                      _f32v4[3] = clearColors[j].w;
                      gl.clearBufferfv(gl.COLOR, j, _f32v4);
                    }

                    break;
                  }

                case LoadOp.DISCARD:
                  {
                    gfxStateCache$1.invalidateAttachments.push(gl.COLOR_ATTACHMENT0 + j);
                    break;
                  }
              }
            }
          }

          if (gpuRenderPass.depthStencilAttachment) {
            if (gpuRenderPass.depthStencilAttachment.format !== Format.UNKNOWN) {
              switch (gpuRenderPass.depthStencilAttachment.depthLoadOp) {
                case LoadOp.LOAD:
                  break;

                case LoadOp.CLEAR:
                  {
                    if (!cache.dss.depthWrite) {
                      gl.depthMask(true);
                    }

                    gl.clearDepth(clearDepth);
                    clears |= gl.DEPTH_BUFFER_BIT;
                    break;
                  }

                case LoadOp.DISCARD:
                  {
                    gfxStateCache$1.invalidateAttachments.push(gl.DEPTH_ATTACHMENT);
                    break;
                  }
              }

              if (FormatInfos[gpuRenderPass.depthStencilAttachment.format].hasStencil) {
                switch (gpuRenderPass.depthStencilAttachment.stencilLoadOp) {
                  case LoadOp.LOAD:
                    break;

                  case LoadOp.CLEAR:
                    {
                      if (!cache.dss.stencilWriteMaskFront) {
                        gl.stencilMaskSeparate(gl.FRONT, 0xffff);
                      }

                      if (!cache.dss.stencilWriteMaskBack) {
                        gl.stencilMaskSeparate(gl.BACK, 0xffff);
                      }

                      gl.clearStencil(clearStencil);
                      clears |= gl.STENCIL_BUFFER_BIT;
                      break;
                    }

                  case LoadOp.DISCARD:
                    {
                      gfxStateCache$1.invalidateAttachments.push(gl.STENCIL_ATTACHMENT);
                      break;
                    }
                }
              }
            }
          }

          if (gpuFramebuffer.glFramebuffer && gfxStateCache$1.invalidateAttachments.length) {
            gl.invalidateFramebuffer(gl.FRAMEBUFFER, gfxStateCache$1.invalidateAttachments);
          }

          if (clears) {
            gl.clear(clears);
          }

          if (clears & gl.COLOR_BUFFER_BIT) {
            var colorMask = cache.bs.targets[0].blendColorMask;

            if (colorMask !== ColorMask.ALL) {
              var r = (colorMask & ColorMask.R) !== ColorMask.NONE;
              var g = (colorMask & ColorMask.G) !== ColorMask.NONE;
              var b = (colorMask & ColorMask.B) !== ColorMask.NONE;
              var a = (colorMask & ColorMask.A) !== ColorMask.NONE;
              gl.colorMask(r, g, b, a);
            }
          }

          if (clears & gl.DEPTH_BUFFER_BIT && !cache.dss.depthWrite) {
            gl.depthMask(false);
          }

          if (clears & gl.STENCIL_BUFFER_BIT) {
            if (!cache.dss.stencilWriteMaskFront) {
              gl.stencilMaskSeparate(gl.FRONT, 0);
            }

            if (!cache.dss.stencilWriteMaskBack) {
              gl.stencilMaskSeparate(gl.BACK, 0);
            }
          }
        }
      }
      function WebGL2CmdFuncBindStates(device, gpuPipelineState, gpuInputAssembler, gpuDescriptorSets, dynamicOffsets, dynamicStates) {
        var gl = device.gl;
        var cache = device.stateCache;
        var gpuShader = gpuPipelineState && gpuPipelineState.gpuShader;
        var isShaderChanged = false;

        if (gpuPipelineState && gfxStateCache$1.gpuPipelineState !== gpuPipelineState) {
          gfxStateCache$1.gpuPipelineState = gpuPipelineState;
          gfxStateCache$1.glPrimitive = gpuPipelineState.glPrimitive;

          if (gpuShader) {
            var glProgram = gpuShader.glProgram;

            if (cache.glProgram !== glProgram) {
              gl.useProgram(glProgram);
              cache.glProgram = glProgram;
              isShaderChanged = true;
            }
          }

          var rs = gpuPipelineState.rs;

          if (rs) {
            if (cache.rs.cullMode !== rs.cullMode) {
              switch (rs.cullMode) {
                case CullMode.NONE:
                  {
                    gl.disable(gl.CULL_FACE);
                    break;
                  }

                case CullMode.FRONT:
                  {
                    gl.enable(gl.CULL_FACE);
                    gl.cullFace(gl.FRONT);
                    break;
                  }

                case CullMode.BACK:
                  {
                    gl.enable(gl.CULL_FACE);
                    gl.cullFace(gl.BACK);
                    break;
                  }
              }

              device.stateCache.rs.cullMode = rs.cullMode;
            }

            var isFrontFaceCCW = rs.isFrontFaceCCW;

            if (device.stateCache.rs.isFrontFaceCCW !== isFrontFaceCCW) {
              gl.frontFace(isFrontFaceCCW ? gl.CCW : gl.CW);
              device.stateCache.rs.isFrontFaceCCW = isFrontFaceCCW;
            }

            if (device.stateCache.rs.depthBias !== rs.depthBias || device.stateCache.rs.depthBiasSlop !== rs.depthBiasSlop) {
              gl.polygonOffset(rs.depthBias, rs.depthBiasSlop);
              device.stateCache.rs.depthBias = rs.depthBias;
              device.stateCache.rs.depthBiasSlop = rs.depthBiasSlop;
            }

            if (device.stateCache.rs.lineWidth !== rs.lineWidth) {
              gl.lineWidth(rs.lineWidth);
              device.stateCache.rs.lineWidth = rs.lineWidth;
            }
          }

          var dss = gpuPipelineState.dss;

          if (dss) {
            if (cache.dss.depthTest !== dss.depthTest) {
              if (dss.depthTest) {
                gl.enable(gl.DEPTH_TEST);
              } else {
                gl.disable(gl.DEPTH_TEST);
              }

              cache.dss.depthTest = dss.depthTest;
            }

            if (cache.dss.depthWrite !== dss.depthWrite) {
              gl.depthMask(dss.depthWrite);
              cache.dss.depthWrite = dss.depthWrite;
            }

            if (cache.dss.depthFunc !== dss.depthFunc) {
              gl.depthFunc(WebGLCmpFuncs$1[dss.depthFunc]);
              cache.dss.depthFunc = dss.depthFunc;
            }

            if (cache.dss.stencilTestFront !== dss.stencilTestFront || cache.dss.stencilTestBack !== dss.stencilTestBack) {
              if (dss.stencilTestFront || dss.stencilTestBack) {
                gl.enable(gl.STENCIL_TEST);
              } else {
                gl.disable(gl.STENCIL_TEST);
              }

              cache.dss.stencilTestFront = dss.stencilTestFront;
              cache.dss.stencilTestBack = dss.stencilTestBack;
            }

            if (cache.dss.stencilFuncFront !== dss.stencilFuncFront || cache.dss.stencilRefFront !== dss.stencilRefFront || cache.dss.stencilReadMaskFront !== dss.stencilReadMaskFront) {
              gl.stencilFuncSeparate(gl.FRONT, WebGLCmpFuncs$1[dss.stencilFuncFront], dss.stencilRefFront, dss.stencilReadMaskFront);
              cache.dss.stencilFuncFront = dss.stencilFuncFront;
              cache.dss.stencilRefFront = dss.stencilRefFront;
              cache.dss.stencilReadMaskFront = dss.stencilReadMaskFront;
            }

            if (cache.dss.stencilFailOpFront !== dss.stencilFailOpFront || cache.dss.stencilZFailOpFront !== dss.stencilZFailOpFront || cache.dss.stencilPassOpFront !== dss.stencilPassOpFront) {
              gl.stencilOpSeparate(gl.FRONT, WebGLStencilOps$1[dss.stencilFailOpFront], WebGLStencilOps$1[dss.stencilZFailOpFront], WebGLStencilOps$1[dss.stencilPassOpFront]);
              cache.dss.stencilFailOpFront = dss.stencilFailOpFront;
              cache.dss.stencilZFailOpFront = dss.stencilZFailOpFront;
              cache.dss.stencilPassOpFront = dss.stencilPassOpFront;
            }

            if (cache.dss.stencilWriteMaskFront !== dss.stencilWriteMaskFront) {
              gl.stencilMaskSeparate(gl.FRONT, dss.stencilWriteMaskFront);
              cache.dss.stencilWriteMaskFront = dss.stencilWriteMaskFront;
            }

            if (cache.dss.stencilFuncBack !== dss.stencilFuncBack || cache.dss.stencilRefBack !== dss.stencilRefBack || cache.dss.stencilReadMaskBack !== dss.stencilReadMaskBack) {
              gl.stencilFuncSeparate(gl.BACK, WebGLCmpFuncs$1[dss.stencilFuncBack], dss.stencilRefBack, dss.stencilReadMaskBack);
              cache.dss.stencilFuncBack = dss.stencilFuncBack;
              cache.dss.stencilRefBack = dss.stencilRefBack;
              cache.dss.stencilReadMaskBack = dss.stencilReadMaskBack;
            }

            if (cache.dss.stencilFailOpBack !== dss.stencilFailOpBack || cache.dss.stencilZFailOpBack !== dss.stencilZFailOpBack || cache.dss.stencilPassOpBack !== dss.stencilPassOpBack) {
              gl.stencilOpSeparate(gl.BACK, WebGLStencilOps$1[dss.stencilFailOpBack], WebGLStencilOps$1[dss.stencilZFailOpBack], WebGLStencilOps$1[dss.stencilPassOpBack]);
              cache.dss.stencilFailOpBack = dss.stencilFailOpBack;
              cache.dss.stencilZFailOpBack = dss.stencilZFailOpBack;
              cache.dss.stencilPassOpBack = dss.stencilPassOpBack;
            }

            if (cache.dss.stencilWriteMaskBack !== dss.stencilWriteMaskBack) {
              gl.stencilMaskSeparate(gl.BACK, dss.stencilWriteMaskBack);
              cache.dss.stencilWriteMaskBack = dss.stencilWriteMaskBack;
            }
          }

          var bs = gpuPipelineState.bs;

          if (bs) {
            if (cache.bs.isA2C !== bs.isA2C) {
              if (bs.isA2C) {
                gl.enable(gl.SAMPLE_ALPHA_TO_COVERAGE);
              } else {
                gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
              }

              cache.bs.isA2C = bs.isA2C;
            }

            if (cache.bs.blendColor.x !== bs.blendColor.x || cache.bs.blendColor.y !== bs.blendColor.y || cache.bs.blendColor.z !== bs.blendColor.z || cache.bs.blendColor.w !== bs.blendColor.w) {
              gl.blendColor(bs.blendColor.x, bs.blendColor.y, bs.blendColor.z, bs.blendColor.w);
              cache.bs.blendColor.x = bs.blendColor.x;
              cache.bs.blendColor.y = bs.blendColor.y;
              cache.bs.blendColor.z = bs.blendColor.z;
              cache.bs.blendColor.w = bs.blendColor.w;
            }

            var target0 = bs.targets[0];
            var target0Cache = cache.bs.targets[0];

            if (target0Cache.blend !== target0.blend) {
              if (target0.blend) {
                gl.enable(gl.BLEND);
              } else {
                gl.disable(gl.BLEND);
              }

              target0Cache.blend = target0.blend;
            }

            if (target0Cache.blendEq !== target0.blendEq || target0Cache.blendAlphaEq !== target0.blendAlphaEq) {
              gl.blendEquationSeparate(WebGLBlendOps$1[target0.blendEq], WebGLBlendOps$1[target0.blendAlphaEq]);
              target0Cache.blendEq = target0.blendEq;
              target0Cache.blendAlphaEq = target0.blendAlphaEq;
            }

            if (target0Cache.blendSrc !== target0.blendSrc || target0Cache.blendDst !== target0.blendDst || target0Cache.blendSrcAlpha !== target0.blendSrcAlpha || target0Cache.blendDstAlpha !== target0.blendDstAlpha) {
              gl.blendFuncSeparate(WebGLBlendFactors$1[target0.blendSrc], WebGLBlendFactors$1[target0.blendDst], WebGLBlendFactors$1[target0.blendSrcAlpha], WebGLBlendFactors$1[target0.blendDstAlpha]);
              target0Cache.blendSrc = target0.blendSrc;
              target0Cache.blendDst = target0.blendDst;
              target0Cache.blendSrcAlpha = target0.blendSrcAlpha;
              target0Cache.blendDstAlpha = target0.blendDstAlpha;
            }

            if (target0Cache.blendColorMask !== target0.blendColorMask) {
              gl.colorMask((target0.blendColorMask & ColorMask.R) !== ColorMask.NONE, (target0.blendColorMask & ColorMask.G) !== ColorMask.NONE, (target0.blendColorMask & ColorMask.B) !== ColorMask.NONE, (target0.blendColorMask & ColorMask.A) !== ColorMask.NONE);
              target0Cache.blendColorMask = target0.blendColorMask;
            }
          }
        }

        if (gpuPipelineState && gpuPipelineState.gpuPipelineLayout && gpuShader) {
          var blockLen = gpuShader.glBlocks.length;
          var dynamicOffsetIndices = gpuPipelineState.gpuPipelineLayout.dynamicOffsetIndices;

          for (var j = 0; j < blockLen; j++) {
            var glBlock = gpuShader.glBlocks[j];
            var gpuDescriptorSet = gpuDescriptorSets[glBlock.set];
            var descriptorIndex = gpuDescriptorSet && gpuDescriptorSet.descriptorIndices[glBlock.binding];
            var gpuDescriptor = descriptorIndex >= 0 && gpuDescriptorSet.gpuDescriptors[descriptorIndex];

            if (!gpuDescriptor || !gpuDescriptor.gpuBuffer) {
              error("Buffer binding '" + glBlock.name + "' at set " + glBlock.set + " binding " + glBlock.binding + " is not bounded");
              continue;
            }

            var dynamicOffsetIndexSet = dynamicOffsetIndices[glBlock.set];
            var dynamicOffsetIndex = dynamicOffsetIndexSet && dynamicOffsetIndexSet[glBlock.binding];
            var offset = gpuDescriptor.gpuBuffer.glOffset;

            if (dynamicOffsetIndex >= 0) {
              offset += dynamicOffsets[dynamicOffsetIndex];
            }

            if (cache.glBindUBOs[glBlock.glBinding] !== gpuDescriptor.gpuBuffer.glBuffer || cache.glBindUBOOffsets[glBlock.glBinding] !== offset) {
              if (offset) {
                gl.bindBufferRange(gl.UNIFORM_BUFFER, glBlock.glBinding, gpuDescriptor.gpuBuffer.glBuffer, offset, gpuDescriptor.gpuBuffer.size);
              } else {
                gl.bindBufferBase(gl.UNIFORM_BUFFER, glBlock.glBinding, gpuDescriptor.gpuBuffer.glBuffer);
              }

              cache.glUniformBuffer = cache.glBindUBOs[glBlock.glBinding] = gpuDescriptor.gpuBuffer.glBuffer;
              cache.glBindUBOOffsets[glBlock.glBinding] = offset;
            }
          }

          var samplerLen = gpuShader.glSamplerTextures.length;

          for (var i = 0; i < samplerLen; i++) {
            var glSampler = gpuShader.glSamplerTextures[i];
            var _gpuDescriptorSet = gpuDescriptorSets[glSampler.set];

            var _descriptorIndex = _gpuDescriptorSet && _gpuDescriptorSet.descriptorIndices[glSampler.binding];

            var _gpuDescriptor = _descriptorIndex >= 0 && _gpuDescriptorSet.gpuDescriptors[_descriptorIndex];

            for (var l = 0; l < glSampler.units.length; l++) {
              var texUnit = glSampler.units[l];
              var glTexUnit = cache.glTexUnits[texUnit];

              if (!_gpuDescriptor || !_gpuDescriptor.gpuTextureView || !_gpuDescriptor.gpuTextureView.gpuTexture || !_gpuDescriptor.gpuSampler) {
                error("Sampler binding '" + glSampler.name + "' at set " + glSampler.set + " binding " + glSampler.binding + " index " + l + " is not bounded");
                continue;
              }

              var gpuTextureView = _gpuDescriptor.gpuTextureView;
              var gpuTexture = gpuTextureView.gpuTexture;
              var minLod = gpuTextureView.baseLevel;
              var maxLod = minLod + gpuTextureView.levelCount;

              if (gpuTexture.size > 0) {
                if (glTexUnit.glTexture !== gpuTexture.glTexture) {
                  if (cache.texUnit !== texUnit) {
                    gl.activeTexture(gl.TEXTURE0 + texUnit);
                    cache.texUnit = texUnit;
                  }

                  if (gpuTexture.glTexture) {
                    gl.bindTexture(gpuTexture.glTarget, gpuTexture.glTexture);
                  } else {
                    gl.bindTexture(gpuTexture.glTarget, device.nullTex2D.gpuTexture.glTexture);
                  }

                  glTexUnit.glTexture = gpuTexture.glTexture;
                }

                var _gpuDescriptor2 = _gpuDescriptor,
                    gpuSampler = _gpuDescriptor2.gpuSampler;

                var _glSampler3 = gpuSampler.getGLSampler(device, minLod, maxLod);

                if (cache.glSamplerUnits[texUnit] !== _glSampler3) {
                  gl.bindSampler(texUnit, _glSampler3);
                  cache.glSamplerUnits[texUnit] = _glSampler3;
                }
              }

              _gpuDescriptor = _gpuDescriptorSet.gpuDescriptors[++_descriptorIndex];
            }
          }
        }

        if (gpuInputAssembler && gpuShader && (isShaderChanged || gfxStateCache$1.gpuInputAssembler !== gpuInputAssembler)) {
          gfxStateCache$1.gpuInputAssembler = gpuInputAssembler;

          if (device.extensions.useVAO) {
            var glVAO = gpuInputAssembler.glVAOs.get(gpuShader.glProgram);

            if (!glVAO) {
              glVAO = gl.createVertexArray();
              gpuInputAssembler.glVAOs.set(gpuShader.glProgram, glVAO);
              gl.bindVertexArray(glVAO);
              gl.bindBuffer(gl.ARRAY_BUFFER, null);
              gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
              cache.glArrayBuffer = null;
              cache.glElementArrayBuffer = null;
              var glAttrib;

              for (var _j = 0; _j < gpuShader.glInputs.length; _j++) {
                var glInput = gpuShader.glInputs[_j];
                glAttrib = null;

                for (var k = 0; k < gpuInputAssembler.glAttribs.length; k++) {
                  var attrib = gpuInputAssembler.glAttribs[k];

                  if (attrib.name === glInput.name) {
                    glAttrib = attrib;
                    break;
                  }
                }

                if (glAttrib) {
                  if (cache.glArrayBuffer !== glAttrib.glBuffer) {
                    gl.bindBuffer(gl.ARRAY_BUFFER, glAttrib.glBuffer);
                    cache.glArrayBuffer = glAttrib.glBuffer;
                  }

                  for (var c = 0; c < glAttrib.componentCount; ++c) {
                    var glLoc = glInput.glLoc + c;
                    var attribOffset = glAttrib.offset + glAttrib.size * c;
                    gl.enableVertexAttribArray(glLoc);
                    cache.glCurrentAttribLocs[glLoc] = true;
                    gl.vertexAttribPointer(glLoc, glAttrib.count, glAttrib.glType, glAttrib.isNormalized, glAttrib.stride, attribOffset);
                    gl.vertexAttribDivisor(glLoc, glAttrib.isInstanced ? 1 : 0);
                  }
                }
              }

              var gpuBuffer = gpuInputAssembler.gpuIndexBuffer;

              if (gpuBuffer) {
                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, gpuBuffer.glBuffer);
              }

              gl.bindVertexArray(null);
              gl.bindBuffer(gl.ARRAY_BUFFER, null);
              gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
              cache.glArrayBuffer = null;
              cache.glElementArrayBuffer = null;
            }

            if (cache.glVAO !== glVAO) {
              gl.bindVertexArray(glVAO);
              cache.glVAO = glVAO;
            }
          } else {
            for (var a = 0; a < device.capabilities.maxVertexAttributes; ++a) {
              cache.glCurrentAttribLocs[a] = false;
            }

            for (var _j2 = 0; _j2 < gpuShader.glInputs.length; _j2++) {
              var _glInput = gpuShader.glInputs[_j2];
              var _glAttrib = null;

              for (var _k5 = 0; _k5 < gpuInputAssembler.glAttribs.length; _k5++) {
                var _attrib = gpuInputAssembler.glAttribs[_k5];

                if (_attrib.name === _glInput.name) {
                  _glAttrib = _attrib;
                  break;
                }
              }

              if (_glAttrib) {
                if (cache.glArrayBuffer !== _glAttrib.glBuffer) {
                  gl.bindBuffer(gl.ARRAY_BUFFER, _glAttrib.glBuffer);
                  cache.glArrayBuffer = _glAttrib.glBuffer;
                }

                for (var _c = 0; _c < _glAttrib.componentCount; ++_c) {
                  var _glLoc3 = _glInput.glLoc + _c;

                  var _attribOffset = _glAttrib.offset + _glAttrib.size * _c;

                  if (!cache.glEnabledAttribLocs[_glLoc3] && _glLoc3 >= 0) {
                    gl.enableVertexAttribArray(_glLoc3);
                    cache.glEnabledAttribLocs[_glLoc3] = true;
                  }

                  cache.glCurrentAttribLocs[_glLoc3] = true;
                  gl.vertexAttribPointer(_glLoc3, _glAttrib.count, _glAttrib.glType, _glAttrib.isNormalized, _glAttrib.stride, _attribOffset);
                  gl.vertexAttribDivisor(_glLoc3, _glAttrib.isInstanced ? 1 : 0);
                }
              }
            }

            var _gpuBuffer = gpuInputAssembler.gpuIndexBuffer;

            if (_gpuBuffer) {
              if (cache.glElementArrayBuffer !== _gpuBuffer.glBuffer) {
                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, _gpuBuffer.glBuffer);
                cache.glElementArrayBuffer = _gpuBuffer.glBuffer;
              }
            }

            for (var _a = 0; _a < device.capabilities.maxVertexAttributes; ++_a) {
              if (cache.glEnabledAttribLocs[_a] !== cache.glCurrentAttribLocs[_a]) {
                gl.disableVertexAttribArray(_a);
                cache.glEnabledAttribLocs[_a] = false;
              }
            }
          }
        }

        if (gpuPipelineState && gpuPipelineState.dynamicStates.length) {
          var dsLen = gpuPipelineState.dynamicStates.length;

          for (var _k6 = 0; _k6 < dsLen; _k6++) {
            var dynamicState = gpuPipelineState.dynamicStates[_k6];

            switch (dynamicState) {
              case DynamicStateFlagBit.LINE_WIDTH:
                {
                  if (cache.rs.lineWidth !== dynamicStates.lineWidth) {
                    gl.lineWidth(dynamicStates.lineWidth);
                    cache.rs.lineWidth = dynamicStates.lineWidth;
                  }

                  break;
                }

              case DynamicStateFlagBit.DEPTH_BIAS:
                {
                  if (cache.rs.depthBias !== dynamicStates.depthBiasConstant || cache.rs.depthBiasSlop !== dynamicStates.depthBiasSlope) {
                    gl.polygonOffset(dynamicStates.depthBiasConstant, dynamicStates.depthBiasSlope);
                    cache.rs.depthBias = dynamicStates.depthBiasConstant;
                    cache.rs.depthBiasSlop = dynamicStates.depthBiasSlope;
                  }

                  break;
                }

              case DynamicStateFlagBit.BLEND_CONSTANTS:
                {
                  var blendConstant = dynamicStates.blendConstant;

                  if (cache.bs.blendColor.x !== blendConstant.x || cache.bs.blendColor.y !== blendConstant.y || cache.bs.blendColor.z !== blendConstant.z || cache.bs.blendColor.w !== blendConstant.w) {
                    gl.blendColor(blendConstant.x, blendConstant.y, blendConstant.z, blendConstant.w);
                    cache.bs.blendColor.copy(blendConstant);
                  }

                  break;
                }

              case DynamicStateFlagBit.STENCIL_WRITE_MASK:
                {
                  var front = dynamicStates.stencilStatesFront;
                  var back = dynamicStates.stencilStatesBack;

                  if (cache.dss.stencilWriteMaskFront !== front.writeMask) {
                    gl.stencilMaskSeparate(gl.FRONT, front.writeMask);
                    cache.dss.stencilWriteMaskFront = front.writeMask;
                  }

                  if (cache.dss.stencilWriteMaskBack !== back.writeMask) {
                    gl.stencilMaskSeparate(gl.BACK, back.writeMask);
                    cache.dss.stencilWriteMaskBack = back.writeMask;
                  }

                  break;
                }

              case DynamicStateFlagBit.STENCIL_COMPARE_MASK:
                {
                  var _front = dynamicStates.stencilStatesFront;
                  var _back = dynamicStates.stencilStatesBack;

                  if (cache.dss.stencilRefFront !== _front.reference || cache.dss.stencilReadMaskFront !== _front.compareMask) {
                    gl.stencilFuncSeparate(gl.FRONT, WebGLCmpFuncs$1[cache.dss.stencilFuncFront], _front.reference, _front.compareMask);
                    cache.dss.stencilRefFront = _front.reference;
                    cache.dss.stencilReadMaskFront = _front.compareMask;
                  }

                  if (cache.dss.stencilRefBack !== _back.reference || cache.dss.stencilReadMaskBack !== _back.compareMask) {
                    gl.stencilFuncSeparate(gl.BACK, WebGLCmpFuncs$1[cache.dss.stencilFuncBack], _back.reference, _back.compareMask);
                    cache.dss.stencilRefBack = _back.reference;
                    cache.dss.stencilReadMaskBack = _back.compareMask;
                  }

                  break;
                }
            }
          }
        }
      }
      function WebGL2CmdFuncDraw(device, drawInfo) {
        var gl = device.gl;
        var gpuInputAssembler = gfxStateCache$1.gpuInputAssembler,
            glPrimitive = gfxStateCache$1.glPrimitive;
        var md = device.extensions.WEBGL_multi_draw;

        if (gpuInputAssembler) {
          var indexBuffer = gpuInputAssembler.gpuIndexBuffer;

          if (gpuInputAssembler.gpuIndirectBuffer) {
            var indirects = gpuInputAssembler.gpuIndirectBuffer.indirects;

            if (indirects.drawByIndex) {
              for (var j = 0; j < indirects.drawCount; j++) {
                indirects.byteOffsets[j] = indirects.offsets[j] * indexBuffer.stride;
              }

              if (md) {
                if (indirects.instancedDraw) {
                  md.multiDrawElementsInstancedWEBGL(glPrimitive, indirects.counts, 0, gpuInputAssembler.glIndexType, indirects.byteOffsets, 0, indirects.instances, 0, indirects.drawCount);
                } else {
                  md.multiDrawElementsWEBGL(glPrimitive, indirects.counts, 0, gpuInputAssembler.glIndexType, indirects.byteOffsets, 0, indirects.drawCount);
                }
              } else {
                for (var _j3 = 0; _j3 < indirects.drawCount; _j3++) {
                  if (indirects.instances[_j3]) {
                    gl.drawElementsInstanced(glPrimitive, indirects.counts[_j3], gpuInputAssembler.glIndexType, indirects.byteOffsets[_j3], indirects.instances[_j3]);
                  } else {
                    gl.drawElements(glPrimitive, indirects.counts[_j3], gpuInputAssembler.glIndexType, indirects.byteOffsets[_j3]);
                  }
                }
              }
            } else if (md) {
              if (indirects.instancedDraw) {
                md.multiDrawArraysInstancedWEBGL(glPrimitive, indirects.offsets, 0, indirects.counts, 0, indirects.instances, 0, indirects.drawCount);
              } else {
                md.multiDrawArraysWEBGL(glPrimitive, indirects.offsets, 0, indirects.counts, 0, indirects.drawCount);
              }
            } else {
              for (var _j4 = 0; _j4 < indirects.drawCount; _j4++) {
                if (indirects.instances[_j4]) {
                  gl.drawArraysInstanced(glPrimitive, indirects.offsets[_j4], indirects.counts[_j4], indirects.instances[_j4]);
                } else {
                  gl.drawArrays(glPrimitive, indirects.offsets[_j4], indirects.counts[_j4]);
                }
              }
            }
          } else if (drawInfo.instanceCount) {
            if (indexBuffer) {
              if (drawInfo.indexCount > 0) {
                var offset = drawInfo.firstIndex * indexBuffer.stride;
                gl.drawElementsInstanced(glPrimitive, drawInfo.indexCount, gpuInputAssembler.glIndexType, offset, drawInfo.instanceCount);
              }
            } else if (drawInfo.vertexCount > 0) {
              gl.drawArraysInstanced(glPrimitive, drawInfo.firstVertex, drawInfo.vertexCount, drawInfo.instanceCount);
            }
          } else if (indexBuffer) {
            if (drawInfo.indexCount > 0) {
              var _offset = drawInfo.firstIndex * indexBuffer.stride;

              gl.drawElements(glPrimitive, drawInfo.indexCount, gpuInputAssembler.glIndexType, _offset);
            }
          } else if (drawInfo.vertexCount > 0) {
            gl.drawArrays(glPrimitive, drawInfo.firstVertex, drawInfo.vertexCount);
          }
        }
      }
      var cmdIds$1 = new Array(WebGL2Cmd.COUNT);
      function WebGL2CmdFuncExecuteCmds(device, cmdPackage) {
        cmdIds$1.fill(0);

        for (var i = 0; i < cmdPackage.cmds.length; ++i) {
          var cmd = cmdPackage.cmds.array[i];
          var cmdId = cmdIds$1[cmd]++;

          switch (cmd) {
            case WebGL2Cmd.BEGIN_RENDER_PASS:
              {
                var cmd0 = cmdPackage.beginRenderPassCmds.array[cmdId];
                WebGL2CmdFuncBeginRenderPass(device, cmd0.gpuRenderPass, cmd0.gpuFramebuffer, cmd0.renderArea, cmd0.clearColors, cmd0.clearDepth, cmd0.clearStencil);
                break;
              }

            case WebGL2Cmd.BIND_STATES:
              {
                var cmd2 = cmdPackage.bindStatesCmds.array[cmdId];
                WebGL2CmdFuncBindStates(device, cmd2.gpuPipelineState, cmd2.gpuInputAssembler, cmd2.gpuDescriptorSets, cmd2.dynamicOffsets, cmd2.dynamicStates);
                break;
              }

            case WebGL2Cmd.DRAW:
              {
                var cmd3 = cmdPackage.drawCmds.array[cmdId];
                WebGL2CmdFuncDraw(device, cmd3.drawInfo);
                break;
              }

            case WebGL2Cmd.UPDATE_BUFFER:
              {
                var cmd4 = cmdPackage.updateBufferCmds.array[cmdId];
                WebGL2CmdFuncUpdateBuffer(device, cmd4.gpuBuffer, cmd4.buffer, cmd4.offset, cmd4.size);
                break;
              }

            case WebGL2Cmd.COPY_BUFFER_TO_TEXTURE:
              {
                var cmd5 = cmdPackage.copyBufferToTextureCmds.array[cmdId];
                WebGL2CmdFuncCopyBuffersToTexture(device, cmd5.buffers, cmd5.gpuTexture, cmd5.regions);
                break;
              }

            case WebGL2Cmd.BLIT_TEXTURE:
              {
                var cmd6 = cmdPackage.blitTextureCmds.array[cmdId];
                WebGL2CmdFuncBlitTexture(device, cmd6.srcTexture, cmd6.dstTexture, cmd6.regions, cmd6.filter);
                break;
              }
          }
        }
      }
      function WebGL2CmdFuncCopyTexImagesToTexture(device, texImages, gpuTexture, regions) {
        var gl = device.gl;
        var glTexUnit = device.stateCache.glTexUnits[device.stateCache.texUnit];

        if (glTexUnit.glTexture !== gpuTexture.glTexture) {
          gl.bindTexture(gpuTexture.glTarget, gpuTexture.glTexture);
          glTexUnit.glTexture = gpuTexture.glTexture;
        }

        var n = 0;
        var f = 0;

        switch (gpuTexture.glTarget) {
          case gl.TEXTURE_2D:
            {
              for (var k = 0; k < regions.length; k++) {
                var region = regions[k];
                gl.texSubImage2D(gl.TEXTURE_2D, region.texSubres.mipLevel, region.texOffset.x, region.texOffset.y, gpuTexture.glFormat, gpuTexture.glType, texImages[n++]);
              }

              break;
            }

          case gl.TEXTURE_CUBE_MAP:
            {
              for (var _k7 = 0; _k7 < regions.length; _k7++) {
                var _region = regions[_k7];
                var fcount = _region.texSubres.baseArrayLayer + _region.texSubres.layerCount;

                for (f = _region.texSubres.baseArrayLayer; f < fcount; ++f) {
                  gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, _region.texSubres.mipLevel, _region.texOffset.x, _region.texOffset.y, gpuTexture.glFormat, gpuTexture.glType, texImages[n++]);
                }
              }

              break;
            }

          default:
            {
              console.error('Unsupported GL texture type, copy buffer to texture failed.');
            }
        }

        if (gpuTexture.flags & TextureFlagBit.GEN_MIPMAP) {
          gl.generateMipmap(gpuTexture.glTarget);
        }
      }
      var stagingBuffer$1 = new Uint8Array(1);

      function pixelBufferPick$1(buffer, format, offset, stride, extent) {
        var blockHeight = formatAlignment(format).height;
        var bufferSize = FormatSize(format, extent.width, extent.height, extent.depth);
        var rowStrideSize = FormatSize(format, stride.width, 1, 1);
        var sliceStrideSize = FormatSize(format, stride.width, stride.height, 1);
        var destRowSize = FormatSize(format, extent.width, 1, 1);
        var ArrayBufferCtor = getTypedArrayConstructor(FormatInfos[format]);

        if (stagingBuffer$1.byteLength < bufferSize) {
          stagingBuffer$1 = new Uint8Array(bufferSize);
        }

        var destOffset = 0;
        var bufferOffset = offset;

        for (var i = 0; i < extent.depth; i++) {
          bufferOffset = offset + sliceStrideSize * i;

          for (var j = 0; j < extent.height; j += blockHeight) {
            stagingBuffer$1.subarray(destOffset, destOffset + destRowSize).set(new Uint8Array(buffer.buffer, buffer.byteOffset + bufferOffset, destRowSize));
            destOffset += destRowSize;
            bufferOffset += rowStrideSize;
          }
        }

        return new ArrayBufferCtor(stagingBuffer$1.buffer);
      }

      function WebGL2CmdFuncCopyBuffersToTexture(device, buffers, gpuTexture, regions) {
        var gl = device.gl;
        var glTexUnit = device.stateCache.glTexUnits[device.stateCache.texUnit];

        if (glTexUnit.glTexture !== gpuTexture.glTexture) {
          gl.bindTexture(gpuTexture.glTarget, gpuTexture.glTexture);
          glTexUnit.glTexture = gpuTexture.glTexture;
        }

        var n = 0;
        var f = 0;
        var fmtInfo = FormatInfos[gpuTexture.format];
        var ArrayBufferCtor = getTypedArrayConstructor(fmtInfo);
        var isCompressed = fmtInfo.isCompressed;
        var blockSize = formatAlignment(gpuTexture.format);
        var extent = new Extent();
        var offset = new Offset();
        var stride = new Extent();

        switch (gpuTexture.glTarget) {
          case gl.TEXTURE_2D:
            {
              for (var k = 0; k < regions.length; k++) {
                var region = regions[k];
                var mipLevel = region.texSubres.mipLevel;
                offset.x = region.texOffset.x === 0 ? 0 : alignTo(region.texOffset.x, blockSize.width);
                offset.y = region.texOffset.y === 0 ? 0 : alignTo(region.texOffset.y, blockSize.height);
                extent.width = region.texExtent.width < blockSize.width ? region.texExtent.width : alignTo(region.texExtent.width, blockSize.width);
                extent.height = region.texExtent.height < blockSize.height ? region.texExtent.width : alignTo(region.texExtent.height, blockSize.height);
                stride.width = region.buffStride > 0 ? region.buffStride : extent.width;
                stride.height = region.buffTexHeight > 0 ? region.buffTexHeight : extent.height;
                var destWidth = region.texExtent.width + offset.x === gpuTexture.width >> mipLevel ? region.texExtent.width : extent.width;
                var destHeight = region.texExtent.height + offset.y === gpuTexture.height >> mipLevel ? region.texExtent.height : extent.height;
                var pixels = void 0;
                var buffer = buffers[n++];

                if (stride.width === extent.width && stride.height === extent.height) {
                  pixels = new ArrayBufferCtor(buffer.buffer, buffer.byteOffset + region.buffOffset);
                } else {
                  pixels = pixelBufferPick$1(buffer, gpuTexture.format, region.buffOffset, stride, extent);
                }

                if (!isCompressed) {
                  gl.texSubImage2D(gl.TEXTURE_2D, mipLevel, offset.x, offset.y, destWidth, destHeight, gpuTexture.glFormat, gpuTexture.glType, pixels);
                } else if (gpuTexture.glInternalFmt !== WebGL2EXT.COMPRESSED_RGB_ETC1_WEBGL) {
                  gl.compressedTexSubImage2D(gl.TEXTURE_2D, mipLevel, offset.x, offset.y, destWidth, destHeight, gpuTexture.glFormat, pixels);
                } else {
                  gl.compressedTexImage2D(gl.TEXTURE_2D, mipLevel, gpuTexture.glInternalFmt, destWidth, destHeight, 0, pixels);
                }
              }

              break;
            }

          case gl.TEXTURE_2D_ARRAY:
            {
              for (var _k8 = 0; _k8 < regions.length; _k8++) {
                var _region2 = regions[_k8];
                var _mipLevel = _region2.texSubres.mipLevel;
                offset.x = _region2.texOffset.x === 0 ? 0 : alignTo(_region2.texOffset.x, blockSize.width);
                offset.y = _region2.texOffset.y === 0 ? 0 : alignTo(_region2.texOffset.y, blockSize.height);
                extent.width = _region2.texExtent.width < blockSize.width ? _region2.texExtent.width : alignTo(_region2.texExtent.width, blockSize.width);
                extent.height = _region2.texExtent.height < blockSize.height ? _region2.texExtent.width : alignTo(_region2.texExtent.height, blockSize.height);
                extent.depth = 1;
                stride.width = _region2.buffStride > 0 ? _region2.buffStride : extent.width;
                stride.height = _region2.buffTexHeight > 0 ? _region2.buffTexHeight : extent.height;

                var _destWidth = _region2.texExtent.width + offset.x === gpuTexture.width >> _mipLevel ? _region2.texExtent.width : extent.width;

                var _destHeight = _region2.texExtent.height + offset.y === gpuTexture.height >> _mipLevel ? _region2.texExtent.height : extent.height;

                var fcount = _region2.texSubres.baseArrayLayer + _region2.texSubres.layerCount;

                for (f = _region2.texSubres.baseArrayLayer; f < fcount; ++f) {
                  offset.z = f;

                  var _pixels = void 0;

                  var _buffer = buffers[n++];

                  if (stride.width === extent.width && stride.height === extent.height) {
                    _pixels = new ArrayBufferCtor(_buffer.buffer, _buffer.byteOffset + _region2.buffOffset);
                  } else {
                    _pixels = pixelBufferPick$1(_buffer, gpuTexture.format, _region2.buffOffset, stride, extent);
                  }

                  if (!isCompressed) {
                    gl.texSubImage3D(gl.TEXTURE_2D_ARRAY, _mipLevel, offset.x, offset.y, offset.z, _destWidth, _destHeight, extent.depth, gpuTexture.glFormat, gpuTexture.glType, _pixels);
                  } else if (gpuTexture.glInternalFmt !== WebGL2EXT.COMPRESSED_RGB_ETC1_WEBGL) {
                    gl.compressedTexSubImage3D(gl.TEXTURE_2D_ARRAY, _mipLevel, offset.x, offset.y, offset.z, _destWidth, _destHeight, extent.depth, gpuTexture.glFormat, _pixels);
                  } else {
                    gl.compressedTexImage3D(gl.TEXTURE_2D_ARRAY, _mipLevel, gpuTexture.glInternalFmt, _destWidth, _destHeight, extent.depth, 0, _pixels);
                  }
                }
              }

              break;
            }

          case gl.TEXTURE_3D:
            {
              for (var _k9 = 0; _k9 < regions.length; _k9++) {
                var _region3 = regions[_k9];
                var _mipLevel2 = _region3.texSubres.mipLevel;
                offset.x = _region3.texOffset.x === 0 ? 0 : alignTo(_region3.texOffset.x, blockSize.width);
                offset.y = _region3.texOffset.y === 0 ? 0 : alignTo(_region3.texOffset.y, blockSize.height);
                offset.z = _region3.texOffset.z;
                extent.width = _region3.texExtent.width < blockSize.width ? _region3.texExtent.width : alignTo(_region3.texExtent.width, blockSize.width);
                extent.height = _region3.texExtent.height < blockSize.height ? _region3.texExtent.width : alignTo(_region3.texExtent.height, blockSize.height);
                extent.depth = _region3.texExtent.depth;
                stride.width = _region3.buffStride > 0 ? _region3.buffStride : extent.width;
                stride.height = _region3.buffTexHeight > 0 ? _region3.buffTexHeight : extent.height;

                var _destWidth2 = _region3.texExtent.width + offset.x === gpuTexture.width >> _mipLevel2 ? _region3.texExtent.width : extent.width;

                var _destHeight2 = _region3.texExtent.height + offset.y === gpuTexture.height >> _mipLevel2 ? _region3.texExtent.height : extent.height;

                var _pixels2 = void 0;

                var _buffer2 = buffers[n++];

                if (stride.width === extent.width && stride.height === extent.height) {
                  _pixels2 = new ArrayBufferCtor(_buffer2.buffer, _buffer2.byteOffset + _region3.buffOffset);
                } else {
                  _pixels2 = pixelBufferPick$1(_buffer2, gpuTexture.format, _region3.buffOffset, stride, extent);
                }

                if (!isCompressed) {
                  gl.texSubImage3D(gl.TEXTURE_2D_ARRAY, _mipLevel2, offset.x, offset.y, offset.z, _destWidth2, _destHeight2, extent.depth, gpuTexture.glFormat, gpuTexture.glType, _pixels2);
                } else if (gpuTexture.glInternalFmt !== WebGL2EXT.COMPRESSED_RGB_ETC1_WEBGL) {
                  gl.compressedTexSubImage3D(gl.TEXTURE_2D_ARRAY, _mipLevel2, offset.x, offset.y, offset.z, _destWidth2, _destHeight2, extent.depth, gpuTexture.glFormat, _pixels2);
                } else {
                  gl.compressedTexImage3D(gl.TEXTURE_2D_ARRAY, _mipLevel2, gpuTexture.glInternalFmt, _destWidth2, _destHeight2, extent.depth, 0, _pixels2);
                }
              }

              break;
            }

          case gl.TEXTURE_CUBE_MAP:
            {
              for (var _k10 = 0; _k10 < regions.length; _k10++) {
                var _region4 = regions[_k10];
                var _mipLevel3 = _region4.texSubres.mipLevel;
                offset.x = _region4.texOffset.x === 0 ? 0 : alignTo(_region4.texOffset.x, blockSize.width);
                offset.y = _region4.texOffset.y === 0 ? 0 : alignTo(_region4.texOffset.y, blockSize.height);
                extent.width = _region4.texExtent.width < blockSize.width ? _region4.texExtent.width : alignTo(_region4.texExtent.width, blockSize.width);
                extent.height = _region4.texExtent.height < blockSize.height ? _region4.texExtent.width : alignTo(_region4.texExtent.height, blockSize.height);
                stride.width = _region4.buffStride > 0 ? _region4.buffStride : extent.width;
                stride.height = _region4.buffTexHeight > 0 ? _region4.buffTexHeight : extent.height;

                var _destWidth3 = _region4.texExtent.width + offset.x === gpuTexture.width >> _mipLevel3 ? _region4.texExtent.width : extent.width;

                var _destHeight3 = _region4.texExtent.height + offset.y === gpuTexture.height >> _mipLevel3 ? _region4.texExtent.height : extent.height;

                var _fcount = _region4.texSubres.baseArrayLayer + _region4.texSubres.layerCount;

                for (f = _region4.texSubres.baseArrayLayer; f < _fcount; ++f) {
                  var _pixels3 = void 0;

                  var _buffer3 = buffers[n++];

                  if (stride.width === extent.width && stride.height === extent.height) {
                    _pixels3 = new ArrayBufferCtor(_buffer3.buffer, _buffer3.byteOffset + _region4.buffOffset);
                  } else {
                    _pixels3 = pixelBufferPick$1(_buffer3, gpuTexture.format, _region4.buffOffset, stride, extent);
                  }

                  if (!isCompressed) {
                    gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, _mipLevel3, offset.x, offset.y, _destWidth3, _destHeight3, gpuTexture.glFormat, gpuTexture.glType, _pixels3);
                  } else if (gpuTexture.glInternalFmt !== WebGL2EXT.COMPRESSED_RGB_ETC1_WEBGL) {
                    gl.compressedTexSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, _mipLevel3, offset.x, offset.y, _destWidth3, _destHeight3, gpuTexture.glFormat, _pixels3);
                  } else {
                    gl.compressedTexImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + f, _mipLevel3, gpuTexture.glInternalFmt, _destWidth3, _destHeight3, 0, _pixels3);
                  }
                }
              }

              break;
            }

          default:
            {
              console.error('Unsupported GL texture type, copy buffer to texture failed.');
            }
        }

        if (gpuTexture.flags & TextureFlagBit.GEN_MIPMAP) {
          gl.generateMipmap(gpuTexture.glTarget);
        }
      }
      function WebGL2CmdFuncCopyTextureToBuffers(device, gpuTexture, buffers, regions) {
        var gl = device.gl;
        var cache = device.stateCache;
        var framebuffer = gl.createFramebuffer();
        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
        var x = 0;
        var y = 0;
        var w = 1;
        var h = 1;

        switch (gpuTexture.glTarget) {
          case gl.TEXTURE_2D:
            {
              for (var k = 0; k < regions.length; k++) {
                var region = regions[k];
                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gpuTexture.glTarget, gpuTexture.glTexture, region.texSubres.mipLevel);
                x = region.texOffset.x;
                y = region.texOffset.y;
                w = region.texExtent.width;
                h = region.texExtent.height;
                gl.readPixels(x, y, w, h, gpuTexture.glFormat, gpuTexture.glType, buffers[k]);
              }

              break;
            }

          default:
            {
              console.error('Unsupported GL texture type, copy texture to buffers failed.');
            }
        }

        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        cache.glFramebuffer = null;
        gl.deleteFramebuffer(framebuffer);
      }
      function WebGL2CmdFuncBlitTexture(device, src, dst, regions, filter) {
        var gl = device.gl;
        var cache = device.stateCache;
        var blitManager = device.blitManager;

        if (!blitManager) {
          return;
        }

        var glFilter = filter === Filter.LINEAR || filter === Filter.ANISOTROPIC ? gl.LINEAR : gl.NEAREST;
        var srcFramebuffer = blitManager.srcFramebuffer;
        var dstFramebuffer = blitManager.dstFramebuffer;
        var origReadFBO = cache.glReadFramebuffer;
        var origDrawFBO = cache.glFramebuffer;
        var srcMip = regions[0].srcSubres.mipLevel;
        var dstMip = regions[0].dstSubres.mipLevel;

        var blitInfo = function blitInfo(formatInfo) {
          var mask = 0;
          var attachment = gl.COLOR_ATTACHMENT0;

          if (formatInfo.hasStencil) {
            attachment = gl.DEPTH_STENCIL_ATTACHMENT;
          } else if (formatInfo.hasDepth) {
            attachment = gl.DEPTH_ATTACHMENT;
          }

          if (formatInfo.hasDepth || formatInfo.hasStencil) {
            if (formatInfo.hasDepth) {
              mask |= gl.DEPTH_BUFFER_BIT;
            }

            if (formatInfo.hasStencil) {
              mask |= gl.STENCIL_BUFFER_BIT;
            }
          } else {
            mask |= gl.COLOR_BUFFER_BIT;
          }

          return {
            mask: mask,
            attachment: attachment
          };
        };

        var regionIndices = regions.map(function (_, i) {
          return i;
        });
        regionIndices.sort(function (a, b) {
          return regions[a].srcSubres.mipLevel - regions[b].srcSubres.mipLevel;
        });

        var _blitInfo = blitInfo(FormatInfos[src.format]),
            srcMask = _blitInfo.mask,
            srcAttachment = _blitInfo.attachment;

        var _blitInfo2 = blitInfo(FormatInfos[dst.format]),
            dstAttachment = _blitInfo2.attachment;

        if (cache.glReadFramebuffer !== srcFramebuffer) {
          gl.bindFramebuffer(gl.READ_FRAMEBUFFER, srcFramebuffer);
          cache.glReadFramebuffer = srcFramebuffer;
        }

        if (cache.glFramebuffer !== dstFramebuffer) {
          gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, dstFramebuffer);
          cache.glFramebuffer = dstFramebuffer;
        }

        if (src.glTexture) {
          gl.framebufferTexture2D(gl.READ_FRAMEBUFFER, srcAttachment, src.glTarget, src.glTexture, srcMip);
        } else {
          gl.framebufferRenderbuffer(gl.READ_FRAMEBUFFER, srcAttachment, gl.RENDERBUFFER, src.glRenderbuffer);
        }

        if (dst.glTexture) {
          gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, dstAttachment, dst.glTarget, dst.glTexture, dstMip);
        } else {
          gl.framebufferRenderbuffer(gl.DRAW_FRAMEBUFFER, dstAttachment, gl.RENDERBUFFER, dst.glRenderbuffer);
        }

        for (var i = 0; i < regionIndices.length; i++) {
          var region = regions[regionIndices[i]];

          if (src.glTexture && srcMip !== region.srcSubres.mipLevel) {
            srcMip = region.srcSubres.mipLevel;
            gl.framebufferTexture2D(gl.READ_FRAMEBUFFER, srcAttachment, src.glTarget, src.glTexture, srcMip);
          }

          if (dst.glTexture && dstMip !== region.dstSubres.mipLevel) {
            dstMip = region.dstSubres.mipLevel;
            gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, dstAttachment, dst.glTarget, dst.glTexture, dstMip);
          }

          gl.blitFramebuffer(region.srcOffset.x, region.srcOffset.y, region.srcOffset.x + region.srcExtent.width, region.srcOffset.y + region.srcExtent.height, region.dstOffset.x, region.dstOffset.y, region.dstOffset.x + region.dstExtent.width, region.dstOffset.y + region.dstExtent.height, srcMask, glFilter);
        }

        if (cache.glReadFramebuffer !== origReadFBO) {
          gl.bindFramebuffer(gl.READ_FRAMEBUFFER, origReadFBO);
          cache.glReadFramebuffer = origReadFBO;
        }

        if (cache.glFramebuffer !== origDrawFBO) {
          gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, origDrawFBO);
          cache.glFramebuffer = origDrawFBO;
        }
      }

      var WebGL2IndirectDrawInfos = function () {
        function WebGL2IndirectDrawInfos() {
          this.counts = void 0;
          this.offsets = void 0;
          this.instances = void 0;
          this.drawCount = 0;
          this.drawByIndex = false;
          this.instancedDraw = false;
          this.byteOffsets = void 0;
          this._capacity = 4;
          this.counts = new Int32Array(this._capacity);
          this.offsets = new Int32Array(this._capacity);
          this.instances = new Int32Array(this._capacity);
          this.byteOffsets = new Int32Array(this._capacity);
        }

        var _proto = WebGL2IndirectDrawInfos.prototype;

        _proto.clearDraws = function clearDraws() {
          this.drawCount = 0;
          this.drawByIndex = false;
          this.instancedDraw = false;
        };

        _proto.setDrawInfo = function setDrawInfo(idx, info) {
          this._ensureCapacity(idx);

          this.drawByIndex = info.indexCount > 0;
          this.instancedDraw = !!info.instanceCount;
          this.drawCount = Math.max(idx + 1, this.drawCount);

          if (this.drawByIndex) {
            this.counts[idx] = info.indexCount;
            this.offsets[idx] = info.firstIndex;
          } else {
            this.counts[idx] = info.vertexCount;
            this.offsets[idx] = info.firstVertex;
          }

          this.instances[idx] = Math.max(1, info.instanceCount);
        };

        _proto._ensureCapacity = function _ensureCapacity(target) {
          if (this._capacity > target) return;
          this._capacity = nextPow2$1(target);
          var counts = new Int32Array(this._capacity);
          var offsets = new Int32Array(this._capacity);
          var instances = new Int32Array(this._capacity);
          this.byteOffsets = new Int32Array(this._capacity);
          counts.set(this.counts);
          offsets.set(this.offsets);
          instances.set(this.instances);
          this.counts = counts;
          this.offsets = offsets;
          this.instances = instances;
        };

        return WebGL2IndirectDrawInfos;
      }();
      var IWebGL2BlitManager = function () {
        function IWebGL2BlitManager() {
          this._srcFramebuffer = void 0;
          this._dstFramebuffer = void 0;
          var gl = WebGL2DeviceManager.instance.gl;
          this._srcFramebuffer = gl.createFramebuffer();
          this._dstFramebuffer = gl.createFramebuffer();
        }

        var _proto2 = IWebGL2BlitManager.prototype;

        _proto2.destroy = function destroy() {
          var gl = WebGL2DeviceManager.instance.gl;
          gl.deleteFramebuffer(this._srcFramebuffer);
          gl.deleteFramebuffer(this._dstFramebuffer);
        };

        _createClass(IWebGL2BlitManager, [{
          key: "srcFramebuffer",
          get: function get() {
            return this._srcFramebuffer;
          }
        }, {
          key: "dstFramebuffer",
          get: function get() {
            return this._dstFramebuffer;
          }
        }]);

        return IWebGL2BlitManager;
      }();

      var WebGL2Buffer = function (_Buffer) {
        _inheritsLoose(WebGL2Buffer, _Buffer);

        function WebGL2Buffer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Buffer.call.apply(_Buffer, [this].concat(args)) || this;
          _this._gpuBuffer = null;
          return _this;
        }

        var _proto = WebGL2Buffer.prototype;

        _proto.initialize = function initialize(info) {
          if ('buffer' in info) {
            this._isBufferView = true;
            var buffer = info.buffer;
            this._usage = buffer.usage;
            this._memUsage = buffer.memUsage;
            this._size = this._stride = info.range;
            this._count = 1;
            this._flags = buffer.flags;
            this._gpuBuffer = {
              usage: this._usage,
              memUsage: this._memUsage,
              size: this._size,
              stride: this._stride,
              buffer: null,
              indirects: buffer.gpuBuffer.indirects,
              glTarget: buffer.gpuBuffer.glTarget,
              glBuffer: buffer.gpuBuffer.glBuffer,
              glOffset: info.offset
            };
          } else {
            this._usage = info.usage;
            this._memUsage = info.memUsage;
            this._size = info.size;
            this._stride = Math.max(info.stride || this._size, 1);
            this._count = this._size / this._stride;
            this._flags = info.flags;
            this._gpuBuffer = {
              usage: this._usage,
              memUsage: this._memUsage,
              size: this._size,
              stride: this._stride,
              buffer: null,
              indirects: new WebGL2IndirectDrawInfos(),
              glTarget: 0,
              glBuffer: null,
              glOffset: 0
            };
            WebGL2CmdFuncCreateBuffer(WebGL2DeviceManager.instance, this._gpuBuffer);
            WebGL2DeviceManager.instance.memoryStatus.bufferSize += this._size;
          }
        };

        _proto.destroy = function destroy() {
          if (this._gpuBuffer) {
            if (!this._isBufferView) {
              WebGL2CmdFuncDestroyBuffer(WebGL2DeviceManager.instance, this._gpuBuffer);
              WebGL2DeviceManager.instance.memoryStatus.bufferSize -= this._size;
            }

            this._gpuBuffer = null;
          }
        };

        _proto.resize = function resize(size) {
          if (this._isBufferView) {
            console.warn('cannot resize buffer views!');
            return;
          }

          var oldSize = this._size;

          if (oldSize === size) {
            return;
          }

          this._size = size;
          this._count = this._size / this._stride;

          if (this._gpuBuffer) {
            this._gpuBuffer.size = size;

            if (size > 0) {
              WebGL2CmdFuncResizeBuffer(WebGL2DeviceManager.instance, this._gpuBuffer);
              WebGL2DeviceManager.instance.memoryStatus.bufferSize -= oldSize;
              WebGL2DeviceManager.instance.memoryStatus.bufferSize += size;
            }
          }
        };

        _proto.update = function update(buffer, size) {
          if (this._isBufferView) {
            console.warn('cannot update through buffer views!');
            return;
          }

          var buffSize;

          if (size !== undefined) {
            buffSize = size;
          } else if (this._usage & BufferUsageBit.INDIRECT) {
            buffSize = 0;
          } else {
            buffSize = buffer.byteLength;
          }

          WebGL2CmdFuncUpdateBuffer(WebGL2DeviceManager.instance, this._gpuBuffer, buffer, 0, buffSize);
        };

        _createClass(WebGL2Buffer, [{
          key: "gpuBuffer",
          get: function get() {
            return this._gpuBuffer;
          }
        }]);

        return WebGL2Buffer;
      }(Buffer);

      var WebGL2CommandPool = function () {
        function WebGL2CommandPool(Clazz, count) {
          this._frees = void 0;
          this._freeIdx = 0;
          this._freeCmds = void 0;
          this._frees = new Array(count);
          this._freeCmds = new CachedArray(count);

          for (var i = 0; i < count; ++i) {
            this._frees[i] = new Clazz();
          }

          this._freeIdx = count - 1;
        }

        var _proto = WebGL2CommandPool.prototype;

        _proto.alloc = function alloc(Clazz) {
          if (this._freeIdx < 0) {
            var size = this._frees.length * 2;
            var temp = this._frees;
            this._frees = new Array(size);
            var increase = size - temp.length;

            for (var i = 0; i < increase; ++i) {
              this._frees[i] = new Clazz();
            }

            for (var _i = increase, j = 0; _i < size; ++_i, ++j) {
              this._frees[_i] = temp[j];
            }

            this._freeIdx += increase;
          }

          var cmd = this._frees[this._freeIdx];
          this._frees[this._freeIdx--] = null;
          ++cmd.refCount;
          return cmd;
        };

        _proto.free = function free(cmd) {
          if (--cmd.refCount === 0) {
            this._freeCmds.push(cmd);
          }
        };

        _proto.freeCmds = function freeCmds(cmds) {
          for (var i = 0; i < cmds.length; ++i) {
            if (--cmds.array[i].refCount === 0) {
              this._freeCmds.push(cmds.array[i]);
            }
          }
        };

        _proto.release = function release() {
          for (var i = 0; i < this._freeCmds.length; ++i) {
            var cmd = this._freeCmds.array[i];
            cmd.clear();
            this._frees[++this._freeIdx] = cmd;
          }

          this._freeCmds.clear();
        };

        return WebGL2CommandPool;
      }();
      var WebGL2CommandAllocator = function () {
        function WebGL2CommandAllocator() {
          this.beginRenderPassCmdPool = void 0;
          this.bindStatesCmdPool = void 0;
          this.drawCmdPool = void 0;
          this.updateBufferCmdPool = void 0;
          this.copyBufferToTextureCmdPool = void 0;
          this.blitTextureCmdPool = void 0;
          this.beginRenderPassCmdPool = new WebGL2CommandPool(WebGL2CmdBeginRenderPass, 1);
          this.bindStatesCmdPool = new WebGL2CommandPool(WebGL2CmdBindStates, 1);
          this.drawCmdPool = new WebGL2CommandPool(WebGL2CmdDraw, 1);
          this.updateBufferCmdPool = new WebGL2CommandPool(WebGL2CmdUpdateBuffer, 1);
          this.copyBufferToTextureCmdPool = new WebGL2CommandPool(WebGL2CmdCopyBufferToTexture, 1);
          this.blitTextureCmdPool = new WebGL2CommandPool(WebGL2CmdBlitTexture, 1);
        }

        var _proto2 = WebGL2CommandAllocator.prototype;

        _proto2.clearCmds = function clearCmds(cmdPackage) {
          if (cmdPackage.beginRenderPassCmds.length) {
            this.beginRenderPassCmdPool.freeCmds(cmdPackage.beginRenderPassCmds);
            cmdPackage.beginRenderPassCmds.clear();
          }

          if (cmdPackage.bindStatesCmds.length) {
            this.bindStatesCmdPool.freeCmds(cmdPackage.bindStatesCmds);
            cmdPackage.bindStatesCmds.clear();
          }

          if (cmdPackage.drawCmds.length) {
            this.drawCmdPool.freeCmds(cmdPackage.drawCmds);
            cmdPackage.drawCmds.clear();
          }

          if (cmdPackage.updateBufferCmds.length) {
            this.updateBufferCmdPool.freeCmds(cmdPackage.updateBufferCmds);
            cmdPackage.updateBufferCmds.clear();
          }

          if (cmdPackage.copyBufferToTextureCmds.length) {
            this.copyBufferToTextureCmdPool.freeCmds(cmdPackage.copyBufferToTextureCmds);
            cmdPackage.copyBufferToTextureCmds.clear();
          }

          if (cmdPackage.blitTextureCmds.length) {
            this.blitTextureCmdPool.freeCmds(cmdPackage.blitTextureCmds);
            cmdPackage.blitTextureCmds.clear();
          }

          cmdPackage.cmds.clear();
        };

        _proto2.releaseCmds = function releaseCmds() {
          this.beginRenderPassCmdPool.release();
          this.bindStatesCmdPool.release();
          this.drawCmdPool.release();
          this.updateBufferCmdPool.release();
          this.copyBufferToTextureCmdPool.release();
          this.blitTextureCmdPool.release();
        };

        return WebGL2CommandAllocator;
      }();

      var WebGL2CommandBuffer = function (_CommandBuffer) {
        _inheritsLoose(WebGL2CommandBuffer, _CommandBuffer);

        function WebGL2CommandBuffer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _CommandBuffer.call.apply(_CommandBuffer, [this].concat(args)) || this;
          _this.cmdPackage = new WebGL2CmdPackage();
          _this._cmdAllocator = new WebGL2CommandAllocator();
          _this._isInRenderPass = false;
          _this._curGPUPipelineState = null;
          _this._curGPUDescriptorSets = [];
          _this._curGPUInputAssembler = null;
          _this._curDynamicOffsets = Array(8).fill(0);
          _this._curDynamicStates = new DynamicStates();
          _this._isStateInvalied = false;
          return _this;
        }

        var _proto = WebGL2CommandBuffer.prototype;

        _proto.initialize = function initialize(info) {
          this._type = info.type;
          this._queue = info.queue;
          var setCount = WebGL2DeviceManager.instance.bindingMappings.blockOffsets.length;

          for (var i = 0; i < setCount; i++) {
            this._curGPUDescriptorSets.push(null);
          }
        };

        _proto.destroy = function destroy() {
          this._cmdAllocator.clearCmds(this.cmdPackage);
        };

        _proto.begin = function begin(renderPass, subpass, frameBuffer) {

          this._cmdAllocator.clearCmds(this.cmdPackage);

          this._curGPUPipelineState = null;
          this._curGPUInputAssembler = null;
          this._curGPUDescriptorSets.length = 0;
          this._numDrawCalls = 0;
          this._numInstances = 0;
          this._numTris = 0;
        };

        _proto.end = function end() {
          if (this._isStateInvalied) {
            this.bindStates();
          }

          this._isInRenderPass = false;
        };

        _proto.beginRenderPass = function beginRenderPass(renderPass, framebuffer, renderArea, clearColors, clearDepth, clearStencil) {
          var cmd = this._cmdAllocator.beginRenderPassCmdPool.alloc(WebGL2CmdBeginRenderPass);

          cmd.gpuRenderPass = renderPass.gpuRenderPass;
          cmd.gpuFramebuffer = framebuffer.gpuFramebuffer;
          cmd.renderArea.copy(renderArea);

          for (var i = 0; i < clearColors.length; ++i) {
            cmd.clearColors[i] = clearColors[i];
          }

          cmd.clearDepth = clearDepth;
          cmd.clearStencil = clearStencil;
          this.cmdPackage.beginRenderPassCmds.push(cmd);
          this.cmdPackage.cmds.push(WebGL2Cmd.BEGIN_RENDER_PASS);
          this._isInRenderPass = true;
        };

        _proto.endRenderPass = function endRenderPass() {
          this._isInRenderPass = false;
        };

        _proto.bindPipelineState = function bindPipelineState(pipelineState) {
          var gpuPipelineState = pipelineState.gpuPipelineState;

          if (gpuPipelineState !== this._curGPUPipelineState) {
            this._curGPUPipelineState = gpuPipelineState;
            this._isStateInvalied = true;
          }
        };

        _proto.bindDescriptorSet = function bindDescriptorSet(set, descriptorSet, dynamicOffsets) {
          var gpuDescriptorSets = descriptorSet.gpuDescriptorSet;

          if (gpuDescriptorSets !== this._curGPUDescriptorSets[set]) {
            this._curGPUDescriptorSets[set] = gpuDescriptorSets;
            this._isStateInvalied = true;
          }

          if (dynamicOffsets) {
            var _this$_curGPUPipeline;

            var gpuPipelineLayout = (_this$_curGPUPipeline = this._curGPUPipelineState) === null || _this$_curGPUPipeline === void 0 ? void 0 : _this$_curGPUPipeline.gpuPipelineLayout;

            if (gpuPipelineLayout) {
              var offsets = this._curDynamicOffsets;
              var idx = gpuPipelineLayout.dynamicOffsetOffsets[set];

              for (var i = 0; i < dynamicOffsets.length; i++) {
                offsets[idx + i] = dynamicOffsets[i];
              }

              this._isStateInvalied = true;
            }
          }
        };

        _proto.bindInputAssembler = function bindInputAssembler(inputAssembler) {
          var gpuInputAssembler = inputAssembler.gpuInputAssembler;
          this._curGPUInputAssembler = gpuInputAssembler;
          this._isStateInvalied = true;
        };

        _proto.setViewport = function setViewport(viewport) {
          var cache = this._curDynamicStates.viewport;

          if (cache.left !== viewport.left || cache.top !== viewport.top || cache.width !== viewport.width || cache.height !== viewport.height || cache.minDepth !== viewport.minDepth || cache.maxDepth !== viewport.maxDepth) {
            cache.left = viewport.left;
            cache.top = viewport.top;
            cache.width = viewport.width;
            cache.height = viewport.height;
            cache.minDepth = viewport.minDepth;
            cache.maxDepth = viewport.maxDepth;
            this._isStateInvalied = true;
          }
        };

        _proto.setScissor = function setScissor(scissor) {
          var cache = this._curDynamicStates.scissor;

          if (cache.x !== scissor.x || cache.y !== scissor.y || cache.width !== scissor.width || cache.height !== scissor.height) {
            cache.x = scissor.x;
            cache.y = scissor.y;
            cache.width = scissor.width;
            cache.height = scissor.height;
            this._isStateInvalied = true;
          }
        };

        _proto.setLineWidth = function setLineWidth(lineWidth) {
          if (this._curDynamicStates.lineWidth !== lineWidth) {
            this._curDynamicStates.lineWidth = lineWidth;
            this._isStateInvalied = true;
          }
        };

        _proto.setDepthBias = function setDepthBias(depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor) {
          var cache = this._curDynamicStates;

          if (cache.depthBiasConstant !== depthBiasConstantFactor || cache.depthBiasClamp !== depthBiasClamp || cache.depthBiasSlope !== depthBiasSlopeFactor) {
            cache.depthBiasConstant = depthBiasConstantFactor;
            cache.depthBiasClamp = depthBiasClamp;
            cache.depthBiasSlope = depthBiasSlopeFactor;
            this._isStateInvalied = true;
          }
        };

        _proto.setBlendConstants = function setBlendConstants(blendConstants) {
          var cache = this._curDynamicStates.blendConstant;

          if (cache.x !== blendConstants.x || cache.y !== blendConstants.y || cache.z !== blendConstants.z || cache.w !== blendConstants.w) {
            cache.copy(blendConstants);
            this._isStateInvalied = true;
          }
        };

        _proto.setDepthBound = function setDepthBound(minDepthBounds, maxDepthBounds) {
          var cache = this._curDynamicStates;

          if (cache.depthMinBounds !== minDepthBounds || cache.depthMaxBounds !== maxDepthBounds) {
            cache.depthMinBounds = minDepthBounds;
            cache.depthMaxBounds = maxDepthBounds;
            this._isStateInvalied = true;
          }
        };

        _proto.setStencilWriteMask = function setStencilWriteMask(face, writeMask) {
          var front = this._curDynamicStates.stencilStatesFront;
          var back = this._curDynamicStates.stencilStatesBack;

          if (face & StencilFace.FRONT) {
            if (front.writeMask !== writeMask) {
              front.writeMask = writeMask;
              this._isStateInvalied = true;
            }
          }

          if (face & StencilFace.BACK) {
            if (back.writeMask !== writeMask) {
              back.writeMask = writeMask;
              this._isStateInvalied = true;
            }
          }
        };

        _proto.setStencilCompareMask = function setStencilCompareMask(face, reference, compareMask) {
          var front = this._curDynamicStates.stencilStatesFront;
          var back = this._curDynamicStates.stencilStatesBack;

          if (face & StencilFace.FRONT) {
            if (front.compareMask !== compareMask || front.reference !== reference) {
              front.reference = reference;
              front.compareMask = compareMask;
              this._isStateInvalied = true;
            }
          }

          if (face & StencilFace.BACK) {
            if (back.compareMask !== compareMask || back.reference !== reference) {
              back.reference = reference;
              back.compareMask = compareMask;
              this._isStateInvalied = true;
            }
          }
        };

        _proto.draw = function draw(infoOrAssembler) {
          if (this._type === CommandBufferType.PRIMARY && this._isInRenderPass || this._type === CommandBufferType.SECONDARY) {
            if (this._isStateInvalied) {
              this.bindStates();
            }

            var info = 'drawInfo' in infoOrAssembler ? infoOrAssembler.drawInfo : infoOrAssembler;

            var cmd = this._cmdAllocator.drawCmdPool.alloc(WebGL2CmdDraw);

            cmd.drawInfo.copy(info);
            this.cmdPackage.drawCmds.push(cmd);
            this.cmdPackage.cmds.push(WebGL2Cmd.DRAW);
            ++this._numDrawCalls;
            this._numInstances += info.instanceCount;
            var indexCount = info.indexCount || info.vertexCount;

            if (this._curGPUPipelineState) {
              var glPrimitive = this._curGPUPipelineState.glPrimitive;

              switch (glPrimitive) {
                case 0x0004:
                  {
                    this._numTris += indexCount / 3 * Math.max(info.instanceCount, 1);
                    break;
                  }

                case 0x0005:
                case 0x0006:
                  {
                    this._numTris += (indexCount - 2) * Math.max(info.instanceCount, 1);
                    break;
                  }
              }
            }
          } else {
            console.error('Command \'draw\' must be recorded inside a render pass.');
          }
        };

        _proto.updateBuffer = function updateBuffer(buffer, data, size) {
          if (this._type === CommandBufferType.PRIMARY && !this._isInRenderPass || this._type === CommandBufferType.SECONDARY) {
            var gpuBuffer = buffer.gpuBuffer;

            if (gpuBuffer) {
              var cmd = this._cmdAllocator.updateBufferCmdPool.alloc(WebGL2CmdUpdateBuffer);

              var buffSize = 0;
              var buff = null;

              if (buffer.usage & BufferUsageBit.INDIRECT) {
                buff = data;
              } else {
                if (size !== undefined) {
                  buffSize = size;
                } else {
                  buffSize = data.byteLength;
                }

                buff = data;
              }

              cmd.gpuBuffer = gpuBuffer;
              cmd.buffer = buff;
              cmd.offset = 0;
              cmd.size = buffSize;
              this.cmdPackage.updateBufferCmds.push(cmd);
              this.cmdPackage.cmds.push(WebGL2Cmd.UPDATE_BUFFER);
            }
          } else {
            console.error('Command \'updateBuffer\' must be recorded outside a render pass.');
          }
        };

        _proto.copyBuffersToTexture = function copyBuffersToTexture(buffers, texture, regions) {
          if (this._type === CommandBufferType.PRIMARY && !this._isInRenderPass || this._type === CommandBufferType.SECONDARY) {
            var gpuTexture = texture.gpuTexture;

            if (gpuTexture) {
              var cmd = this._cmdAllocator.copyBufferToTextureCmdPool.alloc(WebGL2CmdCopyBufferToTexture);

              cmd.gpuTexture = gpuTexture;
              cmd.regions = regions;
              cmd.buffers = buffers;
              this.cmdPackage.copyBufferToTextureCmds.push(cmd);
              this.cmdPackage.cmds.push(WebGL2Cmd.COPY_BUFFER_TO_TEXTURE);
            }
          } else {
            console.error('Command \'copyBufferToTexture\' must be recorded outside a render pass.');
          }
        };

        _proto.execute = function execute(cmdBuffs, count) {
          for (var i = 0; i < count; ++i) {
            var webGL2CmdBuff = cmdBuffs[i];

            for (var c = 0; c < webGL2CmdBuff.cmdPackage.beginRenderPassCmds.length; ++c) {
              var cmd = webGL2CmdBuff.cmdPackage.beginRenderPassCmds.array[c];
              ++cmd.refCount;
              this.cmdPackage.beginRenderPassCmds.push(cmd);
            }

            for (var _c = 0; _c < webGL2CmdBuff.cmdPackage.bindStatesCmds.length; ++_c) {
              var _cmd = webGL2CmdBuff.cmdPackage.bindStatesCmds.array[_c];
              ++_cmd.refCount;
              this.cmdPackage.bindStatesCmds.push(_cmd);
            }

            for (var _c2 = 0; _c2 < webGL2CmdBuff.cmdPackage.drawCmds.length; ++_c2) {
              var _cmd2 = webGL2CmdBuff.cmdPackage.drawCmds.array[_c2];
              ++_cmd2.refCount;
              this.cmdPackage.drawCmds.push(_cmd2);
            }

            for (var _c3 = 0; _c3 < webGL2CmdBuff.cmdPackage.updateBufferCmds.length; ++_c3) {
              var _cmd3 = webGL2CmdBuff.cmdPackage.updateBufferCmds.array[_c3];
              ++_cmd3.refCount;
              this.cmdPackage.updateBufferCmds.push(_cmd3);
            }

            for (var _c4 = 0; _c4 < webGL2CmdBuff.cmdPackage.copyBufferToTextureCmds.length; ++_c4) {
              var _cmd4 = webGL2CmdBuff.cmdPackage.copyBufferToTextureCmds.array[_c4];
              ++_cmd4.refCount;
              this.cmdPackage.copyBufferToTextureCmds.push(_cmd4);
            }

            for (var _c5 = 0; _c5 < webGL2CmdBuff.cmdPackage.blitTextureCmds.length; ++_c5) {
              var _cmd5 = webGL2CmdBuff.cmdPackage.blitTextureCmds.array[_c5];
              ++_cmd5.refCount;
              this.cmdPackage.blitTextureCmds.push(_cmd5);
            }

            this.cmdPackage.cmds.concat(webGL2CmdBuff.cmdPackage.cmds.array);
            this._numDrawCalls += webGL2CmdBuff._numDrawCalls;
            this._numInstances += webGL2CmdBuff._numInstances;
            this._numTris += webGL2CmdBuff._numTris;
          }
        };

        _proto.pipelineBarrier = function pipelineBarrier(GeneralBarrier, bufferBarriers, buffers, textureBarriers, textures) {};

        _proto.bindStates = function bindStates() {
          var bindStatesCmd = this._cmdAllocator.bindStatesCmdPool.alloc(WebGL2CmdBindStates);

          bindStatesCmd.gpuPipelineState = this._curGPUPipelineState;
          Array.prototype.push.apply(bindStatesCmd.gpuDescriptorSets, this._curGPUDescriptorSets);
          Array.prototype.push.apply(bindStatesCmd.dynamicOffsets, this._curDynamicOffsets);
          bindStatesCmd.gpuInputAssembler = this._curGPUInputAssembler;
          bindStatesCmd.dynamicStates = this._curDynamicStates;
          this.cmdPackage.bindStatesCmds.push(bindStatesCmd);
          this.cmdPackage.cmds.push(WebGL2Cmd.BIND_STATES);
          this._isStateInvalied = false;
        };

        _proto.blitTexture = function blitTexture(srcTexture, dstTexture, regions, filter) {
          var blitTextureCmd = this._cmdAllocator.blitTextureCmdPool.alloc(WebGL2CmdBlitTexture);

          blitTextureCmd.srcTexture = srcTexture.gpuTexture;
          blitTextureCmd.dstTexture = dstTexture.gpuTexture;
          blitTextureCmd.regions = regions;
          blitTextureCmd.filter = filter;
          ++this._numDrawCalls;
          this.cmdPackage.blitTextureCmds.push(blitTextureCmd);
          this.cmdPackage.cmds.push(WebGL2Cmd.BLIT_TEXTURE);
        };

        return WebGL2CommandBuffer;
      }(CommandBuffer);

      var WebGL2Framebuffer = function (_Framebuffer) {
        _inheritsLoose(WebGL2Framebuffer, _Framebuffer);

        function WebGL2Framebuffer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Framebuffer.call.apply(_Framebuffer, [this].concat(args)) || this;
          _this._gpuFramebuffer = null;
          return _this;
        }

        var _proto = WebGL2Framebuffer.prototype;

        _proto.initialize = function initialize(info) {
          this._renderPass = info.renderPass;
          this._colorTextures = info.colorTextures || [];
          this._depthStencilTexture = info.depthStencilTexture || null;
          var gpuColorViews = [];

          for (var i = 0; i < info.colorTextures.length; i++) {
            var colorTexture = info.colorTextures[i];

            if (colorTexture) {
              gpuColorViews.push(colorTexture.gpuTextureView);
            }
          }

          var gpuDepthStencilView = null;

          if (info.depthStencilTexture) {
            gpuDepthStencilView = info.depthStencilTexture.gpuTextureView;
          }

          var width = Number.MAX_SAFE_INTEGER;
          this._gpuFramebuffer = {
            gpuRenderPass: info.renderPass.gpuRenderPass,
            gpuColorViews: gpuColorViews,
            gpuDepthStencilView: gpuDepthStencilView,
            glFramebuffer: null,
            isOffscreen: true,

            get width() {
              if (this.isOffscreen) {
                return width;
              } else if (this.gpuColorViews.length > 0) {
                return this.gpuColorViews[0].gpuTexture.width;
              } else {
                return this.gpuDepthStencilView.gpuTexture.width;
              }
            },

            set width(val) {
              width = val;
            },

            get height() {
              if (this.isOffscreen) {
                return width;
              } else if (this.gpuColorViews.length > 0) {
                return this.gpuColorViews[0].gpuTexture.height;
              } else {
                return this.gpuDepthStencilView.gpuTexture.height;
              }
            },

            set height(val) {
            }

          };
          WebGL2CmdFuncCreateFramebuffer(WebGL2DeviceManager.instance, this._gpuFramebuffer);
        };

        _proto.destroy = function destroy() {
          if (this._gpuFramebuffer) {
            WebGL2CmdFuncDestroyFramebuffer(WebGL2DeviceManager.instance, this._gpuFramebuffer);
            this._gpuFramebuffer = null;
          }
        };

        _createClass(WebGL2Framebuffer, [{
          key: "gpuFramebuffer",
          get: function get() {
            return this._gpuFramebuffer;
          }
        }]);

        return WebGL2Framebuffer;
      }(Framebuffer);

      var WebGL2InputAssembler = function (_InputAssembler) {
        _inheritsLoose(WebGL2InputAssembler, _InputAssembler);

        function WebGL2InputAssembler() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _InputAssembler.call.apply(_InputAssembler, [this].concat(args)) || this;
          _this._gpuInputAssembler = null;
          return _this;
        }

        var _proto = WebGL2InputAssembler.prototype;

        _proto.initialize = function initialize(info) {
          if (info.vertexBuffers.length === 0) {
            console.error('InputAssemblerInfo.vertexBuffers is null.');
            return;
          }

          this._attributes = info.attributes;
          this._attributesHash = this.computeAttributesHash();
          this._vertexBuffers = info.vertexBuffers;

          if (info.indexBuffer) {
            this._indexBuffer = info.indexBuffer;
            this._drawInfo.indexCount = this._indexBuffer.size / this._indexBuffer.stride;
            this._drawInfo.firstIndex = 0;
          } else {
            var vertBuff = this._vertexBuffers[0];
            this._drawInfo.vertexCount = vertBuff.size / vertBuff.stride;
            this._drawInfo.firstVertex = 0;
            this._drawInfo.vertexOffset = 0;
          }

          this._drawInfo.instanceCount = 0;
          this._drawInfo.firstInstance = 0;
          this._indirectBuffer = info.indirectBuffer || null;
          var gpuVertexBuffers = new Array(info.vertexBuffers.length);

          for (var i = 0; i < info.vertexBuffers.length; ++i) {
            var vb = info.vertexBuffers[i];

            if (vb.gpuBuffer) {
              gpuVertexBuffers[i] = vb.gpuBuffer;
            }
          }

          var gpuIndexBuffer = null;
          var glIndexType = 0;

          if (info.indexBuffer) {
            gpuIndexBuffer = info.indexBuffer.gpuBuffer;

            if (gpuIndexBuffer) {
              switch (gpuIndexBuffer.stride) {
                case 1:
                  glIndexType = 0x1401;
                  break;

                case 2:
                  glIndexType = 0x1403;
                  break;

                case 4:
                  glIndexType = 0x1405;
                  break;

                default:
                  {
                    console.error('Illegal index buffer stride.');
                  }
              }
            }
          }

          var gpuIndirectBuffer = null;

          if (info.indirectBuffer) {
            gpuIndirectBuffer = info.indirectBuffer.gpuBuffer;
          }

          this._gpuInputAssembler = {
            attributes: info.attributes,
            gpuVertexBuffers: gpuVertexBuffers,
            gpuIndexBuffer: gpuIndexBuffer,
            gpuIndirectBuffer: gpuIndirectBuffer,
            glAttribs: [],
            glIndexType: glIndexType,
            glVAOs: new Map()
          };
          WebGL2CmdFuncCreateInputAssember(WebGL2DeviceManager.instance, this._gpuInputAssembler);
        };

        _proto.destroy = function destroy() {
          var device = WebGL2DeviceManager.instance;

          if (this._gpuInputAssembler && device.extensions.useVAO) {
            WebGL2CmdFuncDestroyInputAssembler(device, this._gpuInputAssembler);
          }

          this._gpuInputAssembler = null;
        };

        _createClass(WebGL2InputAssembler, [{
          key: "gpuInputAssembler",
          get: function get() {
            return this._gpuInputAssembler;
          }
        }]);

        return WebGL2InputAssembler;
      }(InputAssembler);

      var WebGL2DescriptorSetLayout = function (_DescriptorSetLayout) {
        _inheritsLoose(WebGL2DescriptorSetLayout, _DescriptorSetLayout);

        function WebGL2DescriptorSetLayout() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _DescriptorSetLayout.call.apply(_DescriptorSetLayout, [this].concat(args)) || this;
          _this._gpuDescriptorSetLayout = null;
          return _this;
        }

        var _proto = WebGL2DescriptorSetLayout.prototype;

        _proto.initialize = function initialize(info) {
          Array.prototype.push.apply(this._bindings, info.bindings);
          var descriptorCount = 0;
          var maxBinding = -1;
          var flattenedIndices = [];

          for (var i = 0; i < this._bindings.length; i++) {
            var binding = this._bindings[i];
            flattenedIndices.push(descriptorCount);
            descriptorCount += binding.count;
            if (binding.binding > maxBinding) maxBinding = binding.binding;
          }

          this._bindingIndices = Array(maxBinding + 1).fill(-1);
          var descriptorIndices = this._descriptorIndices = Array(maxBinding + 1).fill(-1);

          for (var _i = 0; _i < this._bindings.length; _i++) {
            var _binding = this._bindings[_i];
            this._bindingIndices[_binding.binding] = _i;
            descriptorIndices[_binding.binding] = flattenedIndices[_i];
          }

          var dynamicBindings = [];

          for (var _i2 = 0; _i2 < this._bindings.length; _i2++) {
            var _binding2 = this._bindings[_i2];

            if (_binding2.descriptorType & DESCRIPTOR_DYNAMIC_TYPE) {
              for (var j = 0; j < _binding2.count; j++) {
                dynamicBindings.push(_binding2.binding);
              }
            }
          }

          this._gpuDescriptorSetLayout = {
            bindings: this._bindings,
            dynamicBindings: dynamicBindings,
            descriptorIndices: descriptorIndices,
            descriptorCount: descriptorCount
          };
        };

        _proto.destroy = function destroy() {
          this._bindings.length = 0;
        };

        _createClass(WebGL2DescriptorSetLayout, [{
          key: "gpuDescriptorSetLayout",
          get: function get() {
            return this._gpuDescriptorSetLayout;
          }
        }]);

        return WebGL2DescriptorSetLayout;
      }(DescriptorSetLayout);

      var WebGL2PipelineLayout = function (_PipelineLayout) {
        _inheritsLoose(WebGL2PipelineLayout, _PipelineLayout);

        function WebGL2PipelineLayout() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _PipelineLayout.call.apply(_PipelineLayout, [this].concat(args)) || this;
          _this._gpuPipelineLayout = null;
          return _this;
        }

        var _proto = WebGL2PipelineLayout.prototype;

        _proto.initialize = function initialize(info) {
          Array.prototype.push.apply(this._setLayouts, info.setLayouts);
          var dynamicOffsetIndices = [];
          var gpuSetLayouts = [];
          var dynamicOffsetCount = 0;
          var dynamicOffsetOffsets = [];

          for (var i = 0; i < this._setLayouts.length; i++) {
            var setLayout = this._setLayouts[i];
            var dynamicBindings = setLayout.gpuDescriptorSetLayout.dynamicBindings;
            var indices = Array(setLayout.bindingIndices.length).fill(-1);

            for (var j = 0; j < dynamicBindings.length; j++) {
              var binding = dynamicBindings[j];
              if (indices[binding] < 0) indices[binding] = dynamicOffsetCount + j;
            }

            gpuSetLayouts.push(setLayout.gpuDescriptorSetLayout);
            dynamicOffsetIndices.push(indices);
            dynamicOffsetOffsets.push(dynamicOffsetCount);
            dynamicOffsetCount += dynamicBindings.length;
          }

          this._gpuPipelineLayout = {
            gpuSetLayouts: gpuSetLayouts,
            dynamicOffsetIndices: dynamicOffsetIndices,
            dynamicOffsetCount: dynamicOffsetCount,
            dynamicOffsetOffsets: dynamicOffsetOffsets
          };
        };

        _proto.destroy = function destroy() {
          this._setLayouts.length = 0;
        };

        _createClass(WebGL2PipelineLayout, [{
          key: "gpuPipelineLayout",
          get: function get() {
            return this._gpuPipelineLayout;
          }
        }]);

        return WebGL2PipelineLayout;
      }(PipelineLayout);

      var WebGLPrimitives$1 = [0x0000, 0x0001, 0x0003, 0x0002, 0x0000, 0x0000, 0x0000, 0x0004, 0x0005, 0x0006, 0x0000, 0x0000, 0x0000, 0x0000];
      var WebGL2PipelineState = function (_PipelineState) {
        _inheritsLoose(WebGL2PipelineState, _PipelineState);

        function WebGL2PipelineState() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _PipelineState.call.apply(_PipelineState, [this].concat(args)) || this;
          _this._gpuPipelineState = null;
          return _this;
        }

        var _proto = WebGL2PipelineState.prototype;

        _proto.initialize = function initialize(info) {
          this._primitive = info.primitive;
          this._shader = info.shader;
          this._pipelineLayout = info.pipelineLayout;
          var bs = this._bs;

          if (info.blendState) {
            var bsInfo = info.blendState;
            var targets = bsInfo.targets;

            if (targets) {
              targets.forEach(function (t, i) {
                bs.setTarget(i, t);
              });
            }

            if (bsInfo.isA2C !== undefined) {
              bs.isA2C = bsInfo.isA2C;
            }

            if (bsInfo.isIndepend !== undefined) {
              bs.isIndepend = bsInfo.isIndepend;
            }

            if (bsInfo.blendColor !== undefined) {
              bs.blendColor = bsInfo.blendColor;
            }
          }

          Object.assign(this._rs, info.rasterizerState);
          Object.assign(this._dss, info.depthStencilState);
          this._is = info.inputState;
          this._renderPass = info.renderPass;
          this._dynamicStates = info.dynamicStates;
          var dynamicStates = [];

          for (var i = 0; i < 31; i++) {
            if (this._dynamicStates & 1 << i) {
              dynamicStates.push(1 << i);
            }
          }

          this._gpuPipelineState = {
            glPrimitive: WebGLPrimitives$1[info.primitive],
            gpuShader: info.shader.gpuShader,
            gpuPipelineLayout: info.pipelineLayout.gpuPipelineLayout,
            rs: info.rasterizerState,
            dss: info.depthStencilState,
            bs: info.blendState,
            gpuRenderPass: info.renderPass.gpuRenderPass,
            dynamicStates: dynamicStates
          };
        };

        _proto.destroy = function destroy() {
          this._gpuPipelineState = null;
        };

        _createClass(WebGL2PipelineState, [{
          key: "gpuPipelineState",
          get: function get() {
            return this._gpuPipelineState;
          }
        }]);

        return WebGL2PipelineState;
      }(PipelineState);

      var WebGL2PrimaryCommandBuffer = function (_WebGL2CommandBuffer) {
        _inheritsLoose(WebGL2PrimaryCommandBuffer, _WebGL2CommandBuffer);

        function WebGL2PrimaryCommandBuffer() {
          return _WebGL2CommandBuffer.apply(this, arguments) || this;
        }

        var _proto = WebGL2PrimaryCommandBuffer.prototype;

        _proto.beginRenderPass = function beginRenderPass(renderPass, framebuffer, renderArea, clearColors, clearDepth, clearStencil) {
          WebGL2CmdFuncBeginRenderPass(WebGL2DeviceManager.instance, renderPass.gpuRenderPass, framebuffer.gpuFramebuffer, renderArea, clearColors, clearDepth, clearStencil);
          this._isInRenderPass = true;
        };

        _proto.draw = function draw(infoOrAssembler) {
          if (this._isInRenderPass) {
            if (this._isStateInvalied) {
              this.bindStates();
            }

            var info = 'drawInfo' in infoOrAssembler ? infoOrAssembler.drawInfo : infoOrAssembler;
            WebGL2CmdFuncDraw(WebGL2DeviceManager.instance, info);
            ++this._numDrawCalls;
            this._numInstances += info.instanceCount;
            var indexCount = info.indexCount || info.vertexCount;

            if (this._curGPUPipelineState) {
              var glPrimitive = this._curGPUPipelineState.glPrimitive;

              switch (glPrimitive) {
                case 0x0004:
                  {
                    this._numTris += indexCount / 3 * Math.max(info.instanceCount, 1);
                    break;
                  }

                case 0x0005:
                case 0x0006:
                  {
                    this._numTris += (indexCount - 2) * Math.max(info.instanceCount, 1);
                    break;
                  }
              }
            }
          } else {
            console.error('Command \'draw\' must be recorded inside a render pass.');
          }
        };

        _proto.setViewport = function setViewport(viewport) {
          var _WebGL2DeviceManager$ = WebGL2DeviceManager.instance,
              cache = _WebGL2DeviceManager$.stateCache,
              gl = _WebGL2DeviceManager$.gl;

          if (cache.viewport.left !== viewport.left || cache.viewport.top !== viewport.top || cache.viewport.width !== viewport.width || cache.viewport.height !== viewport.height) {
            gl.viewport(viewport.left, viewport.top, viewport.width, viewport.height);
            cache.viewport.left = viewport.left;
            cache.viewport.top = viewport.top;
            cache.viewport.width = viewport.width;
            cache.viewport.height = viewport.height;
          }
        };

        _proto.setScissor = function setScissor(scissor) {
          var _WebGL2DeviceManager$2 = WebGL2DeviceManager.instance,
              cache = _WebGL2DeviceManager$2.stateCache,
              gl = _WebGL2DeviceManager$2.gl;

          if (cache.scissorRect.x !== scissor.x || cache.scissorRect.y !== scissor.y || cache.scissorRect.width !== scissor.width || cache.scissorRect.height !== scissor.height) {
            gl.scissor(scissor.x, scissor.y, scissor.width, scissor.height);
            cache.scissorRect.x = scissor.x;
            cache.scissorRect.y = scissor.y;
            cache.scissorRect.width = scissor.width;
            cache.scissorRect.height = scissor.height;
          }
        };

        _proto.updateBuffer = function updateBuffer(buffer, data, size) {
          if (!this._isInRenderPass) {
            var gpuBuffer = buffer.gpuBuffer;

            if (gpuBuffer) {
              var buffSize;

              if (size !== undefined) {
                buffSize = size;
              } else if (buffer.usage & BufferUsageBit.INDIRECT) {
                buffSize = 0;
              } else {
                buffSize = data.byteLength;
              }

              WebGL2CmdFuncUpdateBuffer(WebGL2DeviceManager.instance, gpuBuffer, data, 0, buffSize);
            }
          } else {
            console.error('Command \'updateBuffer\' must be recorded outside a render pass.');
          }
        };

        _proto.copyBuffersToTexture = function copyBuffersToTexture(buffers, texture, regions) {
          if (!this._isInRenderPass) {
            var gpuTexture = texture.gpuTexture;

            if (gpuTexture) {
              WebGL2CmdFuncCopyBuffersToTexture(WebGL2DeviceManager.instance, buffers, gpuTexture, regions);
            }
          } else {
            console.error('Command \'copyBufferToTexture\' must be recorded outside a render pass.');
          }
        };

        _proto.execute = function execute(cmdBuffs, count) {
          for (var i = 0; i < count; ++i) {
            var webGL2CmdBuff = cmdBuffs[i];
            WebGL2CmdFuncExecuteCmds(WebGL2DeviceManager.instance, webGL2CmdBuff.cmdPackage);
            this._numDrawCalls += webGL2CmdBuff._numDrawCalls;
            this._numInstances += webGL2CmdBuff._numInstances;
            this._numTris += webGL2CmdBuff._numTris;
          }
        };

        _proto.bindStates = function bindStates() {
          WebGL2CmdFuncBindStates(WebGL2DeviceManager.instance, this._curGPUPipelineState, this._curGPUInputAssembler, this._curGPUDescriptorSets, this._curDynamicOffsets, this._curDynamicStates);
          this._isStateInvalied = false;
        };

        _proto.blitTexture = function blitTexture(srcTexture, dstTexture, regions, filter) {
          var gpuTextureSrc = srcTexture.gpuTexture;
          var gpuTextureDst = dstTexture.gpuTexture;
          WebGL2CmdFuncBlitTexture(WebGL2DeviceManager.instance, gpuTextureSrc, gpuTextureDst, regions, filter);
        };

        return WebGL2PrimaryCommandBuffer;
      }(WebGL2CommandBuffer);

      var WebGL2Queue = function (_Queue) {
        _inheritsLoose(WebGL2Queue, _Queue);

        function WebGL2Queue() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Queue.call.apply(_Queue, [this].concat(args)) || this;
          _this.numDrawCalls = 0;
          _this.numInstances = 0;
          _this.numTris = 0;
          return _this;
        }

        var _proto = WebGL2Queue.prototype;

        _proto.initialize = function initialize(info) {
          this._type = info.type;
        };

        _proto.destroy = function destroy() {};

        _proto.submit = function submit(cmdBuffs) {
          for (var i = 0; i < cmdBuffs.length; i++) {
            var cmdBuff = cmdBuffs[i];
            this.numDrawCalls += cmdBuff.numDrawCalls;
            this.numInstances += cmdBuff.numInstances;
            this.numTris += cmdBuff.numTris;
          }
        };

        _proto.clear = function clear() {
          this.numDrawCalls = 0;
          this.numInstances = 0;
          this.numTris = 0;
        };

        return WebGL2Queue;
      }(Queue);

      var WebGL2RenderPass = function (_RenderPass) {
        _inheritsLoose(WebGL2RenderPass, _RenderPass);

        function WebGL2RenderPass() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _RenderPass.call.apply(_RenderPass, [this].concat(args)) || this;
          _this._gpuRenderPass = null;
          return _this;
        }

        var _proto = WebGL2RenderPass.prototype;

        _proto.initialize = function initialize(info) {
          this._colorInfos = info.colorAttachments;
          this._depthStencilInfo = info.depthStencilAttachment;
          this._subpasses = info.subpasses;
          this._gpuRenderPass = {
            colorAttachments: this._colorInfos,
            depthStencilAttachment: this._depthStencilInfo
          };
          this._hash = this.computeHash();
        };

        _proto.destroy = function destroy() {
          this._gpuRenderPass = null;
        };

        _createClass(WebGL2RenderPass, [{
          key: "gpuRenderPass",
          get: function get() {
            return this._gpuRenderPass;
          }
        }]);

        return WebGL2RenderPass;
      }(RenderPass);

      var WebGL2Sampler = function (_Sampler) {
        _inheritsLoose(WebGL2Sampler, _Sampler);

        function WebGL2Sampler(info, hash) {
          var _this;

          _this = _Sampler.call(this, info, hash) || this;
          _this._gpuSampler = null;
          _this._gpuSampler = {
            glSamplers: new Map(),
            minFilter: _this._info.minFilter,
            magFilter: _this._info.magFilter,
            mipFilter: _this._info.mipFilter,
            addressU: _this._info.addressU,
            addressV: _this._info.addressV,
            addressW: _this._info.addressW,
            glMinFilter: 0,
            glMagFilter: 0,
            glWrapS: 0,
            glWrapT: 0,
            glWrapR: 0,
            getGLSampler: function getGLSampler(device, minLod, maxLod) {
              var gl = device.gl;
              var samplerHash = minLod << 16 | maxLod;

              if (!this.glSamplers.has(samplerHash)) {
                var glSampler = gl.createSampler();

                if (glSampler) {
                  this.glSamplers.set(samplerHash, glSampler);
                  gl.samplerParameteri(glSampler, gl.TEXTURE_MIN_FILTER, this.glMinFilter);
                  gl.samplerParameteri(glSampler, gl.TEXTURE_MAG_FILTER, this.glMagFilter);
                  gl.samplerParameteri(glSampler, gl.TEXTURE_WRAP_S, this.glWrapS);
                  gl.samplerParameteri(glSampler, gl.TEXTURE_WRAP_T, this.glWrapT);
                  gl.samplerParameteri(glSampler, gl.TEXTURE_WRAP_R, this.glWrapR);
                  gl.samplerParameterf(glSampler, gl.TEXTURE_MIN_LOD, minLod);
                  gl.samplerParameterf(glSampler, gl.TEXTURE_MAX_LOD, maxLod);
                }
              }

              var sampler = this.glSamplers.get(samplerHash);
              return sampler;
            }
          };
          WebGL2CmdFuncPrepareSamplerInfo(WebGL2DeviceManager.instance, _this._gpuSampler);
          return _this;
        }

        var _proto = WebGL2Sampler.prototype;

        _proto.destroy = function destroy() {
          if (this._gpuSampler) {
            WebGL2CmdFuncDestroySampler(WebGL2DeviceManager.instance, this._gpuSampler);
            this._gpuSampler = null;
          }
        };

        _createClass(WebGL2Sampler, [{
          key: "gpuSampler",
          get: function get() {
            return this._gpuSampler;
          }
        }]);

        return WebGL2Sampler;
      }(Sampler);

      var WebGL2Shader = function (_Shader) {
        _inheritsLoose(WebGL2Shader, _Shader);

        function WebGL2Shader() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Shader.call.apply(_Shader, [this].concat(args)) || this;
          _this._gpuShader = null;
          return _this;
        }

        var _proto = WebGL2Shader.prototype;

        _proto.initialize = function initialize(info) {
          this._name = info.name;
          this._stages = info.stages;
          this._attributes = info.attributes;
          this._blocks = info.blocks;
          this._samplers = info.samplers;
          this._gpuShader = {
            name: info.name,
            blocks: info.blocks.slice(),
            samplerTextures: info.samplerTextures.slice(),
            subpassInputs: info.subpassInputs.slice(),
            gpuStages: new Array(info.stages.length),
            glProgram: null,
            glInputs: [],
            glUniforms: [],
            glBlocks: [],
            glSamplerTextures: []
          };

          for (var i = 0; i < info.stages.length; ++i) {
            var stage = info.stages[i];
            this._gpuShader.gpuStages[i] = {
              type: stage.stage,
              source: stage.source,
              glShader: null
            };
          }
        };

        _proto.destroy = function destroy() {
          if (this._gpuShader) {
            WebGL2CmdFuncDestroyShader(WebGL2DeviceManager.instance, this._gpuShader);
            this._gpuShader = null;
          }
        };

        _createClass(WebGL2Shader, [{
          key: "gpuShader",
          get: function get() {
            if (this._gpuShader.glProgram === null) {
              WebGL2CmdFuncCreateShader(WebGL2DeviceManager.instance, this._gpuShader);
            }

            return this._gpuShader;
          }
        }]);

        return WebGL2Shader;
      }(Shader);

      var WebGL2StateCache = function () {
        function WebGL2StateCache() {
          this.glArrayBuffer = null;
          this.glElementArrayBuffer = null;
          this.glUniformBuffer = null;
          this.glBindUBOs = [];
          this.glBindUBOOffsets = [];
          this.glVAO = null;
          this.texUnit = 0;
          this.glTexUnits = [];
          this.glSamplerUnits = [];
          this.glRenderbuffer = null;
          this.glFramebuffer = null;
          this.glReadFramebuffer = null;
          this.viewport = new Viewport();
          this.scissorRect = new Rect$1(0, 0, 0, 0);
          this.rs = new RasterizerState();
          this.dss = new DepthStencilState();
          this.bs = new BlendState();
          this.glProgram = null;
          this.glEnabledAttribLocs = [];
          this.glCurrentAttribLocs = [];
          this.texUnitCacheMap = {};
        }

        var _proto = WebGL2StateCache.prototype;

        _proto.initialize = function initialize(texUnit, bufferBindings, vertexAttributes) {
          for (var i = 0; i < texUnit; ++i) {
            this.glTexUnits.push({
              glTexture: null
            });
          }

          this.glSamplerUnits.length = texUnit;
          this.glSamplerUnits.fill(null);
          this.glBindUBOs.length = bufferBindings;
          this.glBindUBOs.fill(null);
          this.glBindUBOOffsets.length = bufferBindings;
          this.glBindUBOOffsets.fill(0);
          this.glEnabledAttribLocs.length = vertexAttributes;
          this.glEnabledAttribLocs.fill(false);
          this.glCurrentAttribLocs.length = vertexAttributes;
          this.glCurrentAttribLocs.fill(false);
        };

        return WebGL2StateCache;
      }();

      var WebGL2Texture = function (_Texture) {
        _inheritsLoose(WebGL2Texture, _Texture);

        function WebGL2Texture() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Texture.call.apply(_Texture, [this].concat(args)) || this;
          _this._gpuTexture = null;
          _this._gpuTextureView = null;
          return _this;
        }

        var _proto = WebGL2Texture.prototype;

        _proto.initialize = function initialize(info, isSwapchainTexture) {
          var texInfo = info;
          var viewInfo = info;

          if ('texture' in info) {
            texInfo = viewInfo.texture.info;
            this._isTextureView = true;
          }

          this._info.copy(texInfo);

          this._isPowerOf2 = IsPowerOf2(this._info.width) && IsPowerOf2(this._info.height);
          this._size = FormatSurfaceSize(this._info.format, this.width, this.height, this.depth, this._info.levelCount) * this._info.layerCount;

          if (!this._isTextureView) {
            this._gpuTexture = {
              type: texInfo.type,
              format: texInfo.format,
              usage: texInfo.usage,
              width: texInfo.width,
              height: texInfo.height,
              depth: texInfo.depth,
              size: this._size,
              arrayLayer: texInfo.layerCount,
              mipLevel: texInfo.levelCount,
              samples: texInfo.samples,
              flags: texInfo.flags,
              isPowerOf2: this._isPowerOf2,
              glTarget: 0,
              glInternalFmt: 0,
              glFormat: 0,
              glType: 0,
              glUsage: 0,
              glTexture: null,
              glRenderbuffer: null,
              glWrapS: 0,
              glWrapT: 0,
              glMinFilter: 0,
              glMagFilter: 0,
              isSwapchainTexture: isSwapchainTexture || false
            };

            if (!this._gpuTexture.isSwapchainTexture && this._gpuTexture) {
              WebGL2CmdFuncCreateTexture(WebGL2DeviceManager.instance, this._gpuTexture);
              WebGL2DeviceManager.instance.memoryStatus.textureSize += this._size;
            }

            this._viewInfo.texture = this;
            this._viewInfo.type = info.type;
            this._viewInfo.format = info.format;
            this._viewInfo.baseLevel = 0;
            this._viewInfo.levelCount = info.levelCount;
            this._viewInfo.baseLayer = 0;
            this._viewInfo.layerCount = info.layerCount;
            this._gpuTextureView = {
              gpuTexture: this._gpuTexture,
              type: this._viewInfo.type,
              format: this._viewInfo.format,
              baseLevel: this._viewInfo.baseLevel,
              levelCount: this._viewInfo.levelCount
            };
          } else {
            var _this$_gpuTexture;

            this._viewInfo.copy(viewInfo);

            this._gpuTexture = viewInfo.texture._gpuTexture;

            if (((_this$_gpuTexture = this._gpuTexture) === null || _this$_gpuTexture === void 0 ? void 0 : _this$_gpuTexture.format) !== texInfo.format) {
              console.log('GPU memory alias is not supported');
              return;
            }

            this._gpuTextureView = {
              gpuTexture: this._gpuTexture,
              type: viewInfo.type,
              format: viewInfo.format,
              baseLevel: viewInfo.baseLevel,
              levelCount: viewInfo.levelCount
            };
          }
        };

        _proto.destroy = function destroy() {
          if (!this._isTextureView && this._gpuTexture) {
            WebGL2CmdFuncDestroyTexture(WebGL2DeviceManager.instance, this._gpuTexture);
            WebGL2DeviceManager.instance.memoryStatus.textureSize -= this._size;
            this._gpuTexture = null;
          }
        };

        _proto.getGLTextureHandle = function getGLTextureHandle() {
          var gpuTexture = this._gpuTexture;

          if (!gpuTexture) {
            return 0;
          }

          if (gpuTexture.glTexture) {
            return gpuTexture.glTexture;
          } else if (gpuTexture.glRenderbuffer) {
            return gpuTexture.glRenderbuffer;
          }

          return 0;
        };

        _proto.resize = function resize(width, height) {
          if (this._info.width === width && this._info.height === height) {
            return;
          }

          if (this._info.levelCount === WebGL2Texture.getLevelCount(this._info.width, this._info.height)) {
            this._info.levelCount = WebGL2Texture.getLevelCount(width, height);
          } else if (this._info.levelCount > 1) {
            this._info.levelCount = Math.min(this._info.levelCount, WebGL2Texture.getLevelCount(width, height));
          }

          var oldSize = this._size;
          this._info.width = width;
          this._info.height = height;
          this._size = FormatSurfaceSize(this._info.format, this.width, this.height, this.depth, this._info.levelCount) * this._info.layerCount;

          if (!this._isTextureView && this._gpuTexture) {
            this._gpuTexture.width = width;
            this._gpuTexture.height = height;
            this._gpuTexture.size = this._size;

            if (!this._gpuTexture.isSwapchainTexture) {
              WebGL2CmdFuncResizeTexture(WebGL2DeviceManager.instance, this._gpuTexture);
              WebGL2DeviceManager.instance.memoryStatus.textureSize -= oldSize;
              WebGL2DeviceManager.instance.memoryStatus.textureSize += this._size;
            }
          }
        };

        _proto.initAsSwapchainTexture = function initAsSwapchainTexture(info) {
          var texInfo = new TextureInfo();
          texInfo.format = info.format;
          texInfo.usage = FormatInfos[info.format].hasDepth ? TextureUsageBit.DEPTH_STENCIL_ATTACHMENT : TextureUsageBit.COLOR_ATTACHMENT;
          texInfo.width = info.width;
          texInfo.height = info.height;
          this.initialize(texInfo, true);
        };

        _createClass(WebGL2Texture, [{
          key: "gpuTexture",
          get: function get() {
            return this._gpuTexture;
          }
        }, {
          key: "gpuTextureView",
          get: function get() {
            return this._gpuTextureView;
          }
        }]);

        return WebGL2Texture;
      }(Texture);

      var eventWebGLContextLost$1 = 'webglcontextlost';

      function initStates$1(gl) {
        gl.activeTexture(gl.TEXTURE0);
        gl.pixelStorei(gl.PACK_ALIGNMENT, 1);
        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);
        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
        gl.bindFramebuffer(gl.FRAMEBUFFER, null);
        gl.enable(gl.SCISSOR_TEST);
        gl.enable(gl.CULL_FACE);
        gl.cullFace(gl.BACK);
        gl.frontFace(gl.CCW);
        gl.polygonOffset(0.0, 0.0);
        gl.enable(gl.DEPTH_TEST);
        gl.depthMask(true);
        gl.depthFunc(gl.LESS);
        gl.stencilFuncSeparate(gl.FRONT, gl.ALWAYS, 1, 0xffff);
        gl.stencilOpSeparate(gl.FRONT, gl.KEEP, gl.KEEP, gl.KEEP);
        gl.stencilMaskSeparate(gl.FRONT, 0xffff);
        gl.stencilFuncSeparate(gl.BACK, gl.ALWAYS, 1, 0xffff);
        gl.stencilOpSeparate(gl.BACK, gl.KEEP, gl.KEEP, gl.KEEP);
        gl.stencilMaskSeparate(gl.BACK, 0xffff);
        gl.disable(gl.STENCIL_TEST);
        gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
        gl.disable(gl.BLEND);
        gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);
        gl.blendFuncSeparate(gl.ONE, gl.ZERO, gl.ONE, gl.ZERO);
        gl.colorMask(true, true, true, true);
        gl.blendColor(0.0, 0.0, 0.0, 0.0);
      }

      function getExtension$1(gl, ext) {
        var prefixes = ['', 'WEBKIT_', 'MOZ_'];

        for (var i = 0; i < prefixes.length; ++i) {
          var _ext = gl.getExtension(prefixes[i] + ext);

          if (_ext) {
            return _ext;
          }
        }

        return null;
      }

      function getExtensions$1(gl) {
        var res = {
          EXT_texture_filter_anisotropic: getExtension$1(gl, 'EXT_texture_filter_anisotropic'),
          EXT_color_buffer_half_float: getExtension$1(gl, 'EXT_color_buffer_half_float'),
          EXT_color_buffer_float: getExtension$1(gl, 'EXT_color_buffer_float'),
          WEBGL_compressed_texture_etc1: getExtension$1(gl, 'WEBGL_compressed_texture_etc1'),
          WEBGL_compressed_texture_etc: getExtension$1(gl, 'WEBGL_compressed_texture_etc'),
          WEBGL_compressed_texture_pvrtc: getExtension$1(gl, 'WEBGL_compressed_texture_pvrtc'),
          WEBGL_compressed_texture_astc: getExtension$1(gl, 'WEBGL_compressed_texture_astc'),
          WEBGL_compressed_texture_s3tc: getExtension$1(gl, 'WEBGL_compressed_texture_s3tc'),
          WEBGL_compressed_texture_s3tc_srgb: getExtension$1(gl, 'WEBGL_compressed_texture_s3tc_srgb'),
          WEBGL_debug_shaders: getExtension$1(gl, 'WEBGL_debug_shaders'),
          WEBGL_lose_context: getExtension$1(gl, 'WEBGL_lose_context'),
          WEBGL_debug_renderer_info: getExtension$1(gl, 'WEBGL_debug_renderer_info'),
          OES_texture_half_float_linear: getExtension$1(gl, 'OES_texture_half_float_linear'),
          OES_texture_float_linear: getExtension$1(gl, 'OES_texture_float_linear'),
          WEBGL_multi_draw: null,
          useVAO: true
        };
        {
          if (systemInfo.os !== OS.ANDROID && systemInfo.os !== OS.IOS) {
            res.WEBGL_multi_draw = getExtension$1(gl, 'WEBGL_multi_draw');
          }
        }
        return res;
      }
      function getContext$1(canvas) {
        var context = null;

        try {
          if (globalThis.__globalXR.webxrCompatible) {
            var glAttribs = {
              alpha: macro.ENABLE_TRANSPARENT_CANVAS,
              antialias: EDITOR || macro.ENABLE_WEBGL_ANTIALIAS,
              depth: true,
              stencil: true,
              premultipliedAlpha: false,
              preserveDrawingBuffer: false,
              powerPreference: 'default',
              failIfMajorPerformanceCaveat: false,
              xrCompatible: true
            };
            context = canvas.getContext('webgl2', glAttribs);
            return context;
          }

          var webGLCtxAttribs = {
            alpha: macro.ENABLE_TRANSPARENT_CANVAS,
            antialias: EDITOR || macro.ENABLE_WEBGL_ANTIALIAS,
            depth: true,
            stencil: true,
            premultipliedAlpha: false,
            preserveDrawingBuffer: false,
            powerPreference: 'default',
            failIfMajorPerformanceCaveat: false
          };
          context = canvas.getContext('webgl2', webGLCtxAttribs);
        } catch (err) {
          return null;
        }

        return context;
      }
      var WebGL2Swapchain = function (_Swapchain) {
        _inheritsLoose(WebGL2Swapchain, _Swapchain);

        function WebGL2Swapchain() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Swapchain.call.apply(_Swapchain, [this].concat(args)) || this;
          _this.stateCache = new WebGL2StateCache();
          _this.nullTex2D = null;
          _this.nullTexCube = null;
          _this._canvas = null;
          _this._webGL2ContextLostHandler = null;
          _this._extensions = null;
          _this._blitManager = null;
          return _this;
        }

        var _proto = WebGL2Swapchain.prototype;

        _proto.initialize = function initialize(info) {
          this._canvas = info.windowHandle;
          this._webGL2ContextLostHandler = this._onWebGLContextLost.bind(this);

          this._canvas.addEventListener(eventWebGLContextLost$1, this._onWebGLContextLost);

          var gl = WebGL2DeviceManager.instance.gl;
          this.stateCache.initialize(WebGL2DeviceManager.instance.capabilities.maxTextureUnits, WebGL2DeviceManager.instance.capabilities.maxUniformBufferBindings, WebGL2DeviceManager.instance.capabilities.maxVertexAttributes);
          this._extensions = getExtensions$1(gl);
          initStates$1(gl);
          var colorFmt = Format.RGBA8;
          var depthStencilFmt = Format.DEPTH_STENCIL;
          var depthBits = gl.getParameter(gl.DEPTH_BITS);
          var stencilBits = gl.getParameter(gl.STENCIL_BITS);
          if (depthBits && stencilBits) depthStencilFmt = Format.DEPTH_STENCIL;else if (depthBits) depthStencilFmt = Format.DEPTH;
          this._colorTexture = new WebGL2Texture();

          this._colorTexture.initAsSwapchainTexture({
            swapchain: this,
            format: colorFmt,
            width: info.width,
            height: info.height
          });

          this._depthStencilTexture = new WebGL2Texture();

          this._depthStencilTexture.initAsSwapchainTexture({
            swapchain: this,
            format: depthStencilFmt,
            width: info.width,
            height: info.height
          });

          this.nullTex2D = WebGL2DeviceManager.instance.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.SAMPLED, Format.RGBA8, 2, 2, TextureFlagBit.NONE));
          this.nullTexCube = WebGL2DeviceManager.instance.createTexture(new TextureInfo(TextureType.CUBE, TextureUsageBit.SAMPLED, Format.RGBA8, 2, 2, TextureFlagBit.NONE, 6));
          var nullTexRegion = new BufferTextureCopy();
          nullTexRegion.texExtent.width = 2;
          nullTexRegion.texExtent.height = 2;
          var nullTexBuff = new Uint8Array(this.nullTex2D.size);
          nullTexBuff.fill(0);
          WebGL2DeviceManager.instance.copyBuffersToTexture([nullTexBuff], this.nullTex2D, [nullTexRegion]);
          nullTexRegion.texSubres.layerCount = 6;
          WebGL2DeviceManager.instance.copyBuffersToTexture([nullTexBuff, nullTexBuff, nullTexBuff, nullTexBuff, nullTexBuff, nullTexBuff], this.nullTexCube, [nullTexRegion]);
          this._blitManager = new IWebGL2BlitManager();
        };

        _proto.destroy = function destroy() {
          if (this._canvas && this._webGL2ContextLostHandler) {
            this._canvas.removeEventListener(eventWebGLContextLost$1, this._webGL2ContextLostHandler);

            this._webGL2ContextLostHandler = null;
          }

          if (this.nullTex2D) {
            this.nullTex2D.destroy();
            this.nullTex2D = null;
          }

          if (this.nullTexCube) {
            this.nullTexCube.destroy();
            this.nullTexCube = null;
          }

          if (this._blitManager) {
            this._blitManager.destroy();

            this._blitManager = null;
          }

          this._extensions = null;
          this._canvas = null;
        };

        _proto.resize = function resize(width, height, surfaceTransform) {
          if (this._colorTexture.width !== width || this._colorTexture.height !== height) {
            debug("Resizing swapchain: " + width + "x" + height);
            this._canvas.width = width;
            this._canvas.height = height;

            this._colorTexture.resize(width, height);

            this._depthStencilTexture.resize(width, height);
          }
        };

        _proto._onWebGLContextLost = function _onWebGLContextLost(event) {
          warnID(11000);
          warn(event);
        };

        _createClass(WebGL2Swapchain, [{
          key: "extensions",
          get: function get() {
            return this._extensions;
          }
        }, {
          key: "blitManager",
          get: function get() {
            return this._blitManager;
          }
        }]);

        return WebGL2Swapchain;
      }(Swapchain);

      var WebGL2Device = exports('WebGL2Device', function (_Device) {
        _inheritsLoose(WebGL2Device, _Device);

        function WebGL2Device() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Device.call.apply(_Device, [this].concat(args)) || this;
          _this._swapchain = null;
          _this._context = null;
          _this._bindingMappings = null;
          _this._textureExclusive = new Array(Format.COUNT);
          return _this;
        }

        var _proto = WebGL2Device.prototype;

        _proto.initialize = function initialize(info) {
          WebGL2DeviceManager.setInstance(this);
          this._gfxAPI = API.WEBGL2;
          var mapping = this._bindingMappingInfo = info.bindingMappingInfo;
          var blockOffsets = [];
          var samplerTextureOffsets = [];
          var firstSet = mapping.setIndices[0];
          blockOffsets[firstSet] = 0;
          samplerTextureOffsets[firstSet] = 0;

          for (var i = 1; i < mapping.setIndices.length; ++i) {
            var curSet = mapping.setIndices[i];
            var prevSet = mapping.setIndices[i - 1];
            blockOffsets[curSet] = mapping.maxBlockCounts[prevSet] + blockOffsets[prevSet];
            samplerTextureOffsets[curSet] = mapping.maxSamplerTextureCounts[prevSet] + samplerTextureOffsets[prevSet];
          }

          for (var _i = 0; _i < mapping.setIndices.length; ++_i) {
            var _curSet = mapping.setIndices[_i];
            samplerTextureOffsets[_curSet] -= mapping.maxBlockCounts[_curSet];
          }

          this._bindingMappings = {
            blockOffsets: blockOffsets,
            samplerTextureOffsets: samplerTextureOffsets,
            flexibleSet: mapping.setIndices[mapping.setIndices.length - 1]
          };
          var gl = this._context = getContext$1(Device.canvas);

          if (!gl) {
            console.error('This device does not support WebGL.');
            return false;
          }

          this._queue = this.createQueue(new QueueInfo(QueueType.GRAPHICS));
          this._cmdBuff = this.createCommandBuffer(new CommandBufferInfo(this._queue));
          this._caps.maxVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
          this._caps.maxVertexUniformVectors = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);

          if (systemInfo.os === OS.IOS && sys.browserType === BrowserType.WECHAT) {
            this._caps.maxVertexUniformVectors = 256;
          }

          this._caps.maxFragmentUniformVectors = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);
          this._caps.maxTextureUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
          this._caps.maxVertexTextureUnits = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
          this._caps.maxUniformBufferBindings = gl.getParameter(gl.MAX_UNIFORM_BUFFER_BINDINGS);
          this._caps.maxUniformBlockSize = gl.getParameter(gl.MAX_UNIFORM_BLOCK_SIZE);
          this._caps.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
          this._caps.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);
          this._caps.maxArrayTextureLayers = gl.getParameter(gl.MAX_ARRAY_TEXTURE_LAYERS);
          this._caps.max3DTextureSize = gl.getParameter(gl.MAX_3D_TEXTURE_SIZE);
          this._caps.uboOffsetAlignment = gl.getParameter(gl.UNIFORM_BUFFER_OFFSET_ALIGNMENT);
          var extensions = gl.getSupportedExtensions();
          var extStr = '';

          if (extensions) {
            for (var _iterator = _createForOfIteratorHelperLoose(extensions), _step; !(_step = _iterator()).done;) {
              var ext = _step.value;
              extStr += ext + " ";
            }
          }

          var exts = getExtensions$1(gl);

          if (exts.WEBGL_debug_renderer_info) {
            this._renderer = gl.getParameter(exts.WEBGL_debug_renderer_info.UNMASKED_RENDERER_WEBGL);
            this._vendor = gl.getParameter(exts.WEBGL_debug_renderer_info.UNMASKED_VENDOR_WEBGL);
          } else {
            this._renderer = gl.getParameter(gl.RENDERER);
            this._vendor = gl.getParameter(gl.VENDOR);
          }

          var version = gl.getParameter(gl.VERSION);

          this._features.fill(false);

          this.initFormatFeatures(exts);
          this._features[Feature$1.ELEMENT_INDEX_UINT] = true;
          this._features[Feature$1.INSTANCED_ARRAYS] = true;
          this._features[Feature$1.MULTIPLE_RENDER_TARGETS] = true;
          this._features[Feature$1.BLEND_MINMAX] = true;
          var compressedFormat = '';

          if (this.getFormatFeatures(Format.ETC_RGB8)) {
            compressedFormat += 'etc1 ';
          }

          if (this.getFormatFeatures(Format.ETC2_RGB8)) {
            compressedFormat += 'etc2 ';
          }

          if (this.getFormatFeatures(Format.BC1)) {
            compressedFormat += 'dxt ';
          }

          if (this.getFormatFeatures(Format.PVRTC_RGB2)) {
            compressedFormat += 'pvrtc ';
          }

          if (this.getFormatFeatures(Format.ASTC_RGBA_4X4)) {
            compressedFormat += 'astc ';
          }

          debug('WebGL2 device initialized.');
          debug("RENDERER: " + this._renderer);
          debug("VENDOR: " + this._vendor);
          debug("VERSION: " + version);
          debug("COMPRESSED_FORMAT: " + compressedFormat);
          debug("EXTENSIONS: " + extStr);
          return true;
        };

        _proto.destroy = function destroy() {
          if (this._queue) {
            this._queue.destroy();

            this._queue = null;
          }

          if (this._cmdBuff) {
            this._cmdBuff.destroy();

            this._cmdBuff = null;
          }

          var it = this._samplers.values();

          var res = it.next();

          while (!res.done) {
            res.value.destroy();
            res = it.next();
          }

          this._swapchain = null;
        };

        _proto.flushCommands = function flushCommands(cmdBuffs) {};

        _proto.acquire = function acquire(swapchains) {};

        _proto.present = function present() {
          var queue = this._queue;
          this._numDrawCalls = queue.numDrawCalls;
          this._numInstances = queue.numInstances;
          this._numTris = queue.numTris;
          queue.clear();
        };

        _proto.initFormatFeatures = function initFormatFeatures(exts) {
          this._formatFeatures.fill(FormatFeatureBit.NONE);

          this._textureExclusive.fill(true);

          var tempFeature = FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE | FormatFeatureBit.STORAGE_TEXTURE | FormatFeatureBit.LINEAR_FILTER | FormatFeatureBit.VERTEX_ATTRIBUTE;
          this._formatFeatures[Format.R8] = tempFeature;
          this._formatFeatures[Format.RG8] = tempFeature;
          this._formatFeatures[Format.RGB8] = tempFeature;
          this._formatFeatures[Format.RGBA8] = tempFeature;
          tempFeature = FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE | FormatFeatureBit.STORAGE_TEXTURE | FormatFeatureBit.LINEAR_FILTER;
          this._formatFeatures[Format.R8SN] = tempFeature;
          this._formatFeatures[Format.RG8SN] = tempFeature;
          this._formatFeatures[Format.RGB8SN] = tempFeature;
          this._formatFeatures[Format.RGBA8SN] = tempFeature;
          this._formatFeatures[Format.R5G6B5] = tempFeature;
          this._formatFeatures[Format.RGBA4] = tempFeature;
          this._formatFeatures[Format.RGB5A1] = tempFeature;
          this._formatFeatures[Format.RGB10A2] = tempFeature;
          this._formatFeatures[Format.SRGB8] = tempFeature;
          this._formatFeatures[Format.SRGB8_A8] = tempFeature;
          this._formatFeatures[Format.R11G11B10F] = tempFeature;
          this._formatFeatures[Format.RGB9E5] = tempFeature;
          this._formatFeatures[Format.DEPTH] = tempFeature;
          this._formatFeatures[Format.DEPTH_STENCIL] = tempFeature;
          this._formatFeatures[Format.RGB10A2UI] = FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.STORAGE_TEXTURE | FormatFeatureBit.SAMPLED_TEXTURE | FormatFeatureBit.LINEAR_FILTER;
          tempFeature = FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.SAMPLED_TEXTURE | FormatFeatureBit.STORAGE_TEXTURE | FormatFeatureBit.VERTEX_ATTRIBUTE;
          this._formatFeatures[Format.R16F] = tempFeature;
          this._formatFeatures[Format.RG16F] = tempFeature;
          this._formatFeatures[Format.RGB16F] = tempFeature;
          this._formatFeatures[Format.RGBA16F] = tempFeature;
          tempFeature = FormatFeatureBit.STORAGE_TEXTURE | FormatFeatureBit.SAMPLED_TEXTURE | FormatFeatureBit.VERTEX_ATTRIBUTE;
          this._formatFeatures[Format.R32F] = tempFeature;
          this._formatFeatures[Format.RG32F] = tempFeature;
          this._formatFeatures[Format.RGB32F] = tempFeature;
          this._formatFeatures[Format.RGBA32F] = tempFeature;
          this._formatFeatures[Format.RGB10A2UI] = FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.STORAGE_TEXTURE | FormatFeatureBit.SAMPLED_TEXTURE | FormatFeatureBit.LINEAR_FILTER;
          tempFeature = FormatFeatureBit.RENDER_TARGET | FormatFeatureBit.STORAGE_TEXTURE | FormatFeatureBit.SAMPLED_TEXTURE | FormatFeatureBit.LINEAR_FILTER | FormatFeatureBit.VERTEX_ATTRIBUTE;
          this._formatFeatures[Format.R8I] = tempFeature;
          this._formatFeatures[Format.R8UI] = tempFeature;
          this._formatFeatures[Format.R16I] = tempFeature;
          this._formatFeatures[Format.R16UI] = tempFeature;
          this._formatFeatures[Format.R32I] = tempFeature;
          this._formatFeatures[Format.R32UI] = tempFeature;
          this._formatFeatures[Format.RG8I] = tempFeature;
          this._formatFeatures[Format.RG8UI] = tempFeature;
          this._formatFeatures[Format.RG16I] = tempFeature;
          this._formatFeatures[Format.RG16UI] = tempFeature;
          this._formatFeatures[Format.RG32I] = tempFeature;
          this._formatFeatures[Format.RG32UI] = tempFeature;
          this._formatFeatures[Format.RGB8I] = tempFeature;
          this._formatFeatures[Format.RGB8UI] = tempFeature;
          this._formatFeatures[Format.RGB16I] = tempFeature;
          this._formatFeatures[Format.RGB16UI] = tempFeature;
          this._formatFeatures[Format.RGB32I] = tempFeature;
          this._formatFeatures[Format.RGB32UI] = tempFeature;
          this._formatFeatures[Format.RGBA8I] = tempFeature;
          this._formatFeatures[Format.RGBA8UI] = tempFeature;
          this._formatFeatures[Format.RGBA16I] = tempFeature;
          this._formatFeatures[Format.RGBA16UI] = tempFeature;
          this._formatFeatures[Format.RGBA32I] = tempFeature;
          this._formatFeatures[Format.RGBA32UI] = tempFeature;
          this._textureExclusive[Format.R8] = false;
          this._textureExclusive[Format.RG8] = false;
          this._textureExclusive[Format.RGB8] = false;
          this._textureExclusive[Format.R5G6B5] = false;
          this._textureExclusive[Format.RGBA4] = false;
          this._textureExclusive[Format.RGB5A1] = false;
          this._textureExclusive[Format.RGBA8] = false;
          this._textureExclusive[Format.RGB10A2] = false;
          this._textureExclusive[Format.RGB10A2UI] = false;
          this._textureExclusive[Format.SRGB8_A8] = false;
          this._textureExclusive[Format.R8I] = false;
          this._textureExclusive[Format.R8UI] = false;
          this._textureExclusive[Format.R16I] = false;
          this._textureExclusive[Format.R16UI] = false;
          this._textureExclusive[Format.R32I] = false;
          this._textureExclusive[Format.R32UI] = false;
          this._textureExclusive[Format.RG8I] = false;
          this._textureExclusive[Format.RG8UI] = false;
          this._textureExclusive[Format.RG16I] = false;
          this._textureExclusive[Format.RG16UI] = false;
          this._textureExclusive[Format.RG32I] = false;
          this._textureExclusive[Format.RG32UI] = false;
          this._textureExclusive[Format.RGBA8I] = false;
          this._textureExclusive[Format.RGBA8UI] = false;
          this._textureExclusive[Format.RGBA16I] = false;
          this._textureExclusive[Format.RGBA16UI] = false;
          this._textureExclusive[Format.RGBA32I] = false;
          this._textureExclusive[Format.RGBA32UI] = false;
          this._textureExclusive[Format.DEPTH] = false;
          this._textureExclusive[Format.DEPTH_STENCIL] = false;

          if (exts.EXT_color_buffer_float) {
            this._formatFeatures[Format.R32F] |= FormatFeatureBit.RENDER_TARGET;
            this._formatFeatures[Format.RG32F] |= FormatFeatureBit.RENDER_TARGET;
            this._formatFeatures[Format.RGBA32F] |= FormatFeatureBit.RENDER_TARGET;
            this._textureExclusive[Format.R32F] = false;
            this._textureExclusive[Format.RG32F] = false;
            this._textureExclusive[Format.RGBA32F] = false;
          }

          if (exts.EXT_color_buffer_half_float) {
            this._textureExclusive[Format.R16F] = false;
            this._textureExclusive[Format.RG16F] = false;
            this._textureExclusive[Format.RGBA16F] = false;
          }

          if (exts.OES_texture_float_linear) {
            this._formatFeatures[Format.RGB32F] |= FormatFeatureBit.LINEAR_FILTER;
            this._formatFeatures[Format.RGBA32F] |= FormatFeatureBit.LINEAR_FILTER;
            this._formatFeatures[Format.R32F] |= FormatFeatureBit.LINEAR_FILTER;
            this._formatFeatures[Format.RG32F] |= FormatFeatureBit.LINEAR_FILTER;
          }

          if (exts.OES_texture_half_float_linear) {
            this._formatFeatures[Format.RGB16F] |= FormatFeatureBit.LINEAR_FILTER;
            this._formatFeatures[Format.RGBA16F] |= FormatFeatureBit.LINEAR_FILTER;
            this._formatFeatures[Format.R16F] |= FormatFeatureBit.LINEAR_FILTER;
            this._formatFeatures[Format.RG16F] |= FormatFeatureBit.LINEAR_FILTER;
          }

          var compressedFeature = FormatFeatureBit.SAMPLED_TEXTURE | FormatFeatureBit.LINEAR_FILTER;

          if (exts.WEBGL_compressed_texture_etc1) {
            this._formatFeatures[Format.ETC_RGB8] = compressedFeature;
          }

          if (exts.WEBGL_compressed_texture_etc) {
            this._formatFeatures[Format.ETC2_RGB8] = compressedFeature;
            this._formatFeatures[Format.ETC2_RGBA8] = compressedFeature;
            this._formatFeatures[Format.ETC2_SRGB8] = compressedFeature;
            this._formatFeatures[Format.ETC2_SRGB8_A8] = compressedFeature;
            this._formatFeatures[Format.ETC2_RGB8_A1] = compressedFeature;
            this._formatFeatures[Format.ETC2_SRGB8_A1] = compressedFeature;
          }

          if (exts.WEBGL_compressed_texture_s3tc) {
            this._formatFeatures[Format.BC1] = compressedFeature;
            this._formatFeatures[Format.BC1_ALPHA] = compressedFeature;
            this._formatFeatures[Format.BC1_SRGB] = compressedFeature;
            this._formatFeatures[Format.BC1_SRGB_ALPHA] = compressedFeature;
            this._formatFeatures[Format.BC2] = compressedFeature;
            this._formatFeatures[Format.BC2_SRGB] = compressedFeature;
            this._formatFeatures[Format.BC3] = compressedFeature;
            this._formatFeatures[Format.BC3_SRGB] = compressedFeature;
          }

          if (exts.WEBGL_compressed_texture_pvrtc) {
            this._formatFeatures[Format.PVRTC_RGB2] = compressedFeature;
            this._formatFeatures[Format.PVRTC_RGBA2] = compressedFeature;
            this._formatFeatures[Format.PVRTC_RGB4] = compressedFeature;
            this._formatFeatures[Format.PVRTC_RGBA4] = compressedFeature;
          }

          if (exts.WEBGL_compressed_texture_astc) {
            this._formatFeatures[Format.ASTC_RGBA_4X4] = compressedFeature;
            this._formatFeatures[Format.ASTC_RGBA_5X4] = compressedFeature;
            this._formatFeatures[Format.ASTC_RGBA_5X5] = compressedFeature;
            this._formatFeatures[Format.ASTC_RGBA_6X5] = compressedFeature;
            this._formatFeatures[Format.ASTC_RGBA_6X6] = compressedFeature;
            this._formatFeatures[Format.ASTC_RGBA_8X5] = compressedFeature;
            this._formatFeatures[Format.ASTC_RGBA_8X6] = compressedFeature;
            this._formatFeatures[Format.ASTC_RGBA_8X8] = compressedFeature;
            this._formatFeatures[Format.ASTC_RGBA_10X5] = compressedFeature;
            this._formatFeatures[Format.ASTC_RGBA_10X6] = compressedFeature;
            this._formatFeatures[Format.ASTC_RGBA_10X8] = compressedFeature;
            this._formatFeatures[Format.ASTC_RGBA_10X10] = compressedFeature;
            this._formatFeatures[Format.ASTC_RGBA_12X10] = compressedFeature;
            this._formatFeatures[Format.ASTC_RGBA_12X12] = compressedFeature;
            this._formatFeatures[Format.ASTC_SRGBA_4X4] = compressedFeature;
            this._formatFeatures[Format.ASTC_SRGBA_5X4] = compressedFeature;
            this._formatFeatures[Format.ASTC_SRGBA_5X5] = compressedFeature;
            this._formatFeatures[Format.ASTC_SRGBA_6X5] = compressedFeature;
            this._formatFeatures[Format.ASTC_SRGBA_6X6] = compressedFeature;
            this._formatFeatures[Format.ASTC_SRGBA_8X5] = compressedFeature;
            this._formatFeatures[Format.ASTC_SRGBA_8X6] = compressedFeature;
            this._formatFeatures[Format.ASTC_SRGBA_8X8] = compressedFeature;
            this._formatFeatures[Format.ASTC_SRGBA_10X5] = compressedFeature;
            this._formatFeatures[Format.ASTC_SRGBA_10X6] = compressedFeature;
            this._formatFeatures[Format.ASTC_SRGBA_10X8] = compressedFeature;
            this._formatFeatures[Format.ASTC_SRGBA_10X10] = compressedFeature;
            this._formatFeatures[Format.ASTC_SRGBA_12X10] = compressedFeature;
            this._formatFeatures[Format.ASTC_SRGBA_12X12] = compressedFeature;
          }
        };

        _proto.createCommandBuffer = function createCommandBuffer(info) {
          var Ctor = info.type === CommandBufferType.PRIMARY ? WebGL2PrimaryCommandBuffer : WebGL2CommandBuffer;
          var cmdBuff = new Ctor();
          cmdBuff.initialize(info);
          return cmdBuff;
        };

        _proto.createSwapchain = function createSwapchain(info) {
          var swapchain = new WebGL2Swapchain();
          this._swapchain = swapchain;
          swapchain.initialize(info);
          return swapchain;
        };

        _proto.createBuffer = function createBuffer(info) {
          var buffer = new WebGL2Buffer();
          buffer.initialize(info);
          return buffer;
        };

        _proto.createTexture = function createTexture(info) {
          var texture = new WebGL2Texture();
          texture.initialize(info);
          return texture;
        };

        _proto.createDescriptorSet = function createDescriptorSet(info) {
          var descriptorSet = new WebGL2DescriptorSet();
          descriptorSet.initialize(info);
          return descriptorSet;
        };

        _proto.createShader = function createShader(info) {
          var shader = new WebGL2Shader();
          shader.initialize(info);
          return shader;
        };

        _proto.createInputAssembler = function createInputAssembler(info) {
          var inputAssembler = new WebGL2InputAssembler();
          inputAssembler.initialize(info);
          return inputAssembler;
        };

        _proto.createRenderPass = function createRenderPass(info) {
          var renderPass = new WebGL2RenderPass();
          renderPass.initialize(info);
          return renderPass;
        };

        _proto.createFramebuffer = function createFramebuffer(info) {
          var framebuffer = new WebGL2Framebuffer();
          framebuffer.initialize(info);
          return framebuffer;
        };

        _proto.createDescriptorSetLayout = function createDescriptorSetLayout(info) {
          var descriptorSetLayout = new WebGL2DescriptorSetLayout();
          descriptorSetLayout.initialize(info);
          return descriptorSetLayout;
        };

        _proto.createPipelineLayout = function createPipelineLayout(info) {
          var pipelineLayout = new WebGL2PipelineLayout();
          pipelineLayout.initialize(info);
          return pipelineLayout;
        };

        _proto.createPipelineState = function createPipelineState(info) {
          var pipelineState = new WebGL2PipelineState();
          pipelineState.initialize(info);
          return pipelineState;
        };

        _proto.createQueue = function createQueue(info) {
          var queue = new WebGL2Queue();
          queue.initialize(info);
          return queue;
        };

        _proto.getSampler = function getSampler(info) {
          var hash = Sampler.computeHash(info);

          if (!this._samplers.has(hash)) {
            this._samplers.set(hash, new WebGL2Sampler(info, hash));
          }

          return this._samplers.get(hash);
        };

        _proto.getSwapchains = function getSwapchains() {
          return [this._swapchain];
        };

        _proto.getGeneralBarrier = function getGeneralBarrier(info) {
          var hash = GeneralBarrier.computeHash(info);

          if (!this._generalBarrierss.has(hash)) {
            this._generalBarrierss.set(hash, new GeneralBarrier(info, hash));
          }

          return this._generalBarrierss.get(hash);
        };

        _proto.getTextureBarrier = function getTextureBarrier(info) {
          var hash = TextureBarrier.computeHash(info);

          if (!this._textureBarriers.has(hash)) {
            this._textureBarriers.set(hash, new TextureBarrier(info, hash));
          }

          return this._textureBarriers.get(hash);
        };

        _proto.getBufferBarrier = function getBufferBarrier(info) {
          var hash = BufferBarrier.computeHash(info);

          if (!this._bufferBarriers.has(hash)) {
            this._bufferBarriers.set(hash, new BufferBarrier(info, hash));
          }

          return this._bufferBarriers.get(hash);
        };

        _proto.copyBuffersToTexture = function copyBuffersToTexture(buffers, texture, regions) {
          WebGL2CmdFuncCopyBuffersToTexture(this, buffers, texture.gpuTexture, regions);
        };

        _proto.copyTextureToBuffers = function copyTextureToBuffers(texture, buffers, regions) {
          WebGL2CmdFuncCopyTextureToBuffers(this, texture.gpuTexture, buffers, regions);
        };

        _proto.copyTexImagesToTexture = function copyTexImagesToTexture(texImages, texture, regions) {
          WebGL2CmdFuncCopyTexImagesToTexture(this, texImages, texture.gpuTexture, regions);
        };

        _createClass(WebGL2Device, [{
          key: "gl",
          get: function get() {
            return this._context;
          }
        }, {
          key: "extensions",
          get: function get() {
            return this._swapchain.extensions;
          }
        }, {
          key: "stateCache",
          get: function get() {
            return this._swapchain.stateCache;
          }
        }, {
          key: "nullTex2D",
          get: function get() {
            return this._swapchain.nullTex2D;
          }
        }, {
          key: "nullTexCube",
          get: function get() {
            return this._swapchain.nullTexCube;
          }
        }, {
          key: "textureExclusive",
          get: function get() {
            return this._textureExclusive;
          }
        }, {
          key: "bindingMappings",
          get: function get() {
            return this._bindingMappings;
          }
        }, {
          key: "blitManager",
          get: function get() {
            return this._swapchain.blitManager;
          }
        }]);

        return WebGL2Device;
      }(Device));

      legacyCC.WebGL2Device = WebGL2Device;

      var MorphModel = function (_Model) {
        _inheritsLoose(MorphModel, _Model);

        function MorphModel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Model.call.apply(_Model, [this].concat(args)) || this;
          _this._morphRenderingInstance = null;
          _this._usedMaterials = new Set();
          return _this;
        }

        var _proto = MorphModel.prototype;

        _proto.getMacroPatches = function getMacroPatches(subModelIndex) {
          var superMacroPatches = _Model.prototype.getMacroPatches.call(this, subModelIndex);

          if (this._morphRenderingInstance) {
            var morphInstanceMacroPatches = this._morphRenderingInstance.requiredPatches(subModelIndex);

            if (morphInstanceMacroPatches) {
              return morphInstanceMacroPatches.concat(superMacroPatches !== null && superMacroPatches !== void 0 ? superMacroPatches : []);
            }
          }

          return superMacroPatches;
        };

        _proto.initSubModel = function initSubModel(subModelIndex, subMeshData, material) {
          return _Model.prototype.initSubModel.call(this, subModelIndex, subMeshData, this._launderMaterial(material));
        };

        _proto.destroy = function destroy() {
          _Model.prototype.destroy.call(this);

          this._morphRenderingInstance = null;
        };

        _proto.setSubModelMaterial = function setSubModelMaterial(subModelIndex, material) {
          return _Model.prototype.setSubModelMaterial.call(this, subModelIndex, this._launderMaterial(material));
        };

        _proto.setMorphRendering = function setMorphRendering(morphRendering) {
          this._morphRenderingInstance = morphRendering;
        };

        _proto._updateLocalDescriptors = function _updateLocalDescriptors(submodelIdx, descriptorSet) {
          _Model.prototype._updateLocalDescriptors.call(this, submodelIdx, descriptorSet);

          if (this._morphRenderingInstance) {
            this._morphRenderingInstance.adaptPipelineState(submodelIdx, descriptorSet);
          }
        };

        _proto._launderMaterial = function _launderMaterial(material) {
          return material;
        };

        return MorphModel;
      }(Model);

      var _dec$1q, _dec2$L, _dec3$q, _dec4$d, _dec5$a, _dec6$8, _dec7$8, _class$1t, _class2$1g, _initializer$14, _initializer2$K, _initializer3$x, _initializer4$r, _initializer5$j, _initializer6$f, _initializer7$b, _initializer8$b, _initializer9$a, _initializer10$a, _initializer11$8, _class3$q, _temp$A, _dec8$4, _dec9$4, _dec10$3, _dec11$3, _dec12$3, _dec13$3, _dec14$3, _class4$a, _class5$a, _initializer12$7, _initializer13$7, _initializer14$5, _initializer15$5, _initializer16$5, _initializer17$5, _initializer18$4, _class6$1, _temp2;
      var ccclass$6 = ccclass,
          executionOrder$1 = executionOrder,
          type$3 = type,
          formerlySerializedAs$1 = formerlySerializedAs,
          serializable$5 = serializable;
      var ModelShadowCastingMode = Enum({
        OFF: 0,
        ON: 1
      });
      var ModelShadowReceivingMode = Enum({
        OFF: 0,
        ON: 1
      });
      var ReflectionProbeType;

      (function (ReflectionProbeType) {
        ReflectionProbeType[ReflectionProbeType["NONE"] = 0] = "NONE";
        ReflectionProbeType[ReflectionProbeType["BAKED_CUBEMAP"] = 1] = "BAKED_CUBEMAP";
        ReflectionProbeType[ReflectionProbeType["PLANAR_REFLECTION"] = 2] = "PLANAR_REFLECTION";
      })(ReflectionProbeType || (ReflectionProbeType = {}));

      var ModelBakeSettings = (_dec$1q = ccclass$6('cc.ModelBakeSettings'), _dec2$L = formerlySerializedAs$1('_recieveShadow'), _dec3$q = type$3(CCInteger), _dec4$d = type$3(CCBoolean), _dec5$a = type$3(CCBoolean), _dec6$8 = type$3(Enum(ReflectionProbeType)), _dec7$8 = type$3(CCBoolean), _dec$1q(_class$1t = (_class2$1g = (_temp$A = _class3$q = function (_EventTarget) {
        _inheritsLoose(ModelBakeSettings, _EventTarget);

        function ModelBakeSettings() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _EventTarget.call.apply(_EventTarget, [this].concat(args)) || this;
          _this.texture = _initializer$14 && _initializer$14();
          _this.uvParam = _initializer2$K && _initializer2$K();
          _this._bakeable = _initializer3$x && _initializer3$x();
          _this._castShadow = _initializer4$r && _initializer4$r();
          _this._receiveShadow = _initializer5$j && _initializer5$j();
          _this._lightmapSize = _initializer6$f && _initializer6$f();
          _this._useLightProbe = _initializer7$b && _initializer7$b();
          _this._bakeToLightProbe = _initializer8$b && _initializer8$b();
          _this._reflectionProbeType = _initializer9$a && _initializer9$a();
          _this._bakeToReflectionProbe = _initializer10$a && _initializer10$a();
          _this._probeCubemap = _initializer11$8 && _initializer11$8();
          _this._probePlanarmap = null;
          return _this;
        }

        _createClass(ModelBakeSettings, [{
          key: "bakeable",
          get: function get() {
            return this._bakeable;
          },
          set: function set(val) {
            this._bakeable = val;
          }
        }, {
          key: "castShadow",
          get: function get() {
            return this._castShadow;
          },
          set: function set(val) {
            this._castShadow = val;
          }
        }, {
          key: "receiveShadow",
          get: function get() {
            return this._receiveShadow;
          },
          set: function set(val) {
            this._receiveShadow = val;
          }
        }, {
          key: "lightmapSize",
          get: function get() {
            return this._lightmapSize;
          },
          set: function set(val) {
            this._lightmapSize = val;
          }
        }, {
          key: "useLightProbe",
          get: function get() {
            return this._useLightProbe;
          },
          set: function set(val) {
            this._useLightProbe = val;
            this.emit(ModelBakeSettings.USE_LIGHT_PROBE_CHANGED);
          }
        }, {
          key: "bakeToLightProbe",
          get: function get() {
            return this._bakeToLightProbe;
          },
          set: function set(val) {
            this._bakeToLightProbe = val;
          }
        }, {
          key: "reflectionProbe",
          get: function get() {
            return this._reflectionProbeType;
          },
          set: function set(val) {
            this._reflectionProbeType = val;
            this.emit(ModelBakeSettings.REFLECTION_PROBE_CHANGED);
          }
        }, {
          key: "bakeToReflectionProbe",
          get: function get() {
            return this._bakeToReflectionProbe;
          },
          set: function set(val) {
            this._bakeToReflectionProbe = val;
            this.emit(ModelBakeSettings.BAKE_TO_REFLECTION_PROBE_CHANGED);
          }
        }]);

        return ModelBakeSettings;
      }(EventTarget), _class3$q.USE_LIGHT_PROBE_CHANGED = 'use_light_probe_changed', _class3$q.REFLECTION_PROBE_CHANGED = 'reflection_probe_changed', _class3$q.BAKE_TO_REFLECTION_PROBE_CHANGED = 'bake_to_reflection_probe_changed', _temp$A), (_initializer$14 = applyDecoratedInitializer(_class2$1g.prototype, "texture", [serializable$5], function () {
        return null;
      }), _initializer2$K = applyDecoratedInitializer(_class2$1g.prototype, "uvParam", [serializable$5], function () {
        return new Vec4();
      }), _initializer3$x = applyDecoratedInitializer(_class2$1g.prototype, "_bakeable", [serializable$5], function () {
        return false;
      }), _initializer4$r = applyDecoratedInitializer(_class2$1g.prototype, "_castShadow", [serializable$5], function () {
        return false;
      }), _initializer5$j = applyDecoratedInitializer(_class2$1g.prototype, "_receiveShadow", [_dec2$L], function () {
        return false;
      }), _initializer6$f = applyDecoratedInitializer(_class2$1g.prototype, "_lightmapSize", [serializable$5], function () {
        return 64;
      }), _initializer7$b = applyDecoratedInitializer(_class2$1g.prototype, "_useLightProbe", [serializable$5], function () {
        return false;
      }), _initializer8$b = applyDecoratedInitializer(_class2$1g.prototype, "_bakeToLightProbe", [serializable$5], function () {
        return true;
      }), _initializer9$a = applyDecoratedInitializer(_class2$1g.prototype, "_reflectionProbeType", [serializable$5], function () {
        return ReflectionProbeType.NONE;
      }), _initializer10$a = applyDecoratedInitializer(_class2$1g.prototype, "_bakeToReflectionProbe", [serializable$5], function () {
        return true;
      }), _initializer11$8 = applyDecoratedInitializer(_class2$1g.prototype, "_probeCubemap", [serializable$5], function () {
        return null;
      }), _applyDecoratedDescriptor(_class2$1g.prototype, "lightmapSize", [_dec3$q], Object.getOwnPropertyDescriptor(_class2$1g.prototype, "lightmapSize"), _class2$1g.prototype), _applyDecoratedDescriptor(_class2$1g.prototype, "useLightProbe", [_dec4$d], Object.getOwnPropertyDescriptor(_class2$1g.prototype, "useLightProbe"), _class2$1g.prototype), _applyDecoratedDescriptor(_class2$1g.prototype, "bakeToLightProbe", [_dec5$a], Object.getOwnPropertyDescriptor(_class2$1g.prototype, "bakeToLightProbe"), _class2$1g.prototype), _applyDecoratedDescriptor(_class2$1g.prototype, "reflectionProbe", [_dec6$8], Object.getOwnPropertyDescriptor(_class2$1g.prototype, "reflectionProbe"), _class2$1g.prototype), _applyDecoratedDescriptor(_class2$1g.prototype, "bakeToReflectionProbe", [_dec7$8], Object.getOwnPropertyDescriptor(_class2$1g.prototype, "bakeToReflectionProbe"), _class2$1g.prototype)), _class2$1g)) || _class$1t);
      var MeshRenderer = (_dec8$4 = ccclass$6('cc.MeshRenderer'), _dec9$4 = executionOrder$1(100), _dec10$3 = type$3(CCFloat), _dec11$3 = type$3(CCFloat), _dec12$3 = type$3(ModelShadowCastingMode), _dec13$3 = type$3(ModelShadowReceivingMode), _dec14$3 = type$3(Mesh), _dec8$4(_class4$a = _dec9$4(_class4$a = (_class5$a = (_temp2 = _class6$1 = function (_ModelRenderer) {
        _inheritsLoose(MeshRenderer, _ModelRenderer);

        function MeshRenderer() {
          var _this2;

          _this2 = _ModelRenderer.call(this) || this;
          _this2.bakeSettings = _initializer12$7 && _initializer12$7();
          _this2._mesh = _initializer13$7 && _initializer13$7();
          _this2._shadowCastingMode = _initializer14$5 && _initializer14$5();
          _this2._shadowReceivingMode = _initializer15$5 && _initializer15$5();
          _this2._shadowBias = _initializer16$5 && _initializer16$5();
          _this2._shadowNormalBias = _initializer17$5 && _initializer17$5();
          _this2._subMeshShapesWeights = [];
          _this2._modelType = void 0;
          _this2._model = null;
          _this2._morphInstance = null;
          _this2._enableMorph = _initializer18$4 && _initializer18$4();
          _this2._modelType = Model;
          var highQualityMode = settings.querySettings(Settings.Category.RENDERING, 'highQualityMode');

          if (highQualityMode) {
            _this2._shadowCastingMode = ModelShadowCastingMode.ON;
            _this2.bakeSettings.castShadow = true;
            _this2.bakeSettings.receiveShadow = true;
          }

          return _this2;
        }

        var _proto = MeshRenderer.prototype;

        _proto.onLoad = function onLoad() {
          if (this._mesh) {
            this._mesh.initialize();
          }

          if (!this._validateShapeWeights()) {
            this._initSubMeshShapesWeights();
          }

          this._watchMorphInMesh();

          this._updateModels();

          this._updateCastShadow();

          this._updateReceiveShadow();

          this._updateShadowBias();

          this._updateShadowNormalBias();

          this._updateUseLightProbe();

          this._updateBakeToReflectionProbe();

          this._updateUseReflectionProbe();
        };

        _proto.onRestore = function onRestore() {
          this._updateModels();

          if (this.enabledInHierarchy) {
            this._attachToScene();
          }

          this._updateCastShadow();

          this._updateReceiveShadow();

          this._updateShadowBias();

          this._updateShadowNormalBias();

          this._updateUseLightProbe();

          this._updateBakeToReflectionProbe();

          this._updateUseReflectionProbe();
        };

        _proto.onEnable = function onEnable() {
          _ModelRenderer.prototype.onEnable.call(this);

          this.node.on(NodeEventType.MOBILITY_CHANGED, this.onMobilityChanged, this);
          this.bakeSettings.on(ModelBakeSettings.USE_LIGHT_PROBE_CHANGED, this.onUseLightProbeChanged, this);
          this.bakeSettings.on(ModelBakeSettings.REFLECTION_PROBE_CHANGED, this.onReflectionProbeChanged, this);
          this.bakeSettings.on(ModelBakeSettings.BAKE_TO_REFLECTION_PROBE_CHANGED, this.onBakeToReflectionProbeChanged, this);

          if (!this._model) {
            this._updateModels();
          }

          this._updateCastShadow();

          this._updateReceiveShadow();

          this._updateShadowBias();

          this._updateShadowNormalBias();

          this._updateBakeToReflectionProbe();

          this._updateUseReflectionProbe();

          this._onUpdateLocalShadowBias();

          this._updateUseLightProbe();

          this._attachToScene();
        };

        _proto.onDisable = function onDisable() {
          if (this._model) {
            this._detachFromScene();
          }

          this.node.off(NodeEventType.MOBILITY_CHANGED, this.onMobilityChanged, this);
          this.bakeSettings.off(ModelBakeSettings.USE_LIGHT_PROBE_CHANGED, this.onUseLightProbeChanged, this);
          this.bakeSettings.off(ModelBakeSettings.REFLECTION_PROBE_CHANGED, this.onReflectionProbeChanged, this);
          this.bakeSettings.off(ModelBakeSettings.BAKE_TO_REFLECTION_PROBE_CHANGED, this.onBakeToReflectionProbeChanged, this);
        };

        _proto.onDestroy = function onDestroy() {
          if (this._model) {
            legacyCC.director.root.destroyModel(this._model);
            this._model = null;
            this._models.length = 0;
          }

          if (this._morphInstance) {
            this._morphInstance.destroy();
          }
        };

        _proto.onGeometryChanged = function onGeometryChanged() {
          if (this._model && this._mesh) {
            var meshStruct = this._mesh.struct;

            this._model.createBoundingShape(meshStruct.minPosition, meshStruct.maxPosition);

            this._model.updateWorldBound();

            this._model.onGeometryChanged();
          }
        };

        _proto.getWeight = function getWeight(subMeshIndex, shapeIndex) {
          var subMeshShapesWeights = this._subMeshShapesWeights;
          assertIsTrue(subMeshIndex < subMeshShapesWeights.length);
          var shapeWeights = this._subMeshShapesWeights[subMeshIndex];
          assertIsTrue(shapeIndex < shapeWeights.length);
          return shapeWeights[shapeIndex];
        };

        _proto.setWeights = function setWeights(weights, subMeshIndex) {
          var subMeshShapesWeights = this._subMeshShapesWeights;

          if (subMeshIndex >= subMeshShapesWeights.length) {
            return;
          }

          var shapeWeights = subMeshShapesWeights[subMeshIndex];

          if (shapeWeights.length !== weights.length) {
            return;
          }

          subMeshShapesWeights[subMeshIndex] = weights.slice(0);

          this._uploadSubMeshShapesWeights(subMeshIndex);
        };

        _proto.setWeight = function setWeight(weight, subMeshIndex, shapeIndex) {
          var subMeshShapesWeights = this._subMeshShapesWeights;

          if (subMeshIndex >= subMeshShapesWeights.length) {
            return;
          }

          var shapeWeights = subMeshShapesWeights[subMeshIndex];

          if (shapeIndex >= shapeWeights.length) {
            return;
          }

          shapeWeights[shapeIndex] = weight;

          this._uploadSubMeshShapesWeights(subMeshIndex);
        };

        _proto.setInstancedAttribute = function setInstancedAttribute(name, value) {
          if (!this.model) {
            return;
          }

          {
            var subModels = this.model.subModels;

            for (var i = 0; i < subModels.length; i++) {
              var subModel = subModels[i];
              var _subModel$instancedAt = subModel.instancedAttributeBlock,
                  attributes = _subModel$instancedAt.attributes,
                  views = _subModel$instancedAt.views;

              for (var _i = 0; _i < attributes.length; _i++) {
                if (attributes[_i].name === name) {
                  views[_i].set(value);

                  break;
                }
              }
            }
          }
        };

        _proto._updateLightmap = function _updateLightmap(lightmap, uOff, vOff, scale, lum) {
          this.bakeSettings.texture = lightmap;
          this.bakeSettings.uvParam.x = uOff;
          this.bakeSettings.uvParam.y = vOff;
          this.bakeSettings.uvParam.z = scale;
          this.bakeSettings.uvParam.w = lum;

          this._onUpdateLightingmap();
        };

        _proto.updateProbeCubemap = function updateProbeCubemap(cubeMap, useDefaultTexture) {
          if (this.bakeSettings._probeCubemap && this.bakeSettings._probeCubemap === cubeMap) {
            return;
          }

          this.bakeSettings._probeCubemap = cubeMap;

          if (this.model !== null) {
            var _cubeMap = this.bakeSettings._probeCubemap;

            if (!_cubeMap && this.node.scene && !useDefaultTexture) {
              _cubeMap = this.node.scene._globals.skybox.envmap;
            }

            this.model.updateReflectionProbeCubemap(_cubeMap);
          }
        };

        _proto.updateProbePlanarMap = function updateProbePlanarMap(planarMap) {
          if (this.bakeSettings._probePlanarmap === planarMap) {
            return;
          }

          this.bakeSettings._probePlanarmap = planarMap;

          if (this.model !== null) {
            this.model.updateReflectionProbePlanarMap(this.bakeSettings._probePlanarmap);
          }
        };

        _proto._updateReflectionProbeTexture = function _updateReflectionProbeTexture() {
          if (this.model === null) return;

          if (this.bakeSettings.reflectionProbe === ReflectionProbeType.BAKED_CUBEMAP) {
            var cubeMap = this.bakeSettings._probeCubemap;

            if (!cubeMap && this.node.scene) {
              cubeMap = this.node.scene._globals.skybox.envmap;
            }

            this.model.updateReflectionProbeCubemap(cubeMap);
            this.model.updateReflectionProbePlanarMap(null);
          } else if (this.bakeSettings.reflectionProbe === ReflectionProbeType.PLANAR_REFLECTION) {
            this.model.updateReflectionProbePlanarMap(this.bakeSettings._probePlanarmap);
            this.model.updateReflectionProbeCubemap(null);
          } else {
            this.model.updateReflectionProbeCubemap(null);
            this.model.updateReflectionProbePlanarMap(null);
          }
        };

        _proto._updateModels = function _updateModels() {
          if (!this.enabledInHierarchy) {
            return;
          }

          var model = this._model;

          if (model) {
            model.destroy();
            model.initialize();
            model.node = model.transform = this.node;
          } else {
            this._createModel();
          }

          if (this._model) {
            if (this._mesh) {
              var meshStruct = this._mesh.struct;

              this._model.createBoundingShape(meshStruct.minPosition, meshStruct.maxPosition);
            }

            this._model.initLightingmap(this.bakeSettings.texture, this.bakeSettings.uvParam);

            this._updateUseLightProbe();

            this._updateModelParams();

            this._onUpdateLightingmap();

            this._onUpdateLocalShadowBias();

            this._updateUseReflectionProbe();
          }
        };

        _proto._createModel = function _createModel() {
          var preferMorphOverPlain = !!this._morphInstance;
          var modelType = preferMorphOverPlain && this._modelType === Model ? MorphModel : this._modelType;
          var model = this._model = legacyCC.director.root.createModel(modelType);
          model.visFlags = this.visibility;
          model.node = model.transform = this.node;
          this._models.length = 0;

          this._models.push(this._model);

          if (this._morphInstance && model instanceof MorphModel) {
            model.setMorphRendering(this._morphInstance);
          }
        };

        _proto._attachToScene = function _attachToScene() {
          if (!this.node.scene || !this._model) {
            return;
          }

          var renderScene = this._getRenderScene();

          if (this._model.scene !== null) {
            this._detachFromScene();
          }

          renderScene.addModel(this._model);
        };

        _proto._detachFromScene = function _detachFromScene() {
          if (this._model && this._model.scene) {
            this._model.scene.removeModel(this._model);
          }
        };

        _proto._updateModelParams = function _updateModelParams() {
          if (!this._mesh || !this._model) {
            return;
          }

          this.node.hasChangedFlags |= TransformBit.POSITION;
          this._model.transform.hasChangedFlags |= TransformBit.POSITION;
          this._model.isDynamicBatching = this._isBatchingEnabled();
          var meshCount = this._mesh ? this._mesh.renderingSubMeshes.length : 0;
          var renderingMesh = this._mesh.renderingSubMeshes;

          if (renderingMesh) {
            for (var i = 0; i < meshCount; ++i) {
              var material = this.getRenderMaterial(i);

              if (material && !material.isValid) {
                material = null;
              }

              var subMeshData = renderingMesh[i];

              if (subMeshData) {
                this._model.initSubModel(i, subMeshData, material || this._getBuiltinMaterial());
              }
            }
          }

          this._model.enabled = true;
        };

        _proto._onUpdateLightingmap = function _onUpdateLightingmap() {
          if (this.model !== null) {
            this.model.updateLightingmap(this.bakeSettings.texture, this.bakeSettings.uvParam);
          }

          this.setInstancedAttribute('a_lightingMapUVParam', [this.bakeSettings.uvParam.x, this.bakeSettings.uvParam.y, this.bakeSettings.uvParam.z, this.bakeSettings.uvParam.w]);
        };

        _proto._onUpdateLocalShadowBias = function _onUpdateLocalShadowBias() {
          if (this.model !== null) {
            this.model.updateLocalShadowBias();
          }

          this.setInstancedAttribute('a_localShadowBias', [this._shadowBias, this._shadowNormalBias]);
        };

        _proto._onMaterialModified = function _onMaterialModified(idx, material) {
          if (!this._model || !this._model.inited) {
            return;
          }

          this._onRebuildPSO(idx, material || this._getBuiltinMaterial());
        };

        _proto._onRebuildPSO = function _onRebuildPSO(idx, material) {
          if (!this._model || !this._model.inited) {
            return;
          }

          this._model.isDynamicBatching = this._isBatchingEnabled();

          this._model.setSubModelMaterial(idx, material);

          this._onUpdateLightingmap();

          this._onUpdateLocalShadowBias();

          this._updateReflectionProbeTexture();
        };

        _proto._onMeshChanged = function _onMeshChanged(old) {};

        _proto._clearMaterials = function _clearMaterials() {
          if (!this._model) {
            return;
          }

          var subModels = this._model.subModels;

          for (var i = 0; i < subModels.length; ++i) {
            this._onMaterialModified(i, null);
          }
        };

        _proto._getBuiltinMaterial = function _getBuiltinMaterial() {
          return builtinResMgr.get('missing-material');
        };

        _proto._onVisibilityChange = function _onVisibilityChange(val) {
          if (!this._model) {
            return;
          }

          this._model.visFlags = val;
        };

        _proto._updateShadowBias = function _updateShadowBias() {
          if (!this._model) {
            return;
          }

          this._model.shadowBias = this._shadowBias;
        };

        _proto._updateShadowNormalBias = function _updateShadowNormalBias() {
          if (!this._model) {
            return;
          }

          this._model.shadowNormalBias = this._shadowNormalBias;
        };

        _proto._updateCastShadow = function _updateCastShadow() {
          if (!this._model) {
            return;
          }

          if (this._shadowCastingMode === ModelShadowCastingMode.OFF) {
            this._model.castShadow = false;
          } else {
            assertIsTrue(this._shadowCastingMode === ModelShadowCastingMode.ON, "ShadowCastingMode " + this._shadowCastingMode + " is not supported.");
            this._model.castShadow = true;
          }
        };

        _proto._updateReceiveShadow = function _updateReceiveShadow() {
          if (!this._model) {
            return;
          }

          if (this._shadowReceivingMode === ModelShadowReceivingMode.OFF) {
            this._model.receiveShadow = false;
          } else {
            this._model.receiveShadow = true;
          }
        };

        _proto.onMobilityChanged = function onMobilityChanged() {
          this._updateUseLightProbe();
        };

        _proto.onUseLightProbeChanged = function onUseLightProbeChanged() {
          this._updateUseLightProbe();
        };

        _proto.onReflectionProbeChanged = function onReflectionProbeChanged() {
          this._updateUseReflectionProbe();

          if (this.bakeSettings.reflectionProbe === ReflectionProbeType.BAKED_CUBEMAP) {
            legacyCC.internal.reflectionProbeManager.updateUseCubeModels(this._model);
          } else if (this.bakeSettings.reflectionProbe === ReflectionProbeType.PLANAR_REFLECTION) {
            legacyCC.internal.reflectionProbeManager.updateUsePlanarModels(this._model);
          }
        };

        _proto.onBakeToReflectionProbeChanged = function onBakeToReflectionProbeChanged() {
          this._updateBakeToReflectionProbe();
        };

        _proto._updateUseLightProbe = function _updateUseLightProbe() {
          if (!this._model) {
            return;
          }

          var node = this.node;

          if (this._mesh && node && node.mobility === MobilityMode.Movable && this.bakeSettings.useLightProbe) {
            this._model.useLightProbe = true;
          } else {
            this._model.useLightProbe = false;
          }
        };

        _proto._isBatchingEnabled = function _isBatchingEnabled() {
          for (var i = 0; i < this._materials.length; ++i) {
            var mat = this._materials[i];

            if (!mat) {
              continue;
            }

            for (var p = 0; p < mat.passes.length; ++p) {
              var pass = mat.passes[p];

              if (pass.batchingScheme) {
                return true;
              }
            }
          }

          return false;
        };

        _proto._updateUseReflectionProbe = function _updateUseReflectionProbe() {
          if (!this._model) return;
          this._model.reflectionProbeType = this.bakeSettings.reflectionProbe;

          this._updateReflectionProbeTexture();
        };

        _proto._updateBakeToReflectionProbe = function _updateBakeToReflectionProbe() {
          if (!this._model) {
            return;
          }

          this._model.bakeToReflectionProbe = this.bakeSettings.bakeToReflectionProbe;
        };

        _proto._watchMorphInMesh = function _watchMorphInMesh() {
          if (this._morphInstance) {
            this._morphInstance.destroy();

            this._morphInstance = null;
          }

          if (!this._enableMorph) {
            return;
          }

          if (!this._mesh || !this._mesh.struct.morph || !this._mesh.morphRendering) {
            return;
          }

          this._morphInstance = this._mesh.morphRendering.createInstance();
          var nSubMeshes = this._mesh.struct.primitives.length;

          for (var iSubMesh = 0; iSubMesh < nSubMeshes; ++iSubMesh) {
            this._uploadSubMeshShapesWeights(iSubMesh);
          }

          if (this._model && this._model instanceof MorphModel) {
            this._model.setMorphRendering(this._morphInstance);
          }
        };

        _proto._initSubMeshShapesWeights = function _initSubMeshShapesWeights() {
          var mesh = this._mesh;
          this._subMeshShapesWeights.length = 0;

          if (!mesh) {
            return;
          }

          var morph = mesh.struct.morph;

          if (!morph) {
            return;
          }

          var commonWeights = morph.weights;
          this._subMeshShapesWeights = morph.subMeshMorphs.map(function (subMeshMorph) {
            if (!subMeshMorph) {
              return [];
            } else if (subMeshMorph.weights) {
              return subMeshMorph.weights.slice(0);
            } else if (commonWeights) {
              assertIsTrue(commonWeights.length === subMeshMorph.targets.length);
              return commonWeights.slice(0);
            } else {
              return new Array(subMeshMorph.targets.length).fill(0.0);
            }
          });
        };

        _proto._validateShapeWeights = function _validateShapeWeights() {
          var mesh = this._mesh,
              subMeshShapesWeights = this._subMeshShapesWeights;

          if (!mesh || !mesh.struct.morph) {
            return subMeshShapesWeights.length === 0;
          }

          var morph = mesh.struct.morph;

          if (morph.subMeshMorphs.length !== subMeshShapesWeights.length) {
            return false;
          }

          return subMeshShapesWeights.every(function (_ref, subMeshIndex) {
            var _morph$subMeshMorphs$, _morph$subMeshMorphs$2;

            var shapeCount = _ref.length;
            return ((_morph$subMeshMorphs$ = (_morph$subMeshMorphs$2 = morph.subMeshMorphs[subMeshIndex]) === null || _morph$subMeshMorphs$2 === void 0 ? void 0 : _morph$subMeshMorphs$2.targets.length) !== null && _morph$subMeshMorphs$ !== void 0 ? _morph$subMeshMorphs$ : 0) === shapeCount;
          });
        };

        _proto._uploadSubMeshShapesWeights = function _uploadSubMeshShapesWeights(subMeshIndex) {
          var _this$_morphInstance;

          (_this$_morphInstance = this._morphInstance) === null || _this$_morphInstance === void 0 ? void 0 : _this$_morphInstance.setWeights(subMeshIndex, this._subMeshShapesWeights[subMeshIndex]);
        };

        _createClass(MeshRenderer, [{
          key: "shadowBias",
          get: function get() {
            return this._shadowBias;
          },
          set: function set(val) {
            this._shadowBias = val;

            this._updateShadowBias();

            this._onUpdateLocalShadowBias();
          }
        }, {
          key: "shadowNormalBias",
          get: function get() {
            return this._shadowNormalBias;
          },
          set: function set(val) {
            this._shadowNormalBias = val;

            this._updateShadowNormalBias();

            this._onUpdateLocalShadowBias();
          }
        }, {
          key: "shadowCastingMode",
          get: function get() {
            return this._shadowCastingMode;
          },
          set: function set(val) {
            this._shadowCastingMode = val;

            this._updateCastShadow();
          }
        }, {
          key: "receiveShadow",
          get: function get() {
            return this._shadowReceivingMode;
          },
          set: function set(val) {
            this._shadowReceivingMode = val;

            this._updateReceiveShadow();
          }
        }, {
          key: "mesh",
          get: function get() {
            return this._mesh;
          },
          set: function set(val) {
            var old = this._mesh;
            var mesh = this._mesh = val;
            mesh === null || mesh === void 0 ? void 0 : mesh.initialize();

            this._initSubMeshShapesWeights();

            this._watchMorphInMesh();

            this._onMeshChanged(old);

            this._updateModels();

            if (this.enabledInHierarchy) {
              this._attachToScene();
            }

            this._updateCastShadow();

            this._updateReceiveShadow();

            this._updateUseLightProbe();

            this._updateUseReflectionProbe();
          }
        }, {
          key: "model",
          get: function get() {
            return this._model;
          }
        }, {
          key: "enableMorph",
          get: function get() {
            return this._enableMorph;
          },
          set: function set(value) {
            this._enableMorph = value;
          }
        }]);

        return MeshRenderer;
      }(ModelRenderer), _class6$1.ShadowCastingMode = ModelShadowCastingMode, _class6$1.ShadowReceivingMode = ModelShadowReceivingMode, _temp2), (_initializer12$7 = applyDecoratedInitializer(_class5$a.prototype, "bakeSettings", [serializable$5], function () {
        return new ModelBakeSettings(this);
      }), _initializer13$7 = applyDecoratedInitializer(_class5$a.prototype, "_mesh", [serializable$5], function () {
        return null;
      }), _initializer14$5 = applyDecoratedInitializer(_class5$a.prototype, "_shadowCastingMode", [serializable$5], function () {
        return ModelShadowCastingMode.OFF;
      }), _initializer15$5 = applyDecoratedInitializer(_class5$a.prototype, "_shadowReceivingMode", [serializable$5], function () {
        return ModelShadowReceivingMode.ON;
      }), _initializer16$5 = applyDecoratedInitializer(_class5$a.prototype, "_shadowBias", [serializable$5], function () {
        return 0;
      }), _initializer17$5 = applyDecoratedInitializer(_class5$a.prototype, "_shadowNormalBias", [serializable$5], function () {
        return 0;
      }), _applyDecoratedDescriptor(_class5$a.prototype, "shadowBias", [_dec10$3], Object.getOwnPropertyDescriptor(_class5$a.prototype, "shadowBias"), _class5$a.prototype), _applyDecoratedDescriptor(_class5$a.prototype, "shadowNormalBias", [_dec11$3], Object.getOwnPropertyDescriptor(_class5$a.prototype, "shadowNormalBias"), _class5$a.prototype), _applyDecoratedDescriptor(_class5$a.prototype, "shadowCastingMode", [_dec12$3], Object.getOwnPropertyDescriptor(_class5$a.prototype, "shadowCastingMode"), _class5$a.prototype), _applyDecoratedDescriptor(_class5$a.prototype, "receiveShadow", [_dec13$3], Object.getOwnPropertyDescriptor(_class5$a.prototype, "receiveShadow"), _class5$a.prototype), _applyDecoratedDescriptor(_class5$a.prototype, "mesh", [_dec14$3], Object.getOwnPropertyDescriptor(_class5$a.prototype, "mesh"), _class5$a.prototype), _initializer18$4 = applyDecoratedInitializer(_class5$a.prototype, "_enableMorph", [serializable$5], function () {
        return true;
      })), _class5$a)) || _class4$a) || _class4$a);

      var Counter = function () {
        function Counter(id, opts, now) {
          this._opts = void 0;
          this._total = 0;
          this._value = 0;
          this._averageValue = 0;
          this._accumValue = 0;
          this._accumSamples = 0;
          this._id = id;
          this._opts = opts;
          this._accumStart = now;
        }

        var _proto = Counter.prototype;

        _proto.sample = function sample(now) {
          this._average(this._value, now);
        };

        _proto.human = function human() {
          var _this$_opts = this._opts,
              average = _this$_opts.average,
              isInteger = _this$_opts.isInteger;
          var v = average ? this._averageValue : this._value;
          return isInteger ? Math.round(v) : Math.round(v * 100) / 100;
        };

        _proto.alarm = function alarm() {
          return this._opts.below && this._value < this._opts.below || this._opts.over && this._value > this._opts.over;
        };

        _proto._average = function _average(v, now) {
          if (now === void 0) {
            now = 0;
          }

          if (this._opts.average) {
            this._accumValue += v;
            ++this._accumSamples;
            var t = now;

            if (t - this._accumStart >= this._opts.average) {
              this._averageValue = this._accumValue / this._accumSamples;
              this._accumValue = 0;
              this._accumStart = t;
              this._accumSamples = 0;
            }
          }
        };

        _createClass(Counter, [{
          key: "value",
          get: function get() {
            return this._value;
          },
          set: function set(val) {
            this._value = val;
          }
        }]);

        return Counter;
      }();

      var _dec$1r, _class$1u;
      var PerfCounter = (_dec$1r = ccclass('cc.PerfCounter'), _dec$1r(_class$1u = function (_Counter) {
        _inheritsLoose(PerfCounter, _Counter);

        function PerfCounter(id, opts, now) {
          var _this;

          _this = _Counter.call(this, id, opts, now) || this;
          _this._time = now;
          return _this;
        }

        var _proto = PerfCounter.prototype;

        _proto.start = function start(now) {
          if (now === void 0) {
            now = 0;
          }

          this._time = now;
        };

        _proto.end = function end(now) {
          if (now === void 0) {
            now = 0;
          }

          this._value = now - this._time;

          this._average(this._value);
        };

        _proto.tick = function tick() {
          this.end();
          this.start();
        };

        _proto.frame = function frame(now) {
          var t = now;
          var e = t - this._time;
          this._total++;
          var avg = this._opts.average || 1000;

          if (e > avg) {
            this._value = this._total * 1000 / e;
            this._total = 0;
            this._time = t;

            this._average(this._value);
          }
        };

        return PerfCounter;
      }(Counter)) || _class$1u);

      var _characters = '0123456789. ';
      var _average = 500;
      var _string2offset = {
        0: 0,
        1: 1,
        2: 2,
        3: 3,
        4: 4,
        5: 5,
        6: 6,
        7: 7,
        8: 8,
        9: 9,
        '.': 10
      };
      var _profileInfo = {
        fps: {
          desc: "Framerate (FPS)",
          below: 30,
          average: _average,
          isInteger: true
        },
        draws: {
          desc: 'Draw call',
          isInteger: true
        },
        frame: {
          desc: 'Frame time (ms)',
          min: 0,
          max: 50,
          average: _average
        },
        instances: {
          desc: 'Instance Count',
          isInteger: true
        },
        tricount: {
          desc: 'Triangle',
          isInteger: true
        },
        logic: {
          desc: 'Game Logic (ms)',
          min: 0,
          max: 50,
          average: _average,
          color: '#080'
        },
        physics: {
          desc: 'Physics (ms)',
          min: 0,
          max: 50,
          average: _average
        },
        render: {
          desc: 'Renderer (ms)',
          min: 0,
          max: 50,
          average: _average,
          color: '#f90'
        },
        present: {
          desc: 'Present (ms)',
          min: 0,
          max: 50,
          average: _average,
          color: '#f90'
        },
        textureMemory: {
          desc: 'GFX Texture Mem(M)'
        },
        bufferMemory: {
          desc: 'GFX Buffer Mem(M)'
        }
      };
      var _constants = {
        fontSize: 23,
        quadHeight: 0.4,
        segmentsPerLine: 8,
        textureWidth: 280,
        textureHeight: 280
      };
      var Profiler = exports('Profiler', function (_System) {
        _inheritsLoose(Profiler, _System);

        function Profiler() {
          var _this;

          _this = _System.call(this) || this;
          _this._stats = null;
          _this._showFPS = false;
          _this._rootNode = null;
          _this._device = null;
          _this._swapchain = null;
          _this._meshRenderer = null;
          _this._canvas = null;
          _this._ctx = null;
          _this._texture = null;
          _this._region = new BufferTextureCopy();
          _this._canvasArr = [];
          _this._regionArr = [_this._region];
          _this.digitsData = null;
          _this.offsetData = null;
          _this.pass = null;
          _this._canvasDone = false;
          _this._statsDone = false;
          _this._inited = false;
          _this._lineHeight = _constants.textureHeight / (Object.keys(_profileInfo).length + 1);
          _this._wordHeight = 0;
          _this._eachNumWidth = 0;
          _this._totalLines = 0;
          _this.lastTime = 0;

          {
            _this._canvas = ccwindow.document.createElement('canvas');
            _this._ctx = _this._canvas.getContext('2d');

            _this._canvasArr.push(_this._canvas);
          }

          return _this;
        }

        var _proto = Profiler.prototype;

        _proto.init = function init() {
          var showFPS = !!settings.querySettings(Settings.Category.PROFILING, 'showFPS');

          if (showFPS) {
            this.showStats();
          } else {
            this.hideStats();
          }
        };

        _proto.isShowingStats = function isShowingStats() {
          return this._showFPS;
        };

        _proto.hideStats = function hideStats() {
          if (this._showFPS) {
            if (this._rootNode) {
              this._rootNode.active = false;
            }

            legacyCC.director.off(legacyCC.Director.EVENT_BEFORE_UPDATE, this.beforeUpdate, this);
            legacyCC.director.off(legacyCC.Director.EVENT_AFTER_UPDATE, this.afterUpdate, this);
            legacyCC.director.off(legacyCC.Director.EVENT_BEFORE_PHYSICS, this.beforePhysics, this);
            legacyCC.director.off(legacyCC.Director.EVENT_AFTER_PHYSICS, this.afterPhysics, this);
            legacyCC.director.off(legacyCC.Director.EVENT_BEFORE_DRAW, this.beforeDraw, this);
            legacyCC.director.off(legacyCC.Director.EVENT_AFTER_RENDER, this.afterRender, this);
            legacyCC.director.off(legacyCC.Director.EVENT_AFTER_DRAW, this.afterPresent, this);
            this._showFPS = false;
            director.root.pipeline.profiler = null;
            legacyCC.game.config.showFPS = false;
          }
        };

        _proto.showStats = function showStats() {
          if (!this._showFPS) {
            if (!this._device) {
              var root = legacyCC.director.root;
              this._device = deviceManager.gfxDevice;
              this._swapchain = root.mainWindow.swapchain;
            }

            this.generateCanvas();
            this.generateStats();
            legacyCC.game.once(legacyCC.Game.EVENT_ENGINE_INITED, this.generateNode, this);
            legacyCC.game.on(legacyCC.Game.EVENT_RESTART, this.generateNode, this);

            if (this._rootNode) {
              this._rootNode.active = true;
            }

            legacyCC.director.on(legacyCC.Director.EVENT_BEFORE_UPDATE, this.beforeUpdate, this);
            legacyCC.director.on(legacyCC.Director.EVENT_AFTER_UPDATE, this.afterUpdate, this);
            legacyCC.director.on(legacyCC.Director.EVENT_BEFORE_PHYSICS, this.beforePhysics, this);
            legacyCC.director.on(legacyCC.Director.EVENT_AFTER_PHYSICS, this.afterPhysics, this);
            legacyCC.director.on(legacyCC.Director.EVENT_BEFORE_DRAW, this.beforeDraw, this);
            legacyCC.director.on(legacyCC.Director.EVENT_AFTER_RENDER, this.afterRender, this);
            legacyCC.director.on(legacyCC.Director.EVENT_AFTER_DRAW, this.afterPresent, this);
            this._showFPS = true;
            this._canvasDone = true;
            this._statsDone = true;
            legacyCC.game.config.showFPS = true;
          }
        };

        _proto.generateCanvas = function generateCanvas() {
          if (this._canvasDone) {
            return;
          }

          var textureWidth = _constants.textureWidth,
              textureHeight = _constants.textureHeight;

          if (!this._ctx || !this._canvas) {
            return;
          }

          this._canvas.width = textureWidth;
          this._canvas.height = textureHeight;
          this._canvas.style.width = "" + this._canvas.width;
          this._canvas.style.height = "" + this._canvas.height;
          this._ctx.font = _constants.fontSize + "px Arial";
          this._ctx.textBaseline = 'top';
          this._ctx.fillStyle = '#fff';
          this._texture = this._device.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.SAMPLED | TextureUsageBit.TRANSFER_DST, Format.RGBA8, textureWidth, textureHeight));
          this._region.texExtent.width = textureWidth;
          this._region.texExtent.height = textureHeight;
        };

        _proto.generateStats = function generateStats() {
          if (this._statsDone || !this._ctx || !this._canvas) {
            return;
          }

          this._stats = null;
          var now = performance.now();
          this._ctx.textAlign = 'left';
          var i = 0;

          for (var id in _profileInfo) {
            var element = _profileInfo[id];

            this._ctx.fillText(element.desc, 0, i * this._lineHeight);

            element.counter = new PerfCounter(id, element, now);
            i++;
          }

          this._totalLines = i;
          this._wordHeight = this._totalLines * this._lineHeight / this._canvas.height;

          for (var j = 0; j < _characters.length; ++j) {
            var offset = this._ctx.measureText(_characters[j]).width;

            this._eachNumWidth = Math.max(this._eachNumWidth, offset);
          }

          for (var _j = 0; _j < _characters.length; ++_j) {
            this._ctx.fillText(_characters[_j], _j * this._eachNumWidth, this._totalLines * this._lineHeight);
          }

          this._eachNumWidth /= this._canvas.width;
          this._stats = _profileInfo;
          this._canvasArr[0] = this._canvas;

          this._device.copyTexImagesToTexture(this._canvasArr, this._texture, this._regionArr);
        };

        _proto.generateNode = function generateNode() {
          if (this._rootNode && this._rootNode.isValid) {
            return;
          }

          this._rootNode = new Node$1('PROFILER_NODE');
          this._rootNode._objFlags = legacyCC.Object.Flags.DontSave | legacyCC.Object.Flags.HideInHierarchy;
          legacyCC.game.addPersistRootNode(this._rootNode);
          var managerNode = new Node$1('Profiler_Root');
          managerNode.parent = this._rootNode;
          var height = _constants.quadHeight;
          var rowHeight = height / this._totalLines;
          var lWidth = height / this._wordHeight;
          var scale = rowHeight / _constants.fontSize;
          var columnWidth = this._eachNumWidth * this._canvas.width * scale;
          var vertexPos = [0, height, 0, lWidth, height, 0, lWidth, 0, 0, 0, 0, 0];
          var vertexindices = [0, 2, 1, 0, 3, 2];
          var vertexUV = [0, 0, -1, 0, 1, 0, -1, 0, 1, this._wordHeight, -1, 0, 0, this._wordHeight, -1, 0];
          var offset = 0;

          for (var i = 0; i < this._totalLines; i++) {
            for (var j = 0; j < _constants.segmentsPerLine; j++) {
              vertexPos.push(lWidth + j * columnWidth, height - i * rowHeight, 0);
              vertexPos.push(lWidth + (j + 1) * columnWidth, height - i * rowHeight, 0);
              vertexPos.push(lWidth + (j + 1) * columnWidth, height - (i + 1) * rowHeight, 0);
              vertexPos.push(lWidth + j * columnWidth, height - (i + 1) * rowHeight, 0);
              offset = (i * _constants.segmentsPerLine + j + 1) * 4;
              vertexindices.push(0 + offset, 2 + offset, 1 + offset, 0 + offset, 3 + offset, 2 + offset);
              var idx = i * _constants.segmentsPerLine + j;
              var z = Math.floor(idx / 4);
              var w = idx - z * 4;
              vertexUV.push(0, this._wordHeight, z, w);
              vertexUV.push(this._eachNumWidth, this._wordHeight, z, w);
              vertexUV.push(this._eachNumWidth, 1, z, w);
              vertexUV.push(0, 1, z, w);
            }
          }

          this._meshRenderer = managerNode.addComponent(MeshRenderer);
          this._meshRenderer.mesh = _createMesh({
            positions: vertexPos,
            indices: vertexindices,
            colors: vertexUV
          });

          var _material = new Material();

          _material.initialize({
            effectName: 'util/profiler'
          });

          var pass = this.pass = _material.passes[0];
          var hTexture = pass.getBinding('mainTexture');
          var bDigits = pass.getBinding('digits');
          var bOffset = pass.getBinding('offset');
          pass.bindTexture(hTexture, this._texture);
          this.digitsData = pass.blocks[bDigits];
          this.offsetData = pass.blocks[bOffset];
          this.offsetData[3] = -1;
          this._meshRenderer.material = _material;
          this._meshRenderer.node.layer = Layers.Enum.PROFILER;
          this._inited = true;
        };

        _proto.beforeUpdate = function beforeUpdate() {
          if (!this._stats) {
            return;
          }

          var now = performance.now();

          this._stats.frame.counter.start(now);

          this._stats.logic.counter.start(now);
        };

        _proto.afterUpdate = function afterUpdate() {
          if (!this._stats) {
            return;
          }

          var now = performance.now();

          if (legacyCC.director.isPaused()) {
            this._stats.frame.counter.start(now);
          } else {
            this._stats.logic.counter.end(now);
          }
        };

        _proto.beforePhysics = function beforePhysics() {
          if (!this._stats) {
            return;
          }

          var now = performance.now();

          this._stats.physics.counter.start(now);
        };

        _proto.afterPhysics = function afterPhysics() {
          if (!this._stats) {
            return;
          }

          var now = performance.now();

          this._stats.physics.counter.end(now);
        };

        _proto.beforeDraw = function beforeDraw() {
          if (!this._stats || !this._inited) {
            return;
          }

          var surfaceTransform = this._swapchain.surfaceTransform;
          var clipSpaceSignY = this._device.capabilities.clipSpaceSignY;

          if (surfaceTransform !== this.offsetData[3]) {
            var preTransform = preTransforms[surfaceTransform];
            var x = -0.9;
            var y = -0.9 * clipSpaceSignY;

            if (sys.isXR) {
              x = -0.5;
              y = -0.5 * clipSpaceSignY;
            }

            this.offsetData[0] = x * preTransform[0] + y * preTransform[2];
            this.offsetData[1] = x * preTransform[1] + y * preTransform[3];
            this.offsetData[2] = this._eachNumWidth;
            this.offsetData[3] = surfaceTransform;
          }

          this.pass._rootBufferDirty = true;

          if (this._meshRenderer.model) {
            director.root.pipeline.profiler = this._meshRenderer.model;
          } else {
            director.root.pipeline.profiler = null;
          }

          var now = performance.now();

          this._stats.render.counter.start(now);
        };

        _proto.afterRender = function afterRender() {
          if (!this._stats || !this._inited) {
            return;
          }

          var now = performance.now();

          this._stats.render.counter.end(now);

          this._stats.present.counter.start(now);
        };

        _proto.afterPresent = function afterPresent() {
          if (!this._stats || !this._inited) {
            return;
          }

          var now = performance.now();

          this._stats.frame.counter.end(now);

          this._stats.fps.counter.frame(now);

          this._stats.present.counter.end(now);

          if (now - this.lastTime < _average) {
            return;
          }

          this.lastTime = now;
          var device = this._device;
          this._stats.draws.counter.value = device.numDrawCalls;
          this._stats.instances.counter.value = device.numInstances;
          this._stats.bufferMemory.counter.value = device.memoryStatus.bufferSize / (1024 * 1024);
          this._stats.textureMemory.counter.value = device.memoryStatus.textureSize / (1024 * 1024);
          this._stats.tricount.counter.value = device.numTris;
          var i = 0;
          var view = this.digitsData;

          for (var id in this._stats) {
            var stat = this._stats[id];
            stat.counter.sample(now);
            var result = stat.counter.human().toString();

            for (var j = _constants.segmentsPerLine - 1; j >= 0; j--) {
              var index = i * _constants.segmentsPerLine + j;
              var character = result[result.length - (_constants.segmentsPerLine - j)];
              var offset = _string2offset[character];

              if (offset === undefined) {
                offset = 11;
              }

              view[index] = offset;
            }

            i++;
          }
        };

        return Profiler;
      }(System));
      var profiler = exports('profiler', new Profiler());
      director.registerSystem('profiler', profiler, 0);
      legacyCC.profiler = profiler;

      var Action = function () {
        function Action() {
          this.originalTarget = null;
          this.target = null;
          this.tag = Action.TAG_INVALID;
        }

        var _proto = Action.prototype;

        _proto.clone = function clone() {
          var action = new Action();
          action.originalTarget = null;
          action.target = null;
          action.tag = this.tag;
          return action;
        };

        _proto.isDone = function isDone() {
          return true;
        };

        _proto.startWithTarget = function startWithTarget(target) {
          this.originalTarget = target;
          this.target = target;
        };

        _proto.stop = function stop() {
          this.target = null;
        };

        _proto.step = function step(dt) {
          logID(1006);
        };

        _proto.update = function update(dt) {
          logID(1007);
        };

        _proto.getTarget = function getTarget() {
          return this.target;
        };

        _proto.setTarget = function setTarget(target) {
          this.target = target;
        };

        _proto.getOriginalTarget = function getOriginalTarget() {
          return this.originalTarget;
        };

        _proto.setOriginalTarget = function setOriginalTarget(originalTarget) {
          this.originalTarget = originalTarget;
        };

        _proto.getTag = function getTag() {
          return this.tag;
        };

        _proto.setTag = function setTag(tag) {
          this.tag = tag;
        };

        _proto.reverse = function reverse() {
          logID(1008);
          return null;
        };

        _proto.retain = function retain() {};

        _proto.release = function release() {};

        return Action;
      }();
      Action.TAG_INVALID = -1;
      var FiniteTimeAction = function (_Action) {
        _inheritsLoose(FiniteTimeAction, _Action);

        function FiniteTimeAction() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Action.call.apply(_Action, [this].concat(args)) || this;
          _this._duration = 0;
          _this._timesForRepeat = 1;
          return _this;
        }

        var _proto2 = FiniteTimeAction.prototype;

        _proto2.getDuration = function getDuration() {
          return this._duration * (this._timesForRepeat || 1);
        };

        _proto2.setDuration = function setDuration(duration) {
          this._duration = duration;
        };

        _proto2.clone = function clone() {
          return new FiniteTimeAction();
        };

        return FiniteTimeAction;
      }(Action);
      var Speed = function (_Action2) {
        _inheritsLoose(Speed, _Action2);

        function Speed(action, speed) {
          var _this2;

          if (speed === void 0) {
            speed = 1;
          }

          _this2 = _Action2.call(this) || this;
          _this2._speed = 0;
          _this2._innerAction = null;
          action && _this2.initWithAction(action, speed);
          return _this2;
        }

        var _proto3 = Speed.prototype;

        _proto3.getSpeed = function getSpeed() {
          return this._speed;
        };

        _proto3.setSpeed = function setSpeed(speed) {
          this._speed = speed;
        };

        _proto3.initWithAction = function initWithAction(action, speed) {
          if (!action) {
            errorID(1021);
            return false;
          }

          this._innerAction = action;
          this._speed = speed;
          return true;
        };

        _proto3.clone = function clone() {
          var action = new Speed();
          action.initWithAction(this._innerAction.clone(), this._speed);
          return action;
        };

        _proto3.startWithTarget = function startWithTarget(target) {
          Action.prototype.startWithTarget.call(this, target);

          this._innerAction.startWithTarget(target);
        };

        _proto3.stop = function stop() {
          this._innerAction.stop();

          Action.prototype.stop.call(this);
        };

        _proto3.step = function step(dt) {
          this._innerAction.step(dt * this._speed);
        };

        _proto3.isDone = function isDone() {
          return this._innerAction.isDone();
        };

        _proto3.reverse = function reverse() {
          return new Speed(this._innerAction.reverse(), this._speed);
        };

        _proto3.setInnerAction = function setInnerAction(action) {
          if (this._innerAction !== action) {
            this._innerAction = action;
          }
        };

        _proto3.getInnerAction = function getInnerAction() {
          return this._innerAction;
        };

        return Speed;
      }(Action);

      var ID_COUNTER = 0;

      var HashElement = function HashElement() {
        this.actions = [];
        this.target = null;
        this.actionIndex = 0;
        this.currentAction = null;
        this.paused = false;
        this.lock = false;
      };

      var ActionManager = function () {
        function ActionManager() {
          this._hashTargets = new Map();
          this._arrayTargets = [];
          this._elementPool = [];
        }

        var _proto = ActionManager.prototype;

        _proto._searchElementByTarget = function _searchElementByTarget(arr, target) {
          for (var k = 0; k < arr.length; k++) {
            if (target === arr[k].target) return arr[k];
          }

          return null;
        };

        _proto._getElement = function _getElement(target, paused) {
          var element = this._elementPool.pop();

          if (!element) {
            element = new HashElement();
          }

          element.target = target;
          element.paused = !!paused;
          return element;
        };

        _proto._putElement = function _putElement(element) {
          element.actions.length = 0;
          element.actionIndex = 0;
          element.currentAction = null;
          element.paused = false;
          element.target = null;
          element.lock = false;

          this._elementPool.push(element);
        };

        _proto.addAction = function addAction(action, target, paused) {
          if (!action || !target) {
            errorID(1000);
            return;
          }

          if (target.uuid == null) {
            target.uuid = "_TWEEN_UUID_" + ID_COUNTER++;
          }

          var element = this._hashTargets.get(target);

          if (!element) {
            element = this._getElement(target, paused);

            this._hashTargets.set(target, element);

            this._arrayTargets.push(element);
          } else if (!element.actions) {
            element.actions = [];
          }

          element.target = target;
          element.actions.push(action);
          action.startWithTarget(target);
        };

        _proto.removeAllActions = function removeAllActions() {
          var locTargets = this._arrayTargets;

          for (var i = 0; i < locTargets.length; i++) {
            var element = locTargets[i];
            if (element) this._putElement(element);
          }

          this._arrayTargets.length = 0;
          this._hashTargets = new Map();
        };

        _proto.removeAllActionsFromTarget = function removeAllActionsFromTarget(target) {
          if (target == null) return;

          var element = this._hashTargets.get(target);

          if (element) {
            element.actions.length = 0;

            this._deleteHashElement(element);
          }
        };

        _proto.removeAction = function removeAction(action) {
          if (action == null) return;
          var target = action.getOriginalTarget();

          var element = this._hashTargets.get(target);

          if (element) {
            for (var i = 0; i < element.actions.length; i++) {
              if (element.actions[i] === action) {
                element.actions.splice(i, 1);
                if (element.actionIndex >= i) element.actionIndex--;
                break;
              }
            }
          }
        };

        _proto._removeActionByTag = function _removeActionByTag(tag, element, target) {
          for (var i = 0, l = element.actions.length; i < l; ++i) {
            var action = element.actions[i];

            if (action && action.getTag() === tag) {
              if (target && action.getOriginalTarget() !== target) {
                continue;
              }

              this._removeActionAtIndex(i, element);

              break;
            }
          }
        };

        _proto._removeAllActionsByTag = function _removeAllActionsByTag(tag, element, target) {
          for (var i = element.actions.length - 1; i >= 0; --i) {
            var action = element.actions[i];

            if (action && action.getTag() === tag) {
              if (target && action.getOriginalTarget() !== target) {
                continue;
              }

              this._removeActionAtIndex(i, element);
            }
          }
        };

        _proto.removeActionByTag = function removeActionByTag(tag, target) {
          var _this = this;

          if (tag === Action.TAG_INVALID) logID(1002);
          var hashTargets = this._hashTargets;

          if (target) {
            var element = hashTargets.get(target);

            if (element) {
              this._removeActionByTag(tag, element, target);
            }
          } else {
            hashTargets.forEach(function (element) {
              _this._removeActionByTag(tag, element);
            });
          }
        };

        _proto.removeAllActionsByTag = function removeAllActionsByTag(tag, target) {
          var _this2 = this;

          if (tag === Action.TAG_INVALID) logID(1002);
          var hashTargets = this._hashTargets;

          if (target) {
            var element = hashTargets.get(target);

            if (element) {
              this._removeAllActionsByTag(tag, element, target);
            }
          } else {
            hashTargets.forEach(function (element) {
              _this2._removeAllActionsByTag(tag, element);
            });
          }
        };

        _proto.getActionByTag = function getActionByTag(tag, target) {
          if (tag === Action.TAG_INVALID) logID(1004);

          var element = this._hashTargets.get(target);

          if (element) {
            if (element.actions != null) {
              for (var i = 0; i < element.actions.length; ++i) {
                var action = element.actions[i];

                if (action && action.getTag() === tag) {
                  return action;
                }
              }
            }

            logID(1005, tag);
          }

          return null;
        };

        _proto.getNumberOfRunningActionsInTarget = function getNumberOfRunningActionsInTarget(target) {
          var element = this._hashTargets.get(target);

          if (element) {
            return element.actions ? element.actions.length : 0;
          }

          return 0;
        };

        _proto.pauseTarget = function pauseTarget(target) {
          var element = this._hashTargets.get(target);

          if (element) element.paused = true;
        };

        _proto.resumeTarget = function resumeTarget(target) {
          var element = this._hashTargets.get(target);

          if (element) element.paused = false;
        };

        _proto.pauseAllRunningActions = function pauseAllRunningActions() {
          var idsWithActions = [];
          var locTargets = this._arrayTargets;

          for (var i = 0; i < locTargets.length; i++) {
            var element = locTargets[i];

            if (element && !element.paused) {
              element.paused = true;
              idsWithActions.push(element.target);
            }
          }

          return idsWithActions;
        };

        _proto.resumeTargets = function resumeTargets(targetsToResume) {
          if (!targetsToResume) return;

          for (var i = 0; i < targetsToResume.length; i++) {
            if (targetsToResume[i]) this.resumeTarget(targetsToResume[i]);
          }
        };

        _proto.pauseTargets = function pauseTargets(targetsToPause) {
          if (!targetsToPause) return;

          for (var i = 0; i < targetsToPause.length; i++) {
            if (targetsToPause[i]) this.pauseTarget(targetsToPause[i]);
          }
        };

        _proto.purgeSharedManager = function purgeSharedManager() {
          legacyCC.director.getScheduler().unscheduleUpdate(this);
        };

        _proto._removeActionAtIndex = function _removeActionAtIndex(index, element) {
          var action = element.actions[index];
          element.actions.splice(index, 1);
          if (element.actionIndex >= index) element.actionIndex--;

          if (element.actions.length === 0) {
            this._deleteHashElement(element);
          }
        };

        _proto._deleteHashElement = function _deleteHashElement(element) {
          var ret = false;

          if (element && !element.lock) {
            if (this._hashTargets.get(element.target)) {
              this._hashTargets["delete"](element.target);

              var targets = this._arrayTargets;

              for (var i = 0, l = targets.length; i < l; i++) {
                if (targets[i] === element) {
                  targets.splice(i, 1);
                  break;
                }
              }

              this._putElement(element);

              ret = true;
            }
          }

          return ret;
        };

        _proto.update = function update(dt) {
          var locTargets = this._arrayTargets;
          var locCurrTarget;

          for (var elt = 0; elt < locTargets.length; elt++) {
            this._currentTarget = locTargets[elt];
            locCurrTarget = this._currentTarget;
            var target = locCurrTarget.target;

            if (isCCObject(target) && !target.isValid) {
              this.removeAllActionsFromTarget(target);
              elt--;
              continue;
            }

            if (!locCurrTarget.paused && locCurrTarget.actions) {
              locCurrTarget.lock = true;

              for (locCurrTarget.actionIndex = 0; locCurrTarget.actionIndex < locCurrTarget.actions.length; locCurrTarget.actionIndex++) {
                locCurrTarget.currentAction = locCurrTarget.actions[locCurrTarget.actionIndex];
                if (!locCurrTarget.currentAction) continue;
                locCurrTarget.currentAction.step(dt * (locCurrTarget.currentAction._speedMethod ? locCurrTarget.currentAction._speed : 1));

                if (locCurrTarget.currentAction && locCurrTarget.currentAction.isDone()) {
                  locCurrTarget.currentAction.stop();
                  var action = locCurrTarget.currentAction;
                  locCurrTarget.currentAction = null;
                  this.removeAction(action);
                }

                locCurrTarget.currentAction = null;
              }

              locCurrTarget.lock = false;
            }

            if (locCurrTarget.actions.length === 0) {
              if (this._deleteHashElement(locCurrTarget)) {
                elt--;
              }
            }
          }
        };

        return ActionManager;
      }();

      var TweenSystem = exports('TweenSystem', function (_System) {
        _inheritsLoose(TweenSystem, _System);

        function TweenSystem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _System.call.apply(_System, [this].concat(args)) || this;
          _this.actionMgr = new ActionManager();
          return _this;
        }

        var _proto = TweenSystem.prototype;

        _proto.update = function update(dt) {
          {
            this.actionMgr.update(dt);
          }
        };

        _createClass(TweenSystem, [{
          key: "ActionManager",
          get: function get() {
            return this.actionMgr;
          }
        }]);

        return TweenSystem;
      }(System));
      TweenSystem.ID = 'TWEEN';
      TweenSystem.instance = void 0;
      director.on(Director.EVENT_INIT, function () {
        var sys = new TweenSystem();
        TweenSystem.instance = sys;
        director.registerSystem(TweenSystem.ID, sys, System.Priority.MEDIUM);
      });

      var ActionInstant = function (_FiniteTimeAction) {
        _inheritsLoose(ActionInstant, _FiniteTimeAction);

        function ActionInstant() {
          return _FiniteTimeAction.apply(this, arguments) || this;
        }

        var _proto = ActionInstant.prototype;

        _proto.isDone = function isDone() {
          return true;
        };

        _proto.step = function step(dt) {
          this.update(1);
        };

        _proto.update = function update(dt) {};

        _proto.reverse = function reverse() {
          return this.clone();
        };

        _proto.clone = function clone() {
          return new ActionInstant();
        };

        return ActionInstant;
      }(FiniteTimeAction);
      var Show = function (_ActionInstant) {
        _inheritsLoose(Show, _ActionInstant);

        function Show() {
          return _ActionInstant.apply(this, arguments) || this;
        }

        var _proto2 = Show.prototype;

        _proto2.update = function update(dt) {
          var _renderComps = this.target.getComponentsInChildren(Renderer);

          for (var i = 0; i < _renderComps.length; ++i) {
            var render = _renderComps[i];
            render.enabled = true;
          }
        };

        _proto2.reverse = function reverse() {
          return new Hide();
        };

        _proto2.clone = function clone() {
          return new Show();
        };

        return Show;
      }(ActionInstant);
      function show() {
        return new Show();
      }
      var Hide = function (_ActionInstant2) {
        _inheritsLoose(Hide, _ActionInstant2);

        function Hide() {
          return _ActionInstant2.apply(this, arguments) || this;
        }

        var _proto3 = Hide.prototype;

        _proto3.update = function update(dt) {
          var _renderComps = this.target.getComponentsInChildren(Renderer);

          for (var i = 0; i < _renderComps.length; ++i) {
            var render = _renderComps[i];
            render.enabled = false;
          }
        };

        _proto3.reverse = function reverse() {
          return new Show();
        };

        _proto3.clone = function clone() {
          return new Hide();
        };

        return Hide;
      }(ActionInstant);
      function hide() {
        return new Hide();
      }
      var ToggleVisibility = function (_ActionInstant3) {
        _inheritsLoose(ToggleVisibility, _ActionInstant3);

        function ToggleVisibility() {
          return _ActionInstant3.apply(this, arguments) || this;
        }

        var _proto4 = ToggleVisibility.prototype;

        _proto4.update = function update(dt) {
          var _renderComps = this.target.getComponentsInChildren(Renderer);

          for (var i = 0; i < _renderComps.length; ++i) {
            var render = _renderComps[i];
            render.enabled = !render.enabled;
          }
        };

        _proto4.reverse = function reverse() {
          return new ToggleVisibility();
        };

        _proto4.clone = function clone() {
          return new ToggleVisibility();
        };

        return ToggleVisibility;
      }(ActionInstant);
      var RemoveSelf = function (_ActionInstant4) {
        _inheritsLoose(RemoveSelf, _ActionInstant4);

        function RemoveSelf(isNeedCleanUp) {
          var _this;

          _this = _ActionInstant4.call(this) || this;
          _this._isNeedCleanUp = true;
          isNeedCleanUp !== undefined && _this.init(isNeedCleanUp);
          return _this;
        }

        var _proto5 = RemoveSelf.prototype;

        _proto5.update = function update(dt) {
          this.target.removeFromParent();

          if (this._isNeedCleanUp) {
            this.target.destroy();
          }
        };

        _proto5.init = function init(isNeedCleanUp) {
          this._isNeedCleanUp = isNeedCleanUp;
          return true;
        };

        _proto5.reverse = function reverse() {
          return new RemoveSelf(this._isNeedCleanUp);
        };

        _proto5.clone = function clone() {
          return new RemoveSelf(this._isNeedCleanUp);
        };

        return RemoveSelf;
      }(ActionInstant);
      function removeSelf(isNeedCleanUp) {
        return new RemoveSelf(isNeedCleanUp);
      }
      var CallFunc = function (_ActionInstant5) {
        _inheritsLoose(CallFunc, _ActionInstant5);

        function CallFunc(selector, selectorTarget, data) {
          var _this2;

          _this2 = _ActionInstant5.call(this) || this;
          _this2._selectorTarget = null;
          _this2._function = null;
          _this2._data = null;

          _this2.initWithFunction(selector, selectorTarget, data);

          return _this2;
        }

        var _proto6 = CallFunc.prototype;

        _proto6.initWithFunction = function initWithFunction(selector, selectorTarget, data) {
          if (selector) {
            this._function = selector;
          }

          if (selectorTarget) {
            this._selectorTarget = selectorTarget;
          }

          if (data !== undefined) {
            this._data = data;
          }

          return true;
        };

        _proto6.execute = function execute() {
          if (this._function) {
            this._function.call(this._selectorTarget, this.target, this._data);
          }
        };

        _proto6.update = function update(dt) {
          this.execute();
        };

        _proto6.getTargetCallback = function getTargetCallback() {
          return this._selectorTarget;
        };

        _proto6.setTargetCallback = function setTargetCallback(sel) {
          if (sel !== this._selectorTarget) {
            if (this._selectorTarget) {
              this._selectorTarget = null;
            }

            this._selectorTarget = sel;
          }
        };

        _proto6.clone = function clone() {
          var action = new CallFunc();
          action.initWithFunction(this._function, this._selectorTarget, this._data);
          return action;
        };

        return CallFunc;
      }(ActionInstant);
      function callFunc(selector, selectorTarget, data) {
        return new CallFunc(selector, selectorTarget, data);
      }

      var ActionInterval = function (_FiniteTimeAction) {
        _inheritsLoose(ActionInterval, _FiniteTimeAction);

        function ActionInterval(d) {
          var _this;

          _this = _FiniteTimeAction.call(this) || this;
          _this.MAX_VALUE = 2;
          _this._elapsed = 0;
          _this._firstTick = false;
          _this._easeList = [];
          _this._speed = 1;
          _this._repeatForever = false;
          _this._repeatMethod = false;
          _this._speedMethod = false;

          if (d !== undefined && !isNaN(d)) {
            _this.initWithDuration(d);
          }

          return _this;
        }

        var _proto = ActionInterval.prototype;

        _proto.getElapsed = function getElapsed() {
          return this._elapsed;
        };

        _proto.initWithDuration = function initWithDuration(d) {
          this._duration = d === 0 ? macro.FLT_EPSILON : d;
          this._elapsed = 0;
          this._firstTick = true;
          return true;
        };

        _proto.isDone = function isDone() {
          return this._elapsed >= this._duration;
        };

        _proto._cloneDecoration = function _cloneDecoration(action) {
          action._repeatForever = this._repeatForever;
          action._speed = this._speed;
          action._timesForRepeat = this._timesForRepeat;
          action._easeList = this._easeList;
          action._speedMethod = this._speedMethod;
          action._repeatMethod = this._repeatMethod;
        };

        _proto._reverseEaseList = function _reverseEaseList(action) {
          if (this._easeList) {
            action._easeList = [];

            for (var i = 0; i < this._easeList.length; i++) {
              action._easeList.push(this._easeList[i]);
            }
          }
        };

        _proto.clone = function clone() {
          var action = new ActionInterval(this._duration);

          this._cloneDecoration(action);

          return action;
        };

        _proto.easing = function easing(easeObj) {
          if (this._easeList) this._easeList.length = 0;else this._easeList = [];

          for (var i = 0; i < arguments.length; i++) {
            this._easeList.push(arguments[i]);
          }

          return this;
        };

        _proto._computeEaseTime = function _computeEaseTime(dt) {
          return dt;
        };

        _proto.step = function step(dt) {
          if (this._firstTick) {
            this._firstTick = false;
            this._elapsed = 0;
          } else this._elapsed += dt;

          var t = this._elapsed / (this._duration > 0.0000001192092896 ? this._duration : 0.0000001192092896);
          t = t < 1 ? t : 1;
          this.update(t > 0 ? t : 0);

          if (this._repeatMethod && this._timesForRepeat > 1 && this.isDone()) {
            if (!this._repeatForever) {
              this._timesForRepeat--;
            }

            this.startWithTarget(this.target);
            this.step(this._elapsed - this._duration);
          }
        };

        _proto.startWithTarget = function startWithTarget(target) {
          Action.prototype.startWithTarget.call(this, target);
          this._elapsed = 0;
          this._firstTick = true;
        };

        _proto.reverse = function reverse() {
          logID(1010);
          return this;
        };

        _proto.setAmplitudeRate = function setAmplitudeRate(amp) {
          logID(1011);
        };

        _proto.getAmplitudeRate = function getAmplitudeRate() {
          logID(1012);
          return 0;
        };

        _proto.speed = function speed(_speed) {
          if (_speed <= 0) {
            logID(1013);
            return this;
          }

          this._speedMethod = true;
          this._speed *= _speed;
          return this;
        };

        _proto.getSpeed = function getSpeed() {
          return this._speed;
        };

        _proto.setSpeed = function setSpeed(speed) {
          this._speed = speed;
          return this;
        };

        _proto.repeat = function repeat(times) {
          times = Math.round(times);

          if (isNaN(times) || times < 1) {
            logID(1014);
            return this;
          }

          this._repeatMethod = true;
          this._timesForRepeat *= times;
          return this;
        };

        _proto.repeatForever = function repeatForever() {
          this._repeatMethod = true;
          this._timesForRepeat = this.MAX_VALUE;
          this._repeatForever = true;
          return this;
        };

        return ActionInterval;
      }(FiniteTimeAction);
      var Sequence = function (_ActionInterval) {
        _inheritsLoose(Sequence, _ActionInterval);

        function Sequence(tempArray) {
          var _this2;

          _this2 = _ActionInterval.call(this) || this;
          _this2._actions = [];
          _this2._split = 0;
          _this2._last = 0;
          _this2._reversed = false;
          var paramArray = tempArray instanceof Array ? tempArray : arguments;

          if (paramArray.length === 1) {
            errorID(1019);
            return _assertThisInitialized(_this2);
          }

          var last = paramArray.length - 1;
          if (last >= 0 && paramArray[last] == null) logID(1015);

          if (last >= 0) {
            var prev = paramArray[0];
            var action1;

            for (var i = 1; i < last; i++) {
              if (paramArray[i]) {
                action1 = prev;
                prev = Sequence._actionOneTwo(action1, paramArray[i]);
              }
            }

            _this2.initWithTwoActions(prev, paramArray[last]);
          }

          return _this2;
        }

        var _proto2 = Sequence.prototype;

        _proto2.initWithTwoActions = function initWithTwoActions(actionOne, actionTwo) {
          if (!actionOne || !actionTwo) {
            errorID(1025);
            return false;
          }

          var durationOne = actionOne._duration;
          var durationTwo = actionTwo._duration;
          durationOne *= actionOne._repeatMethod ? actionOne._timesForRepeat : 1;
          durationTwo *= actionTwo._repeatMethod ? actionTwo._timesForRepeat : 1;
          var d = durationOne + durationTwo;
          this.initWithDuration(d);
          this._actions[0] = actionOne;
          this._actions[1] = actionTwo;
          return true;
        };

        _proto2.clone = function clone() {
          var action = new Sequence();

          this._cloneDecoration(action);

          action.initWithTwoActions(this._actions[0].clone(), this._actions[1].clone());
          return action;
        };

        _proto2.startWithTarget = function startWithTarget(target) {
          ActionInterval.prototype.startWithTarget.call(this, target);
          this._split = this._actions[0]._duration / this._duration;
          this._split *= this._actions[0]._repeatMethod ? this._actions[0]._timesForRepeat : 1;
          this._last = -1;
        };

        _proto2.stop = function stop() {
          if (this._last !== -1) this._actions[this._last].stop();
          Action.prototype.stop.call(this);
        };

        _proto2.update = function update(dt) {
          var new_t;
          var found = 0;
          var locSplit = this._split;
          var locActions = this._actions;
          var locLast = this._last;
          var actionFound;
          dt = this._computeEaseTime(dt);

          if (dt < locSplit) {
            new_t = locSplit !== 0 ? dt / locSplit : 1;

            if (found === 0 && locLast === 1 && this._reversed) {
              locActions[1].update(0);
              locActions[1].stop();
            }
          } else {
            found = 1;
            new_t = locSplit === 1 ? 1 : (dt - locSplit) / (1 - locSplit);

            if (locLast === -1) {
              locActions[0].startWithTarget(this.target);
              locActions[0].update(1);
              locActions[0].stop();
            }

            if (locLast === 0) {
              locActions[0].update(1);
              locActions[0].stop();
            }
          }

          actionFound = locActions[found];
          if (locLast === found && actionFound.isDone()) return;
          if (locLast !== found) actionFound.startWithTarget(this.target);
          new_t *= actionFound._timesForRepeat;
          actionFound.update(new_t > 1 ? new_t % 1 : new_t);
          this._last = found;
        };

        _proto2.reverse = function reverse() {
          var action = Sequence._actionOneTwo(this._actions[1].reverse(), this._actions[0].reverse());

          this._cloneDecoration(action);

          this._reverseEaseList(action);

          action._reversed = true;
          return action;
        };

        return Sequence;
      }(ActionInterval);

      Sequence._actionOneTwo = function (actionOne, actionTwo) {
        var sequence = new Sequence();
        sequence.initWithTwoActions(actionOne, actionTwo);
        return sequence;
      };

      function sequence(tempArray) {
        var paramArray = tempArray instanceof Array ? tempArray : arguments;

        if (paramArray.length === 1) {
          errorID(1019);
          return null;
        }

        var last = paramArray.length - 1;
        if (last >= 0 && paramArray[last] == null) logID(1015);
        var result = null;

        if (last >= 0) {
          result = paramArray[0];

          for (var i = 1; i <= last; i++) {
            if (paramArray[i]) {
              result = Sequence._actionOneTwo(result, paramArray[i]);
            }
          }
        }

        return result;
      }
      var Repeat = function (_ActionInterval2) {
        _inheritsLoose(Repeat, _ActionInterval2);

        function Repeat(action, times) {
          var _this3;

          _this3 = _ActionInterval2.call(this) || this;
          _this3._times = 0;
          _this3._total = 0;
          _this3._nextDt = 0;
          _this3._actionInstant = false;
          _this3._innerAction = null;
          times !== undefined && _this3.initWithAction(action, times);
          return _this3;
        }

        var _proto3 = Repeat.prototype;

        _proto3.initWithAction = function initWithAction(action, times) {
          var duration = action._duration * times;

          if (this.initWithDuration(duration)) {
            this._times = times;
            this._innerAction = action;

            if (action instanceof ActionInstant) {
              this._actionInstant = true;
              this._times -= 1;
            }

            this._total = 0;
            return true;
          }

          return false;
        };

        _proto3.clone = function clone() {
          var action = new Repeat();

          this._cloneDecoration(action);

          action.initWithAction(this._innerAction.clone(), this._times);
          return action;
        };

        _proto3.startWithTarget = function startWithTarget(target) {
          this._total = 0;
          this._nextDt = this._innerAction._duration / this._duration;
          ActionInterval.prototype.startWithTarget.call(this, target);

          this._innerAction.startWithTarget(target);
        };

        _proto3.stop = function stop() {
          this._innerAction.stop();

          Action.prototype.stop.call(this);
        };

        _proto3.update = function update(dt) {
          dt = this._computeEaseTime(dt);
          var locInnerAction = this._innerAction;
          var locDuration = this._duration;
          var locTimes = this._times;
          var locNextDt = this._nextDt;

          if (dt >= locNextDt) {
            while (dt > locNextDt && this._total < locTimes) {
              locInnerAction.update(1);
              this._total++;
              locInnerAction.stop();
              locInnerAction.startWithTarget(this.target);
              locNextDt += locInnerAction._duration / locDuration;
              this._nextDt = locNextDt > 1 ? 1 : locNextDt;
            }

            if (dt >= 1.0 && this._total < locTimes) {
              locInnerAction.update(1);
              this._total++;
            }

            if (!this._actionInstant) {
              if (this._total === locTimes) {
                locInnerAction.stop();
              } else {
                locInnerAction.update(dt - (locNextDt - locInnerAction._duration / locDuration));
              }
            }
          } else {
            locInnerAction.update(dt * locTimes % 1.0);
          }
        };

        _proto3.isDone = function isDone() {
          return this._total === this._times;
        };

        _proto3.reverse = function reverse() {
          var action = new Repeat(this._innerAction.reverse(), this._times);

          this._cloneDecoration(action);

          this._reverseEaseList(action);

          return action;
        };

        _proto3.setInnerAction = function setInnerAction(action) {
          if (this._innerAction !== action) {
            this._innerAction = action;
          }
        };

        _proto3.getInnerAction = function getInnerAction() {
          return this._innerAction;
        };

        return Repeat;
      }(ActionInterval);
      function repeat$1(action, times) {
        return new Repeat(action, times);
      }
      var RepeatForever = function (_ActionInterval3) {
        _inheritsLoose(RepeatForever, _ActionInterval3);

        function RepeatForever(action) {
          var _this4;

          _this4 = _ActionInterval3.call(this) || this;
          _this4._innerAction = null;
          action && _this4.initWithAction(action);
          return _this4;
        }

        var _proto4 = RepeatForever.prototype;

        _proto4.initWithAction = function initWithAction(action) {
          if (!action) {
            errorID(1026);
            return false;
          }

          this._innerAction = action;
          return true;
        };

        _proto4.clone = function clone() {
          var action = new RepeatForever();

          this._cloneDecoration(action);

          action.initWithAction(this._innerAction.clone());
          return action;
        };

        _proto4.startWithTarget = function startWithTarget(target) {
          ActionInterval.prototype.startWithTarget.call(this, target);

          this._innerAction.startWithTarget(target);
        };

        _proto4.step = function step(dt) {
          var locInnerAction = this._innerAction;
          locInnerAction.step(dt);

          if (locInnerAction.isDone()) {
            locInnerAction.startWithTarget(this.target);
            locInnerAction.step(locInnerAction.getElapsed() - locInnerAction._duration);
          }
        };

        _proto4.isDone = function isDone() {
          return false;
        };

        _proto4.reverse = function reverse() {
          var action = new RepeatForever(this._innerAction.reverse());

          this._cloneDecoration(action);

          this._reverseEaseList(action);

          return action;
        };

        _proto4.setInnerAction = function setInnerAction(action) {
          if (this._innerAction !== action) {
            this._innerAction = action;
          }
        };

        _proto4.getInnerAction = function getInnerAction() {
          return this._innerAction;
        };

        return RepeatForever;
      }(ActionInterval);
      function repeatForever(action) {
        return new RepeatForever(action);
      }
      var Spawn = function (_ActionInterval4) {
        _inheritsLoose(Spawn, _ActionInterval4);

        function Spawn(tempArray) {
          var _this5;

          _this5 = _ActionInterval4.call(this) || this;
          _this5._one = null;
          _this5._two = null;
          var paramArray = tempArray instanceof Array ? tempArray : arguments;

          if (paramArray.length === 1) {
            errorID(1020);
            return _assertThisInitialized(_this5);
          }

          var last = paramArray.length - 1;
          if (last >= 0 && paramArray[last] == null) logID(1015);

          if (last >= 0) {
            var prev = paramArray[0];
            var action1;

            for (var i = 1; i < last; i++) {
              if (paramArray[i]) {
                action1 = prev;
                prev = Spawn._actionOneTwo(action1, paramArray[i]);
              }
            }

            _this5.initWithTwoActions(prev, paramArray[last]);
          }

          return _this5;
        }

        var _proto5 = Spawn.prototype;

        _proto5.initWithTwoActions = function initWithTwoActions(action1, action2) {
          if (!action1 || !action2) {
            errorID(1027);
            return false;
          }

          var ret = false;
          var d1 = action1._duration;
          var d2 = action2._duration;

          if (this.initWithDuration(Math.max(d1, d2))) {
            this._one = action1;
            this._two = action2;

            if (d1 > d2) {
              this._two = Sequence._actionOneTwo(action2, delayTime(d1 - d2));
            } else if (d1 < d2) {
              this._one = Sequence._actionOneTwo(action1, delayTime(d2 - d1));
            }

            ret = true;
          }

          return ret;
        };

        _proto5.clone = function clone() {
          var action = new Spawn();

          this._cloneDecoration(action);

          action.initWithTwoActions(this._one.clone(), this._two.clone());
          return action;
        };

        _proto5.startWithTarget = function startWithTarget(target) {
          ActionInterval.prototype.startWithTarget.call(this, target);

          this._one.startWithTarget(target);

          this._two.startWithTarget(target);
        };

        _proto5.stop = function stop() {
          this._one.stop();

          this._two.stop();

          Action.prototype.stop.call(this);
        };

        _proto5.update = function update(dt) {
          dt = this._computeEaseTime(dt);
          if (this._one) this._one.update(dt);
          if (this._two) this._two.update(dt);
        };

        _proto5.reverse = function reverse() {
          var action = Spawn._actionOneTwo(this._one.reverse(), this._two.reverse());

          this._cloneDecoration(action);

          this._reverseEaseList(action);

          return action;
        };

        return Spawn;
      }(ActionInterval);

      Spawn._actionOneTwo = function (action1, action2) {
        var pSpawn = new Spawn();
        pSpawn.initWithTwoActions(action1, action2);
        return pSpawn;
      };

      function spawn(tempArray) {
        var paramArray = tempArray instanceof Array ? tempArray : arguments;

        if (paramArray.length === 1) {
          errorID(1020);
          return null;
        }

        if (paramArray.length > 0 && paramArray[paramArray.length - 1] == null) logID(1015);
        var prev = paramArray[0];

        for (var i = 1; i < paramArray.length; i++) {
          if (paramArray[i] != null) prev = Spawn._actionOneTwo(prev, paramArray[i]);
        }

        return prev;
      }

      var DelayTime = function (_ActionInterval5) {
        _inheritsLoose(DelayTime, _ActionInterval5);

        function DelayTime() {
          return _ActionInterval5.apply(this, arguments) || this;
        }

        var _proto6 = DelayTime.prototype;

        _proto6.update = function update(dt) {};

        _proto6.reverse = function reverse() {
          var action = new DelayTime(this._duration);

          this._cloneDecoration(action);

          this._reverseEaseList(action);

          return action;
        };

        _proto6.clone = function clone() {
          var action = new DelayTime();

          this._cloneDecoration(action);

          action.initWithDuration(this._duration);
          return action;
        };

        return DelayTime;
      }(ActionInterval);

      function delayTime(d) {
        return new DelayTime(d);
      }
      var ReverseTime = function (_ActionInterval6) {
        _inheritsLoose(ReverseTime, _ActionInterval6);

        function ReverseTime(action) {
          var _this6;

          _this6 = _ActionInterval6.call(this) || this;
          _this6._other = null;
          action && _this6.initWithAction(action);
          return _this6;
        }

        var _proto7 = ReverseTime.prototype;

        _proto7.initWithAction = function initWithAction(action) {
          if (!action) {
            errorID(1028);
            return false;
          }

          if (action === this._other) {
            errorID(1029);
            return false;
          }

          if (ActionInterval.prototype.initWithDuration.call(this, action._duration)) {
            this._other = action;
            return true;
          }

          return false;
        };

        _proto7.clone = function clone() {
          var action = new ReverseTime();

          this._cloneDecoration(action);

          action.initWithAction(this._other.clone());
          return action;
        };

        _proto7.startWithTarget = function startWithTarget(target) {
          ActionInterval.prototype.startWithTarget.call(this, target);

          this._other.startWithTarget(target);
        };

        _proto7.update = function update(dt) {
          dt = this._computeEaseTime(dt);
          if (this._other) this._other.update(1 - dt);
        };

        _proto7.reverse = function reverse() {
          return this._other.clone();
        };

        _proto7.stop = function stop() {
          this._other.stop();

          Action.prototype.stop.call(this);
        };

        return ReverseTime;
      }(ActionInterval);
      function reverseTime(action) {
        return new ReverseTime(action);
      }

      function TweenEasingAdapter(easingName) {
        var initialChar = easingName.charAt(0);

        if (/[A-Z]/.test(initialChar)) {
          easingName = easingName.replace(initialChar, initialChar.toLowerCase());
          var arr = easingName.split('-');

          if (arr.length === 2) {
            var str0 = arr[0];

            if (str0 === 'linear') {
              easingName = 'linear';
            } else {
              var str1 = arr[1];

              switch (str0) {
                case 'quadratic':
                  easingName = "quad" + str1;
                  break;

                case 'quartic':
                  easingName = "quart" + str1;
                  break;

                case 'quintic':
                  easingName = "quint" + str1;
                  break;

                case 'sinusoidal':
                  easingName = "sine" + str1;
                  break;

                case 'exponential':
                  easingName = "expo" + str1;
                  break;

                case 'circular':
                  easingName = "circ" + str1;
                  break;

                default:
                  easingName = str0 + str1;
                  break;
              }
            }
          }
        }

        return easingName;
      }

      function TweenOptionChecker(opts) {
        var header = ' [Tween:] ';
        var message = " option is not support in v + " + engineVersion;
        var _opts = opts;

        if (_opts.delay) {
          warn(header + "delay" + message);
        }

        if (_opts.repeat) {
          warn(header + "repeat" + message);
        }

        if (_opts.repeatDelay) {
          warn(header + "repeatDelay" + message);
        }

        if (_opts.interpolation) {
          warn(header + "interpolation" + message);
        }

        if (_opts.onStop) {
          warn(header + "onStop" + message);
        }
      }

      var TweenAction = exports('TweenAction', function (_ActionInterval) {
        _inheritsLoose(TweenAction, _ActionInterval);

        function TweenAction(duration, props, opts) {
          var _this;

          _this = _ActionInterval.call(this) || this;
          _this._opts = void 0;
          _this._props = void 0;
          _this._originProps = void 0;

          if (opts == null) {
            opts = Object.create(null);
          } else {
            TweenOptionChecker(opts);

            if (opts.easing && typeof opts.easing === 'string') {
              opts.easing = TweenEasingAdapter(opts.easing);
            }

            if (!opts.progress) {
              opts.progress = _this.progress;
            }

            if (opts.easing && typeof opts.easing === 'string') {
              var easingName = opts.easing;
              opts.easing = easing[easingName];

              if (!opts.easing) {
                warnID(1031, easingName);
              }
            }
          }

          _this._opts = opts;
          _this._props = Object.create(null);

          for (var name in props) {
            if (!props.hasOwnProperty(name)) continue;
            var value = props[name];

            if (typeof value === 'function') {
              value = value();
            }

            if (value == null || typeof value === 'string') continue;
            var customEasing = void 0;
            var progress = void 0;

            if (value.value !== undefined && (value.easing || value.progress)) {
              if (typeof value.easing === 'string') {
                customEasing = easing[value.easing];
                if (!customEasing) warnID(1031, value.easing);
              } else {
                customEasing = value.easing;
              }

              progress = value.progress;
              value = value.value;
            }

            var prop = Object.create(null);
            prop.value = value;
            prop.easing = customEasing;
            prop.progress = progress;
            _this._props[name] = prop;
          }

          _this._originProps = props;

          _this.initWithDuration(duration);

          return _this;
        }

        var _proto = TweenAction.prototype;

        _proto.clone = function clone() {
          var action = new TweenAction(this._duration, this._originProps, this._opts);

          this._cloneDecoration(action);

          return action;
        };

        _proto.startWithTarget = function startWithTarget(target) {
          ActionInterval.prototype.startWithTarget.call(this, target);
          var relative = !!this._opts.relative;
          var props = this._props;

          for (var property in props) {
            var _t = target[property];

            if (_t === undefined) {
              continue;
            }

            var prop = props[property];
            var value = prop.value;

            if (typeof _t === 'number') {
              prop.start = _t;
              prop.current = _t;
              prop.end = relative ? _t + value : value;
            } else if (typeof _t === 'object') {
              if (prop.start == null) {
                prop.start = {};
                prop.current = {};
                prop.end = {};
              }

              for (var k in value) {
                if (isNaN(_t[k])) continue;
                prop.start[k] = _t[k];
                prop.current[k] = _t[k];
                prop.end[k] = relative ? _t[k] + value[k] : value[k];
              }
            }
          }

          if (this._opts.onStart) {
            this._opts.onStart(this.target);
          }
        };

        _proto.update = function update(t) {
          var target = this.target;
          if (!target) return;
          var props = this._props;
          var opts = this._opts;
          var easingTime = t;
          if (opts.easing) easingTime = opts.easing(t);
          var progress = opts.progress;

          for (var name in props) {
            var prop = props[name];
            var time = prop.easing ? prop.easing(t) : easingTime;
            var interpolation = prop.progress ? prop.progress : progress;
            var start = prop.start;
            var end = prop.end;

            if (typeof start === 'number') {
              prop.current = interpolation(start, end, prop.current, time);
            } else if (typeof start === 'object') {
              for (var k in start) {
                prop.current[k] = interpolation(start[k], end[k], prop.current[k], time);
              }
            }

            target[name] = prop.current;
          }

          if (opts.onUpdate) {
            opts.onUpdate(this.target, t);
          }

          if (t === 1 && opts.onComplete) {
            opts.onComplete(this.target);
          }
        };

        _proto.progress = function progress(start, end, current, t) {
          return current = start + (end - start) * t;
        };

        return TweenAction;
      }(ActionInterval));

      var SetAction = function (_ActionInstant) {
        _inheritsLoose(SetAction, _ActionInstant);

        function SetAction(props) {
          var _this;

          _this = _ActionInstant.call(this) || this;
          _this._props = void 0;
          _this._props = {};
          props !== undefined && _this.init(props);
          return _this;
        }

        var _proto = SetAction.prototype;

        _proto.init = function init(props) {
          for (var name in props) {
            this._props[name] = props[name];
          }

          return true;
        };

        _proto.update = function update() {
          var props = this._props;
          var target = this.target;

          for (var name in props) {
            target[name] = props[name];
          }
        };

        _proto.clone = function clone() {
          var action = new SetAction();
          action.init(this._props);
          return action;
        };

        return SetAction;
      }(ActionInstant);

      var Tween = exports('Tween', function () {
        function Tween(target) {
          this._actions = [];
          this._finalAction = null;
          this._target = null;
          this._tag = Action.TAG_INVALID;
          this._target = target === undefined ? null : target;
        }

        var _proto = Tween.prototype;

        _proto.tag = function tag(_tag) {
          this._tag = _tag;
          return this;
        };

        _proto.then = function then(other) {
          if (other instanceof Action) {
            this._actions.push(other.clone());
          } else {
            this._actions.push(other._union());
          }

          return this;
        };

        _proto.target = function target(_target) {
          this._target = _target;
          return this;
        };

        _proto.start = function start() {
          if (!this._target) {
            warn('Please set target to tween first');
            return this;
          }

          if (this._finalAction) {
            TweenSystem.instance.ActionManager.removeAction(this._finalAction);
          }

          this._finalAction = this._union();

          this._finalAction.setTag(this._tag);

          TweenSystem.instance.ActionManager.addAction(this._finalAction, this._target, false);
          return this;
        };

        _proto.stop = function stop() {
          if (this._finalAction) {
            TweenSystem.instance.ActionManager.removeAction(this._finalAction);
          }

          return this;
        };

        _proto.clone = function clone(target) {
          var action = this._union();

          return tween(target).then(action.clone());
        };

        _proto.union = function union() {
          var action = this._union();

          this._actions.length = 0;

          this._actions.push(action);

          return this;
        };

        _proto.to = function to(duration, props, opts) {
          opts = opts || Object.create(null);
          opts.relative = false;
          var action = new TweenAction(duration, props, opts);

          this._actions.push(action);

          return this;
        };

        _proto.by = function by(duration, props, opts) {
          opts = opts || Object.create(null);
          opts.relative = true;
          var action = new TweenAction(duration, props, opts);

          this._actions.push(action);

          return this;
        };

        _proto.set = function set(props) {
          var action = new SetAction(props);

          this._actions.push(action);

          return this;
        };

        _proto.delay = function delay(duration) {
          var action = delayTime(duration);

          this._actions.push(action);

          return this;
        };

        _proto.call = function call(callback) {
          var action = callFunc(callback);

          this._actions.push(action);

          return this;
        };

        _proto.sequence = function sequence() {
          var action = Tween._wrappedSequence.apply(Tween, arguments);

          this._actions.push(action);

          return this;
        };

        _proto.parallel = function parallel() {
          var action = Tween._wrappedParallel.apply(Tween, arguments);

          this._actions.push(action);

          return this;
        };

        _proto.repeat = function repeat(repeatTimes, embedTween) {
          if (repeatTimes === Infinity) {
            return this.repeatForever(embedTween);
          }

          var actions = this._actions;
          var action;

          if (embedTween instanceof Tween) {
            action = embedTween._union();
          } else {
            action = actions.pop();
          }

          actions.push(repeat$1(action, repeatTimes));
          return this;
        };

        _proto.repeatForever = function repeatForever$1(embedTween) {
          var actions = this._actions;
          var action;

          if (embedTween instanceof Tween) {
            action = embedTween._union();
          } else {
            action = actions.pop();
          }

          actions.push(repeatForever(action));
          return this;
        };

        _proto.reverseTime = function reverseTime$1(embedTween) {
          var actions = this._actions;
          var action;

          if (embedTween instanceof Tween) {
            action = embedTween._union();
          } else {
            action = actions.pop();
          }

          actions.push(reverseTime(action));
          return this;
        };

        _proto.hide = function hide$1() {
          var action = hide();

          this._actions.push(action);

          return this;
        };

        _proto.show = function show$1() {
          var action = show();

          this._actions.push(action);

          return this;
        };

        _proto.removeSelf = function removeSelf$1() {
          var action = removeSelf(false);

          this._actions.push(action);

          return this;
        };

        Tween.stopAll = function stopAll() {
          TweenSystem.instance.ActionManager.removeAllActions();
        };

        Tween.stopAllByTag = function stopAllByTag(tag, target) {
          TweenSystem.instance.ActionManager.removeAllActionsByTag(tag, target);
        };

        Tween.stopAllByTarget = function stopAllByTarget(target) {
          TweenSystem.instance.ActionManager.removeAllActionsFromTarget(target);
        };

        _proto._union = function _union() {
          var actions = this._actions;
          var action;

          if (actions.length === 1) {
            action = actions[0];
          } else {
            action = sequence(actions);
          }

          return action;
        };

        _proto._destroy = function _destroy() {
          this.stop();
        };

        Tween._wrappedSequence = function _wrappedSequence() {
          var tmp_args = Tween._tmp_args;
          tmp_args.length = 0;

          for (var l = arguments.length, i = 0; i < l; i++) {
            var arg = tmp_args[i] = i < 0 || arguments.length <= i ? undefined : arguments[i];

            if (arg instanceof Tween) {
              tmp_args[i] = arg._union();
            }
          }

          return sequence.apply(sequence, tmp_args);
        };

        Tween._wrappedParallel = function _wrappedParallel() {
          var tmp_args = Tween._tmp_args;
          tmp_args.length = 0;

          for (var l = arguments.length, i = 0; i < l; i++) {
            var arg = tmp_args[i] = i < 0 || arguments.length <= i ? undefined : arguments[i];

            if (arg instanceof Tween) {
              tmp_args[i] = arg._union();
            }
          }

          return spawn.apply(spawn, tmp_args);
        };

        return Tween;
      }());
      Tween._tmp_args = [];
      legacyCC.Tween = Tween;
      function tween(target) {
        return new Tween(target);
      }
      legacyCC.tween = tween;
      function tweenUtil(target) {
        warn('tweenUtil\' is deprecated, please use \'tween\' instead ');
        return new Tween(target);
      }
      legacyCC.tweenUtil = tweenUtil;

      var DeviceType;

      (function (DeviceType) {
        DeviceType[DeviceType["Other"] = 0] = "Other";
        DeviceType[DeviceType["Left"] = 1] = "Left";
        DeviceType[DeviceType["Right"] = 2] = "Right";
      })(DeviceType || (DeviceType = {}));

      var XrUIPressEventType;

      (function (XrUIPressEventType) {
        XrUIPressEventType["XRUI_HOVER_ENTERED"] = "xrui-hover-entered";
        XrUIPressEventType["XRUI_HOVER_EXITED"] = "xrui-hover-exited";
        XrUIPressEventType["XRUI_HOVER_STAY"] = "xrui-hover-stay";
        XrUIPressEventType["XRUI_CLICK"] = "xrui-click";
        XrUIPressEventType["XRUI_UNCLICK"] = "xrui-unclick";
      })(XrUIPressEventType || (XrUIPressEventType = {}));

      var XrKeyboardEventType;

      (function (XrKeyboardEventType) {
        XrKeyboardEventType["XR_CAPS_LOCK"] = "xr-caps-lock";
        XrKeyboardEventType["XR_KEYBOARD_INIT"] = "xr-keyboard-init";
        XrKeyboardEventType["XR_KEYBOARD_INPUT"] = "xr-keyboard-input";
        XrKeyboardEventType["TO_LATIN"] = "to-latin";
        XrKeyboardEventType["TO_SYMBOL"] = "to-symbol";
        XrKeyboardEventType["TO_MATH_SYMBOL"] = "to-math-symbol";
      })(XrKeyboardEventType || (XrKeyboardEventType = {}));

      var XrUIPressEvent = function (_Event) {
        _inheritsLoose(XrUIPressEvent, _Event);

        function XrUIPressEvent() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Event.call.apply(_Event, [this].concat(args)) || this;
          _this.deviceType = DeviceType.Other;
          _this.hitPoint = new Vec3();
          return _this;
        }

        return XrUIPressEvent;
      }(Event);

      var _dec$1s, _dec2$M, _dec3$r, _dec4$e, _dec5$b, _dec6$9, _dec7$9, _dec8$5, _dec9$5, _dec10$4, _class$1v, _class2$1h, _initializer$15, _initializer2$L, _initializer3$y, _initializer4$s, _initializer5$k, _initializer6$g, _initializer7$c, _initializer8$c, _initializer9$b, _initializer10$b, _initializer11$9, _initializer12$8, _initializer13$8, _initializer14$6, _class3$r, _temp$B;

      var _tempColor = new Color();

      var Transition;

      (function (Transition) {
        Transition[Transition["NONE"] = 0] = "NONE";
        Transition[Transition["COLOR"] = 1] = "COLOR";
        Transition[Transition["SPRITE"] = 2] = "SPRITE";
        Transition[Transition["SCALE"] = 3] = "SCALE";
      })(Transition || (Transition = {}));

      ccenum(Transition);
      var State;

      (function (State) {
        State["NORMAL"] = "normal";
        State["HOVER"] = "hover";
        State["PRESSED"] = "pressed";
        State["DISABLED"] = "disabled";
      })(State || (State = {}));

      var EventType$2;

      (function (EventType) {
        EventType["CLICK"] = "click";
      })(EventType$2 || (EventType$2 = {}));

      var Button$1 = exports('Button', (_dec$1s = ccclass('cc.Button'), _dec2$M = executionOrder(110), _dec3$r = requireComponent(UITransform), _dec4$e = type(Node$1), _dec5$b = type(Transition), _dec6$9 = type(SpriteFrame), _dec7$9 = type(SpriteFrame), _dec8$5 = type(SpriteFrame), _dec9$5 = type(SpriteFrame), _dec10$4 = type([EventHandler]), _dec$1s(_class$1v = _dec2$M(_class$1v = _dec3$r(_class$1v = (_class2$1h = (_temp$B = _class3$r = function (_Component) {
        _inheritsLoose(Button, _Component);

        function Button() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.clickEvents = _initializer$15 && _initializer$15();
          _this._interactable = _initializer2$L && _initializer2$L();
          _this._transition = _initializer3$y && _initializer3$y();
          _this._normalColor = _initializer4$s && _initializer4$s();
          _this._hoverColor = _initializer5$k && _initializer5$k();
          _this._pressedColor = _initializer6$g && _initializer6$g();
          _this._disabledColor = _initializer7$c && _initializer7$c();
          _this._normalSprite = _initializer8$c && _initializer8$c();
          _this._hoverSprite = _initializer9$b && _initializer9$b();
          _this._pressedSprite = _initializer10$b && _initializer10$b();
          _this._disabledSprite = _initializer11$9 && _initializer11$9();
          _this._duration = _initializer12$8 && _initializer12$8();
          _this._zoomScale = _initializer13$8 && _initializer13$8();
          _this._target = _initializer14$6 && _initializer14$6();
          _this._pressed = false;
          _this._hovered = false;
          _this._fromColor = new Color();
          _this._toColor = new Color();
          _this._time = 0;
          _this._transitionFinished = true;
          _this._fromScale = new Vec3();
          _this._toScale = new Vec3();
          _this._originalScale = null;
          _this._sprite = null;
          _this._targetScale = new Vec3();
          return _this;
        }

        var _proto = Button.prototype;

        _proto.__preload = function __preload() {
          if (!this.target) {
            this.target = this.node;
          }

          var sprite = this.node.getComponent(Sprite);

          if (sprite) {
            this._normalSprite = sprite.spriteFrame;
          }

          this._applyTarget();

          this._resetState();
        };

        _proto.onEnable = function onEnable() {

          {
            this._registerNodeEvent();
          }
        };

        _proto.onDisable = function onDisable() {
          this._resetState();

          {
            this._unregisterNodeEvent();
          }
        };

        _proto.onDestroy = function onDestroy() {
          if (this.target.isValid) {
            this._unregisterTargetEvent(this.target);
          }
        };

        _proto.update = function update(dt) {
          var target = this.target;

          if (this._transitionFinished || !target) {
            return;
          }

          if (this._transition !== Transition.COLOR && this._transition !== Transition.SCALE) {
            return;
          }

          this._time += dt;
          var ratio = 1.0;

          if (this._duration > 0) {
            ratio = this._time / this._duration;
          }

          if (ratio >= 1) {
            ratio = 1;
          }

          if (this._transition === Transition.COLOR) {
            var renderComp = target._uiProps.uiComp;
            Color.lerp(_tempColor, this._fromColor, this._toColor, ratio);

            if (renderComp) {
              renderComp.color = _tempColor;
            }
          } else if (this.transition === Transition.SCALE) {
            target.getScale(this._targetScale);
            this._targetScale.x = lerp(this._fromScale.x, this._toScale.x, ratio);
            this._targetScale.y = lerp(this._fromScale.y, this._toScale.y, ratio);
            target.setScale(this._targetScale);
          }

          if (ratio === 1) {
            this._transitionFinished = true;
          }
        };

        _proto._resizeNodeToTargetNode = function _resizeNodeToTargetNode() {
          if (!this.target) {
            return;
          }

          var targetTrans = this.target._uiProps.uiTransformComp;
        };

        _proto._resetState = function _resetState() {
          this._pressed = false;
          this._hovered = false;
          var target = this.target;

          if (!target) {
            return;
          }

          var transition = this._transition;

          if (transition === Transition.COLOR && this._interactable) {
            var renderComp = target.getComponent(UIRenderer);

            if (renderComp) {
              renderComp.color = this._normalColor;
            }
          } else if (transition === Transition.SCALE && this._originalScale) {
            target.setScale(this._originalScale);
          }

          this._transitionFinished = true;
        };

        _proto._registerNodeEvent = function _registerNodeEvent() {
          this.node.on(NodeEventType.TOUCH_START, this._onTouchBegan, this);
          this.node.on(NodeEventType.TOUCH_MOVE, this._onTouchMove, this);
          this.node.on(NodeEventType.TOUCH_END, this._onTouchEnded, this);
          this.node.on(NodeEventType.TOUCH_CANCEL, this._onTouchCancel, this);
          this.node.on(NodeEventType.MOUSE_ENTER, this._onMouseMoveIn, this);
          this.node.on(NodeEventType.MOUSE_LEAVE, this._onMouseMoveOut, this);
          this.node.on(XrUIPressEventType.XRUI_HOVER_ENTERED, this._xrHoverEnter, this);
          this.node.on(XrUIPressEventType.XRUI_HOVER_EXITED, this._xrHoverExit, this);
          this.node.on(XrUIPressEventType.XRUI_CLICK, this._xrClick, this);
          this.node.on(XrUIPressEventType.XRUI_UNCLICK, this._xrUnClick, this);
        };

        _proto._registerTargetEvent = function _registerTargetEvent(target) {

          target.on(NodeEventType.TRANSFORM_CHANGED, this._onTargetTransformChanged, this);
        };

        _proto._unregisterNodeEvent = function _unregisterNodeEvent() {
          this.node.off(NodeEventType.TOUCH_START, this._onTouchBegan, this);
          this.node.off(NodeEventType.TOUCH_MOVE, this._onTouchMove, this);
          this.node.off(NodeEventType.TOUCH_END, this._onTouchEnded, this);
          this.node.off(NodeEventType.TOUCH_CANCEL, this._onTouchCancel, this);
          this.node.off(NodeEventType.MOUSE_ENTER, this._onMouseMoveIn, this);
          this.node.off(NodeEventType.MOUSE_LEAVE, this._onMouseMoveOut, this);
          this.node.off(XrUIPressEventType.XRUI_HOVER_ENTERED, this._xrHoverEnter, this);
          this.node.off(XrUIPressEventType.XRUI_HOVER_EXITED, this._xrHoverExit, this);
          this.node.off(XrUIPressEventType.XRUI_CLICK, this._xrClick, this);
          this.node.off(XrUIPressEventType.XRUI_UNCLICK, this._xrUnClick, this);
        };

        _proto._unregisterTargetEvent = function _unregisterTargetEvent(target) {

          target.off(NodeEventType.TRANSFORM_CHANGED);
        };

        _proto._getTargetSprite = function _getTargetSprite(target) {
          var sprite = null;

          if (target) {
            sprite = target.getComponent(Sprite);
          }

          return sprite;
        };

        _proto._applyTarget = function _applyTarget() {
          if (this.target) {
            this._sprite = this._getTargetSprite(this.target);

            if (!this._originalScale) {
              this._originalScale = new Vec3();
            }

            Vec3.copy(this._originalScale, this.target.getScale());

            this._registerTargetEvent(this.target);
          }
        };

        _proto._onTargetSpriteFrameChanged = function _onTargetSpriteFrameChanged(comp) {
          if (this._transition === Transition.SPRITE) {
            this._setCurrentStateSpriteFrame(comp.spriteFrame);
          }
        };

        _proto._setCurrentStateSpriteFrame = function _setCurrentStateSpriteFrame(spriteFrame) {
          if (!spriteFrame) {
            return;
          }

          switch (this._getButtonState()) {
            case State.NORMAL:
              this._normalSprite = spriteFrame;
              break;

            case State.HOVER:
              this._hoverSprite = spriteFrame;
              break;

            case State.PRESSED:
              this._pressedSprite = spriteFrame;
              break;

            case State.DISABLED:
              this._disabledSprite = spriteFrame;
              break;
          }
        };

        _proto._onTargetColorChanged = function _onTargetColorChanged(color) {
          if (this._transition === Transition.COLOR) {
            this._setCurrentStateColor(color);
          }
        };

        _proto._setCurrentStateColor = function _setCurrentStateColor(color) {
          switch (this._getButtonState()) {
            case State.NORMAL:
              this._normalColor = color;
              break;

            case State.HOVER:
              this._hoverColor = color;
              break;

            case State.PRESSED:
              this._pressedColor = color;
              break;

            case State.DISABLED:
              this._disabledColor = color;
              break;
          }
        };

        _proto._onTargetTransformChanged = function _onTargetTransformChanged(transformBit) {
          if (transformBit & TransformBit.SCALE && this._originalScale && this._transition === Transition.SCALE && this._transitionFinished) {
            Vec3.copy(this._originalScale, this.target.getScale());
          }
        };

        _proto._onTouchBegan = function _onTouchBegan(event) {
          if (!this._interactable || !this.enabledInHierarchy) {
            return;
          }

          this._pressed = true;

          this._updateState();

          if (event) {
            event.propagationStopped = true;
          }
        };

        _proto._onTouchMove = function _onTouchMove(event) {
          if (!this._interactable || !this.enabledInHierarchy || !this._pressed) {
            return;
          }

          if (!event) {
            return;
          }

          var touch = event.touch;

          if (!touch) {
            return;
          }

          var hit = this.node._uiProps.uiTransformComp.hitTest(touch.getLocation());

          if (this._transition === Transition.SCALE && this.target && this._originalScale) {
            if (hit) {
              Vec3.copy(this._fromScale, this._originalScale);
              Vec3.multiplyScalar(this._toScale, this._originalScale, this._zoomScale);
              this._transitionFinished = false;
            } else {
              this._time = 0;
              this._transitionFinished = true;
              this.target.setScale(this._originalScale);
            }
          } else {
            var state;

            if (hit) {
              state = State.PRESSED;
            } else {
              state = State.NORMAL;
            }

            this._applyTransition(state);
          }

          if (event) {
            event.propagationStopped = true;
          }
        };

        _proto._onTouchEnded = function _onTouchEnded(event) {
          if (!this._interactable || !this.enabledInHierarchy) {
            return;
          }

          if (this._pressed) {
            EventHandler.emitEvents(this.clickEvents, event);
            this.node.emit(EventType$2.CLICK, this);
          }

          this._pressed = false;

          this._updateState();

          if (event) {
            event.propagationStopped = true;
          }
        };

        _proto._onTouchCancel = function _onTouchCancel(event) {
          if (!this._interactable || !this.enabledInHierarchy) {
            return;
          }

          this._pressed = false;

          this._updateState();
        };

        _proto._onMouseMoveIn = function _onMouseMoveIn(event) {
          if (this._pressed || !this.interactable || !this.enabledInHierarchy) {
            return;
          }

          if (this._transition === Transition.SPRITE && !this._hoverSprite) {
            return;
          }

          if (!this._hovered) {
            this._hovered = true;

            this._updateState();
          }
        };

        _proto._onMouseMoveOut = function _onMouseMoveOut(event) {
          if (this._hovered) {
            this._hovered = false;

            this._updateState();
          }
        };

        _proto._updateState = function _updateState() {
          var state = this._getButtonState();

          this._applyTransition(state);
        };

        _proto._getButtonState = function _getButtonState() {
          var state = State.NORMAL;

          if (!this._interactable) {
            state = State.DISABLED;
          } else if (this._pressed) {
            state = State.PRESSED;
          } else if (this._hovered) {
            state = State.HOVER;
          }

          return state.toString();
        };

        _proto._updateColorTransition = function _updateColorTransition(state) {
          var _this$target;

          var color = this[state + "Color"];
          var renderComp = (_this$target = this.target) === null || _this$target === void 0 ? void 0 : _this$target.getComponent(UIRenderer);

          if (!renderComp) {
            return;
          }

          if ( state === State.DISABLED) {
            renderComp.color = color;
          } else {
            this._fromColor = renderComp.color.clone();
            this._toColor = color;
            this._time = 0;
            this._transitionFinished = false;
          }
        };

        _proto._updateSpriteTransition = function _updateSpriteTransition(state) {
          var sprite = this[state + "Sprite"];

          if (this._sprite && sprite) {
            this._sprite.spriteFrame = sprite;
          }
        };

        _proto._updateScaleTransition = function _updateScaleTransition(state) {
          if (!this._interactable) {
            return;
          }

          if (state === State.PRESSED) {
            this._zoomUp();
          } else {
            this._zoomBack();
          }
        };

        _proto._zoomUp = function _zoomUp() {
          if (!this._originalScale) {
            return;
          }

          Vec3.copy(this._fromScale, this._originalScale);
          Vec3.multiplyScalar(this._toScale, this._originalScale, this._zoomScale);
          this._time = 0;
          this._transitionFinished = false;
        };

        _proto._zoomBack = function _zoomBack() {
          if (!this.target || !this._originalScale) {
            return;
          }

          Vec3.copy(this._fromScale, this.target.getScale());
          Vec3.copy(this._toScale, this._originalScale);
          this._time = 0;
          this._transitionFinished = false;
        };

        _proto._applyTransition = function _applyTransition(state) {
          var transition = this._transition;

          if (transition === Transition.COLOR) {
            this._updateColorTransition(state);
          } else if (transition === Transition.SPRITE) {
            this._updateSpriteTransition(state);
          } else if (transition === Transition.SCALE) {
            this._updateScaleTransition(state);
          }
        };

        _proto._xrHoverEnter = function _xrHoverEnter() {
          this._onMouseMoveIn();

          this._updateState();
        };

        _proto._xrHoverExit = function _xrHoverExit() {
          this._onMouseMoveOut();

          if (this._pressed) {
            this._pressed = false;

            this._updateState();
          }
        };

        _proto._xrClick = function _xrClick() {
          if (!this._interactable || !this.enabledInHierarchy) {
            return;
          }

          this._pressed = true;

          this._updateState();
        };

        _proto._xrUnClick = function _xrUnClick() {
          if (!this._interactable || !this.enabledInHierarchy) {
            return;
          }

          if (this._pressed) {
            EventHandler.emitEvents(this.clickEvents, this);
            this.node.emit(EventType$2.CLICK, this);
          }

          this._pressed = false;

          this._updateState();
        };

        _createClass(Button, [{
          key: "target",
          get: function get() {
            return this._target || this.node;
          },
          set: function set(value) {
            if (this._target === value) {
              return;
            }

            if (this._target) {
              this._unregisterTargetEvent(this._target);
            }

            this._target = value;

            this._applyTarget();
          }
        }, {
          key: "interactable",
          get: function get() {
            return this._interactable;
          },
          set: function set(value) {
            if (this._interactable === value) {
              return;
            }

            this._interactable = value;

            this._updateState();

            if (!this._interactable) {
              this._resetState();
            }
          }
        }, {
          key: "_resizeToTarget",
          set: function set(value) {
            if (value) {
              this._resizeNodeToTargetNode();
            }
          }
        }, {
          key: "transition",
          get: function get() {
            return this._transition;
          },
          set: function set(value) {
            if (this._transition === value) {
              return;
            }

            if (this._transition === Transition.COLOR) {
              this._updateColorTransition(State.NORMAL);
            } else if (this._transition === Transition.SPRITE) {
              this._updateSpriteTransition(State.NORMAL);
            }

            this._transition = value;

            this._updateState();
          }
        }, {
          key: "normalColor",
          get: function get() {
            return this._normalColor;
          },
          set: function set(value) {
            if (this._normalColor === value) {
              return;
            }

            this._normalColor.set(value);

            this._updateState();
          }
        }, {
          key: "pressedColor",
          get: function get() {
            return this._pressedColor;
          },
          set: function set(value) {
            if (this._pressedColor === value) {
              return;
            }

            this._pressedColor.set(value);
          }
        }, {
          key: "hoverColor",
          get: function get() {
            return this._hoverColor;
          },
          set: function set(value) {
            if (this._hoverColor === value) {
              return;
            }

            this._hoverColor.set(value);
          }
        }, {
          key: "disabledColor",
          get: function get() {
            return this._disabledColor;
          },
          set: function set(value) {
            if (this._disabledColor === value) {
              return;
            }

            this._disabledColor.set(value);

            this._updateState();
          }
        }, {
          key: "duration",
          get: function get() {
            return this._duration;
          },
          set: function set(value) {
            if (this._duration === value) {
              return;
            }

            this._duration = value;
          }
        }, {
          key: "zoomScale",
          get: function get() {
            return this._zoomScale;
          },
          set: function set(value) {
            if (this._zoomScale === value) {
              return;
            }

            this._zoomScale = value;
          }
        }, {
          key: "normalSprite",
          get: function get() {
            return this._normalSprite;
          },
          set: function set(value) {
            if (this._normalSprite === value) {
              return;
            }

            this._normalSprite = value;
            var sprite = this.node.getComponent(Sprite);

            if (sprite) {
              sprite.spriteFrame = value;
            }

            this._updateState();
          }
        }, {
          key: "pressedSprite",
          get: function get() {
            return this._pressedSprite;
          },
          set: function set(value) {
            if (this._pressedSprite === value) {
              return;
            }

            this._pressedSprite = value;

            this._updateState();
          }
        }, {
          key: "hoverSprite",
          get: function get() {
            return this._hoverSprite;
          },
          set: function set(value) {
            if (this._hoverSprite === value) {
              return;
            }

            this._hoverSprite = value;

            this._updateState();
          }
        }, {
          key: "disabledSprite",
          get: function get() {
            return this._disabledSprite;
          },
          set: function set(value) {
            if (this._disabledSprite === value) {
              return;
            }

            this._disabledSprite = value;

            this._updateState();
          }
        }]);

        return Button;
      }(Component), _class3$r.Transition = Transition, _class3$r.EventType = EventType$2, _temp$B), (_applyDecoratedDescriptor(_class2$1h.prototype, "target", [_dec4$e], Object.getOwnPropertyDescriptor(_class2$1h.prototype, "target"), _class2$1h.prototype), _applyDecoratedDescriptor(_class2$1h.prototype, "transition", [_dec5$b], Object.getOwnPropertyDescriptor(_class2$1h.prototype, "transition"), _class2$1h.prototype), _applyDecoratedDescriptor(_class2$1h.prototype, "normalSprite", [_dec6$9], Object.getOwnPropertyDescriptor(_class2$1h.prototype, "normalSprite"), _class2$1h.prototype), _applyDecoratedDescriptor(_class2$1h.prototype, "pressedSprite", [_dec7$9], Object.getOwnPropertyDescriptor(_class2$1h.prototype, "pressedSprite"), _class2$1h.prototype), _applyDecoratedDescriptor(_class2$1h.prototype, "hoverSprite", [_dec8$5], Object.getOwnPropertyDescriptor(_class2$1h.prototype, "hoverSprite"), _class2$1h.prototype), _applyDecoratedDescriptor(_class2$1h.prototype, "disabledSprite", [_dec9$5], Object.getOwnPropertyDescriptor(_class2$1h.prototype, "disabledSprite"), _class2$1h.prototype), _initializer$15 = applyDecoratedInitializer(_class2$1h.prototype, "clickEvents", [_dec10$4, serializable], function () {
        return [];
      }), _initializer2$L = applyDecoratedInitializer(_class2$1h.prototype, "_interactable", [serializable], function () {
        return true;
      }), _initializer3$y = applyDecoratedInitializer(_class2$1h.prototype, "_transition", [serializable], function () {
        return Transition.NONE;
      }), _initializer4$s = applyDecoratedInitializer(_class2$1h.prototype, "_normalColor", [serializable], function () {
        return Color.WHITE.clone();
      }), _initializer5$k = applyDecoratedInitializer(_class2$1h.prototype, "_hoverColor", [serializable], function () {
        return new Color(211, 211, 211, 255);
      }), _initializer6$g = applyDecoratedInitializer(_class2$1h.prototype, "_pressedColor", [serializable], function () {
        return Color.WHITE.clone();
      }), _initializer7$c = applyDecoratedInitializer(_class2$1h.prototype, "_disabledColor", [serializable], function () {
        return new Color(124, 124, 124, 255);
      }), _initializer8$c = applyDecoratedInitializer(_class2$1h.prototype, "_normalSprite", [serializable], function () {
        return null;
      }), _initializer9$b = applyDecoratedInitializer(_class2$1h.prototype, "_hoverSprite", [serializable], function () {
        return null;
      }), _initializer10$b = applyDecoratedInitializer(_class2$1h.prototype, "_pressedSprite", [serializable], function () {
        return null;
      }), _initializer11$9 = applyDecoratedInitializer(_class2$1h.prototype, "_disabledSprite", [serializable], function () {
        return null;
      }), _initializer12$8 = applyDecoratedInitializer(_class2$1h.prototype, "_duration", [serializable], function () {
        return 0.1;
      }), _initializer13$8 = applyDecoratedInitializer(_class2$1h.prototype, "_zoomScale", [serializable], function () {
        return 1.2;
      }), _initializer14$6 = applyDecoratedInitializer(_class2$1h.prototype, "_target", [serializable], function () {
        return null;
      })), _class2$1h)) || _class$1v) || _class$1v) || _class$1v));
      legacyCC.Button = Button$1;

      var tabIndexUtil = function () {
        function tabIndexUtil() {}

        tabIndexUtil.add = function add(editBoxImpl) {
          var list = this._tabIndexList;
          var index = list.indexOf(editBoxImpl);

          if (index === -1) {
            list.push(editBoxImpl);
          }
        };

        tabIndexUtil.remove = function remove(editBoxImpl) {
          var list = this._tabIndexList;
          var index = list.indexOf(editBoxImpl);

          if (index !== -1) {
            list.splice(index, 1);
          }
        };

        tabIndexUtil.resort = function resort() {
          this._tabIndexList.sort(function (a, b) {
            return a._delegate.tabIndex - b._delegate.tabIndex;
          });
        };

        tabIndexUtil.next = function next(editBoxImpl) {
          var list = this._tabIndexList;
          var index = list.indexOf(editBoxImpl);
          editBoxImpl.setFocus(false);

          if (index !== -1) {
            var nextImpl = list[index + 1];

            if (nextImpl && nextImpl._delegate.tabIndex >= 0) {
              nextImpl.setFocus(true);
            }
          }
        };

        return tabIndexUtil;
      }();
      tabIndexUtil._tabIndexList = [];

      var KeyboardReturnType;

      (function (KeyboardReturnType) {
        KeyboardReturnType[KeyboardReturnType["DEFAULT"] = 0] = "DEFAULT";
        KeyboardReturnType[KeyboardReturnType["DONE"] = 1] = "DONE";
        KeyboardReturnType[KeyboardReturnType["SEND"] = 2] = "SEND";
        KeyboardReturnType[KeyboardReturnType["SEARCH"] = 3] = "SEARCH";
        KeyboardReturnType[KeyboardReturnType["GO"] = 4] = "GO";
        KeyboardReturnType[KeyboardReturnType["NEXT"] = 5] = "NEXT";
      })(KeyboardReturnType || (KeyboardReturnType = {}));

      Enum(KeyboardReturnType);
      var InputMode;

      (function (InputMode) {
        InputMode[InputMode["ANY"] = 0] = "ANY";
        InputMode[InputMode["EMAIL_ADDR"] = 1] = "EMAIL_ADDR";
        InputMode[InputMode["NUMERIC"] = 2] = "NUMERIC";
        InputMode[InputMode["PHONE_NUMBER"] = 3] = "PHONE_NUMBER";
        InputMode[InputMode["URL"] = 4] = "URL";
        InputMode[InputMode["DECIMAL"] = 5] = "DECIMAL";
        InputMode[InputMode["SINGLE_LINE"] = 6] = "SINGLE_LINE";
      })(InputMode || (InputMode = {}));

      Enum(InputMode);
      var InputFlag;

      (function (InputFlag) {
        InputFlag[InputFlag["PASSWORD"] = 0] = "PASSWORD";
        InputFlag[InputFlag["SENSITIVE"] = 1] = "SENSITIVE";
        InputFlag[InputFlag["INITIAL_CAPS_WORD"] = 2] = "INITIAL_CAPS_WORD";
        InputFlag[InputFlag["INITIAL_CAPS_SENTENCE"] = 3] = "INITIAL_CAPS_SENTENCE";
        InputFlag[InputFlag["INITIAL_CAPS_ALL_CHARACTERS"] = 4] = "INITIAL_CAPS_ALL_CHARACTERS";
        InputFlag[InputFlag["DEFAULT"] = 5] = "DEFAULT";
      })(InputFlag || (InputFlag = {}));

      Enum(InputFlag);

      var EditBoxImplBase = function () {
        function EditBoxImplBase() {
          this._editing = false;
          this._delegate = null;
        }

        var _proto = EditBoxImplBase.prototype;

        _proto.init = function init(delegate) {};

        _proto.onEnable = function onEnable() {};

        _proto.update = function update() {};

        _proto.onDisable = function onDisable() {
          if (this._editing) {
            this.endEditing();
          }
        };

        _proto.clear = function clear() {
          this._delegate = null;
        };

        _proto.setTabIndex = function setTabIndex(index) {};

        _proto.setSize = function setSize(width, height) {};

        _proto.setFocus = function setFocus(value) {
          if (value) {
            this.beginEditing();
          } else {
            this.endEditing();
          }
        };

        _proto.isFocused = function isFocused() {
          return this._editing;
        };

        _proto.beginEditing = function beginEditing() {};

        _proto.endEditing = function endEditing() {};

        return EditBoxImplBase;
      }();

      var ccdocument$3 = ccwindow.document;
      var SCROLLY = 40;
      var LEFT_PADDING = 2;
      var DELAY_TIME = 400;

      var _matrix$1 = new Mat4();

      var _matrix_temp = new Mat4();

      var _vec3$1 = new Vec3();

      var _currentEditBoxImpl = null;
      var _domCount = 0;
      var EditBoxImpl = function (_EditBoxImplBase) {
        _inheritsLoose(EditBoxImpl, _EditBoxImplBase);

        function EditBoxImpl() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _EditBoxImplBase.call.apply(_EditBoxImplBase, [this].concat(args)) || this;
          _this._delegate = null;
          _this._inputMode = -1;
          _this._inputFlag = -1;
          _this._returnType = -1;
          _this.__eventListeners = {};
          _this.__autoResize = false;
          _this.__orientationChanged = void 0;
          _this._edTxt = null;
          _this._isTextArea = false;
          _this._textLabelFont = null;
          _this._textLabelFontSize = null;
          _this._textLabelFontColor = null;
          _this._textLabelAlign = null;
          _this._placeholderLabelFont = null;
          _this._placeholderLabelFontSize = null;
          _this._placeholderLabelFontColor = null;
          _this._placeholderLabelAlign = null;
          _this._placeholderLineHeight = null;
          _this._placeholderStyleSheet = null;
          _this._domId = "EditBoxId_" + ++_domCount;
          return _this;
        }

        var _proto = EditBoxImpl.prototype;

        _proto.init = function init(delegate) {
          if (!delegate) {
            return;
          }

          this._delegate = delegate;

          if (delegate.inputMode === InputMode.ANY) {
            this._createTextArea();
          } else {
            this._createInput();
          }

          tabIndexUtil.add(this);
          this.setTabIndex(delegate.tabIndex);

          this._initStyleSheet();

          this._registerEventListeners();

          this._addDomToGameContainer();
        };

        _proto.clear = function clear() {
          this._removeEventListeners();

          this._removeDomFromGameContainer();

          tabIndexUtil.remove(this);

          if (_currentEditBoxImpl === this) {
            _currentEditBoxImpl = null;
          }

          this._delegate = null;
        };

        _proto.update = function update() {
          this._updateMatrix();
        };

        _proto.setTabIndex = function setTabIndex(index) {
          this._edTxt.tabIndex = index;
          tabIndexUtil.resort();
        };

        _proto.setSize = function setSize(width, height) {
          var elem = this._edTxt;

          if (elem) {
            elem.style.width = width + "px";
            elem.style.height = height + "px";
          }
        };

        _proto.beginEditing = function beginEditing() {
          if (_currentEditBoxImpl && _currentEditBoxImpl !== this) {
            _currentEditBoxImpl.setFocus(false);
          }

          this._editing = true;
          _currentEditBoxImpl = this;

          this._delegate._editBoxEditingDidBegan();

          this._showDom();

          this._edTxt.focus();
        };

        _proto.endEditing = function endEditing() {
          this._edTxt.blur();
        };

        _proto._createInput = function _createInput() {
          this._isTextArea = false;
          this._edTxt = ccdocument$3.createElement('input');
        };

        _proto._createTextArea = function _createTextArea() {
          this._isTextArea = true;
          this._edTxt = ccdocument$3.createElement('textarea');
        };

        _proto._addDomToGameContainer = function _addDomToGameContainer() {
          if (game.container && this._edTxt) {
            game.container.appendChild(this._edTxt);
            ccdocument$3.head.appendChild(this._placeholderStyleSheet);
          }
        };

        _proto._removeDomFromGameContainer = function _removeDomFromGameContainer() {
          var hasElem = contains$1(game.container, this._edTxt);

          if (hasElem && this._edTxt) {
            game.container.removeChild(this._edTxt);
          }

          var hasStyleSheet = contains$1(ccdocument$3.head, this._placeholderStyleSheet);

          if (hasStyleSheet) {
            ccdocument$3.head.removeChild(this._placeholderStyleSheet);
          }

          this._edTxt = null;
          this._placeholderStyleSheet = null;
        };

        _proto._showDom = function _showDom() {
          this._updateMaxLength();

          this._updateInputType();

          this._updateStyleSheet();

          if (this._edTxt && this._delegate) {
            this._edTxt.style.display = '';

            this._delegate._hideLabels();
          }

          if (sys.isMobile) {
            this._showDomOnMobile();
          }
        };

        _proto._hideDom = function _hideDom() {
          var elem = this._edTxt;

          if (elem && this._delegate) {
            elem.style.display = 'none';

            this._delegate._showLabels();
          }

          if (sys.isMobile) {
            this._hideDomOnMobile();
          }
        };

        _proto._showDomOnMobile = function _showDomOnMobile() {
          if (sys.os !== OS.ANDROID && sys.os !== OS.OHOS) {
            return;
          }

          screenAdapter.handleResizeEvent = false;

          this._adjustWindowScroll();
        };

        _proto._hideDomOnMobile = function _hideDomOnMobile() {
          if (sys.os === OS.ANDROID || sys.os === OS.OHOS) {
            screenAdapter.handleResizeEvent = true;
          }

          this._scrollBackWindow();
        };

        _proto._adjustWindowScroll = function _adjustWindowScroll() {
          var _this2 = this;

          setTimeout(function () {
            if (ccwindow.scrollY < SCROLLY) {
              _this2._edTxt.scrollIntoView({
                block: 'start',
                inline: 'nearest',
                behavior: 'smooth'
              });
            }
          }, DELAY_TIME);
        };

        _proto._scrollBackWindow = function _scrollBackWindow() {
          setTimeout(function () {
            if (sys.browserType === BrowserType.WECHAT && sys.os === OS.IOS) {
              if (ccwindow.top) {
                ccwindow.top.scrollTo(0, 0);
              }

              return;
            }

            ccwindow.scrollTo(0, 0);
          }, DELAY_TIME);
        };

        _proto._updateMatrix = function _updateMatrix() {
          if (!this._edTxt) {
            return;
          }

          var node = this._delegate.node;
          var scaleX = view.getScaleX();
          var scaleY = view.getScaleY();
          var viewport = view.getViewportRect();
          var dpr = screenAdapter.devicePixelRatio;
          node.getWorldMatrix(_matrix$1);
          var transform = node._uiProps.uiTransformComp;

          if (transform) {
            Vec3.set(_vec3$1, -transform.anchorX * transform.width, -transform.anchorY * transform.height, _vec3$1.z);
          }

          Mat4.transform(_matrix$1, _matrix$1, _vec3$1);

          if (!node._uiProps.uiTransformComp) {
            return;
          }

          var camera = director.root.batcher2D.getFirstRenderCamera(node);
          if (!camera) return;
          camera.node.getWorldRT(_matrix_temp);
          var m12 = _matrix_temp.m12;
          var m13 = _matrix_temp.m13;
          var center = visibleRect.center;
          _matrix_temp.m12 = center.x - (_matrix_temp.m00 * m12 + _matrix_temp.m04 * m13);
          _matrix_temp.m13 = center.y - (_matrix_temp.m01 * m12 + _matrix_temp.m05 * m13);
          Mat4.multiply(_matrix_temp, _matrix_temp, _matrix$1);
          scaleX /= dpr;
          scaleY /= dpr;
          var container = game.container;
          var a = _matrix_temp.m00 * scaleX;
          var b = _matrix$1.m01;
          var c = _matrix$1.m04;
          var d = _matrix_temp.m05 * scaleY;
          var offsetX = parseInt(container && container.style.paddingLeft || '0');
          offsetX += viewport.x / dpr;
          var offsetY = parseInt(container && container.style.paddingBottom || '0');
          offsetY += viewport.y / dpr;
          var tx = _matrix_temp.m12 * scaleX + offsetX;
          var ty = _matrix_temp.m13 * scaleY + offsetY;
          var matrix = "matrix(" + a + "," + -b + "," + -c + "," + d + "," + tx + "," + -ty + ")";
          this._edTxt.style.transform = matrix;
          this._edTxt.style['-webkit-transform'] = matrix;
          this._edTxt.style['transform-origin'] = '0px 100% 0px';
          this._edTxt.style['-webkit-transform-origin'] = '0px 100% 0px';
        };

        _proto._updateInputType = function _updateInputType() {
          var delegate = this._delegate;
          var inputMode = delegate.inputMode;
          var inputFlag = delegate.inputFlag;
          var returnType = delegate.returnType;
          var elem = this._edTxt;

          if (this._inputMode === inputMode && this._inputFlag === inputFlag && this._returnType === returnType) {
            return;
          }

          this._inputMode = inputMode;
          this._inputFlag = inputFlag;
          this._returnType = returnType;

          if (this._isTextArea) {
            var transform = 'none';

            if (inputFlag === InputFlag.INITIAL_CAPS_ALL_CHARACTERS) {
              transform = 'uppercase';
            } else if (inputFlag === InputFlag.INITIAL_CAPS_WORD) {
              transform = 'capitalize';
            }

            elem.style.textTransform = transform;
            return;
          }

          elem = elem;

          if (inputFlag === InputFlag.PASSWORD) {
            elem.type = 'password';
            elem.style.textTransform = 'none';
            return;
          }

          var type = elem.type;

          if (inputMode === InputMode.EMAIL_ADDR) {
            type = 'email';
          } else if (inputMode === InputMode.NUMERIC || inputMode === InputMode.DECIMAL) {
            type = 'number';
          } else if (inputMode === InputMode.PHONE_NUMBER) {
            type = 'number';
            elem.pattern = '[0-9]*';
            elem.addEventListener('wheel', function () {
              return false;
            });
          } else if (inputMode === InputMode.URL) {
            type = 'url';
          } else {
            type = 'text';

            if (returnType === KeyboardReturnType.SEARCH) {
              type = 'search';
            }
          }

          elem.type = type;
          var textTransform = 'none';

          if (inputFlag === InputFlag.INITIAL_CAPS_ALL_CHARACTERS) {
            textTransform = 'uppercase';
          } else if (inputFlag === InputFlag.INITIAL_CAPS_WORD) {
            textTransform = 'capitalize';
          }

          elem.style.textTransform = textTransform;
        };

        _proto._updateMaxLength = function _updateMaxLength() {
          var maxLength = this._delegate.maxLength;

          if (maxLength < 0) {
            maxLength = 65535;
          }

          this._edTxt.maxLength = maxLength;
        };

        _proto._initStyleSheet = function _initStyleSheet() {
          if (!this._edTxt) {
            return;
          }

          var elem = this._edTxt;
          elem.style.color = '#000000';
          elem.style.border = '0px';
          elem.style.background = 'transparent';
          elem.style.width = '100%';
          elem.style.height = '100%';
          elem.style.outline = 'medium';
          elem.style.padding = '0';
          elem.style.textTransform = 'none';
          elem.style.display = 'none';
          elem.style.position = 'absolute';
          elem.style.bottom = '0px';
          elem.style.left = LEFT_PADDING + "px";
          elem.className = 'cocosEditBox';
          elem.style.fontFamily = 'Arial';
          elem.id = this._domId;

          if (!this._isTextArea) {
            elem = elem;
            elem.type = 'text';
            elem.style['-moz-appearance'] = 'textfield';
          } else {
            elem.style.resize = 'none';
            elem.style.overflowY = 'scroll';
          }

          this._placeholderStyleSheet = ccdocument$3.createElement('style');
        };

        _proto._updateStyleSheet = function _updateStyleSheet() {
          var delegate = this._delegate;
          var elem = this._edTxt;

          if (elem && delegate) {
            elem.value = delegate.string;

            this._updateTextLabel(delegate.textLabel);
          }
        };

        _proto._updateTextLabel = function _updateTextLabel(textLabel) {
          if (!textLabel) {
            return;
          }

          var font = textLabel.font;

          if (font && !(font instanceof BitmapFont)) {
            font = font._fontFamily;
          } else {
            font = textLabel.fontFamily;
          }

          var fontSize = textLabel.fontSize * textLabel.node.scale.y;

          if (this._textLabelFont === font && this._textLabelFontSize === fontSize && this._textLabelFontColor === textLabel.fontColor && this._textLabelAlign === textLabel.horizontalAlign) {
            return;
          }

          this._textLabelFont = font;
          this._textLabelFontSize = fontSize;
          this._textLabelFontColor = textLabel.fontColor;
          this._textLabelAlign = textLabel.horizontalAlign;

          if (!this._edTxt) {
            return;
          }

          var elem = this._edTxt;
          elem.style.fontSize = fontSize + "px";
          elem.style.color = textLabel.color.toCSS();
          elem.style.fontFamily = font;

          switch (textLabel.horizontalAlign) {
            case Label.HorizontalAlign.LEFT:
              elem.style.textAlign = 'left';
              break;

            case Label.HorizontalAlign.CENTER:
              elem.style.textAlign = 'center';
              break;

            case Label.HorizontalAlign.RIGHT:
              elem.style.textAlign = 'right';
              break;
          }
        };

        _proto._updatePlaceholderLabel = function _updatePlaceholderLabel(placeholderLabel) {
          if (!placeholderLabel) {
            return;
          }

          var font = placeholderLabel.font;

          if (font && !(font instanceof BitmapFont)) {
            font = placeholderLabel.font._fontFamily;
          } else {
            font = placeholderLabel.fontFamily;
          }

          var fontSize = placeholderLabel.fontSize * placeholderLabel.node.scale.y;

          if (this._placeholderLabelFont === font && this._placeholderLabelFontSize === fontSize && this._placeholderLabelFontColor === placeholderLabel.fontColor && this._placeholderLabelAlign === placeholderLabel.horizontalAlign && this._placeholderLineHeight === placeholderLabel.fontSize) {
            return;
          }

          this._placeholderLabelFont = font;
          this._placeholderLabelFontSize = fontSize;
          this._placeholderLabelFontColor = placeholderLabel.fontColor;
          this._placeholderLabelAlign = placeholderLabel.horizontalAlign;
          this._placeholderLineHeight = placeholderLabel.fontSize;
          var styleEl = this._placeholderStyleSheet;
          var fontColor = placeholderLabel.color.toCSS();
          var lineHeight = placeholderLabel.fontSize;
          var horizontalAlign = '';

          switch (placeholderLabel.horizontalAlign) {
            case Label.HorizontalAlign.LEFT:
              horizontalAlign = 'left';
              break;

            case Label.HorizontalAlign.CENTER:
              horizontalAlign = 'center';
              break;

            case Label.HorizontalAlign.RIGHT:
              horizontalAlign = 'right';
              break;
          }

          styleEl.innerHTML = "#" + this._domId + "::-webkit-input-placeholder{text-transform: initial;-family: " + font + ";font-size: " + fontSize + "px;color: " + fontColor + ";line-height: " + lineHeight + "px;text-align: " + horizontalAlign + ";}" + ("#" + this._domId + "::-moz-placeholder{text-transform: initial;-family: " + font + ";font-size: " + fontSize + "px;color: " + fontColor + ";line-height: " + lineHeight + "px;text-align: " + horizontalAlign + ";}") + ("#" + this._domId + "::-ms-input-placeholder{text-transform: initial;-family: " + font + ";font-size: " + fontSize + "px;color: " + fontColor + ";line-height: " + lineHeight + "px;text-align: " + horizontalAlign + ";}");

          if (sys.browserType === BrowserType.EDGE) {
            styleEl.innerHTML += "#" + this._domId + "::-ms-clear{display: none;}";
          }
        };

        _proto._registerEventListeners = function _registerEventListeners() {
          var _this3 = this;

          if (!this._edTxt) {
            return;
          }

          var elem = this._edTxt;
          var inputLock = false;
          var cbs = this.__eventListeners;

          cbs.compositionStart = function () {
            inputLock = true;
          };

          cbs.compositionEnd = function () {
            inputLock = false;

            _this3._delegate._editBoxTextChanged(elem.value);
          };

          cbs.onInput = function () {
            if (inputLock) {
              return;
            }

            var delegate = _this3._delegate;
            var maxLength = delegate.maxLength;

            if (maxLength >= 0) {
              elem.value = elem.value.slice(0, maxLength);
            }

            delegate._editBoxTextChanged(elem.value);
          };

          cbs.onClick = function () {
            if (_this3._editing) {
              if (sys.isMobile) {
                _this3._adjustWindowScroll();
              }
            }
          };

          cbs.onKeydown = function (e) {
            if (e.keyCode === KeyCode.ENTER) {
              e.propagationStopped = true;

              _this3._delegate._editBoxEditingReturn();

              if (!_this3._isTextArea) {
                elem.blur();
              }
            } else if (e.keyCode === KeyCode.TAB) {
              e.propagationStopped = true;
              e.preventDefault();
              tabIndexUtil.next(_this3);
            }
          };

          cbs.onBlur = function () {
            if (sys.isMobile && inputLock) {
              cbs.compositionEnd();
            }

            _this3._editing = false;
            _currentEditBoxImpl = null;

            _this3._hideDom();

            _this3._delegate._editBoxEditingDidEnded();
          };

          elem.addEventListener('compositionstart', cbs.compositionStart);
          elem.addEventListener('compositionend', cbs.compositionEnd);
          elem.addEventListener('input', cbs.onInput);
          elem.addEventListener('keydown', cbs.onKeydown);
          elem.addEventListener('blur', cbs.onBlur);
          elem.addEventListener('touchstart', cbs.onClick);
        };

        _proto._removeEventListeners = function _removeEventListeners() {
          if (!this._edTxt) {
            return;
          }

          var elem = this._edTxt;
          var cbs = this.__eventListeners;
          elem.removeEventListener('compositionstart', cbs.compositionStart);
          elem.removeEventListener('compositionend', cbs.compositionEnd);
          elem.removeEventListener('input', cbs.onInput);
          elem.removeEventListener('keydown', cbs.onKeydown);
          elem.removeEventListener('blur', cbs.onBlur);
          elem.removeEventListener('touchstart', cbs.onClick);
          cbs.compositionStart = null;
          cbs.compositionEnd = null;
          cbs.onInput = null;
          cbs.onKeydown = null;
          cbs.onBlur = null;
          cbs.onClick = null;
        };

        return EditBoxImpl;
      }(EditBoxImplBase);

      var _dec$1t, _dec2$N, _dec3$s, _dec4$f, _dec5$c, _dec6$a, _dec7$a, _dec8$6, _dec9$6, _dec10$5, _dec11$4, _dec12$4, _dec13$4, _class$1w, _class2$1i, _initializer$16, _initializer2$M, _initializer3$z, _initializer4$t, _initializer5$l, _initializer6$h, _initializer7$d, _initializer8$d, _initializer9$c, _initializer10$c, _initializer11$a, _initializer12$9, _initializer13$9, _class3$s, _temp$C;
      var LEFT_PADDING$1 = 2;

      function capitalize(str) {
        return str.replace(/(?:^|\s)\S/g, function (a) {
          return a.toUpperCase();
        });
      }

      function capitalizeFirstLetter(str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
      }

      var EventType$3;

      (function (EventType) {
        EventType["EDITING_DID_BEGAN"] = "editing-did-began";
        EventType["EDITING_DID_ENDED"] = "editing-did-ended";
        EventType["TEXT_CHANGED"] = "text-changed";
        EventType["EDITING_RETURN"] = "editing-return";
        EventType["XR_EDITING_DID_BEGAN"] = "xr-editing-did-began";
        EventType["XR_EDITING_DID_ENDED"] = "xr-editing-did-ended";
      })(EventType$3 || (EventType$3 = {}));

      var EditBox = exports('EditBox', (_dec$1t = ccclass('cc.EditBox'), _dec2$N = executionOrder(110), _dec3$s = requireComponent(UITransform), _dec4$f = type(Label), _dec5$c = type(Label), _dec6$a = type(SpriteFrame), _dec7$a = type(InputFlag), _dec8$6 = type(InputMode), _dec9$6 = type(KeyboardReturnType), _dec10$5 = type([EventHandler]), _dec11$4 = type([EventHandler]), _dec12$4 = type([EventHandler]), _dec13$4 = type([EventHandler]), _dec$1t(_class$1w = _dec2$N(_class$1w = _dec3$s(_class$1w = (_class2$1i = (_temp$C = _class3$s = function (_Component) {
        _inheritsLoose(EditBox, _Component);

        function EditBox() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.editingDidBegan = _initializer$16 && _initializer$16();
          _this.textChanged = _initializer2$M && _initializer2$M();
          _this.editingDidEnded = _initializer3$z && _initializer3$z();
          _this.editingReturn = _initializer4$t && _initializer4$t();
          _this._impl = null;
          _this._background = null;
          _this._textLabel = _initializer5$l && _initializer5$l();
          _this._placeholderLabel = _initializer6$h && _initializer6$h();
          _this._returnType = _initializer7$d && _initializer7$d();
          _this._string = _initializer8$d && _initializer8$d();
          _this._tabIndex = _initializer9$c && _initializer9$c();
          _this._backgroundImage = _initializer10$c && _initializer10$c();
          _this._inputFlag = _initializer11$a && _initializer11$a();
          _this._inputMode = _initializer12$9 && _initializer12$9();
          _this._maxLength = _initializer13$9 && _initializer13$9();
          _this._isLabelVisible = false;
          return _this;
        }

        var _proto = EditBox.prototype;

        _proto.__preload = function __preload() {
          this._init();
        };

        _proto.onEnable = function onEnable() {
          {
            this._registerEvent();
          }

          this._ensureBackgroundSprite();

          if (this._impl) {
            this._impl.onEnable();
          }
        };

        _proto.update = function update() {
          if (this._impl) {
            this._impl.update();
          }
        };

        _proto.onDisable = function onDisable() {
          {
            this._unregisterEvent();
          }

          this._unregisterBackgroundEvent();

          if (this._impl) {
            this._impl.onDisable();
          }
        };

        _proto.onDestroy = function onDestroy() {
          if (this._impl) {
            this._impl.clear();
          }
        };

        _proto.setFocus = function setFocus() {
          if (this._impl) {
            this._impl.setFocus(true);
          }
        };

        _proto.focus = function focus() {
          if (this._impl) {
            this._impl.setFocus(true);
          }
        };

        _proto.blur = function blur() {
          if (this._impl) {
            this._impl.setFocus(false);
          }
        };

        _proto.isFocused = function isFocused() {
          if (this._impl) {
            return this._impl.isFocused();
          }

          return false;
        };

        _proto._editBoxEditingDidBegan = function _editBoxEditingDidBegan() {
          EventHandler.emitEvents(this.editingDidBegan, this);
          this.node.emit(EventType$3.EDITING_DID_BEGAN, this);
        };

        _proto._editBoxEditingDidEnded = function _editBoxEditingDidEnded(text) {
          EventHandler.emitEvents(this.editingDidEnded, this);
          this.node.emit(EventType$3.EDITING_DID_ENDED, this, text);
        };

        _proto._editBoxTextChanged = function _editBoxTextChanged(text) {
          text = this._updateLabelStringStyle(text, true);
          this.string = text;
          EventHandler.emitEvents(this.textChanged, text, this);
          this.node.emit(EventType$3.TEXT_CHANGED, this);
        };

        _proto._editBoxEditingReturn = function _editBoxEditingReturn(text) {
          EventHandler.emitEvents(this.editingReturn, this);
          this.node.emit(EventType$3.EDITING_RETURN, this, text);
        };

        _proto._showLabels = function _showLabels() {
          this._isLabelVisible = true;

          this._updateLabels();
        };

        _proto._hideLabels = function _hideLabels() {
          this._isLabelVisible = false;

          if (this._textLabel) {
            this._textLabel.node.active = false;
          }

          if (this._placeholderLabel) {
            this._placeholderLabel.node.active = false;
          }
        };

        _proto._onTouchBegan = function _onTouchBegan(event) {
          event.propagationStopped = true;
        };

        _proto._onTouchCancel = function _onTouchCancel(event) {
          event.propagationStopped = true;
        };

        _proto._onTouchEnded = function _onTouchEnded(event) {
          if (this._impl) {
            this._impl.beginEditing();
          }

          event.propagationStopped = true;
        };

        _proto._init = function _init() {
          this._updatePlaceholderLabel();

          this._updateTextLabel();

          this._isLabelVisible = true;
          this.node.on(NodeEventType.SIZE_CHANGED, this._resizeChildNodes, this);
          var impl = this._impl = new EditBox._EditBoxImpl();
          impl.init(this);

          this._updateString(this._string);

          this._syncSize();
        };

        _proto._ensureBackgroundSprite = function _ensureBackgroundSprite() {
          if (!this._background) {
            var background = this.node.getComponent(Sprite);

            if (!background) {
              background = this.node.addComponent(Sprite);
            }

            if (background !== this._background) {
              background.type = Sprite.Type.SLICED;
              background.spriteFrame = this._backgroundImage;
              this._background = background;

              this._registerBackgroundEvent();
            }
          }
        };

        _proto._updateTextLabel = function _updateTextLabel() {
          var textLabel = this._textLabel;

          if (!textLabel) {
            var node = this.node.getChildByName('TEXT_LABEL');

            if (!node) {
              node = new Node$1('TEXT_LABEL');
              node.layer = this.node.layer;
            }

            textLabel = node.getComponent(Label);

            if (!textLabel) {
              textLabel = node.addComponent(Label);
            }

            node.parent = this.node;
            this._textLabel = textLabel;
          }

          var transformComp = this._textLabel.node._uiProps.uiTransformComp;
          transformComp.setAnchorPoint(0, 1);
          textLabel.overflow = Label.Overflow.CLAMP;

          if (this._inputMode === InputMode.ANY) {
            textLabel.verticalAlign = VerticalTextAlignment.TOP;
            textLabel.enableWrapText = true;
          } else {
            textLabel.enableWrapText = false;
          }

          textLabel.string = this._updateLabelStringStyle(this._string);
        };

        _proto._updatePlaceholderLabel = function _updatePlaceholderLabel() {
          var placeholderLabel = this._placeholderLabel;

          if (!placeholderLabel) {
            var node = this.node.getChildByName('PLACEHOLDER_LABEL');

            if (!node) {
              node = new Node$1('PLACEHOLDER_LABEL');
              node.layer = this.node.layer;
            }

            placeholderLabel = node.getComponent(Label);

            if (!placeholderLabel) {
              placeholderLabel = node.addComponent(Label);
            }

            node.parent = this.node;
            this._placeholderLabel = placeholderLabel;
          }

          var transform = this._placeholderLabel.node._uiProps.uiTransformComp;
          transform.setAnchorPoint(0, 1);

          if (this._inputMode === InputMode.ANY) {
            placeholderLabel.enableWrapText = true;
          } else {
            placeholderLabel.enableWrapText = false;
          }

          placeholderLabel.string = this.placeholder;
        };

        _proto._syncSize = function _syncSize() {
          var trans = this.node._uiProps.uiTransformComp;
          var size = trans.contentSize;

          if (this._background) {
            var bgTrans = this._background.node._uiProps.uiTransformComp;
            bgTrans.anchorPoint = trans.anchorPoint;
            bgTrans.setContentSize(size);
          }

          this._updateLabelPosition(size);

          if (this._impl) {
            this._impl.setSize(size.width, size.height);
          }
        };

        _proto._updateLabels = function _updateLabels() {
          if (this._isLabelVisible) {
            var content = this._string;

            if (this._textLabel) {
              this._textLabel.node.active = content !== '';
            }

            if (this._placeholderLabel) {
              this._placeholderLabel.node.active = content === '';
            }
          }
        };

        _proto._updateString = function _updateString(text) {
          var textLabel = this._textLabel;

          if (!textLabel) {
            return;
          }

          var displayText = text;

          if (displayText) {
            displayText = this._updateLabelStringStyle(displayText);
          }

          textLabel.string = displayText;

          this._updateLabels();
        };

        _proto._updateLabelStringStyle = function _updateLabelStringStyle(text, ignorePassword) {
          if (ignorePassword === void 0) {
            ignorePassword = false;
          }

          var inputFlag = this._inputFlag;

          if (!ignorePassword && inputFlag === InputFlag.PASSWORD) {
            var passwordString = '';
            var len = text.length;

            for (var i = 0; i < len; ++i) {
              passwordString += "\u25CF";
            }

            text = passwordString;
          } else if (inputFlag === InputFlag.INITIAL_CAPS_ALL_CHARACTERS) {
            text = text.toUpperCase();
          } else if (inputFlag === InputFlag.INITIAL_CAPS_WORD) {
            text = capitalize(text);
          } else if (inputFlag === InputFlag.INITIAL_CAPS_SENTENCE) {
            text = capitalizeFirstLetter(text);
          }

          return text;
        };

        _proto._registerEvent = function _registerEvent() {
          this.node.on(NodeEventType.TOUCH_START, this._onTouchBegan, this);
          this.node.on(NodeEventType.TOUCH_END, this._onTouchEnded, this);
          this.node.on(XrUIPressEventType.XRUI_UNCLICK, this._xrUnClick, this);
          this.node.on(XrKeyboardEventType.XR_KEYBOARD_INPUT, this._xrKeyBoardInput, this);
        };

        _proto._unregisterEvent = function _unregisterEvent() {
          this.node.off(NodeEventType.TOUCH_START, this._onTouchBegan, this);
          this.node.off(NodeEventType.TOUCH_END, this._onTouchEnded, this);
          this.node.off(XrUIPressEventType.XRUI_UNCLICK, this._xrUnClick, this);
          this.node.off(XrKeyboardEventType.XR_KEYBOARD_INPUT, this._xrKeyBoardInput, this);
        };

        _proto._onBackgroundSpriteFrameChanged = function _onBackgroundSpriteFrameChanged() {
          if (!this._background) {
            return;
          }

          this.backgroundImage = this._background.spriteFrame;
        };

        _proto._registerBackgroundEvent = function _registerBackgroundEvent() {
          var node = this._background && this._background.node;
          node === null || node === void 0 ? void 0 : node.on(Sprite.EventType.SPRITE_FRAME_CHANGED, this._onBackgroundSpriteFrameChanged, this);
        };

        _proto._unregisterBackgroundEvent = function _unregisterBackgroundEvent() {
          var node = this._background && this._background.node;
          node === null || node === void 0 ? void 0 : node.off(Sprite.EventType.SPRITE_FRAME_CHANGED, this._onBackgroundSpriteFrameChanged, this);
        };

        _proto._updateLabelPosition = function _updateLabelPosition(size) {
          var trans = this.node._uiProps.uiTransformComp;
          var offX = -trans.anchorX * trans.width;
          var offY = -trans.anchorY * trans.height;
          var placeholderLabel = this._placeholderLabel;
          var textLabel = this._textLabel;

          if (textLabel) {
            textLabel.node._uiProps.uiTransformComp.setContentSize(size.width - LEFT_PADDING$1, size.height);

            textLabel.node.setPosition(offX + LEFT_PADDING$1, offY + size.height, textLabel.node.position.z);

            if (this._inputMode === InputMode.ANY) {
              textLabel.verticalAlign = VerticalTextAlignment.TOP;
            }

            textLabel.enableWrapText = this._inputMode === InputMode.ANY;
          }

          if (placeholderLabel) {
            placeholderLabel.node._uiProps.uiTransformComp.setContentSize(size.width - LEFT_PADDING$1, size.height);

            placeholderLabel.lineHeight = size.height;
            placeholderLabel.node.setPosition(offX + LEFT_PADDING$1, offY + size.height, placeholderLabel.node.position.z);
            placeholderLabel.enableWrapText = this._inputMode === InputMode.ANY;
          }
        };

        _proto._resizeChildNodes = function _resizeChildNodes() {
          var trans = this.node._uiProps.uiTransformComp;
          var textLabelNode = this._textLabel && this._textLabel.node;

          if (textLabelNode) {
            textLabelNode.setPosition(-trans.width / 2, trans.height / 2, textLabelNode.position.z);

            textLabelNode._uiProps.uiTransformComp.setContentSize(trans.contentSize);
          }

          var placeholderLabelNode = this._placeholderLabel && this._placeholderLabel.node;

          if (placeholderLabelNode) {
            placeholderLabelNode.setPosition(-trans.width / 2, trans.height / 2, placeholderLabelNode.position.z);

            placeholderLabelNode._uiProps.uiTransformComp.setContentSize(trans.contentSize);
          }

          var backgroundNode = this._background && this._background.node;

          if (backgroundNode) {
            backgroundNode._uiProps.uiTransformComp.setContentSize(trans.contentSize);
          }

          this._syncSize();
        };

        _proto._xrUnClick = function _xrUnClick() {
          this.node.emit(EventType$3.XR_EDITING_DID_BEGAN, this._maxLength, this.string);
        };

        _proto._xrKeyBoardInput = function _xrKeyBoardInput(str) {
          this.string = str;
        };

        _createClass(EditBox, [{
          key: "string",
          get: function get() {
            return this._string;
          },
          set: function set(value) {
            if (this._maxLength >= 0 && value.length >= this._maxLength) {
              value = value.slice(0, this._maxLength);
            }

            if (this._string === value) {
              return;
            }

            this._string = value;

            this._updateString(value);
          }
        }, {
          key: "placeholder",
          get: function get() {
            if (!this._placeholderLabel) {
              return '';
            }

            return this._placeholderLabel.string;
          },
          set: function set(value) {
            if (this._placeholderLabel) {
              this._placeholderLabel.string = value;
            }
          }
        }, {
          key: "textLabel",
          get: function get() {
            return this._textLabel;
          },
          set: function set(oldValue) {
            if (this._textLabel !== oldValue) {
              this._textLabel = oldValue;

              if (this._textLabel) {
                this._updateTextLabel();

                this._updateLabels();
              }
            }
          }
        }, {
          key: "placeholderLabel",
          get: function get() {
            return this._placeholderLabel;
          },
          set: function set(oldValue) {
            if (this._placeholderLabel !== oldValue) {
              this._placeholderLabel = oldValue;

              if (this._placeholderLabel) {
                this._updatePlaceholderLabel();

                this._updateLabels();
              }
            }
          }
        }, {
          key: "backgroundImage",
          get: function get() {
            return this._backgroundImage;
          },
          set: function set(value) {
            if (this._backgroundImage === value) {
              return;
            }

            this._backgroundImage = value;

            this._ensureBackgroundSprite();

            this._background.spriteFrame = value;
          }
        }, {
          key: "inputFlag",
          get: function get() {
            return this._inputFlag;
          },
          set: function set(value) {
            if (this._inputFlag === value) {
              return;
            }

            this._inputFlag = value;

            this._updateString(this._string);
          }
        }, {
          key: "inputMode",
          get: function get() {
            return this._inputMode;
          },
          set: function set(oldValue) {
            if (this._inputMode !== oldValue) {
              this._inputMode = oldValue;

              this._updateTextLabel();

              this._updatePlaceholderLabel();
            }
          }
        }, {
          key: "returnType",
          get: function get() {
            return this._returnType;
          },
          set: function set(value) {
            this._returnType = value;
          }
        }, {
          key: "maxLength",
          get: function get() {
            return this._maxLength;
          },
          set: function set(value) {
            this._maxLength = value;
          }
        }, {
          key: "tabIndex",
          get: function get() {
            return this._tabIndex;
          },
          set: function set(value) {
            if (this._tabIndex !== value) {
              this._tabIndex = value;

              if (this._impl) {
                this._impl.setTabIndex(value);
              }
            }
          }
        }]);

        return EditBox;
      }(Component), _class3$s._EditBoxImpl = EditBoxImplBase, _class3$s.KeyboardReturnType = KeyboardReturnType, _class3$s.InputFlag = InputFlag, _class3$s.InputMode = InputMode, _class3$s.EventType = EventType$3, _temp$C), (_applyDecoratedDescriptor(_class2$1i.prototype, "textLabel", [_dec4$f], Object.getOwnPropertyDescriptor(_class2$1i.prototype, "textLabel"), _class2$1i.prototype), _applyDecoratedDescriptor(_class2$1i.prototype, "placeholderLabel", [_dec5$c], Object.getOwnPropertyDescriptor(_class2$1i.prototype, "placeholderLabel"), _class2$1i.prototype), _applyDecoratedDescriptor(_class2$1i.prototype, "backgroundImage", [_dec6$a], Object.getOwnPropertyDescriptor(_class2$1i.prototype, "backgroundImage"), _class2$1i.prototype), _applyDecoratedDescriptor(_class2$1i.prototype, "inputFlag", [_dec7$a], Object.getOwnPropertyDescriptor(_class2$1i.prototype, "inputFlag"), _class2$1i.prototype), _applyDecoratedDescriptor(_class2$1i.prototype, "inputMode", [_dec8$6], Object.getOwnPropertyDescriptor(_class2$1i.prototype, "inputMode"), _class2$1i.prototype), _applyDecoratedDescriptor(_class2$1i.prototype, "returnType", [_dec9$6], Object.getOwnPropertyDescriptor(_class2$1i.prototype, "returnType"), _class2$1i.prototype), _initializer$16 = applyDecoratedInitializer(_class2$1i.prototype, "editingDidBegan", [_dec10$5, serializable], function () {
        return [];
      }), _initializer2$M = applyDecoratedInitializer(_class2$1i.prototype, "textChanged", [_dec11$4, serializable], function () {
        return [];
      }), _initializer3$z = applyDecoratedInitializer(_class2$1i.prototype, "editingDidEnded", [_dec12$4, serializable], function () {
        return [];
      }), _initializer4$t = applyDecoratedInitializer(_class2$1i.prototype, "editingReturn", [_dec13$4, serializable], function () {
        return [];
      }), _initializer5$l = applyDecoratedInitializer(_class2$1i.prototype, "_textLabel", [serializable], function () {
        return null;
      }), _initializer6$h = applyDecoratedInitializer(_class2$1i.prototype, "_placeholderLabel", [serializable], function () {
        return null;
      }), _initializer7$d = applyDecoratedInitializer(_class2$1i.prototype, "_returnType", [serializable], function () {
        return KeyboardReturnType.DEFAULT;
      }), _initializer8$d = applyDecoratedInitializer(_class2$1i.prototype, "_string", [serializable], function () {
        return '';
      }), _initializer9$c = applyDecoratedInitializer(_class2$1i.prototype, "_tabIndex", [serializable], function () {
        return 0;
      }), _initializer10$c = applyDecoratedInitializer(_class2$1i.prototype, "_backgroundImage", [serializable], function () {
        return null;
      }), _initializer11$a = applyDecoratedInitializer(_class2$1i.prototype, "_inputFlag", [serializable], function () {
        return InputFlag.DEFAULT;
      }), _initializer12$9 = applyDecoratedInitializer(_class2$1i.prototype, "_inputMode", [serializable], function () {
        return InputMode.ANY;
      }), _initializer13$9 = applyDecoratedInitializer(_class2$1i.prototype, "_maxLength", [serializable], function () {
        return 20;
      })), _class2$1i)) || _class$1w) || _class$1w) || _class$1w));

      if (typeof window === 'object' && typeof document === 'object' && !MINIGAME && !JSB && !RUNTIME_BASED) {
        EditBox._EditBoxImpl = EditBoxImpl;
      }

      legacyCC.internal.EditBox = EditBox;

      var _dec$1u, _dec2$O, _dec3$t, _dec4$g, _dec5$d, _dec6$b, _dec7$b, _dec8$7, _dec9$7, _class$1x, _class2$1j, _initializer$17, _initializer2$N, _initializer3$A, _initializer4$u, _initializer5$m, _initializer6$i, _initializer7$e, _initializer8$e, _initializer9$d, _initializer10$d, _initializer11$b, _initializer12$a, _initializer13$a, _initializer14$7, _initializer15$6, _initializer16$6, _class3$t, _temp$D;
      var Type$1;

      (function (Type) {
        Type[Type["NONE"] = 0] = "NONE";
        Type[Type["HORIZONTAL"] = 1] = "HORIZONTAL";
        Type[Type["VERTICAL"] = 2] = "VERTICAL";
        Type[Type["GRID"] = 3] = "GRID";
      })(Type$1 || (Type$1 = {}));

      ccenum(Type$1);
      var ResizeMode;

      (function (ResizeMode) {
        ResizeMode[ResizeMode["NONE"] = 0] = "NONE";
        ResizeMode[ResizeMode["CONTAINER"] = 1] = "CONTAINER";
        ResizeMode[ResizeMode["CHILDREN"] = 2] = "CHILDREN";
      })(ResizeMode || (ResizeMode = {}));

      ccenum(ResizeMode);
      var AxisDirection;

      (function (AxisDirection) {
        AxisDirection[AxisDirection["HORIZONTAL"] = 0] = "HORIZONTAL";
        AxisDirection[AxisDirection["VERTICAL"] = 1] = "VERTICAL";
      })(AxisDirection || (AxisDirection = {}));

      ccenum(AxisDirection);
      var VerticalDirection;

      (function (VerticalDirection) {
        VerticalDirection[VerticalDirection["BOTTOM_TO_TOP"] = 0] = "BOTTOM_TO_TOP";
        VerticalDirection[VerticalDirection["TOP_TO_BOTTOM"] = 1] = "TOP_TO_BOTTOM";
      })(VerticalDirection || (VerticalDirection = {}));

      ccenum(VerticalDirection);
      var HorizontalDirection;

      (function (HorizontalDirection) {
        HorizontalDirection[HorizontalDirection["LEFT_TO_RIGHT"] = 0] = "LEFT_TO_RIGHT";
        HorizontalDirection[HorizontalDirection["RIGHT_TO_LEFT"] = 1] = "RIGHT_TO_LEFT";
      })(HorizontalDirection || (HorizontalDirection = {}));

      ccenum(HorizontalDirection);
      var Constraint;

      (function (Constraint) {
        Constraint[Constraint["NONE"] = 0] = "NONE";
        Constraint[Constraint["FIXED_ROW"] = 1] = "FIXED_ROW";
        Constraint[Constraint["FIXED_COL"] = 2] = "FIXED_COL";
      })(Constraint || (Constraint = {}));

      ccenum(Constraint);

      var _tempVec3$2 = new Vec3();

      var Layout = exports('Layout', (_dec$1u = ccclass('cc.Layout'), _dec2$O = executionOrder(110), _dec3$t = requireComponent(UITransform), _dec4$g = type(Type$1), _dec5$d = type(ResizeMode), _dec6$b = type(AxisDirection), _dec7$b = type(VerticalDirection), _dec8$7 = type(HorizontalDirection), _dec9$7 = type(Constraint), _dec$1u(_class$1x = _dec2$O(_class$1x = _dec3$t(_class$1x = (_class2$1j = (_temp$D = _class3$t = function (_Component) {
        _inheritsLoose(Layout, _Component);

        function Layout() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._resizeMode = _initializer$17 && _initializer$17();
          _this._layoutType = _initializer2$N && _initializer2$N();
          _this._cellSize = _initializer3$A && _initializer3$A();
          _this._startAxis = _initializer4$u && _initializer4$u();
          _this._paddingLeft = _initializer5$m && _initializer5$m();
          _this._paddingRight = _initializer6$i && _initializer6$i();
          _this._paddingTop = _initializer7$e && _initializer7$e();
          _this._paddingBottom = _initializer8$e && _initializer8$e();
          _this._spacingX = _initializer9$d && _initializer9$d();
          _this._spacingY = _initializer10$d && _initializer10$d();
          _this._verticalDirection = _initializer11$b && _initializer11$b();
          _this._horizontalDirection = _initializer12$a && _initializer12$a();
          _this._constraint = _initializer13$a && _initializer13$a();
          _this._constraintNum = _initializer14$7 && _initializer14$7();
          _this._affectedByScale = _initializer15$6 && _initializer15$6();
          _this._isAlign = _initializer16$6 && _initializer16$6();
          _this._layoutSize = new Size(300, 200);
          _this._layoutDirty = true;
          _this._childrenDirty = false;
          _this._usefulLayoutObj = [];
          _this._init = false;
          return _this;
        }

        var _proto = Layout.prototype;

        _proto.updateLayout = function updateLayout(force) {
          if (force === void 0) {
            force = false;
          }

          if (this._layoutDirty || force) {
            this._doLayout();

            this._layoutDirty = false;
          }
        };

        _proto.onEnable = function onEnable() {
          this._addEventListeners();

          var trans = this.node._uiProps.uiTransformComp;

          if (trans.contentSize.equals(Size.ZERO)) {
            trans.setContentSize(this._layoutSize);
          }

          this._childrenChanged();
        };

        _proto.onDisable = function onDisable() {
          this._usefulLayoutObj.length = 0;

          this._removeEventListeners();
        };

        _proto._checkUsefulObj = function _checkUsefulObj() {
          this._usefulLayoutObj.length = 0;
          var children = this.node.children;

          for (var i = 0; i < children.length; ++i) {
            var child = children[i];
            var uiTrans = child._uiProps.uiTransformComp;

            if (child.activeInHierarchy && uiTrans) {
              this._usefulLayoutObj.push(uiTrans);
            }
          }
        };

        _proto._addEventListeners = function _addEventListeners() {
          director.on(Director.EVENT_AFTER_UPDATE, this.updateLayout, this);
          this.node.on(NodeEventType.SIZE_CHANGED, this._resized, this);
          this.node.on(NodeEventType.ANCHOR_CHANGED, this._doLayoutDirty, this);
          this.node.on(NodeEventType.CHILD_ADDED, this._childAdded, this);
          this.node.on(NodeEventType.CHILD_REMOVED, this._childRemoved, this);
          this.node.on(NodeEventType.SIBLING_ORDER_CHANGED, this._childrenChanged, this);
          this.node.on('childrenSiblingOrderChanged', this.updateLayout, this);

          this._addChildrenEventListeners();
        };

        _proto._removeEventListeners = function _removeEventListeners() {
          director.off(Director.EVENT_AFTER_UPDATE, this.updateLayout, this);
          this.node.off(NodeEventType.SIZE_CHANGED, this._resized, this);
          this.node.off(NodeEventType.ANCHOR_CHANGED, this._doLayoutDirty, this);
          this.node.off(NodeEventType.CHILD_ADDED, this._childAdded, this);
          this.node.off(NodeEventType.CHILD_REMOVED, this._childRemoved, this);
          this.node.off(NodeEventType.SIBLING_ORDER_CHANGED, this._childrenChanged, this);
          this.node.off('childrenSiblingOrderChanged', this.updateLayout, this);

          this._removeChildrenEventListeners();
        };

        _proto._addChildrenEventListeners = function _addChildrenEventListeners() {
          var children = this.node.children;

          for (var i = 0; i < children.length; ++i) {
            var child = children[i];
            child.on(NodeEventType.SIZE_CHANGED, this._doLayoutDirty, this);
            child.on(NodeEventType.TRANSFORM_CHANGED, this._transformDirty, this);
            child.on(NodeEventType.ANCHOR_CHANGED, this._doLayoutDirty, this);
            child.on(NodeEventType.ACTIVE_IN_HIERARCHY_CHANGED, this._childrenChanged, this);
          }
        };

        _proto._removeChildrenEventListeners = function _removeChildrenEventListeners() {
          var children = this.node.children;

          for (var i = 0; i < children.length; ++i) {
            var child = children[i];
            child.off(NodeEventType.SIZE_CHANGED, this._doLayoutDirty, this);
            child.off(NodeEventType.TRANSFORM_CHANGED, this._transformDirty, this);
            child.off(NodeEventType.ANCHOR_CHANGED, this._doLayoutDirty, this);
            child.off(NodeEventType.ACTIVE_IN_HIERARCHY_CHANGED, this._childrenChanged, this);
          }
        };

        _proto._childAdded = function _childAdded(child) {
          child.on(NodeEventType.SIZE_CHANGED, this._doLayoutDirty, this);
          child.on(NodeEventType.TRANSFORM_CHANGED, this._transformDirty, this);
          child.on(NodeEventType.ANCHOR_CHANGED, this._doLayoutDirty, this);
          child.on(NodeEventType.ACTIVE_IN_HIERARCHY_CHANGED, this._childrenChanged, this);

          this._childrenChanged();
        };

        _proto._childRemoved = function _childRemoved(child) {
          child.off(NodeEventType.SIZE_CHANGED, this._doLayoutDirty, this);
          child.off(NodeEventType.TRANSFORM_CHANGED, this._transformDirty, this);
          child.off(NodeEventType.ANCHOR_CHANGED, this._doLayoutDirty, this);
          child.off(NodeEventType.ACTIVE_IN_HIERARCHY_CHANGED, this._childrenChanged, this);

          this._childrenChanged();
        };

        _proto._resized = function _resized() {
          this._layoutSize.set(this.node._uiProps.uiTransformComp.contentSize);

          this._doLayoutDirty();
        };

        _proto._doLayoutHorizontally = function _doLayoutHorizontally(baseWidth, rowBreak, fnPositionY, applyChildren) {
          var trans = this.node._uiProps.uiTransformComp;
          var layoutAnchor = trans.anchorPoint;

          var limit = this._getFixedBreakingNum();

          var sign = 1;
          var paddingX = this._paddingLeft;

          if (this._horizontalDirection === HorizontalDirection.RIGHT_TO_LEFT) {
            sign = -1;
            paddingX = this._paddingRight;
          }

          var startPos = (this._horizontalDirection - layoutAnchor.x) * baseWidth + sign * paddingX;
          var nextX = startPos - sign * this._spacingX;
          var totalHeight = 0;
          var rowMaxHeight = 0;
          var tempMaxHeight = 0;
          var maxHeight = 0;
          var isBreak = false;
          var activeChildCount = this._usefulLayoutObj.length;
          var newChildWidth = this._cellSize.width;

          var paddingH = this._getPaddingH();

          if (this._layoutType !== Type$1.GRID && this._resizeMode === ResizeMode.CHILDREN) {
            newChildWidth = (baseWidth - paddingH - (activeChildCount - 1) * this._spacingX) / activeChildCount;
          }

          var children = this._usefulLayoutObj;

          for (var i = 0; i < children.length; ++i) {
            var childTrans = children[i];
            var child = childTrans.node;
            var scale = child.scale;

            var childScaleX = this._getUsedScaleValue(scale.x);

            var childScaleY = this._getUsedScaleValue(scale.y);

            if (this._resizeMode === ResizeMode.CHILDREN) {
              childTrans.width = newChildWidth / childScaleX;

              if (this._layoutType === Type$1.GRID) {
                childTrans.height = this._cellSize.height / childScaleY;
              }
            }

            var anchorX = Math.abs(this._horizontalDirection - childTrans.anchorX);
            var childBoundingBoxWidth = childTrans.width * childScaleX;
            var childBoundingBoxHeight = childTrans.height * childScaleY;

            if (childBoundingBoxHeight > tempMaxHeight) {
              maxHeight = Math.max(tempMaxHeight, maxHeight);
              rowMaxHeight = tempMaxHeight || childBoundingBoxHeight;
              tempMaxHeight = childBoundingBoxHeight;
            }

            nextX += sign * (anchorX * childBoundingBoxWidth + this._spacingX);
            var rightBoundaryOfChild = sign * (1 - anchorX) * childBoundingBoxWidth;

            if (rowBreak) {
              if (limit > 0) {
                isBreak = i / limit > 0 && i % limit === 0;

                if (isBreak) {
                  rowMaxHeight = tempMaxHeight > childBoundingBoxHeight ? tempMaxHeight : rowMaxHeight;
                }
              } else if (childBoundingBoxWidth > baseWidth - paddingH) {
                if (nextX > startPos + sign * (anchorX * childBoundingBoxWidth)) {
                  isBreak = true;
                }
              } else {
                var boundary = (1 - this._horizontalDirection - layoutAnchor.x) * baseWidth;
                var rowBreakBoundary = nextX + rightBoundaryOfChild + sign * (sign > 0 ? this._paddingRight : this._paddingLeft);
                isBreak = Math.abs(rowBreakBoundary) > Math.abs(boundary);
              }

              if (isBreak) {
                nextX = startPos + sign * (anchorX * childBoundingBoxWidth);

                if (childBoundingBoxHeight !== tempMaxHeight) {
                  rowMaxHeight = tempMaxHeight;
                }

                totalHeight += rowMaxHeight + this._spacingY;
                rowMaxHeight = tempMaxHeight = childBoundingBoxHeight;
              }
            }

            var finalPositionY = fnPositionY(child, childTrans, totalHeight);

            if (applyChildren) {
              child.setPosition(nextX, finalPositionY);
            }

            nextX += rightBoundaryOfChild;
          }

          rowMaxHeight = Math.max(rowMaxHeight, tempMaxHeight);

          var containerResizeBoundary = Math.max(maxHeight, totalHeight + rowMaxHeight) + this._getPaddingV();

          return containerResizeBoundary;
        };

        _proto._doLayoutVertically = function _doLayoutVertically(baseHeight, columnBreak, fnPositionX, applyChildren) {
          var trans = this.node._uiProps.uiTransformComp;
          var layoutAnchor = trans.anchorPoint;

          var limit = this._getFixedBreakingNum();

          var sign = 1;
          var paddingY = this._paddingBottom;

          if (this._verticalDirection === VerticalDirection.TOP_TO_BOTTOM) {
            sign = -1;
            paddingY = this._paddingTop;
          }

          var startPos = (this._verticalDirection - layoutAnchor.y) * baseHeight + sign * paddingY;
          var nextY = startPos - sign * this._spacingY;
          var tempMaxWidth = 0;
          var maxWidth = 0;
          var colMaxWidth = 0;
          var totalWidth = 0;
          var isBreak = false;
          var activeChildCount = this._usefulLayoutObj.length;
          var newChildHeight = this._cellSize.height;

          var paddingV = this._getPaddingV();

          if (this._layoutType !== Type$1.GRID && this._resizeMode === ResizeMode.CHILDREN) {
            newChildHeight = (baseHeight - paddingV - (activeChildCount - 1) * this._spacingY) / activeChildCount;
          }

          var children = this._usefulLayoutObj;

          for (var i = 0; i < children.length; ++i) {
            var childTrans = children[i];
            var child = childTrans.node;
            var scale = child.scale;

            var childScaleX = this._getUsedScaleValue(scale.x);

            var childScaleY = this._getUsedScaleValue(scale.y);

            if (this._resizeMode === ResizeMode.CHILDREN) {
              childTrans.height = newChildHeight / childScaleY;

              if (this._layoutType === Type$1.GRID) {
                childTrans.width = this._cellSize.width / childScaleX;
              }
            }

            var anchorY = Math.abs(this._verticalDirection - childTrans.anchorY);
            var childBoundingBoxWidth = childTrans.width * childScaleX;
            var childBoundingBoxHeight = childTrans.height * childScaleY;

            if (childBoundingBoxWidth > tempMaxWidth) {
              maxWidth = Math.max(tempMaxWidth, maxWidth);
              colMaxWidth = tempMaxWidth || childBoundingBoxWidth;
              tempMaxWidth = childBoundingBoxWidth;
            }

            nextY += sign * (anchorY * childBoundingBoxHeight + this._spacingY);
            var topBoundaryOfChild = sign * (1 - anchorY) * childBoundingBoxHeight;

            if (columnBreak) {
              if (limit > 0) {
                isBreak = i / limit > 0 && i % limit === 0;

                if (isBreak) {
                  colMaxWidth = tempMaxWidth > childBoundingBoxHeight ? tempMaxWidth : colMaxWidth;
                }
              } else if (childBoundingBoxHeight > baseHeight - paddingV) {
                if (nextY > startPos + sign * (anchorY * childBoundingBoxHeight)) {
                  isBreak = true;
                }
              } else {
                var boundary = (1 - this._verticalDirection - layoutAnchor.y) * baseHeight;
                var columnBreakBoundary = nextY + topBoundaryOfChild + sign * (sign > 0 ? this._paddingTop : this._paddingBottom);
                isBreak = Math.abs(columnBreakBoundary) > Math.abs(boundary);
              }

              if (isBreak) {
                nextY = startPos + sign * (anchorY * childBoundingBoxHeight);

                if (childBoundingBoxWidth !== tempMaxWidth) {
                  colMaxWidth = tempMaxWidth;
                }

                totalWidth += colMaxWidth + this._spacingX;
                colMaxWidth = tempMaxWidth = childBoundingBoxWidth;
              }
            }

            var finalPositionX = fnPositionX(child, childTrans, totalWidth);

            if (applyChildren) {
              child.getPosition(_tempVec3$2);
              child.setPosition(finalPositionX, nextY, _tempVec3$2.z);
            }

            nextY += topBoundaryOfChild;
          }

          colMaxWidth = Math.max(colMaxWidth, tempMaxWidth);

          var containerResizeBoundary = Math.max(maxWidth, totalWidth + colMaxWidth) + this._getPaddingH();

          return containerResizeBoundary;
        };

        _proto._doLayoutGridAxisHorizontal = function _doLayoutGridAxisHorizontal(layoutAnchor, layoutSize) {
          var _this2 = this;

          var baseWidth = layoutSize.width;
          var sign = 1;
          var bottomBoundaryOfLayout = -layoutAnchor.y * layoutSize.height;
          var paddingY = this._paddingBottom;

          if (this._verticalDirection === VerticalDirection.TOP_TO_BOTTOM) {
            sign = -1;
            bottomBoundaryOfLayout = (1 - layoutAnchor.y) * layoutSize.height;
            paddingY = this._paddingTop;
          }

          var fnPositionY = function fnPositionY(child, childTrans, topOffset) {
            return bottomBoundaryOfLayout + sign * (topOffset + (1 - childTrans.anchorY) * childTrans.height * _this2._getUsedScaleValue(child.scale.y) + paddingY);
          };

          var newHeight = 0;

          if (this._resizeMode === ResizeMode.CONTAINER) {
            newHeight = this._doLayoutHorizontally(baseWidth, true, fnPositionY, false);
            bottomBoundaryOfLayout = -layoutAnchor.y * newHeight;

            if (this._verticalDirection === VerticalDirection.TOP_TO_BOTTOM) {
              sign = -1;
              bottomBoundaryOfLayout = (1 - layoutAnchor.y) * newHeight;
            }
          }

          this._doLayoutHorizontally(baseWidth, true, fnPositionY, true);

          if (this._resizeMode === ResizeMode.CONTAINER) {
            this.node._uiProps.uiTransformComp.setContentSize(baseWidth, newHeight);
          }
        };

        _proto._doLayoutGridAxisVertical = function _doLayoutGridAxisVertical(layoutAnchor, layoutSize) {
          var _this3 = this;

          var baseHeight = layoutSize.height;
          var sign = 1;
          var leftBoundaryOfLayout = -layoutAnchor.x * layoutSize.width;
          var paddingX = this._paddingLeft;

          if (this._horizontalDirection === HorizontalDirection.RIGHT_TO_LEFT) {
            sign = -1;
            leftBoundaryOfLayout = (1 - layoutAnchor.x) * layoutSize.width;
            paddingX = this._paddingRight;
          }

          var fnPositionX = function fnPositionX(child, childTrans, leftOffset) {
            return leftBoundaryOfLayout + sign * (leftOffset + (1 - childTrans.anchorX) * childTrans.width * _this3._getUsedScaleValue(child.scale.x) + paddingX);
          };

          var newWidth = 0;

          if (this._resizeMode === ResizeMode.CONTAINER) {
            newWidth = this._doLayoutVertically(baseHeight, true, fnPositionX, false);
            leftBoundaryOfLayout = -layoutAnchor.x * newWidth;

            if (this._horizontalDirection === HorizontalDirection.RIGHT_TO_LEFT) {
              sign = -1;
              leftBoundaryOfLayout = (1 - layoutAnchor.x) * newWidth;
            }
          }

          this._doLayoutVertically(baseHeight, true, fnPositionX, true);

          if (this._resizeMode === ResizeMode.CONTAINER) {
            this.node._uiProps.uiTransformComp.setContentSize(newWidth, baseHeight);
          }
        };

        _proto._doLayoutGrid = function _doLayoutGrid() {
          var trans = this.node._uiProps.uiTransformComp;
          var layoutAnchor = trans.anchorPoint;
          var layoutSize = trans.contentSize;

          if (this.startAxis === AxisDirection.HORIZONTAL) {
            this._doLayoutGridAxisHorizontal(layoutAnchor, layoutSize);
          } else if (this.startAxis === AxisDirection.VERTICAL) {
            this._doLayoutGridAxisVertical(layoutAnchor, layoutSize);
          }
        };

        _proto._getHorizontalBaseWidth = function _getHorizontalBaseWidth(horizontal) {

          var children = this._usefulLayoutObj;
          var baseSize = 0;
          var activeChildCount = children.length;

          if (this._resizeMode === ResizeMode.CONTAINER) {
            for (var i = 0; i < children.length; ++i) {
              var childTrans = children[i];
              var child = childTrans.node;
              var scale = child.scale;
              baseSize += childTrans.width * this._getUsedScaleValue(scale.x);
            }

            baseSize += (activeChildCount - 1) * this._spacingX + this._getPaddingH();
          } else {
            baseSize = this.node._uiProps.uiTransformComp.width;
          }

          return baseSize;
        };

        _proto._getVerticalBaseHeight = function _getVerticalBaseHeight() {
          var children = this._usefulLayoutObj;
          var baseSize = 0;
          var activeChildCount = children.length;

          if (this._resizeMode === ResizeMode.CONTAINER) {
            for (var i = 0; i < children.length; ++i) {
              var childTrans = children[i];
              var child = childTrans.node;
              var scale = child.scale;
              baseSize += childTrans.height * this._getUsedScaleValue(scale.y);
            }

            baseSize += (activeChildCount - 1) * this._spacingY + this._getPaddingV();
          } else {
            baseSize = this.node._uiProps.uiTransformComp.height;
          }

          return baseSize;
        };

        _proto._doLayout = function _doLayout() {
          var _this4 = this;

          if (!this._init || this._childrenDirty) {
            this._checkUsefulObj();

            this._init = true;
            this._childrenDirty = false;
          }

          if (this._layoutType === Type$1.HORIZONTAL) {
            var newWidth = this._getHorizontalBaseWidth();

            var fnPositionY = function fnPositionY(child) {
              var pos = _this4._isAlign ? Vec3.ZERO : child.position;
              return pos.y;
            };

            this._doLayoutHorizontally(newWidth, false, fnPositionY, true);

            this.node._uiProps.uiTransformComp.width = newWidth;
          } else if (this._layoutType === Type$1.VERTICAL) {
            var newHeight = this._getVerticalBaseHeight();

            var fnPositionX = function fnPositionX(child) {
              var pos = _this4._isAlign ? Vec3.ZERO : child.position;
              return pos.x;
            };

            this._doLayoutVertically(newHeight, false, fnPositionX, true);

            this.node._uiProps.uiTransformComp.height = newHeight;
          } else if (this._layoutType === Type$1.GRID) {
            this._doLayoutGrid();
          }
        };

        _proto._getUsedScaleValue = function _getUsedScaleValue(value) {
          return this._affectedByScale ? Math.abs(value) : 1;
        };

        _proto._transformDirty = function _transformDirty(type) {
          if (!(type & TransformBit.SCALE) || !(type & TransformBit.POSITION) || !this._affectedByScale) {
            return;
          }

          this._doLayoutDirty();
        };

        _proto._doLayoutDirty = function _doLayoutDirty() {
          this._layoutDirty = true;
        };

        _proto._childrenChanged = function _childrenChanged() {
          this._childrenDirty = true;

          this._doLayoutDirty();
        };

        _proto._getPaddingH = function _getPaddingH() {
          return this._paddingLeft + this._paddingRight;
        };

        _proto._getPaddingV = function _getPaddingV() {
          return this._paddingTop + this._paddingBottom;
        };

        _proto._getFixedBreakingNum = function _getFixedBreakingNum() {
          if (this._layoutType !== Type$1.GRID || this._constraint === Constraint.NONE || this._constraintNum <= 0) {
            return 0;
          }

          var num = this._constraint === Constraint.FIXED_ROW ? Math.ceil(this._usefulLayoutObj.length / this._constraintNum) : this._constraintNum;

          if (this._startAxis === AxisDirection.VERTICAL) {
            num = this._constraint === Constraint.FIXED_COL ? Math.ceil(this._usefulLayoutObj.length / this._constraintNum) : this._constraintNum;
          }

          return num;
        };

        _createClass(Layout, [{
          key: "alignHorizontal",
          get: function get() {
            return this._isAlign;
          },
          set: function set(value) {
            if (this._layoutType !== Type$1.HORIZONTAL) {
              return;
            }

            this._isAlign = value;

            this._doLayoutDirty();
          }
        }, {
          key: "alignVertical",
          get: function get() {
            return this._isAlign;
          },
          set: function set(value) {
            if (this._layoutType !== Type$1.VERTICAL) {
              return;
            }

            this._isAlign = value;

            this._doLayoutDirty();
          }
        }, {
          key: "type",
          get: function get() {
            return this._layoutType;
          },
          set: function set(value) {
            this._layoutType = value;

            this._doLayoutDirty();
          }
        }, {
          key: "resizeMode",
          get: function get() {
            return this._resizeMode;
          },
          set: function set(value) {
            if (this._layoutType === Type$1.NONE) {
              return;
            }

            this._resizeMode = value;

            this._doLayoutDirty();
          }
        }, {
          key: "cellSize",
          get: function get() {
            return this._cellSize;
          },
          set: function set(value) {
            if (this._cellSize === value) {
              return;
            }

            this._cellSize.set(value);

            this._doLayoutDirty();
          }
        }, {
          key: "startAxis",
          get: function get() {
            return this._startAxis;
          },
          set: function set(value) {
            if (this._startAxis === value) {
              return;
            }

            this._startAxis = value;

            this._doLayoutDirty();
          }
        }, {
          key: "paddingLeft",
          get: function get() {
            return this._paddingLeft;
          },
          set: function set(value) {
            if (this._paddingLeft === value) {
              return;
            }

            this._paddingLeft = value;

            this._doLayoutDirty();
          }
        }, {
          key: "paddingRight",
          get: function get() {
            return this._paddingRight;
          },
          set: function set(value) {
            if (this._paddingRight === value) {
              return;
            }

            this._paddingRight = value;

            this._doLayoutDirty();
          }
        }, {
          key: "paddingTop",
          get: function get() {
            return this._paddingTop;
          },
          set: function set(value) {
            if (this._paddingTop === value) {
              return;
            }

            this._paddingTop = value;

            this._doLayoutDirty();
          }
        }, {
          key: "paddingBottom",
          get: function get() {
            return this._paddingBottom;
          },
          set: function set(value) {
            if (this._paddingBottom === value) {
              return;
            }

            this._paddingBottom = value;

            this._doLayoutDirty();
          }
        }, {
          key: "spacingX",
          get: function get() {
            return this._spacingX;
          },
          set: function set(value) {
            if (this._spacingX === value) {
              return;
            }

            this._spacingX = value;

            this._doLayoutDirty();
          }
        }, {
          key: "spacingY",
          get: function get() {
            return this._spacingY;
          },
          set: function set(value) {
            if (this._spacingY === value) {
              return;
            }

            this._spacingY = value;

            this._doLayoutDirty();
          }
        }, {
          key: "verticalDirection",
          get: function get() {
            return this._verticalDirection;
          },
          set: function set(value) {
            if (this._verticalDirection === value) {
              return;
            }

            this._verticalDirection = value;

            this._doLayoutDirty();
          }
        }, {
          key: "horizontalDirection",
          get: function get() {
            return this._horizontalDirection;
          },
          set: function set(value) {
            if (this._horizontalDirection === value) {
              return;
            }

            this._horizontalDirection = value;

            this._doLayoutDirty();
          }
        }, {
          key: "padding",
          get: function get() {
            return this._paddingLeft;
          },
          set: function set(value) {
            if (this.paddingLeft !== value || this._paddingRight !== value || this._paddingTop !== value || this._paddingBottom !== value) {
              this._paddingLeft = this._paddingRight = this._paddingTop = this._paddingBottom = value;

              this._doLayoutDirty();
            }
          }
        }, {
          key: "constraint",
          get: function get() {
            return this._constraint;
          },
          set: function set(value) {
            if (this._layoutType === Type$1.NONE || this._constraint === value) {
              return;
            }

            this._constraint = value;

            this._doLayoutDirty();
          }
        }, {
          key: "constraintNum",
          get: function get() {
            return this._constraintNum;
          },
          set: function set(value) {
            if (this._constraint === Constraint.NONE || this._constraintNum === value) {
              return;
            }

            if (value <= 0) {
              warn('Limit values to be greater than 0');
            }

            this._constraintNum = value;

            this._doLayoutDirty();
          }
        }, {
          key: "affectedByScale",
          get: function get() {
            return this._affectedByScale;
          },
          set: function set(value) {
            this._affectedByScale = value;

            this._doLayoutDirty();
          }
        }]);

        return Layout;
      }(Component), _class3$t.Type = Type$1, _class3$t.VerticalDirection = VerticalDirection, _class3$t.HorizontalDirection = HorizontalDirection, _class3$t.ResizeMode = ResizeMode, _class3$t.AxisDirection = AxisDirection, _class3$t.Constraint = Constraint, _temp$D), (_applyDecoratedDescriptor(_class2$1j.prototype, "type", [_dec4$g], Object.getOwnPropertyDescriptor(_class2$1j.prototype, "type"), _class2$1j.prototype), _applyDecoratedDescriptor(_class2$1j.prototype, "resizeMode", [_dec5$d], Object.getOwnPropertyDescriptor(_class2$1j.prototype, "resizeMode"), _class2$1j.prototype), _applyDecoratedDescriptor(_class2$1j.prototype, "startAxis", [_dec6$b], Object.getOwnPropertyDescriptor(_class2$1j.prototype, "startAxis"), _class2$1j.prototype), _applyDecoratedDescriptor(_class2$1j.prototype, "verticalDirection", [_dec7$b], Object.getOwnPropertyDescriptor(_class2$1j.prototype, "verticalDirection"), _class2$1j.prototype), _applyDecoratedDescriptor(_class2$1j.prototype, "horizontalDirection", [_dec8$7], Object.getOwnPropertyDescriptor(_class2$1j.prototype, "horizontalDirection"), _class2$1j.prototype), _applyDecoratedDescriptor(_class2$1j.prototype, "constraint", [_dec9$7], Object.getOwnPropertyDescriptor(_class2$1j.prototype, "constraint"), _class2$1j.prototype), _initializer$17 = applyDecoratedInitializer(_class2$1j.prototype, "_resizeMode", [serializable], function () {
        return ResizeMode.NONE;
      }), _initializer2$N = applyDecoratedInitializer(_class2$1j.prototype, "_layoutType", [serializable], function () {
        return Type$1.NONE;
      }), _initializer3$A = applyDecoratedInitializer(_class2$1j.prototype, "_cellSize", [serializable], function () {
        return new Size(40, 40);
      }), _initializer4$u = applyDecoratedInitializer(_class2$1j.prototype, "_startAxis", [serializable], function () {
        return AxisDirection.HORIZONTAL;
      }), _initializer5$m = applyDecoratedInitializer(_class2$1j.prototype, "_paddingLeft", [serializable], function () {
        return 0;
      }), _initializer6$i = applyDecoratedInitializer(_class2$1j.prototype, "_paddingRight", [serializable], function () {
        return 0;
      }), _initializer7$e = applyDecoratedInitializer(_class2$1j.prototype, "_paddingTop", [serializable], function () {
        return 0;
      }), _initializer8$e = applyDecoratedInitializer(_class2$1j.prototype, "_paddingBottom", [serializable], function () {
        return 0;
      }), _initializer9$d = applyDecoratedInitializer(_class2$1j.prototype, "_spacingX", [serializable], function () {
        return 0;
      }), _initializer10$d = applyDecoratedInitializer(_class2$1j.prototype, "_spacingY", [serializable], function () {
        return 0;
      }), _initializer11$b = applyDecoratedInitializer(_class2$1j.prototype, "_verticalDirection", [serializable], function () {
        return VerticalDirection.TOP_TO_BOTTOM;
      }), _initializer12$a = applyDecoratedInitializer(_class2$1j.prototype, "_horizontalDirection", [serializable], function () {
        return HorizontalDirection.LEFT_TO_RIGHT;
      }), _initializer13$a = applyDecoratedInitializer(_class2$1j.prototype, "_constraint", [serializable], function () {
        return Constraint.NONE;
      }), _initializer14$7 = applyDecoratedInitializer(_class2$1j.prototype, "_constraintNum", [serializable], function () {
        return 2;
      }), _initializer15$6 = applyDecoratedInitializer(_class2$1j.prototype, "_affectedByScale", [serializable], function () {
        return false;
      }), _initializer16$6 = applyDecoratedInitializer(_class2$1j.prototype, "_isAlign", [serializable], function () {
        return false;
      })), _class2$1j)) || _class$1x) || _class$1x) || _class$1x));
      legacyCC.Layout = Layout;

      var _dec$1v, _dec2$P, _dec3$u, _dec4$h, _dec5$e, _class$1y, _class2$1k, _initializer$18, _initializer2$O, _initializer3$B, _initializer4$v, _initializer5$n, _class3$u, _temp$E;
      var Mode;

      (function (Mode) {
        Mode[Mode["HORIZONTAL"] = 0] = "HORIZONTAL";
        Mode[Mode["VERTICAL"] = 1] = "VERTICAL";
        Mode[Mode["FILLED"] = 2] = "FILLED";
      })(Mode || (Mode = {}));

      Enum(Mode);
      var ProgressBar = exports('ProgressBar', (_dec$1v = ccclass('cc.ProgressBar'), _dec2$P = executionOrder(110), _dec3$u = requireComponent(UITransform), _dec4$h = type(Sprite), _dec5$e = type(Mode), _dec$1v(_class$1y = _dec2$P(_class$1y = _dec3$u(_class$1y = (_class2$1k = (_temp$E = _class3$u = function (_Component) {
        _inheritsLoose(ProgressBar, _Component);

        function ProgressBar() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._barSprite = _initializer$18 && _initializer$18();
          _this._mode = _initializer2$O && _initializer2$O();
          _this._totalLength = _initializer3$B && _initializer3$B();
          _this._progress = _initializer4$v && _initializer4$v();
          _this._reverse = _initializer5$n && _initializer5$n();
          return _this;
        }

        var _proto = ProgressBar.prototype;

        _proto._initBarSprite = function _initBarSprite() {
          if (this._barSprite) {
            var entity = this._barSprite.node;

            if (!entity) {
              return;
            }

            var trans = this.node._uiProps.uiTransformComp;
            var nodeSize = trans.contentSize;
            var nodeAnchor = trans.anchorPoint;
            var barSpriteSize = entity._uiProps.uiTransformComp.contentSize;

            if (this._barSprite.fillType === Sprite.FillType.RADIAL) {
              this._mode = Mode.FILLED;
            }

            if (this._mode === Mode.HORIZONTAL) {
              this.totalLength = barSpriteSize.width;
            } else if (this._mode === Mode.VERTICAL) {
              this.totalLength = barSpriteSize.height;
            } else {
              this.totalLength = this._barSprite.fillRange;
            }

            if (entity.parent === this.node) {
              var x = -nodeSize.width * nodeAnchor.x;
              entity.setPosition(x, 0, 0);
            }
          }
        };

        _proto._updateBarStatus = function _updateBarStatus() {
          if (this._barSprite) {
            var entity = this._barSprite.node;

            if (!entity) {
              return;
            }

            var entTrans = entity._uiProps.uiTransformComp;
            var entityAnchorPoint = entTrans.anchorPoint;
            var entitySize = entTrans.contentSize;
            var entityPosition = entity.getPosition();
            var anchorPoint = new Vec2(0, 0.5);
            var progress = clamp01(this._progress);
            var actualLenth = this._totalLength * progress;
            var finalContentSize = entitySize;
            var totalWidth = 0;
            var totalHeight = 0;

            switch (this._mode) {
              case Mode.HORIZONTAL:
                if (this._reverse) {
                  anchorPoint = new Vec2(1, 0.5);
                }

                finalContentSize = new Size(actualLenth, entitySize.height);
                totalWidth = this._totalLength;
                totalHeight = entitySize.height;
                break;

              case Mode.VERTICAL:
                if (this._reverse) {
                  anchorPoint = new Vec2(0.5, 1);
                } else {
                  anchorPoint = new Vec2(0.5, 0);
                }

                finalContentSize = new Size(entitySize.width, actualLenth);
                totalWidth = entitySize.width;
                totalHeight = this._totalLength;
                break;
            }

            if (this._mode === Mode.FILLED) {
              if (this._barSprite.type !== Sprite.Type.FILLED) {
                warn('ProgressBar FILLED mode only works when barSprite\'s Type is FILLED!');
              } else {
                if (this._reverse) {
                  actualLenth *= -1;
                }

                this._barSprite.fillRange = actualLenth;
              }
            } else if (this._barSprite.type !== Sprite.Type.FILLED) {
              var anchorOffsetX = anchorPoint.x - entityAnchorPoint.x;
              var anchorOffsetY = anchorPoint.y - entityAnchorPoint.y;
              var finalPosition = new Vec3(totalWidth * anchorOffsetX, totalHeight * anchorOffsetY, 0);
              entity.setPosition(entityPosition.x + finalPosition.x, entityPosition.y + finalPosition.y, entityPosition.z);
              entTrans.setAnchorPoint(anchorPoint);
              entTrans.setContentSize(finalContentSize);
            } else {
              warn('ProgressBar non-FILLED mode only works when barSprite\'s Type is non-FILLED!');
            }
          }
        };

        _createClass(ProgressBar, [{
          key: "barSprite",
          get: function get() {
            return this._barSprite;
          },
          set: function set(value) {
            if (this._barSprite === value) {
              return;
            }

            this._barSprite = value;

            this._initBarSprite();
          }
        }, {
          key: "mode",
          get: function get() {
            return this._mode;
          },
          set: function set(value) {
            if (this._mode === value) {
              return;
            }

            this._mode = value;

            if (this._barSprite) {
              var entity = this._barSprite.node;

              if (!entity) {
                return;
              }

              var entitySize = entity._uiProps.uiTransformComp.contentSize;

              if (this._mode === Mode.HORIZONTAL) {
                this.totalLength = entitySize.width;
              } else if (this._mode === Mode.VERTICAL) {
                this.totalLength = entitySize.height;
              } else if (this._mode === Mode.FILLED) {
                this.totalLength = this._barSprite.fillRange;
              }
            }
          }
        }, {
          key: "totalLength",
          get: function get() {
            return this._totalLength;
          },
          set: function set(value) {
            if (this._mode === Mode.FILLED) {
              value = clamp01(value);
            }

            if (this._totalLength === value) {
              return;
            }

            this._totalLength = value;

            this._updateBarStatus();
          }
        }, {
          key: "progress",
          get: function get() {
            return this._progress;
          },
          set: function set(value) {
            if (this._progress === value) {
              return;
            }

            this._progress = value;

            this._updateBarStatus();
          }
        }, {
          key: "reverse",
          get: function get() {
            return this._reverse;
          },
          set: function set(value) {
            if (this._reverse === value) {
              return;
            }

            this._reverse = value;

            if (this._barSprite) {
              this._barSprite.fillStart = 1 - this._barSprite.fillStart;
            }

            this._updateBarStatus();
          }
        }]);

        return ProgressBar;
      }(Component), _class3$u.Mode = Mode, _temp$E), (_applyDecoratedDescriptor(_class2$1k.prototype, "barSprite", [_dec4$h], Object.getOwnPropertyDescriptor(_class2$1k.prototype, "barSprite"), _class2$1k.prototype), _applyDecoratedDescriptor(_class2$1k.prototype, "mode", [_dec5$e], Object.getOwnPropertyDescriptor(_class2$1k.prototype, "mode"), _class2$1k.prototype), _initializer$18 = applyDecoratedInitializer(_class2$1k.prototype, "_barSprite", [serializable], function () {
        return null;
      }), _initializer2$O = applyDecoratedInitializer(_class2$1k.prototype, "_mode", [serializable], function () {
        return Mode.HORIZONTAL;
      }), _initializer3$B = applyDecoratedInitializer(_class2$1k.prototype, "_totalLength", [serializable], function () {
        return 1;
      }), _initializer4$v = applyDecoratedInitializer(_class2$1k.prototype, "_progress", [serializable], function () {
        return 0.1;
      }), _initializer5$n = applyDecoratedInitializer(_class2$1k.prototype, "_reverse", [serializable], function () {
        return false;
      })), _class2$1k)) || _class$1y) || _class$1y) || _class$1y));
      legacyCC.ProgressBar = ProgressBar;

      var _dec$1w, _dec2$Q, _dec3$v, _dec4$i, _dec5$f, _class$1z, _class2$1l, _initializer$19, _initializer2$P, _initializer3$C, _initializer4$w, _initializer5$o, _class3$v, _temp$F;
      var GETTING_SHORTER_FACTOR = 20;

      var _tempPos_1 = new Vec3();

      var _tempPos_2 = new Vec3();

      var _tempVec3$3 = new Vec3();

      var defaultAnchor = new Vec2();

      var _tempColor$1 = new Color();

      var _tempVec2 = new Vec2();

      var Direction;

      (function (Direction) {
        Direction[Direction["HORIZONTAL"] = 0] = "HORIZONTAL";
        Direction[Direction["VERTICAL"] = 1] = "VERTICAL";
      })(Direction || (Direction = {}));

      ccenum(Direction);
      var ScrollBar = exports('ScrollBar', (_dec$1w = ccclass('cc.ScrollBar'), _dec2$Q = executionOrder(110), _dec3$v = requireComponent(UITransform), _dec4$i = type(Sprite), _dec5$f = type(Direction), _dec$1w(_class$1z = _dec2$Q(_class$1z = _dec3$v(_class$1z = (_class2$1l = (_temp$F = _class3$v = function (_Component) {
        _inheritsLoose(ScrollBar, _Component);

        function ScrollBar() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._scrollView = _initializer$19 && _initializer$19();
          _this._handle = _initializer2$P && _initializer2$P();
          _this._direction = _initializer3$C && _initializer3$C();
          _this._enableAutoHide = _initializer4$w && _initializer4$w();
          _this._autoHideTime = _initializer5$o && _initializer5$o();
          _this._touching = false;
          _this._opacity = 255;
          _this._autoHideRemainingTime = 0;
          return _this;
        }

        var _proto = ScrollBar.prototype;

        _proto.hide = function hide() {
          this._autoHideRemainingTime = 0;

          this._setOpacity(0);
        };

        _proto.show = function show() {
          this._autoHideRemainingTime = this._autoHideTime;
          this._opacity = 255;

          this._setOpacity(this._opacity);
        };

        _proto.onScroll = function onScroll(outOfBoundary) {
          if (!this._scrollView) {
            return;
          }

          var content = this._scrollView.content;

          if (!content) {
            return;
          }

          var contentSize = content._uiProps.uiTransformComp.contentSize;
          var scrollViewSize = this._scrollView.node._uiProps.uiTransformComp.contentSize;
          var barSize = this.node._uiProps.uiTransformComp.contentSize;

          if (this._conditionalDisableScrollBar(contentSize, scrollViewSize)) {
            return;
          }

          if (this._enableAutoHide) {
            this._autoHideRemainingTime = this._autoHideTime;

            this._setOpacity(this._opacity);
          }

          var contentMeasure = 0;
          var scrollViewMeasure = 0;
          var outOfBoundaryValue = 0;
          var contentPosition = 0;
          var handleNodeMeasure = 0;
          var outOfContentPosition = _tempVec2;
          outOfContentPosition.set(0, 0);

          if (this._direction === Direction.HORIZONTAL) {
            contentMeasure = contentSize.width;
            scrollViewMeasure = scrollViewSize.width;
            handleNodeMeasure = barSize.width;
            outOfBoundaryValue = outOfBoundary.x;

            this._convertToScrollViewSpace(outOfContentPosition, content);

            contentPosition = -outOfContentPosition.x;
          } else if (this._direction === Direction.VERTICAL) {
            contentMeasure = contentSize.height;
            scrollViewMeasure = scrollViewSize.height;
            handleNodeMeasure = barSize.height;
            outOfBoundaryValue = outOfBoundary.y;

            this._convertToScrollViewSpace(outOfContentPosition, content);

            contentPosition = -outOfContentPosition.y;
          }

          var length = this._calculateLength(contentMeasure, scrollViewMeasure, handleNodeMeasure, outOfBoundaryValue);

          var position = _tempVec2;

          this._calculatePosition(position, contentMeasure, scrollViewMeasure, handleNodeMeasure, contentPosition, outOfBoundaryValue, length);

          this._updateLength(length);

          this._updateHandlerPosition(position);
        };

        _proto.setScrollView = function setScrollView(scrollView) {
          this._scrollView = scrollView;
        };

        _proto.onTouchBegan = function onTouchBegan() {
          if (!this._enableAutoHide) {
            return;
          }

          this._touching = true;
        };

        _proto.onTouchEnded = function onTouchEnded() {
          if (!this._enableAutoHide) {
            return;
          }

          this._touching = false;

          if (this._autoHideTime <= 0) {
            return;
          }

          if (this._scrollView) {
            var content = this._scrollView.content;

            if (content) {
              var contentSize = content._uiProps.uiTransformComp.contentSize;
              var scrollViewSize = this._scrollView.node._uiProps.uiTransformComp.contentSize;

              if (this._conditionalDisableScrollBar(contentSize, scrollViewSize)) {
                return;
              }
            }
          }

          this._autoHideRemainingTime = this._autoHideTime;
        };

        _proto.onEnable = function onEnable() {
          var renderComp = this.node.getComponent(Sprite);

          if (renderComp) {
            this._opacity = renderComp.color.a;
          }
        };

        _proto.start = function start() {
          if (this._enableAutoHide) {
            this._setOpacity(0);
          }
        };

        _proto.update = function update(dt) {
          this._processAutoHide(dt);
        };

        _proto._convertToScrollViewSpace = function _convertToScrollViewSpace(out, content) {
          var scrollTrans = this._scrollView && this._scrollView.node._uiProps.uiTransformComp;
          var contentTrans = content._uiProps.uiTransformComp;

          if (!scrollTrans || !contentTrans) {
            out.set(Vec2.ZERO);
          } else {
            _tempPos_1.set(-contentTrans.anchorX * contentTrans.width, -contentTrans.anchorY * contentTrans.height, 0);

            contentTrans.convertToWorldSpaceAR(_tempPos_1, _tempPos_2);
            var scrollViewSpacePos = scrollTrans.convertToNodeSpaceAR(_tempPos_2);
            scrollViewSpacePos.x += scrollTrans.anchorX * scrollTrans.width;
            scrollViewSpacePos.y += scrollTrans.anchorY * scrollTrans.height;
            out.set(scrollViewSpacePos.x, scrollViewSpacePos.y);
          }
        };

        _proto._setOpacity = function _setOpacity(opacity) {
          if (this._handle) {
            var renderComp = this.node.getComponent(Sprite);

            if (renderComp) {
              _tempColor$1.set(renderComp.color);

              _tempColor$1.a = opacity;
              renderComp.color = _tempColor$1;
            }

            renderComp = this._handle.getComponent(Sprite);

            if (renderComp) {
              _tempColor$1.set(renderComp.color);

              _tempColor$1.a = opacity;
              renderComp.color = _tempColor$1;
            }
          }
        };

        _proto._updateHandlerPosition = function _updateHandlerPosition(position) {
          if (this._handle) {
            var oldPosition = _tempVec3$3;

            this._fixupHandlerPosition(oldPosition);

            this._handle.node.setPosition(position.x + oldPosition.x, position.y + oldPosition.y, oldPosition.z);
          }
        };

        _proto._fixupHandlerPosition = function _fixupHandlerPosition(out) {
          var uiTrans = this.node._uiProps.uiTransformComp;
          var barSize = uiTrans.contentSize;
          var barAnchor = uiTrans.anchorPoint;
          var handleSize = this.handle.node._uiProps.uiTransformComp.contentSize;
          var handleParent = this.handle.node.parent;
          Vec3.set(_tempPos_1, -barSize.width * barAnchor.x, -barSize.height * barAnchor.y, 0);

          var leftBottomWorldPosition = this.node._uiProps.uiTransformComp.convertToWorldSpaceAR(_tempPos_1, _tempPos_2);

          var fixupPosition = out;
          fixupPosition.set(0, 0, 0);

          handleParent._uiProps.uiTransformComp.convertToNodeSpaceAR(leftBottomWorldPosition, fixupPosition);

          if (this.direction === Direction.HORIZONTAL) {
            fixupPosition.set(fixupPosition.x, fixupPosition.y + (barSize.height - handleSize.height) / 2, fixupPosition.z);
          } else if (this.direction === Direction.VERTICAL) {
            fixupPosition.set(fixupPosition.x + (barSize.width - handleSize.width) / 2, fixupPosition.y, fixupPosition.z);
          }

          this.handle.node.setPosition(fixupPosition);
        };

        _proto._conditionalDisableScrollBar = function _conditionalDisableScrollBar(contentSize, scrollViewSize) {
          if (contentSize.width <= scrollViewSize.width && this._direction === Direction.HORIZONTAL) {
            return true;
          }

          if (contentSize.height <= scrollViewSize.height && this._direction === Direction.VERTICAL) {
            return true;
          }

          return false;
        };

        _proto._calculateLength = function _calculateLength(contentMeasure, scrollViewMeasure, handleNodeMeasure, outOfBoundary) {
          var denominatorValue = contentMeasure;

          if (outOfBoundary) {
            denominatorValue += (outOfBoundary > 0 ? outOfBoundary : -outOfBoundary) * GETTING_SHORTER_FACTOR;
          }

          var lengthRation = scrollViewMeasure / denominatorValue;
          return handleNodeMeasure * lengthRation;
        };

        _proto._calculatePosition = function _calculatePosition(out, contentMeasure, scrollViewMeasure, handleNodeMeasure, contentPosition, outOfBoundary, actualLenth) {
          var denominatorValue = contentMeasure - scrollViewMeasure;

          if (outOfBoundary) {
            denominatorValue += Math.abs(outOfBoundary);
          }

          var positionRatio = 0;

          if (denominatorValue) {
            positionRatio = contentPosition / denominatorValue;
            positionRatio = clamp01(positionRatio);
          }

          var position = (handleNodeMeasure - actualLenth) * positionRatio;

          if (this._direction === Direction.VERTICAL) {
            out.set(0, position);
          } else {
            out.set(position, 0);
          }
        };

        _proto._updateLength = function _updateLength(length) {
          if (this._handle) {
            var handleNode = this._handle.node;
            var handleTrans = handleNode._uiProps.uiTransformComp;
            var handleNodeSize = handleTrans.contentSize;
            var anchor = handleTrans.anchorPoint;

            if (anchor.x !== defaultAnchor.x || anchor.y !== defaultAnchor.y) {
              handleTrans.setAnchorPoint(defaultAnchor);
            }

            if (this._direction === Direction.HORIZONTAL) {
              handleTrans.setContentSize(length, handleNodeSize.height);
            } else {
              handleTrans.setContentSize(handleNodeSize.width, length);
            }
          }
        };

        _proto._processAutoHide = function _processAutoHide(deltaTime) {
          if (!this._enableAutoHide || this._autoHideRemainingTime <= 0) {
            return;
          } else if (this._touching) {
            return;
          }

          this._autoHideRemainingTime -= deltaTime;

          if (this._autoHideRemainingTime <= this._autoHideTime) {
            this._autoHideRemainingTime = Math.max(0, this._autoHideRemainingTime);
            var opacity = this._opacity * (this._autoHideRemainingTime / this._autoHideTime);

            this._setOpacity(opacity);
          }
        };

        _createClass(ScrollBar, [{
          key: "handle",
          get: function get() {
            return this._handle;
          },
          set: function set(value) {
            if (this._handle === value) {
              return;
            }

            this._handle = value;
            this.onScroll(Vec2.ZERO);
          }
        }, {
          key: "direction",
          get: function get() {
            return this._direction;
          },
          set: function set(value) {
            if (this._direction === value) {
              return;
            }

            this._direction = value;
            this.onScroll(Vec2.ZERO);
          }
        }, {
          key: "enableAutoHide",
          get: function get() {
            return this._enableAutoHide;
          },
          set: function set(value) {
            if (this._enableAutoHide === value) {
              return;
            }

            this._enableAutoHide = value;

            if (this._enableAutoHide) {
              this._setOpacity(0);
            }
          }
        }, {
          key: "autoHideTime",
          get: function get() {
            return this._autoHideTime;
          },
          set: function set(value) {
            if (this._autoHideTime === value) {
              return;
            }

            this._autoHideTime = value;
          }
        }]);

        return ScrollBar;
      }(Component), _class3$v.Direction = Direction, _temp$F), (_applyDecoratedDescriptor(_class2$1l.prototype, "handle", [_dec4$i], Object.getOwnPropertyDescriptor(_class2$1l.prototype, "handle"), _class2$1l.prototype), _applyDecoratedDescriptor(_class2$1l.prototype, "direction", [_dec5$f], Object.getOwnPropertyDescriptor(_class2$1l.prototype, "direction"), _class2$1l.prototype), _initializer$19 = applyDecoratedInitializer(_class2$1l.prototype, "_scrollView", [serializable], function () {
        return null;
      }), _initializer2$P = applyDecoratedInitializer(_class2$1l.prototype, "_handle", [serializable], function () {
        return null;
      }), _initializer3$C = applyDecoratedInitializer(_class2$1l.prototype, "_direction", [serializable], function () {
        return Direction.HORIZONTAL;
      }), _initializer4$w = applyDecoratedInitializer(_class2$1l.prototype, "_enableAutoHide", [serializable], function () {
        return false;
      }), _initializer5$o = applyDecoratedInitializer(_class2$1l.prototype, "_autoHideTime", [serializable], function () {
        return 1.0;
      })), _class2$1l)) || _class$1z) || _class$1z) || _class$1z));
      legacyCC.ScrollBar = ScrollBar;

      var _dec$1x, _dec2$R, _class$1A;
      var ViewGroup = exports('ViewGroup', (_dec$1x = ccclass('cc.ViewGroup'), _dec2$R = executionOrder(110), _dec$1x(_class$1A = _dec2$R(_class$1A = function (_Component) {
        _inheritsLoose(ViewGroup, _Component);

        function ViewGroup() {
          return _Component.apply(this, arguments) || this;
        }

        return ViewGroup;
      }(Component)) || _class$1A) || _class$1A));
      legacyCC.ViewGroup = ViewGroup;

      var _dec$1y, _dec2$S, _dec3$w, _dec4$j, _dec5$g, _dec6$c, _dec7$c, _class$1B, _class2$1m, _initializer$1a, _initializer2$Q, _initializer3$D, _initializer4$x, _initializer5$p, _initializer6$j, _initializer7$f, _initializer8$f, _initializer9$e, _initializer10$e, _initializer11$c, _class3$w, _temp$G;
      var NUMBER_OF_GATHERED_TOUCHES_FOR_MOVE_SPEED = 5;
      var OUT_OF_BOUNDARY_BREAKING_FACTOR = 0.05;
      var EPSILON$3 = 1e-4;
      var TOLERANCE = 1e4;
      var MOVEMENT_FACTOR = 0.7;

      var _tempVec3$4 = new Vec3();

      var _tempVec3_1 = new Vec3();

      var _tempVec2$1 = new Vec2();

      var _tempVec2_1 = new Vec2();

      var quintEaseOut = function quintEaseOut(time) {
        time -= 1;
        return time * time * time * time * time + 1;
      };

      var getTimeInMilliseconds = function getTimeInMilliseconds() {
        var currentTime = new Date();
        return currentTime.getMilliseconds();
      };

      var eventMap = {
        'scroll-to-top': 0,
        'scroll-to-bottom': 1,
        'scroll-to-left': 2,
        'scroll-to-right': 3,
        scrolling: 4,
        'bounce-bottom': 6,
        'bounce-left': 7,
        'bounce-right': 8,
        'bounce-top': 5,
        'scroll-ended': 9,
        'touch-up': 10,
        'scroll-ended-with-threshold': 11,
        'scroll-began': 12
      };
      var EventType$4;

      (function (EventType) {
        EventType["SCROLL_TO_TOP"] = "scroll-to-top";
        EventType["SCROLL_TO_BOTTOM"] = "scroll-to-bottom";
        EventType["SCROLL_TO_LEFT"] = "scroll-to-left";
        EventType["SCROLL_TO_RIGHT"] = "scroll-to-right";
        EventType["SCROLL_BEGAN"] = "scroll-began";
        EventType["SCROLL_ENDED"] = "scroll-ended";
        EventType["BOUNCE_TOP"] = "bounce-top";
        EventType["BOUNCE_BOTTOM"] = "bounce-bottom";
        EventType["BOUNCE_LEFT"] = "bounce-left";
        EventType["BOUNCE_RIGHT"] = "bounce-right";
        EventType["SCROLLING"] = "scrolling";
        EventType["SCROLL_ENG_WITH_THRESHOLD"] = "scroll-ended-with-threshold";
        EventType["TOUCH_UP"] = "touch-up";
      })(EventType$4 || (EventType$4 = {}));

      var XrhoverType;

      (function (XrhoverType) {
        XrhoverType[XrhoverType["NONE"] = 0] = "NONE";
        XrhoverType[XrhoverType["LEFT"] = 1] = "LEFT";
        XrhoverType[XrhoverType["RIGHT"] = 2] = "RIGHT";
      })(XrhoverType || (XrhoverType = {}));

      var ScrollView = exports('ScrollView', (_dec$1y = ccclass('cc.ScrollView'), _dec2$S = executionOrder(110), _dec3$w = requireComponent(UITransform), _dec4$j = type(Node$1), _dec5$g = type(ScrollBar), _dec6$c = type(ScrollBar), _dec7$c = type([EventHandler]), _dec$1y(_class$1B = _dec2$S(_class$1B = _dec3$w(_class$1B = (_class2$1m = (_temp$G = _class3$w = function (_ViewGroup) {
        _inheritsLoose(ScrollView, _ViewGroup);

        function ScrollView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _ViewGroup.call.apply(_ViewGroup, [this].concat(args)) || this;
          _this.bounceDuration = _initializer$1a && _initializer$1a();
          _this.brake = _initializer2$Q && _initializer2$Q();
          _this.elastic = _initializer3$D && _initializer3$D();
          _this.inertia = _initializer4$x && _initializer4$x();
          _this.horizontal = _initializer5$p && _initializer5$p();
          _this.vertical = _initializer6$j && _initializer6$j();
          _this.cancelInnerEvents = _initializer7$f && _initializer7$f();
          _this.scrollEvents = _initializer8$f && _initializer8$f();
          _this._autoScrolling = false;
          _this._scrolling = false;
          _this._content = _initializer9$e && _initializer9$e();
          _this._horizontalScrollBar = _initializer10$e && _initializer10$e();
          _this._verticalScrollBar = _initializer11$c && _initializer11$c();
          _this._topBoundary = 0;
          _this._bottomBoundary = 0;
          _this._leftBoundary = 0;
          _this._rightBoundary = 0;
          _this._touchMoveDisplacements = [];
          _this._touchMoveTimeDeltas = [];
          _this._touchMovePreviousTimestamp = 0;
          _this._touchMoved = false;
          _this._autoScrollAttenuate = false;
          _this._autoScrollStartPosition = new Vec3();
          _this._autoScrollTargetDelta = new Vec3();
          _this._autoScrollTotalTime = 0;
          _this._autoScrollAccumulatedTime = 0;
          _this._autoScrollCurrentlyOutOfBoundary = false;
          _this._autoScrollBraking = false;
          _this._autoScrollBrakingStartPosition = new Vec3();
          _this._outOfBoundaryAmount = new Vec3();
          _this._outOfBoundaryAmountDirty = true;
          _this._stopMouseWheel = false;
          _this._mouseWheelEventElapsedTime = 0.0;
          _this._isScrollEndedWithThresholdEventFired = false;
          _this._scrollEventEmitMask = 0;
          _this._isBouncing = false;
          _this._contentPos = new Vec3();
          _this._deltaPos = new Vec3();
          _this._hoverIn = XrhoverType.NONE;
          return _this;
        }

        var _proto = ScrollView.prototype;

        _proto.scrollToBottom = function scrollToBottom(timeInSecond, attenuated) {
          if (attenuated === void 0) {
            attenuated = true;
          }

          var moveDelta = this._calculateMovePercentDelta({
            anchor: new Vec2(0, 0),
            applyToHorizontal: false,
            applyToVertical: true
          });

          if (timeInSecond) {
            this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
          } else {
            this._moveContent(moveDelta, true);
          }
        };

        _proto.scrollToTop = function scrollToTop(timeInSecond, attenuated) {
          if (attenuated === void 0) {
            attenuated = true;
          }

          var moveDelta = this._calculateMovePercentDelta({
            anchor: new Vec2(0, 1),
            applyToHorizontal: false,
            applyToVertical: true
          });

          if (timeInSecond) {
            this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
          } else {
            this._moveContent(moveDelta);
          }
        };

        _proto.scrollToLeft = function scrollToLeft(timeInSecond, attenuated) {
          if (attenuated === void 0) {
            attenuated = true;
          }

          var moveDelta = this._calculateMovePercentDelta({
            anchor: new Vec2(0, 0),
            applyToHorizontal: true,
            applyToVertical: false
          });

          if (timeInSecond) {
            this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
          } else {
            this._moveContent(moveDelta);
          }
        };

        _proto.scrollToRight = function scrollToRight(timeInSecond, attenuated) {
          if (attenuated === void 0) {
            attenuated = true;
          }

          var moveDelta = this._calculateMovePercentDelta({
            anchor: new Vec2(1, 0),
            applyToHorizontal: true,
            applyToVertical: false
          });

          if (timeInSecond) {
            this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
          } else {
            this._moveContent(moveDelta);
          }
        };

        _proto.scrollToTopLeft = function scrollToTopLeft(timeInSecond, attenuated) {
          if (attenuated === void 0) {
            attenuated = true;
          }

          var moveDelta = this._calculateMovePercentDelta({
            anchor: new Vec2(0, 1),
            applyToHorizontal: true,
            applyToVertical: true
          });

          if (timeInSecond) {
            this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
          } else {
            this._moveContent(moveDelta);
          }
        };

        _proto.scrollToTopRight = function scrollToTopRight(timeInSecond, attenuated) {
          if (attenuated === void 0) {
            attenuated = true;
          }

          var moveDelta = this._calculateMovePercentDelta({
            anchor: new Vec2(1, 1),
            applyToHorizontal: true,
            applyToVertical: true
          });

          if (timeInSecond) {
            this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
          } else {
            this._moveContent(moveDelta);
          }
        };

        _proto.scrollToBottomLeft = function scrollToBottomLeft(timeInSecond, attenuated) {
          if (attenuated === void 0) {
            attenuated = true;
          }

          var moveDelta = this._calculateMovePercentDelta({
            anchor: new Vec2(0, 0),
            applyToHorizontal: true,
            applyToVertical: true
          });

          if (timeInSecond) {
            this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
          } else {
            this._moveContent(moveDelta);
          }
        };

        _proto.scrollToBottomRight = function scrollToBottomRight(timeInSecond, attenuated) {
          if (attenuated === void 0) {
            attenuated = true;
          }

          var moveDelta = this._calculateMovePercentDelta({
            anchor: new Vec2(1, 0),
            applyToHorizontal: true,
            applyToVertical: true
          });

          if (timeInSecond) {
            this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
          } else {
            this._moveContent(moveDelta);
          }
        };

        _proto.scrollToOffset = function scrollToOffset(offset, timeInSecond, attenuated) {
          if (attenuated === void 0) {
            attenuated = true;
          }

          var maxScrollOffset = this.getMaxScrollOffset();
          var anchor = new Vec2(0, 0);

          if (maxScrollOffset.x === 0) {
            anchor.x = 0;
          } else {
            anchor.x = offset.x / maxScrollOffset.x;
          }

          if (maxScrollOffset.y === 0) {
            anchor.y = 1;
          } else {
            anchor.y = (maxScrollOffset.y - offset.y) / maxScrollOffset.y;
          }

          this.scrollTo(anchor, timeInSecond, attenuated);
        };

        _proto.getScrollOffset = function getScrollOffset() {
          var topDelta = this._getContentTopBoundary() - this._topBoundary;

          var leftDelta = this._getContentLeftBoundary() - this._leftBoundary;

          return new Vec2(leftDelta, topDelta);
        };

        _proto.getMaxScrollOffset = function getMaxScrollOffset() {
          if (!this._content || !this.view) {
            return Vec2.ZERO;
          }

          var contentSize = this._content._uiProps.uiTransformComp.contentSize;
          var horizontalMaximizeOffset = contentSize.width - this.view.width;
          var verticalMaximizeOffset = contentSize.height - this.view.height;
          horizontalMaximizeOffset = horizontalMaximizeOffset >= 0 ? horizontalMaximizeOffset : 0;
          verticalMaximizeOffset = verticalMaximizeOffset >= 0 ? verticalMaximizeOffset : 0;
          return new Vec2(horizontalMaximizeOffset, verticalMaximizeOffset);
        };

        _proto.scrollToPercentHorizontal = function scrollToPercentHorizontal(percent, timeInSecond, attenuated) {
          var moveDelta = this._calculateMovePercentDelta({
            anchor: new Vec2(percent, 0),
            applyToHorizontal: true,
            applyToVertical: false
          });

          if (timeInSecond) {
            this._startAutoScroll(moveDelta, timeInSecond, attenuated !== false);
          } else {
            this._moveContent(moveDelta);
          }
        };

        _proto.scrollTo = function scrollTo(anchor, timeInSecond, attenuated) {
          var moveDelta = this._calculateMovePercentDelta({
            anchor: new Vec2(anchor),
            applyToHorizontal: true,
            applyToVertical: true
          });

          if (timeInSecond) {
            this._startAutoScroll(moveDelta, timeInSecond, attenuated);
          } else {
            this._moveContent(moveDelta);
          }
        };

        _proto.scrollToPercentVertical = function scrollToPercentVertical(percent, timeInSecond, attenuated) {
          var moveDelta = this._calculateMovePercentDelta({
            anchor: new Vec2(0, percent),
            applyToHorizontal: false,
            applyToVertical: true
          });

          if (timeInSecond) {
            this._startAutoScroll(moveDelta, timeInSecond, attenuated);
          } else {
            this._moveContent(moveDelta);
          }
        };

        _proto.stopAutoScroll = function stopAutoScroll() {
          this._autoScrolling = false;
          this._autoScrollAccumulatedTime = this._autoScrollTotalTime;
        };

        _proto.setContentPosition = function setContentPosition(position) {
          this._setContentPosition(position);
        };

        _proto._setContentPosition = function _setContentPosition(position) {
          if (!this._content) {
            return;
          }

          var contentPos = this._getContentPosition();

          if (Math.abs(position.x - contentPos.x) < EPSILON$3 && Math.abs(position.y - contentPos.y) < EPSILON$3) {
            return;
          }

          this._content.setPosition(position);

          this._outOfBoundaryAmountDirty = true;
        };

        _proto.getContentPosition = function getContentPosition() {
          return this._getContentPosition();
        };

        _proto._getContentPosition = function _getContentPosition() {
          if (!this._content) {
            return Vec3.ZERO.clone();
          }

          this._contentPos.set(this._content.position);

          return this._contentPos;
        };

        _proto.isScrolling = function isScrolling() {
          return this._scrolling;
        };

        _proto.isAutoScrolling = function isAutoScrolling() {
          return this._autoScrolling;
        };

        _proto.getScrollEndedEventTiming = function getScrollEndedEventTiming() {
          return EPSILON$3;
        };

        _proto.start = function start() {
          this._calculateBoundary();

          if (this._content) {
            director.once(Director.EVENT_BEFORE_DRAW, this._adjustContentOutOfBoundary, this);
          }
        };

        _proto.onEnable = function onEnable() {
          {
            this._registerEvent();

            if (this._content) {
              this._content.on(NodeEventType.SIZE_CHANGED, this._calculateBoundary, this);

              this._content.on(NodeEventType.TRANSFORM_CHANGED, this._scaleChanged, this);

              if (this.view) {
                this.view.node.on(NodeEventType.TRANSFORM_CHANGED, this._scaleChanged, this);
                this.view.node.on(NodeEventType.SIZE_CHANGED, this._calculateBoundary, this);
              }
            }

            this._calculateBoundary();
          }

          this._updateScrollBarState();
        };

        _proto.update = function update(dt) {
          if (this._autoScrolling) {
            this._processAutoScrolling(dt);
          }
        };

        _proto.onDisable = function onDisable() {
          {
            this._unregisterEvent();

            if (this._content) {
              this._content.off(NodeEventType.SIZE_CHANGED, this._calculateBoundary, this);

              this._content.off(NodeEventType.TRANSFORM_CHANGED, this._scaleChanged, this);

              if (this.view) {
                this.view.node.off(NodeEventType.TRANSFORM_CHANGED, this._scaleChanged, this);
                this.view.node.off(NodeEventType.SIZE_CHANGED, this._calculateBoundary, this);
              }
            }
          }

          this._hideScrollBar();

          this.stopAutoScroll();
        };

        _proto._registerEvent = function _registerEvent() {
          this.node.on(NodeEventType.TOUCH_START, this._onTouchBegan, this, true);
          this.node.on(NodeEventType.TOUCH_MOVE, this._onTouchMoved, this, true);
          this.node.on(NodeEventType.TOUCH_END, this._onTouchEnded, this, true);
          this.node.on(NodeEventType.TOUCH_CANCEL, this._onTouchCancelled, this, true);
          this.node.on(NodeEventType.MOUSE_WHEEL, this._onMouseWheel, this, true);
          this.node.on(XrUIPressEventType.XRUI_HOVER_ENTERED, this._xrHoverEnter, this);
          this.node.on(XrUIPressEventType.XRUI_HOVER_EXITED, this._xrHoverExit, this);
          input.on(Input.EventType.HANDLE_INPUT, this._dispatchEventHandleInput, this);
          input.on(Input.EventType.GAMEPAD_INPUT, this._dispatchEventHandleInput, this);
        };

        _proto._unregisterEvent = function _unregisterEvent() {
          this.node.off(NodeEventType.TOUCH_START, this._onTouchBegan, this, true);
          this.node.off(NodeEventType.TOUCH_MOVE, this._onTouchMoved, this, true);
          this.node.off(NodeEventType.TOUCH_END, this._onTouchEnded, this, true);
          this.node.off(NodeEventType.TOUCH_CANCEL, this._onTouchCancelled, this, true);
          this.node.off(NodeEventType.MOUSE_WHEEL, this._onMouseWheel, this, true);
          this.node.off(XrUIPressEventType.XRUI_HOVER_ENTERED, this._xrHoverEnter, this);
          this.node.off(XrUIPressEventType.XRUI_HOVER_EXITED, this._xrHoverExit, this);
          input.off(Input.EventType.HANDLE_INPUT, this._dispatchEventHandleInput, this);
          input.off(Input.EventType.GAMEPAD_INPUT, this._dispatchEventHandleInput, this);
        };

        _proto._onMouseWheel = function _onMouseWheel(event, captureListeners) {
          if (!this.enabledInHierarchy) {
            return;
          }

          if (this._hasNestedViewGroup(event, captureListeners)) {
            return;
          }

          var deltaMove = new Vec3();
          var wheelPrecision = -0.1;
          var scrollY = event.getScrollY();

          if (this.vertical) {
            deltaMove.set(0, scrollY * wheelPrecision, 0);
          } else if (this.horizontal) {
            deltaMove.set(scrollY * wheelPrecision, 0, 0);
          }

          this._mouseWheelEventElapsedTime = 0;

          this._processDeltaMove(deltaMove);

          if (!this._stopMouseWheel) {
            this._handlePressLogic();

            this.schedule(this._checkMouseWheel, 1.0 / 60, NaN, 0);
            this._stopMouseWheel = true;
          }

          this._stopPropagationIfTargetIsMe(event);
        };

        _proto._onTouchBegan = function _onTouchBegan(event, captureListeners) {
          if (!this.enabledInHierarchy || !this._content) {
            return;
          }

          if (this._hasNestedViewGroup(event, captureListeners)) {
            return;
          }

          this._handlePressLogic();

          this._touchMoved = false;

          this._stopPropagationIfTargetIsMe(event);
        };

        _proto._onTouchMoved = function _onTouchMoved(event, captureListeners) {
          if (!this.enabledInHierarchy || !this._content) {
            return;
          }

          if (this._hasNestedViewGroup(event, captureListeners)) {
            return;
          }

          var touch = event.touch;

          this._handleMoveLogic(touch);

          if (!this.cancelInnerEvents) {
            return;
          }

          var deltaMove = touch.getUILocation(_tempVec2$1);
          deltaMove.subtract(touch.getUIStartLocation(_tempVec2_1));

          if (deltaMove.length() > 7) {
            if (!this._touchMoved && event.target !== this.node) {
              var cancelEvent = new EventTouch(event.getTouches(), event.bubbles, SystemEventType.TOUCH_CANCEL);
              cancelEvent.touch = event.touch;
              cancelEvent.simulate = true;
              event.target.dispatchEvent(cancelEvent);
              this._touchMoved = true;
            }
          }

          this._stopPropagationIfTargetIsMe(event);
        };

        _proto._onTouchEnded = function _onTouchEnded(event, captureListeners) {
          if (!this.enabledInHierarchy || !this._content || !event) {
            return;
          }

          if (this._hasNestedViewGroup(event, captureListeners)) {
            return;
          }

          this._dispatchEvent(EventType$4.TOUCH_UP);

          var touch = event.touch;

          this._handleReleaseLogic(touch);

          if (this._touchMoved) {
            event.propagationStopped = true;
          } else {
            this._stopPropagationIfTargetIsMe(event);
          }
        };

        _proto._onTouchCancelled = function _onTouchCancelled(event, captureListeners) {
          if (!this.enabledInHierarchy || !this._content) {
            return;
          }

          if (this._hasNestedViewGroup(event, captureListeners)) {
            return;
          }

          if (event && !event.simulate) {
            var touch = event.touch;

            this._handleReleaseLogic(touch);
          }

          this._stopPropagationIfTargetIsMe(event);
        };

        _proto._calculateBoundary = function _calculateBoundary() {
          if (this._content && this.view) {
            var layout = this._content.getComponent(Layout);

            if (layout && layout.enabledInHierarchy) {
              layout.updateLayout();
            }

            var viewTrans = this.view;
            var anchorX = viewTrans.width * viewTrans.anchorX;
            var anchorY = viewTrans.height * viewTrans.anchorY;
            this._leftBoundary = -anchorX;
            this._bottomBoundary = -anchorY;
            this._rightBoundary = this._leftBoundary + viewTrans.width;
            this._topBoundary = this._bottomBoundary + viewTrans.height;

            this._moveContentToTopLeft(viewTrans.contentSize);
          }
        };

        _proto._hasNestedViewGroup = function _hasNestedViewGroup(event, captureListeners) {
          if (!event || event.eventPhase !== Event.CAPTURING_PHASE) {
            return false;
          }

          if (captureListeners) {
            for (var _iterator = _createForOfIteratorHelperLoose(captureListeners), _step; !(_step = _iterator()).done;) {
              var listener = _step.value;
              var item = listener;

              if (this.node === item) {
                if (event.target && event.target.getComponent(ViewGroup)) {
                  return true;
                }

                return false;
              }

              if (item.getComponent(ViewGroup)) {
                return true;
              }
            }
          }

          return false;
        };

        _proto._startInertiaScroll = function _startInertiaScroll(touchMoveVelocity) {
          var inertiaTotalMovement = new Vec3(touchMoveVelocity);
          inertiaTotalMovement.multiplyScalar(MOVEMENT_FACTOR);

          this._startAttenuatingAutoScroll(inertiaTotalMovement, touchMoveVelocity);
        };

        _proto._calculateAttenuatedFactor = function _calculateAttenuatedFactor(distance) {
          if (this.brake <= 0) {
            return 1 - this.brake;
          }

          return (1 - this.brake) * (1 / (1 + distance * 0.000014 + distance * distance * 0.000000008));
        };

        _proto._startAttenuatingAutoScroll = function _startAttenuatingAutoScroll(deltaMove, initialVelocity) {
          var targetDelta = deltaMove.clone();
          targetDelta.normalize();

          if (this._content && this.view) {
            var contentSize = this._content._uiProps.uiTransformComp.contentSize;
            var scrollViewSize = this.view.contentSize;
            var totalMoveWidth = contentSize.width - scrollViewSize.width;
            var totalMoveHeight = contentSize.height - scrollViewSize.height;

            var attenuatedFactorX = this._calculateAttenuatedFactor(totalMoveWidth);

            var attenuatedFactorY = this._calculateAttenuatedFactor(totalMoveHeight);

            targetDelta.x = targetDelta.x * totalMoveWidth * (1 - this.brake) * attenuatedFactorX;
            targetDelta.y = targetDelta.y * totalMoveHeight * attenuatedFactorY * (1 - this.brake);
            targetDelta.z = 0;
          }

          var originalMoveLength = deltaMove.length();
          var factor = targetDelta.length() / originalMoveLength;
          targetDelta.add(deltaMove);

          if (this.brake > 0 && factor > 7) {
            factor = Math.sqrt(factor);
            var clonedDeltaMove = deltaMove.clone();
            clonedDeltaMove.multiplyScalar(factor);
            targetDelta.set(clonedDeltaMove);
            targetDelta.add(deltaMove);
          }

          var time = this._calculateAutoScrollTimeByInitialSpeed(initialVelocity.length());

          if (this.brake > 0 && factor > 3) {
            factor = 3;
            time *= factor;
          }

          if (this.brake === 0 && factor > 1) {
            time *= factor;
          }

          this._startAutoScroll(targetDelta, time, true);
        };

        _proto._calculateAutoScrollTimeByInitialSpeed = function _calculateAutoScrollTimeByInitialSpeed(initialSpeed) {
          return Math.sqrt(Math.sqrt(initialSpeed / 5));
        };

        _proto._startAutoScroll = function _startAutoScroll(deltaMove, timeInSecond, attenuated) {
          if (attenuated === void 0) {
            attenuated = false;
          }

          var adjustedDeltaMove = this._flattenVectorByDirection(deltaMove);

          this._autoScrolling = true;
          this._autoScrollTargetDelta = adjustedDeltaMove;
          this._autoScrollAttenuate = attenuated;
          Vec3.copy(this._autoScrollStartPosition, this._getContentPosition());
          this._autoScrollTotalTime = timeInSecond;
          this._autoScrollAccumulatedTime = 0;
          this._autoScrollBraking = false;
          this._isScrollEndedWithThresholdEventFired = false;

          this._autoScrollBrakingStartPosition.set(0, 0, 0);

          var currentOutOfBoundary = this._getHowMuchOutOfBoundary();

          if (!currentOutOfBoundary.equals(Vec3.ZERO, EPSILON$3)) {
            this._autoScrollCurrentlyOutOfBoundary = true;
          }
        };

        _proto._calculateTouchMoveVelocity = function _calculateTouchMoveVelocity() {
          var out = new Vec3();
          var totalTime = 0;
          totalTime = this._touchMoveTimeDeltas.reduce(function (a, b) {
            return a + b;
          }, totalTime);

          if (totalTime <= 0 || totalTime >= 0.5) {
            out.set(Vec3.ZERO);
          } else {
            var totalMovement = new Vec3();
            totalMovement = this._touchMoveDisplacements.reduce(function (a, b) {
              a.add(b);
              return a;
            }, totalMovement);
            out.set(totalMovement.x * (1 - this.brake) / totalTime, totalMovement.y * (1 - this.brake) / totalTime, totalMovement.z);
          }

          return out;
        };

        _proto._flattenVectorByDirection = function _flattenVectorByDirection(vector) {
          var result = vector;
          result.x = this.horizontal ? result.x : 0;
          result.y = this.vertical ? result.y : 0;
          return result;
        };

        _proto._moveContent = function _moveContent(deltaMove, canStartBounceBack) {
          var adjustedMove = this._flattenVectorByDirection(deltaMove);

          _tempVec3$4.set(this._getContentPosition());

          _tempVec3$4.add(adjustedMove);

          _tempVec3$4.set(Math.round(_tempVec3$4.x * TOLERANCE) * EPSILON$3, Math.round(_tempVec3$4.y * TOLERANCE) * EPSILON$3, _tempVec3$4.z);

          this._setContentPosition(_tempVec3$4);

          var outOfBoundary = this._getHowMuchOutOfBoundary();

          _tempVec2$1.set(outOfBoundary.x, outOfBoundary.y);

          this._updateScrollBar(_tempVec2$1);

          if (this.elastic && canStartBounceBack) {
            this._startBounceBackIfNeeded();
          }
        };

        _proto._getContentLeftBoundary = function _getContentLeftBoundary() {
          if (!this._content) {
            return -1;
          }

          var contentPos = this._getContentPosition();

          var uiTrans = this._content._uiProps.uiTransformComp;
          return contentPos.x - uiTrans.anchorX * uiTrans.width;
        };

        _proto._getContentRightBoundary = function _getContentRightBoundary() {
          if (!this._content) {
            return -1;
          }

          var uiTrans = this._content._uiProps.uiTransformComp;
          return this._getContentLeftBoundary() + uiTrans.width;
        };

        _proto._getContentTopBoundary = function _getContentTopBoundary() {
          if (!this._content) {
            return -1;
          }

          var uiTrans = this._content._uiProps.uiTransformComp;
          return this._getContentBottomBoundary() + uiTrans.height;
        };

        _proto._getContentBottomBoundary = function _getContentBottomBoundary() {
          if (!this._content) {
            return -1;
          }

          var contentPos = this._getContentPosition();

          var uiTrans = this._content._uiProps.uiTransformComp;
          return contentPos.y - uiTrans.anchorY * uiTrans.height;
        };

        _proto._getHowMuchOutOfBoundary = function _getHowMuchOutOfBoundary(addition) {
          addition = addition || new Vec3();

          if (addition.equals(Vec3.ZERO, EPSILON$3) && !this._outOfBoundaryAmountDirty) {
            return this._outOfBoundaryAmount;
          }

          var outOfBoundaryAmount = new Vec3();

          var tempLeftBoundary = this._getContentLeftBoundary();

          var tempRightBoundary = this._getContentRightBoundary();

          if (tempLeftBoundary + addition.x > this._leftBoundary) {
            outOfBoundaryAmount.x = this._leftBoundary - (tempLeftBoundary + addition.x);
          } else if (tempRightBoundary + addition.x < this._rightBoundary) {
            outOfBoundaryAmount.x = this._rightBoundary - (tempRightBoundary + addition.x);
          }

          var tempTopBoundary = this._getContentTopBoundary();

          var tempBottomBoundary = this._getContentBottomBoundary();

          if (tempTopBoundary + addition.y < this._topBoundary) {
            outOfBoundaryAmount.y = this._topBoundary - (tempTopBoundary + addition.y);
          } else if (tempBottomBoundary + addition.y > this._bottomBoundary) {
            outOfBoundaryAmount.y = this._bottomBoundary - (tempBottomBoundary + addition.y);
          }

          if (addition.equals(Vec3.ZERO, EPSILON$3)) {
            this._outOfBoundaryAmount = outOfBoundaryAmount;
            this._outOfBoundaryAmountDirty = false;
          }

          this._clampDelta(outOfBoundaryAmount);

          return outOfBoundaryAmount;
        };

        _proto._updateScrollBar = function _updateScrollBar(outOfBoundary) {
          if (this._horizontalScrollBar) {
            this._horizontalScrollBar.onScroll(outOfBoundary);
          }

          if (this.verticalScrollBar) {
            this.verticalScrollBar.onScroll(outOfBoundary);
          }
        };

        _proto._onScrollBarTouchBegan = function _onScrollBarTouchBegan() {
          if (this._horizontalScrollBar) {
            this._horizontalScrollBar.onTouchBegan();
          }

          if (this.verticalScrollBar) {
            this.verticalScrollBar.onTouchBegan();
          }
        };

        _proto._onScrollBarTouchEnded = function _onScrollBarTouchEnded() {
          if (this._horizontalScrollBar) {
            this._horizontalScrollBar.onTouchEnded();
          }

          if (this.verticalScrollBar) {
            this.verticalScrollBar.onTouchEnded();
          }
        };

        _proto._dispatchEvent = function _dispatchEvent(event) {
          if (event === EventType$4.SCROLL_ENDED) {
            this._scrollEventEmitMask = 0;
          } else if (event === EventType$4.SCROLL_TO_TOP || event === EventType$4.SCROLL_TO_BOTTOM || event === EventType$4.SCROLL_TO_LEFT || event === EventType$4.SCROLL_TO_RIGHT) {
            var flag = 1 << eventMap[event];

            if (this._scrollEventEmitMask & flag) {
              return;
            } else {
              this._scrollEventEmitMask |= flag;
            }
          }

          EventHandler.emitEvents(this.scrollEvents, this, eventMap[event]);
          this.node.emit(event, this);
        };

        _proto._adjustContentOutOfBoundary = function _adjustContentOutOfBoundary() {
          if (!this._content) {
            return;
          }

          this._outOfBoundaryAmountDirty = true;

          if (this._isOutOfBoundary()) {
            var outOfBoundary = this._getHowMuchOutOfBoundary();

            _tempVec3$4.set(this._getContentPosition());

            _tempVec3$4.add(outOfBoundary);

            this._setContentPosition(_tempVec3$4);

            this._updateScrollBar(Vec2.ZERO);
          }
        };

        _proto._hideScrollBar = function _hideScrollBar() {
          if (this._horizontalScrollBar) {
            this._horizontalScrollBar.hide();
          }

          if (this._verticalScrollBar) {
            this._verticalScrollBar.hide();
          }
        };

        _proto._updateScrollBarState = function _updateScrollBarState() {
          if (!this._content || !this.view) {
            return;
          }

          var viewTrans = this.view;
          var uiTrans = this._content._uiProps.uiTransformComp;

          if (this.verticalScrollBar) {
            if (uiTrans.height < viewTrans.height) {
              this.verticalScrollBar.hide();
            } else {
              this.verticalScrollBar.show();
            }
          }

          if (this.horizontalScrollBar) {
            if (uiTrans.width < viewTrans.width) {
              this.horizontalScrollBar.hide();
            } else {
              this.horizontalScrollBar.show();
            }
          }
        };

        _proto._stopPropagationIfTargetIsMe = function _stopPropagationIfTargetIsMe(event) {
          if (event.eventPhase === Event.AT_TARGET && event.target === this.node) {
            event.propagationStopped = true;
          }
        };

        _proto._processDeltaMove = function _processDeltaMove(deltaMove) {
          this._scrollChildren(deltaMove);

          this._gatherTouchMove(deltaMove);
        };

        _proto._handleMoveLogic = function _handleMoveLogic(touch) {
          this._getLocalAxisAlignDelta(this._deltaPos, touch);

          this._processDeltaMove(this._deltaPos);
        };

        _proto._handleReleaseLogic = function _handleReleaseLogic(touch) {
          this._getLocalAxisAlignDelta(this._deltaPos, touch);

          this._gatherTouchMove(this._deltaPos);

          this._processInertiaScroll();

          if (this._scrolling) {
            this._scrolling = false;

            if (!this._autoScrolling) {
              this._dispatchEvent(EventType$4.SCROLL_ENDED);
            }
          }
        };

        _proto._getLocalAxisAlignDelta = function _getLocalAxisAlignDelta(out, touch) {
          var uiTransformComp = this.node._uiProps.uiTransformComp;
          var vec = new Vec3();

          if (uiTransformComp) {
            touch.getUILocation(_tempVec2$1);
            touch.getUIPreviousLocation(_tempVec2_1);

            _tempVec3$4.set(_tempVec2$1.x, _tempVec2$1.y, 0);

            _tempVec3_1.set(_tempVec2_1.x, _tempVec2_1.y, 0);

            uiTransformComp.convertToNodeSpaceAR(_tempVec3$4, _tempVec3$4);
            uiTransformComp.convertToNodeSpaceAR(_tempVec3_1, _tempVec3_1);
            Vec3.subtract(vec, _tempVec3$4, _tempVec3_1);
          }

          out.set(vec);
        };

        _proto._scrollChildren = function _scrollChildren(deltaMove) {
          this._clampDelta(deltaMove);

          var realMove = deltaMove;
          var outOfBoundary;

          if (this.elastic) {
            outOfBoundary = this._getHowMuchOutOfBoundary();
            realMove.x *= outOfBoundary.x === 0 ? 1 : 0.5;
            realMove.y *= outOfBoundary.y === 0 ? 1 : 0.5;
          }

          if (!this.elastic) {
            outOfBoundary = this._getHowMuchOutOfBoundary(realMove);
            realMove.add(outOfBoundary);
          }

          var verticalScrollEventType = '';
          var horizontalScrollEventType = '';

          if (this._content) {
            var _ref = this._content._uiProps.uiTransformComp,
                anchorX = _ref.anchorX,
                anchorY = _ref.anchorY,
                width = _ref.width,
                height = _ref.height;
            var pos = this._content.position || Vec3.ZERO;

            if (this.vertical) {
              if (realMove.y > 0) {
                var icBottomPos = pos.y - anchorY * height;

                if (icBottomPos + realMove.y >= this._bottomBoundary) {
                  verticalScrollEventType = EventType$4.SCROLL_TO_BOTTOM;
                }
              } else if (realMove.y < 0) {
                var icTopPos = pos.y - anchorY * height + height;

                if (icTopPos + realMove.y <= this._topBoundary) {
                  verticalScrollEventType = EventType$4.SCROLL_TO_TOP;
                }
              }
            }

            if (this.horizontal) {
              if (realMove.x < 0) {
                var icRightPos = pos.x - anchorX * width + width;

                if (icRightPos + realMove.x <= this._rightBoundary) {
                  horizontalScrollEventType = EventType$4.SCROLL_TO_RIGHT;
                }
              } else if (realMove.x > 0) {
                var icLeftPos = pos.x - anchorX * width;

                if (icLeftPos + realMove.x >= this._leftBoundary) {
                  horizontalScrollEventType = EventType$4.SCROLL_TO_LEFT;
                }
              }
            }
          }

          this._moveContent(realMove, false);

          if (this.horizontal && realMove.x !== 0 || this.vertical && realMove.y !== 0) {
            if (!this._scrolling) {
              this._scrolling = true;

              this._dispatchEvent(EventType$4.SCROLL_BEGAN);
            }

            this._dispatchEvent(EventType$4.SCROLLING);
          }

          if (verticalScrollEventType !== '') {
            this._dispatchEvent(verticalScrollEventType);
          }

          if (horizontalScrollEventType !== '') {
            this._dispatchEvent(horizontalScrollEventType);
          }
        };

        _proto._handlePressLogic = function _handlePressLogic() {
          if (this._autoScrolling) {
            this._dispatchEvent(EventType$4.SCROLL_ENDED);
          }

          this._autoScrolling = false;
          this._isBouncing = false;
          this._touchMovePreviousTimestamp = getTimeInMilliseconds();
          this._touchMoveDisplacements.length = 0;
          this._touchMoveTimeDeltas.length = 0;

          this._onScrollBarTouchBegan();
        };

        _proto._clampDelta = function _clampDelta(out) {
          if (this._content && this.view) {
            var scrollViewSize = this.view.contentSize;
            var uiTrans = this._content._uiProps.uiTransformComp;

            if (uiTrans.width < scrollViewSize.width) {
              out.x = 0;
            }

            if (uiTrans.height < scrollViewSize.height) {
              out.y = 0;
            }
          }
        };

        _proto._gatherTouchMove = function _gatherTouchMove(delta) {
          var clampDt = delta.clone();

          this._clampDelta(clampDt);

          while (this._touchMoveDisplacements.length >= NUMBER_OF_GATHERED_TOUCHES_FOR_MOVE_SPEED) {
            this._touchMoveDisplacements.shift();

            this._touchMoveTimeDeltas.shift();
          }

          this._touchMoveDisplacements.push(clampDt);

          var timeStamp = getTimeInMilliseconds();

          this._touchMoveTimeDeltas.push((timeStamp - this._touchMovePreviousTimestamp) / 1000);

          this._touchMovePreviousTimestamp = timeStamp;
        };

        _proto._startBounceBackIfNeeded = function _startBounceBackIfNeeded() {
          if (!this.elastic) {
            return false;
          }

          var bounceBackAmount = this._getHowMuchOutOfBoundary();

          this._clampDelta(bounceBackAmount);

          if (bounceBackAmount.equals(Vec3.ZERO, EPSILON$3)) {
            return false;
          }

          var bounceBackTime = Math.max(this.bounceDuration, 0);

          this._startAutoScroll(bounceBackAmount, bounceBackTime, true);

          if (!this._isBouncing) {
            if (bounceBackAmount.y > 0) {
              this._dispatchEvent(EventType$4.BOUNCE_TOP);
            }

            if (bounceBackAmount.y < 0) {
              this._dispatchEvent(EventType$4.BOUNCE_BOTTOM);
            }

            if (bounceBackAmount.x > 0) {
              this._dispatchEvent(EventType$4.BOUNCE_RIGHT);
            }

            if (bounceBackAmount.x < 0) {
              this._dispatchEvent(EventType$4.BOUNCE_LEFT);
            }

            this._isBouncing = true;
          }

          return true;
        };

        _proto._processInertiaScroll = function _processInertiaScroll() {
          var bounceBackStarted = this._startBounceBackIfNeeded();

          if (!bounceBackStarted && this.inertia) {
            var touchMoveVelocity = this._calculateTouchMoveVelocity();

            if (!touchMoveVelocity.equals(_tempVec3$4, EPSILON$3) && this.brake < 1) {
              this._startInertiaScroll(touchMoveVelocity);
            }
          }

          this._onScrollBarTouchEnded();
        };

        _proto._isOutOfBoundary = function _isOutOfBoundary() {
          var outOfBoundary = this._getHowMuchOutOfBoundary();

          return !outOfBoundary.equals(Vec3.ZERO, EPSILON$3);
        };

        _proto._isNecessaryAutoScrollBrake = function _isNecessaryAutoScrollBrake() {
          if (this._autoScrollBraking) {
            return true;
          }

          if (this._isOutOfBoundary()) {
            if (!this._autoScrollCurrentlyOutOfBoundary) {
              this._autoScrollCurrentlyOutOfBoundary = true;
              this._autoScrollBraking = true;
              Vec3.copy(this._autoScrollBrakingStartPosition, this._getContentPosition());
              return true;
            }
          } else {
            this._autoScrollCurrentlyOutOfBoundary = false;
          }

          return false;
        };

        _proto._processAutoScrolling = function _processAutoScrolling(dt) {
          var isAutoScrollBrake = this._isNecessaryAutoScrollBrake();

          var brakingFactor = isAutoScrollBrake ? OUT_OF_BOUNDARY_BREAKING_FACTOR : 1;
          this._autoScrollAccumulatedTime += dt * (1 / brakingFactor);
          var percentage = Math.min(1, this._autoScrollAccumulatedTime / this._autoScrollTotalTime);

          if (this._autoScrollAttenuate) {
            percentage = quintEaseOut(percentage);
          }

          var clonedAutoScrollTargetDelta = this._autoScrollTargetDelta.clone();

          clonedAutoScrollTargetDelta.multiplyScalar(percentage);

          var clonedAutoScrollStartPosition = this._autoScrollStartPosition.clone();

          clonedAutoScrollStartPosition.add(clonedAutoScrollTargetDelta);
          var reachedEnd = Math.abs(percentage - 1) <= EPSILON$3;
          var fireEvent = Math.abs(percentage - 1) <= this.getScrollEndedEventTiming();

          if (fireEvent && !this._isScrollEndedWithThresholdEventFired) {
            this._dispatchEvent(EventType$4.SCROLL_ENG_WITH_THRESHOLD);

            this._isScrollEndedWithThresholdEventFired = true;
          }

          if (this.elastic) {
            var brakeOffsetPosition = clonedAutoScrollStartPosition.clone();
            brakeOffsetPosition.subtract(this._autoScrollBrakingStartPosition);

            if (isAutoScrollBrake) {
              brakeOffsetPosition.multiplyScalar(brakingFactor);
            }

            clonedAutoScrollStartPosition.set(this._autoScrollBrakingStartPosition);
            clonedAutoScrollStartPosition.add(brakeOffsetPosition);
          } else {
            var moveDelta = clonedAutoScrollStartPosition.clone();
            moveDelta.subtract(this.getContentPosition());

            var outOfBoundary = this._getHowMuchOutOfBoundary(moveDelta);

            if (!outOfBoundary.equals(Vec3.ZERO, EPSILON$3)) {
              clonedAutoScrollStartPosition.add(outOfBoundary);
              reachedEnd = true;
            }
          }

          if (reachedEnd) {
            this._autoScrolling = false;
          }

          var deltaMove = clonedAutoScrollStartPosition.clone();
          deltaMove.subtract(this._getContentPosition());

          this._clampDelta(deltaMove);

          this._moveContent(deltaMove, reachedEnd);

          this._dispatchEvent(EventType$4.SCROLLING);

          if (!this._autoScrolling) {
            this._isBouncing = false;
            this._scrolling = false;

            this._dispatchEvent(EventType$4.SCROLL_ENDED);
          }
        };

        _proto._checkMouseWheel = function _checkMouseWheel(dt) {
          var currentOutOfBoundary = this._getHowMuchOutOfBoundary();

          var maxElapsedTime = 0.1;

          if (!currentOutOfBoundary.equals(Vec3.ZERO, EPSILON$3)) {
            this._processInertiaScroll();

            this.unschedule(this._checkMouseWheel);

            this._dispatchEvent(EventType$4.SCROLL_ENDED);

            this._stopMouseWheel = false;
            return;
          }

          this._mouseWheelEventElapsedTime += dt;

          if (this._mouseWheelEventElapsedTime > maxElapsedTime) {
            this._onScrollBarTouchEnded();

            this.unschedule(this._checkMouseWheel);

            this._dispatchEvent(EventType$4.SCROLL_ENDED);

            this._stopMouseWheel = false;
          }
        };

        _proto._calculateMovePercentDelta = function _calculateMovePercentDelta(options) {
          var anchor = options.anchor;
          var applyToHorizontal = options.applyToHorizontal;
          var applyToVertical = options.applyToVertical;

          this._calculateBoundary();

          anchor.clampf(Vec2.ZERO, Vec2.ONE);

          var bottomDelta = this._getContentBottomBoundary() - this._bottomBoundary;

          bottomDelta = -bottomDelta;

          var leftDelta = this._getContentLeftBoundary() - this._leftBoundary;

          leftDelta = -leftDelta;
          var moveDelta = new Vec3();

          if (this._content && this.view) {
            var totalScrollDelta = 0;
            var uiTrans = this._content._uiProps.uiTransformComp;
            var contentSize = uiTrans.contentSize;
            var scrollSize = this.view.contentSize;

            if (applyToHorizontal) {
              totalScrollDelta = contentSize.width - scrollSize.width;
              moveDelta.x = leftDelta - totalScrollDelta * anchor.x;
            }

            if (applyToVertical) {
              totalScrollDelta = contentSize.height - scrollSize.height;
              moveDelta.y = bottomDelta - totalScrollDelta * anchor.y;
            }
          }

          return moveDelta;
        };

        _proto._moveContentToTopLeft = function _moveContentToTopLeft(scrollViewSize) {
          var bottomDelta = this._getContentBottomBoundary() - this._bottomBoundary;

          bottomDelta = -bottomDelta;
          var moveDelta = new Vec3();
          var totalScrollDelta = 0;

          var leftDelta = this._getContentLeftBoundary() - this._leftBoundary;

          leftDelta = -leftDelta;

          if (this._content) {
            var uiTrans = this._content._uiProps.uiTransformComp;
            var contentSize = uiTrans.contentSize;

            if (contentSize.height < scrollViewSize.height) {
              totalScrollDelta = contentSize.height - scrollViewSize.height;
              moveDelta.y = bottomDelta - totalScrollDelta;
            }

            if (contentSize.width < scrollViewSize.width) {
              totalScrollDelta = contentSize.width - scrollViewSize.width;
              moveDelta.x = leftDelta;
            }
          }

          this._updateScrollBarState();

          this._moveContent(moveDelta);

          this._adjustContentOutOfBoundary();
        };

        _proto._scaleChanged = function _scaleChanged(value) {
          if (value === TransformBit.SCALE) {
            this._calculateBoundary();
          }
        };

        _proto._xrHoverEnter = function _xrHoverEnter(event) {
          if (event.deviceType === DeviceType.Left) {
            this._hoverIn = XrhoverType.LEFT;
          } else if (event.deviceType === DeviceType.Right) {
            this._hoverIn = XrhoverType.RIGHT;
          }
        };

        _proto._xrHoverExit = function _xrHoverExit(event) {
          this._hoverIn = XrhoverType.NONE;
        };

        _proto._dispatchEventHandleInput = function _dispatchEventHandleInput(event) {
          var handleInputDevice;

          if (event instanceof EventGamepad) {
            handleInputDevice = event.gamepad;
          } else if (event instanceof EventHandle) {
            handleInputDevice = event.handleInputDevice;
          }

          var value;

          if (!this.enabledInHierarchy || this._hoverIn === XrhoverType.NONE) {
            return;
          }

          if (this._hoverIn === XrhoverType.LEFT) {
            value = handleInputDevice.leftStick.getValue();

            if (!value.equals(Vec2.ZERO)) {
              this._xrThumbStickMove(value);
            }
          } else if (this._hoverIn === XrhoverType.RIGHT) {
            value = handleInputDevice.rightStick.getValue();

            if (!value.equals(Vec2.ZERO)) {
              this._xrThumbStickMove(value);
            }
          }
        };

        _proto._xrThumbStickMove = function _xrThumbStickMove(event) {
          if (!this.enabledInHierarchy) {
            return;
          }

          var deltaMove = new Vec3();
          var wheelPrecision = -62.5;
          var scrollY = event.y;

          if (this.vertical) {
            deltaMove.set(0, scrollY * wheelPrecision, 0);
          } else if (this.horizontal) {
            deltaMove.set(scrollY * wheelPrecision, 0, 0);
          }

          this._mouseWheelEventElapsedTime = 0;

          this._processDeltaMove(deltaMove);

          if (!this._stopMouseWheel) {
            this._handlePressLogic();

            this.schedule(this._checkMouseWheel, 1.0 / 60, NaN, 0);
            this._stopMouseWheel = true;
          }
        };

        _createClass(ScrollView, [{
          key: "content",
          get: function get() {
            return this._content;
          },
          set: function set(value) {
            if (this._content === value) {
              return;
            }

            var viewTrans = value && value.parent && value.parent._uiProps.uiTransformComp;

            if (value && (!value || !viewTrans)) {
              logID(4302);
              return;
            }

            this._content = value;

            this._calculateBoundary();
          }
        }, {
          key: "horizontalScrollBar",
          get: function get() {
            return this._horizontalScrollBar;
          },
          set: function set(value) {
            if (this._horizontalScrollBar === value) {
              return;
            }

            this._horizontalScrollBar = value;

            if (this._horizontalScrollBar) {
              this._horizontalScrollBar.setScrollView(this);

              this._updateScrollBar(Vec2.ZERO);
            }
          }
        }, {
          key: "verticalScrollBar",
          get: function get() {
            return this._verticalScrollBar;
          },
          set: function set(value) {
            if (this._verticalScrollBar === value) {
              return;
            }

            this._verticalScrollBar = value;

            if (this._verticalScrollBar) {
              this._verticalScrollBar.setScrollView(this);

              this._updateScrollBar(Vec2.ZERO);
            }
          }
        }, {
          key: "view",
          get: function get() {
            var parent = this._content && this._content.parent;

            if (!parent) {
              return null;
            }

            return parent._uiProps.uiTransformComp;
          }
        }]);

        return ScrollView;
      }(ViewGroup), _class3$w.EventType = EventType$4, _temp$G), (_initializer$1a = applyDecoratedInitializer(_class2$1m.prototype, "bounceDuration", [serializable], function () {
        return 1;
      }), _initializer2$Q = applyDecoratedInitializer(_class2$1m.prototype, "brake", [serializable], function () {
        return 0.5;
      }), _initializer3$D = applyDecoratedInitializer(_class2$1m.prototype, "elastic", [serializable], function () {
        return true;
      }), _initializer4$x = applyDecoratedInitializer(_class2$1m.prototype, "inertia", [serializable], function () {
        return true;
      }), _applyDecoratedDescriptor(_class2$1m.prototype, "content", [_dec4$j], Object.getOwnPropertyDescriptor(_class2$1m.prototype, "content"), _class2$1m.prototype), _initializer5$p = applyDecoratedInitializer(_class2$1m.prototype, "horizontal", [serializable], function () {
        return true;
      }), _applyDecoratedDescriptor(_class2$1m.prototype, "horizontalScrollBar", [_dec5$g], Object.getOwnPropertyDescriptor(_class2$1m.prototype, "horizontalScrollBar"), _class2$1m.prototype), _initializer6$j = applyDecoratedInitializer(_class2$1m.prototype, "vertical", [serializable], function () {
        return true;
      }), _applyDecoratedDescriptor(_class2$1m.prototype, "verticalScrollBar", [_dec6$c], Object.getOwnPropertyDescriptor(_class2$1m.prototype, "verticalScrollBar"), _class2$1m.prototype), _initializer7$f = applyDecoratedInitializer(_class2$1m.prototype, "cancelInnerEvents", [serializable], function () {
        return true;
      }), _initializer8$f = applyDecoratedInitializer(_class2$1m.prototype, "scrollEvents", [_dec7$c, serializable], function () {
        return [];
      }), _initializer9$e = applyDecoratedInitializer(_class2$1m.prototype, "_content", [serializable], function () {
        return null;
      }), _initializer10$e = applyDecoratedInitializer(_class2$1m.prototype, "_horizontalScrollBar", [serializable], function () {
        return null;
      }), _initializer11$c = applyDecoratedInitializer(_class2$1m.prototype, "_verticalScrollBar", [serializable], function () {
        return null;
      })), _class2$1m)) || _class$1B) || _class$1B) || _class$1B));
      legacyCC.ScrollView = ScrollView;

      var _dec$1z, _dec2$T, _dec3$x, _dec4$k, _dec5$h, _dec6$d, _class$1C, _class2$1n, _initializer$1b, _initializer2$R, _initializer3$E, _initializer4$y, _class3$x, _temp$H;

      var _tempPos = new Vec3();

      var Direction$1;

      (function (Direction) {
        Direction[Direction["Horizontal"] = 0] = "Horizontal";
        Direction[Direction["Vertical"] = 1] = "Vertical";
      })(Direction$1 || (Direction$1 = {}));

      ccenum(Direction$1);
      var Slider = exports('Slider', (_dec$1z = ccclass('cc.Slider'), _dec2$T = executionOrder(110), _dec3$x = requireComponent(UITransform), _dec4$k = type(Sprite), _dec5$h = type(Direction$1), _dec6$d = type([EventHandler]), _dec$1z(_class$1C = _dec2$T(_class$1C = _dec3$x(_class$1C = (_class2$1n = (_temp$H = _class3$x = function (_Component) {
        _inheritsLoose(Slider, _Component);

        function Slider() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.slideEvents = _initializer$1b && _initializer$1b();
          _this._handle = _initializer2$R && _initializer2$R();
          _this._direction = _initializer3$E && _initializer3$E();
          _this._progress = _initializer4$y && _initializer4$y();
          _this._offset = new Vec3();
          _this._dragging = false;
          _this._touchHandle = false;
          _this._handleLocalPos = new Vec3();
          _this._touchPos = new Vec3();
          return _this;
        }

        var _proto = Slider.prototype;

        _proto.__preload = function __preload() {
          this._updateHandlePosition();
        };

        _proto.onEnable = function onEnable() {
          this._updateHandlePosition();

          this.node.on(NodeEventType.TOUCH_START, this._onTouchBegan, this);
          this.node.on(NodeEventType.TOUCH_MOVE, this._onTouchMoved, this);
          this.node.on(NodeEventType.TOUCH_END, this._onTouchEnded, this);
          this.node.on(NodeEventType.TOUCH_CANCEL, this._onTouchCancelled, this);
          this.node.on(XrUIPressEventType.XRUI_HOVER_STAY, this._xrHoverStay, this);
          this.node.on(XrUIPressEventType.XRUI_CLICK, this._xrClick, this);
          this.node.on(XrUIPressEventType.XRUI_UNCLICK, this._xrUnClick, this);

          if (this._handle && this._handle.isValid) {
            this._handle.node.on(NodeEventType.TOUCH_START, this._onHandleDragStart, this);

            this._handle.node.on(NodeEventType.TOUCH_MOVE, this._onTouchMoved, this);

            this._handle.node.on(NodeEventType.TOUCH_END, this._onTouchEnded, this);
          }
        };

        _proto.onDisable = function onDisable() {
          this.node.off(NodeEventType.TOUCH_START, this._onTouchBegan, this);
          this.node.off(NodeEventType.TOUCH_MOVE, this._onTouchMoved, this);
          this.node.off(NodeEventType.TOUCH_END, this._onTouchEnded, this);
          this.node.off(NodeEventType.TOUCH_CANCEL, this._onTouchCancelled, this);
          this.node.off(XrUIPressEventType.XRUI_HOVER_STAY, this._xrHoverStay, this);
          this.node.off(XrUIPressEventType.XRUI_CLICK, this._xrClick, this);
          this.node.off(XrUIPressEventType.XRUI_UNCLICK, this._xrUnClick, this);

          if (this._handle && this._handle.isValid) {
            this._handle.node.off(NodeEventType.TOUCH_START, this._onHandleDragStart, this);

            this._handle.node.off(NodeEventType.TOUCH_MOVE, this._onTouchMoved, this);

            this._handle.node.off(NodeEventType.TOUCH_END, this._onTouchEnded, this);
          }
        };

        _proto._onHandleDragStart = function _onHandleDragStart(event) {
          if (!event || !this._handle || !this._handle.node._uiProps.uiTransformComp) {
            return;
          }

          this._dragging = true;
          this._touchHandle = true;
          var touhPos = event.touch.getUILocation();
          Vec3.set(this._touchPos, touhPos.x, touhPos.y, 0);

          this._handle.node._uiProps.uiTransformComp.convertToNodeSpaceAR(this._touchPos, this._offset);

          event.propagationStopped = true;
        };

        _proto._onTouchBegan = function _onTouchBegan(event) {
          if (!this._handle || !event) {
            return;
          }

          this._dragging = true;

          if (!this._touchHandle) {
            this._handleSliderLogic(event.touch);
          }

          event.propagationStopped = true;
        };

        _proto._onTouchMoved = function _onTouchMoved(event) {
          if (!this._dragging || !event) {
            return;
          }

          this._handleSliderLogic(event.touch);

          event.propagationStopped = true;
        };

        _proto._onTouchEnded = function _onTouchEnded(event) {
          this._dragging = false;
          this._touchHandle = false;
          this._offset = new Vec3();

          if (event) {
            event.propagationStopped = true;
          }
        };

        _proto._onTouchCancelled = function _onTouchCancelled(event) {
          this._dragging = false;

          if (event) {
            event.propagationStopped = true;
          }
        };

        _proto._handleSliderLogic = function _handleSliderLogic(touch) {
          this._updateProgress(touch);

          this._emitSlideEvent();
        };

        _proto._emitSlideEvent = function _emitSlideEvent() {
          EventHandler.emitEvents(this.slideEvents, this);
          this.node.emit('slide', this);
        };

        _proto._updateProgress = function _updateProgress(touch) {
          if (!this._handle || !touch) {
            return;
          }

          var touchPos = touch.getUILocation();
          Vec3.set(this._touchPos, touchPos.x, touchPos.y, 0);
          var uiTrans = this.node._uiProps.uiTransformComp;
          var localTouchPos = uiTrans.convertToNodeSpaceAR(this._touchPos, _tempPos);

          if (this.direction === Direction$1.Horizontal) {
            this.progress = clamp01(0.5 + (localTouchPos.x - this._offset.x) / uiTrans.width);
          } else {
            this.progress = clamp01(0.5 + (localTouchPos.y - this._offset.y) / uiTrans.height);
          }
        };

        _proto._updateHandlePosition = function _updateHandlePosition() {
          if (!this._handle) {
            return;
          }

          this._handleLocalPos.set(this._handle.node.getPosition());

          var uiTrans = this.node._uiProps.uiTransformComp;

          if (this._direction === Direction$1.Horizontal) {
            this._handleLocalPos.x = -uiTrans.width * uiTrans.anchorX + this.progress * uiTrans.width;
          } else {
            this._handleLocalPos.y = -uiTrans.height * uiTrans.anchorY + this.progress * uiTrans.height;
          }

          this._handle.node.setPosition(this._handleLocalPos);
        };

        _proto._changeLayout = function _changeLayout() {
          var uiTrans = this.node._uiProps.uiTransformComp;
          var contentSize = uiTrans.contentSize;
          uiTrans.setContentSize(contentSize.height, contentSize.width);

          if (this._handle) {
            var pos = this._handle.node.position;

            if (this._direction === Direction$1.Horizontal) {
              this._handle.node.setPosition(pos.x, 0, pos.z);
            } else {
              this._handle.node.setPosition(0, pos.y, pos.z);
            }

            this._updateHandlePosition();
          }
        };

        _proto._xrHandleProgress = function _xrHandleProgress(point) {
          if (!this._touchHandle) {
            var uiTrans = this.node._uiProps.uiTransformComp;
            uiTrans.convertToNodeSpaceAR(point, _tempPos);

            if (this.direction === Direction$1.Horizontal) {
              this.progress = clamp01(0.5 + (_tempPos.x - this.node.position.x) / uiTrans.width);
            } else {
              this.progress = clamp01(0.5 + (_tempPos.y - this.node.position.y) / uiTrans.height);
            }
          }
        };

        _proto._xrClick = function _xrClick(event) {
          if (!this._handle) {
            return;
          }

          this._dragging = true;

          this._xrHandleProgress(event.hitPoint);

          this._emitSlideEvent();
        };

        _proto._xrUnClick = function _xrUnClick() {
          this._dragging = false;
          this._touchHandle = false;
        };

        _proto._xrHoverStay = function _xrHoverStay(event) {
          if (!this._dragging) {
            return;
          }

          this._xrHandleProgress(event.hitPoint);

          this._emitSlideEvent();
        };

        _createClass(Slider, [{
          key: "handle",
          get: function get() {
            return this._handle;
          },
          set: function set(value) {
            if (this._handle === value) {
              return;
            }

            this._handle = value;
          }
        }, {
          key: "direction",
          get: function get() {
            return this._direction;
          },
          set: function set(value) {
            if (this._direction === value) {
              return;
            }

            this._direction = value;

            this._changeLayout();
          }
        }, {
          key: "progress",
          get: function get() {
            return this._progress;
          },
          set: function set(value) {
            if (this._progress === value) {
              return;
            }

            this._progress = value;

            this._updateHandlePosition();
          }
        }]);

        return Slider;
      }(Component), _class3$x.Direction = Direction$1, _temp$H), (_applyDecoratedDescriptor(_class2$1n.prototype, "handle", [_dec4$k], Object.getOwnPropertyDescriptor(_class2$1n.prototype, "handle"), _class2$1n.prototype), _applyDecoratedDescriptor(_class2$1n.prototype, "direction", [_dec5$h], Object.getOwnPropertyDescriptor(_class2$1n.prototype, "direction"), _class2$1n.prototype), _initializer$1b = applyDecoratedInitializer(_class2$1n.prototype, "slideEvents", [_dec6$d, serializable], function () {
        return [];
      }), _initializer2$R = applyDecoratedInitializer(_class2$1n.prototype, "_handle", [serializable], function () {
        return null;
      }), _initializer3$E = applyDecoratedInitializer(_class2$1n.prototype, "_direction", [serializable], function () {
        return Direction$1.Horizontal;
      }), _initializer4$y = applyDecoratedInitializer(_class2$1n.prototype, "_progress", [serializable], function () {
        return 0.1;
      })), _class2$1n)) || _class$1C) || _class$1C) || _class$1C));
      legacyCC.Slider = Slider;

      function extendsEnum() {
        for (var _len = arguments.length, enums = new Array(_len), _key = 0; _key < _len; _key++) {
          enums[_key] = arguments[_key];
        }

        return Object.assign.apply(Object, [{}].concat(enums));
      }

      var _dec$1A, _dec2$U, _dec3$y, _dec4$l, _dec5$i, _class$1D, _class2$1o, _initializer$1c, _initializer2$S, _initializer3$F, _class3$y, _temp$I;
      var EventType$5;

      (function (EventType) {
        EventType["TOGGLE"] = "toggle";
      })(EventType$5 || (EventType$5 = {}));

      var Toggle = exports('Toggle', (_dec$1A = ccclass('cc.Toggle'), _dec2$U = executionOrder(110), _dec3$y = requireComponent(UITransform), _dec4$l = type(Sprite), _dec5$i = type([EventHandler]), _dec$1A(_class$1D = _dec2$U(_class$1D = _dec3$y(_class$1D = (_class2$1o = (_temp$I = _class3$y = function (_Button) {
        _inheritsLoose(Toggle, _Button);

        function Toggle() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Button.call.apply(_Button, [this].concat(args)) || this;
          _this.checkEvents = _initializer$1c && _initializer$1c();
          _this._isChecked = _initializer2$S && _initializer2$S();
          _this._checkMark = _initializer3$F && _initializer3$F();
          return _this;
        }

        var _proto = Toggle.prototype;

        _proto._internalToggle = function _internalToggle() {
          this.isChecked = !this.isChecked;
        };

        _proto._set = function _set(value, emitEvent) {
          if (emitEvent === void 0) {
            emitEvent = true;
          }

          if (this._isChecked == value) return;
          this._isChecked = value;
          var group = this._toggleContainer;

          if (group && group.enabled && this.enabled) {
            if (value || !group.anyTogglesChecked() && !group.allowSwitchOff) {
              this._isChecked = true;
              group.notifyToggleCheck(this, emitEvent);
            }
          }

          this.playEffect();

          if (emitEvent) {
            this._emitToggleEvents();
          }
        };

        _proto.playEffect = function playEffect() {
          if (this._checkMark) {
            this._checkMark.node.active = this._isChecked;
          }
        };

        _proto.setIsCheckedWithoutNotify = function setIsCheckedWithoutNotify(value) {
          this._set(value, false);
        };

        _proto.onEnable = function onEnable() {
          _Button.prototype.onEnable.call(this);

          this.playEffect();

          {
            this.node.on(Toggle.EventType.CLICK, this._internalToggle, this);
          }
        };

        _proto.onDisable = function onDisable() {
          _Button.prototype.onDisable.call(this);

          {
            this.node.off(Toggle.EventType.CLICK, this._internalToggle, this);
          }
        };

        _proto._emitToggleEvents = function _emitToggleEvents() {
          this.node.emit(Toggle.EventType.TOGGLE, this);

          if (this.checkEvents) {
            EventHandler.emitEvents(this.checkEvents, this);
          }
        };

        _createClass(Toggle, [{
          key: "isChecked",
          get: function get() {
            return this._isChecked;
          },
          set: function set(value) {
            this._set(value);
          }
        }, {
          key: "checkMark",
          get: function get() {
            return this._checkMark;
          },
          set: function set(value) {
            if (this._checkMark === value) {
              return;
            }

            this._checkMark = value;
          }
        }, {
          key: "_resizeToTarget",
          set: function set(value) {
            if (value) {
              this._resizeNodeToTargetNode();
            }
          }
        }, {
          key: "_toggleContainer",
          get: function get() {
            var parent = this.node.parent;

            if (legacyCC.Node.isNode(parent)) {
              return parent.getComponent('cc.ToggleContainer');
            }

            return null;
          }
        }]);

        return Toggle;
      }(Button$1), _class3$y.EventType = extendsEnum(EventType$5, EventType$2), _temp$I), (_applyDecoratedDescriptor(_class2$1o.prototype, "checkMark", [_dec4$l], Object.getOwnPropertyDescriptor(_class2$1o.prototype, "checkMark"), _class2$1o.prototype), _initializer$1c = applyDecoratedInitializer(_class2$1o.prototype, "checkEvents", [_dec5$i, serializable], function () {
        return [];
      }), _initializer2$S = applyDecoratedInitializer(_class2$1o.prototype, "_isChecked", [serializable], function () {
        return true;
      }), _initializer3$F = applyDecoratedInitializer(_class2$1o.prototype, "_checkMark", [serializable], function () {
        return null;
      })), _class2$1o)) || _class$1D) || _class$1D) || _class$1D));
      legacyCC.Toggle = Toggle;

      var _dec$1B, _dec2$V, _dec3$z, _class$1E, _class2$1p, _initializer$1d, _initializer2$T;
      var ToggleContainer = exports('ToggleContainer', (_dec$1B = ccclass('cc.ToggleContainer'), _dec2$V = executionOrder(110), _dec3$z = type([EventHandler]), _dec$1B(_class$1E = _dec2$V(_class$1E = (_class2$1p = function (_Component) {
        _inheritsLoose(ToggleContainer, _Component);

        function ToggleContainer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._allowSwitchOff = _initializer$1d && _initializer$1d();
          _this.checkEvents = _initializer2$T && _initializer2$T();
          return _this;
        }

        var _proto = ToggleContainer.prototype;

        _proto.onEnable = function onEnable() {
          this.ensureValidState();
          this.node.on(NodeEventType.CHILD_ADDED, this.ensureValidState, this);
          this.node.on(NodeEventType.CHILD_REMOVED, this.ensureValidState, this);
        };

        _proto.onDisable = function onDisable() {
          this.node.off(NodeEventType.CHILD_ADDED, this.ensureValidState, this);
          this.node.off(NodeEventType.CHILD_REMOVED, this.ensureValidState, this);
        };

        _proto.activeToggles = function activeToggles() {
          return this.toggleItems.filter(function (x) {
            return x.isChecked;
          });
        };

        _proto.anyTogglesChecked = function anyTogglesChecked() {
          return !!this.toggleItems.find(function (x) {
            return x.isChecked;
          });
        };

        _proto.notifyToggleCheck = function notifyToggleCheck(toggle, emitEvent) {
          if (emitEvent === void 0) {
            emitEvent = true;
          }

          if (!this.enabledInHierarchy) {
            return;
          }

          for (var i = 0; i < this.toggleItems.length; i++) {
            var item = this.toggleItems[i];

            if (item === toggle) {
              continue;
            }

            if (emitEvent) {
              item.isChecked = false;
            } else {
              item.setIsCheckedWithoutNotify(false);
            }
          }

          if (this.checkEvents) {
            legacyCC.Component.EventHandler.emitEvents(this.checkEvents, toggle);
          }
        };

        _proto.ensureValidState = function ensureValidState() {
          var toggles = this.toggleItems;

          if (!this._allowSwitchOff && !this.anyTogglesChecked() && toggles.length !== 0) {
            var toggle = toggles[0];
            toggle.isChecked = true;
            this.notifyToggleCheck(toggle);
          }

          var activeToggles = this.activeToggles();

          if (activeToggles.length > 1) {
            var firstToggle = activeToggles[0];

            for (var i = 0; i < activeToggles.length; ++i) {
              var _toggle = activeToggles[i];

              if (_toggle === firstToggle) {
                continue;
              }

              _toggle.isChecked = false;
            }
          }
        };

        _createClass(ToggleContainer, [{
          key: "allowSwitchOff",
          get: function get() {
            return this._allowSwitchOff;
          },
          set: function set(value) {
            this._allowSwitchOff = value;
          }
        }, {
          key: "toggleItems",
          get: function get() {
            return this.node.children.map(function (item) {
              var toggle = item.getComponent('cc.Toggle');

              if (toggle && toggle.enabled) {
                return toggle;
              }

              return null;
            }).filter(Boolean);
          }
        }]);

        return ToggleContainer;
      }(Component), (_initializer$1d = applyDecoratedInitializer(_class2$1p.prototype, "_allowSwitchOff", [serializable], function () {
        return false;
      }), _initializer2$T = applyDecoratedInitializer(_class2$1p.prototype, "checkEvents", [_dec3$z, serializable], function () {
        return [];
      })), _class2$1p)) || _class$1E) || _class$1E));
      legacyCC.ToggleContainer = ToggleContainer;

      var _dec$1C, _dec2$W, _dec3$A, _dec4$m, _dec5$j, _class$1F, _class2$1q, _initializer$1e, _initializer2$U, _initializer3$G, _initializer4$z, _initializer5$q, _initializer6$k, _initializer7$g, _initializer8$g, _initializer9$f, _initializer10$f, _initializer11$d, _initializer12$b, _initializer13$b, _initializer14$8, _initializer15$7, _initializer16$7, _initializer17$6, _initializer18$5, _class3$z, _temp$J;

      var _tempScale = new Vec2();

      function getReadonlyNodeSize(parent) {
        if (parent instanceof Scene) {

          return visibleRect;
        } else if (parent._uiProps.uiTransformComp) {
          return parent._uiProps.uiTransformComp.contentSize;
        } else {
          return Size.ZERO;
        }
      }
      function computeInverseTransForTarget(widgetNode, target, out_inverseTranslate, out_inverseScale) {
        if (widgetNode.parent) {
          _tempScale.set(widgetNode.parent.getScale().x, widgetNode.parent.getScale().y);
        } else {
          _tempScale.set(0, 0);
        }

        var scaleX = _tempScale.x;
        var scaleY = _tempScale.y;
        var translateX = 0;
        var translateY = 0;

        for (var node = widgetNode.parent;;) {
          if (!node) {
            out_inverseTranslate.x = out_inverseTranslate.y = 0;
            out_inverseScale.x = out_inverseScale.y = 1;
            return;
          }

          var pos = node.getPosition();
          translateX += pos.x;
          translateY += pos.y;
          node = node.parent;

          if (node !== target) {
            if (node) {
              _tempScale.set(node.getScale().x, node.getScale().y);
            } else {
              _tempScale.set(0, 0);
            }

            var sx = _tempScale.x;
            var sy = _tempScale.y;
            translateX *= sx;
            translateY *= sy;
            scaleX *= sx;
            scaleY *= sy;
          } else {
            break;
          }
        }

        out_inverseScale.x = scaleX !== 0 ? 1 / scaleX : 1;
        out_inverseScale.y = scaleY !== 0 ? 1 / scaleY : 1;
        out_inverseTranslate.x = -translateX;
        out_inverseTranslate.y = -translateY;
      }
      var AlignMode;

      (function (AlignMode) {
        AlignMode[AlignMode["ONCE"] = 0] = "ONCE";
        AlignMode[AlignMode["ALWAYS"] = 1] = "ALWAYS";
        AlignMode[AlignMode["ON_WINDOW_RESIZE"] = 2] = "ON_WINDOW_RESIZE";
      })(AlignMode || (AlignMode = {}));

      ccenum(AlignMode);
      var AlignFlags;

      (function (AlignFlags) {
        AlignFlags[AlignFlags["TOP"] = 1] = "TOP";
        AlignFlags[AlignFlags["MID"] = 2] = "MID";
        AlignFlags[AlignFlags["BOT"] = 4] = "BOT";
        AlignFlags[AlignFlags["LEFT"] = 8] = "LEFT";
        AlignFlags[AlignFlags["CENTER"] = 16] = "CENTER";
        AlignFlags[AlignFlags["RIGHT"] = 32] = "RIGHT";
        AlignFlags[AlignFlags["HORIZONTAL"] = 56] = "HORIZONTAL";
        AlignFlags[AlignFlags["VERTICAL"] = 7] = "VERTICAL";
      })(AlignFlags || (AlignFlags = {}));

      var TOP_BOT = AlignFlags.TOP | AlignFlags.BOT;
      var LEFT_RIGHT = AlignFlags.LEFT | AlignFlags.RIGHT;
      var Widget = exports('Widget', (_dec$1C = ccclass('cc.Widget'), _dec2$W = executionOrder(110), _dec3$A = requireComponent(UITransform), _dec4$m = type(Node$1), _dec5$j = type(AlignMode), _dec$1C(_class$1F = _dec2$W(_class$1F = _dec3$A(_class$1F = (_class2$1q = (_temp$J = _class3$z = function (_Component) {
        _inheritsLoose(Widget, _Component);

        function Widget() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._lastPos = new Vec3();
          _this._lastSize = new Size();
          _this._dirty = true;
          _this._hadAlignOnce = false;
          _this._alignFlags = _initializer$1e && _initializer$1e();
          _this._target = _initializer2$U && _initializer2$U();
          _this._left = _initializer3$G && _initializer3$G();
          _this._right = _initializer4$z && _initializer4$z();
          _this._top = _initializer5$q && _initializer5$q();
          _this._bottom = _initializer6$k && _initializer6$k();
          _this._horizontalCenter = _initializer7$g && _initializer7$g();
          _this._verticalCenter = _initializer8$g && _initializer8$g();
          _this._isAbsLeft = _initializer9$f && _initializer9$f();
          _this._isAbsRight = _initializer10$f && _initializer10$f();
          _this._isAbsTop = _initializer11$d && _initializer11$d();
          _this._isAbsBottom = _initializer12$b && _initializer12$b();
          _this._isAbsHorizontalCenter = _initializer13$b && _initializer13$b();
          _this._isAbsVerticalCenter = _initializer14$8 && _initializer14$8();
          _this._originalWidth = _initializer15$7 && _initializer15$7();
          _this._originalHeight = _initializer16$7 && _initializer16$7();
          _this._alignMode = _initializer17$6 && _initializer17$6();
          _this._lockFlags = _initializer18$5 && _initializer18$5();
          return _this;
        }

        var _proto = Widget.prototype;

        _proto.updateAlignment = function updateAlignment() {
          legacyCC._widgetManager.updateAlignment(this.node);
        };

        _proto._validateTargetInDEV = function _validateTargetInDEV() {
          {
            return;
          }
        };

        _proto.setDirty = function setDirty() {
          this._recursiveDirty();
        };

        _proto.onEnable = function onEnable() {
          this.node.getPosition(this._lastPos);

          this._lastSize.set(this.node._uiProps.uiTransformComp.contentSize);

          legacyCC._widgetManager.add(this);

          this._hadAlignOnce = false;

          this._registerEvent();

          this._registerTargetEvents();
        };

        _proto.onDisable = function onDisable() {
          legacyCC._widgetManager.remove(this);

          this._unregisterEvent();

          this._unregisterTargetEvents();
        };

        _proto.onDestroy = function onDestroy() {
          this._removeParentEvent();
        };

        _proto._adjustWidgetToAllowMovingInEditor = function _adjustWidgetToAllowMovingInEditor(eventType) {};

        _proto._adjustWidgetToAllowResizingInEditor = function _adjustWidgetToAllowResizingInEditor() {};

        _proto._adjustWidgetToAnchorChanged = function _adjustWidgetToAnchorChanged() {
          this.setDirty();
        };

        _proto._adjustTargetToParentChanged = function _adjustTargetToParentChanged(oldParent) {
          if (oldParent) {
            this._unregisterOldParentEvents(oldParent);
          }

          if (this.node.getParent()) {
            this._registerTargetEvents();
          }

          this._setDirtyByMode();
        };

        _proto._registerEvent = function _registerEvent() {
          {
            this.node.on(NodeEventType.TRANSFORM_CHANGED, this._setDirtyByMode, this);
            this.node.on(NodeEventType.SIZE_CHANGED, this._setDirtyByMode, this);
          }

          this.node.on(NodeEventType.ANCHOR_CHANGED, this._adjustWidgetToAnchorChanged, this);
          this.node.on(NodeEventType.PARENT_CHANGED, this._adjustTargetToParentChanged, this);
        };

        _proto._unregisterEvent = function _unregisterEvent() {
          {
            this.node.off(NodeEventType.TRANSFORM_CHANGED, this._setDirtyByMode, this);
            this.node.off(NodeEventType.SIZE_CHANGED, this._setDirtyByMode, this);
          }

          this.node.off(NodeEventType.ANCHOR_CHANGED, this._adjustWidgetToAnchorChanged, this);
        };

        _proto._removeParentEvent = function _removeParentEvent() {
          this.node.off(NodeEventType.PARENT_CHANGED, this._adjustTargetToParentChanged, this);
        };

        _proto._autoChangedValue = function _autoChangedValue(flag, isAbs) {
          var current = (this._alignFlags & flag) > 0;

          if (!current) {
            return;
          }

          var parentUiProps = this.node.parent && this.node.parent._uiProps;
          var parentTrans = parentUiProps && parentUiProps.uiTransformComp;
          var size = parentTrans ? parentTrans.contentSize : visibleRect;

          if (this.isAlignLeft && flag === AlignFlags.LEFT) {
            this._left = isAbs ? this._left * size.width : this._left / size.width;
          } else if (this.isAlignRight && flag === AlignFlags.RIGHT) {
            this._right = isAbs ? this._right * size.width : this._right / size.width;
          } else if (this.isAlignHorizontalCenter && flag === AlignFlags.CENTER) {
            this._horizontalCenter = isAbs ? this._horizontalCenter * size.width : this._horizontalCenter / size.width;
          } else if (this.isAlignTop && flag === AlignFlags.TOP) {
            this._top = isAbs ? this._top * size.height : this._top / size.height;
          } else if (this.isAlignBottom && flag === AlignFlags.BOT) {
            this._bottom = isAbs ? this._bottom * size.height : this._bottom / size.height;
          } else if (this.isAbsoluteVerticalCenter && flag === AlignFlags.MID) {
            this._verticalCenter = isAbs ? this._verticalCenter / size.height : this._verticalCenter / size.height;
          }

          this._recursiveDirty();
        };

        _proto._registerTargetEvents = function _registerTargetEvents() {
          var target = this._target || this.node.parent;

          if (target) {
            if (target.getComponent(UITransform)) {
              target.on(NodeEventType.TRANSFORM_CHANGED, this._setDirtyByMode, this);
              target.on(NodeEventType.SIZE_CHANGED, this._setDirtyByMode, this);
              target.on(NodeEventType.ANCHOR_CHANGED, this._setDirtyByMode, this);
            }
          }
        };

        _proto._unregisterTargetEvents = function _unregisterTargetEvents() {
          var target = this._target || this.node.parent;

          if (target) {
            target.off(NodeEventType.TRANSFORM_CHANGED, this._setDirtyByMode, this);
            target.off(NodeEventType.SIZE_CHANGED, this._setDirtyByMode, this);
            target.off(NodeEventType.ANCHOR_CHANGED, this._setDirtyByMode, this);
          }
        };

        _proto._unregisterOldParentEvents = function _unregisterOldParentEvents(oldParent) {
          var target = this._target || oldParent;

          if (target) {
            target.off(NodeEventType.TRANSFORM_CHANGED, this._setDirtyByMode, this);
            target.off(NodeEventType.SIZE_CHANGED, this._setDirtyByMode, this);
          }
        };

        _proto._setDirtyByMode = function _setDirtyByMode() {
          if (this.alignMode === AlignMode.ALWAYS || EDITOR ) {
            this._recursiveDirty();
          }
        };

        _proto._setAlign = function _setAlign(flag, isAlign) {
          var current = (this._alignFlags & flag) > 0;

          if (isAlign === current) {
            return;
          }

          var isHorizontal = (flag & LEFT_RIGHT) > 0;
          var trans = this.node._uiProps.uiTransformComp;

          if (isAlign) {
            this._alignFlags |= flag;

            if (isHorizontal) {
              this.isAlignHorizontalCenter = false;

              if (this.isStretchWidth) {
                this._originalWidth = trans.width;
              }
            } else {
              this.isAlignVerticalCenter = false;

              if (this.isStretchHeight) {
                this._originalHeight = trans.height;
              }
            }
          } else {
            if (isHorizontal) {
              if (this.isStretchWidth) {
                trans.width = this._originalWidth;
              }
            } else if (this.isStretchHeight) {
              trans.height = this._originalHeight;
            }

            this._alignFlags &= ~flag;
          }
        };

        _proto._recursiveDirty = function _recursiveDirty() {
          if (this._dirty) {
            return;
          }

          this._dirty = true;
        };

        _createClass(Widget, [{
          key: "target",
          get: function get() {
            return this._target;
          },
          set: function set(value) {
            if (this._target === value) {
              return;
            }

            this._unregisterTargetEvents();

            this._target = value;

            this._registerTargetEvents();

            this._validateTargetInDEV();

            this._recursiveDirty();
          }
        }, {
          key: "isAlignTop",
          get: function get() {
            return (this._alignFlags & AlignFlags.TOP) > 0;
          },
          set: function set(value) {
            this._setAlign(AlignFlags.TOP, value);

            this._recursiveDirty();
          }
        }, {
          key: "isAlignBottom",
          get: function get() {
            return (this._alignFlags & AlignFlags.BOT) > 0;
          },
          set: function set(value) {
            this._setAlign(AlignFlags.BOT, value);

            this._recursiveDirty();
          }
        }, {
          key: "isAlignLeft",
          get: function get() {
            return (this._alignFlags & AlignFlags.LEFT) > 0;
          },
          set: function set(value) {
            this._setAlign(AlignFlags.LEFT, value);

            this._recursiveDirty();
          }
        }, {
          key: "isAlignRight",
          get: function get() {
            return (this._alignFlags & AlignFlags.RIGHT) > 0;
          },
          set: function set(value) {
            this._setAlign(AlignFlags.RIGHT, value);

            this._recursiveDirty();
          }
        }, {
          key: "isAlignVerticalCenter",
          get: function get() {
            return (this._alignFlags & AlignFlags.MID) > 0;
          },
          set: function set(value) {
            if (value) {
              this.isAlignTop = false;
              this.isAlignBottom = false;
              this._alignFlags |= AlignFlags.MID;
            } else {
              this._alignFlags &= ~AlignFlags.MID;
            }

            this._recursiveDirty();
          }
        }, {
          key: "isAlignHorizontalCenter",
          get: function get() {
            return (this._alignFlags & AlignFlags.CENTER) > 0;
          },
          set: function set(value) {
            if (value) {
              this.isAlignLeft = false;
              this.isAlignRight = false;
              this._alignFlags |= AlignFlags.CENTER;
            } else {
              this._alignFlags &= ~AlignFlags.CENTER;
            }

            this._recursiveDirty();
          }
        }, {
          key: "isStretchWidth",
          get: function get() {
            return (this._alignFlags & LEFT_RIGHT) === LEFT_RIGHT;
          }
        }, {
          key: "isStretchHeight",
          get: function get() {
            return (this._alignFlags & TOP_BOT) === TOP_BOT;
          }
        }, {
          key: "top",
          get: function get() {
            return this._top;
          },
          set: function set(value) {
            this._top = value;

            this._recursiveDirty();
          }
        }, {
          key: "editorTop",
          get: function get() {
            return this._isAbsTop ? this._top : this._top * 100;
          },
          set: function set(value) {
            this._top = this._isAbsTop ? value : value / 100;

            this._recursiveDirty();
          }
        }, {
          key: "bottom",
          get: function get() {
            return this._bottom;
          },
          set: function set(value) {
            this._bottom = value;

            this._recursiveDirty();
          }
        }, {
          key: "editorBottom",
          get: function get() {
            return this._isAbsBottom ? this._bottom : this._bottom * 100;
          },
          set: function set(value) {
            this._bottom = this._isAbsBottom ? value : value / 100;

            this._recursiveDirty();
          }
        }, {
          key: "left",
          get: function get() {
            return this._left;
          },
          set: function set(value) {
            this._left = value;

            this._recursiveDirty();
          }
        }, {
          key: "editorLeft",
          get: function get() {
            return this._isAbsLeft ? this._left : this._left * 100;
          },
          set: function set(value) {
            this._left = this._isAbsLeft ? value : value / 100;

            this._recursiveDirty();
          }
        }, {
          key: "right",
          get: function get() {
            return this._right;
          },
          set: function set(value) {
            this._right = value;

            this._recursiveDirty();
          }
        }, {
          key: "editorRight",
          get: function get() {
            return this._isAbsRight ? this._right : this._right * 100;
          },
          set: function set(value) {
            this._right = this._isAbsRight ? value : value / 100;

            this._recursiveDirty();
          }
        }, {
          key: "horizontalCenter",
          get: function get() {
            return this._horizontalCenter;
          },
          set: function set(value) {
            this._horizontalCenter = value;

            this._recursiveDirty();
          }
        }, {
          key: "editorHorizontalCenter",
          get: function get() {
            return this._isAbsHorizontalCenter ? this._horizontalCenter : this._horizontalCenter * 100;
          },
          set: function set(value) {
            this._horizontalCenter = this._isAbsHorizontalCenter ? value : value / 100;

            this._recursiveDirty();
          }
        }, {
          key: "verticalCenter",
          get: function get() {
            return this._verticalCenter;
          },
          set: function set(value) {
            this._verticalCenter = value;

            this._recursiveDirty();
          }
        }, {
          key: "editorVerticalCenter",
          get: function get() {
            return this._isAbsVerticalCenter ? this._verticalCenter : this._verticalCenter * 100;
          },
          set: function set(value) {
            this._verticalCenter = this._isAbsVerticalCenter ? value : value / 100;

            this._recursiveDirty();
          }
        }, {
          key: "isAbsoluteTop",
          get: function get() {
            return this._isAbsTop;
          },
          set: function set(value) {
            if (this._isAbsTop === value) {
              return;
            }

            this._isAbsTop = value;

            this._autoChangedValue(AlignFlags.TOP, this._isAbsTop);
          }
        }, {
          key: "isAbsoluteBottom",
          get: function get() {
            return this._isAbsBottom;
          },
          set: function set(value) {
            if (this._isAbsBottom === value) {
              return;
            }

            this._isAbsBottom = value;

            this._autoChangedValue(AlignFlags.BOT, this._isAbsBottom);
          }
        }, {
          key: "isAbsoluteLeft",
          get: function get() {
            return this._isAbsLeft;
          },
          set: function set(value) {
            if (this._isAbsLeft === value) {
              return;
            }

            this._isAbsLeft = value;

            this._autoChangedValue(AlignFlags.LEFT, this._isAbsLeft);
          }
        }, {
          key: "isAbsoluteRight",
          get: function get() {
            return this._isAbsRight;
          },
          set: function set(value) {
            if (this._isAbsRight === value) {
              return;
            }

            this._isAbsRight = value;

            this._autoChangedValue(AlignFlags.RIGHT, this._isAbsRight);
          }
        }, {
          key: "isAbsoluteHorizontalCenter",
          get: function get() {
            return this._isAbsHorizontalCenter;
          },
          set: function set(value) {
            if (this._isAbsHorizontalCenter === value) {
              return;
            }

            this._isAbsHorizontalCenter = value;

            this._autoChangedValue(AlignFlags.CENTER, this._isAbsHorizontalCenter);
          }
        }, {
          key: "isAbsoluteVerticalCenter",
          get: function get() {
            return this._isAbsVerticalCenter;
          },
          set: function set(value) {
            if (this._isAbsVerticalCenter === value) {
              return;
            }

            this._isAbsVerticalCenter = value;

            this._autoChangedValue(AlignFlags.MID, this._isAbsVerticalCenter);
          }
        }, {
          key: "alignMode",
          get: function get() {
            return this._alignMode;
          },
          set: function set(value) {
            this._alignMode = value;

            this._recursiveDirty();
          }
        }, {
          key: "alignFlags",
          get: function get() {
            return this._alignFlags;
          },
          set: function set(value) {
            if (this._alignFlags === value) {
              return;
            }

            this._alignFlags = value;

            this._recursiveDirty();
          }
        }]);

        return Widget;
      }(Component), _class3$z.AlignMode = AlignMode, _temp$J), (_applyDecoratedDescriptor(_class2$1q.prototype, "target", [_dec4$m], Object.getOwnPropertyDescriptor(_class2$1q.prototype, "target"), _class2$1q.prototype), _applyDecoratedDescriptor(_class2$1q.prototype, "alignMode", [_dec5$j], Object.getOwnPropertyDescriptor(_class2$1q.prototype, "alignMode"), _class2$1q.prototype), _initializer$1e = applyDecoratedInitializer(_class2$1q.prototype, "_alignFlags", [serializable], function () {
        return 0;
      }), _initializer2$U = applyDecoratedInitializer(_class2$1q.prototype, "_target", [serializable], function () {
        return null;
      }), _initializer3$G = applyDecoratedInitializer(_class2$1q.prototype, "_left", [serializable], function () {
        return 0;
      }), _initializer4$z = applyDecoratedInitializer(_class2$1q.prototype, "_right", [serializable], function () {
        return 0;
      }), _initializer5$q = applyDecoratedInitializer(_class2$1q.prototype, "_top", [serializable], function () {
        return 0;
      }), _initializer6$k = applyDecoratedInitializer(_class2$1q.prototype, "_bottom", [serializable], function () {
        return 0;
      }), _initializer7$g = applyDecoratedInitializer(_class2$1q.prototype, "_horizontalCenter", [serializable], function () {
        return 0;
      }), _initializer8$g = applyDecoratedInitializer(_class2$1q.prototype, "_verticalCenter", [serializable], function () {
        return 0;
      }), _initializer9$f = applyDecoratedInitializer(_class2$1q.prototype, "_isAbsLeft", [serializable], function () {
        return true;
      }), _initializer10$f = applyDecoratedInitializer(_class2$1q.prototype, "_isAbsRight", [serializable], function () {
        return true;
      }), _initializer11$d = applyDecoratedInitializer(_class2$1q.prototype, "_isAbsTop", [serializable], function () {
        return true;
      }), _initializer12$b = applyDecoratedInitializer(_class2$1q.prototype, "_isAbsBottom", [serializable], function () {
        return true;
      }), _initializer13$b = applyDecoratedInitializer(_class2$1q.prototype, "_isAbsHorizontalCenter", [serializable], function () {
        return true;
      }), _initializer14$8 = applyDecoratedInitializer(_class2$1q.prototype, "_isAbsVerticalCenter", [serializable], function () {
        return true;
      }), _initializer15$7 = applyDecoratedInitializer(_class2$1q.prototype, "_originalWidth", [serializable], function () {
        return 0;
      }), _initializer16$7 = applyDecoratedInitializer(_class2$1q.prototype, "_originalHeight", [serializable], function () {
        return 0;
      }), _initializer17$6 = applyDecoratedInitializer(_class2$1q.prototype, "_alignMode", [serializable], function () {
        return AlignMode.ON_WINDOW_RESIZE;
      }), _initializer18$5 = applyDecoratedInitializer(_class2$1q.prototype, "_lockFlags", [serializable, editorOnly], function () {
        return 0;
      })), _class2$1q)) || _class$1F) || _class$1F) || _class$1F));
      legacyCC.internal.computeInverseTransForTarget = computeInverseTransForTarget;
      legacyCC.internal.getReadonlyNodeSize = getReadonlyNodeSize;
      legacyCC.Widget = Widget;

      var _dec$1D, _dec2$X, _dec3$B, _dec4$n, _dec5$k, _class$1G, _class2$1r, _initializer$1f, _initializer2$V, _initializer3$H, _initializer4$A, _class3$A, _temp$K;

      var _color$1 = new Color();

      var Direction$2;

      (function (Direction) {
        Direction[Direction["HORIZONTAL"] = 0] = "HORIZONTAL";
        Direction[Direction["VERTICAL"] = 1] = "VERTICAL";
      })(Direction$2 || (Direction$2 = {}));

      ccenum(Direction$2);
      var PageViewIndicator = exports('PageViewIndicator', (_dec$1D = ccclass('cc.PageViewIndicator'), _dec2$X = executionOrder(110), _dec3$B = type(SpriteFrame), _dec4$n = type(Direction$2), _dec5$k = type(Size), _dec$1D(_class$1G = _dec2$X(_class$1G = (_class2$1r = (_temp$K = _class3$A = function (_Component) {
        _inheritsLoose(PageViewIndicator, _Component);

        function PageViewIndicator() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.spacing = _initializer$1f && _initializer$1f();
          _this._spriteFrame = _initializer2$V && _initializer2$V();
          _this._direction = _initializer3$H && _initializer3$H();
          _this._cellSize = _initializer4$A && _initializer4$A();
          _this._layout = null;
          _this._pageView = null;
          _this._indicators = [];
          return _this;
        }

        var _proto = PageViewIndicator.prototype;

        _proto.onLoad = function onLoad() {
          this._updateLayout();
        };

        _proto.setPageView = function setPageView(target) {
          this._pageView = target;

          this._refresh();
        };

        _proto._updateLayout = function _updateLayout() {
          this._layout = this.getComponent(Layout);

          if (!this._layout) {
            this._layout = this.addComponent(Layout);
          }

          var layout = this._layout;

          if (this.direction === Direction$2.HORIZONTAL) {
            layout.type = Layout.Type.HORIZONTAL;
            layout.spacingX = this.spacing;
          } else if (this.direction === Direction$2.VERTICAL) {
            layout.type = Layout.Type.VERTICAL;
            layout.spacingY = this.spacing;
          }

          layout.resizeMode = Layout.ResizeMode.CONTAINER;
        };

        _proto._createIndicator = function _createIndicator() {
          var node = new Node$1();
          node.layer = this.node.layer;
          var sprite = node.addComponent(Sprite);
          sprite.spriteFrame = this.spriteFrame;
          sprite.sizeMode = Sprite.SizeMode.CUSTOM;
          node.parent = this.node;

          node._uiProps.uiTransformComp.setContentSize(this._cellSize);

          return node;
        };

        _proto._changedState = function _changedState() {
          var indicators = this._indicators;

          if (indicators.length === 0 || !this._pageView) {
            return;
          }

          var idx = this._pageView.curPageIdx;

          if (idx >= indicators.length) {
            return;
          }

          for (var i = 0; i < indicators.length; ++i) {
            var node = indicators[i];

            if (!node._uiProps.uiComp) {
              continue;
            }

            var uiComp = node._uiProps.uiComp;

            _color$1.set(uiComp.color);

            _color$1.a = 255 / 2;
            uiComp.color = _color$1;
          }

          if (indicators[idx]._uiProps.uiComp) {
            var comp = indicators[idx]._uiProps.uiComp;

            _color$1.set(comp.color);

            _color$1.a = 255;
            comp.color = _color$1;
          }
        };

        _proto._refresh = function _refresh() {
          if (!this._pageView) {
            return;
          }

          var indicators = this._indicators;

          var pages = this._pageView.getPages();

          if (pages.length === indicators.length) {
            return;
          }

          var i = 0;

          if (pages.length > indicators.length) {
            for (i = 0; i < pages.length; ++i) {
              if (!indicators[i]) {
                indicators[i] = this._createIndicator();
              }
            }
          } else {
            var count = indicators.length - pages.length;

            for (i = count; i > 0; --i) {
              var node = indicators[i - 1];
              this.node.removeChild(node);
              indicators.splice(i - 1, 1);
            }
          }

          if (this._layout && this._layout.enabledInHierarchy) {
            this._layout.updateLayout();
          }

          this._changedState();
        };

        _createClass(PageViewIndicator, [{
          key: "spriteFrame",
          get: function get() {
            return this._spriteFrame;
          },
          set: function set(value) {
            if (this._spriteFrame === value) {
              return;
            }

            this._spriteFrame = value;
          }
        }, {
          key: "direction",
          get: function get() {
            return this._direction;
          },
          set: function set(value) {
            if (this._direction === value) {
              return;
            }

            this._direction = value;
          }
        }, {
          key: "cellSize",
          get: function get() {
            return this._cellSize;
          },
          set: function set(value) {
            if (this._cellSize === value) {
              return;
            }

            this._cellSize = value;
          }
        }]);

        return PageViewIndicator;
      }(Component), _class3$A.Direction = Direction$2, _temp$K), (_applyDecoratedDescriptor(_class2$1r.prototype, "spriteFrame", [_dec3$B], Object.getOwnPropertyDescriptor(_class2$1r.prototype, "spriteFrame"), _class2$1r.prototype), _applyDecoratedDescriptor(_class2$1r.prototype, "direction", [_dec4$n], Object.getOwnPropertyDescriptor(_class2$1r.prototype, "direction"), _class2$1r.prototype), _applyDecoratedDescriptor(_class2$1r.prototype, "cellSize", [_dec5$k], Object.getOwnPropertyDescriptor(_class2$1r.prototype, "cellSize"), _class2$1r.prototype), _initializer$1f = applyDecoratedInitializer(_class2$1r.prototype, "spacing", [serializable], function () {
        return 0;
      }), _initializer2$V = applyDecoratedInitializer(_class2$1r.prototype, "_spriteFrame", [serializable], function () {
        return null;
      }), _initializer3$H = applyDecoratedInitializer(_class2$1r.prototype, "_direction", [serializable], function () {
        return Direction$2.HORIZONTAL;
      }), _initializer4$A = applyDecoratedInitializer(_class2$1r.prototype, "_cellSize", [serializable], function () {
        return new Size(20, 20);
      })), _class2$1r)) || _class$1G) || _class$1G));
      legacyCC.PageViewIndicator = PageViewIndicator;

      var _dec$1E, _dec2$Y, _dec3$C, _dec4$o, _dec5$l, _dec6$e, _dec7$d, _dec8$8, _dec9$8, _class$1H, _class2$1s, _initializer$1g, _initializer2$W, _initializer3$I, _initializer4$B, _initializer5$r, _initializer6$l, _initializer7$h, _initializer8$h, _initializer9$g, _initializer10$g, _initializer11$e, _initializer12$c, _class3$B, _temp$L;

      var _tempVec2$2 = new Vec2();

      var SizeMode$1;

      (function (SizeMode) {
        SizeMode[SizeMode["Unified"] = 0] = "Unified";
        SizeMode[SizeMode["Free"] = 1] = "Free";
      })(SizeMode$1 || (SizeMode$1 = {}));

      ccenum(SizeMode$1);
      var Direction$3;

      (function (Direction) {
        Direction[Direction["Horizontal"] = 0] = "Horizontal";
        Direction[Direction["Vertical"] = 1] = "Vertical";
      })(Direction$3 || (Direction$3 = {}));

      ccenum(Direction$3);
      var EventType$6;

      (function (EventType) {
        EventType["PAGE_TURNING"] = "page-turning";
      })(EventType$6 || (EventType$6 = {}));

      var PageView = exports('PageView', (_dec$1E = ccclass('cc.PageView'), _dec2$Y = executionOrder(110), _dec3$C = type(SizeMode$1), _dec4$o = type(Direction$3), _dec5$l = type(PageViewIndicator), _dec6$e = type(ScrollBar), _dec7$d = type(ScrollBar), _dec8$8 = type([EventHandler]), _dec9$8 = type([EventHandler]), _dec$1E(_class$1H = _dec2$Y(_class$1H = (_class2$1s = (_temp$L = _class3$B = function (_ScrollView) {
        _inheritsLoose(PageView, _ScrollView);

        function PageView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _ScrollView.call.apply(_ScrollView, [this].concat(args)) || this;
          _this.autoPageTurningThreshold = _initializer$1g && _initializer$1g();
          _this.horizontal = _initializer2$W && _initializer2$W();
          _this.vertical = _initializer3$I && _initializer3$I();
          _this.cancelInnerEvents = _initializer4$B && _initializer4$B();
          _this.scrollEvents = _initializer5$r && _initializer5$r();
          _this.pageTurningSpeed = _initializer6$l && _initializer6$l();
          _this.pageEvents = _initializer7$h && _initializer7$h();
          _this._sizeMode = _initializer8$h && _initializer8$h();
          _this._direction = _initializer9$g && _initializer9$g();
          _this._scrollThreshold = _initializer10$g && _initializer10$g();
          _this._pageTurningEventTiming = _initializer11$e && _initializer11$e();
          _this._indicator = _initializer12$c && _initializer12$c();
          _this._curPageIdx = 0;
          _this._lastPageIdx = 0;
          _this._pages = [];
          _this._initContentPos = new Vec3();
          _this._scrollCenterOffsetX = [];
          _this._scrollCenterOffsetY = [];
          _this._touchBeganPosition = new Vec2();
          _this._touchEndPosition = new Vec2();
          return _this;
        }

        var _proto = PageView.prototype;

        _proto.onEnable = function onEnable() {
          _ScrollView.prototype.onEnable.call(this);

          this.node.on(NodeEventType.SIZE_CHANGED, this._updateAllPagesSize, this);

          {
            this.node.on(PageView.EventType.SCROLL_ENG_WITH_THRESHOLD, this._dispatchPageTurningEvent, this);
          }
        };

        _proto.onDisable = function onDisable() {
          _ScrollView.prototype.onDisable.call(this);

          this.node.off(NodeEventType.SIZE_CHANGED, this._updateAllPagesSize, this);

          {
            this.node.off(PageView.EventType.SCROLL_ENG_WITH_THRESHOLD, this._dispatchPageTurningEvent, this);
          }
        };

        _proto.onLoad = function onLoad() {
          this._initPages();

          if (this.indicator) {
            this.indicator.setPageView(this);
          }
        };

        _proto.getCurrentPageIndex = function getCurrentPageIndex() {
          return this._curPageIdx;
        };

        _proto.setCurrentPageIndex = function setCurrentPageIndex(index) {
          this.scrollToPage(index, 1);
        };

        _proto.getPages = function getPages() {
          return this._pages;
        };

        _proto.addPage = function addPage(page) {
          if (!page || this._pages.indexOf(page) !== -1 || !this.content) {
            return;
          }

          if (!page._uiProps.uiTransformComp) {
            logID(4301);
            return;
          }

          this.content.addChild(page);

          this._pages.push(page);

          this._updatePageView();
        };

        _proto.insertPage = function insertPage(page, index) {
          if (index < 0 || !page || this._pages.indexOf(page) !== -1 || !this.content) {
            return;
          }

          var pageCount = this._pages.length;

          if (index >= pageCount) {
            this.addPage(page);
          } else {
            if (!page._uiProps.uiTransformComp) {
              logID(4301);
              return;
            }

            this._pages.splice(index, 0, page);

            this.content.insertChild(page, index);

            this._updatePageView();
          }
        };

        _proto.removePage = function removePage(page) {
          if (!page || !this.content) {
            return;
          }

          var index = this._pages.indexOf(page);

          if (index === -1) {
            warnID(4300, page.name);
            return;
          }

          this.removePageAtIndex(index);
        };

        _proto.removePageAtIndex = function removePageAtIndex(index) {
          var pageList = this._pages;

          if (index < 0 || index >= pageList.length) {
            return;
          }

          var page = pageList[index];

          if (!page || !this.content) {
            return;
          }

          this.content.removeChild(page);
          pageList.splice(index, 1);

          this._updatePageView();
        };

        _proto.removeAllPages = function removeAllPages() {
          if (!this.content) {
            return;
          }

          var locPages = this._pages;

          for (var i = 0, len = locPages.length; i < len; i++) {
            this.content.removeChild(locPages[i]);
          }

          this._pages.length = 0;

          this._updatePageView();
        };

        _proto.scrollToPage = function scrollToPage(idx, timeInSecond) {
          if (timeInSecond === void 0) {
            timeInSecond = 0.3;
          }

          if (idx < 0 || idx >= this._pages.length) {
            return;
          }

          this._curPageIdx = idx;
          this.scrollToOffset(this._moveOffsetValue(idx), timeInSecond, true);

          if (this.indicator) {
            this.indicator._changedState();
          }
        };

        _proto.getScrollEndedEventTiming = function getScrollEndedEventTiming() {
          return this.pageTurningEventTiming;
        };

        _proto._updatePageView = function _updatePageView() {
          if (!this.content) {
            return;
          }

          var layout = this.content.getComponent(Layout);

          if (layout && layout.enabled) {
            layout.updateLayout();
          }

          var pageCount = this._pages.length;

          if (this._curPageIdx >= pageCount) {
            this._curPageIdx = pageCount === 0 ? 0 : pageCount - 1;
            this._lastPageIdx = this._curPageIdx;
          }

          var contentPos = this._initContentPos;

          for (var i = 0; i < pageCount; ++i) {
            var page = this._pages[i];
            var pos = page.position;

            if (this.direction === Direction$3.Horizontal) {
              this._scrollCenterOffsetX[i] = Math.abs(contentPos.x + pos.x);
            } else {
              this._scrollCenterOffsetY[i] = Math.abs(contentPos.y + pos.y);
            }
          }

          if (this.indicator) {
            this.indicator._refresh();
          }
        };

        _proto._updateAllPagesSize = function _updateAllPagesSize() {
          var viewTrans = this.view;

          if (!this.content || !viewTrans) {
            return;
          }

          if (this._sizeMode !== SizeMode$1.Unified) {
            return;
          }

          var locPages =  this._pages;
          var selfSize = viewTrans.contentSize;

          for (var i = 0, len = locPages.length; i < len; i++) {
            locPages[i]._uiProps.uiTransformComp.setContentSize(selfSize);
          }
        };

        _proto._handleReleaseLogic = function _handleReleaseLogic() {
          this._autoScrollToPage();

          if (this._scrolling) {
            this._scrolling = false;

            if (!this._autoScrolling) {
              this._dispatchEvent(PageView.EventType.SCROLL_ENDED);
            }
          }
        };

        _proto._onTouchBegan = function _onTouchBegan(event, captureListeners) {
          event.touch.getUILocation(_tempVec2$2);
          Vec2.set(this._touchBeganPosition, _tempVec2$2.x, _tempVec2$2.y);

          _ScrollView.prototype._onTouchBegan.call(this, event, captureListeners);
        };

        _proto._onTouchMoved = function _onTouchMoved(event, captureListeners) {
          _ScrollView.prototype._onTouchMoved.call(this, event, captureListeners);
        };

        _proto._onTouchEnded = function _onTouchEnded(event, captureListeners) {
          event.touch.getUILocation(_tempVec2$2);
          Vec2.set(this._touchEndPosition, _tempVec2$2.x, _tempVec2$2.y);

          _ScrollView.prototype._onTouchEnded.call(this, event, captureListeners);
        };

        _proto._onTouchCancelled = function _onTouchCancelled(event, captureListeners) {
          event.touch.getUILocation(_tempVec2$2);
          Vec2.set(this._touchEndPosition, _tempVec2$2.x, _tempVec2$2.y);

          _ScrollView.prototype._onTouchCancelled.call(this, event, captureListeners);
        };

        _proto._onMouseWheel = function _onMouseWheel() {};

        _proto._syncScrollDirection = function _syncScrollDirection() {
          this.horizontal = this.direction === Direction$3.Horizontal;
          this.vertical = this.direction === Direction$3.Vertical;
        };

        _proto._syncSizeMode = function _syncSizeMode() {
          var viewTrans = this.view;

          if (!this.content || !viewTrans) {
            return;
          }

          var layout = this.content.getComponent(Layout);

          if (layout) {
            if (this._sizeMode === SizeMode$1.Free && this._pages.length > 0) {
              var firstPageTrans = this._pages[0]._uiProps.uiTransformComp;
              var lastPageTrans = this._pages[this._pages.length - 1]._uiProps.uiTransformComp;

              if (this.direction === Direction$3.Horizontal) {
                layout.paddingLeft = (viewTrans.width - firstPageTrans.width) / 2;
                layout.paddingRight = (viewTrans.width - lastPageTrans.width) / 2;
              } else if (this.direction === Direction$3.Vertical) {
                layout.paddingTop = (viewTrans.height - firstPageTrans.height) / 2;
                layout.paddingBottom = (viewTrans.height - lastPageTrans.height) / 2;
              }
            }

            layout.updateLayout();
          }
        };

        _proto._initPages = function _initPages() {
          if (!this.content) {
            return;
          }

          this._initContentPos = this.content.position;
          var children = this.content.children;

          for (var i = 0; i < children.length; ++i) {
            var page = children[i];

            if (this._pages.indexOf(page) >= 0) {
              continue;
            }

            this._pages.push(page);
          }

          this._syncScrollDirection();

          this._syncSizeMode();

          this._updatePageView();
        };

        _proto._dispatchPageTurningEvent = function _dispatchPageTurningEvent() {
          if (this._lastPageIdx === this._curPageIdx) {
            return;
          }

          this._lastPageIdx = this._curPageIdx;
          EventHandler.emitEvents(this.pageEvents, this, EventType$6.PAGE_TURNING);
          this.node.emit(EventType$6.PAGE_TURNING, this);
        };

        _proto._isQuicklyScrollable = function _isQuicklyScrollable(touchMoveVelocity) {
          if (this.direction === Direction$3.Horizontal) {
            if (Math.abs(touchMoveVelocity.x) > this.autoPageTurningThreshold) {
              return true;
            }
          } else if (this.direction === Direction$3.Vertical) {
            if (Math.abs(touchMoveVelocity.y) > this.autoPageTurningThreshold) {
              return true;
            }
          }

          return false;
        };

        _proto._moveOffsetValue = function _moveOffsetValue(idx) {
          var offset = new Vec2();

          if (this._sizeMode === SizeMode$1.Free) {
            if (this.direction === Direction$3.Horizontal) {
              offset.x = this._scrollCenterOffsetX[idx];
            } else if (this.direction === Direction$3.Vertical) {
              offset.y = this._scrollCenterOffsetY[idx];
            }
          } else {
            var viewTrans = this.view;

            if (!viewTrans) {
              return offset;
            }

            if (this.direction === Direction$3.Horizontal) {
              offset.x = idx * viewTrans.width;
            } else if (this.direction === Direction$3.Vertical) {
              offset.y = idx * viewTrans.height;
            }
          }

          return offset;
        };

        _proto._getDragDirection = function _getDragDirection(moveOffset) {
          if (this._direction === Direction$3.Horizontal) {
            if (moveOffset.x === 0) {
              return 0;
            }

            return moveOffset.x > 0 ? 1 : -1;
          } else {
            if (moveOffset.y === 0) {
              return 0;
            }

            return moveOffset.y < 0 ? 1 : -1;
          }
        };

        _proto._isScrollable = function _isScrollable(offset, index, nextIndex) {
          if (this._sizeMode === SizeMode$1.Free) {
            var curPageCenter = 0;
            var nextPageCenter = 0;

            if (this.direction === Direction$3.Horizontal) {
              curPageCenter = this._scrollCenterOffsetX[index];
              nextPageCenter = this._scrollCenterOffsetX[nextIndex];
              return Math.abs(offset.x) >= Math.abs(curPageCenter - nextPageCenter) * this.scrollThreshold;
            } else if (this.direction === Direction$3.Vertical) {
              curPageCenter = this._scrollCenterOffsetY[index];
              nextPageCenter = this._scrollCenterOffsetY[nextIndex];
              return Math.abs(offset.y) >= Math.abs(curPageCenter - nextPageCenter) * this.scrollThreshold;
            }
          } else {
            var viewTrans = this.view;

            if (!viewTrans) {
              return false;
            }

            if (this.direction === Direction$3.Horizontal) {
              return Math.abs(offset.x) >= viewTrans.width * this.scrollThreshold;
            } else if (this.direction === Direction$3.Vertical) {
              return Math.abs(offset.y) >= viewTrans.height * this.scrollThreshold;
            }
          }

          return false;
        };

        _proto._autoScrollToPage = function _autoScrollToPage() {
          var bounceBackStarted = this._startBounceBackIfNeeded();

          if (bounceBackStarted) {
            var bounceBackAmount = this._getHowMuchOutOfBoundary();

            this._clampDelta(bounceBackAmount);

            if (bounceBackAmount.x > 0 || bounceBackAmount.y < 0) {
              this._curPageIdx = this._pages.length === 0 ? 0 : this._pages.length - 1;
            }

            if (bounceBackAmount.x < 0 || bounceBackAmount.y > 0) {
              this._curPageIdx = 0;
            }

            if (this.indicator) {
              this.indicator._changedState();
            }
          } else {
            var moveOffset = new Vec2();
            Vec2.subtract(moveOffset, this._touchBeganPosition, this._touchEndPosition);
            var index = this._curPageIdx;

            var nextIndex = index + this._getDragDirection(moveOffset);

            var timeInSecond = this.pageTurningSpeed * Math.abs(index - nextIndex);

            if (nextIndex < this._pages.length) {
              if (this._isScrollable(moveOffset, index, nextIndex)) {
                this.scrollToPage(nextIndex, timeInSecond);
                return;
              } else {
                var touchMoveVelocity = this._calculateTouchMoveVelocity();

                if (this._isQuicklyScrollable(touchMoveVelocity)) {
                  this.scrollToPage(nextIndex, timeInSecond);
                  return;
                }
              }
            }

            this.scrollToPage(index, timeInSecond);
          }
        };

        _createClass(PageView, [{
          key: "sizeMode",
          get: function get() {
            return this._sizeMode;
          },
          set: function set(value) {
            if (this._sizeMode === value) {
              return;
            }

            this._sizeMode = value;

            this._syncSizeMode();
          }
        }, {
          key: "direction",
          get: function get() {
            return this._direction;
          },
          set: function set(value) {
            if (this._direction === value) {
              return;
            }

            this._direction = value;

            this._syncScrollDirection();
          }
        }, {
          key: "scrollThreshold",
          get: function get() {
            return this._scrollThreshold;
          },
          set: function set(value) {
            if (this._scrollThreshold === value) {
              return;
            }

            this._scrollThreshold = value;
          }
        }, {
          key: "pageTurningEventTiming",
          get: function get() {
            return this._pageTurningEventTiming;
          },
          set: function set(value) {
            if (this._pageTurningEventTiming === value) {
              return;
            }

            this._pageTurningEventTiming = value;
          }
        }, {
          key: "indicator",
          get: function get() {
            return this._indicator;
          },
          set: function set(value) {
            if (this._indicator === value) {
              return;
            }

            this._indicator = value;

            if (this.indicator) {
              this.indicator.setPageView(this);
            }
          }
        }, {
          key: "curPageIdx",
          get: function get() {
            return this._curPageIdx;
          }
        }, {
          key: "verticalScrollBar",
          get: function get() {
            return _ScrollView.prototype.verticalScrollBar;
          },
          set: function set(value) {
            this.verticalScrollBar = value;
          }
        }, {
          key: "horizontalScrollBar",
          get: function get() {
            return _ScrollView.prototype.horizontalScrollBar;
          },
          set: function set(value) {
            this.horizontalScrollBar = value;
          }
        }]);

        return PageView;
      }(ScrollView), _class3$B.SizeMode = SizeMode$1, _class3$B.Direction = Direction$3, _class3$B.EventType = extendsEnum(EventType$6, EventType$4), _temp$L), (_applyDecoratedDescriptor(_class2$1s.prototype, "sizeMode", [_dec3$C], Object.getOwnPropertyDescriptor(_class2$1s.prototype, "sizeMode"), _class2$1s.prototype), _applyDecoratedDescriptor(_class2$1s.prototype, "direction", [_dec4$o], Object.getOwnPropertyDescriptor(_class2$1s.prototype, "direction"), _class2$1s.prototype), _applyDecoratedDescriptor(_class2$1s.prototype, "indicator", [_dec5$l], Object.getOwnPropertyDescriptor(_class2$1s.prototype, "indicator"), _class2$1s.prototype), _initializer$1g = applyDecoratedInitializer(_class2$1s.prototype, "autoPageTurningThreshold", [serializable], function () {
        return 100;
      }), _applyDecoratedDescriptor(_class2$1s.prototype, "verticalScrollBar", [_dec6$e, override], Object.getOwnPropertyDescriptor(_class2$1s.prototype, "verticalScrollBar"), _class2$1s.prototype), _applyDecoratedDescriptor(_class2$1s.prototype, "horizontalScrollBar", [_dec7$d, override], Object.getOwnPropertyDescriptor(_class2$1s.prototype, "horizontalScrollBar"), _class2$1s.prototype), _initializer2$W = applyDecoratedInitializer(_class2$1s.prototype, "horizontal", [override, serializable], function () {
        return true;
      }), _initializer3$I = applyDecoratedInitializer(_class2$1s.prototype, "vertical", [override, serializable], function () {
        return true;
      }), _initializer4$B = applyDecoratedInitializer(_class2$1s.prototype, "cancelInnerEvents", [override, serializable], function () {
        return true;
      }), _initializer5$r = applyDecoratedInitializer(_class2$1s.prototype, "scrollEvents", [_dec8$8, serializable, override], function () {
        return [];
      }), _initializer6$l = applyDecoratedInitializer(_class2$1s.prototype, "pageTurningSpeed", [serializable], function () {
        return 0.3;
      }), _initializer7$h = applyDecoratedInitializer(_class2$1s.prototype, "pageEvents", [_dec9$8, serializable], function () {
        return [];
      }), _initializer8$h = applyDecoratedInitializer(_class2$1s.prototype, "_sizeMode", [serializable], function () {
        return SizeMode$1.Unified;
      }), _initializer9$g = applyDecoratedInitializer(_class2$1s.prototype, "_direction", [serializable], function () {
        return Direction$3.Horizontal;
      }), _initializer10$g = applyDecoratedInitializer(_class2$1s.prototype, "_scrollThreshold", [serializable], function () {
        return 0.5;
      }), _initializer11$e = applyDecoratedInitializer(_class2$1s.prototype, "_pageTurningEventTiming", [serializable], function () {
        return 0.1;
      }), _initializer12$c = applyDecoratedInitializer(_class2$1s.prototype, "_indicator", [serializable], function () {
        return null;
      })), _class2$1s)) || _class$1H) || _class$1H));
      legacyCC.PageView = PageView;

      var _tempPos$1 = new Vec3();

      var _defaultAnchor = new Vec2();

      var tInverseTranslate = new Vec2();
      var tInverseScale = new Vec2(1, 1);

      var _tempVec2_1$1 = new Vec2();

      var _tempVec2_2 = new Vec2();

      function align(node, widget) {
        if (widget._hadAlignOnce) return;

        if ( widget.alignMode === AlignMode.ONCE) {
          widget._hadAlignOnce = true;
        }

        var hasTarget = widget.target;
        var target;
        var inverseTranslate = tInverseTranslate;
        var inverseScale = tInverseScale;

        if (hasTarget) {
          target = hasTarget;
          computeInverseTransForTarget(node, target, inverseTranslate, inverseScale);
        } else {
          target = node.parent;
        }

        var targetSize = getReadonlyNodeSize(target);
        var useGlobal = target instanceof Scene || !target.getComponent(UITransform);
        var targetAnchor = useGlobal ? _defaultAnchor : target.getComponent(UITransform).anchorPoint;
        var isRoot = useGlobal;
        node.getPosition(_tempPos$1);
        var uiTrans = node._uiProps.uiTransformComp;
        var x = _tempPos$1.x;
        var y = _tempPos$1.y;
        var anchor = uiTrans.anchorPoint;
        var scale = node.getScale();

        if (widget.alignFlags & AlignFlags.HORIZONTAL) {
          var localLeft = 0;
          var localRight = 0;
          var targetWidth = targetSize.width;

          if (isRoot) {
            localLeft = visibleRect.left.x;
            localRight = visibleRect.right.x;
          } else {
            localLeft = -targetAnchor.x * targetWidth;
            localRight = localLeft + targetWidth;
          }

          localLeft += widget.isAbsoluteLeft ? widget.left : widget.left * targetWidth;
          localRight -= widget.isAbsoluteRight ? widget.right : widget.right * targetWidth;

          if (hasTarget) {
            localLeft += inverseTranslate.x;
            localLeft *= inverseScale.x;
            localRight += inverseTranslate.x;
            localRight *= inverseScale.x;
          }

          var width = 0;
          var anchorX = anchor.x;
          var scaleX = scale.x;

          if (scaleX < 0) {
            anchorX = 1.0 - anchorX;
            scaleX = -scaleX;
          }

          if (widget.isStretchWidth) {
            width = localRight - localLeft;

            if (scaleX !== 0) {
              uiTrans.width = width / scaleX;
            }

            x = localLeft + anchorX * width;
          } else {
            width = uiTrans.width * scaleX;

            if (widget.isAlignHorizontalCenter) {
              var localHorizontalCenter = widget.isAbsoluteHorizontalCenter ? widget.horizontalCenter : widget.horizontalCenter * targetWidth;
              var targetCenter = (0.5 - targetAnchor.x) * targetSize.width;

              if (hasTarget) {
                localHorizontalCenter *= inverseScale.x;
                targetCenter += inverseTranslate.x;
                targetCenter *= inverseScale.x;
              }

              x = targetCenter + (anchorX - 0.5) * width + localHorizontalCenter;
            } else if (widget.isAlignLeft) {
              x = localLeft + anchorX * width;
            } else {
              x = localRight + (anchorX - 1) * width;
            }
          }

          widget._lastSize.width = width;
        }

        if (widget.alignFlags & AlignFlags.VERTICAL) {
          var localTop = 0;
          var localBottom = 0;
          var targetHeight = targetSize.height;

          if (isRoot) {
            localBottom = visibleRect.bottom.y;
            localTop = visibleRect.top.y;
          } else {
            localBottom = -targetAnchor.y * targetHeight;
            localTop = localBottom + targetHeight;
          }

          localBottom += widget.isAbsoluteBottom ? widget.bottom : widget.bottom * targetHeight;
          localTop -= widget.isAbsoluteTop ? widget.top : widget.top * targetHeight;

          if (hasTarget) {
            localBottom += inverseTranslate.y;
            localBottom *= inverseScale.y;
            localTop += inverseTranslate.y;
            localTop *= inverseScale.y;
          }

          var height = 0;
          var anchorY = anchor.y;
          var scaleY = scale.y;

          if (scaleY < 0) {
            anchorY = 1.0 - anchorY;
            scaleY = -scaleY;
          }

          if (widget.isStretchHeight) {
            height = localTop - localBottom;

            if (scaleY !== 0) {
              uiTrans.height = height / scaleY;
            }

            y = localBottom + anchorY * height;
          } else {
            height = uiTrans.height * scaleY;

            if (widget.isAlignVerticalCenter) {
              var localVerticalCenter = widget.isAbsoluteVerticalCenter ? widget.verticalCenter : widget.verticalCenter * targetHeight;
              var targetMiddle = (0.5 - targetAnchor.y) * targetSize.height;

              if (hasTarget) {
                localVerticalCenter *= inverseScale.y;
                targetMiddle += inverseTranslate.y;
                targetMiddle *= inverseScale.y;
              }

              y = targetMiddle + (anchorY - 0.5) * height + localVerticalCenter;
            } else if (widget.isAlignBottom) {
              y = localBottom + anchorY * height;
            } else {
              y = localTop + (anchorY - 1) * height;
            }
          }

          widget._lastSize.height = height;
        }

        node.setPosition(x, y, _tempPos$1.z);
        Vec3.set(widget._lastPos, x, y, _tempPos$1.z);
      }

      function visitNode$1(node) {
        var widget = node.getComponent(Widget);

        if (widget && widget.enabled) {

          if (!legacyCC.isValid(node, true)) {
            return;
          }

          activeWidgets.push(widget);
        }

        var children = node.children;

        for (var _iterator = _createForOfIteratorHelperLoose(children), _step; !(_step = _iterator()).done;) {
          var child = _step.value;

          if (child.active) {
            visitNode$1(child);
          }
        }
      }

      function refreshScene() {
        var scene = director.getScene();

        if (scene) {
          widgetManager.isAligning = true;

          if (widgetManager._nodesOrderDirty) {
            activeWidgets.length = 0;
            visitNode$1(scene);
            widgetManager._nodesOrderDirty = false;
          }
          var widget = null;
          var iterator = widgetManager._activeWidgetsIterator;

          for (iterator.i = 0; iterator.i < activeWidgets.length; ++iterator.i) {
            widget = activeWidgets[iterator.i];

            if (widget._dirty) {
              align(widget.node, widget);
              widget._dirty = false;
            }
          }

          widgetManager.isAligning = false;
        }
      }

      var activeWidgets = [];

      function updateAlignment(node) {
        var parent = node.parent;

        if (parent && Node$1.isNode(parent)) {
          updateAlignment(parent);
        }

        var widget = node.getComponent(Widget);

        if (widget && parent) {
          align(node, widget);
        }
      }

      var widgetManager = exports('widgetManager', legacyCC._widgetManager = {
        isAligning: false,
        _nodesOrderDirty: false,
        _activeWidgetsIterator: new MutableForwardIterator(activeWidgets),
        animationState:  null,
        init: function init() {
          director.on(Director.EVENT_AFTER_SCENE_LAUNCH, refreshScene);
          director.on(Director.EVENT_AFTER_UPDATE, refreshScene);
          View.instance.on('design-resolution-changed', this.onResized, this);

          {
            var thisOnResized = this.onResized.bind(this);
            View.instance.on('canvas-resize', thisOnResized);
            screenAdapter.on('window-resize', thisOnResized);
          }
        },
        add: function add(widget) {
          this._nodesOrderDirty = true;
        },
        remove: function remove(widget) {
          this._activeWidgetsIterator.remove(widget);
        },
        onResized: function onResized() {
          var scene = director.getScene();

          if (scene) {
            this.refreshWidgetOnResized(scene);
          }
        },
        refreshWidgetOnResized: function refreshWidgetOnResized(node) {
          var widget = Node$1.isNode(node) && node.getComponent(Widget);

          if (widget && widget.enabled && (widget.alignMode === AlignMode.ON_WINDOW_RESIZE || widget.alignMode === AlignMode.ALWAYS)) {
            widget.setDirty();
          }

          var children = node.children;

          for (var _iterator2 = _createForOfIteratorHelperLoose(children), _step2; !(_step2 = _iterator2()).done;) {
            var child = _step2.value;
            this.refreshWidgetOnResized(child);
          }
        },
        updateOffsetsToStayPut: function updateOffsetsToStayPut(widget, e) {
          function i(t, c) {
            return Math.abs(t - c) > 1e-10 ? c : t;
          }

          var widgetNode = widget.node;
          var widgetParent = widgetNode.parent;

          if (widgetParent) {
            var zero = _tempVec2_1$1;
            zero.set(0, 0);
            var one = _tempVec2_2;
            one.set(1, 1);

            if (widget.target) {
              widgetParent = widget.target;
              computeInverseTransForTarget(widgetNode, widgetParent, zero, one);
            }

            if (!e) {
              return;
            }

            var parentTrans = widgetParent._uiProps && widgetParent._uiProps.uiTransformComp;
            var parentAP = parentTrans ? parentTrans.anchorPoint : _defaultAnchor;
            var trans = widgetNode._uiProps.uiTransformComp;
            var matchSize = getReadonlyNodeSize(widgetParent);
            var myAP = trans.anchorPoint;
            var pos = widgetNode.getPosition();
            var alignFlags = AlignFlags;
            var widgetNodeScale = widgetNode.getScale();
            var temp = 0;

            if (e & alignFlags.LEFT) {
              var l = -parentAP.x * matchSize.width;
              l += zero.x;
              l *= one.x;
              temp = pos.x - myAP.x * trans.width * Math.abs(widgetNodeScale.x) - l;

              if (!widget.isAbsoluteLeft) {
                temp /= matchSize.width;
              }

              temp /= one.x;
              widget.left = i(widget.left, temp);
            }

            if (e & alignFlags.RIGHT) {
              var r = (1 - parentAP.x) * matchSize.width;
              r += zero.x;
              temp = (r *= one.x) - (pos.x + (1 - myAP.x) * trans.width * Math.abs(widgetNodeScale.x));

              if (!widget.isAbsoluteRight) {
                temp /= matchSize.width;
              }

              temp /= one.x;
              widget.right = i(widget.right, temp);
            }

            if (e & alignFlags.TOP) {
              var t = (1 - parentAP.y) * matchSize.height;
              t += zero.y;
              temp = (t *= one.y) - (pos.y + (1 - myAP.y) * trans.height * Math.abs(widgetNodeScale.y));

              if (!widget.isAbsoluteTop) {
                temp /= matchSize.height;
              }

              temp /= one.y;
              widget.top = i(widget.top, temp);
            }

            if (e & alignFlags.BOT) {
              var b = -parentAP.y * matchSize.height;
              b += zero.y;
              b *= one.y;
              temp = pos.y - myAP.y * trans.height * Math.abs(widgetNodeScale.y) - b;

              if (!widget.isAbsoluteBottom) {
                temp /= matchSize.height;
              }

              temp /= one.y;
              widget.bottom = i(widget.bottom, temp);
            }
          }
        },
        updateAlignment: updateAlignment,
        AlignMode: AlignMode,
        AlignFlags: AlignFlags
      });
      director.on(Director.EVENT_INIT, function () {
        widgetManager.init();
      });

      var _dec$1F, _dec2$Z, _dec3$D, _class$1I;
      var SafeArea = exports('SafeArea', (_dec$1F = ccclass('cc.SafeArea'), _dec2$Z = executionOrder(110), _dec3$D = requireComponent(Widget), _dec$1F(_class$1I = _dec2$Z(_class$1I = _dec3$D(_class$1I = function (_Component) {
        _inheritsLoose(SafeArea, _Component);

        function SafeArea() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = SafeArea.prototype;

        _proto.onEnable = function onEnable() {
          this.updateArea();
          screenAdapter.on('window-resize', this.updateArea, this);
          screenAdapter.on('orientation-change', this.updateArea, this);
        };

        _proto.onDisable = function onDisable() {
          screenAdapter.off('window-resize', this.updateArea, this);
          screenAdapter.off('orientation-change', this.updateArea, this);
        };

        _proto.updateArea = function updateArea() {
          var widget = this.node.getComponent(Widget);
          var uiTransComp = this.node.getComponent(UITransform);

          if (!widget || !uiTransComp) {
            return;
          }

          widget.updateAlignment();
          var lastPos = this.node.position.clone();
          var lastAnchorPoint = uiTransComp.anchorPoint.clone();
          widget.isAlignTop = widget.isAlignBottom = widget.isAlignLeft = widget.isAlignRight = true;
          var visibleSize = view.getVisibleSize();
          var screenWidth = visibleSize.width;
          var screenHeight = visibleSize.height;
          var safeArea = sys.getSafeAreaRect();
          widget.top = screenHeight - safeArea.y - safeArea.height;
          widget.bottom = safeArea.y;
          widget.left = safeArea.x;
          widget.right = screenWidth - safeArea.x - safeArea.width;
          widget.updateAlignment();
          var curPos = this.node.position.clone();
          var anchorX = lastAnchorPoint.x - (curPos.x - lastPos.x) / uiTransComp.width;
          var anchorY = lastAnchorPoint.y - (curPos.y - lastPos.y) / uiTransComp.height;
          uiTransComp.setAnchorPoint(anchorX, anchorY);
          widgetManager.add(widget);
        };

        return SafeArea;
      }(Component)) || _class$1I) || _class$1I) || _class$1I));
      legacyCC.SafeArea = SafeArea;

      var _dec$1G, _dec2$_, _dec3$E, _dec4$p, _dec5$m, _class$1J, _class2$1t, _initializer$1h, _initializer2$X, _initializer3$J, _initializer4$C, _initializer5$s;
      var UICoordinateTracker = exports('UICoordinateTracker', (_dec$1G = ccclass('cc.UICoordinateTracker'), _dec2$_ = executionOrder(110), _dec3$E = type(Node$1), _dec4$p = type(Camera$1), _dec5$m = type([EventHandler]), _dec$1G(_class$1J = _dec2$_(_class$1J = (_class2$1t = function (_Component) {
        _inheritsLoose(UICoordinateTracker, _Component);

        function UICoordinateTracker() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.syncEvents = _initializer$1h && _initializer$1h();
          _this._target = _initializer2$X && _initializer2$X();
          _this._camera = _initializer3$J && _initializer3$J();
          _this._useScale = _initializer4$C && _initializer4$C();
          _this._distance = _initializer5$s && _initializer5$s();
          _this._transformPos = new Vec3();
          _this._viewPos = new Vec3();
          _this._canMove = true;
          _this._lastWPos = new Vec3();
          _this._lastCameraPos = new Vec3();
          return _this;
        }

        var _proto = UICoordinateTracker.prototype;

        _proto.onEnable = function onEnable() {
          this._checkCanMove();
        };

        _proto.update = function update() {
          var wPos = this.node.worldPosition;
          var camera = this._camera;

          if (!this._canMove || !camera || !camera.camera || this._lastWPos.equals(wPos) && this._lastCameraPos.equals(camera.node.worldPosition)) {
            return;
          }

          this._lastWPos.set(wPos);

          this._lastCameraPos.set(camera.node.worldPosition);

          camera.camera.update();
          camera.convertToUINode(wPos, this._target, this._transformPos);

          if (this._useScale) {
            Vec3.transformMat4(this._viewPos, this.node.worldPosition, camera.camera.matView);
          }

          if (this.syncEvents.length > 0) {
            var data = this._distance / Math.abs(this._viewPos.z);
            EventHandler.emitEvents(this.syncEvents, this._transformPos, data);
          }
        };

        _proto._checkCanMove = function _checkCanMove() {
          this._canMove = !!(this._camera && this._target);
        };

        _createClass(UICoordinateTracker, [{
          key: "target",
          get: function get() {
            return this._target;
          },
          set: function set(value) {
            if (this._target === value) {
              return;
            }

            this._target = value;

            this._checkCanMove();
          }
        }, {
          key: "camera",
          get: function get() {
            return this._camera;
          },
          set: function set(value) {
            if (this._camera === value) {
              return;
            }

            this._camera = value;

            this._checkCanMove();
          }
        }, {
          key: "useScale",
          get: function get() {
            return this._useScale;
          },
          set: function set(value) {
            if (this._useScale === value) {
              return;
            }

            this._useScale = value;
          }
        }, {
          key: "distance",
          get: function get() {
            return this._distance;
          },
          set: function set(value) {
            if (this._distance === value) {
              return;
            }

            this._distance = value;
          }
        }]);

        return UICoordinateTracker;
      }(Component), (_applyDecoratedDescriptor(_class2$1t.prototype, "target", [_dec3$E], Object.getOwnPropertyDescriptor(_class2$1t.prototype, "target"), _class2$1t.prototype), _applyDecoratedDescriptor(_class2$1t.prototype, "camera", [_dec4$p], Object.getOwnPropertyDescriptor(_class2$1t.prototype, "camera"), _class2$1t.prototype), _initializer$1h = applyDecoratedInitializer(_class2$1t.prototype, "syncEvents", [_dec5$m, serializable], function () {
        return [];
      }), _initializer2$X = applyDecoratedInitializer(_class2$1t.prototype, "_target", [serializable], function () {
        return null;
      }), _initializer3$J = applyDecoratedInitializer(_class2$1t.prototype, "_camera", [serializable], function () {
        return null;
      }), _initializer4$C = applyDecoratedInitializer(_class2$1t.prototype, "_useScale", [serializable], function () {
        return true;
      }), _initializer5$s = applyDecoratedInitializer(_class2$1t.prototype, "_distance", [serializable], function () {
        return 1;
      })), _class2$1t)) || _class$1J) || _class$1J));

      var _dec$1H, _class$1K;
      var BlockEvents = [NodeEventType.TOUCH_START, NodeEventType.TOUCH_END, NodeEventType.TOUCH_MOVE, NodeEventType.MOUSE_DOWN, NodeEventType.MOUSE_MOVE, NodeEventType.MOUSE_UP, NodeEventType.MOUSE_ENTER, NodeEventType.MOUSE_LEAVE, NodeEventType.MOUSE_WHEEL];

      function stopPropagation(event) {
        event.propagationStopped = true;
      }

      var BlockInputEvents = exports('BlockInputEvents', (_dec$1H = ccclass('cc.BlockInputEvents'), _dec$1H(_class$1K = function (_Component) {
        _inheritsLoose(BlockInputEvents, _Component);

        function BlockInputEvents() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = BlockInputEvents.prototype;

        _proto.onEnable = function onEnable() {
          for (var i = 0; i < BlockEvents.length; i++) {
            this.node.on(BlockEvents[i], stopPropagation, this);
          }
        };

        _proto.onDisable = function onDisable() {
          for (var i = 0; i < BlockEvents.length; i++) {
            this.node.off(BlockEvents[i], stopPropagation, this);
          }
        };

        return BlockInputEvents;
      }(Component)) || _class$1K));

      var _dec$1I, _dec2$$, _dec3$F, _class$1L, _class2$1u, _initializer$1i, _initializer2$Y;
      var SubContextView = exports('SubContextView', (_dec$1I = ccclass('cc.SubContextView'), _dec2$$ = executionOrder(110), _dec3$F = requireComponent(UITransform), _dec$1I(_class$1L = _dec2$$(_class$1L = _dec3$F(_class$1L = (_class2$1u = function (_Component) {
        _inheritsLoose(SubContextView, _Component);

        function SubContextView() {
          var _this;

          _this = _Component.call(this) || this;
          _this._fps = _initializer$1i && _initializer$1i();
          _this._sprite = void 0;
          _this._imageAsset = void 0;
          _this._texture = void 0;
          _this._updatedTime = 0;
          _this._updateInterval = 0;
          _this._openDataContext = void 0;
          _this._content = void 0;
          _this._designResolutionSize = _initializer2$Y && _initializer2$Y();
          _this._content = new Node$1('content');
          _this._content.hideFlags |= CCObject.Flags.DontSave | CCObject.Flags.HideInHierarchy;
          _this._sprite = null;
          _this._imageAsset = new ImageAsset();
          _this._openDataContext = null;
          _this._updatedTime = performance.now();
          _this._texture = new Texture2D();
          return _this;
        }

        var _proto = SubContextView.prototype;

        _proto.onLoad = function onLoad() {
          if (minigame.getOpenDataContext) {
            this._updateInterval = 1000 / this._fps;
            this._openDataContext = minigame.getOpenDataContext();

            this._initSharedCanvas();

            this._initContentNode();

            this._updateSubContextView();

            this._updateContentLayer();
          } else {
            this.enabled = false;
          }
        };

        _proto.onEnable = function onEnable() {
          this._registerNodeEvent();
        };

        _proto.onDisable = function onDisable() {
          this._unregisterNodeEvent();
        };

        _proto._initSharedCanvas = function _initSharedCanvas() {
          if (this._openDataContext) {
            var sharedCanvas = this._openDataContext.canvas;
            var designWidth = this._designResolutionSize.width;
            var designHeight = this._designResolutionSize.height;

            sharedCanvas.width = designWidth;
            sharedCanvas.height = designHeight;
          }
        };

        _proto._initContentNode = function _initContentNode() {
          if (this._openDataContext) {
            var sharedCanvas = this._openDataContext.canvas;
            var image = this._imageAsset;
            image.reset(sharedCanvas);
            this._texture.image = image;

            this._texture.create(sharedCanvas.width, sharedCanvas.height);

            this._sprite = this._content.getComponent(Sprite);

            if (!this._sprite) {
              this._sprite = this._content.addComponent(Sprite);
            }

            if (this._sprite.spriteFrame) {
              this._sprite.spriteFrame.texture = this._texture;
            } else {
              var sp = new SpriteFrame();
              sp.texture = this._texture;
              this._sprite.spriteFrame = sp;
            }

            this._content.parent = this.node;
          }
        };

        _proto._updateSubContextView = function _updateSubContextView() {
          if (!this._openDataContext) {
            return;
          }

          var nodeTrans = this.node.getComponent(UITransform);

          var contentTrans = this._content.getComponent(UITransform);

          var scaleX = nodeTrans.width / contentTrans.width;
          var scaleY = nodeTrans.height / contentTrans.height;
          var scale = scaleX > scaleY ? scaleY : scaleX;
          contentTrans.width *= scale;
          contentTrans.height *= scale;
          var viewportRect = view.getViewportRect();
          var box = contentTrans.getBoundingBoxToWorld();
          var visibleSize = view.getVisibleSize();
          var dpr = screenAdapter.devicePixelRatio;
          var x = (viewportRect.width * (box.x / visibleSize.width) + viewportRect.x) / dpr;
          var y = (viewportRect.height * (box.y / visibleSize.height) + viewportRect.y) / dpr;
          var width = viewportRect.width * (box.width / visibleSize.width) / dpr;
          var height = viewportRect.height * (box.height / visibleSize.height) / dpr;

          this._openDataContext.postMessage({
            fromEngine: true,
            type: 'engine',
            event: 'viewport',
            x: x,
            y: y,
            width: width,
            height: height
          });
        };

        _proto._updateSubContextTexture = function _updateSubContextTexture() {
          var img = this._imageAsset;

          if (!img || !this._openDataContext) {
            return;
          }

          if (img.width <= 0 || img.height <= 0) {
            return;
          }

          var sharedCanvas = this._openDataContext.canvas;
          img.reset(sharedCanvas);

          if (sharedCanvas.width > img.width || sharedCanvas.height > img.height) {
            this._texture.create(sharedCanvas.width, sharedCanvas.height);
          }

          this._texture.uploadData(sharedCanvas);
        };

        _proto._registerNodeEvent = function _registerNodeEvent() {
          this.node.on(NodeEventType.TRANSFORM_CHANGED, this._updateSubContextView, this);
          this.node.on(NodeEventType.SIZE_CHANGED, this._updateSubContextView, this);
          this.node.on(NodeEventType.LAYER_CHANGED, this._updateContentLayer, this);
        };

        _proto._unregisterNodeEvent = function _unregisterNodeEvent() {
          this.node.off(NodeEventType.TRANSFORM_CHANGED, this._updateSubContextView, this);
          this.node.off(NodeEventType.SIZE_CHANGED, this._updateSubContextView, this);
          this.node.off(NodeEventType.LAYER_CHANGED, this._updateContentLayer, this);
        };

        _proto._updateContentLayer = function _updateContentLayer() {
          this._content.layer = this.node.layer;
        };

        _proto.update = function update(dt) {
          var calledUpdateManually = dt === undefined;

          if (calledUpdateManually) {
            this._updateSubContextTexture();

            return;
          }

          var now = performance.now();
          var deltaTime = now - this._updatedTime;

          if (deltaTime >= this._updateInterval) {
            this._updatedTime += this._updateInterval;

            this._updateSubContextTexture();
          }
        };

        _proto.onDestroy = function onDestroy() {
          this._content.destroy();

          this._texture.destroy();

          if (this._sprite) {
            this._sprite.destroy();
          }

          this._imageAsset.destroy();

          this._openDataContext = null;
        };

        _createClass(SubContextView, [{
          key: "designResolutionSize",
          get: function get() {
            return this._designResolutionSize;
          },
          set: function set(value) {
            {
              return;
            }
          }
        }, {
          key: "fps",
          get: function get() {
            return this._fps;
          },
          set: function set(value) {
            if (this._fps === value) {
              return;
            }

            this._fps = value;
            this._updateInterval = 1000 / value;
          }
        }]);

        return SubContextView;
      }(Component), (_initializer$1i = applyDecoratedInitializer(_class2$1u.prototype, "_fps", [serializable], function () {
        return 60;
      }), _initializer2$Y = applyDecoratedInitializer(_class2$1u.prototype, "_designResolutionSize", [serializable], function () {
        return new Size(640, 960);
      })), _class2$1u)) || _class$1L) || _class$1L) || _class$1L));
      legacyCC.SubContextView = SubContextView;

      var _dec$1J, _class$1M, _class2$1v, _initializer$1j;
      var VideoClip = exports('VideoClip', (_dec$1J = ccclass('cc.VideoClip'), _dec$1J(_class$1M = (_class2$1v = function (_Asset) {
        _inheritsLoose(VideoClip, _Asset);

        function VideoClip() {
          var _this;

          _this = _Asset.call(this) || this;
          _this._duration = _initializer$1j && _initializer$1j();
          _this._video = null;
          return _this;
        }

        _createClass(VideoClip, [{
          key: "_nativeAsset",
          get: function get() {
            return this._video;
          },
          set: function set(clip) {
            this._video = clip;

            if (clip) {
              this._duration = clip.duration;
            } else {
              this._duration = 0;
            }
          }
        }]);

        return VideoClip;
      }(Asset), (_initializer$1j = applyDecoratedInitializer(_class2$1v.prototype, "_duration", [serializable], function () {
        return 0;
      })), _class2$1v)) || _class$1M));

      var ccdocument$4 = ccwindow.document;
      function downloadVideo(url, options, onComplete) {
        var video = ccdocument$4.createElement('video');
        var source = ccdocument$4.createElement('source');
        video.appendChild(source);
        var req = new XMLHttpRequest();
        req.open('GET', url, true);
        req.responseType = 'blob';

        req.onload = function onload() {
          if (this.status === 200 || this.status === 0) {
            source.src = URL.createObjectURL(this.response);
            onComplete(null, video);
          } else {
            onComplete(new Error(req.status + "(no response)"));
          }
        };

        req.onerror = function onerror() {
          var message = "load video failure - " + url;
          log(message);
          onComplete(new Error(message));
        };

        req.send();
      }

      function createVideoClip(id, data, options, onComplete) {
        var out = new VideoClip();
        out._nativeUrl = id;
        out._nativeAsset = data;
        onComplete(null, out);
      }

      downloader$1.register({
        '.mp4': downloadVideo,
        '.avi': downloadVideo,
        '.mov': downloadVideo,
        '.mpg': downloadVideo,
        '.mpeg': downloadVideo,
        '.rm': downloadVideo,
        '.rmvb': downloadVideo
      });
      factory.register({
        '.mp4': createVideoClip,
        '.avi': createVideoClip,
        '.mov': createVideoClip,
        '.mpg': createVideoClip,
        '.mpeg': createVideoClip,
        '.rm': createVideoClip,
        '.rmvb': createVideoClip
      });

      var ResourceType = Enum({
        REMOTE: 0,
        LOCAL: 1
      });
      var EventType$7;

      (function (EventType) {
        EventType["NONE"] = "none";
        EventType["PLAYING"] = "playing";
        EventType["PAUSED"] = "paused";
        EventType["STOPPED"] = "stopped";
        EventType["COMPLETED"] = "completed";
        EventType["META_LOADED"] = "meta-loaded";
        EventType["READY_TO_PLAY"] = "ready-to-play";
        EventType["ERROR"] = "error";
        EventType["CLICKED"] = "clicked";
      })(EventType$7 || (EventType$7 = {}));

      var READY_STATE;

      (function (READY_STATE) {
        READY_STATE[READY_STATE["HAVE_NOTHING"] = 0] = "HAVE_NOTHING";
        READY_STATE[READY_STATE["HAVE_METADATA"] = 1] = "HAVE_METADATA";
        READY_STATE[READY_STATE["HAVE_CURRENT_DATA"] = 2] = "HAVE_CURRENT_DATA";
        READY_STATE[READY_STATE["HAVE_FUTURE_DATA"] = 3] = "HAVE_FUTURE_DATA";
        READY_STATE[READY_STATE["HAVE_ENOUGH_DATA"] = 4] = "HAVE_ENOUGH_DATA";
      })(READY_STATE || (READY_STATE = {}));

      var VideoPlayerImpl = function () {
        function VideoPlayerImpl(component) {
          var _this = this;

          this._componentEventList = new Map();
          this._state = EventType$7.NONE;
          this._video = null;
          this._onInterruptedBegin = void 0;
          this._onInterruptedEnd = void 0;
          this._interrupted = false;
          this._loaded = false;
          this._loadedMeta = false;
          this._ignorePause = false;
          this._fullScreenOnAwake = false;
          this._visible = true;
          this._playing = false;
          this._cachedCurrentTime = -1;
          this._waitingFullscreen = false;
          this._waitingPlay = false;
          this._keepAspectRatio = false;
          this._component = null;
          this._uiTrans = null;
          this._node = null;
          this._stayOnBottom = false;
          this._dirty = false;
          this._forceUpdate = false;
          this._w = 0;
          this._h = 0;
          this._m00 = 0;
          this._m01 = 0;
          this._m04 = 0;
          this._m05 = 0;
          this._m12 = 0;
          this._m13 = 0;
          this._component = component;
          this._node = component.node;
          this._uiTrans = component.node.getComponent(UITransform);

          this._onInterruptedBegin = function () {
            if (!_this.video || _this._state !== EventType$7.PLAYING) {
              return;
            }

            _this.video.pause();

            _this._interrupted = true;
          };

          this._onInterruptedEnd = function () {
            if (!_this._interrupted || !_this.video) {
              return;
            }

            _this.video.play();

            _this._interrupted = false;
          };

          legacyCC.game.on(legacyCC.Game.EVENT_PAUSE, this._onInterruptedBegin);
          legacyCC.game.on(legacyCC.Game.EVENT_RESUME, this._onInterruptedEnd);
        }

        var _proto = VideoPlayerImpl.prototype;

        _proto.onLoadedMetadata = function onLoadedMetadata(e) {
          this._loadedMeta = true;
          this._forceUpdate = true;

          if (this._visible) {
            this.enable();
          } else {
            this.disable();
          }

          this.dispatchEvent(EventType$7.META_LOADED);
          var video = e.target;

          if (this._keepAspectRatio && video) {
            this.syncUITransform(video.videoWidth, video.videoHeight);
          }

          this.delayedFullScreen();
          this.delayedPlay();
        };

        _proto.onCanPlay = function onCanPlay(e) {
          this._loaded = true;
          this.dispatchEvent(EventType$7.READY_TO_PLAY);
        };

        _proto.onPlay = function onPlay(e) {
          this._playing = true;
          this.dispatchEvent(EventType$7.PLAYING);
        };

        _proto.onPlaying = function onPlaying(e) {
          this.dispatchEvent(EventType$7.PLAYING);
        };

        _proto.onPause = function onPause(e) {
          if (this._ignorePause) {
            this._ignorePause = false;
            return;
          }

          this._playing = false;
          this.dispatchEvent(EventType$7.PAUSED);
        };

        _proto.onStoped = function onStoped(e) {
          this._playing = false;
          this._ignorePause = false;
          this.dispatchEvent(EventType$7.STOPPED);
        };

        _proto.onEnded = function onEnded(e) {
          this.dispatchEvent(EventType$7.COMPLETED);
        };

        _proto.onClick = function onClick(e) {
          this.dispatchEvent(EventType$7.CLICKED);
        };

        _proto.onError = function onError(e) {
          this.dispatchEvent(EventType$7.ERROR);
          var video = e.target;

          if (video && video.error) {
            error("Error " + video.error.code + "; details: " + video.error.message);
          }
        };

        _proto.play = function play() {
          if (this._loadedMeta || this._loaded) {
            this.canPlay();
          } else {
            this._waitingPlay = true;
          }
        };

        _proto.delayedPlay = function delayedPlay() {
          if (this._waitingPlay) {
            this.canPlay();
            this._waitingPlay = false;
          }
        };

        _proto.syncFullScreenOnAwake = function syncFullScreenOnAwake(enabled) {
          this._fullScreenOnAwake = enabled;

          if (this._loadedMeta || this._loaded) {
            this.canFullScreen(enabled);
          } else {
            this._waitingFullscreen = true;
          }
        };

        _proto.delayedFullScreen = function delayedFullScreen() {
          if (this._waitingFullscreen) {
            this.canFullScreen(this._fullScreenOnAwake);
            this._waitingFullscreen = false;
          }
        };

        _proto.dispatchEvent = function dispatchEvent(key) {
          var callback = this._componentEventList.get(key);

          if (callback) {
            this._state = key;
            callback.call(this);
          }
        };

        _proto.syncUITransform = function syncUITransform(width, height) {
          if (this._uiTrans) {
            this._uiTrans.width = width;
            this._uiTrans.height = height;
          }
        };

        _proto.syncCurrentTime = function syncCurrentTime() {
          if (!this.video) {
            return;
          }

          if (this._cachedCurrentTime !== -1 && this.video.currentTime !== this._cachedCurrentTime) {
            this.seekTo(this._cachedCurrentTime);
            this._cachedCurrentTime = -1;
          }
        };

        _proto.destroy = function destroy() {
          this.removeVideoPlayer();

          this._componentEventList.clear();

          legacyCC.game.off(legacyCC.Game.EVENT_PAUSE, this._onInterruptedBegin);
          legacyCC.game.off(legacyCC.Game.EVENT_RESUME, this._onInterruptedEnd);
        };

        _createClass(VideoPlayerImpl, [{
          key: "fullScreenOnAwake",
          get: function get() {
            return this._fullScreenOnAwake;
          }
        }, {
          key: "loaded",
          get: function get() {
            return this._loaded;
          }
        }, {
          key: "componentEventList",
          get: function get() {
            return this._componentEventList;
          }
        }, {
          key: "video",
          get: function get() {
            return this._video;
          }
        }, {
          key: "state",
          get: function get() {
            return this._state;
          }
        }, {
          key: "isPlaying",
          get: function get() {
            return this._playing;
          }
        }, {
          key: "UICamera",
          get: function get() {
            return director.root.batcher2D.getFirstRenderCamera(this._node);
          }
        }]);

        return VideoPlayerImpl;
      }();
      legacyCC.internal.VideoPlayerImpl = VideoPlayerImpl;

      var ccdocument$5 = ccwindow.document;
      var MIN_ZINDEX = -Math.pow(2, 15);

      var _mat4_temp$2 = mat4();

      var VideoPlayerImplWeb = function (_VideoPlayerImpl) {
        _inheritsLoose(VideoPlayerImplWeb, _VideoPlayerImpl);

        function VideoPlayerImplWeb(component) {
          var _this;

          _this = _VideoPlayerImpl.call(this, component) || this;
          _this._eventList = new Map();
          _this._clearColorA = -1;
          _this._clearFlag = void 0;
          return _this;
        }

        var _proto = VideoPlayerImplWeb.prototype;

        _proto.addListener = function addListener(type, handler) {
          if (!this._video) {
            return;
          }

          this._eventList.set(type, handler);

          this._video.addEventListener(type, handler);
        };

        _proto.removeAllListeners = function removeAllListeners() {
          var _this2 = this;

          this._eventList.forEach(function (handler, type) {
            if (!_this2._video) {
              return;
            }

            _this2._video.removeEventListener(type, handler);
          });

          this._eventList.clear();
        };

        _proto.canPlay = function canPlay() {
          var _this3 = this;

          if (this.video) {
            var promise = this.video.play();

            if (ccwindow.Promise && promise instanceof Promise) {
              promise["catch"](function (error) {}).then(function () {
                _this3.syncCurrentTime();
              });
            }
          }
        };

        _proto.pause = function pause() {
          if (this.video) {
            this.video.pause();
            this._cachedCurrentTime = this.video.currentTime;
          }
        };

        _proto.resume = function resume() {
          this.play();
        };

        _proto.stop = function stop() {
          var _this4 = this;

          if (this.video) {
            this._ignorePause = true;
            this.video.currentTime = 0;
            this.video.pause();
            this._cachedCurrentTime = 0;
            setTimeout(function () {
              _this4._ignorePause = false;

              _this4.dispatchEvent(EventType$7.STOPPED);
            }, 0);
          }
        };

        _proto.syncClip = function syncClip(clip) {
          this.removeVideoPlayer();

          if (!clip) {
            return;
          }

          this.createVideoPlayer(clip.nativeUrl);
        };

        _proto.syncURL = function syncURL(url) {
          this.removeVideoPlayer();

          if (!url) {
            return;
          }

          this.createVideoPlayer(url);
        };

        _proto.syncPlaybackRate = function syncPlaybackRate(val) {
          if (sys.browserType === BrowserType.UC) {
            warn('playbackRate is not supported by the uc mobile browser.');
            return;
          }

          if (this.video) {
            this.video.playbackRate = val;
          }
        };

        _proto.syncVolume = function syncVolume(val) {
          if (this.video) {
            this.video.volume = val;
          }
        };

        _proto.syncMute = function syncMute(enabled) {
          if (this.video) {
            this.video.muted = enabled;
          }
        };

        _proto.syncLoop = function syncLoop(enabled) {
          if (this.video) {
            this.video.loop = enabled;
          }
        };

        _proto.getDuration = function getDuration() {
          if (!this.video) {
            return 0;
          }

          return this.video.duration;
        };

        _proto.getCurrentTime = function getCurrentTime() {
          if (this.video) {
            return this.video.currentTime;
          }

          return -1;
        };

        _proto.seekTo = function seekTo(val) {
          if (this.video) {
            this.video.currentTime = val;
          }
        };

        _proto.canFullScreen = function canFullScreen(enabled) {
          var _this5 = this;

          var video = this._video;

          if (!video || video.readyState !== READY_STATE.HAVE_ENOUGH_DATA) {
            return;
          }

          if (sys.os === OS.IOS && sys.isBrowser) {
            if (enabled) {
              if (video.webkitEnterFullscreen) {
                video.webkitEnterFullscreen();
              }
            } else if (video.webkitExitFullscreen) {
              video.webkitExitFullscreen();
            }

            this._fullScreenOnAwake = video.webkitDisplayingFullscreen;
            return;
          }

          if (!screen.supportsFullScreen) {
            this._fullScreenOnAwake = enabled;
            this._forceUpdate = true;
            this.syncMatrix();
            return;
          }

          if (enabled) {
            if (sys.browserType === BrowserType.IE) {
              video.style.transform = '';
            }

            video.setAttribute('x5-video-player-fullscreen', 'true');
            screen.requestFullScreen(video, function (document) {
              var fullscreenElement = sys.browserType === BrowserType.IE ? document.msFullscreenElement : document.fullscreenElement;
              _this5._fullScreenOnAwake = fullscreenElement === video;
            }, function () {
              _this5._fullScreenOnAwake = false;
            });
          } else {
            video.removeAttribute('x5-video-player-fullscreen');
            screen.exitFullScreen();
          }
        };

        _proto.syncStayOnBottom = function syncStayOnBottom(enabled) {
          if (this._video) {
            this._video.style['z-index'] = enabled ? MIN_ZINDEX : 0;
            this._stayOnBottom = enabled;
          }

          this._dirty = true;
        };

        _proto.syncKeepAspectRatio = function syncKeepAspectRatio(enabled) {
          this._keepAspectRatio = enabled;

          if (enabled && this._loadedMeta && this._video) {
            this.syncUITransform(this._video.videoWidth, this._video.videoHeight);
          }
        };

        _proto.removeVideoPlayer = function removeVideoPlayer() {
          var video = this._video;

          if (video) {
            if (contains$1(game.container, video)) {
              game.container.removeChild(video);
              this.removeAllListeners();
            }
          }

          this._cachedCurrentTime = 0;
          this._playing = false;
          this._loaded = false;
          this._loadedMeta = false;
          this._video = null;
        };

        _proto.createVideoPlayer = function createVideoPlayer(url) {
          var video = this._video = ccdocument$5.createElement('video');
          video.className = 'cocosVideo';
          video.style.visibility = 'hidden';
          video.style.position = 'absolute';
          video.style.bottom = '0px';
          video.style.left = '0px';
          video.style['transform-origin'] = '0px 100% 0px';
          video.style['-webkit-transform-origin'] = '0px 100% 0px';
          video.setAttribute('preload', 'auto');
          video.setAttribute('webkit-playsinline', '');
          video.setAttribute('x5-playsinline', '');
          video.setAttribute('playsinline', '');

          this._bindDomEvent();

          game.container.appendChild(video);
          var source = ccdocument$5.createElement('source');
          video.appendChild(source);
          source.src = url;
        };

        _proto._bindDomEvent = function _bindDomEvent() {
          var video = this._video;
          this.addListener('loadedmetadata', this.onLoadedMetadata.bind(this));
          this.addListener('canplay', this.onCanPlay.bind(this));
          this.addListener('canplaythrough', this.onCanPlay.bind(this));
          this.addListener('play', this.onPlay.bind(this));
          this.addListener('playing', this.onPlaying.bind(this));
          this.addListener('pause', this.onPause.bind(this));
          this.addListener('click', this.onClick.bind(this));
          this.addListener('ended', this.onEnded.bind(this));
          this.addListener('error', this.onError.bind(this));
        };

        _proto.onCanPlay = function onCanPlay(e) {
          var video = e.target;

          if (this._loaded && video) {
            return;
          }

          switch (video.readyState) {
            case READY_STATE.HAVE_METADATA:
            case READY_STATE.HAVE_ENOUGH_DATA:
              {
                _VideoPlayerImpl.prototype.onCanPlay.call(this, e);

                break;
              }
          }
        };

        _proto.enable = function enable() {
          if (this._video) {
            this._visible = true;

            if (this._video.style.visibility === 'visible') {
              return;
            }

            this._video.style.visibility = 'visible';
          }
        };

        _proto.disable = function disable(noPause) {
          if (this._video) {
            if (!noPause && this._playing) {
              this._video.pause();
            }

            this._visible = false;

            if (this._video.style.visibility === 'hidden') {
              return;
            }

            this._video.style.visibility = 'hidden';
          }
        };

        _proto.syncMatrix = function syncMatrix() {
          if (!this._video || !this._visible || !this._component) return;
          var camera = this.UICamera;

          if (!camera) {
            return;
          }

          if (screen.fullScreen()) {
            return;
          }

          if (this._dirty) {
            this._dirty = false;

            if (this._stayOnBottom) {
              this._clearColorA = camera.clearColor.w;
              this._clearFlag = camera.clearFlag;
              camera.clearColor.w = 0;
              camera.clearFlag = ClearFlagBit.ALL;
            } else if (this._clearFlag) {
              camera.clearColor.w = this._clearColorA;
              camera.clearFlag = this._clearFlag;
              this._clearColorA = -1;
              this._clearFlag = null;
            }
          }

          this._component.node.getWorldMatrix(_mat4_temp$2);

          camera.update(true);
          camera.worldMatrixToScreen(_mat4_temp$2, _mat4_temp$2, game.canvas.width, game.canvas.height);
          var width = 0;
          var height = 0;

          if (this._fullScreenOnAwake) {
            width = visibleRect.width;
            height = visibleRect.height;
          } else {
            width = this._uiTrans.contentSize.width;
            height = this._uiTrans.contentSize.height;
          }

          if (!this._forceUpdate && this._m00 === _mat4_temp$2.m00 && this._m01 === _mat4_temp$2.m01 && this._m04 === _mat4_temp$2.m04 && this._m05 === _mat4_temp$2.m05 && this._m12 === _mat4_temp$2.m12 && this._m13 === _mat4_temp$2.m13 && this._w === width && this._h === height) {
            return;
          }

          this._m00 = _mat4_temp$2.m00;
          this._m01 = _mat4_temp$2.m01;
          this._m04 = _mat4_temp$2.m04;
          this._m05 = _mat4_temp$2.m05;
          this._m12 = _mat4_temp$2.m12;
          this._m13 = _mat4_temp$2.m13;
          this._w = width;
          this._h = height;
          var dpr = screenAdapter.devicePixelRatio;
          var scaleX = 1 / dpr;
          var scaleY = 1 / dpr;
          var container = game.container;
          var sx = _mat4_temp$2.m00 * scaleX;
          var b = _mat4_temp$2.m01;
          var c = _mat4_temp$2.m04;
          var sy = _mat4_temp$2.m05 * scaleY;
          this._video.style.width = this._w + "px";
          this._video.style.height = this._h + "px";

          if (sys.browserType !== BrowserType.MOBILE_QQ) {
            this._video.style.objectFit = this._keepAspectRatio ? 'none' : 'fill';
          } else {
            warn('keepAspectRatio is not supported by the qq mobile browser.');
          }

          var w = this._w * scaleX;
          var h = this._h * scaleY;
          var _anchorPoint = this._uiTrans.anchorPoint,
              x = _anchorPoint.x,
              y = _anchorPoint.y;
          var appx = w * _mat4_temp$2.m00 * x;
          var appy = h * _mat4_temp$2.m05 * y;
          var offsetX = container && container.style.paddingLeft ? parseInt(container.style.paddingLeft) : 0;
          var offsetY = container && container.style.paddingBottom ? parseInt(container.style.paddingBottom) : 0;
          var tx = _mat4_temp$2.m12 * scaleX - appx + offsetX;
          var ty = _mat4_temp$2.m13 * scaleY - appy + offsetY;
          var matrix = "matrix(" + sx + "," + -b + "," + -c + "," + sy + "," + tx + "," + -ty + ")";
          this._video.style.transform = matrix;
          this._video.style['-webkit-transform'] = matrix;

          if (sys.browserType !== BrowserType.IE) {
            this._forceUpdate = false;
          }
        };

        return VideoPlayerImplWeb;
      }(VideoPlayerImpl);

      var VideoPlayerImplManager = function () {
        function VideoPlayerImplManager() {}

        VideoPlayerImplManager.getImpl = function getImpl(component) {
          return new VideoPlayerImplWeb(component);
        };

        return VideoPlayerImplManager;
      }();
      legacyCC.internal.VideoPlayerImplManager = VideoPlayerImplManager;

      var _dec$1K, _dec2$10, _dec3$G, _dec4$q, _dec5$n, _dec6$f, _class$1N, _class2$1w, _initializer$1k, _initializer2$Z, _initializer3$K, _initializer4$D, _initializer5$t, _initializer6$m, _initializer7$i, _initializer8$i, _initializer9$h, _initializer10$h, _initializer11$f, _initializer12$d, _class3$C, _temp$M;
      var VideoPlayer = exports('VideoPlayer', (_dec$1K = ccclass('cc.VideoPlayer'), _dec2$10 = requireComponent(UITransform), _dec3$G = type(VideoClip), _dec4$q = type(ResourceType), _dec5$n = type(VideoClip), _dec6$f = type([EventHandler]), _dec$1K(_class$1N = _dec2$10(_class$1N = (_class2$1w = (_temp$M = _class3$C = function (_Component) {
        _inheritsLoose(VideoPlayer, _Component);

        function VideoPlayer() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._resourceType = _initializer$1k && _initializer$1k();
          _this._remoteURL = _initializer2$Z && _initializer2$Z();
          _this._clip = _initializer3$K && _initializer3$K();
          _this._playOnAwake = _initializer4$D && _initializer4$D();
          _this._volume = _initializer5$t && _initializer5$t();
          _this._mute = _initializer6$m && _initializer6$m();
          _this._playbackRate = _initializer7$i && _initializer7$i();
          _this._loop = _initializer8$i && _initializer8$i();
          _this._fullScreenOnAwake = _initializer9$h && _initializer9$h();
          _this._stayOnBottom = _initializer10$h && _initializer10$h();
          _this._keepAspectRatio = _initializer11$f && _initializer11$f();
          _this._impl = null;
          _this._cachedCurrentTime = 0;
          _this.videoPlayerEvent = _initializer12$d && _initializer12$d();
          return _this;
        }

        var _proto = VideoPlayer.prototype;

        _proto.syncSource = function syncSource() {
          if (!this._impl) {
            return;
          }

          if (this._resourceType === ResourceType.REMOTE) {
            this._impl.syncURL(this._remoteURL);
          } else {
            this._impl.syncClip(this._clip);
          }
        };

        _proto.__preload = function __preload() {

          this._impl = VideoPlayerImplManager.getImpl(this);
          this.syncSource();

          this._impl.syncLoop(this._loop);

          this._impl.syncVolume(this._volume);

          this._impl.syncMute(this._mute);

          this._impl.seekTo(this._cachedCurrentTime);

          this._impl.syncPlaybackRate(this._playbackRate);

          this._impl.syncStayOnBottom(this._stayOnBottom);

          this._impl.syncKeepAspectRatio(this._keepAspectRatio);

          this._impl.syncFullScreenOnAwake(this._fullScreenOnAwake);

          this._impl.componentEventList.set(EventType$7.META_LOADED, this.onMetaLoaded.bind(this));

          this._impl.componentEventList.set(EventType$7.READY_TO_PLAY, this.onReadyToPlay.bind(this));

          this._impl.componentEventList.set(EventType$7.PLAYING, this.onPlaying.bind(this));

          this._impl.componentEventList.set(EventType$7.PAUSED, this.onPaused.bind(this));

          this._impl.componentEventList.set(EventType$7.STOPPED, this.onStopped.bind(this));

          this._impl.componentEventList.set(EventType$7.COMPLETED, this.onCompleted.bind(this));

          this._impl.componentEventList.set(EventType$7.ERROR, this.onError.bind(this));

          this._impl.componentEventList.set(EventType$7.CLICKED, this.onClicked.bind(this));

          if (this._playOnAwake && this._impl.loaded) {
            this.play();
          }
        };

        _proto.onEnable = function onEnable() {
          if (this._impl) {
            this._impl.enable();
          }
        };

        _proto.onDisable = function onDisable() {
          if (this._impl) {
            this._impl.disable();
          }
        };

        _proto.onDestroy = function onDestroy() {
          if (this._impl) {
            this._impl.destroy();

            this._impl = null;
          }
        };

        _proto.update = function update(dt) {
          if (this._impl) {
            this._impl.syncMatrix();
          }
        };

        _proto.onMetaLoaded = function onMetaLoaded() {
          EventHandler.emitEvents(this.videoPlayerEvent, this, EventType$7.META_LOADED);
          this.node.emit('meta-loaded', this);
        };

        _proto.onReadyToPlay = function onReadyToPlay() {
          if (this._playOnAwake && !this.isPlaying) {
            this.play();
          }

          EventHandler.emitEvents(this.videoPlayerEvent, this, EventType$7.READY_TO_PLAY);
          this.node.emit(EventType$7.READY_TO_PLAY, this);
        };

        _proto.onPlaying = function onPlaying() {
          EventHandler.emitEvents(this.videoPlayerEvent, this, EventType$7.PLAYING);
          this.node.emit(EventType$7.PLAYING, this);
        };

        _proto.onPaused = function onPaused() {
          EventHandler.emitEvents(this.videoPlayerEvent, this, EventType$7.PAUSED);
          this.node.emit(EventType$7.PAUSED, this);
        };

        _proto.onStopped = function onStopped() {
          EventHandler.emitEvents(this.videoPlayerEvent, this, EventType$7.STOPPED);
          this.node.emit(EventType$7.STOPPED, this);
        };

        _proto.onCompleted = function onCompleted() {
          EventHandler.emitEvents(this.videoPlayerEvent, this, EventType$7.COMPLETED);
          this.node.emit(EventType$7.COMPLETED, this);
        };

        _proto.onError = function onError() {
          EventHandler.emitEvents(this.videoPlayerEvent, this, EventType$7.ERROR);
          this.node.emit(EventType$7.ERROR, this);
        };

        _proto.onClicked = function onClicked() {
          EventHandler.emitEvents(this.videoPlayerEvent, this, EventType$7.CLICKED);
          this.node.emit(EventType$7.CLICKED, this);
        };

        _proto.play = function play() {
          if (this._impl) {
            this._impl.play();
          }
        };

        _proto.resume = function resume() {
          if (this._impl) {
            this._impl.resume();
          }
        };

        _proto.pause = function pause() {
          if (this._impl) {
            this._impl.pause();
          }
        };

        _proto.stop = function stop() {
          if (this._impl) {
            this._impl.stop();
          }
        };

        _createClass(VideoPlayer, [{
          key: "resourceType",
          get: function get() {
            return this._resourceType;
          },
          set: function set(val) {
            if (this._resourceType !== val) {
              this._resourceType = val;
              this.syncSource();
            }
          }
        }, {
          key: "remoteURL",
          get: function get() {
            return this._remoteURL;
          },
          set: function set(val) {
            if (this._remoteURL !== val) {
              this._remoteURL = val;
              this.syncSource();
            }
          }
        }, {
          key: "clip",
          get: function get() {
            return this._clip;
          },
          set: function set(val) {
            if (this._clip !== val) {
              this._clip = val;
              this.syncSource();
            }
          }
        }, {
          key: "playOnAwake",
          get: function get() {
            return this._playOnAwake;
          },
          set: function set(value) {
            this._playOnAwake = value;
          }
        }, {
          key: "playbackRate",
          get: function get() {
            return this._playbackRate;
          },
          set: function set(value) {
            this._playbackRate = value;

            if (this._impl) {
              this._impl.syncPlaybackRate(value);
            }
          }
        }, {
          key: "volume",
          get: function get() {
            return this._volume;
          },
          set: function set(value) {
            this._volume = value;

            if (this._impl) {
              this._impl.syncVolume(value);
            }
          }
        }, {
          key: "mute",
          get: function get() {
            return this._mute;
          },
          set: function set(value) {
            this._mute = value;

            if (this._impl) {
              this._impl.syncMute(value);
            }
          }
        }, {
          key: "loop",
          get: function get() {
            return this._loop;
          },
          set: function set(value) {
            this._loop = value;

            if (this._impl) {
              this._impl.syncLoop(value);
            }
          }
        }, {
          key: "keepAspectRatio",
          get: function get() {
            return this._keepAspectRatio;
          },
          set: function set(value) {
            if (this._keepAspectRatio !== value) {
              this._keepAspectRatio = value;

              if (this._impl) {
                this._impl.syncKeepAspectRatio(value);
              }
            }
          }
        }, {
          key: "fullScreenOnAwake",
          get: function get() {
            {
              if (this._impl) {
                this._fullScreenOnAwake = this._impl.fullScreenOnAwake;
                return this._fullScreenOnAwake;
              }
            }

            return this._fullScreenOnAwake;
          },
          set: function set(value) {
            if (this._fullScreenOnAwake !== value) {
              this._fullScreenOnAwake = value;

              if (this._impl) {
                this._impl.syncFullScreenOnAwake(value);
              }
            }
          }
        }, {
          key: "stayOnBottom",
          get: function get() {
            return this._stayOnBottom;
          },
          set: function set(value) {
            if (this._stayOnBottom !== value) {
              this._stayOnBottom = value;

              if (this._impl) {
                this._impl.syncStayOnBottom(value);
              }
            }
          }
        }, {
          key: "nativeVideo",
          get: function get() {
            return this._impl && this._impl.video || null;
          }
        }, {
          key: "currentTime",
          get: function get() {
            if (!this._impl) {
              return this._cachedCurrentTime;
            }

            return this._impl.getCurrentTime();
          },
          set: function set(val) {
            if (Number.isNaN(val)) {
              warn("illegal video time! value:" + val);
              return;
            }

            val = clamp(val, 0, this.duration);
            this._cachedCurrentTime = val;

            if (this._impl) {
              this._impl.seekTo(val);
            }
          }
        }, {
          key: "duration",
          get: function get() {
            if (!this._impl) {
              return 0;
            }

            return this._impl.getDuration();
          }
        }, {
          key: "state",
          get: function get() {
            if (!this._impl) {
              return EventType$7.NONE;
            }

            return this._impl.state;
          }
        }, {
          key: "isPlaying",
          get: function get() {
            if (!this._impl) {
              return false;
            }

            return this._impl.isPlaying;
          }
        }]);

        return VideoPlayer;
      }(Component), _class3$C.EventType = EventType$7, _class3$C.ResourceType = ResourceType, _temp$M), (_initializer$1k = applyDecoratedInitializer(_class2$1w.prototype, "_resourceType", [serializable], function () {
        return ResourceType.LOCAL;
      }), _initializer2$Z = applyDecoratedInitializer(_class2$1w.prototype, "_remoteURL", [serializable], function () {
        return '';
      }), _initializer3$K = applyDecoratedInitializer(_class2$1w.prototype, "_clip", [_dec3$G, serializable], function () {
        return null;
      }), _initializer4$D = applyDecoratedInitializer(_class2$1w.prototype, "_playOnAwake", [serializable], function () {
        return true;
      }), _initializer5$t = applyDecoratedInitializer(_class2$1w.prototype, "_volume", [serializable], function () {
        return 1.0;
      }), _initializer6$m = applyDecoratedInitializer(_class2$1w.prototype, "_mute", [serializable], function () {
        return false;
      }), _initializer7$i = applyDecoratedInitializer(_class2$1w.prototype, "_playbackRate", [serializable], function () {
        return 1;
      }), _initializer8$i = applyDecoratedInitializer(_class2$1w.prototype, "_loop", [serializable], function () {
        return false;
      }), _initializer9$h = applyDecoratedInitializer(_class2$1w.prototype, "_fullScreenOnAwake", [serializable], function () {
        return false;
      }), _initializer10$h = applyDecoratedInitializer(_class2$1w.prototype, "_stayOnBottom", [serializable], function () {
        return false;
      }), _initializer11$f = applyDecoratedInitializer(_class2$1w.prototype, "_keepAspectRatio", [serializable], function () {
        return true;
      }), _applyDecoratedDescriptor(_class2$1w.prototype, "resourceType", [_dec4$q], Object.getOwnPropertyDescriptor(_class2$1w.prototype, "resourceType"), _class2$1w.prototype), _applyDecoratedDescriptor(_class2$1w.prototype, "clip", [_dec5$n], Object.getOwnPropertyDescriptor(_class2$1w.prototype, "clip"), _class2$1w.prototype), _initializer12$d = applyDecoratedInitializer(_class2$1w.prototype, "videoPlayerEvent", [serializable, _dec6$f], function () {
        return [];
      })), _class2$1w)) || _class$1N) || _class$1N));
      legacyCC.internal.VideoPlayer = VideoPlayer;

      var EventType$8;

      (function (EventType) {
        EventType["NONE"] = "none";
        EventType["LOADING"] = "loading";
        EventType["LOADED"] = "loaded";
        EventType["ERROR"] = "error";
      })(EventType$8 || (EventType$8 = {}));

      var WebViewImpl = function () {
        function WebViewImpl(component) {
          this._componentEventList = new Map();
          this._state = EventType$8.NONE;
          this._wrapper = void 0;
          this._webview = null;
          this._loaded = false;
          this._forceUpdate = false;
          this._component = null;
          this._uiTrans = null;
          this._node = null;
          this._w = 0;
          this._h = 0;
          this._m00 = 0;
          this._m01 = 0;
          this._m04 = 0;
          this._m05 = 0;
          this._m12 = 0;
          this._m13 = 0;
          this._component = component;
          this._node = component.node;
          this._uiTrans = component.node.getComponent(UITransform);
          this.reset();
          this.createWebView();
        }

        var _proto = WebViewImpl.prototype;

        _proto.reset = function reset() {
          this._wrapper = null;
          this._webview = null;
          this._loaded = false;
          this._w = 0;
          this._h = 0;
          this._m00 = 0;
          this._m01 = 0;
          this._m04 = 0;
          this._m05 = 0;
          this._m12 = 0;
          this._m13 = 0;
          this._state = EventType$8.NONE;
          this._forceUpdate = false;
        };

        _proto.dispatchEvent = function dispatchEvent(key) {
          var callback = this._componentEventList.get(key);

          if (callback) {
            this._state = key;

            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }

            callback.call(this, args);
          }
        };

        _proto.destroy = function destroy() {
          this.removeWebView();
          this._wrapper = null;
          this._webview = null;
          this._loaded = false;
          this._component = null;
          this._uiTrans = null;
          this._forceUpdate = false;

          this._componentEventList.clear();
        };

        _createClass(WebViewImpl, [{
          key: "loaded",
          get: function get() {
            return this._loaded;
          }
        }, {
          key: "componentEventList",
          get: function get() {
            return this._componentEventList;
          }
        }, {
          key: "webview",
          get: function get() {
            return this._webview;
          }
        }, {
          key: "state",
          get: function get() {
            return this._state;
          }
        }, {
          key: "UICamera",
          get: function get() {
            return director.root.batcher2D.getFirstRenderCamera(this._node);
          }
        }]);

        return WebViewImpl;
      }();
      legacyCC.internal.WebViewImpl = WebViewImpl;

      var ccdocument$6 = ccwindow.document;

      var _mat4_temp$3 = mat4();

      var WebViewImplWeb = function (_WebViewImpl) {
        _inheritsLoose(WebViewImplWeb, _WebViewImpl);

        function WebViewImplWeb(component) {
          return _WebViewImpl.call(this, component) || this;
        }

        var _proto = WebViewImplWeb.prototype;

        _proto._bindDomEvent = function _bindDomEvent() {
          var _this = this;

          if (!this.webview) {
            return;
          }

          var onLoaded = function onLoaded(e) {
            _this._forceUpdate = true;

            _this.dispatchEvent(EventType$8.LOADED);

            var iframe = e.target;
            var body = iframe.contentDocument && iframe.contentDocument.body;

            if (body && body.innerHTML.includes('404')) {
              _this.dispatchEvent(EventType$8.ERROR, body.innerHTML);
            }
          };

          this.webview.addEventListener('load', onLoaded);
        };

        _proto.loadURL = function loadURL(url) {
          if (this.webview) {
            this.webview.src = url;
            this.dispatchEvent(EventType$8.LOADING);
          }
        };

        _proto.createWebView = function createWebView() {
          var wrapper = ccdocument$6.createElement('div');
          this._wrapper = wrapper;
          wrapper.id = 'webview-wrapper';
          wrapper.style['-webkit-overflow'] = 'auto';
          wrapper.style['-webkit-overflow-scrolling'] = 'touch';
          wrapper.style.position = 'absolute';
          wrapper.style.bottom = '0px';
          wrapper.style.left = '0px';
          wrapper.style.transformOrigin = '0px 100% 0px';
          wrapper.style['-webkit-transform-origin'] = '0px 100% 0px';
          game.container.appendChild(wrapper);
          var webview = ccdocument$6.createElement('iframe');
          this._webview = webview;
          webview.id = 'webview';
          webview.style.border = 'none';
          webview.style.width = '100%';
          webview.style.height = '100%';
          wrapper.appendChild(webview);

          this._bindDomEvent();
        };

        _proto.removeWebView = function removeWebView() {
          var wrapper = this._wrapper;

          if (contains$1(game.container, wrapper)) {
            game.container.removeChild(wrapper);
          }

          this.reset();
        };

        _proto.enable = function enable() {
          if (this._wrapper) {
            this._wrapper.style.visibility = 'visible';
          }
        };

        _proto.disable = function disable() {
          if (this._wrapper) {
            this._wrapper.style.visibility = 'hidden';
          }
        };

        _proto.evaluateJS = function evaluateJS(str) {
          if (this.webview) {
            var win = this.webview.contentWindow;

            if (win) {
              try {
                win.eval(str);
              } catch (e) {
                this.dispatchEvent(EventType$8.ERROR, e);
                error(e);
              }
            }
          }
        };

        _proto.setOnJSCallback = function setOnJSCallback(callback) {
          warn('The platform does not support');
        };

        _proto.setJavascriptInterfaceScheme = function setJavascriptInterfaceScheme(scheme) {
          warn('The platform does not support');
        };

        _proto.syncMatrix = function syncMatrix() {
          if (!this._wrapper || !this._uiTrans || !this._component || this._wrapper.style.visibility === 'hidden') return;
          var camera = this.UICamera;

          if (!camera) {
            return;
          }

          this._component.node.getWorldMatrix(_mat4_temp$3);

          camera.update(true);
          camera.worldMatrixToScreen(_mat4_temp$3, _mat4_temp$3, game.canvas.width, game.canvas.height);
          var _this$_uiTrans$conten = this._uiTrans.contentSize,
              width = _this$_uiTrans$conten.width,
              height = _this$_uiTrans$conten.height;

          if (!this._forceUpdate && this._m00 === _mat4_temp$3.m00 && this._m01 === _mat4_temp$3.m01 && this._m04 === _mat4_temp$3.m04 && this._m05 === _mat4_temp$3.m05 && this._m12 === _mat4_temp$3.m12 && this._m13 === _mat4_temp$3.m13 && this._w === width && this._h === height) {
            return;
          }

          this._m00 = _mat4_temp$3.m00;
          this._m01 = _mat4_temp$3.m01;
          this._m04 = _mat4_temp$3.m04;
          this._m05 = _mat4_temp$3.m05;
          this._m12 = _mat4_temp$3.m12;
          this._m13 = _mat4_temp$3.m13;
          this._w = width;
          this._h = height;
          var dpr = screenAdapter.devicePixelRatio;
          var scaleX = 1 / dpr;
          var scaleY = 1 / dpr;
          var container = game.container;
          var sx = _mat4_temp$3.m00 * scaleX;
          var b = _mat4_temp$3.m01;
          var c = _mat4_temp$3.m04;
          var sy = _mat4_temp$3.m05 * scaleY;
          this._wrapper.style.width = width + "px";
          this._wrapper.style.height = height + "px";
          var w = this._w * scaleX;
          var h = this._h * scaleY;
          var appx = w * _mat4_temp$3.m00 * this._uiTrans.anchorX;
          var appy = h * _mat4_temp$3.m05 * this._uiTrans.anchorY;
          var offsetX = container && container.style.paddingLeft ? parseInt(container.style.paddingLeft) : 0;
          var offsetY = container && container.style.paddingBottom ? parseInt(container.style.paddingBottom) : 0;
          var tx = _mat4_temp$3.m12 * scaleX - appx + offsetX;
          var ty = _mat4_temp$3.m13 * scaleY - appy + offsetY;
          var matrix = "matrix(" + sx + "," + -b + "," + -c + "," + sy + "," + tx + "," + -ty + ")";
          this._wrapper.style.transform = matrix;
          this._wrapper.style['-webkit-transform'] = matrix;
          this._forceUpdate = false;
        };

        return WebViewImplWeb;
      }(WebViewImpl);

      var WebViewImplManager = function () {
        function WebViewImplManager() {}

        WebViewImplManager.getImpl = function getImpl(component) {
          return new WebViewImplWeb(component);
        };

        return WebViewImplManager;
      }();
      legacyCC.internal.WebViewImplManager = WebViewImplManager;

      var _dec$1L, _dec2$11, _dec3$H, _class$1O, _class2$1x, _initializer$1l, _initializer2$_, _class3$D, _temp$N;
      var WebView = exports('WebView', (_dec$1L = ccclass('cc.WebView'), _dec2$11 = requireComponent(UITransform), _dec3$H = type([EventHandler]), _dec$1L(_class$1O = _dec2$11(_class$1O = (_class2$1x = (_temp$N = _class3$D = function (_Component) {
        _inheritsLoose(WebView, _Component);

        function WebView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._url = _initializer$1l && _initializer$1l();
          _this._impl = null;
          _this.webviewEvents = _initializer2$_ && _initializer2$_();
          return _this;
        }

        var _proto = WebView.prototype;

        _proto.setJavascriptInterfaceScheme = function setJavascriptInterfaceScheme(scheme) {
          if (this._impl) {
            this._impl.setJavascriptInterfaceScheme(scheme);
          }
        };

        _proto.setOnJSCallback = function setOnJSCallback(callback) {
          if (this._impl) {
            this._impl.setOnJSCallback(callback);
          }
        };

        _proto.evaluateJS = function evaluateJS(str) {
          if (this._impl) {
            this._impl.evaluateJS(str);
          }
        };

        _proto.__preload = function __preload() {

          this._impl = WebViewImplManager.getImpl(this);

          this._impl.componentEventList.set(EventType$8.LOADING, this.onLoading.bind(this));

          this._impl.componentEventList.set(EventType$8.LOADED, this.onLoaded.bind(this));

          this._impl.componentEventList.set(EventType$8.ERROR, this.onError.bind(this));

          this._impl.loadURL(this._url);
        };

        _proto.onLoading = function onLoading() {
          EventHandler.emitEvents(this.webviewEvents, this, EventType$8.LOADING);
          this.node.emit(EventType$8.LOADING, this);
        };

        _proto.onLoaded = function onLoaded() {
          EventHandler.emitEvents(this.webviewEvents, this, EventType$8.LOADED);
          this.node.emit(EventType$8.LOADED, this);
        };

        _proto.onError = function onError() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          EventHandler.emitEvents(this.webviewEvents, this, EventType$8.ERROR, args);
          this.node.emit(EventType$8.ERROR, this, args);
        };

        _proto.onEnable = function onEnable() {
          if (this._impl) {
            this._impl.enable();
          }
        };

        _proto.onDisable = function onDisable() {
          if (this._impl) {
            this._impl.disable();
          }
        };

        _proto.onDestroy = function onDestroy() {
          if (this._impl) {
            this._impl.destroy();

            this._impl = null;
          }
        };

        _proto.update = function update(dt) {
          if (this._impl) {
            this._impl.syncMatrix();
          }
        };

        _createClass(WebView, [{
          key: "url",
          get: function get() {
            return this._url;
          },
          set: function set(val) {
            this._url = val;

            if (this._impl) {
              this._impl.loadURL(val);
            }
          }
        }, {
          key: "nativeWebView",
          get: function get() {
            return this._impl && this._impl.webview || null;
          }
        }, {
          key: "state",
          get: function get() {
            if (!this._impl) {
              return EventType$8.NONE;
            }

            return this._impl.state;
          }
        }]);

        return WebView;
      }(Component), _class3$D.EventType = EventType$8, _temp$N), (_initializer$1l = applyDecoratedInitializer(_class2$1x.prototype, "_url", [serializable], function () {
        return 'https://cocos.com';
      }), _initializer2$_ = applyDecoratedInitializer(_class2$1x.prototype, "webviewEvents", [serializable, _dec3$H], function () {
        return [];
      })), _class2$1x)) || _class$1O) || _class$1O));
      legacyCC.internal.WebView = WebView;

    }
  };
});
